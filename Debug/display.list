
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  0800ace8  0800ace8  0000bce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c470  0800c470  0000e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c470  0800c470  0000d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c478  0800c478  0000e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c478  0800c478  0000d478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c47c  0800c47c  0000d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800c480  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017fc  20000218  0800c694  0000e218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  0800c694  0000ea14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027fdb  00000000  00000000  0000e23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000638a  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000122f1  00000000  00000000  0003c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  0004e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ebb  00000000  00000000  00050270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c960  00000000  00000000  0005212b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002941a  00000000  00000000  0006ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009893d  00000000  00000000  00097ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001307e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a8  00000000  00000000  00130828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00135ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800acd0 	.word	0x0800acd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800acd0 	.word	0x0800acd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_ldivmod>:
 8000a88:	b97b      	cbnz	r3, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8a:	b972      	cbnz	r2, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bfbe      	ittt	lt
 8000a90:	2000      	movlt	r0, #0
 8000a92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a96:	e006      	blt.n	8000aa6 <__aeabi_ldivmod+0x1e>
 8000a98:	bf08      	it	eq
 8000a9a:	2800      	cmpeq	r0, #0
 8000a9c:	bf1c      	itt	ne
 8000a9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aa2:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa6:	f000 b9d7 	b.w	8000e58 <__aeabi_idiv0>
 8000aaa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	db09      	blt.n	8000aca <__aeabi_ldivmod+0x42>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db1a      	blt.n	8000af0 <__aeabi_ldivmod+0x68>
 8000aba:	f000 f84d 	bl	8000b58 <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4770      	bx	lr
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db1b      	blt.n	8000b0c <__aeabi_ldivmod+0x84>
 8000ad4:	f000 f840 	bl	8000b58 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	4252      	negs	r2, r2
 8000aea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aee:	4770      	bx	lr
 8000af0:	4252      	negs	r2, r2
 8000af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af6:	f000 f82f 	bl	8000b58 <__udivmoddi4>
 8000afa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b02:	b004      	add	sp, #16
 8000b04:	4240      	negs	r0, r0
 8000b06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0a:	4770      	bx	lr
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	f000 f821 	bl	8000b58 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4252      	negs	r2, r2
 8000b22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b98c 	b.w	8000e58 <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9d08      	ldr	r5, [sp, #32]
 8000b5e:	468e      	mov	lr, r1
 8000b60:	4604      	mov	r4, r0
 8000b62:	4688      	mov	r8, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14a      	bne.n	8000bfe <__udivmoddi4+0xa6>
 8000b68:	428a      	cmp	r2, r1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	d962      	bls.n	8000c34 <__udivmoddi4+0xdc>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	b14e      	cbz	r6, 8000b88 <__udivmoddi4+0x30>
 8000b74:	f1c6 0320 	rsb	r3, r6, #32
 8000b78:	fa01 f806 	lsl.w	r8, r1, r6
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	40b7      	lsls	r7, r6
 8000b82:	ea43 0808 	orr.w	r8, r3, r8
 8000b86:	40b4      	lsls	r4, r6
 8000b88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b90:	fa1f fc87 	uxth.w	ip, r7
 8000b94:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b98:	fb01 f20c 	mul.w	r2, r1, ip
 8000b9c:	0c23      	lsrs	r3, r4, #16
 8000b9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x62>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bac:	f080 80eb 	bcs.w	8000d86 <__udivmoddi4+0x22e>
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f240 80e8 	bls.w	8000d86 <__udivmoddi4+0x22e>
 8000bb6:	3902      	subs	r1, #2
 8000bb8:	443b      	add	r3, r7
 8000bba:	1a9a      	subs	r2, r3, r2
 8000bbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc8:	b2a3      	uxth	r3, r4
 8000bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bce:	459c      	cmp	ip, r3
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0x8e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	f080 80d7 	bcs.w	8000d8a <__udivmoddi4+0x232>
 8000bdc:	459c      	cmp	ip, r3
 8000bde:	f240 80d4 	bls.w	8000d8a <__udivmoddi4+0x232>
 8000be2:	443b      	add	r3, r7
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bea:	2100      	movs	r1, #0
 8000bec:	eba3 030c 	sub.w	r3, r3, ip
 8000bf0:	b11d      	cbz	r5, 8000bfa <__udivmoddi4+0xa2>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	40f3      	lsrs	r3, r6
 8000bf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d905      	bls.n	8000c0e <__udivmoddi4+0xb6>
 8000c02:	b10d      	cbz	r5, 8000c08 <__udivmoddi4+0xb0>
 8000c04:	e9c5 0100 	strd	r0, r1, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e7f5      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000c0e:	fab3 f183 	clz	r1, r3
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d146      	bne.n	8000ca4 <__udivmoddi4+0x14c>
 8000c16:	4573      	cmp	r3, lr
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xc8>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 8108 	bhi.w	8000e30 <__udivmoddi4+0x2d8>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	4690      	mov	r8, r2
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e5      	beq.n	8000bfa <__udivmoddi4+0xa2>
 8000c2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c32:	e7e2      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f000 8091 	beq.w	8000d5c <__udivmoddi4+0x204>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f040 80a5 	bne.w	8000d8e <__udivmoddi4+0x236>
 8000c44:	1a8a      	subs	r2, r1, r2
 8000c46:	2101      	movs	r1, #1
 8000c48:	0c03      	lsrs	r3, r0, #16
 8000c4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4e:	b280      	uxth	r0, r0
 8000c50:	b2bc      	uxth	r4, r7
 8000c52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x11e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x11c>
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f200 80e3 	bhi.w	8000e3a <__udivmoddi4+0x2e2>
 8000c74:	46c4      	mov	ip, r8
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c80:	fb02 f404 	mul.w	r4, r2, r4
 8000c84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x144>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x142>
 8000c94:	429c      	cmp	r4, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2dc>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0620 	rsb	r6, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	fa2e fa06 	lsr.w	sl, lr, r6
 8000cb4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cb8:	fbba f8f9 	udiv	r8, sl, r9
 8000cbc:	fa0e fe01 	lsl.w	lr, lr, r1
 8000cc0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cc4:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	ea43 030e 	orr.w	r3, r3, lr
 8000cd0:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd4:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd8:	0c1c      	lsrs	r4, r3, #16
 8000cda:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cde:	42a0      	cmp	r0, r4
 8000ce0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x1a4>
 8000ce6:	193c      	adds	r4, r7, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 809e 	bcs.w	8000e2c <__udivmoddi4+0x2d4>
 8000cf0:	42a0      	cmp	r0, r4
 8000cf2:	f240 809b 	bls.w	8000e2c <__udivmoddi4+0x2d4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	1a24      	subs	r4, r4, r0
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d10:	45a4      	cmp	ip, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1d0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d1a:	f080 8085 	bcs.w	8000e28 <__udivmoddi4+0x2d0>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	f240 8082 	bls.w	8000e28 <__udivmoddi4+0x2d0>
 8000d24:	3b02      	subs	r3, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	fba0 8c02 	umull	r8, ip, r0, r2
 8000d34:	4564      	cmp	r4, ip
 8000d36:	4643      	mov	r3, r8
 8000d38:	46e1      	mov	r9, ip
 8000d3a:	d364      	bcc.n	8000e06 <__udivmoddi4+0x2ae>
 8000d3c:	d061      	beq.n	8000e02 <__udivmoddi4+0x2aa>
 8000d3e:	b15d      	cbz	r5, 8000d58 <__udivmoddi4+0x200>
 8000d40:	ebbe 0203 	subs.w	r2, lr, r3
 8000d44:	eb64 0409 	sbc.w	r4, r4, r9
 8000d48:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4c:	fa22 f301 	lsr.w	r3, r2, r1
 8000d50:	431e      	orrs	r6, r3
 8000d52:	40cc      	lsrs	r4, r1
 8000d54:	e9c5 6400 	strd	r6, r4, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e74e      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000d5c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d60:	0c01      	lsrs	r1, r0, #16
 8000d62:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d66:	b280      	uxth	r0, r0
 8000d68:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d72:	4638      	mov	r0, r7
 8000d74:	463c      	mov	r4, r7
 8000d76:	46b8      	mov	r8, r7
 8000d78:	46be      	mov	lr, r7
 8000d7a:	2620      	movs	r6, #32
 8000d7c:	eba2 0208 	sub.w	r2, r2, r8
 8000d80:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d84:	e765      	b.n	8000c52 <__udivmoddi4+0xfa>
 8000d86:	4601      	mov	r1, r0
 8000d88:	e717      	b.n	8000bba <__udivmoddi4+0x62>
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	e72b      	b.n	8000be6 <__udivmoddi4+0x8e>
 8000d8e:	f1c6 0120 	rsb	r1, r6, #32
 8000d92:	fa2e fc01 	lsr.w	ip, lr, r1
 8000d96:	40b7      	lsls	r7, r6
 8000d98:	fa0e fe06 	lsl.w	lr, lr, r6
 8000d9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000da0:	ea41 010e 	orr.w	r1, r1, lr
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fbbc f8fe 	udiv	r8, ip, lr
 8000dac:	b2bc      	uxth	r4, r7
 8000dae:	fb0e cc18 	mls	ip, lr, r8, ip
 8000db2:	fb08 f904 	mul.w	r9, r8, r4
 8000db6:	0c0a      	lsrs	r2, r1, #16
 8000db8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000dbc:	40b0      	lsls	r0, r6
 8000dbe:	4591      	cmp	r9, r2
 8000dc0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dc4:	b280      	uxth	r0, r0
 8000dc6:	d93e      	bls.n	8000e46 <__udivmoddi4+0x2ee>
 8000dc8:	18ba      	adds	r2, r7, r2
 8000dca:	f108 3cff 	add.w	ip, r8, #4294967295
 8000dce:	d201      	bcs.n	8000dd4 <__udivmoddi4+0x27c>
 8000dd0:	4591      	cmp	r9, r2
 8000dd2:	d81f      	bhi.n	8000e14 <__udivmoddi4+0x2bc>
 8000dd4:	eba2 0209 	sub.w	r2, r2, r9
 8000dd8:	fbb2 f9fe 	udiv	r9, r2, lr
 8000ddc:	fb09 f804 	mul.w	r8, r9, r4
 8000de0:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000de4:	b28a      	uxth	r2, r1
 8000de6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000dea:	4542      	cmp	r2, r8
 8000dec:	d229      	bcs.n	8000e42 <__udivmoddi4+0x2ea>
 8000dee:	18ba      	adds	r2, r7, r2
 8000df0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000df4:	d2c2      	bcs.n	8000d7c <__udivmoddi4+0x224>
 8000df6:	4542      	cmp	r2, r8
 8000df8:	d2c0      	bcs.n	8000d7c <__udivmoddi4+0x224>
 8000dfa:	f1a9 0102 	sub.w	r1, r9, #2
 8000dfe:	443a      	add	r2, r7
 8000e00:	e7bc      	b.n	8000d7c <__udivmoddi4+0x224>
 8000e02:	45c6      	cmp	lr, r8
 8000e04:	d29b      	bcs.n	8000d3e <__udivmoddi4+0x1e6>
 8000e06:	ebb8 0302 	subs.w	r3, r8, r2
 8000e0a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	46e1      	mov	r9, ip
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e6>
 8000e14:	eba7 0909 	sub.w	r9, r7, r9
 8000e18:	444a      	add	r2, r9
 8000e1a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e1e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e22:	fb09 f804 	mul.w	r8, r9, r4
 8000e26:	e7db      	b.n	8000de0 <__udivmoddi4+0x288>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	e77d      	b.n	8000d28 <__udivmoddi4+0x1d0>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e765      	b.n	8000cfc <__udivmoddi4+0x1a4>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e6fa      	b.n	8000c2a <__udivmoddi4+0xd2>
 8000e34:	443b      	add	r3, r7
 8000e36:	3a02      	subs	r2, #2
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x144>
 8000e3a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	e719      	b.n	8000c76 <__udivmoddi4+0x11e>
 8000e42:	4649      	mov	r1, r9
 8000e44:	e79a      	b.n	8000d7c <__udivmoddi4+0x224>
 8000e46:	eba2 0209 	sub.w	r2, r2, r9
 8000e4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e4e:	46c4      	mov	ip, r8
 8000e50:	fb09 f804 	mul.w	r8, r9, r4
 8000e54:	e7c4      	b.n	8000de0 <__udivmoddi4+0x288>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <W5500_Select>:

    return ans;
}
//ethernet код
void W5500_Select(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4801      	ldr	r0, [pc, #4]	@ (8000e68 <W5500_Select+0xc>)
 8000e62:	f002 bc3b 	b.w	80036dc <HAL_GPIO_WritePin>
 8000e66:	bf00      	nop
 8000e68:	40010800 	.word	0x40010800

08000e6c <W5500_Unselect>:
}

void W5500_Unselect(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4801      	ldr	r0, [pc, #4]	@ (8000e78 <W5500_Unselect+0xc>)
 8000e72:	f002 bc33 	b.w	80036dc <HAL_GPIO_WritePin>
 8000e76:	bf00      	nop
 8000e78:	40010800 	.word	0x40010800

08000e7c <W5500_ReadBuff>:
}

void W5500_ReadBuff(uint8_t* buff, uint16_t len){
 8000e7c:	460a      	mov	r2, r1
	HAL_SPI_Receive(&hspi1,buff,len,HAL_MAX_DELAY);
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	4601      	mov	r1, r0
 8000e84:	4801      	ldr	r0, [pc, #4]	@ (8000e8c <W5500_ReadBuff+0x10>)
 8000e86:	f005 bc07 	b.w	8006698 <HAL_SPI_Receive>
 8000e8a:	bf00      	nop
 8000e8c:	200002f4 	.word	0x200002f4

08000e90 <W5500_ReadByte>:

void W5500_WriteBuff(uint8_t* buff,uint16_t len){
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void){
 8000e90:	b507      	push	{r0, r1, r2, lr}
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000e92:	2101      	movs	r1, #1
 8000e94:	f10d 0007 	add.w	r0, sp, #7
 8000e98:	f7ff fff0 	bl	8000e7c <W5500_ReadBuff>
	return byte;
}
 8000e9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ea0:	b003      	add	sp, #12
 8000ea2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ea8 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff,uint16_t len){
 8000ea8:	460a      	mov	r2, r1
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	4601      	mov	r1, r0
 8000eb0:	4801      	ldr	r0, [pc, #4]	@ (8000eb8 <W5500_WriteBuff+0x10>)
 8000eb2:	f005 ba45 	b.w	8006340 <HAL_SPI_Transmit>
 8000eb6:	bf00      	nop
 8000eb8:	200002f4 	.word	0x200002f4

08000ebc <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte){
 8000ebc:	b507      	push	{r0, r1, r2, lr}
	W5500_WriteBuff(&byte, sizeof(byte));
 8000ebe:	2101      	movs	r1, #1
void W5500_WriteByte(uint8_t byte){
 8000ec0:	f88d 0007 	strb.w	r0, [sp, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000ec4:	f10d 0007 	add.w	r0, sp, #7
 8000ec8:	f7ff ffee 	bl	8000ea8 <W5500_WriteBuff>
}
 8000ecc:	b003      	add	sp, #12
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ed4 <set_freqq>:
	if(ch==0){
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <set_freqq+0x30>)
 8000ed8:	b940      	cbnz	r0, 8000eec <set_freqq+0x18>
		si5351_set_freq(freq[0]*1000*100ULL, SI5351_CLK0);
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	4359      	muls	r1, r3
		si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
 8000ee2:	2064      	movs	r0, #100	@ 0x64
		si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
 8000ee4:	fb81 0100 	smull	r0, r1, r1, r0
 8000ee8:	f001 bc2a 	b.w	8002740 <si5351_set_freq>
	}else if(ch==1){
 8000eec:	2801      	cmp	r0, #1
 8000eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ef2:	d102      	bne.n	8000efa <set_freqq+0x26>
		si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
 8000ef4:	6859      	ldr	r1, [r3, #4]
 8000ef6:	4341      	muls	r1, r0
 8000ef8:	e7f3      	b.n	8000ee2 <set_freqq+0xe>
		si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
 8000efa:	6899      	ldr	r1, [r3, #8]
 8000efc:	2202      	movs	r2, #2
 8000efe:	4341      	muls	r1, r0
 8000f00:	2064      	movs	r0, #100	@ 0x64
 8000f02:	e7ef      	b.n	8000ee4 <set_freqq+0x10>
 8000f04:	20000258 	.word	0x20000258

08000f08 <int_to_str>:
void int_to_str(int num, char *str) {
 8000f08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (num == 0) {
 8000f0a:	b160      	cbz	r0, 8000f26 <int_to_str+0x1e>
 8000f0c:	aa01      	add	r2, sp, #4
    int i = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4616      	mov	r6, r2
        tmp[i++] = '0' + (num % 10);
 8000f12:	240a      	movs	r4, #10
    while (num > 0) {
 8000f14:	2800      	cmp	r0, #0
 8000f16:	dc0b      	bgt.n	8000f30 <int_to_str+0x28>
 8000f18:	461a      	mov	r2, r3
 8000f1a:	1e48      	subs	r0, r1, #1
    while (i-- > 0) {
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	d211      	bcs.n	8000f44 <int_to_str+0x3c>
    str[j] = '\0';
 8000f20:	2200      	movs	r2, #0
 8000f22:	54ca      	strb	r2, [r1, r3]
 8000f24:	e002      	b.n	8000f2c <int_to_str+0x24>
        str[0] = '0';
 8000f26:	2330      	movs	r3, #48	@ 0x30
        str[1] = '\0';
 8000f28:	7048      	strb	r0, [r1, #1]
        str[0] = '0';
 8000f2a:	700b      	strb	r3, [r1, #0]
}
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
        tmp[i++] = '0' + (num % 10);
 8000f30:	fb90 f5f4 	sdiv	r5, r0, r4
 8000f34:	fb04 0015 	mls	r0, r4, r5, r0
 8000f38:	3030      	adds	r0, #48	@ 0x30
 8000f3a:	f802 0b01 	strb.w	r0, [r2], #1
 8000f3e:	3301      	adds	r3, #1
        num /= 10;
 8000f40:	4628      	mov	r0, r5
 8000f42:	e7e7      	b.n	8000f14 <int_to_str+0xc>
        str[j++] = tmp[i];
 8000f44:	5cb4      	ldrb	r4, [r6, r2]
 8000f46:	f800 4f01 	strb.w	r4, [r0, #1]!
 8000f4a:	e7e7      	b.n	8000f1c <int_to_str+0x14>

08000f4c <Is_Flash_Valid>:
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <Is_Flash_Valid+0x10>)
 8000f4e:	f8d3 0c00 	ldr.w	r0, [r3, #3072]	@ 0xc00
}
 8000f52:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <Is_Flash_Valid+0x14>)
 8000f54:	1ac3      	subs	r3, r0, r3
 8000f56:	4258      	negs	r0, r3
 8000f58:	4158      	adcs	r0, r3
 8000f5a:	4770      	bx	lr
 8000f5c:	0801f000 	.word	0x0801f000
 8000f60:	deadbeef 	.word	0xdeadbeef

08000f64 <Read_Flash_Array>:
void Read_Flash_Array(int32_t *output) {
 8000f64:	b508      	push	{r3, lr}
 8000f66:	4602      	mov	r2, r0
    if (!Is_Flash_Valid()) {
 8000f68:	f7ff fff0 	bl	8000f4c <Is_Flash_Valid>
 8000f6c:	b918      	cbnz	r0, 8000f76 <Read_Flash_Array+0x12>
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8000f6e:	6010      	str	r0, [r2, #0]
 8000f70:	6050      	str	r0, [r2, #4]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000f72:	6090      	str	r0, [r2, #8]
}
 8000f74:	bd08      	pop	{r3, pc}
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000f76:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <Read_Flash_Array+0x20>)
 8000f78:	cb03      	ldmia	r3!, {r0, r1}
 8000f7a:	6010      	str	r0, [r2, #0]
 8000f7c:	6051      	str	r1, [r2, #4]
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	e7f7      	b.n	8000f72 <Read_Flash_Array+0xe>
 8000f82:	bf00      	nop
 8000f84:	0801fc04 	.word	0x0801fc04

08000f88 <Write_Flash_Array>:
void Write_Flash_Array(int32_t *data) {
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b08b      	sub	sp, #44	@ 0x2c
 8000f8c:	4605      	mov	r5, r0
    HAL_FLASH_Unlock();
 8000f8e:	f002 f9cd 	bl	800332c <HAL_FLASH_Unlock>
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000f92:	2300      	movs	r3, #0
 8000f94:	9302      	str	r3, [sp, #8]
    erase.NbPages = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	4c12      	ldr	r4, [pc, #72]	@ (8000fe4 <Write_Flash_Array+0x5c>)
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000f9a:	a901      	add	r1, sp, #4
 8000f9c:	a802      	add	r0, sp, #8
    erase.NbPages = 1;
 8000f9e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000fa2:	f002 fa6d 	bl	8003480 <HAL_FLASHEx_Erase>
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <Write_Flash_Array+0x60>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000fa8:	6828      	ldr	r0, [r5, #0]
 8000faa:	6869      	ldr	r1, [r5, #4]
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000fac:	9306      	str	r3, [sp, #24]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000fae:	ab07      	add	r3, sp, #28
 8000fb0:	c303      	stmia	r3!, {r0, r1}
 8000fb2:	68a8      	ldr	r0, [r5, #8]
    for (uint32_t i = 0; i < size; i++) {
 8000fb4:	4f0d      	ldr	r7, [pc, #52]	@ (8000fec <Write_Flash_Array+0x64>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000fb6:	6018      	str	r0, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000fb8:	ae06      	add	r6, sp, #24
        uint32_t value = ptr[i];
 8000fba:	f856 5b04 	ldr.w	r5, [r6], #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	b2aa      	uxth	r2, r5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f002 f9f7 	bl	80033b8 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000fca:	1ca1      	adds	r1, r4, #2
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2001      	movs	r0, #1
 8000fd0:	0c2a      	lsrs	r2, r5, #16
        addr += 4;
 8000fd2:	3404      	adds	r4, #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000fd4:	f002 f9f0 	bl	80033b8 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < size; i++) {
 8000fd8:	42bc      	cmp	r4, r7
 8000fda:	d1ee      	bne.n	8000fba <Write_Flash_Array+0x32>
    HAL_FLASH_Lock();
 8000fdc:	f002 f9b8 	bl	8003350 <HAL_FLASH_Lock>
}
 8000fe0:	b00b      	add	sp, #44	@ 0x2c
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe4:	0801fc00 	.word	0x0801fc00
 8000fe8:	deadbeef 	.word	0xdeadbeef
 8000fec:	0801fc20 	.word	0x0801fc20

08000ff0 <print_interface_mode0>:
void print_interface_mode0(){
 8000ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ssd1306_SetCursor(1, 1);//установка курсора
 8000ff2:	2101      	movs	r1, #1
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 8000ff4:	2501      	movs	r5, #1
 8000ff6:	4c21      	ldr	r4, [pc, #132]	@ (800107c <print_interface_mode0+0x8c>)
	ssd1306_SetCursor(1, 1);//установка курсора
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	f001 ffe5 	bl	8002fc8 <ssd1306_SetCursor>
	ssd1306_Fill(Black);//заполнение экрана чёрным(типа стирание)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f001 ff32 	bl	8002e68 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 8001004:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001008:	481d      	ldr	r0, [pc, #116]	@ (8001080 <print_interface_mode0+0x90>)
 800100a:	9500      	str	r5, [sp, #0]
 800100c:	f001 ffc6 	bl	8002f9c <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8001010:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001014:	481b      	ldr	r0, [pc, #108]	@ (8001084 <print_interface_mode0+0x94>)
 8001016:	9500      	str	r5, [sp, #0]
 8001018:	f001 ffc0 	bl	8002f9c <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 800101c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001020:	4819      	ldr	r0, [pc, #100]	@ (8001088 <print_interface_mode0+0x98>)
 8001022:	9500      	str	r5, [sp, #0]
 8001024:	f001 ffba 	bl	8002f9c <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8001028:	210a      	movs	r1, #10
 800102a:	4628      	mov	r0, r5
 800102c:	f001 ffcc 	bl	8002fc8 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8001030:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001034:	4815      	ldr	r0, [pc, #84]	@ (800108c <print_interface_mode0+0x9c>)
 8001036:	9500      	str	r5, [sp, #0]
 8001038:	f001 ffb0 	bl	8002f9c <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 800103c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001040:	4810      	ldr	r0, [pc, #64]	@ (8001084 <print_interface_mode0+0x94>)
 8001042:	9500      	str	r5, [sp, #0]
 8001044:	f001 ffaa 	bl	8002f9c <ssd1306_WriteString>
	if(choiced_channel==0){
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <print_interface_mode0+0xa0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b953      	cbnz	r3, 8001064 <print_interface_mode0+0x74>
		ssd1306_WriteString("ch0", Font_7x10, White);
 800104e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001052:	4810      	ldr	r0, [pc, #64]	@ (8001094 <print_interface_mode0+0xa4>)
 8001054:	9500      	str	r5, [sp, #0]
		ssd1306_WriteString("ch2", Font_7x10, White);
 8001056:	f001 ffa1 	bl	8002f9c <ssd1306_WriteString>
}
 800105a:	b003      	add	sp, #12
 800105c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ssd1306_UpdateScreen();//самая важная функция, без которой что было отправлено на дисплей не отобразится
 8001060:	f001 bf0e 	b.w	8002e80 <ssd1306_UpdateScreen>
	}else if(choiced_channel==1){
 8001064:	2b01      	cmp	r3, #1
		ssd1306_WriteString("ch1", Font_7x10, White);
 8001066:	bf07      	ittee	eq
 8001068:	9300      	streq	r3, [sp, #0]
 800106a:	480b      	ldreq	r0, [pc, #44]	@ (8001098 <print_interface_mode0+0xa8>)
		ssd1306_WriteString("ch2", Font_7x10, White);
 800106c:	480b      	ldrne	r0, [pc, #44]	@ (800109c <print_interface_mode0+0xac>)
 800106e:	9500      	strne	r5, [sp, #0]
		ssd1306_WriteString("ch1", Font_7x10, White);
 8001070:	bf0c      	ite	eq
 8001072:	e894 000e 	ldmiaeq.w	r4, {r1, r2, r3}
		ssd1306_WriteString("ch2", Font_7x10, White);
 8001076:	e894 000e 	ldmiane.w	r4, {r1, r2, r3}
 800107a:	e7ec      	b.n	8001056 <print_interface_mode0+0x66>
 800107c:	0800ae44 	.word	0x0800ae44
 8001080:	2000023d 	.word	0x2000023d
 8001084:	0800ace8 	.word	0x0800ace8
 8001088:	20000244 	.word	0x20000244
 800108c:	2000024b 	.word	0x2000024b
 8001090:	2000023b 	.word	0x2000023b
 8001094:	0800acec 	.word	0x0800acec
 8001098:	0800acf0 	.word	0x0800acf0
 800109c:	0800acf4 	.word	0x0800acf4

080010a0 <print_interface_mode1>:
	ssd1306_SetCursor(1, 1);
 80010a0:	2101      	movs	r1, #1
void print_interface_mode1(){
 80010a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_SetCursor(1, 1);
 80010a6:	4608      	mov	r0, r1
void print_interface_mode1(){
 80010a8:	b085      	sub	sp, #20
 80010aa:	4d5c      	ldr	r5, [pc, #368]	@ (800121c <print_interface_mode1+0x17c>)
	ssd1306_SetCursor(1, 1);
 80010ac:	f001 ff8c 	bl	8002fc8 <ssd1306_SetCursor>
	if(choiced_num==0){
 80010b0:	4f5b      	ldr	r7, [pc, #364]	@ (8001220 <print_interface_mode1+0x180>)
	ssd1306_Fill(Black);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f001 fed8 	bl	8002e68 <ssd1306_Fill>
		uint16_t size=strlen(num_string[choiced_channel]);
 80010b8:	7828      	ldrb	r0, [r5, #0]
 80010ba:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8001224 <print_interface_mode1+0x184>
	if(choiced_num==0){
 80010be:	783b      	ldrb	r3, [r7, #0]
		uint16_t size=strlen(num_string[choiced_channel]);
 80010c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80010c4:	4440      	add	r0, r8
	if(choiced_num==0){
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d13d      	bne.n	8001146 <print_interface_mode1+0xa6>
		uint16_t size=strlen(num_string[choiced_channel]);
 80010ca:	f7ff f841 	bl	8000150 <strlen>
			ssd1306_WriteString("0", Font_7x10, White);
 80010ce:	2701      	movs	r7, #1
		uint16_t size=strlen(num_string[choiced_channel]);
 80010d0:	4606      	mov	r6, r0
		for(int i=size;i<6;++i){
 80010d2:	4c55      	ldr	r4, [pc, #340]	@ (8001228 <print_interface_mode1+0x188>)
			ssd1306_WriteString("0", Font_7x10, White);
 80010d4:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 800122c <print_interface_mode1+0x18c>
		for(int i=size;i<6;++i){
 80010d8:	2e05      	cmp	r6, #5
 80010da:	dd2c      	ble.n	8001136 <print_interface_mode1+0x96>
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 80010dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80010e0:	2601      	movs	r6, #1
 80010e2:	7828      	ldrb	r0, [r5, #0]
 80010e4:	9600      	str	r6, [sp, #0]
 80010e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80010ea:	4440      	add	r0, r8
 80010ec:	f001 ff56 	bl	8002f9c <ssd1306_WriteString>
		ssd1306_WriteString("   ", Font_7x10, White);
 80010f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80010f4:	484e      	ldr	r0, [pc, #312]	@ (8001230 <print_interface_mode1+0x190>)
 80010f6:	9600      	str	r6, [sp, #0]
 80010f8:	f001 ff50 	bl	8002f9c <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 80010fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001234 <print_interface_mode1+0x194>)
 80010fe:	484e      	ldr	r0, [pc, #312]	@ (8001238 <print_interface_mode1+0x198>)
 8001100:	9600      	str	r6, [sp, #0]
 8001102:	cb0e      	ldmia	r3, {r1, r2, r3}
			ssd1306_WriteString("^", Font_7x10, White);
 8001104:	f001 ff4a 	bl	8002f9c <ssd1306_WriteString>
	if(freq[choiced_channel]==160000){
 8001108:	782a      	ldrb	r2, [r5, #0]
 800110a:	4b4c      	ldr	r3, [pc, #304]	@ (800123c <print_interface_mode1+0x19c>)
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	4a4b      	ldr	r2, [pc, #300]	@ (8001240 <print_interface_mode1+0x1a0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d175      	bne.n	8001202 <print_interface_mode1+0x162>
		ssd1306_SetCursor(77, 18);
 8001116:	2112      	movs	r1, #18
 8001118:	204d      	movs	r0, #77	@ 0x4d
 800111a:	f001 ff55 	bl	8002fc8 <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 800111e:	2201      	movs	r2, #1
 8001120:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <print_interface_mode1+0x188>)
 8001122:	4848      	ldr	r0, [pc, #288]	@ (8001244 <print_interface_mode1+0x1a4>)
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	cb0e      	ldmia	r3, {r1, r2, r3}
		ssd1306_WriteString("MIN", Font_7x10, White);
 8001128:	f001 ff38 	bl	8002f9c <ssd1306_WriteString>
}
 800112c:	b005      	add	sp, #20
 800112e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_UpdateScreen();
 8001132:	f001 bea5 	b.w	8002e80 <ssd1306_UpdateScreen>
			ssd1306_WriteString("0", Font_7x10, White);
 8001136:	4648      	mov	r0, r9
 8001138:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800113c:	9700      	str	r7, [sp, #0]
 800113e:	f001 ff2d 	bl	8002f9c <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8001142:	3601      	adds	r6, #1
 8001144:	e7c8      	b.n	80010d8 <print_interface_mode1+0x38>
		uint16_t size=strlen(num_string[choiced_channel]);
 8001146:	f7ff f803 	bl	8000150 <strlen>
		for(int i=5;i>size-1;--i){
 800114a:	2405      	movs	r4, #5
		uint16_t size=strlen(num_string[choiced_channel]);
 800114c:	4606      	mov	r6, r0
				ssd1306_WriteString("0", Font_7x10, White);
 800114e:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8001228 <print_interface_mode1+0x188>
 8001152:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 800122c <print_interface_mode1+0x18c>
				ssd1306_WriteString("0", Font_11x18, White);
 8001156:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8001234 <print_interface_mode1+0x194>
		for(int i=5;i>size-1;--i){
 800115a:	42a6      	cmp	r6, r4
 800115c:	dd28      	ble.n	80011b0 <print_interface_mode1+0x110>
		for(int i=0;i<size;++i){
 800115e:	2400      	movs	r4, #0
 8001160:	46a3      	mov	fp, r4
				ssd1306_WriteString(str, Font_7x10, White);
 8001162:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8001228 <print_interface_mode1+0x188>
				ssd1306_WriteString(str, Font_11x18, White);
 8001166:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8001234 <print_interface_mode1+0x194>
		for(int i=0;i<size;++i){
 800116a:	42a6      	cmp	r6, r4
 800116c:	dc30      	bgt.n	80011d0 <print_interface_mode1+0x130>
		ssd1306_WriteString("   ", Font_7x10, White);
 800116e:	2601      	movs	r6, #1
 8001170:	4c2d      	ldr	r4, [pc, #180]	@ (8001228 <print_interface_mode1+0x188>)
 8001172:	9600      	str	r6, [sp, #0]
 8001174:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <print_interface_mode1+0x190>)
 800117a:	f001 ff0f 	bl	8002f9c <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 800117e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001182:	9600      	str	r6, [sp, #0]
 8001184:	482c      	ldr	r0, [pc, #176]	@ (8001238 <print_interface_mode1+0x198>)
 8001186:	f001 ff09 	bl	8002f9c <ssd1306_WriteString>
		if(choice==1){
 800118a:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <print_interface_mode1+0x1a8>)
 800118c:	781e      	ldrb	r6, [r3, #0]
 800118e:	2e01      	cmp	r6, #1
 8001190:	d1ba      	bne.n	8001108 <print_interface_mode1+0x68>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 8001192:	7838      	ldrb	r0, [r7, #0]
 8001194:	2112      	movs	r1, #18
 8001196:	f1c0 0006 	rsb	r0, r0, #6
 800119a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800119e:	3001      	adds	r0, #1
 80011a0:	b2c0      	uxtb	r0, r0
 80011a2:	f001 ff11 	bl	8002fc8 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 80011a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80011aa:	4828      	ldr	r0, [pc, #160]	@ (800124c <print_interface_mode1+0x1ac>)
 80011ac:	9600      	str	r6, [sp, #0]
 80011ae:	e7a9      	b.n	8001104 <print_interface_mode1+0x64>
			if(i==choiced_num-1){
 80011b0:	783b      	ldrb	r3, [r7, #0]
				ssd1306_WriteString("0", Font_7x10, White);
 80011b2:	4658      	mov	r0, fp
			if(i==choiced_num-1){
 80011b4:	3b01      	subs	r3, #1
 80011b6:	42a3      	cmp	r3, r4
 80011b8:	f04f 0301 	mov.w	r3, #1
				ssd1306_WriteString("0", Font_11x18, White);
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	bf0c      	ite	eq
 80011c0:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString("0", Font_7x10, White);
 80011c4:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
 80011c8:	f001 fee8 	bl	8002f9c <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 80011cc:	3c01      	subs	r4, #1
 80011ce:	e7c4      	b.n	800115a <print_interface_mode1+0xba>
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80011d0:	782b      	ldrb	r3, [r5, #0]
				ssd1306_WriteString(str, Font_7x10, White);
 80011d2:	a803      	add	r0, sp, #12
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80011d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80011d8:	4443      	add	r3, r8
 80011da:	5d1a      	ldrb	r2, [r3, r4]
			if(i==size-choiced_num){
 80011dc:	783b      	ldrb	r3, [r7, #0]
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80011de:	f88d 200c 	strb.w	r2, [sp, #12]
			if(i==size-choiced_num){
 80011e2:	1af3      	subs	r3, r6, r3
 80011e4:	42a3      	cmp	r3, r4
				ssd1306_WriteString(str, Font_11x18, White);
 80011e6:	f04f 0301 	mov.w	r3, #1
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	bf0c      	ite	eq
 80011ee:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString(str, Font_7x10, White);
 80011f2:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80011f6:	f88d b00d 	strb.w	fp, [sp, #13]
		for(int i=0;i<size;++i){
 80011fa:	3401      	adds	r4, #1
				ssd1306_WriteString(str, Font_7x10, White);
 80011fc:	f001 fece 	bl	8002f9c <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8001200:	e7b3      	b.n	800116a <print_interface_mode1+0xca>
	}else if(freq[choiced_channel]==8){
 8001202:	2b08      	cmp	r3, #8
 8001204:	d192      	bne.n	800112c <print_interface_mode1+0x8c>
		ssd1306_SetCursor(77, 18);
 8001206:	2112      	movs	r1, #18
 8001208:	204d      	movs	r0, #77	@ 0x4d
 800120a:	f001 fedd 	bl	8002fc8 <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 800120e:	2201      	movs	r2, #1
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <print_interface_mode1+0x188>)
 8001212:	9200      	str	r2, [sp, #0]
 8001214:	480e      	ldr	r0, [pc, #56]	@ (8001250 <print_interface_mode1+0x1b0>)
 8001216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001218:	e786      	b.n	8001128 <print_interface_mode1+0x88>
 800121a:	bf00      	nop
 800121c:	2000023b 	.word	0x2000023b
 8001220:	2000023c 	.word	0x2000023c
 8001224:	2000023d 	.word	0x2000023d
 8001228:	0800ae44 	.word	0x0800ae44
 800122c:	0800acee 	.word	0x0800acee
 8001230:	0800ace8 	.word	0x0800ace8
 8001234:	0800ae38 	.word	0x0800ae38
 8001238:	0800acf8 	.word	0x0800acf8
 800123c:	20000258 	.word	0x20000258
 8001240:	00027100 	.word	0x00027100
 8001244:	0800acff 	.word	0x0800acff
 8001248:	20000252 	.word	0x20000252
 800124c:	0800acfd 	.word	0x0800acfd
 8001250:	0800ad03 	.word	0x0800ad03

08001254 <int_mode_0>:
void int_mode_0(){
 8001254:	b510      	push	{r4, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001256:	2101      	movs	r1, #1
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <int_mode_0+0x6c>)
 800125a:	f002 fa39 	bl	80036d0 <HAL_GPIO_ReadPin>
 800125e:	b910      	cbnz	r0, 8001266 <int_mode_0+0x12>
		choice=1;
 8001260:	2201      	movs	r2, #1
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <int_mode_0+0x70>)
 8001264:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8001266:	4c16      	ldr	r4, [pc, #88]	@ (80012c0 <int_mode_0+0x6c>)
 8001268:	2101      	movs	r1, #1
 800126a:	4620      	mov	r0, r4
 800126c:	f002 fa30 	bl	80036d0 <HAL_GPIO_ReadPin>
 8001270:	2800      	cmp	r0, #0
 8001272:	d0f9      	beq.n	8001268 <int_mode_0+0x14>
	if(choice==0){
 8001274:	4a13      	ldr	r2, [pc, #76]	@ (80012c4 <int_mode_0+0x70>)
 8001276:	7813      	ldrb	r3, [r2, #0]
 8001278:	b98b      	cbnz	r3, 800129e <int_mode_0+0x4a>
		choiced_channel=get_encoder()%3;
 800127a:	2203      	movs	r2, #3
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <int_mode_0+0x74>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	2b00      	cmp	r3, #0
 8001282:	bfb8      	it	lt
 8001284:	3303      	addlt	r3, #3
 8001286:	109b      	asrs	r3, r3, #2
		choiced_channel=get_encoder()%3;
 8001288:	fb93 f2f2 	sdiv	r2, r3, r2
 800128c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <int_mode_0+0x78>)
 8001294:	7013      	strb	r3, [r2, #0]
}
 8001296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode0();
 800129a:	f7ff bea9 	b.w	8000ff0 <print_interface_mode0>
	}else if(choice==1){
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10c      	bne.n	80012bc <int_mode_0+0x68>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 80012a2:	2004      	movs	r0, #4
 80012a4:	4908      	ldr	r1, [pc, #32]	@ (80012c8 <int_mode_0+0x74>)
 80012a6:	6248      	str	r0, [r1, #36]	@ 0x24
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 80012a8:	4909      	ldr	r1, [pc, #36]	@ (80012d0 <int_mode_0+0x7c>)
 80012aa:	700b      	strb	r3, [r1, #0]
		interface_mode=1;
 80012ac:	4909      	ldr	r1, [pc, #36]	@ (80012d4 <int_mode_0+0x80>)
 80012ae:	700b      	strb	r3, [r1, #0]
		choice=0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	7013      	strb	r3, [r2, #0]
}
 80012b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode1();
 80012b8:	f7ff bef2 	b.w	80010a0 <print_interface_mode1>
}
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	bf00      	nop
 80012c0:	40010800 	.word	0x40010800
 80012c4:	20000252 	.word	0x20000252
 80012c8:	40012c00 	.word	0x40012c00
 80012cc:	2000023b 	.word	0x2000023b
 80012d0:	2000023c 	.word	0x2000023c
 80012d4:	2000023a 	.word	0x2000023a

080012d8 <min_freq>:
	num_string[choiced_channel][0]='8';
 80012d8:	2038      	movs	r0, #56	@ 0x38
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <min_freq+0x18>)
 80012dc:	4a05      	ldr	r2, [pc, #20]	@ (80012f4 <min_freq+0x1c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80012e4:	18d1      	adds	r1, r2, r3
 80012e6:	54d0      	strb	r0, [r2, r3]
	num_string[choiced_channel][1]='\0';
 80012e8:	2300      	movs	r3, #0
 80012ea:	704b      	strb	r3, [r1, #1]
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000023b 	.word	0x2000023b
 80012f4:	2000023d 	.word	0x2000023d

080012f8 <max_freq>:
	num_string[choiced_channel][0]='1';
 80012f8:	2031      	movs	r0, #49	@ 0x31
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <max_freq+0x24>)
 80012fc:	4908      	ldr	r1, [pc, #32]	@ (8001320 <max_freq+0x28>)
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001304:	188b      	adds	r3, r1, r2
 8001306:	5488      	strb	r0, [r1, r2]
	num_string[choiced_channel][1]='6';
 8001308:	2236      	movs	r2, #54	@ 0x36
 800130a:	705a      	strb	r2, [r3, #1]
	num_string[choiced_channel][2]='0';
 800130c:	2230      	movs	r2, #48	@ 0x30
 800130e:	709a      	strb	r2, [r3, #2]
	num_string[choiced_channel][3]='0';
 8001310:	70da      	strb	r2, [r3, #3]
	num_string[choiced_channel][4]='0';
 8001312:	711a      	strb	r2, [r3, #4]
	num_string[choiced_channel][5]='0';
 8001314:	715a      	strb	r2, [r3, #5]
	num_string[choiced_channel][6]='\0';
 8001316:	2200      	movs	r2, #0
 8001318:	719a      	strb	r2, [r3, #6]
}
 800131a:	4770      	bx	lr
 800131c:	2000023b 	.word	0x2000023b
 8001320:	2000023d 	.word	0x2000023d

08001324 <int_mode_1>:
void int_mode_1(){
 8001324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001328:	2101      	movs	r1, #1
void int_mode_1(){
 800132a:	b087      	sub	sp, #28
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 800132c:	4861      	ldr	r0, [pc, #388]	@ (80014b4 <int_mode_1+0x190>)
 800132e:	f002 f9cf 	bl	80036d0 <HAL_GPIO_ReadPin>
 8001332:	b978      	cbnz	r0, 8001354 <int_mode_1+0x30>
		if(choice==0){
 8001334:	4a60      	ldr	r2, [pc, #384]	@ (80014b8 <int_mode_1+0x194>)
			if(choiced_num!=0){
 8001336:	4b61      	ldr	r3, [pc, #388]	@ (80014bc <int_mode_1+0x198>)
		if(choice==0){
 8001338:	7811      	ldrb	r1, [r2, #0]
			if(choiced_num!=0){
 800133a:	781b      	ldrb	r3, [r3, #0]
		if(choice==0){
 800133c:	bb39      	cbnz	r1, 800138e <int_mode_1+0x6a>
			choice=1;
 800133e:	2101      	movs	r1, #1
 8001340:	7011      	strb	r1, [r2, #0]
			if(choiced_num!=0){
 8001342:	b13b      	cbz	r3, 8001354 <int_mode_1+0x30>
				prev_encoder=1000;
 8001344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001348:	4b5d      	ldr	r3, [pc, #372]	@ (80014c0 <int_mode_1+0x19c>)
 800134a:	601a      	str	r2, [r3, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 800134c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001350:	4b5c      	ldr	r3, [pc, #368]	@ (80014c4 <int_mode_1+0x1a0>)
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8001354:	4c57      	ldr	r4, [pc, #348]	@ (80014b4 <int_mode_1+0x190>)
 8001356:	2101      	movs	r1, #1
 8001358:	4620      	mov	r0, r4
 800135a:	f002 f9b9 	bl	80036d0 <HAL_GPIO_ReadPin>
 800135e:	2800      	cmp	r0, #0
 8001360:	d0f9      	beq.n	8001356 <int_mode_1+0x32>
	if(choice==0){
 8001362:	4b55      	ldr	r3, [pc, #340]	@ (80014b8 <int_mode_1+0x194>)
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	b9ba      	cbnz	r2, 8001398 <int_mode_1+0x74>
		choiced_num=get_encoder()%7;
 8001368:	2207      	movs	r2, #7
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 800136a:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <int_mode_1+0x1a0>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	2b00      	cmp	r3, #0
 8001370:	bfb8      	it	lt
 8001372:	3303      	addlt	r3, #3
 8001374:	109b      	asrs	r3, r3, #2
		choiced_num=get_encoder()%7;
 8001376:	fb93 f2f2 	sdiv	r2, r3, r2
 800137a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	4a4e      	ldr	r2, [pc, #312]	@ (80014bc <int_mode_1+0x198>)
 8001382:	7013      	strb	r3, [r2, #0]
}
 8001384:	b007      	add	sp, #28
 8001386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode1();
 800138a:	f7ff be89 	b.w	80010a0 <print_interface_mode1>
			choice=0;
 800138e:	7010      	strb	r0, [r2, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8001390:	4a4c      	ldr	r2, [pc, #304]	@ (80014c4 <int_mode_1+0x1a0>)
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001396:	e7dd      	b.n	8001354 <int_mode_1+0x30>
	}else if(choice==1){
 8001398:	2a01      	cmp	r2, #1
 800139a:	f040 8087 	bne.w	80014ac <int_mode_1+0x188>
		if(choiced_num==0){
 800139e:	4a47      	ldr	r2, [pc, #284]	@ (80014bc <int_mode_1+0x198>)
			set_freqq(choiced_channel);
 80013a0:	4e49      	ldr	r6, [pc, #292]	@ (80014c8 <int_mode_1+0x1a4>)
		if(choiced_num==0){
 80013a2:	7814      	ldrb	r4, [r2, #0]
			set_freqq(choiced_channel);
 80013a4:	7835      	ldrb	r5, [r6, #0]
		if(choiced_num==0){
 80013a6:	b98c      	cbnz	r4, 80013cc <int_mode_1+0xa8>
			choice=0;
 80013a8:	701c      	strb	r4, [r3, #0]
			interface_mode=0;
 80013aa:	4b48      	ldr	r3, [pc, #288]	@ (80014cc <int_mode_1+0x1a8>)
			set_freqq(choiced_channel);
 80013ac:	4628      	mov	r0, r5
			interface_mode=0;
 80013ae:	701c      	strb	r4, [r3, #0]
			set_freqq(choiced_channel);
 80013b0:	f7ff fd90 	bl	8000ed4 <set_freqq>
			Write_Flash_Array(freq);//обновляем значение в памяти
 80013b4:	4846      	ldr	r0, [pc, #280]	@ (80014d0 <int_mode_1+0x1ac>)
 80013b6:	f7ff fde7 	bl	8000f88 <Write_Flash_Array>
			set_encoder(choiced_channel);
 80013ba:	7833      	ldrb	r3, [r6, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 80013bc:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <int_mode_1+0x1a0>)
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80013c2:	b007      	add	sp, #28
 80013c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode0();
 80013c8:	f7ff be12 	b.w	8000ff0 <print_interface_mode0>
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80013cc:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <int_mode_1+0x1a0>)
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80013ce:	4f3c      	ldr	r7, [pc, #240]	@ (80014c0 <int_mode_1+0x19c>)
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80013d2:	6838      	ldr	r0, [r7, #0]
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bfb8      	it	lt
 80013d8:	3303      	addlt	r3, #3
 80013da:	109a      	asrs	r2, r3, #2
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80013dc:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80013e0:	9201      	str	r2, [sp, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80013e2:	f7ff f80f 	bl	8000404 <__aeabi_i2d>
 80013e6:	4680      	mov	r8, r0
 80013e8:	1e60      	subs	r0, r4, #1
 80013ea:	4689      	mov	r9, r1
 80013ec:	f7ff f80a 	bl	8000404 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4682      	mov	sl, r0
 80013f6:	468b      	mov	fp, r1
 80013f8:	2000      	movs	r0, #0
 80013fa:	4936      	ldr	r1, [pc, #216]	@ (80014d4 <int_mode_1+0x1b0>)
 80013fc:	f008 fd5c 	bl	8009eb8 <pow>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4c32      	ldr	r4, [pc, #200]	@ (80014d0 <int_mode_1+0x1ac>)
 8001406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800140a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800140e:	f7fe fff9 	bl	8000404 <__aeabi_i2d>
 8001412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800141a:	4640      	mov	r0, r8
 800141c:	4649      	mov	r1, r9
 800141e:	f7ff f85b 	bl	80004d8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800142a:	f7fe fe9f 	bl	800016c <__adddf3>
 800142e:	f7ff fb03 	bl	8000a38 <__aeabi_d2iz>
			if(freq[choiced_channel]<0){
 8001432:	2800      	cmp	r0, #0
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8001434:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
			if(freq[choiced_channel]<0){
 8001438:	da1a      	bge.n	8001470 <int_mode_1+0x14c>
				freq[choiced_channel]=160000+freq[choiced_channel];//если частота очень мала делаем её почти максимальной
 800143a:	f500 301c 	add.w	r0, r0, #159744	@ 0x27000
 800143e:	f500 7080 	add.w	r0, r0, #256	@ 0x100
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001442:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
			if(freq[choiced_channel]<8){
 8001446:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
			prev_encoder=delta;
 800144a:	9b01      	ldr	r3, [sp, #4]
			if(freq[choiced_channel]<8){
 800144c:	2a07      	cmp	r2, #7
			prev_encoder=delta;
 800144e:	603b      	str	r3, [r7, #0]
			if(freq[choiced_channel]<8){
 8001450:	dc24      	bgt.n	800149c <int_mode_1+0x178>
				freq[choiced_channel]=8;
 8001452:	2308      	movs	r3, #8
 8001454:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				min_freq();
 8001458:	f7ff ff3e 	bl	80012d8 <min_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);//обновляем строку с выбранной частотой
 800145c:	7833      	ldrb	r3, [r6, #0]
 800145e:	491e      	ldr	r1, [pc, #120]	@ (80014d8 <int_mode_1+0x1b4>)
 8001460:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001464:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8001468:	4411      	add	r1, r2
 800146a:	f7ff fd4d 	bl	8000f08 <int_to_str>
 800146e:	e789      	b.n	8001384 <int_mode_1+0x60>
			}else if(freq[choiced_channel]>999999){
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <int_mode_1+0x1b8>)
 8001472:	4298      	cmp	r0, r3
 8001474:	dde7      	ble.n	8001446 <int_mode_1+0x122>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001476:	4652      	mov	r2, sl
 8001478:	465b      	mov	r3, fp
 800147a:	2000      	movs	r0, #0
 800147c:	4915      	ldr	r1, [pc, #84]	@ (80014d4 <int_mode_1+0x1b0>)
 800147e:	f008 fd1b 	bl	8009eb8 <pow>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4640      	mov	r0, r8
 8001488:	4649      	mov	r1, r9
 800148a:	f7ff f825 	bl	80004d8 <__aeabi_dmul>
 800148e:	2200      	movs	r2, #0
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <int_mode_1+0x1bc>)
 8001492:	f7fe fe6b 	bl	800016c <__adddf3>
 8001496:	f7ff facf 	bl	8000a38 <__aeabi_d2iz>
 800149a:	e7d2      	b.n	8001442 <int_mode_1+0x11e>
			}else if(freq[choiced_channel]>160000){
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <int_mode_1+0x1c0>)
 800149e:	429a      	cmp	r2, r3
 80014a0:	dddc      	ble.n	800145c <int_mode_1+0x138>
				freq[choiced_channel]=160000;
 80014a2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				max_freq();
 80014a6:	f7ff ff27 	bl	80012f8 <max_freq>
 80014aa:	e7d7      	b.n	800145c <int_mode_1+0x138>
}
 80014ac:	b007      	add	sp, #28
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	bf00      	nop
 80014b4:	40010800 	.word	0x40010800
 80014b8:	20000252 	.word	0x20000252
 80014bc:	2000023c 	.word	0x2000023c
 80014c0:	20000254 	.word	0x20000254
 80014c4:	40012c00 	.word	0x40012c00
 80014c8:	2000023b 	.word	0x2000023b
 80014cc:	2000023a 	.word	0x2000023a
 80014d0:	20000258 	.word	0x20000258
 80014d4:	40240000 	.word	0x40240000
 80014d8:	2000023d 	.word	0x2000023d
 80014dc:	000f423f 	.word	0x000f423f
 80014e0:	401c0000 	.word	0x401c0000
 80014e4:	00027100 	.word	0x00027100

080014e8 <str_to_int>:
    while(str[i] >= '0' && str[i] <= '9'){
 80014e8:	2200      	movs	r2, #0
uint32_t str_to_int(char* str){
 80014ea:	4601      	mov	r1, r0
 80014ec:	b530      	push	{r4, r5, lr}
    uint32_t ans = 0;
 80014ee:	4610      	mov	r0, r2
        ans = ans * 10 + (str[i] - '0');
 80014f0:	250a      	movs	r5, #10
    while(str[i] >= '0' && str[i] <= '9'){
 80014f2:	b2d3      	uxtb	r3, r2
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	3201      	adds	r2, #1
 80014f8:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
 80014fc:	2c09      	cmp	r4, #9
 80014fe:	d900      	bls.n	8001502 <str_to_int+0x1a>
}
 8001500:	bd30      	pop	{r4, r5, pc}
        ans = ans * 10 + (str[i] - '0');
 8001502:	fb05 3300 	mla	r3, r5, r0, r3
 8001506:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
        i++;
 800150a:	e7f2      	b.n	80014f2 <str_to_int+0xa>

0800150c <process_client_connection>:
uint8_t stat;
uint8_t reqnr;
char Message[128];
// Функция обработки клиентского подключения
void process_client_connection(uint8_t sn)
{
 800150c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001510:	4604      	mov	r4, r0
    uint8_t received_data[1024];



    // Главный цикл обработки соединения
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001512:	0146      	lsls	r6, r0, #5
            received_len = recv(sn, received_data, sizeof(received_data)-1);

            if(received_len > 0)
            {
            	received_data[received_len] = '\0';
                if(strstr((char*)received_data, "EXIT") != NULL)
 8001514:	4f2e      	ldr	r7, [pc, #184]	@ (80015d0 <process_client_connection+0xc4>)
                    break;
                }

                uint32_t r=str_to_int((char*)received_data);
                if(r>7 && r<=160000){
                	freq[choiced_channel]=r;
 8001516:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80015d4 <process_client_connection+0xc8>
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
                set_freqq(choiced_channel);//устанвливаем частоту введённую через ethernet
                //si5351_enableOutputs(0xFF);//включаем все выходы
                Write_Flash_Array(freq);
                print_interface_mode0();
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800151a:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 80015d8 <process_client_connection+0xcc>
{
 800151e:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001522:	f506 7642 	add.w	r6, r6, #776	@ 0x308
 8001526:	4630      	mov	r0, r6
 8001528:	f006 fa0a 	bl	8007940 <WIZCHIP_READ>
 800152c:	2817      	cmp	r0, #23
 800152e:	d119      	bne.n	8001564 <process_client_connection+0x58>
        uint16_t available = getSn_RX_RSR(sn);
 8001530:	4620      	mov	r0, r4
 8001532:	f006 fafa 	bl	8007b2a <getSn_RX_RSR>
        if(available > 0)
 8001536:	2800      	cmp	r0, #0
 8001538:	d040      	beq.n	80015bc <process_client_connection+0xb0>
            received_len = recv(sn, received_data, sizeof(received_data)-1);
 800153a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800153e:	4669      	mov	r1, sp
 8001540:	4620      	mov	r0, r4
 8001542:	f006 fd7b 	bl	800803c <recv>
            if(received_len > 0)
 8001546:	2800      	cmp	r0, #0
 8001548:	dd38      	ble.n	80015bc <process_client_connection+0xb0>
            	received_data[received_len] = '\0';
 800154a:	2300      	movs	r3, #0
                if(strstr((char*)received_data, "EXIT") != NULL)
 800154c:	4639      	mov	r1, r7
            	received_data[received_len] = '\0';
 800154e:	f80d 3000 	strb.w	r3, [sp, r0]
                if(strstr((char*)received_data, "EXIT") != NULL)
 8001552:	4668      	mov	r0, sp
 8001554:	f008 f8c2 	bl	80096dc <strstr>
 8001558:	b140      	cbz	r0, 800156c <process_client_connection+0x60>
                    send(sn, (uint8_t*)"Goodbye!\r\n", 10);
 800155a:	220a      	movs	r2, #10
 800155c:	4620      	mov	r0, r4
 800155e:	491f      	ldr	r1, [pc, #124]	@ (80015dc <process_client_connection+0xd0>)
 8001560:	f006 fcb6 	bl	8007ed0 <send>

  	  while(t>HAL_GetTick()-10);
        //HAL_Delay(10); // Небольшая задержка
    }

}
 8001564:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8001568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint32_t r=str_to_int((char*)received_data);
 800156c:	4668      	mov	r0, sp
 800156e:	f7ff ffbb 	bl	80014e8 <str_to_int>
                if(r>7 && r<=160000){
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <process_client_connection+0xd4>)
 8001574:	f1a0 0208 	sub.w	r2, r0, #8
 8001578:	429a      	cmp	r2, r3
                	freq[choiced_channel]=r;
 800157a:	f898 5000 	ldrb.w	r5, [r8]
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <process_client_connection+0xd8>)
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 8001580:	4919      	ldr	r1, [pc, #100]	@ (80015e8 <process_client_connection+0xdc>)
                	freq[choiced_channel]=r;
 8001582:	bf98      	it	ls
 8001584:	f843 0025 	strls.w	r0, [r3, r5, lsl #2]
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 8001588:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800158c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001590:	4411      	add	r1, r2
 8001592:	f7ff fcb9 	bl	8000f08 <int_to_str>
                set_freqq(choiced_channel);//устанвливаем частоту введённую через ethernet
 8001596:	4628      	mov	r0, r5
 8001598:	f7ff fc9c 	bl	8000ed4 <set_freqq>
                Write_Flash_Array(freq);
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <process_client_connection+0xd8>)
 800159e:	f7ff fcf3 	bl	8000f88 <Write_Flash_Array>
                print_interface_mode0();
 80015a2:	f7ff fd25 	bl	8000ff0 <print_interface_mode0>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ac:	4648      	mov	r0, r9
 80015ae:	f002 f895 	bl	80036dc <HAL_GPIO_WritePin>
                send(sn, (uint8_t*)"OK\r\n", 4);
 80015b2:	2204      	movs	r2, #4
 80015b4:	4620      	mov	r0, r4
 80015b6:	490d      	ldr	r1, [pc, #52]	@ (80015ec <process_client_connection+0xe0>)
 80015b8:	f006 fc8a 	bl	8007ed0 <send>
  	  uint32_t t=HAL_GetTick();
 80015bc:	f001 fdc8 	bl	8003150 <HAL_GetTick>
 80015c0:	4605      	mov	r5, r0
  	  while(t>HAL_GetTick()-10);
 80015c2:	f001 fdc5 	bl	8003150 <HAL_GetTick>
 80015c6:	380a      	subs	r0, #10
 80015c8:	42a8      	cmp	r0, r5
 80015ca:	d3fa      	bcc.n	80015c2 <process_client_connection+0xb6>
 80015cc:	e7ab      	b.n	8001526 <process_client_connection+0x1a>
 80015ce:	bf00      	nop
 80015d0:	0800ad07 	.word	0x0800ad07
 80015d4:	2000023b 	.word	0x2000023b
 80015d8:	40011000 	.word	0x40011000
 80015dc:	0800ad0c 	.word	0x0800ad0c
 80015e0:	000270f8 	.word	0x000270f8
 80015e4:	20000258 	.word	0x20000258
 80015e8:	2000023d 	.word	0x2000023d
 80015ec:	0800ad17 	.word	0x0800ad17

080015f0 <init_server>:
// Функция инициализации сервера
uint8_t init_server(uint8_t sn, uint16_t port)
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	4604      	mov	r4, r0
    // Закрываем сокет если был открыт
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80015f4:	0140      	lsls	r0, r0, #5
 80015f6:	f500 7042 	add.w	r0, r0, #776	@ 0x308
{
 80015fa:	460d      	mov	r5, r1
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80015fc:	f006 f9a0 	bl	8007940 <WIZCHIP_READ>
 8001600:	b110      	cbz	r0, 8001608 <init_server+0x18>
        close(sn);
 8001602:	4620      	mov	r0, r4
 8001604:	f006 fb0c 	bl	8007c20 <close>
        //HAL_Delay(100);
    }

    // Создаем сокет
    if((stat = socket(sn, Sn_MR_TCP, port, 0)) != sn) {
 8001608:	462a      	mov	r2, r5
 800160a:	2300      	movs	r3, #0
 800160c:	2101      	movs	r1, #1
 800160e:	4620      	mov	r0, r4
 8001610:	f006 fb44 	bl	8007c9c <socket>
 8001614:	4d08      	ldr	r5, [pc, #32]	@ (8001638 <init_server+0x48>)
 8001616:	b2c0      	uxtb	r0, r0
 8001618:	42a0      	cmp	r0, r4
 800161a:	7028      	strb	r0, [r5, #0]
 800161c:	d109      	bne.n	8001632 <init_server+0x42>

        return 0;
    }

    // Слушаем порт
    if((stat = listen(sn)) != SOCK_OK) {
 800161e:	4620      	mov	r0, r4
 8001620:	f006 fbd8 	bl	8007dd4 <listen>
 8001624:	b2c0      	uxtb	r0, r0
 8001626:	2801      	cmp	r0, #1
 8001628:	7028      	strb	r0, [r5, #0]
 800162a:	d003      	beq.n	8001634 <init_server+0x44>

        close(sn);
 800162c:	4620      	mov	r0, r4
 800162e:	f006 faf7 	bl	8007c20 <close>
        return 0;
 8001632:	2000      	movs	r0, #0
        return 0;
    }

    return 1;
}
 8001634:	bd38      	pop	{r3, r4, r5, pc}
 8001636:	bf00      	nop
 8001638:	20000238 	.word	0x20000238

0800163c <ethernet_work>:
void ethernet_work(){
 800163c:	b510      	push	{r4, lr}
	// Мигание светодиодом в режиме ожидания
	          static uint32_t led_timer = 0;
	          if(HAL_GetTick() - led_timer > 500) {
 800163e:	f001 fd87 	bl	8003150 <HAL_GetTick>
 8001642:	4c21      	ldr	r4, [pc, #132]	@ (80016c8 <ethernet_work+0x8c>)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	1ac0      	subs	r0, r0, r3
 8001648:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 800164c:	d907      	bls.n	800165e <ethernet_work+0x22>
	              HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800164e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001652:	481e      	ldr	r0, [pc, #120]	@ (80016cc <ethernet_work+0x90>)
 8001654:	f002 f847 	bl	80036e6 <HAL_GPIO_TogglePin>
	              led_timer = HAL_GetTick();
 8001658:	f001 fd7a 	bl	8003150 <HAL_GetTick>
 800165c:	6020      	str	r0, [r4, #0]
	          }

	          // Проверяем статус сокета
	          socket_status = getSn_SR(HTTP_SOCKET);
 800165e:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001662:	f006 f96d 	bl	8007940 <WIZCHIP_READ>
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <ethernet_work+0x94>)

	          switch(socket_status)
 8001668:	2814      	cmp	r0, #20
	          socket_status = getSn_SR(HTTP_SOCKET);
 800166a:	7018      	strb	r0, [r3, #0]
	          switch(socket_status)
 800166c:	d006      	beq.n	800167c <ethernet_work+0x40>
 800166e:	2817      	cmp	r0, #23
 8001670:	d00d      	beq.n	800168e <ethernet_work+0x52>
 8001672:	b1e8      	cbz	r0, 80016b0 <ethernet_work+0x74>
	                  break;

	              default:
	                  // Неизвестный статус - перезапускаем

	                  close(HTTP_SOCKET);
 8001674:	2000      	movs	r0, #0
 8001676:	f006 fad3 	bl	8007c20 <close>
 800167a:	e01f      	b.n	80016bc <ethernet_work+0x80>
	            	  uint32_t t=HAL_GetTick();
 800167c:	f001 fd68 	bl	8003150 <HAL_GetTick>
 8001680:	4604      	mov	r4, r0
	            	  while(t>HAL_GetTick()-100);
 8001682:	f001 fd65 	bl	8003150 <HAL_GetTick>
 8001686:	3864      	subs	r0, #100	@ 0x64
 8001688:	42a0      	cmp	r0, r4
 800168a:	d3fa      	bcc.n	8001682 <ethernet_work+0x46>
	                  //HAL_Delay(1000);
	                  break;
	          }

	          //HAL_Delay(10);
}
 800168c:	bd10      	pop	{r4, pc}
	            	  if(interface_mode==0){
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <ethernet_work+0x98>)
 8001690:	781c      	ldrb	r4, [r3, #0]
 8001692:	2c00      	cmp	r4, #0
 8001694:	d1fa      	bne.n	800168c <ethernet_work+0x50>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 8001696:	4622      	mov	r2, r4
 8001698:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <ethernet_work+0x90>)
 800169e:	f002 f81d 	bl	80036dc <HAL_GPIO_WritePin>
	                  process_client_connection(HTTP_SOCKET);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff ff32 	bl	800150c <process_client_connection>
	                  disconnect(HTTP_SOCKET);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f006 fbc9 	bl	8007e40 <disconnect>
	                  close(HTTP_SOCKET);
 80016ae:	e7e1      	b.n	8001674 <ethernet_work+0x38>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <ethernet_work+0x90>)
 80016b8:	f002 f810 	bl	80036dc <HAL_GPIO_WritePin>
}
 80016bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	                  init_server(HTTP_SOCKET, 80);
 80016c0:	2150      	movs	r1, #80	@ 0x50
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff bf94 	b.w	80015f0 <init_server>
 80016c8:	20000234 	.word	0x20000234
 80016cc:	40011000 	.word	0x40011000
 80016d0:	20000239 	.word	0x20000239
 80016d4:	2000023a 	.word	0x2000023a

080016d8 <HAL_TIM_PeriodElapsedCallback>:
//функция для работы программы во время прерываний
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016de:	d10c      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	//uint8_t socket_status = getSn_SR(HTTP_SOCKET);
    	if(interface_mode==0 && socket_status!=SOCK_ESTABLISHED){
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b92b      	cbnz	r3, 80016f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b17      	cmp	r3, #23
 80016ec:	d005      	beq.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x22>
    		//ethernet_work();
    		int_mode_0();
 80016ee:	f7ff bdb1 	b.w	8001254 <int_mode_0>
    	}else if(interface_mode==1){
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x22>
    		int_mode_1();
 80016f6:	f7ff be15 	b.w	8001324 <int_mode_1>
    	}
    }
}
 80016fa:	4770      	bx	lr
 80016fc:	2000023a 	.word	0x2000023a
 8001700:	20000239 	.word	0x20000239

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b530      	push	{r4, r5, lr}
 8001706:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001708:	2214      	movs	r2, #20
 800170a:	2100      	movs	r1, #0
 800170c:	a80c      	add	r0, sp, #48	@ 0x30
 800170e:	f007 ffcb 	bl	80096a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001712:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001716:	2100      	movs	r1, #0
 8001718:	eb0d 0002 	add.w	r0, sp, r2
 800171c:	f007 ffc4 	bl	80096a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	462a      	mov	r2, r5
 8001722:	2100      	movs	r1, #0
 8001724:	a801      	add	r0, sp, #4
 8001726:	f007 ffbf 	bl	80096a8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001730:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001736:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800173a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001742:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f004 fa1a 	bl	8005b7c <HAL_RCC_OscConfig>
 8001748:	b108      	cbz	r0, 800174e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001750:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001758:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800175e:	4621      	mov	r1, r4
 8001760:	a805      	add	r0, sp, #20
 8001762:	f004 fbcd 	bl	8005f00 <HAL_RCC_ClockConfig>
 8001766:	b108      	cbz	r0, 800176c <SystemClock_Config+0x68>
 8001768:	b672      	cpsid	i
  while (1)
 800176a:	e7fe      	b.n	800176a <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800176c:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001770:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	f004 fc71 	bl	8006058 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	b108      	cbz	r0, 800177c <SystemClock_Config+0x78>
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <SystemClock_Config+0x76>
}
 800177c:	b015      	add	sp, #84	@ 0x54
 800177e:	bd30      	pop	{r4, r5, pc}

08001780 <main>:
{
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	2510      	movs	r5, #16
{
 8001786:	b093      	sub	sp, #76	@ 0x4c
  HAL_Init();
 8001788:	f001 fcc4 	bl	8003114 <HAL_Init>
  SystemClock_Config();
 800178c:	f7ff ffba 	bl	8001704 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	462a      	mov	r2, r5
 8001792:	2100      	movs	r1, #0
 8001794:	a809      	add	r0, sp, #36	@ 0x24
 8001796:	f007 ff87 	bl	80096a8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4bb3      	ldr	r3, [pc, #716]	@ (8001a68 <main+0x2e8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800179c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017a2:	48b2      	ldr	r0, [pc, #712]	@ (8001a6c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	432a      	orrs	r2, r5
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ac:	402a      	ands	r2, r5
 80017ae:	9203      	str	r2, [sp, #12]
 80017b0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	619a      	str	r2, [r3, #24]
 80017be:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	f002 0220 	and.w	r2, r2, #32
 80017c6:	9204      	str	r2, [sp, #16]
 80017c8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 80017cc:	f8df 82a0 	ldr.w	r8, [pc, #672]	@ 8001a70 <main+0x2f0>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	f042 0204 	orr.w	r2, r2, #4
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	f002 0204 	and.w	r2, r2, #4
 80017dc:	9205      	str	r2, [sp, #20]
 80017de:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	699a      	ldr	r2, [r3, #24]
 80017e2:	f042 0208 	orr.w	r2, r2, #8
 80017e6:	619a      	str	r2, [r3, #24]
 80017e8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	9306      	str	r3, [sp, #24]
 80017f2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017f4:	f001 ff72 	bl	80036dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4629      	mov	r1, r5
 80017fc:	489d      	ldr	r0, [pc, #628]	@ (8001a74 <main+0x2f4>)
 80017fe:	f001 ff6d 	bl	80036dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	4899      	ldr	r0, [pc, #612]	@ (8001a6c <main+0x2ec>)
 8001808:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	e9cd 3909 	strd	r3, r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f001 fe89 	bl	8003528 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	4897      	ldr	r0, [pc, #604]	@ (8001a74 <main+0x2f4>)
 8001818:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	e9cd 9409 	strd	r9, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f001 fe82 	bl	8003528 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001828:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800182c:	4891      	ldr	r0, [pc, #580]	@ (8001a74 <main+0x2f4>)
 800182e:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	e9cd 5909 	strd	r5, r9, [sp, #36]	@ 0x24
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001834:	f001 fe78 	bl	8003528 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001838:	488f      	ldr	r0, [pc, #572]	@ (8001a78 <main+0x2f8>)
  hi2c1.Init.ClockSpeed = 100000;
 800183a:	4b90      	ldr	r3, [pc, #576]	@ (8001a7c <main+0x2fc>)
  hi2c1.Init.OwnAddress1 = 0;
 800183c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	e9c0 6404 	strd	r6, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001844:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001848:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 800184a:	e9c0 3800 	strd	r3, r8, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800184e:	f002 f8d1 	bl	80039f4 <HAL_I2C_Init>
 8001852:	4604      	mov	r4, r0
 8001854:	b108      	cbz	r0, 800185a <main+0xda>
 8001856:	b672      	cpsid	i
  while (1)
 8001858:	e7fe      	b.n	8001858 <main+0xd8>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800185a:	4601      	mov	r1, r0
 800185c:	2220      	movs	r2, #32
 800185e:	a80a      	add	r0, sp, #40	@ 0x28
 8001860:	f007 ff22 	bl	80096a8 <memset>
  htim1.Init.Period = 7000;
 8001864:	f641 3358 	movw	r3, #7000	@ 0x1b58
  htim1.Instance = TIM1;
 8001868:	4d85      	ldr	r5, [pc, #532]	@ (8001a80 <main+0x300>)
 800186a:	4f86      	ldr	r7, [pc, #536]	@ (8001a84 <main+0x304>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001870:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001872:	4628      	mov	r0, r5
 8001874:	a909      	add	r1, sp, #36	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001876:	e9cd 4407 	strd	r4, r4, [sp, #28]
  htim1.Init.Prescaler = 0;
 800187a:	e9c5 7400 	strd	r7, r4, [r5]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60ac      	str	r4, [r5, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001884:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800188a:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800188e:	f005 fa13 	bl	8006cb8 <HAL_TIM_Encoder_Init>
 8001892:	b108      	cbz	r0, 8001898 <main+0x118>
 8001894:	b672      	cpsid	i
  while (1)
 8001896:	e7fe      	b.n	8001896 <main+0x116>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189c:	a907      	add	r1, sp, #28
 800189e:	4628      	mov	r0, r5
 80018a0:	f005 fae2 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b108      	cbz	r0, 80018ac <main+0x12c>
 80018a8:	b672      	cpsid	i
  while (1)
 80018aa:	e7fe      	b.n	80018aa <main+0x12a>
  hi2c2.Instance = I2C2;
 80018ac:	4876      	ldr	r0, [pc, #472]	@ (8001a88 <main+0x308>)
 80018ae:	4a77      	ldr	r2, [pc, #476]	@ (8001a8c <main+0x30c>)
  hi2c2.Init.OwnAddress1 = 0;
 80018b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 80018b4:	e9c0 2800 	strd	r2, r8, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	e9c0 6304 	strd	r6, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018c2:	f002 f897 	bl	80039f4 <HAL_I2C_Init>
 80018c6:	4604      	mov	r4, r0
 80018c8:	b108      	cbz	r0, 80018ce <main+0x14e>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <main+0x14c>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	221c      	movs	r2, #28
 80018d6:	a809      	add	r0, sp, #36	@ 0x24
 80018d8:	f007 fee6 	bl	80096a8 <memset>
  htim2.Init.Prescaler = 7199;
 80018dc:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 80018e0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 80018e4:	4e6a      	ldr	r6, [pc, #424]	@ (8001a90 <main+0x310>)
  htim2.Init.Prescaler = 7199;
 80018e6:	e9c6 1300 	strd	r1, r3, [r6]
  htim2.Init.Period = 999;
 80018ea:	f240 33e7 	movw	r3, #999	@ 0x3e7
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ee:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018f8:	f005 f9b2 	bl	8006c60 <HAL_TIM_PWM_Init>
 80018fc:	b108      	cbz	r0, 8001902 <main+0x182>
 80018fe:	b672      	cpsid	i
  while (1)
 8001900:	e7fe      	b.n	8001900 <main+0x180>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001906:	a907      	add	r1, sp, #28
 8001908:	4630      	mov	r0, r6
 800190a:	f005 faad 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 800190e:	4602      	mov	r2, r0
 8001910:	b108      	cbz	r0, 8001916 <main+0x196>
 8001912:	b672      	cpsid	i
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x194>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001918:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800191a:	e9cd 3009 	strd	r3, r0, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001920:	a909      	add	r1, sp, #36	@ 0x24
 8001922:	4630      	mov	r0, r6
 8001924:	f005 fa48 	bl	8006db8 <HAL_TIM_PWM_ConfigChannel>
 8001928:	4604      	mov	r4, r0
 800192a:	b108      	cbz	r0, 8001930 <main+0x1b0>
 800192c:	b672      	cpsid	i
  while (1)
 800192e:	e7fe      	b.n	800192e <main+0x1ae>
  HAL_TIM_MspPostInit(&htim2);
 8001930:	4630      	mov	r0, r6
 8001932:	f001 f9b5 	bl	8002ca0 <HAL_TIM_MspPostInit>
  MX_USB_DEVICE_Init();
 8001936:	f007 fa9b 	bl	8008e70 <MX_USB_DEVICE_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 800193e:	4855      	ldr	r0, [pc, #340]	@ (8001a94 <main+0x314>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001940:	4a55      	ldr	r2, [pc, #340]	@ (8001a98 <main+0x318>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001942:	2608      	movs	r6, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001944:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800194c:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001950:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001952:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001956:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800195a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195e:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001960:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001962:	f004 fc95 	bl	8006290 <HAL_SPI_Init>
 8001966:	4604      	mov	r4, r0
 8001968:	b108      	cbz	r0, 800196e <main+0x1ee>
 800196a:	b672      	cpsid	i
  while (1)
 800196c:	e7fe      	b.n	800196c <main+0x1ec>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800196e:	213c      	movs	r1, #60	@ 0x3c
 8001970:	4628      	mov	r0, r5
 8001972:	f005 f851 	bl	8006a18 <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001976:	f001 fb45 	bl	8003004 <ssd1306_Init>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 800197a:	627c      	str	r4, [r7, #36]	@ 0x24
      freq[0]=8;//начальная минимальная частота канала 0
 800197c:	4c47      	ldr	r4, [pc, #284]	@ (8001a9c <main+0x31c>)
      freq[1]=8;//начальная минимальная частота канала 1
 800197e:	e9c4 6600 	strd	r6, r6, [r4]
      freq[2]=8;//начальная минимальная частота канала 2
 8001982:	60a6      	str	r6, [r4, #8]
      if (Is_Flash_Valid()==0) {
 8001984:	f7ff fae2 	bl	8000f4c <Is_Flash_Valid>
 8001988:	2800      	cmp	r0, #0
 800198a:	d169      	bne.n	8001a60 <main+0x2e0>
          Write_Flash_Array(freq);
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fafb 	bl	8000f88 <Write_Flash_Array>
      choice=0;//переменная для считывания был ли нажат энкодер
 8001992:	2500      	movs	r5, #0
 8001994:	4b42      	ldr	r3, [pc, #264]	@ (8001aa0 <main+0x320>)
      int_to_str(freq[2],num_string[2]);
 8001996:	4943      	ldr	r1, [pc, #268]	@ (8001aa4 <main+0x324>)
 8001998:	68a0      	ldr	r0, [r4, #8]
      choice=0;//переменная для считывания был ли нажат энкодер
 800199a:	701d      	strb	r5, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 800199c:	f7ff fab4 	bl	8000f08 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 80019a0:	6860      	ldr	r0, [r4, #4]
 80019a2:	3907      	subs	r1, #7
 80019a4:	f7ff fab0 	bl	8000f08 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 80019a8:	3907      	subs	r1, #7
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	f7ff faac 	bl	8000f08 <int_to_str>
      prev_encoder=8;
 80019b0:	2208      	movs	r2, #8
            si5351_set_freq(freq[0]*1000*100ULL, SI5351_CLK0);
 80019b2:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 80019b6:	2664      	movs	r6, #100	@ 0x64
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 80019b8:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <main+0x328>)
 80019ba:	701d      	strb	r5, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 80019bc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <main+0x32c>)
 80019be:	701d      	strb	r5, [r3, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <main+0x330>)
 80019c2:	701d      	strb	r5, [r3, #0]
      prev_encoder=8;
 80019c4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab4 <main+0x334>)
 80019c6:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 80019c8:	f7ff fb12 	bl	8000ff0 <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 80019cc:	4830      	ldr	r0, [pc, #192]	@ (8001a90 <main+0x310>)
 80019ce:	f004 fff9 	bl	80069c4 <HAL_TIM_Base_Start_IT>
            reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80019d2:	4939      	ldr	r1, [pc, #228]	@ (8001ab8 <main+0x338>)
 80019d4:	4839      	ldr	r0, [pc, #228]	@ (8001abc <main+0x33c>)
 80019d6:	f006 fbc9 	bl	800816c <reg_wizchip_cs_cbfunc>
            reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80019da:	4939      	ldr	r1, [pc, #228]	@ (8001ac0 <main+0x340>)
 80019dc:	4839      	ldr	r0, [pc, #228]	@ (8001ac4 <main+0x344>)
 80019de:	f006 fbd3 	bl	8008188 <reg_wizchip_spi_cbfunc>
            reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80019e2:	4939      	ldr	r1, [pc, #228]	@ (8001ac8 <main+0x348>)
 80019e4:	4839      	ldr	r0, [pc, #228]	@ (8001acc <main+0x34c>)
 80019e6:	f006 fbe1 	bl	80081ac <reg_wizchip_spiburst_cbfunc>
            uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80019ea:	4a39      	ldr	r2, [pc, #228]	@ (8001ad0 <main+0x350>)
 80019ec:	ab09      	add	r3, sp, #36	@ 0x24
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	6851      	ldr	r1, [r2, #4]
 80019f2:	c303      	stmia	r3!, {r0, r1}
            wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80019f4:	a909      	add	r1, sp, #36	@ 0x24
 80019f6:	4608      	mov	r0, r1
 80019f8:	f006 fc27 	bl	800824a <wizchip_init>
            wizchip_setnetinfo(&gWIZNETINFO);
 80019fc:	4835      	ldr	r0, [pc, #212]	@ (8001ad4 <main+0x354>)
 80019fe:	f006 fc67 	bl	80082d0 <wizchip_setnetinfo>
            ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8001a02:	4934      	ldr	r1, [pc, #208]	@ (8001ad4 <main+0x354>)
 8001a04:	4628      	mov	r0, r5
 8001a06:	f006 fcfd 	bl	8008404 <ctlnetwork>
            si5351_init(&hi2c1, SI5351_BUS_BASE_ADDR, SI5351_CRYSTAL_LOAD_0PF, si5351_XTAL*1000000, si5351_FREQ_CORR);
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <main+0x358>)
 8001a0c:	462a      	mov	r2, r5
 8001a0e:	2160      	movs	r1, #96	@ 0x60
 8001a10:	4819      	ldr	r0, [pc, #100]	@ (8001a78 <main+0x2f8>)
 8001a12:	9500      	str	r5, [sp, #0]
 8001a14:	f000 fd6e 	bl	80024f4 <si5351_init>
            si5351_drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA);
 8001a18:	2103      	movs	r1, #3
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f000 fc85 	bl	800232a <si5351_drive_strength>
            si5351_drive_strength(SI5351_CLK1, SI5351_DRIVE_8MA);
 8001a20:	2103      	movs	r1, #3
 8001a22:	2001      	movs	r0, #1
 8001a24:	f000 fc81 	bl	800232a <si5351_drive_strength>
            si5351_drive_strength(SI5351_CLK2, SI5351_DRIVE_8MA);
 8001a28:	2103      	movs	r1, #3
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f000 fc7d 	bl	800232a <si5351_drive_strength>
            si5351_set_freq(freq[0]*1000*100ULL, SI5351_CLK0);
 8001a30:	6820      	ldr	r0, [r4, #0]
 8001a32:	462a      	mov	r2, r5
 8001a34:	4378      	muls	r0, r7
 8001a36:	fb80 0106 	smull	r0, r1, r0, r6
 8001a3a:	f000 fe81 	bl	8002740 <si5351_set_freq>
            si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
 8001a3e:	6860      	ldr	r0, [r4, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4378      	muls	r0, r7
 8001a44:	fb80 0106 	smull	r0, r1, r0, r6
 8001a48:	f000 fe7a 	bl	8002740 <si5351_set_freq>
            si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
 8001a4c:	68a0      	ldr	r0, [r4, #8]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4378      	muls	r0, r7
 8001a52:	fb80 0106 	smull	r0, r1, r0, r6
 8001a56:	f000 fe73 	bl	8002740 <si5351_set_freq>
	  ethernet_work();
 8001a5a:	f7ff fdef 	bl	800163c <ethernet_work>
  while (1)
 8001a5e:	e7fc      	b.n	8001a5a <main+0x2da>
    	  Read_Flash_Array(freq);
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff fa7f 	bl	8000f64 <Read_Flash_Array>
 8001a66:	e794      	b.n	8001992 <main+0x212>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	000186a0 	.word	0x000186a0
 8001a74:	40010800 	.word	0x40010800
 8001a78:	200003a0 	.word	0x200003a0
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	200002ac 	.word	0x200002ac
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	2000034c 	.word	0x2000034c
 8001a8c:	40005800 	.word	0x40005800
 8001a90:	20000264 	.word	0x20000264
 8001a94:	200002f4 	.word	0x200002f4
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	20000258 	.word	0x20000258
 8001aa0:	20000252 	.word	0x20000252
 8001aa4:	2000024b 	.word	0x2000024b
 8001aa8:	2000023c 	.word	0x2000023c
 8001aac:	2000023b 	.word	0x2000023b
 8001ab0:	2000023a 	.word	0x2000023a
 8001ab4:	20000254 	.word	0x20000254
 8001ab8:	08000e6d 	.word	0x08000e6d
 8001abc:	08000e5d 	.word	0x08000e5d
 8001ac0:	08000ebd 	.word	0x08000ebd
 8001ac4:	08000e91 	.word	0x08000e91
 8001ac8:	08000ea9 	.word	0x08000ea9
 8001acc:	08000e7d 	.word	0x08000e7d
 8001ad0:	0800ad1c 	.word	0x0800ad1c
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	017d7840 	.word	0x017d7840

08001adc <Error_Handler>:
 8001adc:	b672      	cpsid	i
  while (1)
 8001ade:	e7fe      	b.n	8001ade <Error_Handler+0x2>

08001ae0 <set_ref_freq>:
	//reg_val = si5351_read(SI5351_PLL_INPUT_SOURCE);

	// Clear the bits first
	//reg_val &= ~(SI5351_CLKIN_DIV_MASK);

	if(ref_freq <= 30000000UL)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <set_ref_freq+0x50>)
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	d808      	bhi.n	8001af8 <set_ref_freq+0x18>
	{
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <set_ref_freq+0x54>)
		//reg_val |= SI5351_CLKIN_DIV_1;
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001ae8:	2901      	cmp	r1, #1
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 8001aea:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001aee:	d102      	bne.n	8001af6 <set_ref_freq+0x16>
		{
			clkin_div = SI5351_CLKIN_DIV_1;
 8001af0:	2200      	movs	r2, #0
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <set_ref_freq+0x58>)
	{
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 4;
		//reg_val |= SI5351_CLKIN_DIV_4;
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
		{
			clkin_div = SI5351_CLKIN_DIV_4;
 8001af4:	701a      	strb	r2, [r3, #0]
	{
		//reg_val |= SI5351_CLKIN_DIV_1;
	}

	//si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
}
 8001af6:	4770      	bx	lr
	else if(ref_freq > 30000000UL && ref_freq <= 60000000UL)
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <set_ref_freq+0x5c>)
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <set_ref_freq+0x60>)
 8001afc:	4403      	add	r3, r0
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d808      	bhi.n	8001b14 <set_ref_freq+0x34>
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 2;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <set_ref_freq+0x54>)
 8001b04:	0840      	lsrs	r0, r0, #1
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001b06:	2901      	cmp	r1, #1
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 2;
 8001b08:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001b0c:	d1f3      	bne.n	8001af6 <set_ref_freq+0x16>
			clkin_div = SI5351_CLKIN_DIV_2;
 8001b0e:	2240      	movs	r2, #64	@ 0x40
 8001b10:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <set_ref_freq+0x58>)
 8001b12:	e7ef      	b.n	8001af4 <set_ref_freq+0x14>
	else if(ref_freq > 60000000UL && ref_freq <= 100000000UL)
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <set_ref_freq+0x64>)
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <set_ref_freq+0x68>)
 8001b18:	4403      	add	r3, r0
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d2eb      	bcs.n	8001af6 <set_ref_freq+0x16>
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 4;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <set_ref_freq+0x54>)
 8001b20:	0880      	lsrs	r0, r0, #2
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001b22:	2901      	cmp	r1, #1
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 4;
 8001b24:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8001b28:	d1e5      	bne.n	8001af6 <set_ref_freq+0x16>
			clkin_div = SI5351_CLKIN_DIV_4;
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	4b02      	ldr	r3, [pc, #8]	@ (8001b38 <set_ref_freq+0x58>)
 8001b2e:	e7e1      	b.n	8001af4 <set_ref_freq+0x14>
 8001b30:	01c9c380 	.word	0x01c9c380
 8001b34:	20000400 	.word	0x20000400
 8001b38:	20000411 	.word	0x20000411
 8001b3c:	fe363c7f 	.word	0xfe363c7f
 8001b40:	01c9c37f 	.word	0x01c9c37f
 8001b44:	fc6c78ff 	.word	0xfc6c78ff
 8001b48:	02625a00 	.word	0x02625a00
 8001b4c:	00000000 	.word	0x00000000

08001b50 <pll_calc>:
/*********************/
/* Private functions */
/*********************/

uint64_t pll_calc(enum si5351_pll pll, uint64_t freq, struct Si5351RegSet *reg, int32_t correction, uint8_t vcxo)
{
 8001b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b54:	461e      	mov	r6, r3
 8001b56:	e9dd 910a 	ldrd	r9, r1, [sp, #40]	@ 0x28
 8001b5a:	4617      	mov	r7, r2
 8001b5c:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 8001b60:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <pll_calc+0x130>)
	uint64_t ref_freq;
	if(pll == SI5351_PLLA)
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d179      	bne.n	8001c5a <pll_calc+0x10a>
	{
		ref_freq = xtal_freq[(uint8_t)plla_ref_osc] * SI5351_FREQ_MULT;
 8001b66:	4a47      	ldr	r2, [pc, #284]	@ (8001c84 <pll_calc+0x134>)
	}
	else
	{
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 8001b68:	2464      	movs	r4, #100	@ 0x64
 8001b6a:	7812      	ldrb	r2, [r2, #0]
	uint64_t lltmp; //, denom;

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 8001b6c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 8001b74:	07c8      	lsls	r0, r1, #31
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 8001b76:	fba3 4a04 	umull	r4, sl, r3, r4
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 8001b7a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001c78 <pll_calc+0x128>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	ea45 0151 	orr.w	r1, r5, r1, lsr #1
 8001b84:	f7fe ff80 	bl	8000a88 <__aeabi_ldivmod>
 8001b88:	fb00 f30a 	mul.w	r3, r0, sl
 8001b8c:	fba0 5204 	umull	r5, r2, r0, r4
 8001b90:	fb04 3301 	mla	r3, r4, r1, r3
 8001b94:	0fed      	lsrs	r5, r5, #31
 8001b96:	4413      	add	r3, r2
 8001b98:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
	// PLL bounds checking
	if (freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT)
	{
		freq = SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT;
	}
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 8001b9c:	2314      	movs	r3, #20
 8001b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c88 <pll_calc+0x138>)
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 8001ba0:	192c      	adds	r4, r5, r4
 8001ba2:	eb4a 75e5 	adc.w	r5, sl, r5, asr #31
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 8001ba6:	42ba      	cmp	r2, r7
 8001ba8:	46b2      	mov	sl, r6
 8001baa:	eb73 0606 	sbcs.w	r6, r3, r6
 8001bae:	46bb      	mov	fp, r7
 8001bb0:	bf3c      	itt	cc
 8001bb2:	4693      	movcc	fp, r2
 8001bb4:	469a      	movcc	sl, r3
 8001bb6:	230d      	movs	r3, #13
 8001bb8:	4a34      	ldr	r2, [pc, #208]	@ (8001c8c <pll_calc+0x13c>)
 8001bba:	455a      	cmp	r2, fp
 8001bbc:	eb73 020a 	sbcs.w	r2, r3, sl
 8001bc0:	bf24      	itt	cs
 8001bc2:	469a      	movcs	sl, r3
 8001bc4:	f8df b0c8 	ldrcs.w	fp, [pc, #200]	@ 8001c90 <pll_calc+0x140>
	{
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 8001bc8:	4622      	mov	r2, r4
 8001bca:	462b      	mov	r3, r5
 8001bcc:	4658      	mov	r0, fp
 8001bce:	4651      	mov	r1, sl
 8001bd0:	f7fe ffaa 	bl	8000b28 <__aeabi_uldivmod>

	if (a < SI5351_PLL_A_MIN)
 8001bd4:	280e      	cmp	r0, #14
	a = freq / ref_freq;
 8001bd6:	4607      	mov	r7, r0
 8001bd8:	4606      	mov	r6, r0
	if (a < SI5351_PLL_A_MIN)
 8001bda:	d840      	bhi.n	8001c5e <pll_calc+0x10e>
	{
		freq = ref_freq * SI5351_PLL_A_MIN;
 8001bdc:	230f      	movs	r3, #15
	}
	if (a > SI5351_PLL_A_MAX)
	{
		freq = ref_freq * SI5351_PLL_A_MAX;
 8001bde:	fba4 ba03 	umull	fp, sl, r4, r3
 8001be2:	fb03 aa05 	mla	sl, r3, r5, sl
	// do_div(lltmp, ref_freq);

	//b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
	if(vcxo)
	{
		b = (((uint64_t)(freq % ref_freq)) * 1000000ULL) / ref_freq;
 8001be6:	4651      	mov	r1, sl
 8001be8:	4622      	mov	r2, r4
 8001bea:	462b      	mov	r3, r5
 8001bec:	4658      	mov	r0, fp
 8001bee:	f7fe ff9b 	bl	8000b28 <__aeabi_uldivmod>
 8001bf2:	469c      	mov	ip, r3
 8001bf4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8001c94 <pll_calc+0x144>
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	fba2 010a 	umull	r0, r1, r2, sl
 8001bfe:	4622      	mov	r2, r4
 8001c00:	fb0a 110c 	mla	r1, sl, ip, r1
 8001c04:	f7fe ff90 	bl	8000b28 <__aeabi_uldivmod>
 8001c08:	4601      	mov	r1, r0
	if(vcxo)
 8001c0a:	f1b8 0f00 	cmp.w	r8, #0
 8001c0e:	d12a      	bne.n	8001c66 <pll_calc+0x116>
		c = 1000000ULL;
	}
	else
	{
		b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
		c = b ? RFRAC_DENOM : 1;
 8001c10:	2800      	cmp	r0, #0
 8001c12:	bf14      	ite	ne
 8001c14:	4652      	movne	r2, sl
 8001c16:	2201      	moveq	r2, #1
	}

	// Calculate parameters
  p1 = 128 * a + ((128 * b) / c) - 512;
 8001c18:	01cb      	lsls	r3, r1, #7
 8001c1a:	fbb3 faf2 	udiv	sl, r3, r2
  p2 = 128 * b - c * ((128 * b) / c);
 8001c1e:	fb02 331a 	mls	r3, r2, sl, r3
  p1 = 128 * a + ((128 * b) / c) - 512;
 8001c22:	ea4f 1cc7 	mov.w	ip, r7, lsl #7
 8001c26:	f5ac 7e00 	sub.w	lr, ip, #512	@ 0x200
 8001c2a:	44d6      	add	lr, sl
	freq = lltmp;
	freq += ref_freq * a;

	reg->p1 = p1;
	reg->p2 = p2;
	reg->p3 = p3;
 8001c2c:	e9c9 3201 	strd	r3, r2, [r9, #4]
	reg->p1 = p1;
 8001c30:	f8c9 e000 	str.w	lr, [r9]

	if(vcxo)
 8001c34:	f1b8 0f00 	cmp.w	r8, #0
 8001c38:	d117      	bne.n	8001c6a <pll_calc+0x11a>
	lltmp *= b;
 8001c3a:	fba4 0c00 	umull	r0, ip, r4, r0
	do_div(lltmp, c);
 8001c3e:	4643      	mov	r3, r8
 8001c40:	fb05 c101 	mla	r1, r5, r1, ip
 8001c44:	f7fe ff70 	bl	8000b28 <__aeabi_uldivmod>
	freq += ref_freq * a;
 8001c48:	fba6 4604 	umull	r4, r6, r6, r4
 8001c4c:	fb05 6607 	mla	r6, r5, r7, r6
 8001c50:	1820      	adds	r0, r4, r0
 8001c52:	eb46 0101 	adc.w	r1, r6, r1
	}
	else
	{
		return freq;
	}
}
 8001c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <pll_calc+0x148>)
 8001c5c:	e784      	b.n	8001b68 <pll_calc+0x18>
	if (a > SI5351_PLL_A_MAX)
 8001c5e:	285a      	cmp	r0, #90	@ 0x5a
 8001c60:	d9c1      	bls.n	8001be6 <pll_calc+0x96>
		freq = ref_freq * SI5351_PLL_A_MAX;
 8001c62:	235a      	movs	r3, #90	@ 0x5a
 8001c64:	e7bb      	b.n	8001bde <pll_calc+0x8e>
		c = b ? RFRAC_DENOM : 1;
 8001c66:	4652      	mov	r2, sl
 8001c68:	e7d6      	b.n	8001c18 <pll_calc+0xc8>
		return (uint64_t)(128 * a * 1000000ULL + b);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <pll_calc+0x144>)
 8001c6e:	fbec 0103 	umlal	r0, r1, ip, r3
 8001c72:	e7f0      	b.n	8001c56 <pll_calc+0x106>
 8001c74:	f3af 8000 	nop.w
 8001c78:	3b9aca00 	.word	0x3b9aca00
 8001c7c:	00000000 	.word	0x00000000
 8001c80:	20000400 	.word	0x20000400
 8001c84:	200003f5 	.word	0x200003f5
 8001c88:	f46b0400 	.word	0xf46b0400
 8001c8c:	f84757ff 	.word	0xf84757ff
 8001c90:	f8475800 	.word	0xf8475800
 8001c94:	000f4240 	.word	0x000f4240
 8001c98:	200003f4 	.word	0x200003f4
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <multisynth_calc>:

uint64_t multisynth_calc(uint64_t freq, uint64_t pll_freq, struct Si5351RegSet *reg)
{
 8001ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	461f      	mov	r7, r3
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4 = 0;
	uint8_t ret_val = 0;

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8001ca8:	2305      	movs	r3, #5
{
 8001caa:	4690      	mov	r8, r2
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8001cac:	4a54      	ldr	r2, [pc, #336]	@ (8001e00 <multisynth_calc+0x160>)
{
 8001cae:	4604      	mov	r4, r0
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8001cb0:	4282      	cmp	r2, r0
 8001cb2:	eb73 0105 	sbcs.w	r1, r3, r5
{
 8001cb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8001cba:	f0c0 808a 	bcc.w	8001dd2 <multisynth_calc+0x132>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 8001cbe:	f04f 0900 	mov.w	r9, #0
 8001cc2:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <multisynth_calc+0x164>)
 8001cc4:	4283      	cmp	r3, r0
 8001cc6:	eb79 0305 	sbcs.w	r3, r9, r5
 8001cca:	f080 808a 	bcs.w	8001de2 <multisynth_calc+0x142>
	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
	{
		divby4 = 1;
	}

	if(pll_freq == 0)
 8001cce:	ea58 0307 	orrs.w	r3, r8, r7
 8001cd2:	d13f      	bne.n	8001d54 <multisynth_calc+0xb4>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		if(divby4 == 0)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e08 <multisynth_calc+0x168>)
 8001cd6:	4283      	cmp	r3, r0
 8001cd8:	f04f 0303 	mov.w	r3, #3
 8001cdc:	41ab      	sbcs	r3, r5
 8001cde:	d216      	bcs.n	8001d0e <multisynth_calc+0x6e>
	uint8_t ret_val = 0;
 8001ce0:	f04f 0900 	mov.w	r9, #0
	}

	// Calculate parameters
	if (divby4 == 1)
	{
		p3 = 1;
 8001ce4:	2301      	movs	r3, #1
		p2 = 0;
 8001ce6:	4648      	mov	r0, r9
		p1 = 0;
 8001ce8:	464e      	mov	r6, r9
		pll_freq = a * freq;
 8001cea:	00af      	lsls	r7, r5, #2
 8001cec:	ea47 7794 	orr.w	r7, r7, r4, lsr #30
 8001cf0:	ea4f 0884 	mov.w	r8, r4, lsl #2
	reg->p2 = p2;
	reg->p3 = p3;

	if(ret_val == 0)
	{
		return pll_freq;
 8001cf4:	f1b9 0f00 	cmp.w	r9, #0
 8001cf8:	bf04      	itt	eq
 8001cfa:	4644      	moveq	r4, r8
 8001cfc:	463d      	moveq	r5, r7
	reg->p2 = p2;
 8001cfe:	e9ca 6000 	strd	r6, r0, [sl]
	}
	else
	{
		return freq;
	}
}
 8001d02:	4629      	mov	r1, r5
 8001d04:	4620      	mov	r0, r4
	reg->p3 = p3;
 8001d06:	f8ca 3008 	str.w	r3, [sl, #8]
}
 8001d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			do_div(lltmp, freq);
 8001d0e:	4602      	mov	r2, r0
 8001d10:	a139      	add	r1, pc, #228	@ (adr r1, 8001df8 <multisynth_calc+0x158>)
 8001d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d16:	462b      	mov	r3, r5
 8001d18:	f7fe ff06 	bl	8000b28 <__aeabi_uldivmod>
 8001d1c:	4606      	mov	r6, r0
			else if(lltmp == 7)
 8001d1e:	3807      	subs	r0, #7
 8001d20:	4308      	orrs	r0, r1
			do_div(lltmp, freq);
 8001d22:	460a      	mov	r2, r1
			else if(lltmp == 7)
 8001d24:	d101      	bne.n	8001d2a <multisynth_calc+0x8a>
				lltmp = 6;
 8001d26:	2606      	movs	r6, #6
 8001d28:	464a      	mov	r2, r9
	uint8_t ret_val = 0;
 8001d2a:	f04f 0900 	mov.w	r9, #0
		pll_freq = a * freq;
 8001d2e:	fb06 f305 	mul.w	r3, r6, r5
 8001d32:	fba6 8704 	umull	r8, r7, r6, r4
 8001d36:	fb04 3302 	mla	r3, r4, r2, r3
		b = 0;
 8001d3a:	4648      	mov	r0, r9
		pll_freq = a * freq;
 8001d3c:	441f      	add	r7, r3
		c = 1;
 8001d3e:	2301      	movs	r3, #1
    p1 = 128 * a + ((128 * b) / c) - 512;
 8001d40:	01c0      	lsls	r0, r0, #7
 8001d42:	fbb0 f2f3 	udiv	r2, r0, r3
 8001d46:	01f6      	lsls	r6, r6, #7
 8001d48:	f5a6 7600 	sub.w	r6, r6, #512	@ 0x200
    p2 = 128 * b - c * ((128 * b) / c);
 8001d4c:	fb03 0012 	mls	r0, r3, r2, r0
    p1 = 128 * a + ((128 * b) / c) - 512;
 8001d50:	4416      	add	r6, r2
    p3 = c;
 8001d52:	e7cf      	b.n	8001cf4 <multisynth_calc+0x54>
	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8001d54:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <multisynth_calc+0x16c>)
 8001d56:	4298      	cmp	r0, r3
 8001d58:	f175 0303 	sbcs.w	r3, r5, #3
 8001d5c:	bf2c      	ite	cs
 8001d5e:	f04f 0901 	movcs.w	r9, #1
 8001d62:	f04f 0900 	movcc.w	r9, #0
		a = pll_freq / freq;
 8001d66:	4622      	mov	r2, r4
 8001d68:	462b      	mov	r3, r5
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	f7fe fedb 	bl	8000b28 <__aeabi_uldivmod>
		if (a < SI5351_MULTISYNTH_A_MIN)
 8001d72:	2805      	cmp	r0, #5
		a = pll_freq / freq;
 8001d74:	4606      	mov	r6, r0
		if (a < SI5351_MULTISYNTH_A_MIN)
 8001d76:	d822      	bhi.n	8001dbe <multisynth_calc+0x11e>
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 8001d78:	2206      	movs	r2, #6
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	4639      	mov	r1, r7
 8001d80:	f7fe fed2 	bl	8000b28 <__aeabi_uldivmod>
 8001d84:	4604      	mov	r4, r0
 8001d86:	460d      	mov	r5, r1
		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 8001d88:	4622      	mov	r2, r4
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	4639      	mov	r1, r7
 8001d90:	f7fe feca 	bl	8000b28 <__aeabi_uldivmod>
 8001d94:	4619      	mov	r1, r3
 8001d96:	f8df b078 	ldr.w	fp, [pc, #120]	@ 8001e10 <multisynth_calc+0x170>
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	fba2 0c0b 	umull	r0, ip, r2, fp
 8001da0:	4622      	mov	r2, r4
 8001da2:	fb0b c101 	mla	r1, fp, r1, ip
 8001da6:	f7fe febf 	bl	8000b28 <__aeabi_uldivmod>
		c = b ? RFRAC_DENOM : 1;
 8001daa:	2800      	cmp	r0, #0
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	465b      	movne	r3, fp
	if (divby4 == 1)
 8001db2:	f1b9 0f00 	cmp.w	r9, #0
 8001db6:	d108      	bne.n	8001dca <multisynth_calc+0x12a>
 8001db8:	f04f 0901 	mov.w	r9, #1
 8001dbc:	e7c0      	b.n	8001d40 <multisynth_calc+0xa0>
		if (a > SI5351_MULTISYNTH_A_MAX)
 8001dbe:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001dc2:	d9e1      	bls.n	8001d88 <multisynth_calc+0xe8>
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 8001dc4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001dc8:	e7d7      	b.n	8001d7a <multisynth_calc+0xda>
		p2 = 0;
 8001dca:	2000      	movs	r0, #0
		p3 = 1;
 8001dcc:	464b      	mov	r3, r9
		p1 = 0;
 8001dce:	4606      	mov	r6, r0
 8001dd0:	e790      	b.n	8001cf4 <multisynth_calc+0x54>
	if(pll_freq == 0)
 8001dd2:	ea58 0107 	orrs.w	r1, r8, r7
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
	if(pll_freq == 0)
 8001dda:	d081      	beq.n	8001ce0 <multisynth_calc+0x40>
		divby4 = 1;
 8001ddc:	f04f 0901 	mov.w	r9, #1
 8001de0:	e7c1      	b.n	8001d66 <multisynth_calc+0xc6>
	if(pll_freq == 0)
 8001de2:	ea58 0307 	orrs.w	r3, r8, r7
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 8001de6:	464d      	mov	r5, r9
 8001de8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e14 <multisynth_calc+0x174>)
	if(pll_freq == 0)
 8001dea:	d1bc      	bne.n	8001d66 <multisynth_calc+0xc6>
			do_div(lltmp, freq);
 8001dec:	f44f 66e1 	mov.w	r6, #1800	@ 0x708
 8001df0:	462a      	mov	r2, r5
 8001df2:	e79a      	b.n	8001d2a <multisynth_calc+0x8a>
 8001df4:	f3af 8000 	nop.w
 8001df8:	f46b0400 	.word	0xf46b0400
 8001dfc:	00000014 	.word	0x00000014
 8001e00:	3d1ac100 	.word	0x3d1ac100
 8001e04:	02faf07f 	.word	0x02faf07f
 8001e08:	7e11d5ff 	.word	0x7e11d5ff
 8001e0c:	7e11d600 	.word	0x7e11d600
 8001e10:	000f4240 	.word	0x000f4240
 8001e14:	02faf080 	.word	0x02faf080

08001e18 <multisynth67_calc>:

uint64_t multisynth67_calc(uint64_t freq, uint64_t pll_freq, struct Si5351RegSet *reg)
{
 8001e18:	4684      	mov	ip, r0
 8001e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4619      	mov	r1, r3
	// Multisynth bounds checking
	if(freq > SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT)
	{
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if(freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <multisynth67_calc+0xc0>)
 8001e22:	4626      	mov	r6, r4
 8001e24:	459c      	cmp	ip, r3
 8001e26:	f174 0400 	sbcs.w	r4, r4, #0
 8001e2a:	4665      	mov	r5, ip
 8001e2c:	bf3c      	itt	cc
 8001e2e:	461d      	movcc	r5, r3
 8001e30:	2600      	movcc	r6, #0
 8001e32:	2303      	movs	r3, #3
 8001e34:	4c29      	ldr	r4, [pc, #164]	@ (8001edc <multisynth67_calc+0xc4>)
{
 8001e36:	4610      	mov	r0, r2
 8001e38:	42ac      	cmp	r4, r5
 8001e3a:	eb73 0206 	sbcs.w	r2, r3, r6
 8001e3e:	bf3c      	itt	cc
 8001e40:	4625      	movcc	r5, r4
 8001e42:	461e      	movcc	r6, r3
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
	}

	if(pll_freq == 0)
 8001e44:	ea50 0301 	orrs.w	r3, r0, r1
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		lltmp = (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) - 100000000UL; // margin needed?
		do_div(lltmp, freq);
 8001e48:	462a      	mov	r2, r5
 8001e4a:	4633      	mov	r3, r6
{
 8001e4c:	9f06      	ldr	r7, [sp, #24]
	if(pll_freq == 0)
 8001e4e:	d128      	bne.n	8001ea2 <multisynth67_calc+0x8a>
		do_div(lltmp, freq);
 8001e50:	a11f      	add	r1, pc, #124	@ (adr r1, 8001ed0 <multisynth67_calc+0xb8>)
 8001e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e56:	f7fe fe67 	bl	8000b28 <__aeabi_uldivmod>
 8001e5a:	4604      	mov	r4, r0
		a = (uint32_t)lltmp;

		// Divisor has to be even
		if(a % 2 != 0)
 8001e5c:	07c3      	lsls	r3, r0, #31
		{
			a++;
 8001e5e:	bf48      	it	mi
 8001e60:	3401      	addmi	r4, #1
		// Divisor bounds check
		if(a < SI5351_MULTISYNTH_A_MIN)
		{
			a = SI5351_MULTISYNTH_A_MIN;
		}
		if(a > SI5351_MULTISYNTH67_A_MAX)
 8001e62:	2cfe      	cmp	r4, #254	@ 0xfe
 8001e64:	bf28      	it	cs
 8001e66:	24fe      	movcs	r4, #254	@ 0xfe
		{
			a = SI5351_MULTISYNTH67_A_MAX;
		}

		pll_freq = a * freq;
 8001e68:	fba4 0105 	umull	r0, r1, r4, r5

		// PLL bounds checking
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <multisynth67_calc+0xc8>)
		pll_freq = a * freq;
 8001e6e:	fb04 1106 	mla	r1, r4, r6, r1
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 8001e72:	4283      	cmp	r3, r0
 8001e74:	f04f 0314 	mov.w	r3, #20
 8001e78:	418b      	sbcs	r3, r1
 8001e7a:	d20a      	bcs.n	8001e92 <multisynth67_calc+0x7a>
		{
			a -= 2;
 8001e7c:	3c02      	subs	r4, #2
			pll_freq = a * freq;
		}
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
		{
			a += 2;
			pll_freq = a * freq;
 8001e7e:	fba4 0105 	umull	r0, r1, r4, r5
 8001e82:	fb04 1106 	mla	r1, r4, r6, r1
		}

		reg->p1 = (uint8_t)a;
		reg->p2 = 0;
 8001e86:	2300      	movs	r3, #0
		reg->p3 = 0;
 8001e88:	e9c7 3301 	strd	r3, r3, [r7, #4]
		reg->p1 = (uint8_t)a;
 8001e8c:	b2e4      	uxtb	r4, r4
 8001e8e:	603c      	str	r4, [r7, #0]
				reg->p3 = 0;
				return 1;
			}
		}
	}
}
 8001e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <multisynth67_calc+0xcc>)
 8001e94:	4283      	cmp	r3, r0
 8001e96:	f04f 030d 	mov.w	r3, #13
 8001e9a:	418b      	sbcs	r3, r1
 8001e9c:	d3f3      	bcc.n	8001e86 <multisynth67_calc+0x6e>
			a += 2;
 8001e9e:	3402      	adds	r4, #2
 8001ea0:	e7ed      	b.n	8001e7e <multisynth67_calc+0x66>
		if(pll_freq % freq)
 8001ea2:	f7fe fe41 	bl	8000b28 <__aeabi_uldivmod>
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4610      	mov	r0, r2
 8001eae:	d109      	bne.n	8001ec4 <multisynth67_calc+0xac>
			if(a < SI5351_MULTISYNTH_A_MIN || a > SI5351_MULTISYNTH67_A_MAX)
 8001eb0:	1fa3      	subs	r3, r4, #6
 8001eb2:	2bf8      	cmp	r3, #248	@ 0xf8
 8001eb4:	d8ec      	bhi.n	8001e90 <multisynth67_calc+0x78>
				reg->p2 = 0;
 8001eb6:	2100      	movs	r1, #0
				reg->p1 = (uint8_t)a;
 8001eb8:	b2e4      	uxtb	r4, r4
				return 1;
 8001eba:	2001      	movs	r0, #1
				reg->p3 = 0;
 8001ebc:	e9c7 1101 	strd	r1, r1, [r7, #4]
				reg->p1 = (uint8_t)a;
 8001ec0:	603c      	str	r4, [r7, #0]
				return 1;
 8001ec2:	e7e5      	b.n	8001e90 <multisynth67_calc+0x78>
			return 0;
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	e7e2      	b.n	8001e90 <multisynth67_calc+0x78>
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	ee752300 	.word	0xee752300
 8001ed4:	00000014 	.word	0x00000014
 8001ed8:	02faf080 	.word	0x02faf080
 8001edc:	7e11d600 	.word	0x7e11d600
 8001ee0:	f46b0400 	.word	0xf46b0400
 8001ee4:	f84757ff 	.word	0xf84757ff

08001ee8 <select_r_div>:
uint8_t select_r_div(uint64_t *freq)
{
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 8001ee8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8001eec:	4601      	mov	r1, r0
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 8001eee:	2000      	movs	r0, #0
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 8001ef2:	4c3a      	ldr	r4, [pc, #232]	@ (8001fdc <select_r_div+0xf4>)
 8001ef4:	4e3a      	ldr	r6, [pc, #232]	@ (8001fe0 <select_r_div+0xf8>)
 8001ef6:	191c      	adds	r4, r3, r4
 8001ef8:	f162 0500 	sbc.w	r5, r2, #0
 8001efc:	42a6      	cmp	r6, r4
 8001efe:	eb70 0505 	sbcs.w	r5, r0, r5
 8001f02:	d307      	bcc.n	8001f14 <select_r_div+0x2c>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 8001f04:	2007      	movs	r0, #7
		*freq *= 128ULL;
 8001f06:	01d2      	lsls	r2, r2, #7
 8001f08:	ea42 6253 	orr.w	r2, r2, r3, lsr #25
 8001f0c:	01db      	lsls	r3, r3, #7
 8001f0e:	e9c1 3200 	strd	r3, r2, [r1]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4))
 8001f14:	4c33      	ldr	r4, [pc, #204]	@ (8001fe4 <select_r_div+0xfc>)
 8001f16:	4e34      	ldr	r6, [pc, #208]	@ (8001fe8 <select_r_div+0x100>)
 8001f18:	191c      	adds	r4, r3, r4
 8001f1a:	f162 0500 	sbc.w	r5, r2, #0
 8001f1e:	42a6      	cmp	r6, r4
 8001f20:	eb70 0505 	sbcs.w	r5, r0, r5
 8001f24:	d307      	bcc.n	8001f36 <select_r_div+0x4e>
		*freq *= 64ULL;
 8001f26:	0192      	lsls	r2, r2, #6
 8001f28:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8001f2c:	019b      	lsls	r3, r3, #6
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 8001f2e:	2006      	movs	r0, #6
		*freq *= 64ULL;
 8001f30:	e9c1 3200 	strd	r3, r2, [r1]
 8001f34:	e7ed      	b.n	8001f12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8))
 8001f36:	4c2d      	ldr	r4, [pc, #180]	@ (8001fec <select_r_div+0x104>)
 8001f38:	4e2d      	ldr	r6, [pc, #180]	@ (8001ff0 <select_r_div+0x108>)
 8001f3a:	191c      	adds	r4, r3, r4
 8001f3c:	f162 0500 	sbc.w	r5, r2, #0
 8001f40:	42a6      	cmp	r6, r4
 8001f42:	eb70 0505 	sbcs.w	r5, r0, r5
 8001f46:	d307      	bcc.n	8001f58 <select_r_div+0x70>
		*freq *= 32ULL;
 8001f48:	0152      	lsls	r2, r2, #5
 8001f4a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001f4e:	015b      	lsls	r3, r3, #5
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 8001f50:	2005      	movs	r0, #5
		*freq *= 32ULL;
 8001f52:	e9c1 3200 	strd	r3, r2, [r1]
 8001f56:	e7dc      	b.n	8001f12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16))
 8001f58:	4c26      	ldr	r4, [pc, #152]	@ (8001ff4 <select_r_div+0x10c>)
 8001f5a:	4e27      	ldr	r6, [pc, #156]	@ (8001ff8 <select_r_div+0x110>)
 8001f5c:	191c      	adds	r4, r3, r4
 8001f5e:	f162 0500 	sbc.w	r5, r2, #0
 8001f62:	42b4      	cmp	r4, r6
 8001f64:	f175 0500 	sbcs.w	r5, r5, #0
 8001f68:	d207      	bcs.n	8001f7a <select_r_div+0x92>
		*freq *= 16ULL;
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001f70:	011b      	lsls	r3, r3, #4
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 8001f72:	2004      	movs	r0, #4
		*freq *= 16ULL;
 8001f74:	e9c1 3200 	strd	r3, r2, [r1]
 8001f78:	e7cb      	b.n	8001f12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32))
 8001f7a:	4c20      	ldr	r4, [pc, #128]	@ (8001ffc <select_r_div+0x114>)
 8001f7c:	4e20      	ldr	r6, [pc, #128]	@ (8002000 <select_r_div+0x118>)
 8001f7e:	191c      	adds	r4, r3, r4
 8001f80:	f162 0500 	sbc.w	r5, r2, #0
 8001f84:	42b4      	cmp	r4, r6
 8001f86:	f175 0500 	sbcs.w	r5, r5, #0
 8001f8a:	d207      	bcs.n	8001f9c <select_r_div+0xb4>
		*freq *= 8ULL;
 8001f8c:	00d2      	lsls	r2, r2, #3
 8001f8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f92:	00db      	lsls	r3, r3, #3
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 8001f94:	2003      	movs	r0, #3
		*freq *= 8ULL;
 8001f96:	e9c1 3200 	strd	r3, r2, [r1]
 8001f9a:	e7ba      	b.n	8001f12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64))
 8001f9c:	4c19      	ldr	r4, [pc, #100]	@ (8002004 <select_r_div+0x11c>)
 8001f9e:	4e1a      	ldr	r6, [pc, #104]	@ (8002008 <select_r_div+0x120>)
 8001fa0:	191c      	adds	r4, r3, r4
 8001fa2:	f162 0500 	sbc.w	r5, r2, #0
 8001fa6:	42b4      	cmp	r4, r6
 8001fa8:	f175 0500 	sbcs.w	r5, r5, #0
 8001fac:	d207      	bcs.n	8001fbe <select_r_div+0xd6>
		*freq *= 4ULL;
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001fb4:	009b      	lsls	r3, r3, #2
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 8001fb6:	2002      	movs	r0, #2
		*freq *= 4ULL;
 8001fb8:	e9c1 3200 	strd	r3, r2, [r1]
 8001fbc:	e7a9      	b.n	8001f12 <select_r_div+0x2a>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128))
 8001fbe:	4c13      	ldr	r4, [pc, #76]	@ (800200c <select_r_div+0x124>)
 8001fc0:	4e13      	ldr	r6, [pc, #76]	@ (8002010 <select_r_div+0x128>)
 8001fc2:	191c      	adds	r4, r3, r4
 8001fc4:	f162 0500 	sbc.w	r5, r2, #0
 8001fc8:	42b4      	cmp	r4, r6
 8001fca:	f175 0500 	sbcs.w	r5, r5, #0
 8001fce:	d2a0      	bcs.n	8001f12 <select_r_div+0x2a>
		*freq *= 2ULL;
 8001fd0:	18db      	adds	r3, r3, r3
 8001fd2:	4152      	adcs	r2, r2
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8001fd4:	2001      	movs	r0, #1
		*freq *= 2ULL;
 8001fd6:	e9c1 3200 	strd	r3, r2, [r1]
 8001fda:	e79a      	b.n	8001f12 <select_r_div+0x2a>
 8001fdc:	fff9e580 	.word	0xfff9e580
 8001fe0:	00061a7f 	.word	0x00061a7f
 8001fe4:	fff3cb00 	.word	0xfff3cb00
 8001fe8:	000c34ff 	.word	0x000c34ff
 8001fec:	ffe79600 	.word	0xffe79600
 8001ff0:	001869ff 	.word	0x001869ff
 8001ff4:	ffcf2c00 	.word	0xffcf2c00
 8001ff8:	0030d400 	.word	0x0030d400
 8001ffc:	ff9e5800 	.word	0xff9e5800
 8002000:	0061a800 	.word	0x0061a800
 8002004:	ff3cb000 	.word	0xff3cb000
 8002008:	00c35000 	.word	0x00c35000
 800200c:	fe796000 	.word	0xfe796000
 8002010:	0186a000 	.word	0x0186a000

08002014 <select_r_div_ms67>:
uint8_t select_r_div_ms67(uint64_t *freq)
{
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 8002014:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8002018:	4601      	mov	r1, r0
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800201a:	2000      	movs	r0, #0
{
 800201c:	b570      	push	{r4, r5, r6, lr}
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800201e:	4c3a      	ldr	r4, [pc, #232]	@ (8002108 <select_r_div_ms67+0xf4>)
 8002020:	4e3a      	ldr	r6, [pc, #232]	@ (800210c <select_r_div_ms67+0xf8>)
 8002022:	191c      	adds	r4, r3, r4
 8002024:	f162 0500 	sbc.w	r5, r2, #0
 8002028:	42a6      	cmp	r6, r4
 800202a:	eb70 0505 	sbcs.w	r5, r0, r5
 800202e:	d307      	bcc.n	8002040 <select_r_div_ms67+0x2c>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 8002030:	2007      	movs	r0, #7
		*freq *= 128ULL;
 8002032:	01d2      	lsls	r2, r2, #7
 8002034:	ea42 6253 	orr.w	r2, r2, r3, lsr #25
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	e9c1 3200 	strd	r3, r2, [r1]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 800203e:	bd70      	pop	{r4, r5, r6, pc}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4))
 8002040:	4c33      	ldr	r4, [pc, #204]	@ (8002110 <select_r_div_ms67+0xfc>)
 8002042:	4e34      	ldr	r6, [pc, #208]	@ (8002114 <select_r_div_ms67+0x100>)
 8002044:	191c      	adds	r4, r3, r4
 8002046:	f162 0500 	sbc.w	r5, r2, #0
 800204a:	42a6      	cmp	r6, r4
 800204c:	eb70 0505 	sbcs.w	r5, r0, r5
 8002050:	d307      	bcc.n	8002062 <select_r_div_ms67+0x4e>
		*freq *= 64ULL;
 8002052:	0192      	lsls	r2, r2, #6
 8002054:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8002058:	019b      	lsls	r3, r3, #6
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800205a:	2006      	movs	r0, #6
		*freq *= 64ULL;
 800205c:	e9c1 3200 	strd	r3, r2, [r1]
 8002060:	e7ed      	b.n	800203e <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8))
 8002062:	4c2d      	ldr	r4, [pc, #180]	@ (8002118 <select_r_div_ms67+0x104>)
 8002064:	4e2d      	ldr	r6, [pc, #180]	@ (800211c <select_r_div_ms67+0x108>)
 8002066:	191c      	adds	r4, r3, r4
 8002068:	f162 0500 	sbc.w	r5, r2, #0
 800206c:	42a6      	cmp	r6, r4
 800206e:	eb70 0505 	sbcs.w	r5, r0, r5
 8002072:	d307      	bcc.n	8002084 <select_r_div_ms67+0x70>
		*freq *= 32ULL;
 8002074:	0152      	lsls	r2, r2, #5
 8002076:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800207a:	015b      	lsls	r3, r3, #5
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800207c:	2005      	movs	r0, #5
		*freq *= 32ULL;
 800207e:	e9c1 3200 	strd	r3, r2, [r1]
 8002082:	e7dc      	b.n	800203e <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16))
 8002084:	4c26      	ldr	r4, [pc, #152]	@ (8002120 <select_r_div_ms67+0x10c>)
 8002086:	4e27      	ldr	r6, [pc, #156]	@ (8002124 <select_r_div_ms67+0x110>)
 8002088:	191c      	adds	r4, r3, r4
 800208a:	f162 0500 	sbc.w	r5, r2, #0
 800208e:	42a6      	cmp	r6, r4
 8002090:	eb70 0505 	sbcs.w	r5, r0, r5
 8002094:	d307      	bcc.n	80020a6 <select_r_div_ms67+0x92>
		*freq *= 16ULL;
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800209c:	011b      	lsls	r3, r3, #4
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800209e:	2004      	movs	r0, #4
		*freq *= 16ULL;
 80020a0:	e9c1 3200 	strd	r3, r2, [r1]
 80020a4:	e7cb      	b.n	800203e <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32))
 80020a6:	4c20      	ldr	r4, [pc, #128]	@ (8002128 <select_r_div_ms67+0x114>)
 80020a8:	4e20      	ldr	r6, [pc, #128]	@ (800212c <select_r_div_ms67+0x118>)
 80020aa:	191c      	adds	r4, r3, r4
 80020ac:	f162 0500 	sbc.w	r5, r2, #0
 80020b0:	42a6      	cmp	r6, r4
 80020b2:	eb70 0505 	sbcs.w	r5, r0, r5
 80020b6:	d307      	bcc.n	80020c8 <select_r_div_ms67+0xb4>
		*freq *= 8ULL;
 80020b8:	00d2      	lsls	r2, r2, #3
 80020ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020be:	00db      	lsls	r3, r3, #3
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 80020c0:	2003      	movs	r0, #3
		*freq *= 8ULL;
 80020c2:	e9c1 3200 	strd	r3, r2, [r1]
 80020c6:	e7ba      	b.n	800203e <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64))
 80020c8:	4c19      	ldr	r4, [pc, #100]	@ (8002130 <select_r_div_ms67+0x11c>)
 80020ca:	4e1a      	ldr	r6, [pc, #104]	@ (8002134 <select_r_div_ms67+0x120>)
 80020cc:	191c      	adds	r4, r3, r4
 80020ce:	f162 0500 	sbc.w	r5, r2, #0
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	eb70 0505 	sbcs.w	r5, r0, r5
 80020d8:	d307      	bcc.n	80020ea <select_r_div_ms67+0xd6>
		*freq *= 4ULL;
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80020e0:	009b      	lsls	r3, r3, #2
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 80020e2:	2002      	movs	r0, #2
		*freq *= 4ULL;
 80020e4:	e9c1 3200 	strd	r3, r2, [r1]
 80020e8:	e7a9      	b.n	800203e <select_r_div_ms67+0x2a>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 128))
 80020ea:	4c13      	ldr	r4, [pc, #76]	@ (8002138 <select_r_div_ms67+0x124>)
 80020ec:	4e13      	ldr	r6, [pc, #76]	@ (800213c <select_r_div_ms67+0x128>)
 80020ee:	191c      	adds	r4, r3, r4
 80020f0:	f162 0500 	sbc.w	r5, r2, #0
 80020f4:	42a6      	cmp	r6, r4
 80020f6:	eb70 0505 	sbcs.w	r5, r0, r5
 80020fa:	d3a0      	bcc.n	800203e <select_r_div_ms67+0x2a>
		*freq *= 2ULL;
 80020fc:	18db      	adds	r3, r3, r3
 80020fe:	4152      	adcs	r2, r2
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8002100:	2001      	movs	r0, #1
		*freq *= 2ULL;
 8002102:	e9c1 3200 	strd	r3, r2, [r1]
 8002106:	e79a      	b.n	800203e <select_r_div_ms67+0x2a>
 8002108:	ffe3d768 	.word	0xffe3d768
 800210c:	001c2897 	.word	0x001c2897
 8002110:	ffc7aed0 	.word	0xffc7aed0
 8002114:	0038512f 	.word	0x0038512f
 8002118:	ff8f5da0 	.word	0xff8f5da0
 800211c:	0070a25f 	.word	0x0070a25f
 8002120:	ff1ebb40 	.word	0xff1ebb40
 8002124:	00e144bf 	.word	0x00e144bf
 8002128:	fe3d7680 	.word	0xfe3d7680
 800212c:	01c2897f 	.word	0x01c2897f
 8002130:	fc7aed00 	.word	0xfc7aed00
 8002134:	038512ff 	.word	0x038512ff
 8002138:	f8f5da00 	.word	0xf8f5da00
 800213c:	070a25ff 	.word	0x070a25ff

08002140 <si5351_write_bulk>:
 * @param regAddr Register address to write to
 * @param length Count Bytes
 * @param data Value to write
 * @return Status of operation (true = success)
 */
uint8_t si5351_write_bulk(uint8_t regAddr, uint8_t length, uint8_t *data) {
 8002140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, i2c_bus_addr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, sizeof(uint8_t)*length, 500);
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <si5351_write_bulk+0x2c>)
 8002144:	781c      	ldrb	r4, [r3, #0]
 8002146:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800214a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800214e:	2301      	movs	r3, #1
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	4602      	mov	r2, r0
 8002154:	4806      	ldr	r0, [pc, #24]	@ (8002170 <si5351_write_bulk+0x30>)
 8002156:	fa04 f103 	lsl.w	r1, r4, r3
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	f001 ff78 	bl	8004050 <HAL_I2C_Mem_Write>
  return status == HAL_OK;
}
 8002160:	fab0 f080 	clz	r0, r0
 8002164:	0940      	lsrs	r0, r0, #5
 8002166:	b004      	add	sp, #16
 8002168:	bd10      	pop	{r4, pc}
 800216a:	bf00      	nop
 800216c:	20000410 	.word	0x20000410
 8002170:	20000470 	.word	0x20000470

08002174 <set_pll>:
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(target_pll == SI5351_PLLA)
 8002176:	4614      	mov	r4, r2
{
 8002178:	b08d      	sub	sp, #52	@ 0x34
 800217a:	4607      	mov	r7, r0
 800217c:	460e      	mov	r6, r1
 800217e:	4a27      	ldr	r2, [pc, #156]	@ (800221c <set_pll+0xa8>)
 8002180:	ab04      	add	r3, sp, #16
	if(target_pll == SI5351_PLLA)
 8002182:	bbac      	cbnz	r4, 80021f0 <set_pll+0x7c>
		pll_calc(SI5351_PLLA, pll_freq, &pll_reg, ref_correction[plla_ref_osc], 0);
 8002184:	4926      	ldr	r1, [pc, #152]	@ (8002220 <set_pll+0xac>)
 8002186:	9402      	str	r4, [sp, #8]
 8002188:	7809      	ldrb	r1, [r1, #0]
 800218a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800218e:	e9cd 3200 	strd	r3, r2, [sp]
 8002192:	4602      	mov	r2, r0
 8002194:	4633      	mov	r3, r6
 8002196:	4620      	mov	r0, r4
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 8002198:	f7ff fcda 	bl	8001b50 <pll_calc>
  params[i++] = temp;
 800219c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 80021a0:	9d06      	ldr	r5, [sp, #24]
  params[i++] = temp;
 80021a2:	ba5b      	rev16	r3, r3
 80021a4:	f8ad 301c 	strh.w	r3, [sp, #28]
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 80021a8:	9b04      	ldr	r3, [sp, #16]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 80021aa:	0b2d      	lsrs	r5, r5, #12
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 80021ac:	f3c3 4201 	ubfx	r2, r3, #16, #2
  params[i++] = temp;
 80021b0:	f88d 201e 	strb.w	r2, [sp, #30]
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 80021b4:	0a1a      	lsrs	r2, r3, #8
 80021b6:	f88d 201f 	strb.w	r2, [sp, #31]
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 80021ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  temp = (uint8_t)(pll_reg.p1  & 0xFF);
 80021be:	f88d 3020 	strb.w	r3, [sp, #32]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 80021c2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80021c6:	f005 05f0 	and.w	r5, r5, #240	@ 0xf0
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 80021ca:	f002 020f 	and.w	r2, r2, #15
 80021ce:	ba5b      	rev16	r3, r3
 80021d0:	4315      	orrs	r5, r2
  params[i++] = temp;
 80021d2:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
  params[i++] = temp;
 80021d6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
  if(target_pll == SI5351_PLLA)
 80021da:	b9ac      	cbnz	r4, 8002208 <set_pll+0x94>
    si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
 80021dc:	2108      	movs	r1, #8
 80021de:	201a      	movs	r0, #26
 80021e0:	aa07      	add	r2, sp, #28
 80021e2:	f7ff ffad 	bl	8002140 <si5351_write_bulk>
		plla_freq = pll_freq;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <set_pll+0xb0>)
		pllb_freq = pll_freq;
 80021e8:	e9c3 7600 	strd	r7, r6, [r3]
}
 80021ec:	b00d      	add	sp, #52	@ 0x34
 80021ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 80021f0:	2100      	movs	r1, #0
 80021f2:	9102      	str	r1, [sp, #8]
 80021f4:	490c      	ldr	r1, [pc, #48]	@ (8002228 <set_pll+0xb4>)
 80021f6:	7809      	ldrb	r1, [r1, #0]
 80021f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80021fc:	e9cd 3200 	strd	r3, r2, [sp]
 8002200:	4602      	mov	r2, r0
 8002202:	4633      	mov	r3, r6
 8002204:	2001      	movs	r0, #1
 8002206:	e7c7      	b.n	8002198 <set_pll+0x24>
  else if(target_pll == SI5351_PLLB)
 8002208:	2c01      	cmp	r4, #1
 800220a:	d1ef      	bne.n	80021ec <set_pll+0x78>
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
 800220c:	2108      	movs	r1, #8
 800220e:	2022      	movs	r0, #34	@ 0x22
 8002210:	aa07      	add	r2, sp, #28
 8002212:	f7ff ff95 	bl	8002140 <si5351_write_bulk>
		pllb_freq = pll_freq;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <set_pll+0xb8>)
 8002218:	e7e6      	b.n	80021e8 <set_pll+0x74>
 800221a:	bf00      	nop
 800221c:	20000414 	.word	0x20000414
 8002220:	200003f5 	.word	0x200003f5
 8002224:	20000428 	.word	0x20000428
 8002228:	200003f4 	.word	0x200003f4
 800222c:	20000420 	.word	0x20000420

08002230 <set_correction>:
{
 8002230:	b508      	push	{r3, lr}
	ref_correction[(uint8_t)ref_osc] = corr;
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <set_correction+0x24>)
	set_pll(plla_freq, SI5351_PLLA);
 8002234:	2200      	movs	r2, #0
	ref_correction[(uint8_t)ref_osc] = corr;
 8002236:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
	set_pll(plla_freq, SI5351_PLLA);
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <set_correction+0x28>)
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	f7ff ff98 	bl	8002174 <set_pll>
	set_pll(pllb_freq, SI5351_PLLB);
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <set_correction+0x2c>)
 8002246:	2201      	movs	r2, #1
 8002248:	e9d3 0100 	ldrd	r0, r1, [r3]
}
 800224c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_pll(pllb_freq, SI5351_PLLB);
 8002250:	f7ff bf90 	b.w	8002174 <set_pll>
 8002254:	20000414 	.word	0x20000414
 8002258:	20000428 	.word	0x20000428
 800225c:	20000420 	.word	0x20000420

08002260 <si5351_write>:
/** Write single byte to an 8-bit device register.
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
uint8_t si5351_write(uint8_t regAddr, uint8_t data) {
 8002260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, i2c_bus_addr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, sizeof data, 500);
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <si5351_write+0x34>)
uint8_t si5351_write(uint8_t regAddr, uint8_t data) {
 8002264:	4602      	mov	r2, r0
 8002266:	f88d 1017 	strb.w	r1, [sp, #23]
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, i2c_bus_addr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, sizeof data, 500);
 800226a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800226e:	7819      	ldrb	r1, [r3, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8002276:	f10d 0017 	add.w	r0, sp, #23
 800227a:	9000      	str	r0, [sp, #0]
 800227c:	4806      	ldr	r0, [pc, #24]	@ (8002298 <si5351_write+0x38>)
 800227e:	4099      	lsls	r1, r3
 8002280:	6800      	ldr	r0, [r0, #0]
 8002282:	f001 fee5 	bl	8004050 <HAL_I2C_Mem_Write>
  return status == HAL_OK;
}
 8002286:	fab0 f080 	clz	r0, r0
 800228a:	0940      	lsrs	r0, r0, #5
 800228c:	b007      	add	sp, #28
 800228e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002292:	bf00      	nop
 8002294:	20000410 	.word	0x20000410
 8002298:	20000470 	.word	0x20000470

0800229c <pll_reset>:
	if(target_pll == SI5351_PLLA)
 800229c:	b918      	cbnz	r0, 80022a6 <pll_reset+0xa>
    	si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 800229e:	2120      	movs	r1, #32
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 80022a0:	20b1      	movs	r0, #177	@ 0xb1
 80022a2:	f7ff bfdd 	b.w	8002260 <si5351_write>
	else if(target_pll == SI5351_PLLB)
 80022a6:	2801      	cmp	r0, #1
 80022a8:	d101      	bne.n	80022ae <pll_reset+0x12>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 80022aa:	2180      	movs	r1, #128	@ 0x80
 80022ac:	e7f8      	b.n	80022a0 <pll_reset+0x4>
}
 80022ae:	4770      	bx	lr

080022b0 <si5351_read>:

uint8_t si5351_read(uint8_t regAddr) {
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg_val = 0;

  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 80022b2:	2664      	movs	r6, #100	@ 0x64
 80022b4:	2301      	movs	r3, #1
	uint8_t reg_val = 0;
 80022b6:	2400      	movs	r4, #0
  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 80022b8:	4f0f      	ldr	r7, [pc, #60]	@ (80022f8 <si5351_read+0x48>)
uint8_t si5351_read(uint8_t regAddr) {
 80022ba:	b087      	sub	sp, #28
  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 80022bc:	7839      	ldrb	r1, [r7, #0]
 80022be:	4d0f      	ldr	r5, [pc, #60]	@ (80022fc <si5351_read+0x4c>)
 80022c0:	9600      	str	r6, [sp, #0]
 80022c2:	4099      	lsls	r1, r3
uint8_t si5351_read(uint8_t regAddr) {
 80022c4:	f88d 000f 	strb.w	r0, [sp, #15]
  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 80022c8:	f10d 020f 	add.w	r2, sp, #15
 80022cc:	6828      	ldr	r0, [r5, #0]
	uint8_t reg_val = 0;
 80022ce:	f88d 4017 	strb.w	r4, [sp, #23]
  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 80022d2:	f001 fc37 	bl	8003b44 <HAL_I2C_Master_Transmit>

  if (HAL_I2C_Master_Receive(hi2c, i2c_bus_addr << 1, &reg_val, sizeof(uint8_t), 100) == HAL_OK) {
 80022d6:	2301      	movs	r3, #1
 80022d8:	7839      	ldrb	r1, [r7, #0]
 80022da:	9600      	str	r6, [sp, #0]
 80022dc:	6828      	ldr	r0, [r5, #0]
 80022de:	f10d 0217 	add.w	r2, sp, #23
 80022e2:	4099      	lsls	r1, r3
 80022e4:	f001 fd08 	bl	8003cf8 <HAL_I2C_Master_Receive>
 80022e8:	b918      	cbnz	r0, 80022f2 <si5351_read+0x42>
    return reg_val;
 80022ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
  }

  return 0;
}
 80022ee:	b007      	add	sp, #28
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return 0;
 80022f2:	4620      	mov	r0, r4
 80022f4:	e7fb      	b.n	80022ee <si5351_read+0x3e>
 80022f6:	bf00      	nop
 80022f8:	20000410 	.word	0x20000410
 80022fc:	20000470 	.word	0x20000470

08002300 <output_enable>:
{
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4605      	mov	r5, r0
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 8002304:	2003      	movs	r0, #3
{
 8002306:	460c      	mov	r4, r1
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 8002308:	f7ff ffd2 	bl	80022b0 <si5351_read>
    reg_val &= ~(1<<(uint8_t)clk);
 800230c:	2301      	movs	r3, #1
  if(enable == 1)
 800230e:	2c01      	cmp	r4, #1
    reg_val &= ~(1<<(uint8_t)clk);
 8002310:	fa03 f305 	lsl.w	r3, r3, r5
 8002314:	bf0c      	ite	eq
 8002316:	ea20 0103 	biceq.w	r1, r0, r3
    reg_val |= (1<<(uint8_t)clk);
 800231a:	ea40 0103 	orrne.w	r1, r0, r3
 800231e:	b2c9      	uxtb	r1, r1
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 8002320:	2003      	movs	r0, #3
}
 8002322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 8002326:	f7ff bf9b 	b.w	8002260 <si5351_write>

0800232a <si5351_drive_strength>:
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800232a:	3010      	adds	r0, #16
void si5351_drive_strength(enum si5351_clock clk, enum si5351_drive drive) {
 800232c:	b538      	push	{r3, r4, r5, lr}
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800232e:	b2c4      	uxtb	r4, r0
void si5351_drive_strength(enum si5351_clock clk, enum si5351_drive drive) {
 8002330:	460d      	mov	r5, r1
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff ffbc 	bl	80022b0 <si5351_read>
  switch(drive)
 8002338:	2d02      	cmp	r5, #2
  reg_val &= ~(mask);
 800233a:	f000 01fc 	and.w	r1, r0, #252	@ 0xfc
  switch(drive)
 800233e:	d00a      	beq.n	8002356 <si5351_drive_strength+0x2c>
 8002340:	2d03      	cmp	r5, #3
 8002342:	d00b      	beq.n	800235c <si5351_drive_strength+0x32>
 8002344:	2d01      	cmp	r5, #1
 8002346:	d101      	bne.n	800234c <si5351_drive_strength+0x22>
   reg_val |= 0x01;
 8002348:	f041 0101 	orr.w	r1, r1, #1
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800234c:	4620      	mov	r0, r4
}
 800234e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 8002352:	f7ff bf85 	b.w	8002260 <si5351_write>
    reg_val |= 0x02;
 8002356:	f041 0102 	orr.w	r1, r1, #2
    break;
 800235a:	e7f7      	b.n	800234c <si5351_drive_strength+0x22>
    reg_val |= 0x03;
 800235c:	f041 0103 	orr.w	r1, r1, #3
    break;
 8002360:	e7f4      	b.n	800234c <si5351_drive_strength+0x22>
	...

08002364 <set_ms_source>:
{
 8002364:	b570      	push	{r4, r5, r6, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8002366:	f100 0610 	add.w	r6, r0, #16
 800236a:	b2f6      	uxtb	r6, r6
{
 800236c:	4605      	mov	r5, r0
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800236e:	4630      	mov	r0, r6
{
 8002370:	460c      	mov	r4, r1
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8002372:	f7ff ff9d 	bl	80022b0 <si5351_read>
 8002376:	4601      	mov	r1, r0
	if(pll == SI5351_PLLA)
 8002378:	b93c      	cbnz	r4, 800238a <set_ms_source+0x26>
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 800237a:	f000 01df 	and.w	r1, r0, #223	@ 0xdf
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800237e:	4630      	mov	r0, r6
 8002380:	f7ff ff6e 	bl	8002260 <si5351_write>
	pll_assignment[(uint8_t)clk] = pll;
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <set_ms_source+0x34>)
 8002386:	555c      	strb	r4, [r3, r5]
}
 8002388:	bd70      	pop	{r4, r5, r6, pc}
	else if(pll == SI5351_PLLB)
 800238a:	2c01      	cmp	r4, #1
		reg_val |= SI5351_CLK_PLL_SELECT;
 800238c:	bf04      	itt	eq
 800238e:	f040 0120 	orreq.w	r1, r0, #32
 8002392:	b2c9      	uxtbeq	r1, r1
 8002394:	e7f3      	b.n	800237e <set_ms_source+0x1a>
 8002396:	bf00      	nop
 8002398:	200003f6 	.word	0x200003f6
 800239c:	00000000 	.word	0x00000000

080023a0 <si5351_reset>:
void si5351_reset(void) {
 80023a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	pll_assignment[0] = SI5351_PLLA;
 80023a4:	2400      	movs	r4, #0
	pll_assignment[6] = SI5351_PLLB;
 80023a6:	2501      	movs	r5, #1
	si5351_write(16, 0x80);
 80023a8:	2180      	movs	r1, #128	@ 0x80
 80023aa:	2010      	movs	r0, #16
 80023ac:	f7ff ff58 	bl	8002260 <si5351_write>
	si5351_write(17, 0x80);
 80023b0:	2180      	movs	r1, #128	@ 0x80
 80023b2:	2011      	movs	r0, #17
 80023b4:	f7ff ff54 	bl	8002260 <si5351_write>
	si5351_write(18, 0x80);
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	2012      	movs	r0, #18
 80023bc:	f7ff ff50 	bl	8002260 <si5351_write>
	si5351_write(19, 0x80);
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	2013      	movs	r0, #19
 80023c4:	f7ff ff4c 	bl	8002260 <si5351_write>
	si5351_write(20, 0x80);
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	2014      	movs	r0, #20
 80023cc:	f7ff ff48 	bl	8002260 <si5351_write>
	si5351_write(21, 0x80);
 80023d0:	2180      	movs	r1, #128	@ 0x80
 80023d2:	2015      	movs	r0, #21
 80023d4:	f7ff ff44 	bl	8002260 <si5351_write>
	si5351_write(22, 0x80);
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	2016      	movs	r0, #22
 80023dc:	f7ff ff40 	bl	8002260 <si5351_write>
	si5351_write(23, 0x80);
 80023e0:	2180      	movs	r1, #128	@ 0x80
 80023e2:	2017      	movs	r0, #23
 80023e4:	f7ff ff3c 	bl	8002260 <si5351_write>
	si5351_write(16, 0x0c);
 80023e8:	210c      	movs	r1, #12
 80023ea:	2010      	movs	r0, #16
 80023ec:	f7ff ff38 	bl	8002260 <si5351_write>
	si5351_write(17, 0x0c);
 80023f0:	210c      	movs	r1, #12
 80023f2:	2011      	movs	r0, #17
 80023f4:	f7ff ff34 	bl	8002260 <si5351_write>
	si5351_write(18, 0x0c);
 80023f8:	210c      	movs	r1, #12
 80023fa:	2012      	movs	r0, #18
 80023fc:	f7ff ff30 	bl	8002260 <si5351_write>
	si5351_write(19, 0x0c);
 8002400:	210c      	movs	r1, #12
 8002402:	2013      	movs	r0, #19
 8002404:	f7ff ff2c 	bl	8002260 <si5351_write>
	si5351_write(20, 0x0c);
 8002408:	210c      	movs	r1, #12
 800240a:	2014      	movs	r0, #20
 800240c:	f7ff ff28 	bl	8002260 <si5351_write>
	si5351_write(21, 0x0c);
 8002410:	210c      	movs	r1, #12
 8002412:	2015      	movs	r0, #21
 8002414:	f7ff ff24 	bl	8002260 <si5351_write>
	si5351_write(22, 0x0c);
 8002418:	210c      	movs	r1, #12
 800241a:	2016      	movs	r0, #22
 800241c:	f7ff ff20 	bl	8002260 <si5351_write>
	si5351_write(23, 0x0c);
 8002420:	210c      	movs	r1, #12
 8002422:	2017      	movs	r0, #23
 8002424:	f7ff ff1c 	bl	8002260 <si5351_write>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 8002428:	a130      	add	r1, pc, #192	@ (adr r1, 80024ec <si5351_reset+0x14c>)
 800242a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800242e:	2200      	movs	r2, #0
 8002430:	f7ff fea0 	bl	8002174 <set_pll>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
 8002434:	a12d      	add	r1, pc, #180	@ (adr r1, 80024ec <si5351_reset+0x14c>)
 8002436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800243a:	2201      	movs	r2, #1
 800243c:	f7ff fe9a 	bl	8002174 <set_pll>
	pll_assignment[0] = SI5351_PLLA;
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <si5351_reset+0x140>)
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 8002442:	4621      	mov	r1, r4
 8002444:	4620      	mov	r0, r4
	pll_assignment[6] = SI5351_PLLB;
 8002446:	719d      	strb	r5, [r3, #6]
	pll_assignment[7] = SI5351_PLLB;
 8002448:	71dd      	strb	r5, [r3, #7]
	pll_assignment[0] = SI5351_PLLA;
 800244a:	701c      	strb	r4, [r3, #0]
	pll_assignment[1] = SI5351_PLLA;
 800244c:	705c      	strb	r4, [r3, #1]
	pll_assignment[2] = SI5351_PLLA;
 800244e:	709c      	strb	r4, [r3, #2]
	pll_assignment[3] = SI5351_PLLA;
 8002450:	70dc      	strb	r4, [r3, #3]
	pll_assignment[4] = SI5351_PLLA;
 8002452:	711c      	strb	r4, [r3, #4]
	pll_assignment[5] = SI5351_PLLA;
 8002454:	715c      	strb	r4, [r3, #5]
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 8002456:	f7ff ff85 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK1, SI5351_PLLA);
 800245a:	4628      	mov	r0, r5
 800245c:	4621      	mov	r1, r4
 800245e:	f7ff ff81 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK2, SI5351_PLLA);
 8002462:	4621      	mov	r1, r4
 8002464:	2002      	movs	r0, #2
 8002466:	f7ff ff7d 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK3, SI5351_PLLA);
 800246a:	4621      	mov	r1, r4
 800246c:	2003      	movs	r0, #3
 800246e:	f7ff ff79 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK4, SI5351_PLLA);
 8002472:	4621      	mov	r1, r4
 8002474:	2004      	movs	r0, #4
 8002476:	f7ff ff75 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK5, SI5351_PLLA);
 800247a:	4621      	mov	r1, r4
 800247c:	2005      	movs	r0, #5
 800247e:	f7ff ff71 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK6, SI5351_PLLB);
 8002482:	4629      	mov	r1, r5
 8002484:	2006      	movs	r0, #6
 8002486:	f7ff ff6d 	bl	8002364 <set_ms_source>
	set_ms_source(SI5351_CLK7, SI5351_PLLB);
 800248a:	4629      	mov	r1, r5
 800248c:	2007      	movs	r0, #7
 800248e:	f7ff ff69 	bl	8002364 <set_ms_source>
	si5351_write(SI5351_VXCO_PARAMETERS_LOW, 0);
 8002492:	4621      	mov	r1, r4
 8002494:	20a2      	movs	r0, #162	@ 0xa2
 8002496:	f7ff fee3 	bl	8002260 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_MID, 0);
 800249a:	4621      	mov	r1, r4
 800249c:	20a3      	movs	r0, #163	@ 0xa3
 800249e:	f7ff fedf 	bl	8002260 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_HIGH, 0);
 80024a2:	4621      	mov	r1, r4
 80024a4:	20a4      	movs	r0, #164	@ 0xa4
 80024a6:	f7ff fedb 	bl	8002260 <si5351_write>
	pll_reset(SI5351_PLLA);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff fef6 	bl	800229c <pll_reset>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	20b1      	movs	r0, #177	@ 0xb1
 80024b4:	f7ff fed4 	bl	8002260 <si5351_write>
		clk_freq[i] = 0;
 80024b8:	f04f 0800 	mov.w	r8, #0
 80024bc:	f04f 0900 	mov.w	r9, #0
		output_enable((enum si5351_clock)i, 0);
 80024c0:	4627      	mov	r7, r4
 80024c2:	4e08      	ldr	r6, [pc, #32]	@ (80024e4 <si5351_reset+0x144>)
 80024c4:	4d08      	ldr	r5, [pc, #32]	@ (80024e8 <si5351_reset+0x148>)
 80024c6:	b2e0      	uxtb	r0, r4
 80024c8:	2100      	movs	r1, #0
		clk_freq[i] = 0;
 80024ca:	e8e6 8902 	strd	r8, r9, [r6], #8
	for(i = 0; i < 8; i++)
 80024ce:	3401      	adds	r4, #1
		output_enable((enum si5351_clock)i, 0);
 80024d0:	f7ff ff16 	bl	8002300 <output_enable>
	for(i = 0; i < 8; i++)
 80024d4:	2c08      	cmp	r4, #8
		clk_first_set[i] = false;
 80024d6:	f805 7b01 	strb.w	r7, [r5], #1
	for(i = 0; i < 8; i++)
 80024da:	d1f4      	bne.n	80024c6 <si5351_reset+0x126>
}
 80024dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024e0:	200003f6 	.word	0x200003f6
 80024e4:	20000430 	.word	0x20000430
 80024e8:	20000408 	.word	0x20000408
 80024ec:	a05f2000 	.word	0xa05f2000
 80024f0:	00000012 	.word	0x00000012

080024f4 <si5351_init>:
bool si5351_init(I2C_HandleTypeDef *_hi2c, uint8_t i2c_addr, uint8_t xtal_load_c, uint32_t xo_freq, int32_t corr) {
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	461d      	mov	r5, r3
	hi2c = _hi2c;
 80024f8:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <si5351_init+0x5c>)
bool si5351_init(I2C_HandleTypeDef *_hi2c, uint8_t i2c_addr, uint8_t xtal_load_c, uint32_t xo_freq, int32_t corr) {
 80024fa:	4614      	mov	r4, r2
	hi2c = _hi2c;
 80024fc:	6018      	str	r0, [r3, #0]
  i2c_bus_addr = i2c_addr;
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <si5351_init+0x60>)
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 8002500:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <si5351_init+0x64>)
  i2c_bus_addr = i2c_addr;
 8002502:	7019      	strb	r1, [r3, #0]
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 8002504:	2300      	movs	r3, #0
 8002506:	7013      	strb	r3, [r2, #0]
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <si5351_init+0x68>)
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800250a:	4e15      	ldr	r6, [pc, #84]	@ (8002560 <si5351_init+0x6c>)
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 800250c:	7013      	strb	r3, [r2, #0]
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800250e:	4f15      	ldr	r7, [pc, #84]	@ (8002564 <si5351_init+0x70>)
	clkin_div = SI5351_CLKIN_DIV_1;
 8002510:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <si5351_init+0x74>)
	xtal_freq[0] = SI5351_XTAL_FREQ;
 8002512:	6037      	str	r7, [r6, #0]
	clkin_div = SI5351_CLKIN_DIV_1;
 8002514:	7013      	strb	r3, [r2, #0]
			status_reg = si5351_read(SI5351_DEVICE_STATUS);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff feca 	bl	80022b0 <si5351_read>
		} while (status_reg >> 7 == 1);
 800251c:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8002520:	2801      	cmp	r0, #1
 8002522:	d0f8      	beq.n	8002516 <si5351_init+0x22>
		si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 8002524:	f024 013f 	bic.w	r1, r4, #63	@ 0x3f
 8002528:	20b7      	movs	r0, #183	@ 0xb7
 800252a:	f041 0112 	orr.w	r1, r1, #18
 800252e:	f7ff fe97 	bl	8002260 <si5351_write>
		if (xo_freq != 0)
 8002532:	b15d      	cbz	r5, 800254c <si5351_init+0x58>
			set_ref_freq(xo_freq, SI5351_PLL_INPUT_XO);
 8002534:	2100      	movs	r1, #0
 8002536:	4628      	mov	r0, r5
 8002538:	f7ff fad2 	bl	8001ae0 <set_ref_freq>
		set_correction(corr, SI5351_PLL_INPUT_XO);
 800253c:	9806      	ldr	r0, [sp, #24]
 800253e:	2100      	movs	r1, #0
 8002540:	f7ff fe76 	bl	8002230 <set_correction>
		si5351_reset();
 8002544:	f7ff ff2c 	bl	80023a0 <si5351_reset>
}
 8002548:	2001      	movs	r0, #1
 800254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 800254c:	6037      	str	r7, [r6, #0]
}
 800254e:	e7f5      	b.n	800253c <si5351_init+0x48>
 8002550:	20000470 	.word	0x20000470
 8002554:	20000410 	.word	0x20000410
 8002558:	200003f5 	.word	0x200003f5
 800255c:	200003f4 	.word	0x200003f4
 8002560:	20000400 	.word	0x20000400
 8002564:	017d7840 	.word	0x017d7840
 8002568:	20000411 	.word	0x20000411

0800256c <set_int>:
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800256c:	3010      	adds	r0, #16
{
 800256e:	b538      	push	{r3, r4, r5, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8002570:	b2c4      	uxtb	r4, r0
{
 8002572:	460d      	mov	r5, r1
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff fe9b 	bl	80022b0 <si5351_read>
	if(enable == 1)
 800257a:	2d01      	cmp	r5, #1
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800257c:	bf0a      	itet	eq
 800257e:	f040 0140 	orreq.w	r1, r0, #64	@ 0x40
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 8002582:	f000 01bf 	andne.w	r1, r0, #191	@ 0xbf
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 8002586:	b2c9      	uxtbeq	r1, r1
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 8002588:	4620      	mov	r0, r4
}
 800258a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800258e:	f7ff be67 	b.w	8002260 <si5351_write>
	...

08002594 <ms_div>:
	switch(clk)
 8002594:	2807      	cmp	r0, #7
{
 8002596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002598:	bf8c      	ite	hi
 800259a:	2600      	movhi	r6, #0
 800259c:	4b13      	ldrls	r3, [pc, #76]	@ (80025ec <ms_div+0x58>)
 800259e:	4604      	mov	r4, r0
 80025a0:	bf98      	it	ls
 80025a2:	5c1e      	ldrbls	r6, [r3, r0]
 80025a4:	460d      	mov	r5, r1
	reg_val = si5351_read(reg_addr);
 80025a6:	4630      	mov	r0, r6
{
 80025a8:	4617      	mov	r7, r2
	reg_val = si5351_read(reg_addr);
 80025aa:	f7ff fe81 	bl	80022b0 <si5351_read>
	if(clk <= (uint8_t)SI5351_CLK5)
 80025ae:	2c05      	cmp	r4, #5
	reg_val = si5351_read(reg_addr);
 80025b0:	4601      	mov	r1, r0
	if(clk <= (uint8_t)SI5351_CLK5)
 80025b2:	d808      	bhi.n	80025c6 <ms_div+0x32>
		reg_val &= ~(0x7c);
 80025b4:	f000 0083 	and.w	r0, r0, #131	@ 0x83
		if(div_by_4 == 0)
 80025b8:	b10f      	cbz	r7, 80025be <ms_div+0x2a>
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 80025ba:	f040 000c 	orr.w	r0, r0, #12
		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 80025be:	ea40 1105 	orr.w	r1, r0, r5, lsl #4
		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	e005      	b.n	80025d2 <ms_div+0x3e>
	else if(clk == SI5351_CLK6)
 80025c6:	2c06      	cmp	r4, #6
 80025c8:	d108      	bne.n	80025dc <ms_div+0x48>
		reg_val &= ~(0x07);
 80025ca:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
		reg_val |= r_div;
 80025ce:	ea45 0100 	orr.w	r1, r5, r0
	si5351_write(reg_addr, reg_val);
 80025d2:	4630      	mov	r0, r6
}
 80025d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	si5351_write(reg_addr, reg_val);
 80025d8:	f7ff be42 	b.w	8002260 <si5351_write>
	else if(clk == SI5351_CLK7)
 80025dc:	2c07      	cmp	r4, #7
 80025de:	d1f8      	bne.n	80025d2 <ms_div+0x3e>
		reg_val &= ~(0x70);
 80025e0:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 80025e4:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80025e8:	e7eb      	b.n	80025c2 <ms_div+0x2e>
 80025ea:	bf00      	nop
 80025ec:	0800ae18 	.word	0x0800ae18

080025f0 <set_ms>:
{
 80025f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f4:	4680      	mov	r8, r0
 80025f6:	b08b      	sub	sp, #44	@ 0x2c
 80025f8:	a801      	add	r0, sp, #4
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 80025fa:	f1b8 0f05 	cmp.w	r8, #5
{
 80025fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002602:	4689      	mov	r9, r1
 8002604:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 8002608:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800260c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
		temp = (uint8_t)(ms_reg.p1  & 0xFF);
 8002610:	b2cb      	uxtb	r3, r1
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 8002612:	d836      	bhi.n	8002682 <set_ms+0x92>
 8002614:	4693      	mov	fp, r2
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 8002616:	ea4f 00c8 	mov.w	r0, r8, lsl #3
		params[i++] = temp;
 800261a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800261e:	302c      	adds	r0, #44	@ 0x2c
		params[i++] = temp;
 8002620:	ba52      	rev16	r2, r2
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 8002622:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8002626:	f8bd a008 	ldrh.w	sl, [sp, #8]
 800262a:	9e03      	ldr	r6, [sp, #12]
		params[i++] = temp;
 800262c:	9300      	str	r3, [sp, #0]
		params[i++] = temp;
 800262e:	f8ad 2014 	strh.w	r2, [sp, #20]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 8002632:	f7ff fe3d 	bl	80022b0 <si5351_read>
		params[i++] = temp;
 8002636:	2108      	movs	r1, #8
		params[i++] = temp;
 8002638:	9b00      	ldr	r3, [sp, #0]
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800263a:	0b36      	lsrs	r6, r6, #12
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800263c:	f3c9 4201 	ubfx	r2, r9, #16, #2
		reg_val &= ~(0x03);
 8002640:	f020 0003 	bic.w	r0, r0, #3
		params[i++] = temp;
 8002644:	f88d 3018 	strb.w	r3, [sp, #24]
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 8002648:	f006 06f0 	and.w	r6, r6, #240	@ 0xf0
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800264c:	f3cb 4303 	ubfx	r3, fp, #16, #4
 8002650:	431e      	orrs	r6, r3
 8002652:	fa9a fa9a 	rev16.w	sl, sl
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 8002656:	4302      	orrs	r2, r0
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 8002658:	ea4f 2919 	mov.w	r9, r9, lsr #8
		params[i++] = temp;
 800265c:	f88d 2016 	strb.w	r2, [sp, #22]
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 8002660:	f88d 9017 	strb.w	r9, [sp, #23]
		params[i++] = temp;
 8002664:	f88d 6019 	strb.w	r6, [sp, #25]
		temp = (uint8_t)(ms_reg.p2  & 0xFF);
 8002668:	fa5f f38b 	uxtb.w	r3, fp
		params[i++] = temp;
 800266c:	f8ad a01a 	strh.w	sl, [sp, #26]
	switch(clk)
 8002670:	f1b8 0f07 	cmp.w	r8, #7
 8002674:	d814      	bhi.n	80026a0 <set_ms+0xb0>
 8002676:	e8df f008 	tbb	[pc, r8]
 800267a:	1606      	.short	0x1606
 800267c:	463a2e22 	.word	0x463a2e22
 8002680:	5a52      	.short	0x5a52
	uint8_t i = 0;
 8002682:	2100      	movs	r1, #0
 8002684:	e7f4      	b.n	8002670 <set_ms+0x80>
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 8002686:	aa05      	add	r2, sp, #20
 8002688:	202a      	movs	r0, #42	@ 0x2a
 800268a:	f7ff fd59 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 800268e:	4639      	mov	r1, r7
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff ff6b 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 8002696:	462a      	mov	r2, r5
 8002698:	4621      	mov	r1, r4
 800269a:	2000      	movs	r0, #0
			ms_div(clk, r_div, div_by_4);
 800269c:	f7ff ff7a 	bl	8002594 <ms_div>
}
 80026a0:	b00b      	add	sp, #44	@ 0x2c
 80026a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 80026a6:	aa05      	add	r2, sp, #20
 80026a8:	2032      	movs	r0, #50	@ 0x32
 80026aa:	f7ff fd49 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 80026ae:	4639      	mov	r1, r7
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff ff5b 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 80026b6:	462a      	mov	r2, r5
 80026b8:	4621      	mov	r1, r4
 80026ba:	2001      	movs	r0, #1
 80026bc:	e7ee      	b.n	800269c <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 80026be:	aa05      	add	r2, sp, #20
 80026c0:	203a      	movs	r0, #58	@ 0x3a
 80026c2:	f7ff fd3d 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 80026c6:	4639      	mov	r1, r7
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7ff ff4f 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 80026ce:	462a      	mov	r2, r5
 80026d0:	4621      	mov	r1, r4
 80026d2:	2002      	movs	r0, #2
 80026d4:	e7e2      	b.n	800269c <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, params);
 80026d6:	aa05      	add	r2, sp, #20
 80026d8:	2042      	movs	r0, #66	@ 0x42
 80026da:	f7ff fd31 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 80026de:	4639      	mov	r1, r7
 80026e0:	2003      	movs	r0, #3
 80026e2:	f7ff ff43 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 80026e6:	462a      	mov	r2, r5
 80026e8:	4621      	mov	r1, r4
 80026ea:	2003      	movs	r0, #3
 80026ec:	e7d6      	b.n	800269c <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, params);
 80026ee:	aa05      	add	r2, sp, #20
 80026f0:	204a      	movs	r0, #74	@ 0x4a
 80026f2:	f7ff fd25 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 80026f6:	4639      	mov	r1, r7
 80026f8:	2004      	movs	r0, #4
 80026fa:	f7ff ff37 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 80026fe:	462a      	mov	r2, r5
 8002700:	4621      	mov	r1, r4
 8002702:	2004      	movs	r0, #4
 8002704:	e7ca      	b.n	800269c <set_ms+0xac>
			si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, params);
 8002706:	aa05      	add	r2, sp, #20
 8002708:	2052      	movs	r0, #82	@ 0x52
 800270a:	f7ff fd19 	bl	8002140 <si5351_write_bulk>
			set_int(clk, int_mode);
 800270e:	4639      	mov	r1, r7
 8002710:	2005      	movs	r0, #5
 8002712:	f7ff ff2b 	bl	800256c <set_int>
			ms_div(clk, r_div, div_by_4);
 8002716:	462a      	mov	r2, r5
 8002718:	4621      	mov	r1, r4
 800271a:	2005      	movs	r0, #5
 800271c:	e7be      	b.n	800269c <set_ms+0xac>
			si5351_write(SI5351_CLK6_PARAMETERS, temp);
 800271e:	4619      	mov	r1, r3
 8002720:	205a      	movs	r0, #90	@ 0x5a
 8002722:	f7ff fd9d 	bl	8002260 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 8002726:	462a      	mov	r2, r5
 8002728:	4621      	mov	r1, r4
 800272a:	2006      	movs	r0, #6
 800272c:	e7b6      	b.n	800269c <set_ms+0xac>
			si5351_write(SI5351_CLK7_PARAMETERS, temp);
 800272e:	4619      	mov	r1, r3
 8002730:	205b      	movs	r0, #91	@ 0x5b
 8002732:	f7ff fd95 	bl	8002260 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 8002736:	462a      	mov	r2, r5
 8002738:	4621      	mov	r1, r4
 800273a:	2007      	movs	r0, #7
 800273c:	e7ae      	b.n	800269c <set_ms+0xac>
	...

08002740 <si5351_set_freq>:
{
 8002740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 8002744:	1e43      	subs	r3, r0, #1
{
 8002746:	b091      	sub	sp, #68	@ 0x44
 8002748:	460e      	mov	r6, r1
 800274a:	e9cd 0106 	strd	r0, r1, [sp, #24]
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 800274e:	f161 0100 	sbc.w	r1, r1, #0
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 8002752:	2a05      	cmp	r2, #5
{
 8002754:	4614      	mov	r4, r2
 8002756:	4607      	mov	r7, r0
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4d9e      	ldr	r5, [pc, #632]	@ (80029d8 <si5351_set_freq+0x298>)
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800275e:	f200 80b6 	bhi.w	80028ce <si5351_set_freq+0x18e>
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 8002762:	489e      	ldr	r0, [pc, #632]	@ (80029dc <si5351_set_freq+0x29c>)
 8002764:	4298      	cmp	r0, r3
 8002766:	418a      	sbcs	r2, r1
 8002768:	d324      	bcc.n	80027b4 <si5351_set_freq+0x74>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 800276a:	2300      	movs	r3, #0
 800276c:	4a9c      	ldr	r2, [pc, #624]	@ (80029e0 <si5351_set_freq+0x2a0>)
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800276e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 8002772:	e9dd 8706 	ldrd	r8, r7, [sp, #24]
 8002776:	f04f 0e02 	mov.w	lr, #2
 800277a:	f8df c268 	ldr.w	ip, [pc, #616]	@ 80029e4 <si5351_set_freq+0x2a4>
 800277e:	4e9a      	ldr	r6, [pc, #616]	@ (80029e8 <si5351_set_freq+0x2a8>)
 8002780:	45c4      	cmp	ip, r8
 8002782:	eb7e 0307 	sbcs.w	r3, lr, r7
 8002786:	d279      	bcs.n	800287c <si5351_set_freq+0x13c>
 8002788:	4630      	mov	r0, r6
			for(i = 0; i < 6; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	4992      	ldr	r1, [pc, #584]	@ (80029d8 <si5351_set_freq+0x298>)
				if(clk_freq[i] > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800278e:	e9d1 9200 	ldrd	r9, r2, [r1]
 8002792:	45cc      	cmp	ip, r9
 8002794:	eb7e 0202 	sbcs.w	r2, lr, r2
 8002798:	f101 0108 	add.w	r1, r1, #8
 800279c:	d214      	bcs.n	80027c8 <si5351_set_freq+0x88>
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 800279e:	429c      	cmp	r4, r3
 80027a0:	d012      	beq.n	80027c8 <si5351_set_freq+0x88>
 80027a2:	f890 9000 	ldrb.w	r9, [r0]
 80027a6:	5d32      	ldrb	r2, [r6, r4]
 80027a8:	4591      	cmp	r9, r2
 80027aa:	d10d      	bne.n	80027c8 <si5351_set_freq+0x88>
						return 1; // won't set if any other clks already >100 MHz
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	b011      	add	sp, #68	@ 0x44
 80027b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 80027b4:	4b8d      	ldr	r3, [pc, #564]	@ (80029ec <si5351_set_freq+0x2ac>)
 80027b6:	42bb      	cmp	r3, r7
 80027b8:	f04f 0305 	mov.w	r3, #5
 80027bc:	41b3      	sbcs	r3, r6
 80027be:	d2d8      	bcs.n	8002772 <si5351_set_freq+0x32>
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 80027c0:	a381      	add	r3, pc, #516	@ (adr r3, 80029c8 <si5351_set_freq+0x288>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	e7d2      	b.n	800276e <si5351_set_freq+0x2e>
			for(i = 0; i < 6; i++)
 80027c8:	3301      	adds	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	f100 0001 	add.w	r0, r0, #1
 80027d2:	d1dc      	bne.n	800278e <si5351_set_freq+0x4e>
			if(clk_first_set[(uint8_t)clk] == false)
 80027d4:	f8df 9218 	ldr.w	r9, [pc, #536]	@ 80029f0 <si5351_set_freq+0x2b0>
 80027d8:	f819 3004 	ldrb.w	r3, [r9, r4]
 80027dc:	b933      	cbnz	r3, 80027ec <si5351_set_freq+0xac>
				output_enable(clk, 1);
 80027de:	2101      	movs	r1, #1
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fd8d 	bl	8002300 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f809 3004 	strb.w	r3, [r9, r4]
			clk_freq[(uint8_t)clk] = freq;
 80027ec:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80027f0:	f845 8034 	str.w	r8, [r5, r4, lsl #3]
 80027f4:	605f      	str	r7, [r3, #4]
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 80027f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	4639      	mov	r1, r7
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	4640      	mov	r0, r8
 8002800:	2300      	movs	r3, #0
 8002802:	f7ff fa4d 	bl	8001ca0 <multisynth_calc>
			set_pll(pll_freq, pll_assignment[clk]);
 8002806:	5d32      	ldrb	r2, [r6, r4]
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 8002808:	e9cd 0104 	strd	r0, r1, [sp, #16]
			set_pll(pll_freq, pll_assignment[clk]);
 800280c:	2700      	movs	r7, #0
 800280e:	f7ff fcb1 	bl	8002174 <set_pll>
				if(clk_freq[i] != 0)
 8002812:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
 8002816:	f855 2037 	ldr.w	r2, [r5, r7, lsl #3]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	ea52 0103 	orrs.w	r1, r2, r3
 8002820:	d024      	beq.n	800286c <si5351_set_freq+0x12c>
					if(pll_assignment[i] == pll_assignment[clk])
 8002822:	5df0      	ldrb	r0, [r6, r7]
 8002824:	5d31      	ldrb	r1, [r6, r4]
 8002826:	4288      	cmp	r0, r1
 8002828:	d120      	bne.n	800286c <si5351_set_freq+0x12c>
						r_div = select_r_div(&temp_freq);
 800282a:	a808      	add	r0, sp, #32
						temp_freq = clk_freq[i];
 800282c:	e9cd 2308 	strd	r2, r3, [sp, #32]
						r_div = select_r_div(&temp_freq);
 8002830:	f7ff fb5a 	bl	8001ee8 <select_r_div>
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 8002834:	e9dd ba08 	ldrd	fp, sl, [sp, #32]
 8002838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800283c:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
						r_div = select_r_div(&temp_freq);
 8002840:	4681      	mov	r9, r0
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 8002842:	4651      	mov	r1, sl
 8002844:	4658      	mov	r0, fp
 8002846:	f8cd 8000 	str.w	r8, [sp]
 800284a:	f7ff fa29 	bl	8001ca0 <multisynth_calc>
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800284e:	4b69      	ldr	r3, [pc, #420]	@ (80029f4 <si5351_set_freq+0x2b4>)
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 8002850:	b2f8      	uxtb	r0, r7
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8002852:	459b      	cmp	fp, r3
 8002854:	f17a 0303 	sbcs.w	r3, sl, #3
 8002858:	bf2c      	ite	cs
 800285a:	2301      	movcs	r3, #1
 800285c:	2300      	movcc	r3, #0
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 800285e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002868:	f7ff fec2 	bl	80025f0 <set_ms>
			for(i = 0; i < 6; i++)
 800286c:	3701      	adds	r7, #1
 800286e:	2f06      	cmp	r7, #6
 8002870:	d1cf      	bne.n	8002812 <si5351_set_freq+0xd2>
			pll_reset(pll_assignment[clk]);
 8002872:	5d30      	ldrb	r0, [r6, r4]
 8002874:	f7ff fd12 	bl	800229c <pll_reset>
		return 0;
 8002878:	2000      	movs	r0, #0
 800287a:	e798      	b.n	80027ae <si5351_set_freq+0x6e>
			clk_freq[(uint8_t)clk] = freq;
 800287c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002880:	f845 8034 	str.w	r8, [r5, r4, lsl #3]
			if(clk_first_set[(uint8_t)clk] == false)
 8002884:	4d5a      	ldr	r5, [pc, #360]	@ (80029f0 <si5351_set_freq+0x2b0>)
			clk_freq[(uint8_t)clk] = freq;
 8002886:	605f      	str	r7, [r3, #4]
			if(clk_first_set[(uint8_t)clk] == false)
 8002888:	5d2b      	ldrb	r3, [r5, r4]
 800288a:	b92b      	cbnz	r3, 8002898 <si5351_set_freq+0x158>
				output_enable(clk, 1);
 800288c:	2101      	movs	r1, #1
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff fd36 	bl	8002300 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 8002894:	2301      	movs	r3, #1
 8002896:	552b      	strb	r3, [r5, r4]
			r_div = select_r_div(&freq);
 8002898:	a806      	add	r0, sp, #24
 800289a:	f7ff fb25 	bl	8001ee8 <select_r_div>
			if(pll_assignment[clk] == SI5351_PLLA)
 800289e:	5d33      	ldrb	r3, [r6, r4]
 80028a0:	ad0a      	add	r5, sp, #40	@ 0x28
			r_div = select_r_div(&freq);
 80028a2:	4607      	mov	r7, r0
				multisynth_calc(freq, plla_freq, &ms_reg);
 80028a4:	9500      	str	r5, [sp, #0]
			if(pll_assignment[clk] == SI5351_PLLA)
 80028a6:	b983      	cbnz	r3, 80028ca <si5351_set_freq+0x18a>
				multisynth_calc(freq, plla_freq, &ms_reg);
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <si5351_set_freq+0x2b8>)
				multisynth_calc(freq, pllb_freq, &ms_reg);
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80028b2:	f7ff f9f5 	bl	8001ca0 <multisynth_calc>
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 80028b6:	2300      	movs	r3, #0
 80028b8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7ff fe94 	bl	80025f0 <set_ms>
 80028c8:	e7d6      	b.n	8002878 <si5351_set_freq+0x138>
				multisynth_calc(freq, pllb_freq, &ms_reg);
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <si5351_set_freq+0x2bc>)
 80028cc:	e7ed      	b.n	80028aa <si5351_set_freq+0x16a>
		if(freq > 0 && freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT)
 80028ce:	484c      	ldr	r0, [pc, #304]	@ (8002a00 <si5351_set_freq+0x2c0>)
 80028d0:	4298      	cmp	r0, r3
 80028d2:	418a      	sbcs	r2, r1
 80028d4:	d32f      	bcc.n	8002936 <si5351_set_freq+0x1f6>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 80028d6:	2300      	movs	r3, #0
 80028d8:	4a41      	ldr	r2, [pc, #260]	@ (80029e0 <si5351_set_freq+0x2a0>)
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 80028da:	e9cd 2306 	strd	r2, r3, [sp, #24]
				if(pllb_freq % freq == 0)
 80028de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
		if(clk == SI5351_CLK6)
 80028e2:	2c06      	cmp	r4, #6
 80028e4:	d143      	bne.n	800296e <si5351_set_freq+0x22e>
			if(clk_freq[7] != 0)
 80028e6:	e9d5 320e 	ldrd	r3, r2, [r5, #56]	@ 0x38
 80028ea:	4313      	orrs	r3, r2
 80028ec:	d02d      	beq.n	800294a <si5351_set_freq+0x20a>
				if(pllb_freq % freq == 0)
 80028ee:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <si5351_set_freq+0x2bc>)
 80028f0:	4632      	mov	r2, r6
 80028f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028f6:	463b      	mov	r3, r7
 80028f8:	4640      	mov	r0, r8
 80028fa:	4649      	mov	r1, r9
 80028fc:	f7fe f914 	bl	8000b28 <__aeabi_uldivmod>
 8002900:	431a      	orrs	r2, r3
 8002902:	f47f af53 	bne.w	80027ac <si5351_set_freq+0x6c>
					if((pllb_freq / freq) % 2 != 0)
 8002906:	07c2      	lsls	r2, r0, #31
 8002908:	f53f af50 	bmi.w	80027ac <si5351_set_freq+0x6c>
						clk_freq[(uint8_t)clk] = freq;
 800290c:	e9c5 670c 	strd	r6, r7, [r5, #48]	@ 0x30
						r_div = select_r_div_ms67(&freq);
 8002910:	a806      	add	r0, sp, #24
 8002912:	f7ff fb7f 	bl	8002014 <select_r_div_ms67>
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 8002916:	ab0a      	add	r3, sp, #40	@ 0x28
						r_div = select_r_div_ms67(&freq);
 8002918:	4605      	mov	r5, r0
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 800291a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4642      	mov	r2, r8
 8002922:	464b      	mov	r3, r9
 8002924:	f7ff fa78 	bl	8001e18 <multisynth67_calc>
		set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 8002928:	2300      	movs	r3, #0
 800292a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	ab0a      	add	r3, sp, #40	@ 0x28
 8002932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002934:	e7c5      	b.n	80028c2 <si5351_set_freq+0x182>
		if(freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8002936:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <si5351_set_freq+0x2c4>)
 8002938:	42bb      	cmp	r3, r7
 800293a:	f04f 0303 	mov.w	r3, #3
 800293e:	41b3      	sbcs	r3, r6
 8002940:	d2cd      	bcs.n	80028de <si5351_set_freq+0x19e>
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 8002942:	a323      	add	r3, pc, #140	@ (adr r3, 80029d0 <si5351_set_freq+0x290>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	e7c7      	b.n	80028da <si5351_set_freq+0x19a>
				r_div = select_r_div_ms67(&freq);
 800294a:	a806      	add	r0, sp, #24
				clk_freq[(uint8_t)clk] = freq;
 800294c:	e9c5 670c 	strd	r6, r7, [r5, #48]	@ 0x30
				r_div = select_r_div_ms67(&freq);
 8002950:	f7ff fb60 	bl	8002014 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 8002954:	ab0a      	add	r3, sp, #40	@ 0x28
 8002956:	2200      	movs	r2, #0
 8002958:	9300      	str	r3, [sp, #0]
				r_div = select_r_div_ms67(&freq);
 800295a:	4605      	mov	r5, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800295c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002960:	2300      	movs	r3, #0
 8002962:	f7ff fa59 	bl	8001e18 <multisynth67_calc>
				set_pll(pll_freq, SI5351_PLLB);
 8002966:	2201      	movs	r2, #1
				set_pll(pll_freq, pll_assignment[clk]);
 8002968:	f7ff fc04 	bl	8002174 <set_pll>
 800296c:	e7dc      	b.n	8002928 <si5351_set_freq+0x1e8>
			if(clk_freq[6] != 0)
 800296e:	e9d5 320c 	ldrd	r3, r2, [r5, #48]	@ 0x30
 8002972:	4313      	orrs	r3, r2
 8002974:	d013      	beq.n	800299e <si5351_set_freq+0x25e>
				if(pllb_freq % freq == 0)
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <si5351_set_freq+0x2bc>)
 8002978:	4632      	mov	r2, r6
 800297a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800297e:	463b      	mov	r3, r7
 8002980:	4640      	mov	r0, r8
 8002982:	4649      	mov	r1, r9
 8002984:	f7fe f8d0 	bl	8000b28 <__aeabi_uldivmod>
 8002988:	431a      	orrs	r2, r3
 800298a:	f47f af0f 	bne.w	80027ac <si5351_set_freq+0x6c>
					if((pllb_freq / freq) % 2 != 0)
 800298e:	07c3      	lsls	r3, r0, #31
 8002990:	f53f af0c 	bmi.w	80027ac <si5351_set_freq+0x6c>
						clk_freq[(uint8_t)clk] = freq;
 8002994:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002998:	e9c5 6700 	strd	r6, r7, [r5]
 800299c:	e7b8      	b.n	8002910 <si5351_set_freq+0x1d0>
				clk_freq[(uint8_t)clk] = freq;
 800299e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
				r_div = select_r_div_ms67(&freq);
 80029a2:	a806      	add	r0, sp, #24
				clk_freq[(uint8_t)clk] = freq;
 80029a4:	e9c5 6700 	strd	r6, r7, [r5]
				r_div = select_r_div_ms67(&freq);
 80029a8:	f7ff fb34 	bl	8002014 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 80029ac:	ab0a      	add	r3, sp, #40	@ 0x28
 80029ae:	2200      	movs	r2, #0
 80029b0:	9300      	str	r3, [sp, #0]
				r_div = select_r_div_ms67(&freq);
 80029b2:	4605      	mov	r5, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 80029b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029b8:	2300      	movs	r3, #0
 80029ba:	f7ff fa2d 	bl	8001e18 <multisynth67_calc>
				set_pll(pll_freq, pll_assignment[clk]);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <si5351_set_freq+0x2a8>)
 80029c0:	5d1a      	ldrb	r2, [r3, r4]
 80029c2:	e7d1      	b.n	8002968 <si5351_set_freq+0x228>
 80029c4:	f3af 8000 	nop.w
 80029c8:	3d1ac100 	.word	0x3d1ac100
 80029cc:	00000005 	.word	0x00000005
 80029d0:	7e11d5ff 	.word	0x7e11d5ff
 80029d4:	00000003 	.word	0x00000003
 80029d8:	20000430 	.word	0x20000430
 80029dc:	00061a7e 	.word	0x00061a7e
 80029e0:	00061a80 	.word	0x00061a80
 80029e4:	540be400 	.word	0x540be400
 80029e8:	200003f6 	.word	0x200003f6
 80029ec:	3d1ac100 	.word	0x3d1ac100
 80029f0:	20000408 	.word	0x20000408
 80029f4:	7e11d600 	.word	0x7e11d600
 80029f8:	20000428 	.word	0x20000428
 80029fc:	20000420 	.word	0x20000420
 8002a00:	001c2896 	.word	0x001c2896
 8002a04:	7e11d5ff 	.word	0x7e11d5ff

08002a08 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_MspInit+0x4c>)
{
 8002a0a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a0c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a0e:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	619a      	str	r2, [r3, #24]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	f002 0201 	and.w	r2, r2, #1
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a26:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a2c:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a36:	f000 fbb5 	bl	80031a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a3a:	2005      	movs	r0, #5
 8002a3c:	f000 fbe2 	bl	8003204 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a40:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <HAL_MspInit+0x50>)
 8002a42:	6853      	ldr	r3, [r2, #4]
 8002a44:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	b003      	add	sp, #12
 8002a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010000 	.word	0x40010000

08002a5c <HAL_I2C_MspInit>:
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	2210      	movs	r2, #16
{
 8002a5e:	b510      	push	{r4, lr}
 8002a60:	4604      	mov	r4, r0
 8002a62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	eb0d 0002 	add.w	r0, sp, r2
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f006 fe1d 	bl	80096a8 <memset>
  if(hi2c->Instance==I2C1)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	@ (8002b34 <HAL_I2C_MspInit+0xd8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12e      	bne.n	8002ad4 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	4c30      	ldr	r4, [pc, #192]	@ (8002b38 <HAL_I2C_MspInit+0xdc>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a78:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	482f      	ldr	r0, [pc, #188]	@ (8002b3c <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	f043 0308 	orr.w	r3, r3, #8
 8002a82:	61a3      	str	r3, [r4, #24]
 8002a84:	69a3      	ldr	r3, [r4, #24]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a94:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f000 fd45 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa0:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002aa2:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aa8:	61e3      	str	r3, [r4, #28]
 8002aaa:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002aac:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ab6:	f000 fb75 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002aba:	201f      	movs	r0, #31
 8002abc:	f000 fba2 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2020      	movs	r0, #32
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	f000 fb6d 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002aca:	2020      	movs	r0, #32
    __HAL_RCC_I2C2_CLK_ENABLE();
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002acc:	f000 fb9a 	bl	8003204 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ad0:	b008      	add	sp, #32
 8002ad2:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b40 <HAL_I2C_MspInit+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d1fa      	bne.n	8002ad0 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ada:	4c17      	ldr	r4, [pc, #92]	@ (8002b38 <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002adc:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	4816      	ldr	r0, [pc, #88]	@ (8002b3c <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	61a3      	str	r3, [r4, #24]
 8002aea:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f000 fd12 	bl	8003528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002b04:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b06:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002b08:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b0e:	61e3      	str	r3, [r4, #28]
 8002b10:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002b12:	2021      	movs	r0, #33	@ 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b18:	9303      	str	r3, [sp, #12]
 8002b1a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002b1c:	f000 fb42 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002b20:	2021      	movs	r0, #33	@ 0x21
 8002b22:	f000 fb6f 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2022      	movs	r0, #34	@ 0x22
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	f000 fb3a 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002b30:	2022      	movs	r0, #34	@ 0x22
 8002b32:	e7cb      	b.n	8002acc <HAL_I2C_MspInit+0x70>
 8002b34:	40005400 	.word	0x40005400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010c00 	.word	0x40010c00
 8002b40:	40005800 	.word	0x40005800

08002b44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4604      	mov	r4, r0
 8002b48:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	a802      	add	r0, sp, #8
 8002b50:	f006 fdaa 	bl	80096a8 <memset>
  if(hspi->Instance==SPI1)
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_SPI_MspInit+0x7c>)
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d12e      	bne.n	8002bba <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b5c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8002b60:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	4818      	ldr	r0, [pc, #96]	@ (8002bc4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b68:	619a      	str	r2, [r3, #24]
 8002b6a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b6e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	f042 0204 	orr.w	r2, r2, #4
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f000 fcc7 	bl	8003528 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b9a:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	4809      	ldr	r0, [pc, #36]	@ (8002bc4 <HAL_SPI_MspInit+0x80>)
 8002b9e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f000 fcbf 	bl	8003528 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002baa:	2023      	movs	r0, #35	@ 0x23
 8002bac:	4622      	mov	r2, r4
 8002bae:	4621      	mov	r1, r4
 8002bb0:	f000 faf8 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002bb4:	2023      	movs	r0, #35	@ 0x23
 8002bb6:	f000 fb25 	bl	8003204 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40013000 	.word	0x40013000
 8002bc4:	40010800 	.word	0x40010800

08002bc8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	4604      	mov	r4, r0
 8002bcc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bce:	2210      	movs	r2, #16
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	a802      	add	r0, sp, #8
 8002bd4:	f006 fd68 	bl	80096a8 <memset>
  if(htim_encoder->Instance==TIM1)
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d13a      	bne.n	8002c56 <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002be4:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	481e      	ldr	r0, [pc, #120]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bec:	619a      	str	r2, [r3, #24]
 8002bee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bf2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002bf6:	9200      	str	r2, [sp, #0]
 8002bf8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	f042 0204 	orr.w	r2, r2, #4
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c10:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f000 fc89 	bl	8003528 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2018      	movs	r0, #24
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	f000 fac2 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002c20:	2018      	movs	r0, #24
 8002c22:	f000 faef 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2019      	movs	r0, #25
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	f000 faba 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002c30:	2019      	movs	r0, #25
 8002c32:	f000 fae7 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	201a      	movs	r0, #26
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	f000 fab2 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002c40:	201a      	movs	r0, #26
 8002c42:	f000 fadf 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	201b      	movs	r0, #27
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	f000 faaa 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c50:	201b      	movs	r0, #27
 8002c52:	f000 fad7 	bl	8003204 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c56:	b006      	add	sp, #24
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40010800 	.word	0x40010800

08002c64 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8002c64:	6803      	ldr	r3, [r0, #0]
{
 8002c66:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM2)
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6c:	d115      	bne.n	8002c9a <HAL_TIM_PWM_MspInit+0x36>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c6e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002c72:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c74:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c7c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c7e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c80:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c8a:	f000 fa8b 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c8e:	201c      	movs	r0, #28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002c90:	b003      	add	sp, #12
 8002c92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c96:	f000 bab5 	b.w	8003204 <HAL_NVIC_EnableIRQ>
}
 8002c9a:	b003      	add	sp, #12
 8002c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08002ca0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	2100      	movs	r1, #0
 8002caa:	a802      	add	r0, sp, #8
 8002cac:	f006 fcfc 	bl	80096a8 <memset>
  if(htim->Instance==TIM2)
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb6:	d11d      	bne.n	8002cf4 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002cbc:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	480e      	ldr	r0, [pc, #56]	@ (8002cf8 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	f042 0204 	orr.w	r2, r2, #4
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cde:	f000 fc23 	bl	8003528 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002ce2:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <HAL_TIM_MspPostInit+0x5c>)
 8002ce4:	6853      	ldr	r3, [r2, #4]
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf2:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cf4:	b006      	add	sp, #24
 8002cf6:	bd10      	pop	{r4, pc}
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40010000 	.word	0x40010000

08002d00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d00:	e7fe      	b.n	8002d00 <NMI_Handler>

08002d02 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler>

08002d04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <MemManage_Handler>

08002d06 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <BusFault_Handler>

08002d08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <UsageFault_Handler>

08002d0a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d0a:	4770      	bx	lr

08002d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002d0c:	4770      	bx	lr

08002d0e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d10:	f000 ba12 	b.w	8003138 <HAL_IncTick>

08002d14 <RCC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 8002d14:	4770      	bx	lr
	...

08002d18 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d18:	4801      	ldr	r0, [pc, #4]	@ (8002d20 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8002d1a:	f002 b91b 	b.w	8004f54 <HAL_PCD_IRQHandler>
 8002d1e:	bf00      	nop
 8002d20:	200015f4 	.word	0x200015f4

08002d24 <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 8002d24:	f7ff bff8 	b.w	8002d18 <USB_HP_CAN1_TX_IRQHandler>

08002d28 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d28:	4801      	ldr	r0, [pc, #4]	@ (8002d30 <TIM1_BRK_IRQHandler+0x8>)
 8002d2a:	f003 bed2 	b.w	8006ad2 <HAL_TIM_IRQHandler>
 8002d2e:	bf00      	nop
 8002d30:	200002ac 	.word	0x200002ac

08002d34 <TIM1_UP_IRQHandler>:
}

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
 8002d34:	f7ff bff8 	b.w	8002d28 <TIM1_BRK_IRQHandler>

08002d38 <TIM1_TRG_COM_IRQHandler>:
}

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 8002d38:	f7ff bff6 	b.w	8002d28 <TIM1_BRK_IRQHandler>

08002d3c <TIM1_CC_IRQHandler>:
}

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 8002d3c:	f7ff bff4 	b.w	8002d28 <TIM1_BRK_IRQHandler>

08002d40 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d40:	4801      	ldr	r0, [pc, #4]	@ (8002d48 <TIM2_IRQHandler+0x8>)
 8002d42:	f003 bec6 	b.w	8006ad2 <HAL_TIM_IRQHandler>
 8002d46:	bf00      	nop
 8002d48:	20000264 	.word	0x20000264

08002d4c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d4c:	4801      	ldr	r0, [pc, #4]	@ (8002d54 <I2C1_EV_IRQHandler+0x8>)
 8002d4e:	f001 bb79 	b.w	8004444 <HAL_I2C_EV_IRQHandler>
 8002d52:	bf00      	nop
 8002d54:	200003a0 	.word	0x200003a0

08002d58 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d58:	4801      	ldr	r0, [pc, #4]	@ (8002d60 <I2C1_ER_IRQHandler+0x8>)
 8002d5a:	f001 bfcb 	b.w	8004cf4 <HAL_I2C_ER_IRQHandler>
 8002d5e:	bf00      	nop
 8002d60:	200003a0 	.word	0x200003a0

08002d64 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002d64:	4801      	ldr	r0, [pc, #4]	@ (8002d6c <I2C2_EV_IRQHandler+0x8>)
 8002d66:	f001 bb6d 	b.w	8004444 <HAL_I2C_EV_IRQHandler>
 8002d6a:	bf00      	nop
 8002d6c:	2000034c 	.word	0x2000034c

08002d70 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002d70:	4801      	ldr	r0, [pc, #4]	@ (8002d78 <I2C2_ER_IRQHandler+0x8>)
 8002d72:	f001 bfbf 	b.w	8004cf4 <HAL_I2C_ER_IRQHandler>
 8002d76:	bf00      	nop
 8002d78:	2000034c 	.word	0x2000034c

08002d7c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d7c:	4801      	ldr	r0, [pc, #4]	@ (8002d84 <SPI1_IRQHandler+0x8>)
 8002d7e:	f003 bd2f 	b.w	80067e0 <HAL_SPI_IRQHandler>
 8002d82:	bf00      	nop
 8002d84:	200002f4 	.word	0x200002f4

08002d88 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <_sbrk+0x30>)
{
 8002d8a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002d8c:	6811      	ldr	r1, [r2, #0]
{
 8002d8e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002d90:	b909      	cbnz	r1, 8002d96 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002d92:	490a      	ldr	r1, [pc, #40]	@ (8002dbc <_sbrk+0x34>)
 8002d94:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	6810      	ldr	r0, [r2, #0]
 8002d98:	4909      	ldr	r1, [pc, #36]	@ (8002dc0 <_sbrk+0x38>)
 8002d9a:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc4 <_sbrk+0x3c>)
 8002d9c:	4403      	add	r3, r0
 8002d9e:	1b09      	subs	r1, r1, r4
 8002da0:	428b      	cmp	r3, r1
 8002da2:	d906      	bls.n	8002db2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002da4:	f006 fcc0 	bl	8009728 <__errno>
 8002da8:	230c      	movs	r3, #12
 8002daa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002db0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002db2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002db4:	e7fc      	b.n	8002db0 <_sbrk+0x28>
 8002db6:	bf00      	nop
 8002db8:	20000474 	.word	0x20000474
 8002dbc:	20001a18 	.word	0x20001a18
 8002dc0:	20005000 	.word	0x20005000
 8002dc4:	00000400 	.word	0x00000400

08002dc8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc8:	4770      	bx	lr
	...

08002dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dcc:	f7ff fffc 	bl	8002dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dd0:	480b      	ldr	r0, [pc, #44]	@ (8002e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dd2:	490c      	ldr	r1, [pc, #48]	@ (8002e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd8:	e002      	b.n	8002de0 <LoopCopyDataInit>

08002dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dde:	3304      	adds	r3, #4

08002de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de4:	d3f9      	bcc.n	8002dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de6:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002de8:	4c09      	ldr	r4, [pc, #36]	@ (8002e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dec:	e001      	b.n	8002df2 <LoopFillZerobss>

08002dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002df0:	3204      	adds	r2, #4

08002df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df4:	d3fb      	bcc.n	8002dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002df6:	f006 fc9d 	bl	8009734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dfa:	f7fe fcc1 	bl	8001780 <main>
  bx lr
 8002dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e04:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002e08:	0800c480 	.word	0x0800c480
  ldr r2, =_sbss
 8002e0c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002e10:	20001a14 	.word	0x20001a14

08002e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC1_2_IRQHandler>
	...

08002e18 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002e24:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8002e28:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2178      	movs	r1, #120	@ 0x78
 8002e30:	2200      	movs	r2, #0
 8002e32:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <ssd1306_WriteCommand+0x28>)
 8002e34:	f001 f90c 	bl	8004050 <HAL_I2C_Mem_Write>
}
 8002e38:	b007      	add	sp, #28
 8002e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e3e:	bf00      	nop
 8002e40:	2000034c 	.word	0x2000034c

08002e44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	b289      	uxth	r1, r1
 8002e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	2240      	movs	r2, #64	@ 0x40
 8002e54:	2301      	movs	r3, #1
 8002e56:	2178      	movs	r1, #120	@ 0x78
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <ssd1306_WriteData+0x20>)
 8002e5a:	f001 f8f9 	bl	8004050 <HAL_I2C_Mem_Write>
}
 8002e5e:	b005      	add	sp, #20
 8002e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e64:	2000034c 	.word	0x2000034c

08002e68 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6e:	bf14      	ite	ne
 8002e70:	21ff      	movne	r1, #255	@ 0xff
 8002e72:	2100      	moveq	r1, #0
 8002e74:	4801      	ldr	r0, [pc, #4]	@ (8002e7c <ssd1306_Fill+0x14>)
 8002e76:	f006 bc17 	b.w	80096a8 <memset>
 8002e7a:	bf00      	nop
 8002e7c:	2000047e 	.word	0x2000047e

08002e80 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	24b0      	movs	r4, #176	@ 0xb0
 8002e84:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb0 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ffc6 	bl	8002e18 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7ff ffc3 	bl	8002e18 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e92:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002e94:	2010      	movs	r0, #16
 8002e96:	f7ff ffbf 	bl	8002e18 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002e9a:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	f7ff ffd0 	bl	8002e44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ea4:	2cb4      	cmp	r4, #180	@ 0xb4
 8002ea6:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8002eaa:	d1ec      	bne.n	8002e86 <ssd1306_UpdateScreen+0x6>
    }
}
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000047e 	.word	0x2000047e

08002eb4 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002eb4:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002eb6:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002eb8:	d410      	bmi.n	8002edc <ssd1306_DrawPixel+0x28>
 8002eba:	291f      	cmp	r1, #31
 8002ebc:	d80e      	bhi.n	8002edc <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ebe:	2401      	movs	r4, #1
 8002ec0:	08cb      	lsrs	r3, r1, #3
 8002ec2:	4d07      	ldr	r5, [pc, #28]	@ (8002ee0 <ssd1306_DrawPixel+0x2c>)
 8002ec4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002ec8:	5c2b      	ldrb	r3, [r5, r0]
 8002eca:	f001 0107 	and.w	r1, r1, #7
 8002ece:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 8002ed2:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ed4:	bf0c      	ite	eq
 8002ed6:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ed8:	438b      	bicne	r3, r1
 8002eda:	542b      	strb	r3, [r5, r0]
    }
}
 8002edc:	bd30      	pop	{r4, r5, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000047e 	.word	0x2000047e

08002ee4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	4604      	mov	r4, r0
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	a808      	add	r0, sp, #32
 8002eee:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8002ef2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002ef6:	f1a4 0520 	sub.w	r5, r4, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002efa:	9302      	str	r3, [sp, #8]
    if (ch < 32 || ch > 126)
 8002efc:	b2eb      	uxtb	r3, r5
 8002efe:	2b5e      	cmp	r3, #94	@ 0x5e
 8002f00:	d848      	bhi.n	8002f94 <ssd1306_WriteChar+0xb0>
 8002f02:	9b07      	ldr	r3, [sp, #28]
        return 0;
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002f04:	b30b      	cbz	r3, 8002f4a <ssd1306_WriteChar+0x66>
 8002f06:	4423      	add	r3, r4
 8002f08:	f813 6c20 	ldrb.w	r6, [r3, #-32]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002f0c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8002f98 <ssd1306_WriteChar+0xb4>
 8002f10:	f8b9 a000 	ldrh.w	sl, [r9]
 8002f14:	eb0a 0306 	add.w	r3, sl, r6
 8002f18:	2b80      	cmp	r3, #128	@ 0x80
 8002f1a:	dc3b      	bgt.n	8002f94 <ssd1306_WriteChar+0xb0>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002f1c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8002f20:	f89d b015 	ldrb.w	fp, [sp, #21]
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002f2a:	2a20      	cmp	r2, #32
 8002f2c:	dc32      	bgt.n	8002f94 <ssd1306_WriteChar+0xb0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002f2e:	f04f 0800 	mov.w	r8, #0
 8002f32:	fb0b f505 	mul.w	r5, fp, r5
 8002f36:	006d      	lsls	r5, r5, #1
 8002f38:	45c3      	cmp	fp, r8
 8002f3a:	d809      	bhi.n	8002f50 <ssd1306_WriteChar+0x6c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002f3c:	4456      	add	r6, sl
 8002f3e:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8002f42:	4620      	mov	r0, r4
 8002f44:	b009      	add	sp, #36	@ 0x24
 8002f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002f4a:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8002f4e:	e7dd      	b.n	8002f0c <ssd1306_WriteChar+0x28>
        for(j = 0; j < char_width; j++) {
 8002f50:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.height + i];
 8002f52:	9a06      	ldr	r2, [sp, #24]
 8002f54:	5b53      	ldrh	r3, [r2, r5]
 8002f56:	9304      	str	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f58:	9b01      	ldr	r3, [sp, #4]
 8002f5a:	eb08 0203 	add.w	r2, r8, r3
 8002f5e:	b2d3      	uxtb	r3, r2
 8002f60:	9303      	str	r3, [sp, #12]
        for(j = 0; j < char_width; j++) {
 8002f62:	42be      	cmp	r6, r7
 8002f64:	d803      	bhi.n	8002f6e <ssd1306_WriteChar+0x8a>
    for(i = 0; i < Font.height; i++) {
 8002f66:	f108 0801 	add.w	r8, r8, #1
 8002f6a:	3502      	adds	r5, #2
 8002f6c:	e7e4      	b.n	8002f38 <ssd1306_WriteChar+0x54>
            if((b << j) & 0x8000)  {
 8002f6e:	9b04      	ldr	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f70:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8002f74:	fa03 f207 	lsl.w	r2, r3, r7
 8002f78:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f7a:	bf56      	itet	pl
 8002f7c:	9b02      	ldrpl	r3, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f7e:	9a02      	ldrmi	r2, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f80:	fab3 f283 	clzpl	r2, r3
 8002f84:	9903      	ldr	r1, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f86:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f88:	bf58      	it	pl
 8002f8a:	0952      	lsrpl	r2, r2, #5
 8002f8c:	f7ff ff92 	bl	8002eb4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002f90:	3701      	adds	r7, #1
 8002f92:	e7e6      	b.n	8002f62 <ssd1306_WriteChar+0x7e>
        return 0;
 8002f94:	2400      	movs	r4, #0
 8002f96:	e7d4      	b.n	8002f42 <ssd1306_WriteChar+0x5e>
 8002f98:	20000478 	.word	0x20000478

08002f9c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	ac03      	add	r4, sp, #12
 8002fa2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002fa6:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 8002faa:	1e45      	subs	r5, r0, #1
    while (*str) {
 8002fac:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002fb0:	b140      	cbz	r0, 8002fc4 <ssd1306_WriteString+0x28>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002fb2:	9600      	str	r6, [sp, #0]
 8002fb4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002fb8:	f7ff ff94 	bl	8002ee4 <ssd1306_WriteChar>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	7828      	ldrb	r0, [r5, #0]
 8002fc0:	4283      	cmp	r3, r0
 8002fc2:	d0f3      	beq.n	8002fac <ssd1306_WriteString+0x10>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002fc4:	b006      	add	sp, #24
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}

08002fc8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8002fc8:	4b01      	ldr	r3, [pc, #4]	@ (8002fd0 <ssd1306_SetCursor+0x8>)
 8002fca:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002fcc:	8059      	strh	r1, [r3, #2]
}
 8002fce:	4770      	bx	lr
 8002fd0:	20000478 	.word	0x20000478

08002fd4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002fd8:	2081      	movs	r0, #129	@ 0x81
 8002fda:	f7ff ff1d 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002fde:	4620      	mov	r0, r4
}
 8002fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8002fe4:	f7ff bf18 	b.w	8002e18 <ssd1306_WriteCommand>

08002fe8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 8002fe8:	2800      	cmp	r0, #0
    if (on) {
 8002fea:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8002fec:	bf0c      	ite	eq
 8002fee:	4603      	moveq	r3, r0
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	4a03      	ldr	r2, [pc, #12]	@ (8003000 <ssd1306_SetDisplayOn+0x18>)
 8002ff4:	bf0c      	ite	eq
 8002ff6:	20ae      	moveq	r0, #174	@ 0xae
 8002ff8:	20af      	movne	r0, #175	@ 0xaf
 8002ffa:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8002ffc:	f7ff bf0c 	b.w	8002e18 <ssd1306_WriteCommand>
 8003000:	20000478 	.word	0x20000478

08003004 <ssd1306_Init>:
void ssd1306_Init(void) {
 8003004:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8003006:	2064      	movs	r0, #100	@ 0x64
 8003008:	f000 f8a8 	bl	800315c <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 800300c:	2000      	movs	r0, #0
 800300e:	f7ff ffeb 	bl	8002fe8 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003012:	2020      	movs	r0, #32
 8003014:	f7ff ff00 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003018:	2000      	movs	r0, #0
 800301a:	f7ff fefd 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800301e:	20b0      	movs	r0, #176	@ 0xb0
 8003020:	f7ff fefa 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003024:	20c8      	movs	r0, #200	@ 0xc8
 8003026:	f7ff fef7 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800302a:	2000      	movs	r0, #0
 800302c:	f7ff fef4 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003030:	2010      	movs	r0, #16
 8003032:	f7ff fef1 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003036:	2040      	movs	r0, #64	@ 0x40
 8003038:	f7ff feee 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 800303c:	20ff      	movs	r0, #255	@ 0xff
 800303e:	f7ff ffc9 	bl	8002fd4 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003042:	20a1      	movs	r0, #161	@ 0xa1
 8003044:	f7ff fee8 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003048:	20a6      	movs	r0, #166	@ 0xa6
 800304a:	f7ff fee5 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800304e:	20a8      	movs	r0, #168	@ 0xa8
 8003050:	f7ff fee2 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); //
 8003054:	201f      	movs	r0, #31
 8003056:	f7ff fedf 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800305a:	20a4      	movs	r0, #164	@ 0xa4
 800305c:	f7ff fedc 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003060:	20d3      	movs	r0, #211	@ 0xd3
 8003062:	f7ff fed9 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003066:	2000      	movs	r0, #0
 8003068:	f7ff fed6 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800306c:	20d5      	movs	r0, #213	@ 0xd5
 800306e:	f7ff fed3 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003072:	20f0      	movs	r0, #240	@ 0xf0
 8003074:	f7ff fed0 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003078:	20d9      	movs	r0, #217	@ 0xd9
 800307a:	f7ff fecd 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800307e:	2022      	movs	r0, #34	@ 0x22
 8003080:	f7ff feca 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003084:	20da      	movs	r0, #218	@ 0xda
 8003086:	f7ff fec7 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02);
 800308a:	2002      	movs	r0, #2
 800308c:	f7ff fec4 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003090:	20db      	movs	r0, #219	@ 0xdb
 8003092:	f7ff fec1 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003096:	2020      	movs	r0, #32
 8003098:	f7ff febe 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800309c:	208d      	movs	r0, #141	@ 0x8d
 800309e:	f7ff febb 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80030a2:	2014      	movs	r0, #20
 80030a4:	f7ff feb8 	bl	8002e18 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff ff9d 	bl	8002fe8 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7ff feda 	bl	8002e68 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80030b4:	f7ff fee4 	bl	8002e80 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80030b8:	2200      	movs	r2, #0
 80030ba:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <ssd1306_Init+0xc4>)
 80030bc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80030be:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80030c0:	2201      	movs	r2, #1
 80030c2:	711a      	strb	r2, [r3, #4]
}
 80030c4:	bd08      	pop	{r3, pc}
 80030c6:	bf00      	nop
 80030c8:	20000478 	.word	0x20000478

080030cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <HAL_InitTick+0x3c>)
{
 80030d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030dc:	4a0b      	ldr	r2, [pc, #44]	@ (800310c <HAL_InitTick+0x40>)
 80030de:	6810      	ldr	r0, [r2, #0]
 80030e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80030e4:	f000 f89c 	bl	8003220 <HAL_SYSTICK_Config>
 80030e8:	4604      	mov	r4, r0
 80030ea:	b958      	cbnz	r0, 8003104 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ec:	2d0f      	cmp	r5, #15
 80030ee:	d809      	bhi.n	8003104 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f0:	4602      	mov	r2, r0
 80030f2:	4629      	mov	r1, r5
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f000 f854 	bl	80031a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030fc:	4620      	mov	r0, r4
 80030fe:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <HAL_InitTick+0x44>)
 8003100:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003102:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003104:	2001      	movs	r0, #1
 8003106:	e7fc      	b.n	8003102 <HAL_InitTick+0x36>
 8003108:	2000001c 	.word	0x2000001c
 800310c:	20000018 	.word	0x20000018
 8003110:	20000020 	.word	0x20000020

08003114 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003114:	4a07      	ldr	r2, [pc, #28]	@ (8003134 <HAL_Init+0x20>)
{
 8003116:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800311a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311c:	f043 0310 	orr.w	r3, r3, #16
 8003120:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003122:	f000 f82d 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003126:	200f      	movs	r0, #15
 8003128:	f7ff ffd0 	bl	80030cc <HAL_InitTick>
  HAL_MspInit();
 800312c:	f7ff fc6c 	bl	8002a08 <HAL_MspInit>
}
 8003130:	2000      	movs	r0, #0
 8003132:	bd08      	pop	{r3, pc}
 8003134:	40022000 	.word	0x40022000

08003138 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003138:	4a03      	ldr	r2, [pc, #12]	@ (8003148 <HAL_IncTick+0x10>)
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_IncTick+0x14>)
 800313c:	6811      	ldr	r1, [r2, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	440b      	add	r3, r1
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000680 	.word	0x20000680
 800314c:	2000001c 	.word	0x2000001c

08003150 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003150:	4b01      	ldr	r3, [pc, #4]	@ (8003158 <HAL_GetTick+0x8>)
 8003152:	6818      	ldr	r0, [r3, #0]
}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000680 	.word	0x20000680

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fff6 	bl	8003150 <HAL_GetTick>
 8003164:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003166:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003168:	bf1e      	ittt	ne
 800316a:	4b04      	ldrne	r3, [pc, #16]	@ (800317c <HAL_Delay+0x20>)
 800316c:	781b      	ldrbne	r3, [r3, #0]
 800316e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003170:	f7ff ffee 	bl	8003150 <HAL_GetTick>
 8003174:	1b43      	subs	r3, r0, r5
 8003176:	42a3      	cmp	r3, r4
 8003178:	d3fa      	bcc.n	8003170 <HAL_Delay+0x14>
  {
  }
}
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	2000001c 	.word	0x2000001c

08003180 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4907      	ldr	r1, [pc, #28]	@ (80031a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003182:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003184:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003186:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800318e:	0412      	lsls	r2, r2, #16
 8003190:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800319c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a4:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b530      	push	{r4, r5, lr}
 80031a8:	68dc      	ldr	r4, [r3, #12]
 80031aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	bf28      	it	cs
 80031b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c0:	bf94      	ite	ls
 80031c2:	2400      	movls	r4, #0
 80031c4:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c6:	fa05 f303 	lsl.w	r3, r5, r3
 80031ca:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ce:	40a5      	lsls	r5, r4
 80031d0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80031d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	bfac      	ite	ge
 80031de:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	4a07      	ldrlt	r2, [pc, #28]	@ (8003200 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	bfab      	itete	ge
 80031ec:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80031fa:	bd30      	pop	{r4, r5, pc}
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	e000ed14 	.word	0xe000ed14

08003204 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003204:	2800      	cmp	r0, #0
 8003206:	db07      	blt.n	8003218 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003208:	2301      	movs	r3, #1
 800320a:	0941      	lsrs	r1, r0, #5
 800320c:	4a03      	ldr	r2, [pc, #12]	@ (800321c <HAL_NVIC_EnableIRQ+0x18>)
 800320e:	f000 001f 	and.w	r0, r0, #31
 8003212:	4083      	lsls	r3, r0
 8003214:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	3801      	subs	r0, #1
 8003222:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003226:	d20b      	bcs.n	8003240 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003228:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	21f0      	movs	r1, #240	@ 0xf0
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003230:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003236:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003238:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800323e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003240:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003248:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800324a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003252:	2304      	movs	r3, #4
 8003254:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003256:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8003258:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800325a:	6803      	ldr	r3, [r0, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f022 020e 	bic.w	r2, r2, #14
 8003262:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_DMA_Abort_IT+0x84>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01f      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x6a>
 8003272:	3214      	adds	r2, #20
 8003274:	4293      	cmp	r3, r2
 8003276:	d01e      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x6e>
 8003278:	3214      	adds	r2, #20
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_Abort_IT+0x72>
 800327e:	3214      	adds	r2, #20
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x78>
 8003284:	3214      	adds	r2, #20
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x7e>
 800328a:	3214      	adds	r2, #20
 800328c:	4293      	cmp	r3, r2
 800328e:	bf14      	ite	ne
 8003290:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8003294:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8003298:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <HAL_DMA_Abort_IT+0x88>)
 800329a:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800329c:	2301      	movs	r3, #1
 800329e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80032a2:	2300      	movs	r3, #0
 80032a4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80032a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032aa:	b103      	cbz	r3, 80032ae <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 80032ac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7d2      	b.n	8003258 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032b2:	2301      	movs	r3, #1
 80032b4:	e7f0      	b.n	8003298 <HAL_DMA_Abort_IT+0x50>
 80032b6:	2310      	movs	r3, #16
 80032b8:	e7ee      	b.n	8003298 <HAL_DMA_Abort_IT+0x50>
 80032ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032be:	e7eb      	b.n	8003298 <HAL_DMA_Abort_IT+0x50>
 80032c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032c4:	e7e8      	b.n	8003298 <HAL_DMA_Abort_IT+0x50>
 80032c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ca:	e7e5      	b.n	8003298 <HAL_DMA_Abort_IT+0x50>
 80032cc:	40020008 	.word	0x40020008
 80032d0:	40020000 	.word	0x40020000

080032d4 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 80032d4:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 80032d8:	4770      	bx	lr
	...

080032dc <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80032dc:	4a11      	ldr	r2, [pc, #68]	@ (8003324 <FLASH_SetErrorCode+0x48>)
 80032de:	68d3      	ldr	r3, [r2, #12]
 80032e0:	f013 0310 	ands.w	r3, r3, #16
 80032e4:	d005      	beq.n	80032f2 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80032e6:	4910      	ldr	r1, [pc, #64]	@ (8003328 <FLASH_SetErrorCode+0x4c>)
 80032e8:	69cb      	ldr	r3, [r1, #28]
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80032f0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80032f2:	68d2      	ldr	r2, [r2, #12]
 80032f4:	0750      	lsls	r0, r2, #29
 80032f6:	d506      	bpl.n	8003306 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032f8:	490b      	ldr	r1, [pc, #44]	@ (8003328 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80032fa:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032fe:	69ca      	ldr	r2, [r1, #28]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003306:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <FLASH_SetErrorCode+0x48>)
 8003308:	69d1      	ldr	r1, [r2, #28]
 800330a:	07c9      	lsls	r1, r1, #31
 800330c:	d508      	bpl.n	8003320 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800330e:	4806      	ldr	r0, [pc, #24]	@ (8003328 <FLASH_SetErrorCode+0x4c>)
 8003310:	69c1      	ldr	r1, [r0, #28]
 8003312:	f041 0104 	orr.w	r1, r1, #4
 8003316:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003318:	69d1      	ldr	r1, [r2, #28]
 800331a:	f021 0101 	bic.w	r1, r1, #1
 800331e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003320:	60d3      	str	r3, [r2, #12]
}  
 8003322:	4770      	bx	lr
 8003324:	40022000 	.word	0x40022000
 8003328:	20000688 	.word	0x20000688

0800332c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_FLASH_Unlock+0x1c>)
 800332e:	6918      	ldr	r0, [r3, #16]
 8003330:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8003334:	d007      	beq.n	8003346 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003336:	4a05      	ldr	r2, [pc, #20]	@ (800334c <HAL_FLASH_Unlock+0x20>)
 8003338:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800333a:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800333e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003340:	6918      	ldr	r0, [r3, #16]
 8003342:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8003346:	4770      	bx	lr
 8003348:	40022000 	.word	0x40022000
 800334c:	45670123 	.word	0x45670123

08003350 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003350:	4a03      	ldr	r2, [pc, #12]	@ (8003360 <HAL_FLASH_Lock+0x10>)
}
 8003352:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003354:	6913      	ldr	r3, [r2, #16]
 8003356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335a:	6113      	str	r3, [r2, #16]
}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40022000 	.word	0x40022000

08003364 <FLASH_WaitForLastOperation>:
{
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff fef2 	bl	8003150 <HAL_GetTick>
 800336c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800336e:	4c11      	ldr	r4, [pc, #68]	@ (80033b4 <FLASH_WaitForLastOperation+0x50>)
 8003370:	68e3      	ldr	r3, [r4, #12]
 8003372:	07d8      	lsls	r0, r3, #31
 8003374:	d412      	bmi.n	800339c <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800337a:	bf44      	itt	mi
 800337c:	2320      	movmi	r3, #32
 800337e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003380:	68e3      	ldr	r3, [r4, #12]
 8003382:	06da      	lsls	r2, r3, #27
 8003384:	d406      	bmi.n	8003394 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003386:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003388:	07db      	lsls	r3, r3, #31
 800338a:	d403      	bmi.n	8003394 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800338c:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800338e:	f010 0004 	ands.w	r0, r0, #4
 8003392:	d007      	beq.n	80033a4 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8003394:	f7ff ffa2 	bl	80032dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
 800339a:	e003      	b.n	80033a4 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800339c:	1c6b      	adds	r3, r5, #1
 800339e:	d0e7      	beq.n	8003370 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80033a0:	b90d      	cbnz	r5, 80033a6 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 80033a2:	2003      	movs	r0, #3
}
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80033a6:	f7ff fed3 	bl	8003150 <HAL_GetTick>
 80033aa:	1b80      	subs	r0, r0, r6
 80033ac:	42a8      	cmp	r0, r5
 80033ae:	d9df      	bls.n	8003370 <FLASH_WaitForLastOperation+0xc>
 80033b0:	e7f7      	b.n	80033a2 <FLASH_WaitForLastOperation+0x3e>
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000

080033b8 <HAL_FLASH_Program>:
{
 80033b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80033bc:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8003454 <HAL_FLASH_Program+0x9c>
{
 80033c0:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80033c2:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 80033c6:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80033c8:	2b01      	cmp	r3, #1
{
 80033ca:	4688      	mov	r8, r1
 80033cc:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80033ce:	d03f      	beq.n	8003450 <HAL_FLASH_Program+0x98>
 80033d0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 80033d6:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033da:	f7ff ffc3 	bl	8003364 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80033de:	bb90      	cbnz	r0, 8003446 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80033e0:	2d01      	cmp	r5, #1
 80033e2:	d003      	beq.n	80033ec <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80033e4:	2d02      	cmp	r5, #2
 80033e6:	bf14      	ite	ne
 80033e8:	2504      	movne	r5, #4
 80033ea:	2502      	moveq	r5, #2
      nbiterations = 4U;
 80033ec:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033ee:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033f0:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8003458 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033f4:	0134      	lsls	r4, r6, #4
 80033f6:	f1c4 0120 	rsb	r1, r4, #32
 80033fa:	f1a4 0220 	sub.w	r2, r4, #32
 80033fe:	fa07 f101 	lsl.w	r1, r7, r1
 8003402:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003406:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800340a:	430c      	orrs	r4, r1
 800340c:	fa27 f202 	lsr.w	r2, r7, r2
 8003410:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003412:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003416:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003420:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8003424:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003428:	f7ff ff9c 	bl	8003364 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800342c:	f8db 2010 	ldr.w	r2, [fp, #16]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8003438:	b928      	cbnz	r0, 8003446 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 800343a:	3601      	adds	r6, #1
 800343c:	b2f2      	uxtb	r2, r6
 800343e:	4295      	cmp	r5, r2
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	d8d6      	bhi.n	80033f4 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8003446:	2300      	movs	r3, #0
 8003448:	f88a 3018 	strb.w	r3, [sl, #24]
}
 800344c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8003450:	2002      	movs	r0, #2
 8003452:	e7fb      	b.n	800344c <HAL_FLASH_Program+0x94>
 8003454:	20000688 	.word	0x20000688
 8003458:	40022000 	.word	0x40022000

0800345c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800345c:	2200      	movs	r2, #0
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <FLASH_PageErase+0x1c>)
 8003460:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <FLASH_PageErase+0x20>)
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	f042 0202 	orr.w	r2, r2, #2
 800346a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800346c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003476:	4770      	bx	lr
 8003478:	20000688 	.word	0x20000688
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_FLASHEx_Erase>:
{
 8003480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8003484:	4f26      	ldr	r7, [pc, #152]	@ (8003520 <HAL_FLASHEx_Erase+0xa0>)
{
 8003486:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8003488:	7e3b      	ldrb	r3, [r7, #24]
{
 800348a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800348c:	2b01      	cmp	r3, #1
 800348e:	d044      	beq.n	800351a <HAL_FLASHEx_Erase+0x9a>
 8003490:	2401      	movs	r4, #1
 8003492:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003494:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003496:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800349a:	2b02      	cmp	r3, #2
 800349c:	d11a      	bne.n	80034d4 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800349e:	f7ff ff61 	bl	8003364 <FLASH_WaitForLastOperation>
 80034a2:	b120      	cbz	r0, 80034ae <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80034a4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80034a6:	2300      	movs	r3, #0
 80034a8:	763b      	strb	r3, [r7, #24]
}
 80034aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80034ae:	4c1d      	ldr	r4, [pc, #116]	@ (8003524 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034b0:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80034b2:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034be:	6923      	ldr	r3, [r4, #16]
 80034c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c4:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034c6:	f7ff ff4d 	bl	8003364 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80034ca:	6923      	ldr	r3, [r4, #16]
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	e7e8      	b.n	80034a6 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80034d4:	f7ff ff46 	bl	8003364 <FLASH_WaitForLastOperation>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d1e3      	bne.n	80034a4 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034e4:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80034e6:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80034e8:	4c0e      	ldr	r4, [pc, #56]	@ (8003524 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80034ea:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80034ee:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80034f2:	42b3      	cmp	r3, r6
 80034f4:	d9d7      	bls.n	80034a6 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7ff ffb0 	bl	800345c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003500:	f7ff ff30 	bl	8003364 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003504:	6923      	ldr	r3, [r4, #16]
 8003506:	f023 0302 	bic.w	r3, r3, #2
 800350a:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800350c:	b110      	cbz	r0, 8003514 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 800350e:	f8c8 6000 	str.w	r6, [r8]
            break;
 8003512:	e7c8      	b.n	80034a6 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8003514:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003518:	e7e7      	b.n	80034ea <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 800351a:	2002      	movs	r0, #2
 800351c:	e7c5      	b.n	80034aa <HAL_FLASHEx_Erase+0x2a>
 800351e:	bf00      	nop
 8003520:	20000688 	.word	0x20000688
 8003524:	40022000 	.word	0x40022000

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800352c:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800352e:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8003532:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003534:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80036bc <HAL_GPIO_Init+0x194>
 8003538:	4b61      	ldr	r3, [pc, #388]	@ (80036c0 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800353a:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	680a      	ldr	r2, [r1, #0]
 8003540:	fa32 f506 	lsrs.w	r5, r2, r6
 8003544:	d102      	bne.n	800354c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8003546:	b003      	add	sp, #12
 8003548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800354c:	2501      	movs	r5, #1
 800354e:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8003556:	ea37 0202 	bics.w	r2, r7, r2
 800355a:	d176      	bne.n	800364a <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 800355c:	684a      	ldr	r2, [r1, #4]
 800355e:	2a03      	cmp	r2, #3
 8003560:	d807      	bhi.n	8003572 <HAL_GPIO_Init+0x4a>
 8003562:	3a01      	subs	r2, #1
 8003564:	2a02      	cmp	r2, #2
 8003566:	f200 8083 	bhi.w	8003670 <HAL_GPIO_Init+0x148>
 800356a:	e8df f002 	tbb	[pc, r2]
 800356e:	9691      	.short	0x9691
 8003570:	9c          	.byte	0x9c
 8003571:	00          	.byte	0x00
 8003572:	2a12      	cmp	r2, #18
 8003574:	f000 8094 	beq.w	80036a0 <HAL_GPIO_Init+0x178>
 8003578:	d869      	bhi.n	800364e <HAL_GPIO_Init+0x126>
 800357a:	2a11      	cmp	r2, #17
 800357c:	f000 808a 	beq.w	8003694 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003580:	2dff      	cmp	r5, #255	@ 0xff
 8003582:	bf94      	ite	ls
 8003584:	4681      	movls	r9, r0
 8003586:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003588:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800358c:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003590:	bf88      	it	hi
 8003592:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003594:	fa0e fa02 	lsl.w	sl, lr, r2
 8003598:	ea27 070a 	bic.w	r7, r7, sl
 800359c:	fa04 f202 	lsl.w	r2, r4, r2
 80035a0:	4317      	orrs	r7, r2
 80035a2:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80035aa:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80035ae:	d04c      	beq.n	800364a <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035b0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80035b4:	f026 0703 	bic.w	r7, r6, #3
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	f8cc 2018 	str.w	r2, [ip, #24]
 80035c0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80035c4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80035c8:	f002 0201 	and.w	r2, r2, #1
 80035cc:	9201      	str	r2, [sp, #4]
 80035ce:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035d2:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d6:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035d8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80035dc:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035de:	fa0e fb0a 	lsl.w	fp, lr, sl
 80035e2:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e6:	4a37      	ldr	r2, [pc, #220]	@ (80036c4 <HAL_GPIO_Init+0x19c>)
 80035e8:	4290      	cmp	r0, r2
 80035ea:	d060      	beq.n	80036ae <HAL_GPIO_Init+0x186>
 80035ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035f0:	4290      	cmp	r0, r2
 80035f2:	d05e      	beq.n	80036b2 <HAL_GPIO_Init+0x18a>
 80035f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035f8:	4290      	cmp	r0, r2
 80035fa:	d05c      	beq.n	80036b6 <HAL_GPIO_Init+0x18e>
 80035fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003600:	4290      	cmp	r0, r2
 8003602:	bf14      	ite	ne
 8003604:	2204      	movne	r2, #4
 8003606:	2203      	moveq	r2, #3
 8003608:	fa02 f20a 	lsl.w	r2, r2, sl
 800360c:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8003610:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003612:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003614:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003618:	bf14      	ite	ne
 800361a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800361c:	43aa      	biceq	r2, r5
 800361e:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003620:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003622:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003626:	bf14      	ite	ne
 8003628:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800362a:	43aa      	biceq	r2, r5
 800362c:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800362e:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003630:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003634:	bf14      	ite	ne
 8003636:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003638:	43aa      	biceq	r2, r5
 800363a:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800363c:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800363e:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003642:	bf14      	ite	ne
 8003644:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003646:	43aa      	biceq	r2, r5
 8003648:	601a      	str	r2, [r3, #0]
	position++;
 800364a:	3601      	adds	r6, #1
 800364c:	e777      	b.n	800353e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800364e:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80036c8 <HAL_GPIO_Init+0x1a0>
 8003652:	454a      	cmp	r2, r9
 8003654:	d00c      	beq.n	8003670 <HAL_GPIO_Init+0x148>
 8003656:	d814      	bhi.n	8003682 <HAL_GPIO_Init+0x15a>
 8003658:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800365c:	454a      	cmp	r2, r9
 800365e:	d007      	beq.n	8003670 <HAL_GPIO_Init+0x148>
 8003660:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8003664:	454a      	cmp	r2, r9
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x148>
 8003668:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800366c:	454a      	cmp	r2, r9
 800366e:	d187      	bne.n	8003580 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003670:	688a      	ldr	r2, [r1, #8]
 8003672:	b1d2      	cbz	r2, 80036aa <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003674:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003676:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 800367a:	bf0c      	ite	eq
 800367c:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800367e:	6147      	strne	r7, [r0, #20]
 8003680:	e77e      	b.n	8003580 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003682:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80036cc <HAL_GPIO_Init+0x1a4>
 8003686:	454a      	cmp	r2, r9
 8003688:	d0f2      	beq.n	8003670 <HAL_GPIO_Init+0x148>
 800368a:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 800368e:	e7ed      	b.n	800366c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003690:	68cc      	ldr	r4, [r1, #12]
          break;
 8003692:	e775      	b.n	8003580 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003694:	68cc      	ldr	r4, [r1, #12]
 8003696:	3404      	adds	r4, #4
          break;
 8003698:	e772      	b.n	8003580 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800369a:	68cc      	ldr	r4, [r1, #12]
 800369c:	3408      	adds	r4, #8
          break;
 800369e:	e76f      	b.n	8003580 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036a0:	68cc      	ldr	r4, [r1, #12]
 80036a2:	340c      	adds	r4, #12
          break;
 80036a4:	e76c      	b.n	8003580 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80036a6:	2400      	movs	r4, #0
 80036a8:	e76a      	b.n	8003580 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036aa:	2404      	movs	r4, #4
 80036ac:	e768      	b.n	8003580 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036ae:	2200      	movs	r2, #0
 80036b0:	e7aa      	b.n	8003608 <HAL_GPIO_Init+0xe0>
 80036b2:	2201      	movs	r2, #1
 80036b4:	e7a8      	b.n	8003608 <HAL_GPIO_Init+0xe0>
 80036b6:	2202      	movs	r2, #2
 80036b8:	e7a6      	b.n	8003608 <HAL_GPIO_Init+0xe0>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010400 	.word	0x40010400
 80036c4:	40010800 	.word	0x40010800
 80036c8:	10220000 	.word	0x10220000
 80036cc:	10310000 	.word	0x10310000

080036d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d0:	6883      	ldr	r3, [r0, #8]
 80036d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80036d4:	bf14      	ite	ne
 80036d6:	2001      	movne	r0, #1
 80036d8:	2000      	moveq	r0, #0
 80036da:	4770      	bx	lr

080036dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036dc:	b10a      	cbz	r2, 80036e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036de:	6101      	str	r1, [r0, #16]
  }
}
 80036e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036e2:	0409      	lsls	r1, r1, #16
 80036e4:	e7fb      	b.n	80036de <HAL_GPIO_WritePin+0x2>

080036e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036e8:	ea01 0203 	and.w	r2, r1, r3
 80036ec:	ea21 0103 	bic.w	r1, r1, r3
 80036f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80036f4:	6101      	str	r1, [r0, #16]
}
 80036f6:	4770      	bx	lr

080036f8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f8:	6801      	ldr	r1, [r0, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	694b      	ldr	r3, [r1, #20]
 80036fe:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8003702:	d010      	beq.n	8003726 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003708:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800370a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800370e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003712:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003716:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8003722:	2001      	movs	r0, #1
 8003724:	4770      	bx	lr
  }
  return HAL_OK;
 8003726:	4618      	mov	r0, r3
}
 8003728:	4770      	bx	lr

0800372a <I2C_WaitOnFlagUntilTimeout>:
{
 800372a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800372e:	4606      	mov	r6, r0
 8003730:	460f      	mov	r7, r1
 8003732:	4691      	mov	r9, r2
 8003734:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003736:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800373a:	6833      	ldr	r3, [r6, #0]
 800373c:	f1ba 0f01 	cmp.w	sl, #1
 8003740:	bf0c      	ite	eq
 8003742:	695c      	ldreq	r4, [r3, #20]
 8003744:	699c      	ldrne	r4, [r3, #24]
 8003746:	ea27 0404 	bic.w	r4, r7, r4
 800374a:	b2a4      	uxth	r4, r4
 800374c:	fab4 f484 	clz	r4, r4
 8003750:	0964      	lsrs	r4, r4, #5
 8003752:	45a1      	cmp	r9, r4
 8003754:	d001      	beq.n	800375a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003756:	2000      	movs	r0, #0
 8003758:	e025      	b.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 800375a:	1c6a      	adds	r2, r5, #1
 800375c:	d0ee      	beq.n	800373c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7ff fcf7 	bl	8003150 <HAL_GetTick>
 8003762:	9b08      	ldr	r3, [sp, #32]
 8003764:	1ac0      	subs	r0, r0, r3
 8003766:	42a8      	cmp	r0, r5
 8003768:	d801      	bhi.n	800376e <I2C_WaitOnFlagUntilTimeout+0x44>
 800376a:	2d00      	cmp	r5, #0
 800376c:	d1e5      	bne.n	800373a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	f1ba 0f01 	cmp.w	sl, #1
 8003774:	bf0c      	ite	eq
 8003776:	695b      	ldreq	r3, [r3, #20]
 8003778:	699b      	ldrne	r3, [r3, #24]
 800377a:	ea27 0303 	bic.w	r3, r7, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	fab3 f383 	clz	r3, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	4599      	cmp	r9, r3
 8003788:	d1d7      	bne.n	800373a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800378a:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800378c:	2220      	movs	r2, #32
          return HAL_ERROR;
 800378e:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003790:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003792:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003796:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800379c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	f042 0220 	orr.w	r2, r2, #32
 80037a4:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80037a6:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80037aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ae:	4604      	mov	r4, r0
 80037b0:	460f      	mov	r7, r1
 80037b2:	4616      	mov	r6, r2
 80037b4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	6968      	ldr	r0, [r5, #20]
 80037ba:	ea27 0000 	bic.w	r0, r7, r0
 80037be:	b280      	uxth	r0, r0
 80037c0:	b1c0      	cbz	r0, 80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c2:	696b      	ldr	r3, [r5, #20]
 80037c4:	055a      	lsls	r2, r3, #21
 80037c6:	d517      	bpl.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037d0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d2:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80037d6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	2300      	movs	r3, #0
 80037da:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037e6:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ea:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80037ec:	2300      	movs	r3, #0
      return HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80037f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80037f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	1c73      	adds	r3, r6, #1
 80037fa:	d0dd      	beq.n	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7ff fca8 	bl	8003150 <HAL_GetTick>
 8003800:	eba0 0008 	sub.w	r0, r0, r8
 8003804:	42b0      	cmp	r0, r6
 8003806:	d801      	bhi.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8003808:	2e00      	cmp	r6, #0
 800380a:	d1d4      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	ea27 0202 	bic.w	r2, r7, r2
 8003814:	b292      	uxth	r2, r2
 8003816:	2a00      	cmp	r2, #0
 8003818:	d0cd      	beq.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800382a:	4313      	orrs	r3, r2
 800382c:	e7dd      	b.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800382e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	4604      	mov	r4, r0
 8003832:	460d      	mov	r5, r1
 8003834:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	061b      	lsls	r3, r3, #24
 800383c:	d501      	bpl.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800383e:	2000      	movs	r0, #0
 8003840:	e01e      	b.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff ff58 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 8003848:	b9c8      	cbnz	r0, 800387e <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800384a:	1c6a      	adds	r2, r5, #1
 800384c:	d0f3      	beq.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7ff fc7f 	bl	8003150 <HAL_GetTick>
 8003852:	1b80      	subs	r0, r0, r6
 8003854:	42a8      	cmp	r0, r5
 8003856:	d801      	bhi.n	800385c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003858:	2d00      	cmp	r5, #0
 800385a:	d1ec      	bne.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8003864:	d1e7      	bne.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003874:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	f042 0220 	orr.w	r2, r2, #32
 800387c:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
}
 8003880:	bd70      	pop	{r4, r5, r6, pc}
	...

08003884 <I2C_RequestMemoryWrite>:
{
 8003884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003888:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	6802      	ldr	r2, [r0, #0]
{
 800388c:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	6813      	ldr	r3, [r2, #0]
{
 8003890:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003896:	6013      	str	r3, [r2, #0]
{
 8003898:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800389c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	463b      	mov	r3, r7
 80038a0:	2200      	movs	r2, #0
 80038a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038a6:	f8cd 8000 	str.w	r8, [sp]
{
 80038aa:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ac:	f7ff ff3d 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	b138      	cbz	r0, 80038c4 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	05db      	lsls	r3, r3, #23
 80038b8:	d502      	bpl.n	80038c0 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038be:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80038c0:	2603      	movs	r6, #3
 80038c2:	e020      	b.n	8003906 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038c4:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80038c8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ca:	463a      	mov	r2, r7
 80038cc:	4643      	mov	r3, r8
 80038ce:	4620      	mov	r0, r4
 80038d0:	4918      	ldr	r1, [pc, #96]	@ (8003934 <I2C_RequestMemoryWrite+0xb0>)
 80038d2:	f7ff ff6a 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d6:	b9a8      	cbnz	r0, 8003904 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	9003      	str	r0, [sp, #12]
 80038dc:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e0:	9203      	str	r2, [sp, #12]
 80038e2:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e4:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ec:	f7ff ff9f 	bl	800382e <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4606      	mov	r6, r0
 80038f2:	b160      	cbz	r0, 800390e <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038f6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	bf01      	itttt	eq
 80038fa:	6822      	ldreq	r2, [r4, #0]
 80038fc:	6813      	ldreq	r3, [r2, #0]
 80038fe:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003902:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003904:	2601      	movs	r6, #1
}
 8003906:	4630      	mov	r0, r6
 8003908:	b005      	add	sp, #20
 800390a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390e:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003914:	d102      	bne.n	800391c <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003916:	b2ed      	uxtb	r5, r5
 8003918:	611d      	str	r5, [r3, #16]
 800391a:	e7f4      	b.n	8003906 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800391c:	0a2a      	lsrs	r2, r5, #8
 800391e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003920:	4639      	mov	r1, r7
 8003922:	4642      	mov	r2, r8
 8003924:	4620      	mov	r0, r4
 8003926:	f7ff ff82 	bl	800382e <I2C_WaitOnTXEFlagUntilTimeout>
 800392a:	2800      	cmp	r0, #0
 800392c:	d1e2      	bne.n	80038f4 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	e7f1      	b.n	8003916 <I2C_RequestMemoryWrite+0x92>
 8003932:	bf00      	nop
 8003934:	00010002 	.word	0x00010002

08003938 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	075b      	lsls	r3, r3, #29
 8003946:	d501      	bpl.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003948:	2000      	movs	r0, #0
 800394a:	e01e      	b.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff fed3 	bl	80036f8 <I2C_IsAcknowledgeFailed>
 8003952:	b9c8      	cbnz	r0, 8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003954:	1c6a      	adds	r2, r5, #1
 8003956:	d0f3      	beq.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff fbfa 	bl	8003150 <HAL_GetTick>
 800395c:	1b80      	subs	r0, r0, r6
 800395e:	42a8      	cmp	r0, r5
 8003960:	d801      	bhi.n	8003966 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003962:	2d00      	cmp	r5, #0
 8003964:	d1ec      	bne.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f013 0304 	ands.w	r3, r3, #4
 800396e:	d1e7      	bne.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003974:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800397e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
}
 800398a:	bd70      	pop	{r4, r5, r6, pc}

0800398c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003994:	6821      	ldr	r1, [r4, #0]
 8003996:	694b      	ldr	r3, [r1, #20]
 8003998:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800399e:	2000      	movs	r0, #0
 80039a0:	e011      	b.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039a2:	694a      	ldr	r2, [r1, #20]
 80039a4:	06d2      	lsls	r2, r2, #27
 80039a6:	d50f      	bpl.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	f06f 0210 	mvn.w	r2, #16
 80039ac:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80039be:	2300      	movs	r3, #0
      return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 80039c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7ff fbc2 	bl	8003150 <HAL_GetTick>
 80039cc:	1b80      	subs	r0, r0, r6
 80039ce:	42a8      	cmp	r0, r5
 80039d0:	d801      	bhi.n	80039d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	d1de      	bne.n	8003994 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80039de:	d1d9      	bne.n	8003994 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039ee:	4313      	orrs	r3, r2
 80039f0:	e7e4      	b.n	80039bc <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

080039f4 <HAL_I2C_Init>:
{
 80039f4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80039f6:	4604      	mov	r4, r0
 80039f8:	b908      	cbnz	r0, 80039fe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80039fa:	2001      	movs	r0, #1
}
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a06:	b91b      	cbnz	r3, 8003a10 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003a08:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003a0c:	f7ff f826 	bl	8002a5c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	2324      	movs	r3, #36	@ 0x24
 8003a12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a30:	f002 fb02 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a34:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <HAL_I2C_Init+0x140>)
 8003a36:	6865      	ldr	r5, [r4, #4]
 8003a38:	429d      	cmp	r5, r3
 8003a3a:	bf94      	ite	ls
 8003a3c:	4b3e      	ldrls	r3, [pc, #248]	@ (8003b38 <HAL_I2C_Init+0x144>)
 8003a3e:	4b3f      	ldrhi	r3, [pc, #252]	@ (8003b3c <HAL_I2C_Init+0x148>)
 8003a40:	4298      	cmp	r0, r3
 8003a42:	bf8c      	ite	hi
 8003a44:	2300      	movhi	r3, #0
 8003a46:	2301      	movls	r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1d6      	bne.n	80039fa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a4c:	4e39      	ldr	r6, [pc, #228]	@ (8003b34 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b40 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a50:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a56:	bf88      	it	hi
 8003a58:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	6851      	ldr	r1, [r2, #4]
 8003a60:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003a64:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a68:	bf82      	ittt	hi
 8003a6a:	4373      	mulhi	r3, r6
 8003a6c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8003a70:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a74:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a76:	6a11      	ldr	r1, [r2, #32]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a82:	69d1      	ldr	r1, [r2, #28]
 8003a84:	1e43      	subs	r3, r0, #1
 8003a86:	482b      	ldr	r0, [pc, #172]	@ (8003b34 <HAL_I2C_Init+0x140>)
 8003a88:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003a8c:	4285      	cmp	r5, r0
 8003a8e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003a92:	d832      	bhi.n	8003afa <HAL_I2C_Init+0x106>
 8003a94:	006d      	lsls	r5, r5, #1
 8003a96:	fbb3 f3f5 	udiv	r3, r3, r5
 8003a9a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4203      	tst	r3, r0
 8003aa2:	d042      	beq.n	8003b2a <HAL_I2C_Init+0x136>
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	4319      	orrs	r1, r3
 8003aaa:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003ab2:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8003ab6:	4303      	orrs	r3, r0
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003abc:	6891      	ldr	r1, [r2, #8]
 8003abe:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003ac2:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8003ac6:	4303      	orrs	r3, r0
 8003ac8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad0:	68d1      	ldr	r1, [r2, #12]
 8003ad2:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003ad6:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003ada:	4303      	orrs	r3, r0
 8003adc:	430b      	orrs	r3, r1
 8003ade:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003ae0:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae2:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aec:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003af8:	e780      	b.n	80039fc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003afa:	68a0      	ldr	r0, [r4, #8]
 8003afc:	b950      	cbnz	r0, 8003b14 <HAL_I2C_Init+0x120>
 8003afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b02:	fbb3 f3f5 	udiv	r3, r3, r5
 8003b06:	3301      	adds	r3, #1
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	b17b      	cbz	r3, 8003b2e <HAL_I2C_Init+0x13a>
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b12:	e7c9      	b.n	8003aa8 <HAL_I2C_Init+0xb4>
 8003b14:	2019      	movs	r0, #25
 8003b16:	4368      	muls	r0, r5
 8003b18:	fbb3 f3f0 	udiv	r3, r3, r0
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	b123      	cbz	r3, 8003b2e <HAL_I2C_Init+0x13a>
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b28:	e7be      	b.n	8003aa8 <HAL_I2C_Init+0xb4>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	e7bc      	b.n	8003aa8 <HAL_I2C_Init+0xb4>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e7ba      	b.n	8003aa8 <HAL_I2C_Init+0xb4>
 8003b32:	bf00      	nop
 8003b34:	000186a0 	.word	0x000186a0
 8003b38:	001e847f 	.word	0x001e847f
 8003b3c:	003d08ff 	.word	0x003d08ff
 8003b40:	000f4240 	.word	0x000f4240

08003b44 <HAL_I2C_Master_Transmit>:
{
 8003b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b48:	4604      	mov	r4, r0
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	4698      	mov	r8, r3
 8003b4e:	460d      	mov	r5, r1
 8003b50:	4691      	mov	r9, r2
 8003b52:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003b54:	f7ff fafc 	bl	8003150 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d004      	beq.n	8003b6c <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8003b62:	2502      	movs	r5, #2
}
 8003b64:	4628      	mov	r0, r5
 8003b66:	b005      	add	sp, #20
 8003b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6c:	9000      	str	r0, [sp, #0]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	2201      	movs	r2, #1
 8003b72:	4620      	mov	r0, r4
 8003b74:	495c      	ldr	r1, [pc, #368]	@ (8003ce8 <HAL_I2C_Master_Transmit+0x1a4>)
 8003b76:	f7ff fdd8 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d1f1      	bne.n	8003b62 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003b7e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d0ed      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0x1e>
 8003b86:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b88:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8003b8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8e:	680b      	ldr	r3, [r1, #0]
 8003b90:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003b92:	bf5e      	ittt	pl
 8003b94:	680b      	ldrpl	r3, [r1, #0]
 8003b96:	f043 0301 	orrpl.w	r3, r3, #1
 8003b9a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9c:	680b      	ldr	r3, [r1, #0]
 8003b9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ba2:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ba4:	2321      	movs	r3, #33	@ 0x21
 8003ba6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003baa:	2310      	movs	r3, #16
 8003bac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8003bb4:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8003bba:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003bbe:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_I2C_Master_Transmit+0x1a8>)
 8003bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d004      	beq.n	8003bd4 <HAL_I2C_Master_Transmit+0x90>
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d002      	beq.n	8003bd4 <HAL_I2C_Master_Transmit+0x90>
 8003bce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bd2:	d104      	bne.n	8003bde <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd4:	680b      	ldr	r3, [r1, #0]
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e002      	b.n	8003be4 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003be0:	2b12      	cmp	r3, #18
 8003be2:	d0f7      	beq.n	8003bd4 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	2200      	movs	r2, #0
 8003be6:	463b      	mov	r3, r7
 8003be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bec:	4620      	mov	r0, r4
 8003bee:	9600      	str	r6, [sp, #0]
 8003bf0:	f7ff fd9b 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	6822      	ldr	r2, [r4, #0]
 8003bf6:	b140      	cbz	r0, 8003c0a <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf8:	6813      	ldr	r3, [r2, #0]
 8003bfa:	05db      	lsls	r3, r3, #23
 8003bfc:	d401      	bmi.n	8003c02 <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 8003bfe:	2501      	movs	r5, #1
 8003c00:	e7b0      	b.n	8003b64 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c06:	6423      	str	r3, [r4, #64]	@ 0x40
 8003c08:	e7f9      	b.n	8003bfe <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c10:	d121      	bne.n	8003c56 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c12:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8003c16:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c18:	4633      	mov	r3, r6
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4934      	ldr	r1, [pc, #208]	@ (8003cf0 <HAL_I2C_Master_Transmit+0x1ac>)
 8003c20:	f7ff fdc3 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c24:	4605      	mov	r5, r0
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d1e9      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	9003      	str	r0, [sp, #12]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	9203      	str	r2, [sp, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003c38:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003c3a:	b9f3      	cbnz	r3, 8003c7a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	6821      	ldr	r1, [r4, #0]
 8003c3e:	680a      	ldr	r2, [r1, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c44:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003c48:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003c54:	e786      	b.n	8003b64 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c56:	11eb      	asrs	r3, r5, #7
 8003c58:	f003 0306 	and.w	r3, r3, #6
 8003c5c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8003c60:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c62:	4620      	mov	r0, r4
 8003c64:	4633      	mov	r3, r6
 8003c66:	463a      	mov	r2, r7
 8003c68:	4922      	ldr	r1, [pc, #136]	@ (8003cf4 <HAL_I2C_Master_Transmit+0x1b0>)
 8003c6a:	f7ff fd9e 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1c5      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	b2ed      	uxtb	r5, r5
 8003c76:	611d      	str	r5, [r3, #16]
 8003c78:	e7ce      	b.n	8003c18 <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	4632      	mov	r2, r6
 8003c7c:	4639      	mov	r1, r7
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f7ff fdd5 	bl	800382e <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	b140      	cbz	r0, 8003c98 <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d1b8      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	6813      	ldr	r3, [r2, #0]
 8003c90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e7b2      	b.n	8003bfe <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003ca2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8003ca4:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003ca6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	b292      	uxth	r2, r2
 8003cac:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cae:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb0:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8003cb4:	1e51      	subs	r1, r2, #1
 8003cb6:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb8:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8003cbc:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_I2C_Master_Transmit+0x192>
 8003cc0:	b149      	cbz	r1, 8003cd6 <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8003cc4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8003cc8:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003cca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003ccc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003cd4:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd6:	4632      	mov	r2, r6
 8003cd8:	4639      	mov	r1, r7
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff fe2c 	bl	8003938 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d0a9      	beq.n	8003c38 <HAL_I2C_Master_Transmit+0xf4>
 8003ce4:	e7cf      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x142>
 8003ce6:	bf00      	nop
 8003ce8:	00100002 	.word	0x00100002
 8003cec:	ffff0000 	.word	0xffff0000
 8003cf0:	00010002 	.word	0x00010002
 8003cf4:	00010008 	.word	0x00010008

08003cf8 <HAL_I2C_Master_Receive>:
{
 8003cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8003cfe:	2300      	movs	r3, #0
{
 8003d00:	4604      	mov	r4, r0
 8003d02:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8003d04:	9302      	str	r3, [sp, #8]
{
 8003d06:	460e      	mov	r6, r1
 8003d08:	4691      	mov	r9, r2
 8003d0a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8003d0c:	f7ff fa20 	bl	8003150 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d10:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003d14:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d004      	beq.n	8003d24 <HAL_I2C_Master_Receive+0x2c>
      return HAL_BUSY;
 8003d1a:	2602      	movs	r6, #2
}
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	b009      	add	sp, #36	@ 0x24
 8003d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d24:	9000      	str	r0, [sp, #0]
 8003d26:	2319      	movs	r3, #25
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	498f      	ldr	r1, [pc, #572]	@ (8003f6c <HAL_I2C_Master_Receive+0x274>)
 8003d2e:	f7ff fcfc 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1f1      	bne.n	8003d1a <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8003d36:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d0ed      	beq.n	8003d1a <HAL_I2C_Master_Receive+0x22>
 8003d3e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8003d42:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d46:	680b      	ldr	r3, [r1, #0]
 8003d48:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003d4a:	bf5e      	ittt	pl
 8003d4c:	680b      	ldrpl	r3, [r1, #0]
 8003d4e:	f043 0301 	orrpl.w	r3, r3, #1
 8003d52:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d5a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d5c:	2322      	movs	r3, #34	@ 0x22
 8003d5e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d62:	2310      	movs	r3, #16
 8003d64:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8003d6c:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8003d72:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003d76:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d78:	4b7d      	ldr	r3, [pc, #500]	@ (8003f70 <HAL_I2C_Master_Receive+0x278>)
 8003d7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d80:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d86:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d88:	d004      	beq.n	8003d94 <HAL_I2C_Master_Receive+0x9c>
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d002      	beq.n	8003d94 <HAL_I2C_Master_Receive+0x9c>
 8003d8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d92:	d104      	bne.n	8003d9e <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	680b      	ldr	r3, [r1, #0]
 8003d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	e002      	b.n	8003da4 <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003da0:	2b11      	cmp	r3, #17
 8003da2:	d0f7      	beq.n	8003d94 <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	463b      	mov	r3, r7
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dac:	4620      	mov	r0, r4
 8003dae:	9500      	str	r5, [sp, #0]
 8003db0:	f7ff fcbb 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	b138      	cbz	r0, 8003dc8 <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db8:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dba:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbc:	bf44      	itt	mi
 8003dbe:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8003dc2:	6423      	strmi	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003dc4:	2601      	movs	r6, #1
 8003dc6:	e7a9      	b.n	8003d1c <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc8:	6922      	ldr	r2, [r4, #16]
 8003dca:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003dce:	d129      	bne.n	8003e24 <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd0:	f046 0601 	orr.w	r6, r6, #1
 8003dd4:	b2f6      	uxtb	r6, r6
 8003dd6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd8:	462b      	mov	r3, r5
 8003dda:	463a      	mov	r2, r7
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4965      	ldr	r1, [pc, #404]	@ (8003f74 <HAL_I2C_Master_Receive+0x27c>)
 8003de0:	f7ff fce3 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de4:	4606      	mov	r6, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d1ec      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 8003dea:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d14d      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	9003      	str	r0, [sp, #12]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	9203      	str	r2, [sp, #12]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	9203      	str	r2, [sp, #12]
 8003dfc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e06:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8003f78 <HAL_I2C_Master_Receive+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e0a:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8003f7c <HAL_I2C_Master_Receive+0x284>
    while (hi2c->XferSize > 0U)
 8003e0e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d16c      	bne.n	8003eee <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003e16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003e22:	e77b      	b.n	8003d1c <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e24:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8003e28:	f008 0806 	and.w	r8, r8, #6
 8003e2c:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 8003e30:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e32:	4620      	mov	r0, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	463a      	mov	r2, r7
 8003e38:	4951      	ldr	r1, [pc, #324]	@ (8003f80 <HAL_I2C_Master_Receive+0x288>)
 8003e3a:	f7ff fcb6 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d1c0      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	b2f6      	uxtb	r6, r6
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e46:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e48:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	4949      	ldr	r1, [pc, #292]	@ (8003f74 <HAL_I2C_Master_Receive+0x27c>)
 8003e50:	f7ff fcab 	bl	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e54:	4602      	mov	r2, r0
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d1b4      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	9007      	str	r0, [sp, #28]
 8003e5e:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	9107      	str	r1, [sp, #28]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	9107      	str	r1, [sp, #28]
 8003e68:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8003e70:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	463b      	mov	r3, r7
 8003e74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e78:	9500      	str	r5, [sp, #0]
 8003e7a:	f7ff fc56 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	b108      	cbz	r0, 8003e86 <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	e799      	b.n	8003dba <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e86:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8003e8a:	6113      	str	r3, [r2, #16]
 8003e8c:	e7a4      	b.n	8003dd8 <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 8003e8e:	2a01      	cmp	r2, #1
 8003e90:	d111      	bne.n	8003eb6 <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	9004      	str	r0, [sp, #16]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	9204      	str	r2, [sp, #16]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	9204      	str	r2, [sp, #16]
 8003ea8:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003eb2:	b662      	cpsie	i
}
 8003eb4:	e7a7      	b.n	8003e06 <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 8003eb6:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb8:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8003eba:	d10e      	bne.n	8003eda <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	9005      	str	r0, [sp, #20]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	9205      	str	r2, [sp, #20]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	9205      	str	r2, [sp, #20]
 8003ed0:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed8:	e7ea      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ede:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee0:	9006      	str	r0, [sp, #24]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	9206      	str	r2, [sp, #24]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	9306      	str	r3, [sp, #24]
 8003eea:	9b06      	ldr	r3, [sp, #24]
 8003eec:	e78b      	b.n	8003e06 <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	f200 8088 	bhi.w	8004004 <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d116      	bne.n	8003f26 <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4639      	mov	r1, r7
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7ff fd45 	bl	800398c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f47f af5e 	bne.w	8003dc4 <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f0e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f12:	3301      	adds	r3, #1
 8003f14:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003f16:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003f1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003f24:	e773      	b.n	8003e0e <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 8003f26:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	4641      	mov	r1, r8
 8003f30:	4620      	mov	r0, r4
 8003f32:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8003f34:	d126      	bne.n	8003f84 <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f36:	f7ff fbf8 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	f47f af42 	bne.w	8003dc4 <HAL_I2C_Master_Receive+0xcc>
 8003f40:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f50:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003f52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003f58:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f66:	b662      	cpsie	i
 8003f68:	e7ce      	b.n	8003f08 <HAL_I2C_Master_Receive+0x210>
 8003f6a:	bf00      	nop
 8003f6c:	00100002 	.word	0x00100002
 8003f70:	ffff0000 	.word	0xffff0000
 8003f74:	00010002 	.word	0x00010002
 8003f78:	00010004 	.word	0x00010004
 8003f7c:	20000018 	.word	0x20000018
 8003f80:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f84:	f7ff fbd1 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f47f af1b 	bne.w	8003dc4 <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f96:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f98:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f9a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003fa4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003fa6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003fa8:	1c53      	adds	r3, r2, #1
 8003faa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003fac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003fb2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fba:	f8d9 3000 	ldr.w	r3, [r9]
 8003fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc2:	2123      	movs	r1, #35	@ 0x23
 8003fc4:	434b      	muls	r3, r1
 8003fc6:	9302      	str	r3, [sp, #8]
            count--;
 8003fc8:	9b02      	ldr	r3, [sp, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	b96b      	cbnz	r3, 8003fee <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fd2:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd4:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fd6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fda:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003fe0:	f042 0220 	orr.w	r2, r2, #32
 8003fe4:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe6:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003fe8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8003fec:	e6ea      	b.n	8003dc4 <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6959      	ldr	r1, [r3, #20]
 8003ff2:	0749      	lsls	r1, r1, #29
 8003ff4:	d5e8      	bpl.n	8003fc8 <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003ffc:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	7053      	strb	r3, [r2, #1]
 8004002:	e7a6      	b.n	8003f52 <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004004:	462a      	mov	r2, r5
 8004006:	4639      	mov	r1, r7
 8004008:	4620      	mov	r0, r4
 800400a:	f7ff fcbf 	bl	800398c <I2C_WaitOnRXNEFlagUntilTimeout>
 800400e:	2800      	cmp	r0, #0
 8004010:	f47f aed8 	bne.w	8003dc4 <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800401a:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800401c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 800401e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004020:	3a01      	subs	r2, #1
 8004022:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004024:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8004026:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004028:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 800402a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800402c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800402e:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8004030:	3b01      	subs	r3, #1
 8004032:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004034:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004036:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004038:	f57f aee9 	bpl.w	8003e0e <HAL_I2C_Master_Receive+0x116>
          if (hi2c->XferSize == 3U)
 800403c:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	bf02      	ittt	eq
 8004040:	6813      	ldreq	r3, [r2, #0]
 8004042:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8004046:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	6913      	ldr	r3, [r2, #16]
 800404a:	704b      	strb	r3, [r1, #1]
 800404c:	e760      	b.n	8003f10 <HAL_I2C_Master_Receive+0x218>
 800404e:	bf00      	nop

08004050 <HAL_I2C_Mem_Write>:
{
 8004050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004054:	4604      	mov	r4, r0
 8004056:	4699      	mov	r9, r3
 8004058:	460f      	mov	r7, r1
 800405a:	4690      	mov	r8, r2
 800405c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 800405e:	f7ff f877 	bl	8003150 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004062:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004066:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004068:	2b20      	cmp	r3, #32
 800406a:	d003      	beq.n	8004074 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 800406c:	2002      	movs	r0, #2
}
 800406e:	b003      	add	sp, #12
 8004070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004074:	9000      	str	r0, [sp, #0]
 8004076:	2319      	movs	r3, #25
 8004078:	2201      	movs	r2, #1
 800407a:	4620      	mov	r0, r4
 800407c:	493a      	ldr	r1, [pc, #232]	@ (8004168 <HAL_I2C_Mem_Write+0x118>)
 800407e:	f7ff fb54 	bl	800372a <I2C_WaitOnFlagUntilTimeout>
 8004082:	2800      	cmp	r0, #0
 8004084:	d1f2      	bne.n	800406c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004086:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800408a:	2b01      	cmp	r3, #1
 800408c:	d0ee      	beq.n	800406c <HAL_I2C_Mem_Write+0x1c>
 800408e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004090:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004092:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004096:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004098:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800409a:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800409c:	bf58      	it	pl
 800409e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80040a2:	bf5c      	itt	pl
 80040a4:	f043 0301 	orrpl.w	r3, r3, #1
 80040a8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	6803      	ldr	r3, [r0, #0]
 80040ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040b0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040b2:	2321      	movs	r3, #33	@ 0x21
 80040b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b8:	2340      	movs	r3, #64	@ 0x40
 80040ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040be:	2300      	movs	r3, #0
 80040c0:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80040c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c4:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80040c6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80040cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80040d0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d2:	4b26      	ldr	r3, [pc, #152]	@ (800416c <HAL_I2C_Mem_Write+0x11c>)
 80040d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040d6:	464b      	mov	r3, r9
 80040d8:	e9cd 6500 	strd	r6, r5, [sp]
 80040dc:	f7ff fbd2 	bl	8003884 <I2C_RequestMemoryWrite>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d02a      	beq.n	800413a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e7c2      	b.n	800406e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e8:	f7ff fba1 	bl	800382e <I2C_WaitOnTXEFlagUntilTimeout>
 80040ec:	b140      	cbz	r0, 8004100 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040f0:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	bf01      	itttt	eq
 80040f4:	6822      	ldreq	r2, [r4, #0]
 80040f6:	6813      	ldreq	r3, [r2, #0]
 80040f8:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80040fc:	6013      	streq	r3, [r2, #0]
 80040fe:	e7f1      	b.n	80040e4 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004100:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004102:	6827      	ldr	r7, [r4, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	f812 1b01 	ldrb.w	r1, [r2], #1
 800410a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800410c:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800410e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004110:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004112:	3a01      	subs	r2, #1
 8004114:	b292      	uxth	r2, r2
 8004116:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004118:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800411a:	1e48      	subs	r0, r1, #1
 800411c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800411e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8004120:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004122:	d50a      	bpl.n	800413a <HAL_I2C_Mem_Write+0xea>
 8004124:	b148      	cbz	r0, 800413a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004126:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8004128:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800412a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800412c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800412e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8004130:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004136:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004138:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800413a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413c:	462a      	mov	r2, r5
 800413e:	4631      	mov	r1, r6
 8004140:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d0      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004146:	f7ff fbf7 	bl	8003938 <I2C_WaitOnBTFFlagUntilTimeout>
 800414a:	2800      	cmp	r0, #0
 800414c:	d1cf      	bne.n	80040ee <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6813      	ldr	r3, [r2, #0]
 8004152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004156:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800415a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004162:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004166:	e782      	b.n	800406e <HAL_I2C_Mem_Write+0x1e>
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000

08004170 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004170:	4770      	bx	lr

08004172 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004172:	4770      	bx	lr

08004174 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004174:	4770      	bx	lr

08004176 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004176:	4770      	bx	lr

08004178 <HAL_I2C_AddrCallback>:
}
 8004178:	4770      	bx	lr

0800417a <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 800417a:	4770      	bx	lr

0800417c <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800417c:	4770      	bx	lr

0800417e <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800417e:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8004182:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8004184:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004186:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8004188:	b983      	cbnz	r3, 80041ac <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800418a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800418c:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800418e:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004190:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	d105      	bne.n	80041a0 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004194:	b2db      	uxtb	r3, r3
 8004196:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004198:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800419a:	3302      	adds	r3, #2
      hi2c->EventCount++;
 800419c:	6503      	str	r3, [r0, #80]	@ 0x50
}
 800419e:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80041a4:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80041a6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80041a8:	3301      	adds	r3, #1
 80041aa:	e7f7      	b.n	800419c <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 80041ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d103      	bne.n	80041ba <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041b2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80041b4:	6802      	ldr	r2, [r0, #0]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e7f4      	b.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 80041ba:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d12f      	bne.n	8004220 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041c0:	2a22      	cmp	r2, #34	@ 0x22
 80041c2:	d105      	bne.n	80041d0 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80041ce:	e7ea      	b.n	80041a6 <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041d0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b163      	cbz	r3, 80041f0 <I2C_MemoryTransmit_TXE_BTF+0x72>
 80041d6:	2a21      	cmp	r2, #33	@ 0x21
 80041d8:	d10a      	bne.n	80041f0 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80041dc:	6802      	ldr	r2, [r0, #0]
 80041de:	f813 1b01 	ldrb.w	r1, [r3], #1
 80041e2:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80041e4:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80041e6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80041ee:	e7d6      	b.n	800419e <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041f0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1d2      	bne.n	800419e <I2C_MemoryTransmit_TXE_BTF+0x20>
 80041f8:	2a21      	cmp	r2, #33	@ 0x21
 80041fa:	d1d0      	bne.n	800419e <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041fc:	6802      	ldr	r2, [r0, #0]
 80041fe:	6851      	ldr	r1, [r2, #4]
 8004200:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004204:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	6811      	ldr	r1, [r2, #0]
 8004208:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800420c:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800420e:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8004210:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004212:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800421a:	f7ff ffaf 	bl	800417c <HAL_I2C_MemTxCpltCallback>
 800421e:	e7be      	b.n	800419e <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004220:	6803      	ldr	r3, [r0, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8004226:	bf44      	itt	mi
 8004228:	2200      	movmi	r2, #0
 800422a:	611a      	strmi	r2, [r3, #16]
}
 800422c:	e7b7      	b.n	800419e <I2C_MemoryTransmit_TXE_BTF+0x20>

0800422e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800422e:	4770      	bx	lr

08004230 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8004230:	4770      	bx	lr

08004232 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8004232:	4770      	bx	lr

08004234 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8004234:	2300      	movs	r3, #0
{
 8004236:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004238:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 800423c:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800423e:	4b2c      	ldr	r3, [pc, #176]	@ (80042f0 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004240:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004242:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004244:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004248:	fbb3 f3f1 	udiv	r3, r3, r1
 800424c:	2123      	movs	r1, #35	@ 0x23
 800424e:	434b      	muls	r3, r1
 8004250:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004252:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004254:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 8004256:	9901      	ldr	r1, [sp, #4]
 8004258:	bb41      	cbnz	r1, 80042ac <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800425c:	f041 0120 	orr.w	r1, r1, #32
 8004260:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8004262:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004264:	b10c      	cbz	r4, 800426a <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004266:	2100      	movs	r1, #0
 8004268:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 800426a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800426c:	b109      	cbz	r1, 8004272 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800426e:	2500      	movs	r5, #0
 8004270:	628d      	str	r5, [r1, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	681d      	ldr	r5, [r3, #0]
 8004274:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8004278:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 800427a:	2500      	movs	r5, #0
 800427c:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 800427e:	b104      	cbz	r4, 8004282 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004280:	6365      	str	r5, [r4, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8004282:	b101      	cbz	r1, 8004286 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004284:	634d      	str	r5, [r1, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004286:	6819      	ldr	r1, [r3, #0]
 8004288:	f021 0101 	bic.w	r1, r1, #1
 800428c:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800428e:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8004292:	2960      	cmp	r1, #96	@ 0x60
 8004294:	d111      	bne.n	80042ba <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004296:	2320      	movs	r3, #32
 8004298:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800429c:	2300      	movs	r3, #0
 800429e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042a2:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80042a4:	f7ff ffc5 	bl	8004232 <HAL_I2C_AbortCpltCallback>
}
 80042a8:	b003      	add	sp, #12
 80042aa:	bd30      	pop	{r4, r5, pc}
    count--;
 80042ac:	9901      	ldr	r1, [sp, #4]
 80042ae:	3901      	subs	r1, #1
 80042b0:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	0589      	lsls	r1, r1, #22
 80042b6:	d4ce      	bmi.n	8004256 <I2C_DMAAbort+0x22>
 80042b8:	e7d3      	b.n	8004262 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ba:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80042be:	2a28      	cmp	r2, #40	@ 0x28
 80042c0:	d10e      	bne.n	80042e0 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	f041 0101 	orr.w	r1, r1, #1
 80042c8:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	6819      	ldr	r1, [r3, #0]
 80042cc:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80042d0:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80042da:	f7ff ffa9 	bl	8004230 <HAL_I2C_ErrorCallback>
}
 80042de:	e7e3      	b.n	80042a8 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	2320      	movs	r3, #32
 80042e2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 80042ec:	e7f5      	b.n	80042da <I2C_DMAAbort+0xa6>
 80042ee:	bf00      	nop
 80042f0:	20000018 	.word	0x20000018

080042f4 <I2C_ITError>:
{
 80042f4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f6:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042fa:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 80042fe:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004300:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004302:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004304:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004306:	6803      	ldr	r3, [r0, #0]
 8004308:	d001      	beq.n	800430e <I2C_ITError+0x1a>
 800430a:	2940      	cmp	r1, #64	@ 0x40
 800430c:	d113      	bne.n	8004336 <I2C_ITError+0x42>
 800430e:	2a22      	cmp	r2, #34	@ 0x22
 8004310:	d111      	bne.n	8004336 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8004318:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 8004320:	d106      	bne.n	8004330 <I2C_ITError+0x3c>
 8004322:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8004324:	bf1e      	ittt	ne
 8004326:	2220      	movne	r2, #32
 8004328:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8004330:	2200      	movs	r2, #0
 8004332:	6322      	str	r2, [r4, #48]	@ 0x30
 8004334:	e007      	b.n	8004346 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004336:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 800433a:	2928      	cmp	r1, #40	@ 0x28
 800433c:	d1ed      	bne.n	800431a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 800433e:	2200      	movs	r2, #0
 8004340:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004342:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 800434c:	d04f      	beq.n	80043ee <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800434e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004350:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004356:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004358:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800435c:	2b01      	cmp	r3, #1
 800435e:	4b37      	ldr	r3, [pc, #220]	@ (800443c <I2C_ITError+0x148>)
 8004360:	d02b      	beq.n	80043ba <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004362:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004364:	f7fe ff70 	bl	8003248 <HAL_DMA_Abort_IT>
 8004368:	b150      	cbz	r0, 8004380 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 800436a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800436c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004376:	2320      	movs	r3, #32
 8004378:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800437c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800437e:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8004380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004382:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004384:	bf1f      	itttt	ne
 8004386:	6822      	ldrne	r2, [r4, #0]
 8004388:	6853      	ldrne	r3, [r2, #4]
 800438a:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 800438e:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004390:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004394:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 8004396:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004398:	0752      	lsls	r2, r2, #29
 800439a:	d50d      	bpl.n	80043b8 <I2C_ITError+0xc4>
 800439c:	2b28      	cmp	r3, #40	@ 0x28
 800439e:	d10b      	bne.n	80043b8 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 80043a2:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 80043a8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ac:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80043b4:	f7ff fee1 	bl	800417a <HAL_I2C_ListenCpltCallback>
}
 80043b8:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80043bc:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043be:	f7fe ff43 	bl	8003248 <HAL_DMA_Abort_IT>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0dc      	beq.n	8004380 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	0651      	lsls	r1, r2, #25
 80043cc:	d505      	bpl.n	80043da <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80043d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043d6:	3301      	adds	r3, #1
 80043d8:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 80043da:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043dc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	2320      	movs	r3, #32
 80043e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ec:	e7c6      	b.n	800437c <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043ee:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80043f2:	2960      	cmp	r1, #96	@ 0x60
 80043f4:	d115      	bne.n	8004422 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	2120      	movs	r1, #32
 80043f8:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	0652      	lsls	r2, r2, #25
 8004402:	d505      	bpl.n	8004410 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004408:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800440a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004410:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004412:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800441c:	f7ff ff09 	bl	8004232 <HAL_I2C_AbortCpltCallback>
 8004420:	e7ae      	b.n	8004380 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	0650      	lsls	r0, r2, #25
 8004426:	d505      	bpl.n	8004434 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800442c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800442e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004430:	3301      	adds	r3, #1
 8004432:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff fefb 	bl	8004230 <HAL_I2C_ErrorCallback>
 800443a:	e7a1      	b.n	8004380 <I2C_ITError+0x8c>
 800443c:	08004235 	.word	0x08004235
 8004440:	ffff0000 	.word	0xffff0000

08004444 <HAL_I2C_EV_IRQHandler>:
{
 8004444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004446:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004448:	6803      	ldr	r3, [r0, #0]
{
 800444a:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800444c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800444e:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004450:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004454:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004458:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800445a:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800445c:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800445e:	d002      	beq.n	8004466 <HAL_I2C_EV_IRQHandler+0x22>
 8004460:	2d40      	cmp	r5, #64	@ 0x40
 8004462:	f040 82e5 	bne.w	8004a30 <HAL_I2C_EV_IRQHandler+0x5ec>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004466:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004468:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800446a:	f010 0f01 	tst.w	r0, #1
 800446e:	d107      	bne.n	8004480 <HAL_I2C_EV_IRQHandler+0x3c>
 8004470:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8004474:	d002      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004476:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 800447a:	d151      	bne.n	8004520 <HAL_I2C_EV_IRQHandler+0xdc>
}
 800447c:	b00f      	add	sp, #60	@ 0x3c
 800447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004480:	0596      	lsls	r6, r2, #22
 8004482:	d54d      	bpl.n	8004520 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004484:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004486:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 800448a:	d10c      	bne.n	80044a6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800448c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800448e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004490:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8004494:	2a40      	cmp	r2, #64	@ 0x40
 8004496:	d111      	bne.n	80044bc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8004498:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800449a:	b952      	cbnz	r2, 80044b2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800449c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800449e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044a2:	611a      	str	r2, [r3, #16]
 80044a4:	e7ea      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80044a8:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 80044ac:	d1f0      	bne.n	8004490 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044ae:	2208      	movs	r2, #8
 80044b0:	e7ed      	b.n	800448e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044b2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	e7f2      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044bc:	6922      	ldr	r2, [r4, #16]
 80044be:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80044c2:	d11a      	bne.n	80044fa <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044c4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80044c8:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044ca:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044cc:	d111      	bne.n	80044f2 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044d2:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80044d6:	b10a      	cbz	r2, 80044dc <HAL_I2C_EV_IRQHandler+0x98>
 80044d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044da:	b92a      	cbnz	r2, 80044e8 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d0cc      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
 80044e2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044e4:	2a00      	cmp	r2, #0
 80044e6:	d0c9      	beq.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	e7c4      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	e7eb      	b.n	80044d2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 80044fa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80044fc:	b932      	cbnz	r2, 800450c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80044fe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004500:	11d2      	asrs	r2, r2, #7
 8004502:	f002 0206 	and.w	r2, r2, #6
 8004506:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 800450a:	e7ca      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800450c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800450e:	2a01      	cmp	r2, #1
 8004510:	d1b4      	bne.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004512:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004514:	11d2      	asrs	r2, r2, #7
 8004516:	f002 0206 	and.w	r2, r2, #6
 800451a:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 800451e:	e7c0      	b.n	80044a2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004520:	0706      	lsls	r6, r0, #28
 8004522:	d503      	bpl.n	800452c <HAL_I2C_EV_IRQHandler+0xe8>
 8004524:	0596      	lsls	r6, r2, #22
 8004526:	d501      	bpl.n	800452c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004528:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800452a:	e7e4      	b.n	80044f6 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800452c:	0786      	lsls	r6, r0, #30
 800452e:	f140 80f0 	bpl.w	8004712 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004532:	0596      	lsls	r6, r2, #22
 8004534:	f140 80ed 	bpl.w	8004712 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004538:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800453c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800453e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004540:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004544:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004546:	2822      	cmp	r0, #34	@ 0x22
 8004548:	f040 80db 	bne.w	8004702 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800454c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800454e:	b940      	cbnz	r0, 8004562 <HAL_I2C_EV_IRQHandler+0x11e>
 8004550:	2940      	cmp	r1, #64	@ 0x40
 8004552:	d106      	bne.n	8004562 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	9000      	str	r0, [sp, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	9200      	str	r2, [sp, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	9b00      	ldr	r3, [sp, #0]
 8004560:	e78c      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004562:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004564:	b989      	cbnz	r1, 800458a <HAL_I2C_EV_IRQHandler+0x146>
 8004566:	6920      	ldr	r0, [r4, #16]
 8004568:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 800456c:	d10d      	bne.n	800458a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	9101      	str	r1, [sp, #4]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	9201      	str	r2, [sp, #4]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004580:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004582:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004584:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8004586:	6523      	str	r3, [r4, #80]	@ 0x50
 8004588:	e778      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 800458a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800458c:	b289      	uxth	r1, r1
 800458e:	b951      	cbnz	r1, 80045a6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	9102      	str	r1, [sp, #8]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	9202      	str	r2, [sp, #8]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	9202      	str	r2, [sp, #8]
 800459a:	9a02      	ldr	r2, [sp, #8]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e019      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 80045a6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80045a8:	b289      	uxth	r1, r1
 80045aa:	2901      	cmp	r1, #1
 80045ac:	d149      	bne.n	8004642 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045ae:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80045b2:	d11b      	bne.n	80045ec <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ba:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80045c2:	d00c      	beq.n	80045de <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045cc:	2200      	movs	r2, #0
 80045ce:	9203      	str	r2, [sp, #12]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	9203      	str	r2, [sp, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	9303      	str	r3, [sp, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	e7d3      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	9204      	str	r2, [sp, #16]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	9204      	str	r2, [sp, #16]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	9204      	str	r2, [sp, #16]
 80045e8:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	e7d7      	b.n	800459c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045ec:	2a08      	cmp	r2, #8
 80045ee:	d01c      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x1e6>
 80045f0:	2a20      	cmp	r2, #32
 80045f2:	d01a      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045f4:	2d12      	cmp	r5, #18
 80045f6:	d10d      	bne.n	8004614 <HAL_I2C_EV_IRQHandler+0x1d0>
 80045f8:	2a01      	cmp	r2, #1
 80045fa:	d116      	bne.n	800462a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2200      	movs	r2, #0
 8004606:	9205      	str	r2, [sp, #20]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	9205      	str	r2, [sp, #20]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	9305      	str	r3, [sp, #20]
 8004610:	9b05      	ldr	r3, [sp, #20]
 8004612:	e7e2      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004614:	2a10      	cmp	r2, #16
 8004616:	d8f1      	bhi.n	80045fc <HAL_I2C_EV_IRQHandler+0x1b8>
 8004618:	4986      	ldr	r1, [pc, #536]	@ (8004834 <HAL_I2C_EV_IRQHandler+0x3f0>)
 800461a:	fa41 f202 	asr.w	r2, r1, r2
 800461e:	07d7      	lsls	r7, r2, #31
 8004620:	d4ec      	bmi.n	80045fc <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004628:	e7eb      	b.n	8004602 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004630:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2200      	movs	r2, #0
 8004634:	9206      	str	r2, [sp, #24]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	9206      	str	r2, [sp, #24]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	9206      	str	r2, [sp, #24]
 800463e:	9a06      	ldr	r2, [sp, #24]
 8004640:	e7ac      	b.n	800459c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8004642:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004644:	b289      	uxth	r1, r1
 8004646:	2902      	cmp	r1, #2
 8004648:	d138      	bne.n	80046bc <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800464a:	2a10      	cmp	r2, #16
 800464c:	d803      	bhi.n	8004656 <HAL_I2C_EV_IRQHandler+0x212>
 800464e:	497a      	ldr	r1, [pc, #488]	@ (8004838 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8004650:	40d1      	lsrs	r1, r2
 8004652:	07ce      	lsls	r6, r1, #31
 8004654:	d418      	bmi.n	8004688 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800465c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2100      	movs	r1, #0
 8004660:	9107      	str	r1, [sp, #28]
 8004662:	6959      	ldr	r1, [r3, #20]
 8004664:	9107      	str	r1, [sp, #28]
 8004666:	6999      	ldr	r1, [r3, #24]
 8004668:	9107      	str	r1, [sp, #28]
 800466a:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004672:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	050d      	lsls	r5, r1, #20
 8004678:	d5af      	bpl.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
 800467a:	2a20      	cmp	r2, #32
 800467c:	d81b      	bhi.n	80046b6 <HAL_I2C_EV_IRQHandler+0x272>
 800467e:	2a07      	cmp	r2, #7
 8004680:	d80e      	bhi.n	80046a0 <HAL_I2C_EV_IRQHandler+0x25c>
 8004682:	2a01      	cmp	r2, #1
 8004684:	d1a9      	bne.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
 8004686:	e011      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 800468e:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004690:	2100      	movs	r1, #0
 8004692:	9108      	str	r1, [sp, #32]
 8004694:	6959      	ldr	r1, [r3, #20]
 8004696:	9108      	str	r1, [sp, #32]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	9108      	str	r1, [sp, #32]
 800469c:	9908      	ldr	r1, [sp, #32]
 800469e:	e7e9      	b.n	8004674 <HAL_I2C_EV_IRQHandler+0x230>
 80046a0:	f1a2 0108 	sub.w	r1, r2, #8
 80046a4:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_I2C_EV_IRQHandler+0x3f8>)
 80046a6:	40ca      	lsrs	r2, r1
 80046a8:	07d0      	lsls	r0, r2, #31
 80046aa:	d596      	bpl.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046b2:	605a      	str	r2, [r3, #4]
 80046b4:	e791      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
 80046b6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80046ba:	e7e3      	b.n	8004684 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80046c2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	0509      	lsls	r1, r1, #20
 80046c8:	d510      	bpl.n	80046ec <HAL_I2C_EV_IRQHandler+0x2a8>
 80046ca:	2a20      	cmp	r2, #32
 80046cc:	d816      	bhi.n	80046fc <HAL_I2C_EV_IRQHandler+0x2b8>
 80046ce:	2a07      	cmp	r2, #7
 80046d0:	d806      	bhi.n	80046e0 <HAL_I2C_EV_IRQHandler+0x29c>
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	d10a      	bne.n	80046ec <HAL_I2C_EV_IRQHandler+0x2a8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	e005      	b.n	80046ec <HAL_I2C_EV_IRQHandler+0x2a8>
 80046e0:	f1a2 0108 	sub.w	r1, r2, #8
 80046e4:	4a55      	ldr	r2, [pc, #340]	@ (800483c <HAL_I2C_EV_IRQHandler+0x3f8>)
 80046e6:	40ca      	lsrs	r2, r1
 80046e8:	07d2      	lsls	r2, r2, #31
 80046ea:	d4f4      	bmi.n	80046d6 <HAL_I2C_EV_IRQHandler+0x292>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ec:	2200      	movs	r2, #0
 80046ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046fa:	e76e      	b.n	80045da <HAL_I2C_EV_IRQHandler+0x196>
 80046fc:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8004700:	e7e8      	b.n	80046d4 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2200      	movs	r2, #0
 8004704:	920a      	str	r2, [sp, #40]	@ 0x28
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	920a      	str	r2, [sp, #40]	@ 0x28
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	930a      	str	r3, [sp, #40]	@ 0x28
 800470e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004710:	e6b4      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004712:	077f      	lsls	r7, r7, #29
 8004714:	f140 8094 	bpl.w	8004840 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004718:	685e      	ldr	r6, [r3, #4]
 800471a:	0536      	lsls	r6, r6, #20
 800471c:	f53f aeae 	bmi.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004720:	0607      	lsls	r7, r0, #24
 8004722:	f000 0604 	and.w	r6, r0, #4
 8004726:	d53e      	bpl.n	80047a6 <HAL_I2C_EV_IRQHandler+0x362>
 8004728:	0550      	lsls	r0, r2, #21
 800472a:	d53c      	bpl.n	80047a6 <HAL_I2C_EV_IRQHandler+0x362>
 800472c:	2e00      	cmp	r6, #0
 800472e:	d13d      	bne.n	80047ac <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004730:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004734:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004736:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800473a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800473c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800473e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004740:	b9c5      	cbnz	r5, 8004774 <HAL_I2C_EV_IRQHandler+0x330>
 8004742:	2a21      	cmp	r2, #33	@ 0x21
 8004744:	d118      	bne.n	8004778 <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004746:	2808      	cmp	r0, #8
 8004748:	d058      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
 800474a:	2820      	cmp	r0, #32
 800474c:	d056      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
 800474e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8004752:	d053      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800475a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800475c:	2311      	movs	r3, #17
 800475e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	2300      	movs	r3, #0
 8004762:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004766:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004768:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 800476a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800476e:	f7ff fcff 	bl	8004170 <HAL_I2C_MasterTxCpltCallback>
 8004772:	e683      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004774:	2a21      	cmp	r2, #33	@ 0x21
 8004776:	d005      	beq.n	8004784 <HAL_I2C_EV_IRQHandler+0x340>
 8004778:	2940      	cmp	r1, #64	@ 0x40
 800477a:	f47f ae7f 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800477e:	2a22      	cmp	r2, #34	@ 0x22
 8004780:	f47f ae7c 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8004784:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004786:	b292      	uxth	r2, r2
 8004788:	b91a      	cbnz	r2, 8004792 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004790:	e6ad      	b.n	80044ee <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004792:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8004796:	2a40      	cmp	r2, #64	@ 0x40
 8004798:	d116      	bne.n	80047c8 <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800479a:	4620      	mov	r0, r4
}
 800479c:	b00f      	add	sp, #60	@ 0x3c
 800479e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047a2:	f7ff bcec 	b.w	800417e <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	f43f ae68 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 80047ac:	0597      	lsls	r7, r2, #22
 80047ae:	f57f ae65 	bpl.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047b2:	2921      	cmp	r1, #33	@ 0x21
 80047b4:	d139      	bne.n	800482a <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047b8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80047bc:	2a21      	cmp	r2, #33	@ 0x21
 80047be:	f47f ae5d 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80047c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80047c4:	b292      	uxth	r2, r2
 80047c6:	b14a      	cbz	r2, 80047dc <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80047ca:	f812 1b01 	ldrb.w	r1, [r2], #1
 80047ce:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80047d0:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80047d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 80047da:	e64f      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047dc:	2908      	cmp	r1, #8
 80047de:	d00d      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
 80047e0:	2920      	cmp	r1, #32
 80047e2:	d00b      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
 80047e4:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80047e8:	d008      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80047f0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047f2:	2311      	movs	r3, #17
 80047f4:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f6:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 80047fa:	e7b4      	b.n	8004766 <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047fc:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047fe:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004800:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004804:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800480e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004810:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004814:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004818:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004820:	2a40      	cmp	r2, #64	@ 0x40
 8004822:	d1a4      	bne.n	800476e <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004824:	f7ff fcaa 	bl	800417c <HAL_I2C_MemTxCpltCallback>
 8004828:	e628      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800482a:	2d40      	cmp	r5, #64	@ 0x40
 800482c:	f47f ae26 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004830:	e7b3      	b.n	800479a <HAL_I2C_EV_IRQHandler+0x356>
 8004832:	bf00      	nop
 8004834:	fffeffeb 	.word	0xfffeffeb
 8004838:	00010014 	.word	0x00010014
 800483c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	050e      	lsls	r6, r1, #20
 8004844:	f53f ae1a 	bmi.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004848:	0645      	lsls	r5, r0, #25
 800484a:	f000 0104 	and.w	r1, r0, #4
 800484e:	f140 8086 	bpl.w	800495e <HAL_I2C_EV_IRQHandler+0x51a>
 8004852:	0550      	lsls	r0, r2, #21
 8004854:	f140 8083 	bpl.w	800495e <HAL_I2C_EV_IRQHandler+0x51a>
 8004858:	2900      	cmp	r1, #0
 800485a:	f040 8083 	bne.w	8004964 <HAL_I2C_EV_IRQHandler+0x520>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800485e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8004862:	2a22      	cmp	r2, #34	@ 0x22
 8004864:	f47f ae0a 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8004868:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 800486a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800486c:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800486e:	2a03      	cmp	r2, #3
 8004870:	d914      	bls.n	800489c <HAL_I2C_EV_IRQHandler+0x458>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004876:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004878:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800487e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004880:	3b01      	subs	r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004886:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b03      	cmp	r3, #3
 800488c:	f47f adf6 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	6853      	ldr	r3, [r2, #4]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004898:	6053      	str	r3, [r2, #4]
 800489a:	e5ef      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800489c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800489e:	2d02      	cmp	r5, #2
 80048a0:	f43f af73 	beq.w	800478a <HAL_I2C_EV_IRQHandler+0x346>
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	f63f af70 	bhi.w	800478a <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 80048aa:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048ac:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80048b0:	4a78      	ldr	r2, [pc, #480]	@ (8004a94 <HAL_I2C_EV_IRQHandler+0x650>)
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	fbb2 f2f1 	udiv	r2, r2, r1
 80048b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80048bc:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 80048be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048c0:	3a01      	subs	r2, #1
 80048c2:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 80048c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048c6:	b9d1      	cbnz	r1, 80048fe <HAL_I2C_EV_IRQHandler+0x4ba>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 80048ca:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	f042 0220 	orr.w	r2, r2, #32
 80048d0:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80048de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80048e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	2320      	movs	r3, #32
 80048f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80048f8:	f7ff fc9a 	bl	8004230 <HAL_I2C_ErrorCallback>
 80048fc:	e5be      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8004904:	d1db      	bne.n	80048be <HAL_I2C_EV_IRQHandler+0x47a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800490c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004914:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	6919      	ldr	r1, [r3, #16]
 8004918:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800491a:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 800491c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800491e:	3301      	adds	r3, #1
 8004920:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004922:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004924:	3b01      	subs	r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800492a:	2320      	movs	r3, #32
 800492c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004930:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d104      	bne.n	8004946 <HAL_I2C_EV_IRQHandler+0x502>
          hi2c->PreviousState = I2C_STATE_NONE;
 800493c:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff fc75 	bl	800422e <HAL_I2C_MemRxCpltCallback>
 8004944:	e59a      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004946:	2808      	cmp	r0, #8
 8004948:	d001      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x50a>
 800494a:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800494c:	d101      	bne.n	8004952 <HAL_I2C_EV_IRQHandler+0x50e>
        hi2c->PreviousState = I2C_STATE_NONE;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_I2C_EV_IRQHandler+0x510>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004952:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004954:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004956:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004958:	f7ff fc0b 	bl	8004172 <HAL_I2C_MasterRxCpltCallback>
 800495c:	e58e      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495e:	2900      	cmp	r1, #0
 8004960:	f43f ad8c 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004964:	0592      	lsls	r2, r2, #22
 8004966:	f57f ad89 	bpl.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800496a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 800496c:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800496e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8004970:	b280      	uxth	r0, r0
 8004972:	2804      	cmp	r0, #4
 8004974:	d109      	bne.n	800498a <HAL_I2C_EV_IRQHandler+0x546>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8004982:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004984:	3301      	adds	r3, #1
 8004986:	6263      	str	r3, [r4, #36]	@ 0x24
 8004988:	e723      	b.n	80047d2 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 800498a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800498c:	b280      	uxth	r0, r0
 800498e:	2803      	cmp	r0, #3
 8004990:	d10c      	bne.n	80049ac <HAL_I2C_EV_IRQHandler+0x568>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004992:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004994:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004996:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 800499a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800499c:	d0ef      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x53a>
 800499e:	2a02      	cmp	r2, #2
 80049a0:	d0ed      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x53a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	e7e8      	b.n	800497e <HAL_I2C_EV_IRQHandler+0x53a>
  else if (hi2c->XferCount == 2U)
 80049ac:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80049ae:	b280      	uxth	r0, r0
 80049b0:	2802      	cmp	r0, #2
 80049b2:	d1e4      	bne.n	800497e <HAL_I2C_EV_IRQHandler+0x53a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049b4:	2a04      	cmp	r2, #4
 80049b6:	d033      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x5dc>
 80049b8:	d807      	bhi.n	80049ca <HAL_I2C_EV_IRQHandler+0x586>
 80049ba:	2a01      	cmp	r2, #1
 80049bc:	d007      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x58a>
 80049be:	2a02      	cmp	r2, #2
 80049c0:	d02e      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x5dc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80049c8:	e004      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x590>
 80049ca:	2a10      	cmp	r2, #16
 80049cc:	d1f9      	bne.n	80049c2 <HAL_I2C_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80049da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80049dc:	1c4b      	adds	r3, r1, #1
 80049de:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80049e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 80049ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049f0:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80049f2:	3301      	adds	r3, #1
 80049f4:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80049f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049fe:	684b      	ldr	r3, [r1, #4]
 8004a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a04:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	2320      	movs	r3, #32
 8004a08:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a0c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a1a:	d105      	bne.n	8004a28 <HAL_I2C_EV_IRQHandler+0x5e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a1e:	e78e      	b.n	800493e <HAL_I2C_EV_IRQHandler+0x4fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8004a26:	e7d5      	b.n	80049d4 <HAL_I2C_EV_IRQHandler+0x590>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a28:	2a08      	cmp	r2, #8
 8004a2a:	d090      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x50a>
 8004a2c:	2a20      	cmp	r2, #32
 8004a2e:	e78d      	b.n	800494c <HAL_I2C_EV_IRQHandler+0x508>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a30:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004a32:	b310      	cbz	r0, 8004a7a <HAL_I2C_EV_IRQHandler+0x636>
  uint32_t sr2itflags               = 0U;
 8004a34:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a36:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a38:	0787      	lsls	r7, r0, #30
 8004a3a:	d52d      	bpl.n	8004a98 <HAL_I2C_EV_IRQHandler+0x654>
 8004a3c:	0596      	lsls	r6, r2, #22
 8004a3e:	d52b      	bpl.n	8004a98 <HAL_I2C_EV_IRQHandler+0x654>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a40:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a42:	b102      	cbz	r2, 8004a46 <HAL_I2C_EV_IRQHandler+0x602>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a44:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a46:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8004a4a:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8004a4e:	2a28      	cmp	r2, #40	@ 0x28
 8004a50:	d116      	bne.n	8004a80 <HAL_I2C_EV_IRQHandler+0x63c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a52:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a54:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8004a5c:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a60:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a64:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a66:	bf54      	ite	pl
 8004a68:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a6a:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a6c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 8004a70:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a74:	f7ff fb80 	bl	8004178 <HAL_I2C_AddrCallback>
 8004a78:	e500      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a7a:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a7c:	6958      	ldr	r0, [r3, #20]
 8004a7e:	e7db      	b.n	8004a38 <HAL_I2C_EV_IRQHandler+0x5f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a80:	2200      	movs	r2, #0
 8004a82:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a84:	6959      	ldr	r1, [r3, #20]
 8004a86:	910c      	str	r1, [sp, #48]	@ 0x30
 8004a88:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8004a8a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a92:	e4f3      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004a94:	20000018 	.word	0x20000018
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a98:	06c6      	lsls	r6, r0, #27
 8004a9a:	f140 80b1 	bpl.w	8004c00 <HAL_I2C_EV_IRQHandler+0x7bc>
 8004a9e:	0595      	lsls	r5, r2, #22
 8004aa0:	f140 80ae 	bpl.w	8004c00 <HAL_I2C_EV_IRQHandler+0x7bc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa4:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aaa:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ab0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	920d      	str	r2, [sp, #52]	@ 0x34
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	920d      	str	r2, [sp, #52]	@ 0x34
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aca:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	0510      	lsls	r0, r2, #20
 8004ad0:	d520      	bpl.n	8004b14 <HAL_I2C_EV_IRQHandler+0x6d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ad2:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 8004ad6:	2a22      	cmp	r2, #34	@ 0x22
 8004ad8:	d14a      	bne.n	8004b70 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ada:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004adc:	6802      	ldr	r2, [r0, #0]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	b292      	uxth	r2, r2
 8004ae2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8004ae4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	b11a      	cbz	r2, 8004af2 <HAL_I2C_EV_IRQHandler+0x6ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004aec:	f042 0204 	orr.w	r2, r2, #4
 8004af0:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004afa:	f7fe fbeb 	bl	80032d4 <HAL_DMA_GetState>
 8004afe:	2801      	cmp	r0, #1
 8004b00:	d008      	beq.n	8004b14 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b02:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004b04:	4b79      	ldr	r3, [pc, #484]	@ (8004cec <HAL_I2C_EV_IRQHandler+0x8a8>)
 8004b06:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b08:	f7fe fb9e 	bl	8003248 <HAL_DMA_Abort_IT>
 8004b0c:	b110      	cbz	r0, 8004b14 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b0e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004b12:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004b14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	b313      	cbz	r3, 8004b60 <HAL_I2C_EV_IRQHandler+0x71c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	0751      	lsls	r1, r2, #29
 8004b20:	d509      	bpl.n	8004b36 <HAL_I2C_EV_IRQHandler+0x6f2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b26:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004b2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	0652      	lsls	r2, r2, #25
 8004b3c:	d509      	bpl.n	8004b52 <HAL_I2C_EV_IRQHandler+0x70e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b42:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004b4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004b52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	b11b      	cbz	r3, 8004b60 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b62:	b313      	cbz	r3, 8004baa <HAL_I2C_EV_IRQHandler+0x766>
    I2C_ITError(hi2c);
 8004b64:	4620      	mov	r0, r4
}
 8004b66:	b00f      	add	sp, #60	@ 0x3c
 8004b68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004b6c:	f7ff bbc2 	b.w	80042f4 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b70:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004b72:	6802      	ldr	r2, [r0, #0]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	b292      	uxth	r2, r2
 8004b78:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8004b7a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	b11a      	cbz	r2, 8004b88 <HAL_I2C_EV_IRQHandler+0x744>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004b82:	f042 0204 	orr.w	r2, r2, #4
 8004b86:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b8e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b90:	f7fe fba0 	bl	80032d4 <HAL_DMA_GetState>
 8004b94:	2801      	cmp	r0, #1
 8004b96:	d0bd      	beq.n	8004b14 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b98:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004b9a:	4b54      	ldr	r3, [pc, #336]	@ (8004cec <HAL_I2C_EV_IRQHandler+0x8a8>)
 8004b9c:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b9e:	f7fe fb53 	bl	8003248 <HAL_DMA_Abort_IT>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d0b6      	beq.n	8004b14 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ba6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004ba8:	e7b2      	b.n	8004b10 <HAL_I2C_EV_IRQHandler+0x6cc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004baa:	2d2a      	cmp	r5, #42	@ 0x2a
 8004bac:	d106      	bne.n	8004bbc <HAL_I2C_EV_IRQHandler+0x778>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bae:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb0:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb8:	f7ff fadd 	bl	8004176 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bbc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004bc0:	2b28      	cmp	r3, #40	@ 0x28
 8004bc2:	d10c      	bne.n	8004bde <HAL_I2C_EV_IRQHandler+0x79a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf0 <HAL_I2C_EV_IRQHandler+0x8ac>)
      hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bca:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bcc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bce:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bd8:	f7ff facf 	bl	800417a <HAL_I2C_ListenCpltCallback>
 8004bdc:	e44e      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004be0:	2b22      	cmp	r3, #34	@ 0x22
 8004be2:	d002      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x7a6>
 8004be4:	2d22      	cmp	r5, #34	@ 0x22
 8004be6:	f47f ac49 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bea:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff fabc 	bl	8004176 <HAL_I2C_SlaveRxCpltCallback>
 8004bfe:	e43d      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c00:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8004c04:	2921      	cmp	r1, #33	@ 0x21
 8004c06:	f000 0504 	and.w	r5, r0, #4
 8004c0a:	d135      	bne.n	8004c78 <HAL_I2C_EV_IRQHandler+0x834>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c0c:	0607      	lsls	r7, r0, #24
 8004c0e:	d527      	bpl.n	8004c60 <HAL_I2C_EV_IRQHandler+0x81c>
 8004c10:	0556      	lsls	r6, r2, #21
 8004c12:	d525      	bpl.n	8004c60 <HAL_I2C_EV_IRQHandler+0x81c>
 8004c14:	bb3d      	cbnz	r5, 8004c66 <HAL_I2C_EV_IRQHandler+0x822>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8004c1a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c1c:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	2a00      	cmp	r2, #0
 8004c22:	f43f ac2b 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c26:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004c28:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c2c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8004c2e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004c30:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004c32:	3a01      	subs	r2, #1
 8004c34:	b292      	uxth	r2, r2
 8004c36:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c38:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	f47f ac1d 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004c42:	2829      	cmp	r0, #41	@ 0x29
 8004c44:	f47f ac1a 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c48:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c4a:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c52:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c54:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c5a:	f7ff fa8b 	bl	8004174 <HAL_I2C_SlaveTxCpltCallback>
 8004c5e:	e40d      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	f43f ac0b 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004c66:	0595      	lsls	r5, r2, #22
 8004c68:	f57f ac08 	bpl.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004c6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	f43f ac03 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004c76:	e5a7      	b.n	80047c8 <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c78:	0640      	lsls	r0, r0, #25
 8004c7a:	d527      	bpl.n	8004ccc <HAL_I2C_EV_IRQHandler+0x888>
 8004c7c:	0551      	lsls	r1, r2, #21
 8004c7e:	d525      	bpl.n	8004ccc <HAL_I2C_EV_IRQHandler+0x888>
 8004c80:	bb3d      	cbnz	r5, 8004cd2 <HAL_I2C_EV_IRQHandler+0x88e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c82:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8004c86:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c88:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8004c8a:	b289      	uxth	r1, r1
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	f43f abf5 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c92:	6919      	ldr	r1, [r3, #16]
 8004c94:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c96:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8004c98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004c9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ca6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f47f abe6 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004cb0:	2a2a      	cmp	r2, #42	@ 0x2a
 8004cb2:	f47f abe3 	bne.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	6853      	ldr	r3, [r2, #4]
 8004cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cbe:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cc0:	2322      	movs	r3, #34	@ 0x22
 8004cc2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cc4:	2328      	movs	r3, #40	@ 0x28
 8004cc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8004cca:	e795      	b.n	8004bf8 <HAL_I2C_EV_IRQHandler+0x7b4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	f43f abd5 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
 8004cd2:	0592      	lsls	r2, r2, #22
 8004cd4:	f57f abd2 	bpl.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004cd8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	f43f abcd 	beq.w	800447c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e64b      	b.n	8004982 <HAL_I2C_EV_IRQHandler+0x53e>
 8004cea:	bf00      	nop
 8004cec:	08004235 	.word	0x08004235
 8004cf0:	ffff0000 	.word	0xffff0000

08004cf4 <HAL_I2C_ER_IRQHandler>:
{
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cf6:	6803      	ldr	r3, [r0, #0]
{
 8004cf8:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cfa:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004cfc:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cfe:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d02:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d06:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d08:	d00a      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x2c>
 8004d0a:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d10:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 8004d14:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d16:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004d1e:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d20:	05b8      	lsls	r0, r7, #22
 8004d22:	d506      	bpl.n	8004d32 <HAL_I2C_ER_IRQHandler+0x3e>
 8004d24:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d26:	bf42      	ittt	mi
 8004d28:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8004d2c:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d30:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d32:	0578      	lsls	r0, r7, #21
 8004d34:	d536      	bpl.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
 8004d36:	05f1      	lsls	r1, r6, #23
 8004d38:	d534      	bpl.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 8004d3a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8004d3c:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d40:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8004d42:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
    tmp2 = hi2c->XferCount;
 8004d46:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8004d48:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d4a:	d15f      	bne.n	8004e0c <HAL_I2C_ER_IRQHandler+0x118>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d15d      	bne.n	8004e0c <HAL_I2C_ER_IRQHandler+0x118>
 8004d50:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 8004d54:	2821      	cmp	r0, #33	@ 0x21
 8004d56:	d004      	beq.n	8004d62 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004d58:	2928      	cmp	r1, #40	@ 0x28
 8004d5a:	d157      	bne.n	8004e0c <HAL_I2C_ER_IRQHandler+0x118>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004d5c:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 8004d60:	d154      	bne.n	8004e0c <HAL_I2C_ER_IRQHandler+0x118>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d62:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d68:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d6a:	2908      	cmp	r1, #8
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_ER_IRQHandler+0x7e>
 8004d6e:	2920      	cmp	r1, #32
 8004d70:	d12a      	bne.n	8004dc8 <HAL_I2C_ER_IRQHandler+0xd4>
 8004d72:	2a28      	cmp	r2, #40	@ 0x28
 8004d74:	d128      	bne.n	8004dc8 <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d76:	4a2e      	ldr	r2, [pc, #184]	@ (8004e30 <HAL_I2C_ER_IRQHandler+0x13c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d78:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d90:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d92:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d94:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d96:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d98:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004da0:	f7ff f9eb 	bl	800417a <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004da4:	053a      	lsls	r2, r7, #20
 8004da6:	d53f      	bpl.n	8004e28 <HAL_I2C_ER_IRQHandler+0x134>
 8004da8:	05f3      	lsls	r3, r6, #23
 8004daa:	d53d      	bpl.n	8004e28 <HAL_I2C_ER_IRQHandler+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dac:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004db0:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8004db2:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004db6:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8004db8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004dba:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8004dbc:	432b      	orrs	r3, r5
 8004dbe:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004dc4:	f7ff ba96 	b.w	80042f4 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004dc8:	2a21      	cmp	r2, #33	@ 0x21
 8004dca:	d11b      	bne.n	8004e04 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dcc:	4918      	ldr	r1, [pc, #96]	@ (8004e30 <HAL_I2C_ER_IRQHandler+0x13c>)
 8004dce:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd0:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dd2:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dda:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004de4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dea:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df2:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 8004df8:	bf48      	it	mi
 8004dfa:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff f9b9 	bl	8004174 <HAL_I2C_SlaveTxCpltCallback>
 8004e02:	e7cf      	b.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e08:	615a      	str	r2, [r3, #20]
 8004e0a:	e7cb      	b.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e10:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e12:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004e14:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_ER_IRQHandler+0x12a>
 8004e1a:	2a40      	cmp	r2, #64	@ 0x40
 8004e1c:	d1c2      	bne.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e7bd      	b.n	8004da4 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d1c5      	bne.n	8004db8 <HAL_I2C_ER_IRQHandler+0xc4>
}
 8004e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e36:	4604      	mov	r4, r0
 8004e38:	b1e0      	cbz	r0, 8004e74 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e3a:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8004e3e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004e42:	b91b      	cbnz	r3, 8004e4c <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e44:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e48:	f004 f9b2 	bl	80091b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004e52:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e54:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8004e56:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8004e58:	f855 0b04 	ldr.w	r0, [r5], #4
 8004e5c:	f002 f844 	bl	8006ee8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e60:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	f002 f82f 	bl	8006ec8 <USB_CoreInit>
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	b128      	cbz	r0, 8004e7a <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8004e74:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8004e76:	4628      	mov	r0, r5
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	f002 f83e 	bl	8006efc <USB_SetCurrentMode>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1f4      	bne.n	8004e6e <HAL_PCD_Init+0x3a>
 8004e84:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8004e86:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e88:	7926      	ldrb	r6, [r4, #4]
 8004e8a:	f104 0310 	add.w	r3, r4, #16
 8004e8e:	b2c1      	uxtb	r1, r0
 8004e90:	428e      	cmp	r6, r1
 8004e92:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004e96:	d818      	bhi.n	8004eca <HAL_PCD_Init+0x96>
 8004e98:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8004e9a:	460a      	mov	r2, r1
 8004e9c:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8004ea0:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea2:	4286      	cmp	r6, r0
 8004ea4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004ea8:	d81b      	bhi.n	8004ee2 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004eaa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	f002 f826 	bl	8006f00 <USB_DevInit>
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d1d9      	bne.n	8004e6e <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8004eba:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8004ebc:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ebe:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ec0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ec4:	f002 fad2 	bl	800746c <USB_DevDisconnect>
  return HAL_OK;
 8004ec8:	e7d5      	b.n	8004e76 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004eca:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8004ece:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8004ed2:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ed6:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eda:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ede:	3001      	adds	r0, #1
 8004ee0:	e7d5      	b.n	8004e8e <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ee2:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8004ee6:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8004eea:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eee:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ef2:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef6:	3101      	adds	r1, #1
 8004ef8:	e7d2      	b.n	8004ea0 <HAL_PCD_Init+0x6c>

08004efa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004efa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8004efc:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8004f00:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d010      	beq.n	8004f28 <HAL_PCD_Start+0x2e>
 8004f06:	2501      	movs	r5, #1
 8004f08:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004f0c:	6800      	ldr	r0, [r0, #0]
 8004f0e:	f001 ffe2 	bl	8006ed6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004f12:	4629      	mov	r1, r5
 8004f14:	4620      	mov	r0, r4
 8004f16:	f004 fa5a 	bl	80093ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	f002 faa4 	bl	8007468 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004f28:	2002      	movs	r0, #2
 8004f2a:	e7fc      	b.n	8004f26 <HAL_PCD_Start+0x2c>

08004f2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f2c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004f2e:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8004f32:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004f34:	2a01      	cmp	r2, #1
 8004f36:	d00a      	beq.n	8004f4e <HAL_PCD_SetAddress+0x22>
 8004f38:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8004f3a:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8004f3c:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f40:	6800      	ldr	r0, [r0, #0]
 8004f42:	f002 fa8b 	bl	800745c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f46:	2000      	movs	r0, #0
 8004f48:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8004f4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004f4e:	2002      	movs	r0, #2
 8004f50:	e7fc      	b.n	8004f4c <HAL_PCD_SetAddress+0x20>
	...

08004f54 <HAL_PCD_IRQHandler>:
{
 8004f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	4604      	mov	r4, r0
 8004f5a:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f002 fa87 	bl	8007470 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004f62:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8004f66:	f000 844f 	beq.w	8005808 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8004f6a:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f6c:	4ec6      	ldr	r6, [pc, #792]	@ (8005288 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8004f74:	041f      	lsls	r7, r3, #16
 8004f76:	d402      	bmi.n	8004f7e <HAL_PCD_IRQHandler+0x2a>
}
 8004f78:	b005      	add	sp, #20
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004f7e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8004f82:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8004f86:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8004f88:	f040 80c0 	bne.w	800510c <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f8c:	f011 0110 	ands.w	r1, r1, #16
 8004f90:	d126      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f92:	8803      	ldrh	r3, [r0, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4033      	ands	r3, r6
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004fa2:	7c22      	ldrb	r2, [r4, #16]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004faa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fae:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8004fb2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8004fb8:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fba:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fbc:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8004fbe:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fc0:	f004 f92d 	bl	800921e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fc4:	7b63      	ldrb	r3, [r4, #13]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0d1      	beq.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
 8004fca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004fcc:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d1cd      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004fd2:	7b63      	ldrb	r3, [r4, #13]
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd8:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004fdc:	7362      	strb	r2, [r4, #13]
 8004fde:	e7c6      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fe0:	8807      	ldrh	r7, [r0, #0]
 8004fe2:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004fe4:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8004fe8:	d021      	beq.n	800502e <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004fee:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004ffc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005000:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8005004:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005008:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800500c:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8005010:	f002 fc79 	bl	8007906 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005014:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005016:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005018:	8813      	ldrh	r3, [r2, #0]
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	051b      	lsls	r3, r3, #20
 8005020:	0d1b      	lsrs	r3, r3, #20
 8005022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005026:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005028:	f004 f8ea 	bl	8009200 <HAL_PCD_SetupStageCallback>
 800502c:	e79f      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800502e:	0419      	lsls	r1, r3, #16
 8005030:	d59d      	bpl.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005032:	8803      	ldrh	r3, [r0, #0]
 8005034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005038:	051b      	lsls	r3, r3, #20
 800503a:	0d1b      	lsrs	r3, r3, #20
 800503c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005040:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005042:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005046:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800504a:	b29b      	uxth	r3, r3
 800504c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005050:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005054:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8005058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005060:	b18b      	cbz	r3, 8005086 <HAL_PCD_IRQHandler+0x132>
 8005062:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8005066:	b171      	cbz	r1, 8005086 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005068:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 800506c:	f002 fc4b 	bl	8007906 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8005070:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8005074:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005078:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800507a:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800507c:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800507e:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005082:	f004 f8c3 	bl	800920c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005086:	6821      	ldr	r1, [r4, #0]
 8005088:	880a      	ldrh	r2, [r1, #0]
 800508a:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800508c:	0512      	lsls	r2, r2, #20
 800508e:	f53f af6e 	bmi.w	8004f6e <HAL_PCD_IRQHandler+0x1a>
 8005092:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005096:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800509a:	f43f af68 	beq.w	8004f6e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800509e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80050a2:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 80050a6:	b292      	uxth	r2, r2
 80050a8:	5a83      	ldrh	r3, [r0, r2]
 80050aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ae:	5283      	strh	r3, [r0, r2]
 80050b0:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 80050b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80050b6:	d91d      	bls.n	80050f4 <HAL_PCD_IRQHandler+0x1a0>
 80050b8:	095f      	lsrs	r7, r3, #5
 80050ba:	06db      	lsls	r3, r3, #27
 80050bc:	5a83      	ldrh	r3, [r0, r2]
 80050be:	bf08      	it	eq
 80050c0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80050ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80050d6:	880b      	ldrh	r3, [r1, #0]
 80050d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f0:	800b      	strh	r3, [r1, #0]
 80050f2:	e73c      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050f4:	b90b      	cbnz	r3, 80050fa <HAL_PCD_IRQHandler+0x1a6>
 80050f6:	5a83      	ldrh	r3, [r0, r2]
 80050f8:	e7e7      	b.n	80050ca <HAL_PCD_IRQHandler+0x176>
 80050fa:	085f      	lsrs	r7, r3, #1
 80050fc:	07db      	lsls	r3, r3, #31
 80050fe:	5a83      	ldrh	r3, [r0, r2]
 8005100:	bf48      	it	mi
 8005102:	3701      	addmi	r7, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800510a:	e7e2      	b.n	80050d2 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800510c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005110:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005112:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005116:	f140 80f6 	bpl.w	8005306 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800511a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800511e:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	051b      	lsls	r3, r3, #20
 8005128:	0d1b      	lsrs	r3, r3, #20
 800512a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800512e:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8005132:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8005136:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 800513a:	b9bb      	cbnz	r3, 800516c <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800513c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005140:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8005144:	b29b      	uxth	r3, r3
 8005146:	3306      	adds	r3, #6
 8005148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800514c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8005150:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	f000 80ba 	beq.w	80052d0 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800515c:	464b      	mov	r3, r9
 800515e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005162:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8005166:	f002 fbce 	bl	8007906 <USB_ReadPMA>
 800516a:	e0b1      	b.n	80052d0 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 800516c:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005170:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8005174:	2b02      	cmp	r3, #2
 8005176:	f040 8089 	bne.w	800528c <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800517a:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 800517e:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8005182:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005186:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 800518a:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800518e:	44d9      	add	r9, fp
 8005190:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005194:	d03c      	beq.n	8005210 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005196:	f109 0902 	add.w	r9, r9, #2
 800519a:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 800519e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 80051a2:	4599      	cmp	r9, r3
 80051a4:	d913      	bls.n	80051ce <HAL_PCD_IRQHandler+0x27a>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80051cc:	e005      	b.n	80051da <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 80051ce:	eba3 0309 	sub.w	r3, r3, r9
 80051d2:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0e8      	beq.n	80051ac <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051da:	f1bc 0f00 	cmp.w	ip, #0
 80051de:	d00d      	beq.n	80051fc <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	d066      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005202:	2128      	movs	r1, #40	@ 0x28
 8005204:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005208:	464b      	mov	r3, r9
 800520a:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 800520e:	e7a8      	b.n	8005162 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005210:	f109 0906 	add.w	r9, r9, #6
 8005214:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8005218:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 800521c:	4599      	cmp	r9, r3
 800521e:	d912      	bls.n	8005246 <HAL_PCD_IRQHandler+0x2f2>
 8005220:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005224:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005228:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800522c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800523c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005240:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8005244:	e005      	b.n	8005252 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8005246:	eba3 0309 	sub.w	r3, r3, r9
 800524a:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0e8      	beq.n	8005224 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005252:	f1bc 0f00 	cmp.w	ip, #0
 8005256:	d10d      	bne.n	8005274 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005258:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800526c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005270:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8005274:	f1b9 0f00 	cmp.w	r9, #0
 8005278:	d02a      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800527a:	2128      	movs	r1, #40	@ 0x28
 800527c:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005280:	464b      	mov	r3, r9
 8005282:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8005286:	e76c      	b.n	8005162 <HAL_PCD_IRQHandler+0x20e>
 8005288:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800528c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052a8:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 80052ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80052ba:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052bc:	d054      	beq.n	8005368 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052be:	3202      	adds	r2, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80052c6:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80052ca:	f1b9 0f00 	cmp.w	r9, #0
 80052ce:	d19b      	bne.n	8005208 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 80052d0:	fb05 f107 	mul.w	r1, r5, r7
 80052d4:	1863      	adds	r3, r4, r1
 80052d6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80052da:	444a      	add	r2, r9
 80052dc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80052e0:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80052e4:	444a      	add	r2, r9
 80052e6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80052ea:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80052ee:	b11a      	cbz	r2, 80052f8 <HAL_PCD_IRQHandler+0x3a4>
 80052f0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80052f4:	4599      	cmp	r9, r3
 80052f6:	d241      	bcs.n	800537c <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80052f8:	fb05 4307 	mla	r3, r5, r7, r4
 80052fc:	4620      	mov	r0, r4
 80052fe:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8005302:	f003 ff83 	bl	800920c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005306:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800530a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800530c:	f43f ae2f 	beq.w	8004f6e <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005310:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8005314:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005318:	b29b      	uxth	r3, r3
 800531a:	4033      	ands	r3, r6
 800531c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005320:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8005324:	eb04 030c 	add.w	r3, r4, ip
 8005328:	7cda      	ldrb	r2, [r3, #19]
 800532a:	2a01      	cmp	r2, #1
 800532c:	d156      	bne.n	80053dc <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 800532e:	2100      	movs	r1, #0
 8005330:	fb07 5205 	mla	r2, r7, r5, r5
 8005334:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8005336:	7f1a      	ldrb	r2, [r3, #28]
 8005338:	b392      	cbz	r2, 80053a0 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800533a:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800533e:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005340:	d036      	beq.n	80053b0 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005342:	bb12      	cbnz	r2, 800538a <HAL_PCD_IRQHandler+0x436>
 8005344:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005348:	7c1b      	ldrb	r3, [r3, #16]
 800534a:	b292      	uxth	r2, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005352:	4410      	add	r0, r2
 8005354:	5a1a      	ldrh	r2, [r3, r0]
 8005356:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800535a:	521a      	strh	r2, [r3, r0]
 800535c:	5a1a      	ldrh	r2, [r3, r0]
 800535e:	b292      	uxth	r2, r2
 8005360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005364:	521a      	strh	r2, [r3, r0]
 8005366:	e01b      	b.n	80053a0 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005368:	3206      	adds	r2, #6
 800536a:	4413      	add	r3, r2
 800536c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8005370:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8005374:	f1b9 0f00 	cmp.w	r9, #0
 8005378:	d0aa      	beq.n	80052d0 <HAL_PCD_IRQHandler+0x37c>
 800537a:	e781      	b.n	8005280 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 800537c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	4421      	add	r1, r4
 8005384:	f002 f88a 	bl	800749c <USB_EPStartXfer>
 8005388:	e7bd      	b.n	8005306 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800538a:	2a01      	cmp	r2, #1
 800538c:	d108      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x44c>
 800538e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005392:	7c1b      	ldrb	r3, [r3, #16]
 8005394:	b292      	uxth	r2, r2
 8005396:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	4410      	add	r0, r2
 800539e:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a0:	2328      	movs	r3, #40	@ 0x28
 80053a2:	fb03 4307 	mla	r3, r3, r7, r4
 80053a6:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053a8:	4620      	mov	r0, r4
 80053aa:	f003 ff38 	bl	800921e <HAL_PCD_DataInStageCallback>
 80053ae:	e5de      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053b0:	b93a      	cbnz	r2, 80053c2 <HAL_PCD_IRQHandler+0x46e>
 80053b2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80053b6:	7c1b      	ldrb	r3, [r3, #16]
 80053b8:	b292      	uxth	r2, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80053c0:	e7c7      	b.n	8005352 <HAL_PCD_IRQHandler+0x3fe>
 80053c2:	2a01      	cmp	r2, #1
 80053c4:	d1ec      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x44c>
 80053c6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80053ca:	7c1b      	ldrb	r3, [r3, #16]
 80053cc:	b292      	uxth	r2, r2
 80053ce:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	4410      	add	r0, r2
 80053d6:	f823 8000 	strh.w	r8, [r3, r0]
 80053da:	e7e1      	b.n	80053a0 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053dc:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053de:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 80053e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053e4:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80053e8:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053ec:	d11b      	bne.n	8005426 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053ee:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 80053f2:	b2bf      	uxth	r7, r7
 80053f4:	4457      	add	r7, sl
 80053f6:	3702      	adds	r7, #2
 80053f8:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 80053fc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005400:	4297      	cmp	r7, r2
 8005402:	d302      	bcc.n	800540a <HAL_PCD_IRQHandler+0x4b6>
 8005404:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8005408:	e7ce      	b.n	80053a8 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 800540a:	1bd2      	subs	r2, r2, r7
 800540c:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 800540e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8005410:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8005414:	443a      	add	r2, r7
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8005418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800541a:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 800541c:	443a      	add	r2, r7
 800541e:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005420:	f002 f83c 	bl	800749c <USB_EPStartXfer>
 8005424:	e5a3      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005426:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800542a:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800542e:	fa1f fc8c 	uxth.w	ip, ip
 8005432:	44d4      	add	ip, sl
 8005434:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005438:	f000 80f4 	beq.w	8005624 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800543c:	f10c 0c02 	add.w	ip, ip, #2
 8005440:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8005444:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8005448:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800544c:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 800544e:	bf2c      	ite	cs
 8005450:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8005452:	eba2 020c 	subcc.w	r2, r2, ip
 8005456:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005458:	2a00      	cmp	r2, #0
 800545a:	d15b      	bne.n	8005514 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800545c:	2328      	movs	r3, #40	@ 0x28
 800545e:	fb03 4307 	mla	r3, r3, r7, r4
 8005462:	7c5b      	ldrb	r3, [r3, #17]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d141      	bne.n	80054ec <HAL_PCD_IRQHandler+0x598>
 8005468:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800546c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005470:	b292      	uxth	r2, r2
 8005472:	010b      	lsls	r3, r1, #4
 8005474:	4494      	add	ip, r2
 8005476:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800547a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800547e:	f82c 2003 	strh.w	r2, [ip, r3]
 8005482:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8005486:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800548a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800548e:	b292      	uxth	r2, r2
 8005490:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005494:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005498:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800549c:	b292      	uxth	r2, r2
 800549e:	4410      	add	r0, r2
 80054a0:	5ac2      	ldrh	r2, [r0, r3]
 80054a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80054a6:	52c2      	strh	r2, [r0, r3]
 80054a8:	5ac2      	ldrh	r2, [r0, r3]
 80054aa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80054ae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80054b2:	b292      	uxth	r2, r2
 80054b4:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f003 feb1 	bl	800921e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054bc:	f1b8 0f00 	cmp.w	r8, #0
 80054c0:	f000 80f4 	beq.w	80056ac <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054c4:	2328      	movs	r3, #40	@ 0x28
 80054c6:	fb03 4307 	mla	r3, r3, r7, r4
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	7c19      	ldrb	r1, [r3, #16]
 80054ce:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	0c1b      	lsrs	r3, r3, #16
 80054de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80054ea:	e0df      	b.n	80056ac <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d1e2      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x562>
 80054f0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80054f4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80054f8:	fa1f fe8e 	uxth.w	lr, lr
 80054fc:	44f4      	add	ip, lr
 80054fe:	010b      	lsls	r3, r1, #4
 8005500:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005504:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005508:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800550c:	fa1f fc8c 	uxth.w	ip, ip
 8005510:	4460      	add	r0, ip
 8005512:	e7cf      	b.n	80054b4 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005514:	f1b8 0f00 	cmp.w	r8, #0
 8005518:	d00d      	beq.n	8005536 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800551a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800551e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005522:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005526:	0412      	lsls	r2, r2, #16
 8005528:	0c12      	lsrs	r2, r2, #16
 800552a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800552e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005532:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005536:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800553a:	fb08 4807 	mla	r8, r8, r7, r4
 800553e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8005542:	2a01      	cmp	r2, #1
 8005544:	f040 80b2 	bne.w	80056ac <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8005548:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800554c:	eb02 0e0c 	add.w	lr, r2, ip
 8005550:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	4462      	add	r2, ip
 8005558:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800555a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800555e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005562:	4293      	cmp	r3, r2
 8005564:	d335      	bcc.n	80055d2 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800556c:	2328      	movs	r3, #40	@ 0x28
 800556e:	fb03 4307 	mla	r3, r3, r7, r4
 8005572:	f893 c011 	ldrb.w	ip, [r3, #17]
 8005576:	b293      	uxth	r3, r2
 8005578:	f1bc 0f00 	cmp.w	ip, #0
 800557c:	d145      	bne.n	800560a <HAL_PCD_IRQHandler+0x6b6>
 800557e:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8005582:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005586:	fa1f f888 	uxth.w	r8, r8
 800558a:	44c4      	add	ip, r8
 800558c:	0109      	lsls	r1, r1, #4
 800558e:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8005592:	2a3e      	cmp	r2, #62	@ 0x3e
 8005594:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005598:	f82c 8001 	strh.w	r8, [ip, r1]
 800559c:	d925      	bls.n	80055ea <HAL_PCD_IRQHandler+0x696>
 800559e:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80055a2:	06d2      	lsls	r2, r2, #27
 80055a4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80055a8:	bf08      	it	eq
 80055aa:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80055ae:	b292      	uxth	r2, r2
 80055b0:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80055b4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80055b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055bc:	b292      	uxth	r2, r2
 80055be:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80055c2:	2228      	movs	r2, #40	@ 0x28
 80055c4:	fb02 4207 	mla	r2, r2, r7, r4
 80055c8:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055ca:	4671      	mov	r1, lr
 80055cc:	f001 ff56 	bl	800747c <USB_WritePMA>
 80055d0:	e06c      	b.n	80056ac <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 80055d2:	b91b      	cbnz	r3, 80055dc <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 80055d4:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80055d6:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80055da:	e7c7      	b.n	800556c <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 80055dc:	2200      	movs	r2, #0
 80055de:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80055e2:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 80055e6:	461a      	mov	r2, r3
 80055e8:	e7c0      	b.n	800556c <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055ea:	b912      	cbnz	r2, 80055f2 <HAL_PCD_IRQHandler+0x69e>
 80055ec:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80055f0:	e7e0      	b.n	80055b4 <HAL_PCD_IRQHandler+0x660>
 80055f2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80055f6:	07d2      	lsls	r2, r2, #31
 80055f8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80055fc:	bf48      	it	mi
 80055fe:	f108 0801 	addmi.w	r8, r8, #1
 8005602:	b292      	uxth	r2, r2
 8005604:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8005608:	e7d8      	b.n	80055bc <HAL_PCD_IRQHandler+0x668>
 800560a:	f1bc 0f01 	cmp.w	ip, #1
 800560e:	d1d8      	bne.n	80055c2 <HAL_PCD_IRQHandler+0x66e>
 8005610:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005614:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005618:	fa1f fc8c 	uxth.w	ip, ip
 800561c:	4462      	add	r2, ip
 800561e:	0109      	lsls	r1, r1, #4
 8005620:	5253      	strh	r3, [r2, r1]
 8005622:	e7ce      	b.n	80055c2 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005624:	f10c 0c06 	add.w	ip, ip, #6
 8005628:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 800562c:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8005630:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005634:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8005636:	bf8c      	ite	hi
 8005638:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 800563a:	eba2 020c 	subls.w	r2, r2, ip
 800563e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8005640:	2a00      	cmp	r2, #0
 8005642:	d15d      	bne.n	8005700 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005644:	2328      	movs	r3, #40	@ 0x28
 8005646:	fb03 4307 	mla	r3, r3, r7, r4
 800564a:	7c5b      	ldrb	r3, [r3, #17]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d143      	bne.n	80056d8 <HAL_PCD_IRQHandler+0x784>
 8005650:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005654:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005658:	b292      	uxth	r2, r2
 800565a:	010b      	lsls	r3, r1, #4
 800565c:	4494      	add	ip, r2
 800565e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8005662:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005666:	f82c 2003 	strh.w	r2, [ip, r3]
 800566a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800566e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005672:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005676:	b292      	uxth	r2, r2
 8005678:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800567c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005680:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005684:	b292      	uxth	r2, r2
 8005686:	4410      	add	r0, r2
 8005688:	5ac2      	ldrh	r2, [r0, r3]
 800568a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800568e:	52c2      	strh	r2, [r0, r3]
 8005690:	5ac2      	ldrh	r2, [r0, r3]
 8005692:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005696:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800569a:	b292      	uxth	r2, r2
 800569c:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800569e:	4620      	mov	r0, r4
 80056a0:	f003 fdbd 	bl	800921e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056a4:	f1b8 0f00 	cmp.w	r8, #0
 80056a8:	f43f af0c 	beq.w	80054c4 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056ac:	2328      	movs	r3, #40	@ 0x28
 80056ae:	fb03 4307 	mla	r3, r3, r7, r4
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	7c19      	ldrb	r1, [r3, #16]
 80056b6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80056d6:	e44a      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d1e0      	bne.n	800569e <HAL_PCD_IRQHandler+0x74a>
 80056dc:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80056e0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80056e4:	fa1f fe8e 	uxth.w	lr, lr
 80056e8:	44f4      	add	ip, lr
 80056ea:	010b      	lsls	r3, r1, #4
 80056ec:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056f0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80056f4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80056f8:	fa1f fc8c 	uxth.w	ip, ip
 80056fc:	4460      	add	r0, ip
 80056fe:	e7cd      	b.n	800569c <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005700:	f1b8 0f00 	cmp.w	r8, #0
 8005704:	d10d      	bne.n	8005722 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005706:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800570a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800570e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005712:	0412      	lsls	r2, r2, #16
 8005714:	0c12      	lsrs	r2, r2, #16
 8005716:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800571a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800571e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005722:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8005726:	fb08 4807 	mla	r8, r8, r7, r4
 800572a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800572e:	2a01      	cmp	r2, #1
 8005730:	d1bc      	bne.n	80056ac <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8005732:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8005736:	eb02 0e0c 	add.w	lr, r2, ip
 800573a:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800573e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005740:	4462      	add	r2, ip
 8005742:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005744:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8005748:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800574c:	4293      	cmp	r3, r2
 800574e:	d332      	bcc.n	80057b6 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005756:	2328      	movs	r3, #40	@ 0x28
 8005758:	fb03 4307 	mla	r3, r3, r7, r4
 800575c:	f893 c011 	ldrb.w	ip, [r3, #17]
 8005760:	b293      	uxth	r3, r2
 8005762:	f1bc 0f00 	cmp.w	ip, #0
 8005766:	d142      	bne.n	80057ee <HAL_PCD_IRQHandler+0x89a>
 8005768:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 800576c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8005770:	fa1f f888 	uxth.w	r8, r8
 8005774:	44c4      	add	ip, r8
 8005776:	0109      	lsls	r1, r1, #4
 8005778:	f83c 8001 	ldrh.w	r8, [ip, r1]
 800577c:	2a3e      	cmp	r2, #62	@ 0x3e
 800577e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005782:	f82c 8001 	strh.w	r8, [ip, r1]
 8005786:	d922      	bls.n	80057ce <HAL_PCD_IRQHandler+0x87a>
 8005788:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800578c:	06d2      	lsls	r2, r2, #27
 800578e:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005792:	bf08      	it	eq
 8005794:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8005798:	b292      	uxth	r2, r2
 800579a:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800579e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80057a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057a6:	b292      	uxth	r2, r2
 80057a8:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80057ac:	2228      	movs	r2, #40	@ 0x28
 80057ae:	fb02 4207 	mla	r2, r2, r7, r4
 80057b2:	8b52      	ldrh	r2, [r2, #26]
 80057b4:	e709      	b.n	80055ca <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80057b6:	b91b      	cbnz	r3, 80057c0 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 80057b8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80057ba:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80057be:	e7ca      	b.n	8005756 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80057c6:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 80057ca:	461a      	mov	r2, r3
 80057cc:	e7c3      	b.n	8005756 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057ce:	b912      	cbnz	r2, 80057d6 <HAL_PCD_IRQHandler+0x882>
 80057d0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80057d4:	e7e3      	b.n	800579e <HAL_PCD_IRQHandler+0x84a>
 80057d6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80057da:	07d2      	lsls	r2, r2, #31
 80057dc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80057e0:	bf48      	it	mi
 80057e2:	f108 0801 	addmi.w	r8, r8, #1
 80057e6:	b292      	uxth	r2, r2
 80057e8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80057ec:	e7db      	b.n	80057a6 <HAL_PCD_IRQHandler+0x852>
 80057ee:	f1bc 0f01 	cmp.w	ip, #1
 80057f2:	d1db      	bne.n	80057ac <HAL_PCD_IRQHandler+0x858>
 80057f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80057f8:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80057fc:	b292      	uxth	r2, r2
 80057fe:	4494      	add	ip, r2
 8005800:	010a      	lsls	r2, r1, #4
 8005802:	f82c 3002 	strh.w	r3, [ip, r2]
 8005806:	e7d1      	b.n	80057ac <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005808:	0546      	lsls	r6, r0, #21
 800580a:	d512      	bpl.n	8005832 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800580c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800580e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005810:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005820:	f003 fd09 	bl	8009236 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005824:	4629      	mov	r1, r5
 8005826:	4620      	mov	r0, r4
}
 8005828:	b005      	add	sp, #20
 800582a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800582e:	f7ff bb7d 	b.w	8004f2c <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005832:	0441      	lsls	r1, r0, #17
 8005834:	d50a      	bpl.n	800584c <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800583c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005848:	f7ff bb96 	b.w	8004f78 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800584c:	0482      	lsls	r2, r0, #18
 800584e:	d505      	bpl.n	800585c <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005856:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800585a:	e7f1      	b.n	8005840 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800585c:	04c3      	lsls	r3, r0, #19
 800585e:	d519      	bpl.n	8005894 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005860:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8005862:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005864:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	041b      	lsls	r3, r3, #16
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005874:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005878:	f023 0308 	bic.w	r3, r3, #8
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	0c1b      	lsrs	r3, r3, #16
 8005880:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8005884:	f003 fcfa 	bl	800927c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800588e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005892:	e7d5      	b.n	8005840 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005894:	0507      	lsls	r7, r0, #20
 8005896:	d548      	bpl.n	800592a <HAL_PCD_IRQHandler+0x9d6>
 8005898:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4606      	mov	r6, r0
 800589e:	4619      	mov	r1, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	f103 0520 	add.w	r5, r3, #32
 80058a6:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80058aa:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80058ac:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80058b0:	d1f9      	bne.n	80058a6 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80058b2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80058b6:	b292      	uxth	r2, r2
 80058b8:	f042 0201 	orr.w	r2, r2, #1
 80058bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80058c0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	0412      	lsls	r2, r2, #16
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80058d0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80058d4:	0556      	lsls	r6, r2, #21
 80058d6:	d5fb      	bpl.n	80058d0 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e0:	0412      	lsls	r2, r2, #16
 80058e2:	0c12      	lsrs	r2, r2, #16
 80058e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80058e8:	f830 2b02 	ldrh.w	r2, [r0], #2
 80058ec:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80058f0:	428d      	cmp	r5, r1
 80058f2:	d1f9      	bne.n	80058e8 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80058f4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80058f8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80058fa:	b292      	uxth	r2, r2
 80058fc:	f042 0208 	orr.w	r2, r2, #8
 8005900:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005904:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590c:	0412      	lsls	r2, r2, #16
 800590e:	0c12      	lsrs	r2, r2, #16
 8005910:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005914:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005918:	b292      	uxth	r2, r2
 800591a:	f042 0204 	orr.w	r2, r2, #4
 800591e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005922:	f003 fc9b 	bl	800925c <HAL_PCD_SuspendCallback>
    return;
 8005926:	f7ff bb27 	b.w	8004f78 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800592a:	0582      	lsls	r2, r0, #22
 800592c:	d50d      	bpl.n	800594a <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800592e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005930:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005932:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005936:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005942:	f003 fc74 	bl	800922e <HAL_PCD_SOFCallback>
    return;
 8005946:	f7ff bb17 	b.w	8004f78 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800594a:	05c3      	lsls	r3, r0, #23
 800594c:	f57f ab14 	bpl.w	8004f78 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005956:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800595a:	e771      	b.n	8005840 <HAL_PCD_IRQHandler+0x8ec>

0800595c <HAL_PCD_EP_Open>:
{
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	2428      	movs	r4, #40	@ 0x28
 8005960:	4605      	mov	r5, r0
 8005962:	f001 0007 	and.w	r0, r1, #7
 8005966:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8005968:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800596c:	bf14      	ite	ne
 800596e:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005972:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8005976:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800597a:	bf15      	itete	ne
 800597c:	2401      	movne	r4, #1
    ep->is_in = 0U;
 800597e:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8005980:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8005982:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005986:	bf14      	ite	ne
 8005988:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800598a:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 800598c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800598e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8005990:	bf08      	it	eq
 8005992:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005994:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8005996:	bf08      	it	eq
 8005998:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800599a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800599c:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d009      	beq.n	80059b8 <HAL_PCD_EP_Open+0x5c>
 80059a4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059a6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80059a8:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059ac:	f001 faba 	bl	8006f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059b0:	2000      	movs	r0, #0
 80059b2:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80059b8:	2002      	movs	r0, #2
 80059ba:	e7fc      	b.n	80059b6 <HAL_PCD_EP_Open+0x5a>

080059bc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80059bc:	2328      	movs	r3, #40	@ 0x28
 80059be:	f001 0207 	and.w	r2, r1, #7
 80059c2:	4353      	muls	r3, r2
 80059c4:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059cc:	bf18      	it	ne
 80059ce:	f103 0110 	addne.w	r1, r3, #16
 80059d2:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d4:	bf0b      	itete	eq
 80059d6:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80059da:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80059dc:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059de:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059e0:	bf0a      	itet	eq
 80059e2:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80059e4:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80059e6:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ea:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80059ec:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d009      	beq.n	8005a08 <HAL_PCD_EP_Close+0x4c>
 80059f4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80059f8:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059fc:	f001 fbf2 	bl	80071e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005a06:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005a08:	2002      	movs	r0, #2
 8005a0a:	e7fc      	b.n	8005a06 <HAL_PCD_EP_Close+0x4a>

08005a0c <HAL_PCD_EP_Receive>:
{
 8005a0c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8005a0e:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8005a10:	2600      	movs	r6, #0
 8005a12:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8005a16:	434c      	muls	r4, r1
 8005a18:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1a:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a1e:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a22:	4401      	add	r1, r0
  ep->xfer_len = len;
 8005a24:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8005a28:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8005a2c:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a30:	6800      	ldr	r0, [r0, #0]
 8005a32:	f001 fd33 	bl	800749c <USB_EPStartXfer>
}
 8005a36:	4630      	mov	r0, r6
 8005a38:	bd70      	pop	{r4, r5, r6, pc}

08005a3a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a3a:	2328      	movs	r3, #40	@ 0x28
 8005a3c:	f001 0107 	and.w	r1, r1, #7
 8005a40:	fb03 0001 	mla	r0, r3, r1, r0
}
 8005a44:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8005a48:	4770      	bx	lr

08005a4a <HAL_PCD_EP_Transmit>:
{
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	2528      	movs	r5, #40	@ 0x28
 8005a4e:	f001 0107 	and.w	r1, r1, #7
 8005a52:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8005a54:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8005a56:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8005a58:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8005a5c:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a5e:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a60:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a64:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8005a66:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8005a6a:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8005a6c:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8005a6e:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a70:	6800      	ldr	r0, [r0, #0]
 8005a72:	f001 fd13 	bl	800749c <USB_EPStartXfer>
}
 8005a76:	4630      	mov	r0, r6
 8005a78:	bd70      	pop	{r4, r5, r6, pc}

08005a7a <HAL_PCD_EP_SetStall>:
{
 8005a7a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a7c:	7903      	ldrb	r3, [r0, #4]
 8005a7e:	f001 0507 	and.w	r5, r1, #7
 8005a82:	42ab      	cmp	r3, r5
{
 8005a84:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a86:	d32a      	bcc.n	8005ade <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8005a88:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005a8c:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8005a90:	d01c      	beq.n	8005acc <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8005a92:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a94:	436b      	muls	r3, r5
 8005a96:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8005a9a:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005a9e:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8005aa0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aa2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8005aa4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8005aa6:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d019      	beq.n	8005ae2 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005aae:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005ab0:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ab4:	f001 fc69 	bl	800738a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ab8:	b925      	cbnz	r5, 8005ac4 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005aba:	6820      	ldr	r0, [r4, #0]
 8005abc:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8005ac0:	f001 fcda 	bl	8007478 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8005acc:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005ace:	434b      	muls	r3, r1
 8005ad0:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8005ad4:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005ad6:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005ad8:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8005adc:	e7e0      	b.n	8005aa0 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8005ade:	2001      	movs	r0, #1
 8005ae0:	e7f3      	b.n	8005aca <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8005ae2:	2002      	movs	r0, #2
 8005ae4:	e7f1      	b.n	8005aca <HAL_PCD_EP_SetStall+0x50>

08005ae6 <HAL_PCD_EP_ClrStall>:
{
 8005ae6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ae8:	7902      	ldrb	r2, [r0, #4]
 8005aea:	f001 030f 	and.w	r3, r1, #15
 8005aee:	429a      	cmp	r2, r3
{
 8005af0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005af2:	d326      	bcc.n	8005b42 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8005af4:	2328      	movs	r3, #40	@ 0x28
 8005af6:	f001 0207 	and.w	r2, r1, #7
 8005afa:	4353      	muls	r3, r2
 8005afc:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b00:	bf14      	ite	ne
 8005b02:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b06:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8005b0a:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8005b0c:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8005b10:	bf15      	itete	ne
 8005b12:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8005b14:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b16:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b18:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8005b1a:	bf14      	ite	ne
 8005b1c:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8005b1e:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8005b22:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b24:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005b26:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d00b      	beq.n	8005b46 <HAL_PCD_EP_ClrStall+0x60>
 8005b2e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b30:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005b32:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b36:	f001 fc48 	bl	80073ca <USB_EPClearStall>
  return HAL_OK;
 8005b3a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8005b3c:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b42:	2001      	movs	r0, #1
 8005b44:	e7fc      	b.n	8005b40 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8005b46:	2002      	movs	r0, #2
 8005b48:	e7fa      	b.n	8005b40 <HAL_PCD_EP_ClrStall+0x5a>

08005b4a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b4e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b52:	bf1b      	ittet	ne
 8005b54:	f001 0107 	andne.w	r1, r1, #7
 8005b58:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b5c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b60:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8005b62:	bf08      	it	eq
 8005b64:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b68:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8005b6a:	b91a      	cbnz	r2, 8005b74 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8005b6c:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8005b6e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005b70:	2000      	movs	r0, #0
 8005b72:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8005b74:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005b76:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8005b78:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005b7a:	e7f9      	b.n	8005b70 <HAL_PCDEx_PMAConfig+0x26>

08005b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b80:	4605      	mov	r5, r0
 8005b82:	b338      	cbz	r0, 8005bd4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b84:	6803      	ldr	r3, [r0, #0]
 8005b86:	07db      	lsls	r3, r3, #31
 8005b88:	d410      	bmi.n	8005bac <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	079f      	lsls	r7, r3, #30
 8005b8e:	d45e      	bmi.n	8005c4e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	0719      	lsls	r1, r3, #28
 8005b94:	f100 8095 	bmi.w	8005cc2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	075a      	lsls	r2, r3, #29
 8005b9c:	f100 80c1 	bmi.w	8005d22 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba0:	69eb      	ldr	r3, [r5, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 812c 	bne.w	8005e00 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e029      	b.n	8005c00 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bac:	4c90      	ldr	r4, [pc, #576]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d007      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
 8005bc2:	6863      	ldr	r3, [r4, #4]
 8005bc4:	03de      	lsls	r6, r3, #15
 8005bc6:	d507      	bpl.n	8005bd8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	039c      	lsls	r4, r3, #14
 8005bcc:	d5dd      	bpl.n	8005b8a <HAL_RCC_OscConfig+0xe>
 8005bce:	686b      	ldr	r3, [r5, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1da      	bne.n	8005b8a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	e013      	b.n	8005c00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd8:	686b      	ldr	r3, [r5, #4]
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bde:	d112      	bne.n	8005c06 <HAL_RCC_OscConfig+0x8a>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005be8:	f7fd fab2 	bl	8003150 <HAL_GetTick>
 8005bec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0398      	lsls	r0, r3, #14
 8005bf2:	d4ca      	bmi.n	8005b8a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fd faac 	bl	8003150 <HAL_GetTick>
 8005bf8:	1b80      	subs	r0, r0, r6
 8005bfa:	2864      	cmp	r0, #100	@ 0x64
 8005bfc:	d9f7      	bls.n	8005bee <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005bfe:	2003      	movs	r0, #3
}
 8005c00:	b002      	add	sp, #8
 8005c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c06:	b99b      	cbnz	r3, 8005c30 <HAL_RCC_OscConfig+0xb4>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005c18:	f7fd fa9a 	bl	8003150 <HAL_GetTick>
 8005c1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	0399      	lsls	r1, r3, #14
 8005c22:	d5b2      	bpl.n	8005b8a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fd fa94 	bl	8003150 <HAL_GetTick>
 8005c28:	1b80      	subs	r0, r0, r6
 8005c2a:	2864      	cmp	r0, #100	@ 0x64
 8005c2c:	d9f7      	bls.n	8005c1e <HAL_RCC_OscConfig+0xa2>
 8005c2e:	e7e6      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	d103      	bne.n	8005c40 <HAL_RCC_OscConfig+0xc4>
 8005c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	e7cf      	b.n	8005be0 <HAL_RCC_OscConfig+0x64>
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c4c:	e7cb      	b.n	8005be6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c4e:	4c68      	ldr	r4, [pc, #416]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	f013 0f0c 	tst.w	r3, #12
 8005c56:	d007      	beq.n	8005c68 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d110      	bne.n	8005c84 <HAL_RCC_OscConfig+0x108>
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	03da      	lsls	r2, r3, #15
 8005c66:	d40d      	bmi.n	8005c84 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	079b      	lsls	r3, r3, #30
 8005c6c:	d502      	bpl.n	8005c74 <HAL_RCC_OscConfig+0xf8>
 8005c6e:	692b      	ldr	r3, [r5, #16]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d1af      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	696a      	ldr	r2, [r5, #20]
 8005c78:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	e785      	b.n	8005b90 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c84:	692a      	ldr	r2, [r5, #16]
 8005c86:	4b5b      	ldr	r3, [pc, #364]	@ (8005df4 <HAL_RCC_OscConfig+0x278>)
 8005c88:	b16a      	cbz	r2, 8005ca6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c8e:	f7fd fa5f 	bl	8003150 <HAL_GetTick>
 8005c92:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	079f      	lsls	r7, r3, #30
 8005c98:	d4ec      	bmi.n	8005c74 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7fd fa59 	bl	8003150 <HAL_GetTick>
 8005c9e:	1b80      	subs	r0, r0, r6
 8005ca0:	2802      	cmp	r0, #2
 8005ca2:	d9f7      	bls.n	8005c94 <HAL_RCC_OscConfig+0x118>
 8005ca4:	e7ab      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8005ca6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fa52 	bl	8003150 <HAL_GetTick>
 8005cac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0798      	lsls	r0, r3, #30
 8005cb2:	f57f af6d 	bpl.w	8005b90 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fd fa4b 	bl	8003150 <HAL_GetTick>
 8005cba:	1b80      	subs	r0, r0, r6
 8005cbc:	2802      	cmp	r0, #2
 8005cbe:	d9f6      	bls.n	8005cae <HAL_RCC_OscConfig+0x132>
 8005cc0:	e79d      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cc2:	69aa      	ldr	r2, [r5, #24]
 8005cc4:	4e4a      	ldr	r6, [pc, #296]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8005df4 <HAL_RCC_OscConfig+0x278>)
 8005cc8:	b1e2      	cbz	r2, 8005d04 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005cd0:	f7fd fa3e 	bl	8003150 <HAL_GetTick>
 8005cd4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005cd8:	079b      	lsls	r3, r3, #30
 8005cda:	d50d      	bpl.n	8005cf8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cdc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8005ce0:	4b45      	ldr	r3, [pc, #276]	@ (8005df8 <HAL_RCC_OscConfig+0x27c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ce8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005cea:	bf00      	nop
  }
  while (Delay --);
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	1e5a      	subs	r2, r3, #1
 8005cf0:	9201      	str	r2, [sp, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f9      	bne.n	8005cea <HAL_RCC_OscConfig+0x16e>
 8005cf6:	e74f      	b.n	8005b98 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fd fa2a 	bl	8003150 <HAL_GetTick>
 8005cfc:	1b00      	subs	r0, r0, r4
 8005cfe:	2802      	cmp	r0, #2
 8005d00:	d9e9      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x15a>
 8005d02:	e77c      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005d04:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005d08:	f7fd fa22 	bl	8003150 <HAL_GetTick>
 8005d0c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005d10:	079f      	lsls	r7, r3, #30
 8005d12:	f57f af41 	bpl.w	8005b98 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d16:	f7fd fa1b 	bl	8003150 <HAL_GetTick>
 8005d1a:	1b00      	subs	r0, r0, r4
 8005d1c:	2802      	cmp	r0, #2
 8005d1e:	d9f6      	bls.n	8005d0e <HAL_RCC_OscConfig+0x192>
 8005d20:	e76d      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d22:	4c33      	ldr	r4, [pc, #204]	@ (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d24:	69e3      	ldr	r3, [r4, #28]
 8005d26:	00d8      	lsls	r0, r3, #3
 8005d28:	d424      	bmi.n	8005d74 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8005d2a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2c:	69e3      	ldr	r3, [r4, #28]
 8005d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d32:	61e3      	str	r3, [r4, #28]
 8005d34:	69e3      	ldr	r3, [r4, #28]
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3e:	4e2f      	ldr	r6, [pc, #188]	@ (8005dfc <HAL_RCC_OscConfig+0x280>)
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	05d9      	lsls	r1, r3, #23
 8005d44:	d518      	bpl.n	8005d78 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d46:	68eb      	ldr	r3, [r5, #12]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d126      	bne.n	8005d9a <HAL_RCC_OscConfig+0x21e>
 8005d4c:	6a23      	ldr	r3, [r4, #32]
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005d54:	f7fd f9fc 	bl	8003150 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d58:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005d5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	6a23      	ldr	r3, [r4, #32]
 8005d60:	079b      	lsls	r3, r3, #30
 8005d62:	d53f      	bpl.n	8005de4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8005d64:	2f00      	cmp	r7, #0
 8005d66:	f43f af1b 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6a:	69e3      	ldr	r3, [r4, #28]
 8005d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d70:	61e3      	str	r3, [r4, #28]
 8005d72:	e715      	b.n	8005ba0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005d74:	2700      	movs	r7, #0
 8005d76:	e7e2      	b.n	8005d3e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d78:	6833      	ldr	r3, [r6, #0]
 8005d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005d80:	f7fd f9e6 	bl	8003150 <HAL_GetTick>
 8005d84:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	6833      	ldr	r3, [r6, #0]
 8005d88:	05da      	lsls	r2, r3, #23
 8005d8a:	d4dc      	bmi.n	8005d46 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8c:	f7fd f9e0 	bl	8003150 <HAL_GetTick>
 8005d90:	eba0 0008 	sub.w	r0, r0, r8
 8005d94:	2864      	cmp	r0, #100	@ 0x64
 8005d96:	d9f6      	bls.n	8005d86 <HAL_RCC_OscConfig+0x20a>
 8005d98:	e731      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d9a:	b9ab      	cbnz	r3, 8005dc8 <HAL_RCC_OscConfig+0x24c>
 8005d9c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	6223      	str	r3, [r4, #32]
 8005da8:	6a23      	ldr	r3, [r4, #32]
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005db0:	f7fd f9ce 	bl	8003150 <HAL_GetTick>
 8005db4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db6:	6a23      	ldr	r3, [r4, #32]
 8005db8:	0798      	lsls	r0, r3, #30
 8005dba:	d5d3      	bpl.n	8005d64 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fd f9c8 	bl	8003150 <HAL_GetTick>
 8005dc0:	1b80      	subs	r0, r0, r6
 8005dc2:	4540      	cmp	r0, r8
 8005dc4:	d9f7      	bls.n	8005db6 <HAL_RCC_OscConfig+0x23a>
 8005dc6:	e71a      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	6a23      	ldr	r3, [r4, #32]
 8005dcc:	d103      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x25a>
 8005dce:	f043 0304 	orr.w	r3, r3, #4
 8005dd2:	6223      	str	r3, [r4, #32]
 8005dd4:	e7ba      	b.n	8005d4c <HAL_RCC_OscConfig+0x1d0>
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	6223      	str	r3, [r4, #32]
 8005ddc:	6a23      	ldr	r3, [r4, #32]
 8005dde:	f023 0304 	bic.w	r3, r3, #4
 8005de2:	e7b6      	b.n	8005d52 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f7fd f9b4 	bl	8003150 <HAL_GetTick>
 8005de8:	1b80      	subs	r0, r0, r6
 8005dea:	4540      	cmp	r0, r8
 8005dec:	d9b7      	bls.n	8005d5e <HAL_RCC_OscConfig+0x1e2>
 8005dee:	e706      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
 8005df0:	40021000 	.word	0x40021000
 8005df4:	42420000 	.word	0x42420000
 8005df8:	20000018 	.word	0x20000018
 8005dfc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e00:	4c2a      	ldr	r4, [pc, #168]	@ (8005eac <HAL_RCC_OscConfig+0x330>)
 8005e02:	6862      	ldr	r2, [r4, #4]
 8005e04:	f002 020c 	and.w	r2, r2, #12
 8005e08:	2a08      	cmp	r2, #8
 8005e0a:	d03e      	beq.n	8005e8a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8005e12:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e14:	d12c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8005e16:	f7fd f99b 	bl	8003150 <HAL_GetTick>
 8005e1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	0199      	lsls	r1, r3, #6
 8005e20:	d420      	bmi.n	8005e64 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e22:	6a2b      	ldr	r3, [r5, #32]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e28:	d105      	bne.n	8005e36 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	68a9      	ldr	r1, [r5, #8]
 8005e2e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005e32:	430a      	orrs	r2, r1
 8005e34:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e36:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8005e38:	6862      	ldr	r2, [r4, #4]
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005e40:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8005e42:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8005e46:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <HAL_RCC_OscConfig+0x334>)
 8005e48:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005e4a:	f7fd f981 	bl	8003150 <HAL_GetTick>
 8005e4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	019a      	lsls	r2, r3, #6
 8005e54:	f53f aea8 	bmi.w	8005ba8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e58:	f7fd f97a 	bl	8003150 <HAL_GetTick>
 8005e5c:	1b40      	subs	r0, r0, r5
 8005e5e:	2802      	cmp	r0, #2
 8005e60:	d9f6      	bls.n	8005e50 <HAL_RCC_OscConfig+0x2d4>
 8005e62:	e6cc      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fd f974 	bl	8003150 <HAL_GetTick>
 8005e68:	1b80      	subs	r0, r0, r6
 8005e6a:	2802      	cmp	r0, #2
 8005e6c:	d9d6      	bls.n	8005e1c <HAL_RCC_OscConfig+0x2a0>
 8005e6e:	e6c6      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8005e70:	f7fd f96e 	bl	8003150 <HAL_GetTick>
 8005e74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	019b      	lsls	r3, r3, #6
 8005e7a:	f57f ae95 	bpl.w	8005ba8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e7e:	f7fd f967 	bl	8003150 <HAL_GetTick>
 8005e82:	1b40      	subs	r0, r0, r5
 8005e84:	2802      	cmp	r0, #2
 8005e86:	d9f6      	bls.n	8005e76 <HAL_RCC_OscConfig+0x2fa>
 8005e88:	e6b9      	b.n	8005bfe <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f43f aea2 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8005e90:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e92:	6a2b      	ldr	r3, [r5, #32]
 8005e94:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	f47f ae9b 	bne.w	8005bd4 <HAL_RCC_OscConfig+0x58>
 8005e9e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ea0:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea4:	1ac0      	subs	r0, r0, r3
 8005ea6:	bf18      	it	ne
 8005ea8:	2001      	movne	r0, #1
 8005eaa:	e6a9      	b.n	8005c00 <HAL_RCC_OscConfig+0x84>
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	42420000 	.word	0x42420000

08005eb4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005eec <HAL_RCC_GetSysClockFreq+0x38>)
 8005eb6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005eb8:	f003 010c 	and.w	r1, r3, #12
 8005ebc:	2908      	cmp	r1, #8
 8005ebe:	d112      	bne.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ec0:	480b      	ldr	r0, [pc, #44]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005ec2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ec6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ec8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005eca:	d509      	bpl.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ecc:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ece:	4a09      	ldr	r2, [pc, #36]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ed0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ed4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ed6:	4a08      	ldr	r2, [pc, #32]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x44>)
 8005ed8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eda:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ede:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ee0:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x48>)
 8005ee2:	4358      	muls	r0, r3
 8005ee4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005ee6:	4803      	ldr	r0, [pc, #12]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	0800c31a 	.word	0x0800c31a
 8005ef4:	007a1200 	.word	0x007a1200
 8005ef8:	0800c318 	.word	0x0800c318
 8005efc:	003d0900 	.word	0x003d0900

08005f00 <HAL_RCC_ClockConfig>:
{
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f04:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005f06:	4604      	mov	r4, r0
 8005f08:	b910      	cbnz	r0, 8005f10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005f0a:	2001      	movs	r0, #1
}
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f10:	4a44      	ldr	r2, [pc, #272]	@ (8006024 <HAL_RCC_ClockConfig+0x124>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	d328      	bcc.n	8005f6e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1c:	6821      	ldr	r1, [r4, #0]
 8005f1e:	078e      	lsls	r6, r1, #30
 8005f20:	d430      	bmi.n	8005f84 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f22:	07ca      	lsls	r2, r1, #31
 8005f24:	d443      	bmi.n	8005fae <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f26:	4a3f      	ldr	r2, [pc, #252]	@ (8006024 <HAL_RCC_ClockConfig+0x124>)
 8005f28:	6813      	ldr	r3, [r2, #0]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	42ab      	cmp	r3, r5
 8005f30:	d865      	bhi.n	8005ffe <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	4d3c      	ldr	r5, [pc, #240]	@ (8006028 <HAL_RCC_ClockConfig+0x128>)
 8005f36:	f012 0f04 	tst.w	r2, #4
 8005f3a:	d16c      	bne.n	8006016 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	0713      	lsls	r3, r2, #28
 8005f3e:	d506      	bpl.n	8005f4e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f40:	686b      	ldr	r3, [r5, #4]
 8005f42:	6922      	ldr	r2, [r4, #16]
 8005f44:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005f48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005f4c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f4e:	f7ff ffb1 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 8005f52:	686b      	ldr	r3, [r5, #4]
 8005f54:	4a35      	ldr	r2, [pc, #212]	@ (800602c <HAL_RCC_ClockConfig+0x12c>)
 8005f56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f5a:	5cd3      	ldrb	r3, [r2, r3]
 8005f5c:	40d8      	lsrs	r0, r3
 8005f5e:	4b34      	ldr	r3, [pc, #208]	@ (8006030 <HAL_RCC_ClockConfig+0x130>)
 8005f60:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005f62:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCC_ClockConfig+0x134>)
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	f7fd f8b1 	bl	80030cc <HAL_InitTick>
  return HAL_OK;
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e7ce      	b.n	8005f0c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	d1c3      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xa>
 8005f82:	e7cb      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f84:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_RCC_ClockConfig+0x128>)
 8005f86:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8a:	bf1e      	ittt	ne
 8005f8c:	685a      	ldrne	r2, [r3, #4]
 8005f8e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8005f92:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f94:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f96:	bf42      	ittt	mi
 8005f98:	685a      	ldrmi	r2, [r3, #4]
 8005f9a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8005f9e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68a0      	ldr	r0, [r4, #8]
 8005fa4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005fa8:	4302      	orrs	r2, r0
 8005faa:	605a      	str	r2, [r3, #4]
 8005fac:	e7b9      	b.n	8005f22 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fae:	6862      	ldr	r2, [r4, #4]
 8005fb0:	4e1d      	ldr	r6, [pc, #116]	@ (8006028 <HAL_RCC_ClockConfig+0x128>)
 8005fb2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb6:	d11a      	bne.n	8005fee <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	d0a5      	beq.n	8005f0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fbe:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005fcc:	f7fd f8c0 	bl	8003150 <HAL_GetTick>
 8005fd0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	6873      	ldr	r3, [r6, #4]
 8005fd4:	6862      	ldr	r2, [r4, #4]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005fde:	d0a2      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe0:	f7fd f8b6 	bl	8003150 <HAL_GetTick>
 8005fe4:	1bc0      	subs	r0, r0, r7
 8005fe6:	4540      	cmp	r0, r8
 8005fe8:	d9f3      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005fea:	2003      	movs	r0, #3
 8005fec:	e78e      	b.n	8005f0c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fee:	2a02      	cmp	r2, #2
 8005ff0:	d102      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ff6:	e7e1      	b.n	8005fbc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff8:	f013 0f02 	tst.w	r3, #2
 8005ffc:	e7de      	b.n	8005fbc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	f023 0307 	bic.w	r3, r3, #7
 8006004:	432b      	orrs	r3, r5
 8006006:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006008:	6813      	ldr	r3, [r2, #0]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	42ab      	cmp	r3, r5
 8006010:	f47f af7b 	bne.w	8005f0a <HAL_RCC_ClockConfig+0xa>
 8006014:	e78d      	b.n	8005f32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006016:	686b      	ldr	r3, [r5, #4]
 8006018:	68e1      	ldr	r1, [r4, #12]
 800601a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800601e:	430b      	orrs	r3, r1
 8006020:	606b      	str	r3, [r5, #4]
 8006022:	e78b      	b.n	8005f3c <HAL_RCC_ClockConfig+0x3c>
 8006024:	40022000 	.word	0x40022000
 8006028:	40021000 	.word	0x40021000
 800602c:	0800ae28 	.word	0x0800ae28
 8006030:	20000018 	.word	0x20000018
 8006034:	20000020 	.word	0x20000020

08006038 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <HAL_RCC_GetPCLK1Freq+0x14>)
 800603a:	4a05      	ldr	r2, [pc, #20]	@ (8006050 <HAL_RCC_GetPCLK1Freq+0x18>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	4a03      	ldr	r2, [pc, #12]	@ (8006054 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006046:	6810      	ldr	r0, [r2, #0]
}
 8006048:	40d8      	lsrs	r0, r3
 800604a:	4770      	bx	lr
 800604c:	40021000 	.word	0x40021000
 8006050:	0800ae20 	.word	0x0800ae20
 8006054:	20000018 	.word	0x20000018

08006058 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006058:	6803      	ldr	r3, [r0, #0]
{
 800605a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800605e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006060:	07d8      	lsls	r0, r3, #31
 8006062:	d521      	bpl.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006064:	4c36      	ldr	r4, [pc, #216]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006066:	69e3      	ldr	r3, [r4, #28]
 8006068:	00d9      	lsls	r1, r3, #3
 800606a:	d42b      	bmi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800606c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	69e3      	ldr	r3, [r4, #28]
 8006070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006074:	61e3      	str	r3, [r4, #28]
 8006076:	69e3      	ldr	r3, [r4, #28]
 8006078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4f30      	ldr	r7, [pc, #192]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	05da      	lsls	r2, r3, #23
 8006086:	d51f      	bpl.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006088:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800608a:	686a      	ldr	r2, [r5, #4]
 800608c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006090:	d12e      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006092:	6a23      	ldr	r3, [r4, #32]
 8006094:	686a      	ldr	r2, [r5, #4]
 8006096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609a:	4313      	orrs	r3, r2
 800609c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800609e:	b11e      	cbz	r6, 80060a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a0:	69e3      	ldr	r3, [r4, #28]
 80060a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060a6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060a8:	682a      	ldr	r2, [r5, #0]
 80060aa:	0791      	lsls	r1, r2, #30
 80060ac:	d506      	bpl.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060ae:	4924      	ldr	r1, [pc, #144]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060b0:	68a8      	ldr	r0, [r5, #8]
 80060b2:	684b      	ldr	r3, [r1, #4]
 80060b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80060b8:	4303      	orrs	r3, r0
 80060ba:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060bc:	06d3      	lsls	r3, r2, #27
 80060be:	d436      	bmi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060c0:	2000      	movs	r0, #0
 80060c2:	e012      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80060c4:	2600      	movs	r6, #0
 80060c6:	e7db      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80060d0:	f7fd f83e 	bl	8003150 <HAL_GetTick>
 80060d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	05db      	lsls	r3, r3, #23
 80060da:	d4d5      	bmi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060dc:	f7fd f838 	bl	8003150 <HAL_GetTick>
 80060e0:	eba0 0008 	sub.w	r0, r0, r8
 80060e4:	2864      	cmp	r0, #100	@ 0x64
 80060e6:	d9f6      	bls.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80060e8:	2003      	movs	r0, #3
}
 80060ea:	b002      	add	sp, #8
 80060ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060f0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d0cc      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80060f8:	2001      	movs	r0, #1
 80060fa:	4a13      	ldr	r2, [pc, #76]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060fc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80060fe:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006102:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006104:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006108:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 800610a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 800610e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006110:	d5bf      	bpl.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8006112:	f7fd f81d 	bl	8003150 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800611a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	6a23      	ldr	r3, [r4, #32]
 800611e:	0798      	lsls	r0, r3, #30
 8006120:	d4b7      	bmi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fd f815 	bl	8003150 <HAL_GetTick>
 8006126:	1bc0      	subs	r0, r0, r7
 8006128:	4540      	cmp	r0, r8
 800612a:	d9f7      	bls.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800612c:	e7dc      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800612e:	4a04      	ldr	r2, [pc, #16]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006130:	68e9      	ldr	r1, [r5, #12]
 8006132:	6853      	ldr	r3, [r2, #4]
 8006134:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006138:	430b      	orrs	r3, r1
 800613a:	6053      	str	r3, [r2, #4]
 800613c:	e7c0      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	40007000 	.word	0x40007000
 8006148:	42420000 	.word	0x42420000

0800614c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	461f      	mov	r7, r3
 8006152:	4689      	mov	r9, r1
 8006154:	4690      	mov	r8, r2
 8006156:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006158:	f7fc fffa 	bl	8003150 <HAL_GetTick>
 800615c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800615e:	443d      	add	r5, r7
 8006160:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006162:	f7fc fff5 	bl	8003150 <HAL_GetTick>
 8006166:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006168:	4b25      	ldr	r3, [pc, #148]	@ (8006200 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800616a:	681e      	ldr	r6, [r3, #0]
 800616c:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8006170:	436e      	muls	r6, r5
 8006172:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	6893      	ldr	r3, [r2, #8]
 8006178:	ea39 0303 	bics.w	r3, r9, r3
 800617c:	bf0c      	ite	eq
 800617e:	2301      	moveq	r3, #1
 8006180:	2300      	movne	r3, #0
 8006182:	4543      	cmp	r3, r8
 8006184:	d101      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8006186:	2000      	movs	r0, #0
 8006188:	e02e      	b.n	80061e8 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800618a:	1c7b      	adds	r3, r7, #1
 800618c:	d0f3      	beq.n	8006176 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800618e:	f7fc ffdf 	bl	8003150 <HAL_GetTick>
 8006192:	eba0 000a 	sub.w	r0, r0, sl
 8006196:	42a8      	cmp	r0, r5
 8006198:	d329      	bcc.n	80061ee <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061a2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a4:	6862      	ldr	r2, [r4, #4]
 80061a6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80061aa:	d10a      	bne.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x76>
 80061ac:	68a2      	ldr	r2, [r4, #8]
 80061ae:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80061b2:	d002      	beq.n	80061ba <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80061b8:	d103      	bne.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80061c4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80061c8:	d107      	bne.n	80061da <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061d8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80061da:	2301      	movs	r3, #1
 80061dc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061e0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80061e2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80061e4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80061e8:	b002      	add	sp, #8
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80061ee:	9a01      	ldr	r2, [sp, #4]
      count--;
 80061f0:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80061f2:	2a00      	cmp	r2, #0
      count--;
 80061f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80061f8:	bf08      	it	eq
 80061fa:	4615      	moveq	r5, r2
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	e7b9      	b.n	8006174 <SPI_WaitFlagStateUntilTimeout+0x28>
 8006200:	20000018 	.word	0x20000018

08006204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006206:	460b      	mov	r3, r1
 8006208:	9200      	str	r2, [sp, #0]
{
 800620a:	460d      	mov	r5, r1
 800620c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800620e:	2102      	movs	r1, #2
 8006210:	2201      	movs	r2, #1
{
 8006212:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006214:	f7ff ff9a 	bl	800614c <SPI_WaitFlagStateUntilTimeout>
 8006218:	4602      	mov	r2, r0
 800621a:	b128      	cbz	r0, 8006228 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800621e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006226:	e007      	b.n	8006238 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006228:	462b      	mov	r3, r5
 800622a:	2180      	movs	r1, #128	@ 0x80
 800622c:	4620      	mov	r0, r4
 800622e:	9600      	str	r6, [sp, #0]
 8006230:	f7ff ff8c 	bl	800614c <SPI_WaitFlagStateUntilTimeout>
 8006234:	2800      	cmp	r0, #0
 8006236:	d1f1      	bne.n	800621c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8006238:	b002      	add	sp, #8
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <SPI_EndRxTransaction>:
{
 800623c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800623e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006240:	6841      	ldr	r1, [r0, #4]
{
 8006242:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006244:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8006248:	d118      	bne.n	800627c <SPI_EndRxTransaction+0x40>
 800624a:	6881      	ldr	r1, [r0, #8]
 800624c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8006250:	d002      	beq.n	8006258 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006252:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006256:	d111      	bne.n	800627c <SPI_EndRxTransaction+0x40>
    __HAL_SPI_DISABLE(hspi);
 8006258:	6825      	ldr	r5, [r4, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800625a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 800625e:	6828      	ldr	r0, [r5, #0]
 8006260:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006264:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006266:	d109      	bne.n	800627c <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006268:	9200      	str	r2, [sp, #0]
 800626a:	2101      	movs	r1, #1
 800626c:	2200      	movs	r2, #0
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff ff6c 	bl	800614c <SPI_WaitFlagStateUntilTimeout>
 8006274:	b930      	cbnz	r0, 8006284 <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 8006276:	2000      	movs	r0, #0
}
 8006278:	b003      	add	sp, #12
 800627a:	bd30      	pop	{r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800627c:	9200      	str	r2, [sp, #0]
 800627e:	2180      	movs	r1, #128	@ 0x80
 8006280:	2200      	movs	r2, #0
 8006282:	e7f4      	b.n	800626e <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006284:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006286:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006288:	f043 0320 	orr.w	r3, r3, #32
 800628c:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800628e:	e7f3      	b.n	8006278 <SPI_EndRxTransaction+0x3c>

08006290 <HAL_SPI_Init>:
{
 8006290:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006292:	4604      	mov	r4, r0
 8006294:	2800      	cmp	r0, #0
 8006296:	d051      	beq.n	800633c <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006298:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d14a      	bne.n	8006334 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629e:	6842      	ldr	r2, [r0, #4]
 80062a0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80062a4:	d000      	beq.n	80062a8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ac:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80062b0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062b4:	b923      	cbnz	r3, 80062c0 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80062b6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80062b8:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80062bc:	f7fc fc42 	bl	8002b44 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80062c0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80062c2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80062c4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80062c8:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062ca:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80062cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062d0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d2:	6863      	ldr	r3, [r4, #4]
 80062d4:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80062d8:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80062dc:	4303      	orrs	r3, r0
 80062de:	68e0      	ldr	r0, [r4, #12]
 80062e0:	69a1      	ldr	r1, [r4, #24]
 80062e2:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80062e6:	4303      	orrs	r3, r0
 80062e8:	6920      	ldr	r0, [r4, #16]
 80062ea:	f000 0002 	and.w	r0, r0, #2
 80062ee:	4303      	orrs	r3, r0
 80062f0:	6960      	ldr	r0, [r4, #20]
 80062f2:	f000 0001 	and.w	r0, r0, #1
 80062f6:	4303      	orrs	r3, r0
 80062f8:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80062fc:	4303      	orrs	r3, r0
 80062fe:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006300:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006302:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8006306:	4303      	orrs	r3, r0
 8006308:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800630a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800630e:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8006312:	4303      	orrs	r3, r0
 8006314:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006316:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800631a:	4303      	orrs	r3, r0
 800631c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800631e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006320:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006322:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006328:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800632a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800632c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800632e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8006332:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006334:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800633a:	e7b5      	b.n	80062a8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800633c:	2001      	movs	r0, #1
 800633e:	e7f8      	b.n	8006332 <HAL_SPI_Init+0xa2>

08006340 <HAL_SPI_Transmit>:
{
 8006340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006344:	4604      	mov	r4, r0
 8006346:	461f      	mov	r7, r3
 8006348:	460d      	mov	r5, r1
 800634a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800634c:	f7fc ff00 	bl	8003150 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006350:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8006354:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006356:	2b01      	cmp	r3, #1
 8006358:	b2d8      	uxtb	r0, r3
 800635a:	f040 809f 	bne.w	800649c <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 800635e:	2d00      	cmp	r5, #0
 8006360:	d074      	beq.n	800644c <HAL_SPI_Transmit+0x10c>
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	d071      	beq.n	800644c <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8006368:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800636c:	2b01      	cmp	r3, #1
 800636e:	f000 8095 	beq.w	800649c <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006372:	2303      	movs	r3, #3
 8006374:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006378:	2300      	movs	r3, #0
 800637a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800637c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006380:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006384:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006386:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006388:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638a:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800638c:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 8006392:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006396:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006398:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639c:	d107      	bne.n	80063ae <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a4:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80063a6:	6833      	ldr	r3, [r6, #0]
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063ac:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063ae:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063b0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80063b4:	bf5e      	ittt	pl
 80063b6:	6833      	ldrpl	r3, [r6, #0]
 80063b8:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80063bc:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063be:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063c4:	d145      	bne.n	8006452 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c6:	b113      	cbz	r3, 80063ce <HAL_SPI_Transmit+0x8e>
 80063c8:	f1b8 0f01 	cmp.w	r8, #1
 80063cc:	d107      	bne.n	80063de <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063ce:	f835 3b02 	ldrh.w	r3, [r5], #2
 80063d2:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80063d6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29b      	uxth	r3, r3
 80063dc:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80063de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	b9d3      	cbnz	r3, 800641a <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063e4:	464a      	mov	r2, r9
 80063e6:	4639      	mov	r1, r7
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff ff0b 	bl	8006204 <SPI_EndRxTxTransaction>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d151      	bne.n	8006496 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	b933      	cbnz	r3, 8006404 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	9201      	str	r2, [sp, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006404:	2301      	movs	r3, #1
 8006406:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800640a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800640e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006412:	1ac0      	subs	r0, r0, r3
 8006414:	bf18      	it	ne
 8006416:	2001      	movne	r0, #1
 8006418:	e018      	b.n	800644c <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800641a:	6822      	ldr	r2, [r4, #0]
 800641c:	6893      	ldr	r3, [r2, #8]
 800641e:	0798      	lsls	r0, r3, #30
 8006420:	d505      	bpl.n	800642e <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006422:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006424:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006428:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800642a:	6323      	str	r3, [r4, #48]	@ 0x30
 800642c:	e7d3      	b.n	80063d6 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642e:	f7fc fe8f 	bl	8003150 <HAL_GetTick>
 8006432:	eba0 0009 	sub.w	r0, r0, r9
 8006436:	42b8      	cmp	r0, r7
 8006438:	d3d1      	bcc.n	80063de <HAL_SPI_Transmit+0x9e>
 800643a:	1c79      	adds	r1, r7, #1
 800643c:	d0cf      	beq.n	80063de <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 800643e:	2301      	movs	r3, #1
 8006440:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006444:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006446:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8006448:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800644c:	b003      	add	sp, #12
 800644e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006452:	b113      	cbz	r3, 800645a <HAL_SPI_Transmit+0x11a>
 8006454:	f1b8 0f01 	cmp.w	r8, #1
 8006458:	d108      	bne.n	800646c <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800645a:	782b      	ldrb	r3, [r5, #0]
 800645c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800645e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006460:	3301      	adds	r3, #1
 8006462:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006464:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006466:	3b01      	subs	r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800646c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0b7      	beq.n	80063e4 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	0792      	lsls	r2, r2, #30
 800647a:	d503      	bpl.n	8006484 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800647c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	731a      	strb	r2, [r3, #12]
 8006482:	e7ec      	b.n	800645e <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006484:	f7fc fe64 	bl	8003150 <HAL_GetTick>
 8006488:	eba0 0009 	sub.w	r0, r0, r9
 800648c:	42b8      	cmp	r0, r7
 800648e:	d3ed      	bcc.n	800646c <HAL_SPI_Transmit+0x12c>
 8006490:	1c7b      	adds	r3, r7, #1
 8006492:	d0eb      	beq.n	800646c <HAL_SPI_Transmit+0x12c>
 8006494:	e7d3      	b.n	800643e <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006496:	2320      	movs	r3, #32
 8006498:	6563      	str	r3, [r4, #84]	@ 0x54
 800649a:	e7aa      	b.n	80063f2 <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 800649c:	2002      	movs	r0, #2
 800649e:	e7d5      	b.n	800644c <HAL_SPI_Transmit+0x10c>

080064a0 <HAL_SPI_TransmitReceive>:
{
 80064a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	4691      	mov	r9, r2
 80064aa:	461e      	mov	r6, r3
 80064ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 80064b0:	f7fc fe4e 	bl	8003150 <HAL_GetTick>
  tmp_state           = hspi->State;
 80064b4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80064b8:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064ba:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80064bc:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80064be:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064c0:	d00a      	beq.n	80064d8 <HAL_SPI_TransmitReceive+0x38>
 80064c2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80064c6:	f040 80e5 	bne.w	8006694 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 80e1 	bne.w	8006694 <HAL_SPI_TransmitReceive+0x1f4>
 80064d2:	2904      	cmp	r1, #4
 80064d4:	f040 80de 	bne.w	8006694 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064d8:	2d00      	cmp	r5, #0
 80064da:	d04b      	beq.n	8006574 <HAL_SPI_TransmitReceive+0xd4>
 80064dc:	f1b9 0f00 	cmp.w	r9, #0
 80064e0:	d048      	beq.n	8006574 <HAL_SPI_TransmitReceive+0xd4>
 80064e2:	2e00      	cmp	r6, #0
 80064e4:	d046      	beq.n	8006574 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 80064e6:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	f000 80d2 	beq.w	8006694 <HAL_SPI_TransmitReceive+0x1f4>
 80064f0:	2301      	movs	r3, #1
 80064f2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064f6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064fa:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064fe:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006500:	bf1c      	itt	ne
 8006502:	2305      	movne	r3, #5
 8006504:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006508:	2300      	movs	r3, #0
 800650a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 800650c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006510:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006512:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006514:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006516:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8006518:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651a:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800651c:	bf58      	it	pl
 800651e:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006520:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8006522:	bf58      	it	pl
 8006524:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8006528:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800652a:	bf58      	it	pl
 800652c:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800652e:	68e1      	ldr	r1, [r4, #12]
 8006530:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006534:	d155      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006536:	b10a      	cbz	r2, 800653c <HAL_SPI_TransmitReceive+0x9c>
 8006538:	2e01      	cmp	r6, #1
 800653a:	d107      	bne.n	800654c <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800653c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006540:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006542:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006544:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006546:	3b01      	subs	r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800654c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800654e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	b98b      	cbnz	r3, 8006578 <HAL_SPI_TransmitReceive+0xd8>
 8006554:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	b973      	cbnz	r3, 8006578 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800655a:	463a      	mov	r2, r7
 800655c:	4641      	mov	r1, r8
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fe50 	bl	8006204 <SPI_EndRxTxTransaction>
 8006564:	2800      	cmp	r0, #0
 8006566:	f000 8081 	beq.w	800666c <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656a:	2320      	movs	r3, #32
 800656c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800656e:	2300      	movs	r3, #0
 8006570:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8006574:	2001      	movs	r0, #1
 8006576:	e031      	b.n	80065dc <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	688b      	ldr	r3, [r1, #8]
 800657c:	079a      	lsls	r2, r3, #30
 800657e:	d50d      	bpl.n	800659c <HAL_SPI_TransmitReceive+0xfc>
 8006580:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006582:	b29b      	uxth	r3, r3
 8006584:	b153      	cbz	r3, 800659c <HAL_SPI_TransmitReceive+0xfc>
 8006586:	b145      	cbz	r5, 800659a <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006588:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800658a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800658e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006590:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006592:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006594:	3b01      	subs	r3, #1
 8006596:	b29b      	uxth	r3, r3
 8006598:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800659a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	f012 0201 	ands.w	r2, r2, #1
 80065a2:	d00c      	beq.n	80065be <HAL_SPI_TransmitReceive+0x11e>
 80065a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	b14b      	cbz	r3, 80065be <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80065aa:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065ac:	68c9      	ldr	r1, [r1, #12]
 80065ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065b0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065b4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80065b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065be:	f7fc fdc7 	bl	8003150 <HAL_GetTick>
 80065c2:	1bc0      	subs	r0, r0, r7
 80065c4:	4540      	cmp	r0, r8
 80065c6:	d3c2      	bcc.n	800654e <HAL_SPI_TransmitReceive+0xae>
 80065c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80065cc:	d0bf      	beq.n	800654e <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065d4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80065d6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80065d8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80065dc:	b003      	add	sp, #12
 80065de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e2:	b10a      	cbz	r2, 80065e8 <HAL_SPI_TransmitReceive+0x148>
 80065e4:	2e01      	cmp	r6, #1
 80065e6:	d108      	bne.n	80065fa <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065e8:	782a      	ldrb	r2, [r5, #0]
 80065ea:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065ee:	3301      	adds	r3, #1
 80065f0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80065f2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80065fa:	2501      	movs	r5, #1
 80065fc:	e02d      	b.n	800665a <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	6893      	ldr	r3, [r2, #8]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	d50e      	bpl.n	8006624 <HAL_SPI_TransmitReceive+0x184>
 8006606:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	b15b      	cbz	r3, 8006624 <HAL_SPI_TransmitReceive+0x184>
 800660c:	b14d      	cbz	r5, 8006622 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800660e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8006614:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006616:	3301      	adds	r3, #1
 8006618:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800661a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800661c:	3b01      	subs	r3, #1
 800661e:	b29b      	uxth	r3, r3
 8006620:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006622:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	6891      	ldr	r1, [r2, #8]
 8006628:	f011 0101 	ands.w	r1, r1, #1
 800662c:	d00d      	beq.n	800664a <HAL_SPI_TransmitReceive+0x1aa>
 800662e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	b153      	cbz	r3, 800664a <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8006634:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800663a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800663c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800663e:	3301      	adds	r3, #1
 8006640:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006642:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006644:	3b01      	subs	r3, #1
 8006646:	b29b      	uxth	r3, r3
 8006648:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800664a:	f7fc fd81 	bl	8003150 <HAL_GetTick>
 800664e:	1bc0      	subs	r0, r0, r7
 8006650:	4540      	cmp	r0, r8
 8006652:	d302      	bcc.n	800665a <HAL_SPI_TransmitReceive+0x1ba>
 8006654:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006658:	d1b9      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800665a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1cd      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x15e>
 8006662:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1c9      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x15e>
 800666a:	e776      	b.n	800655a <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	b933      	cbnz	r3, 800667e <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	9201      	str	r2, [sp, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800667e:	2301      	movs	r3, #1
 8006680:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006684:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006686:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8006688:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	bf18      	it	ne
 8006690:	2001      	movne	r0, #1
 8006692:	e7a3      	b.n	80065dc <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8006694:	2002      	movs	r0, #2
 8006696:	e7a1      	b.n	80065dc <HAL_SPI_TransmitReceive+0x13c>

08006698 <HAL_SPI_Receive>:
{
 8006698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800669c:	461e      	mov	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800669e:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 80066a2:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80066a4:	2b01      	cmp	r3, #1
{
 80066a6:	4689      	mov	r9, r1
 80066a8:	4617      	mov	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80066aa:	b2dd      	uxtb	r5, r3
 80066ac:	d004      	beq.n	80066b8 <HAL_SPI_Receive+0x20>
    return HAL_BUSY;
 80066ae:	2502      	movs	r5, #2
}
 80066b0:	4628      	mov	r0, r5
 80066b2:	b003      	add	sp, #12
 80066b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066b8:	6843      	ldr	r3, [r0, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066be:	d10b      	bne.n	80066d8 <HAL_SPI_Receive+0x40>
 80066c0:	6883      	ldr	r3, [r0, #8]
 80066c2:	b94b      	cbnz	r3, 80066d8 <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c4:	2304      	movs	r3, #4
 80066c6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066ca:	4613      	mov	r3, r2
 80066cc:	9600      	str	r6, [sp, #0]
 80066ce:	460a      	mov	r2, r1
 80066d0:	f7ff fee6 	bl	80064a0 <HAL_SPI_TransmitReceive>
 80066d4:	4605      	mov	r5, r0
 80066d6:	e7eb      	b.n	80066b0 <HAL_SPI_Receive+0x18>
  tickstart = HAL_GetTick();
 80066d8:	f7fc fd3a 	bl	8003150 <HAL_GetTick>
 80066dc:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0U))
 80066de:	f1b9 0f00 	cmp.w	r9, #0
 80066e2:	d0e5      	beq.n	80066b0 <HAL_SPI_Receive+0x18>
 80066e4:	2f00      	cmp	r7, #0
 80066e6:	d0e3      	beq.n	80066b0 <HAL_SPI_Receive+0x18>
  __HAL_LOCK(hspi);
 80066e8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d0de      	beq.n	80066ae <HAL_SPI_Receive+0x16>
 80066f0:	2301      	movs	r3, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f2:	2500      	movs	r5, #0
  __HAL_LOCK(hspi);
 80066f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066f8:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066fa:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006700:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006704:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006706:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800670a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 800670c:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800670e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006712:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006714:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006716:	86a5      	strh	r5, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006718:	86e5      	strh	r5, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800671a:	d107      	bne.n	800672c <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006722:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800672a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	0655      	lsls	r5, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006730:	bf5e      	ittt	pl
 8006732:	681a      	ldrpl	r2, [r3, #0]
 8006734:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006738:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800673a:	68e3      	ldr	r3, [r4, #12]
 800673c:	b1f3      	cbz	r3, 800677c <HAL_SPI_Receive+0xe4>
    while (hspi->RxXferCount > 0U)
 800673e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006740:	b29b      	uxth	r3, r3
 8006742:	b1fb      	cbz	r3, 8006784 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	07d2      	lsls	r2, r2, #31
 800674a:	d53c      	bpl.n	80067c6 <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006750:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006754:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006756:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006758:	3b01      	subs	r3, #1
 800675a:	b29b      	uxth	r3, r3
 800675c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800675e:	e7ee      	b.n	800673e <HAL_SPI_Receive+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	07d0      	lsls	r0, r2, #31
 8006766:	d51e      	bpl.n	80067a6 <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006768:	7b1b      	ldrb	r3, [r3, #12]
 800676a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800676c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800676e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006770:	3301      	adds	r3, #1
 8006772:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006774:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006776:	3b01      	subs	r3, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800677c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ed      	bne.n	8006760 <HAL_SPI_Receive+0xc8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006784:	4642      	mov	r2, r8
 8006786:	4631      	mov	r1, r6
 8006788:	4620      	mov	r0, r4
 800678a:	f7ff fd57 	bl	800623c <SPI_EndRxTransaction>
 800678e:	bb18      	cbnz	r0, 80067d8 <HAL_SPI_Receive+0x140>
  hspi->State = HAL_SPI_STATE_READY;
 8006790:	2301      	movs	r3, #1
 8006792:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006796:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006798:	6d65      	ldr	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 800679a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800679e:	1aed      	subs	r5, r5, r3
 80067a0:	bf18      	it	ne
 80067a2:	2501      	movne	r5, #1
 80067a4:	e784      	b.n	80066b0 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a6:	f7fc fcd3 	bl	8003150 <HAL_GetTick>
 80067aa:	eba0 0008 	sub.w	r0, r0, r8
 80067ae:	42b0      	cmp	r0, r6
 80067b0:	d3e4      	bcc.n	800677c <HAL_SPI_Receive+0xe4>
 80067b2:	1c71      	adds	r1, r6, #1
 80067b4:	d0e2      	beq.n	800677c <HAL_SPI_Receive+0xe4>
          hspi->State = HAL_SPI_STATE_READY;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067bc:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80067be:	2503      	movs	r5, #3
          __HAL_UNLOCK(hspi);
 80067c0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80067c4:	e774      	b.n	80066b0 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c6:	f7fc fcc3 	bl	8003150 <HAL_GetTick>
 80067ca:	eba0 0008 	sub.w	r0, r0, r8
 80067ce:	42b0      	cmp	r0, r6
 80067d0:	d3b5      	bcc.n	800673e <HAL_SPI_Receive+0xa6>
 80067d2:	1c73      	adds	r3, r6, #1
 80067d4:	d0b3      	beq.n	800673e <HAL_SPI_Receive+0xa6>
 80067d6:	e7ee      	b.n	80067b6 <HAL_SPI_Receive+0x11e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d8:	2320      	movs	r3, #32
 80067da:	6563      	str	r3, [r4, #84]	@ 0x54
 80067dc:	e7d8      	b.n	8006790 <HAL_SPI_Receive+0xf8>

080067de <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 80067de:	4770      	bx	lr

080067e0 <HAL_SPI_IRQHandler>:
{
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80067e2:	6803      	ldr	r3, [r0, #0]
{
 80067e4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80067e6:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80067e8:	689a      	ldr	r2, [r3, #8]
{
 80067ea:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067ec:	0656      	lsls	r6, r2, #25
 80067ee:	ea4f 1592 	mov.w	r5, r2, lsr #6
 80067f2:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80067f6:	d408      	bmi.n	800680a <HAL_SPI_IRQHandler+0x2a>
 80067f8:	07d6      	lsls	r6, r2, #31
 80067fa:	d506      	bpl.n	800680a <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067fc:	064e      	lsls	r6, r1, #25
 80067fe:	d504      	bpl.n	800680a <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8006800:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 8006802:	b005      	add	sp, #20
 8006804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8006808:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800680a:	0796      	lsls	r6, r2, #30
 800680c:	d504      	bpl.n	8006818 <HAL_SPI_IRQHandler+0x38>
 800680e:	0608      	lsls	r0, r1, #24
 8006810:	d502      	bpl.n	8006818 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8006812:	4620      	mov	r0, r4
 8006814:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006816:	e7f4      	b.n	8006802 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006818:	ea45 1552 	orr.w	r5, r5, r2, lsr #5
 800681c:	0956      	lsrs	r6, r2, #5
 800681e:	07ea      	lsls	r2, r5, #31
 8006820:	d54c      	bpl.n	80068bc <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006822:	068d      	lsls	r5, r1, #26
 8006824:	d54a      	bpl.n	80068bc <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006826:	b177      	cbz	r7, 8006846 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006828:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 800682c:	2000      	movs	r0, #0
 800682e:	2a03      	cmp	r2, #3
 8006830:	d03e      	beq.n	80068b0 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006832:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006834:	f042 0204 	orr.w	r2, r2, #4
 8006838:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800683a:	9001      	str	r0, [sp, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	9201      	str	r2, [sp, #4]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	9201      	str	r2, [sp, #4]
 8006844:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006846:	07f0      	lsls	r0, r6, #31
 8006848:	d50c      	bpl.n	8006864 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800684a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006852:	2200      	movs	r2, #0
 8006854:	9203      	str	r2, [sp, #12]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	9203      	str	r2, [sp, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006866:	b34a      	cbz	r2, 80068bc <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800686e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006870:	2201      	movs	r2, #1
 8006872:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006876:	078a      	lsls	r2, r1, #30
 8006878:	d022      	beq.n	80068c0 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800687a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800687c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800687e:	f022 0203 	bic.w	r2, r2, #3
 8006882:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8006884:	b140      	cbz	r0, 8006898 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006886:	4b10      	ldr	r3, [pc, #64]	@ (80068c8 <HAL_SPI_IRQHandler+0xe8>)
 8006888:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800688a:	f7fc fcdd 	bl	8003248 <HAL_DMA_Abort_IT>
 800688e:	b118      	cbz	r0, 8006898 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006890:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006896:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006898:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800689a:	b178      	cbz	r0, 80068bc <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800689c:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <HAL_SPI_IRQHandler+0xe8>)
 800689e:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068a0:	f7fc fcd2 	bl	8003248 <HAL_DMA_Abort_IT>
 80068a4:	b150      	cbz	r0, 80068bc <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80068a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068ac:	6563      	str	r3, [r4, #84]	@ 0x54
 80068ae:	e005      	b.n	80068bc <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b0:	9002      	str	r0, [sp, #8]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	9202      	str	r2, [sp, #8]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	9b02      	ldr	r3, [sp, #8]
}
 80068bc:	b005      	add	sp, #20
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff ff8c 	bl	80067de <HAL_SPI_ErrorCallback>
 80068c6:	e7f9      	b.n	80068bc <HAL_SPI_IRQHandler+0xdc>
 80068c8:	080068cd 	.word	0x080068cd

080068cc <SPI_DMAAbortOnError>:
{
 80068cc:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80068ce:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068d0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 80068d2:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80068d4:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 80068d6:	f7ff ff82 	bl	80067de <HAL_SPI_ErrorCallback>
}
 80068da:	bd08      	pop	{r3, pc}

080068dc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068dc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068de:	6a02      	ldr	r2, [r0, #32]
{
 80068e0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e2:	f022 0201 	bic.w	r2, r2, #1
 80068e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ee:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80068f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80068f6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80068fa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068fc:	4d0a      	ldr	r5, [pc, #40]	@ (8006928 <TIM_OC1_SetConfig+0x4c>)
 80068fe:	42a8      	cmp	r0, r5
 8006900:	d10b      	bne.n	800691a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006902:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006904:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006908:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800690a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800690e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006912:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006914:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006918:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800691e:	684a      	ldr	r2, [r1, #4]
 8006920:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006922:	6203      	str	r3, [r0, #32]
}
 8006924:	bd70      	pop	{r4, r5, r6, pc}
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00

0800692c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692e:	6a02      	ldr	r2, [r0, #32]
{
 8006930:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006932:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006936:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800693c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800693e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006942:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006944:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006946:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800694a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694e:	4d0b      	ldr	r5, [pc, #44]	@ (800697c <TIM_OC3_SetConfig+0x50>)
 8006950:	42a8      	cmp	r0, r5
 8006952:	d10d      	bne.n	8006970 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006954:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800695a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006962:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006966:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8006968:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800696c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006972:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006974:	684a      	ldr	r2, [r1, #4]
 8006976:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	6203      	str	r3, [r0, #32]
}
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	40012c00 	.word	0x40012c00

08006980 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006980:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006982:	6a02      	ldr	r2, [r0, #32]
{
 8006984:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800698a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800698e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006992:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006996:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800699a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800699c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a4:	4d06      	ldr	r5, [pc, #24]	@ (80069c0 <TIM_OC4_SetConfig+0x40>)
 80069a6:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a8:	bf02      	ittt	eq
 80069aa:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ac:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b8:	684a      	ldr	r2, [r1, #4]
 80069ba:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	6203      	str	r3, [r0, #32]
}
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	40012c00 	.word	0x40012c00

080069c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80069c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d120      	bne.n	8006a0e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	2302      	movs	r3, #2
 80069ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069d2:	6803      	ldr	r3, [r0, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006a14 <HAL_TIM_Base_Start_IT+0x50>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00a      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x34>
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	d007      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x34>
 80069e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0x34>
 80069f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	2a06      	cmp	r2, #6
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	4770      	bx	lr
    return HAL_ERROR;
 8006a0e:	2001      	movs	r0, #1
}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40012c00 	.word	0x40012c00

08006a18 <HAL_TIM_Encoder_Start>:
{
 8006a18:	4603      	mov	r3, r0
 8006a1a:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a1c:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a20:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a24:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a28:	f893 4043 	ldrb.w	r4, [r3, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a2c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a2e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a30:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a32:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8006a34:	b9c1      	cbnz	r1, 8006a68 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a36:	2801      	cmp	r0, #1
 8006a38:	d145      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a3a:	2d01      	cmp	r5, #1
 8006a3c:	d113      	bne.n	8006a66 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a48:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a4a:	6a11      	ldr	r1, [r2, #32]
 8006a4c:	f021 0101 	bic.w	r1, r1, #1
 8006a50:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a52:	6a11      	ldr	r1, [r2, #32]
 8006a54:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 8006a58:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a5a:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8006a68:	2904      	cmp	r1, #4
 8006a6a:	d111      	bne.n	8006a90 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6c:	2a01      	cmp	r2, #1
 8006a6e:	d12a      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a70:	2c01      	cmp	r4, #1
 8006a72:	d128      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0xae>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a74:	2202      	movs	r2, #2
 8006a76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a7e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8006a80:	6a11      	ldr	r1, [r2, #32]
 8006a82:	f021 0110 	bic.w	r1, r1, #16
 8006a86:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a88:	6a11      	ldr	r1, [r2, #32]
 8006a8a:	f041 0110 	orr.w	r1, r1, #16
 8006a8e:	e7e3      	b.n	8006a58 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a90:	2801      	cmp	r0, #1
 8006a92:	d118      	bne.n	8006ac6 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a94:	2a01      	cmp	r2, #1
 8006a96:	d1e6      	bne.n	8006a66 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a98:	2d01      	cmp	r5, #1
 8006a9a:	d1e4      	bne.n	8006a66 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a9c:	2c01      	cmp	r4, #1
 8006a9e:	d1e2      	bne.n	8006a66 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ab2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8006ab4:	6a11      	ldr	r1, [r2, #32]
 8006ab6:	f021 0101 	bic.w	r1, r1, #1
 8006aba:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006abc:	6a11      	ldr	r1, [r2, #32]
 8006abe:	f041 0101 	orr.w	r1, r1, #1
 8006ac2:	6211      	str	r1, [r2, #32]
 8006ac4:	e7dc      	b.n	8006a80 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e7cd      	b.n	8006a66 <HAL_TIM_Encoder_Start+0x4e>

08006aca <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006aca:	4770      	bx	lr

08006acc <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006ad2:	6803      	ldr	r3, [r0, #0]
{
 8006ad4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006ad6:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ad8:	691e      	ldr	r6, [r3, #16]
{
 8006ada:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006adc:	07b1      	lsls	r1, r6, #30
 8006ade:	d50d      	bpl.n	8006afc <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ae0:	07aa      	lsls	r2, r5, #30
 8006ae2:	d50b      	bpl.n	8006afc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ae4:	f06f 0202 	mvn.w	r2, #2
 8006ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aea:	2201      	movs	r2, #1
 8006aec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	079b      	lsls	r3, r3, #30
 8006af2:	d069      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8006af4:	f7ff ffea 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af8:	2300      	movs	r3, #0
 8006afa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006afc:	0771      	lsls	r1, r6, #29
 8006afe:	d510      	bpl.n	8006b22 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b00:	076a      	lsls	r2, r5, #29
 8006b02:	d50e      	bpl.n	8006b22 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b04:	f06f 0204 	mvn.w	r2, #4
 8006b08:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b0e:	2202      	movs	r2, #2
 8006b10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006b18:	d05c      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1a:	f7ff ffd7 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b22:	0733      	lsls	r3, r6, #28
 8006b24:	d50f      	bpl.n	8006b46 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b26:	0728      	lsls	r0, r5, #28
 8006b28:	d50d      	bpl.n	8006b46 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b2a:	f06f 0208 	mvn.w	r2, #8
 8006b2e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8006b30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b34:	2204      	movs	r2, #4
 8006b36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	0799      	lsls	r1, r3, #30
 8006b3c:	d050      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	f7ff ffc5 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b42:	2300      	movs	r3, #0
 8006b44:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b46:	06f2      	lsls	r2, r6, #27
 8006b48:	d510      	bpl.n	8006b6c <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b4a:	06eb      	lsls	r3, r5, #27
 8006b4c:	d50e      	bpl.n	8006b6c <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b4e:	f06f 0210 	mvn.w	r2, #16
 8006b52:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8006b54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b58:	2208      	movs	r2, #8
 8006b5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006b62:	d043      	beq.n	8006bec <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b64:	f7ff ffb2 	bl	8006acc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b6c:	07f0      	lsls	r0, r6, #31
 8006b6e:	d508      	bpl.n	8006b82 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b70:	07e9      	lsls	r1, r5, #31
 8006b72:	d506      	bpl.n	8006b82 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b74:	f06f 0201 	mvn.w	r2, #1
 8006b78:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7e:	f7fa fdab 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b82:	0632      	lsls	r2, r6, #24
 8006b84:	d508      	bpl.n	8006b98 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b86:	062b      	lsls	r3, r5, #24
 8006b88:	d506      	bpl.n	8006b98 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b8e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8006b90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b94:	f000 f997 	bl	8006ec6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b98:	0670      	lsls	r0, r6, #25
 8006b9a:	d508      	bpl.n	8006bae <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b9c:	0669      	lsls	r1, r5, #25
 8006b9e:	d506      	bpl.n	8006bae <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ba4:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8006ba6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ba8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006baa:	f7ff ff91 	bl	8006ad0 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bae:	06b2      	lsls	r2, r6, #26
 8006bb0:	d522      	bpl.n	8006bf8 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bb2:	06ab      	lsls	r3, r5, #26
 8006bb4:	d520      	bpl.n	8006bf8 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bb6:	f06f 0220 	mvn.w	r2, #32
 8006bba:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8006bbc:	4620      	mov	r0, r4
}
 8006bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006bc4:	f000 b97e 	b.w	8006ec4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc8:	f7ff ff7f 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff ff7e 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006bd2:	e791      	b.n	8006af8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd4:	f7ff ff79 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7ff ff78 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006bde:	e79e      	b.n	8006b1e <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be0:	f7ff ff73 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7ff ff72 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006bea:	e7aa      	b.n	8006b42 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	f7ff ff6d 	bl	8006aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff ff6c 	bl	8006ace <HAL_TIM_PWM_PulseFinishedCallback>
 8006bf6:	e7b7      	b.n	8006b68 <HAL_TIM_IRQHandler+0x96>
}
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bfc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <TIM_Base_SetConfig+0x60>)
  tmpcr1 = TIMx->CR1;
 8006bfe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c00:	4290      	cmp	r0, r2
 8006c02:	d00a      	beq.n	8006c1a <TIM_Base_SetConfig+0x1e>
 8006c04:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0x1e>
 8006c0a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006c0e:	4290      	cmp	r0, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0x1e>
 8006c12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c16:	4290      	cmp	r0, r2
 8006c18:	d107      	bne.n	8006c2a <TIM_Base_SetConfig+0x2e>
    tmpcr1 |= Structure->CounterMode;
 8006c1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c20:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c22:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2a:	694a      	ldr	r2, [r1, #20]
 8006c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006c32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c34:	688b      	ldr	r3, [r1, #8]
 8006c36:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c38:	680b      	ldr	r3, [r1, #0]
 8006c3a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c3c:	4b07      	ldr	r3, [pc, #28]	@ (8006c5c <TIM_Base_SetConfig+0x60>)
 8006c3e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006c40:	bf04      	itt	eq
 8006c42:	690b      	ldreq	r3, [r1, #16]
 8006c44:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006c46:	2301      	movs	r3, #1
 8006c48:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c4a:	6903      	ldr	r3, [r0, #16]
 8006c4c:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c4e:	bf42      	ittt	mi
 8006c50:	6903      	ldrmi	r3, [r0, #16]
 8006c52:	f023 0301 	bicmi.w	r3, r3, #1
 8006c56:	6103      	strmi	r3, [r0, #16]
}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40012c00 	.word	0x40012c00

08006c60 <HAL_TIM_PWM_Init>:
{
 8006c60:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006c62:	4604      	mov	r4, r0
 8006c64:	b330      	cbz	r0, 8006cb4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c66:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c6a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c6e:	b91b      	cbnz	r3, 8006c78 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006c70:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006c74:	f7fb fff6 	bl	8002c64 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	1d21      	adds	r1, r4, #4
 8006c82:	f7ff ffbb 	bl	8006bfc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c86:	2301      	movs	r3, #1
  return HAL_OK;
 8006c88:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006c92:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006c96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006c9a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006caa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006cae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006cb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e7fc      	b.n	8006cb2 <HAL_TIM_PWM_Init+0x52>

08006cb8 <HAL_TIM_Encoder_Init>:
{
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	460d      	mov	r5, r1
  if (htim == NULL)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d04c      	beq.n	8006d5c <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006cc6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cca:	b91b      	cbnz	r3, 8006cd4 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8006ccc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006cd0:	f7fb ff7a 	bl	8002bc8 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cd6:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cdc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ce0:	6883      	ldr	r3, [r0, #8]
 8006ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ce6:	f023 0307 	bic.w	r3, r3, #7
 8006cea:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cec:	f7ff ff86 	bl	8006bfc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8006cf2:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 8006cf4:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cf6:	69ae      	ldr	r6, [r5, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8006cf8:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cfa:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d00:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d04:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8006d08:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d0a:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d0c:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8006d14:	68ee      	ldr	r6, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d16:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d1a:	4333      	orrs	r3, r6
 8006d1c:	6a2e      	ldr	r6, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d1e:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d22:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer = htim->Instance->CCER;
 8006d26:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d28:	696e      	ldr	r6, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d2a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d2c:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d2e:	f027 0722 	bic.w	r7, r7, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d32:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  htim->Instance->SMCR = tmpsmcr;
 8006d36:	6081      	str	r1, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d38:	4317      	orrs	r7, r2
  htim->Instance->CCMR1 = tmpccmr1;
 8006d3a:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d3c:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8006d3e:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8006d40:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d42:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8006d56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	e7fc      	b.n	8006d5a <HAL_TIM_Encoder_Init+0xa2>

08006d60 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006d60:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d62:	6a02      	ldr	r2, [r0, #32]
{
 8006d64:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d66:	f022 0210 	bic.w	r2, r2, #16
 8006d6a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006d6c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006d6e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d72:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006d7c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d84:	4d0b      	ldr	r5, [pc, #44]	@ (8006db4 <TIM_OC2_SetConfig+0x54>)
 8006d86:	42a8      	cmp	r0, r5
 8006d88:	d10d      	bne.n	8006da6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d94:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d98:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006d9c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006da6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006da8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006daa:	684a      	ldr	r2, [r1, #4]
 8006dac:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006dae:	6203      	str	r3, [r0, #32]
}
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00

08006db8 <HAL_TIM_PWM_ConfigChannel>:
{
 8006db8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006dba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8006dbe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d04f      	beq.n	8006e64 <HAL_TIM_PWM_ConfigChannel+0xac>
 8006dc4:	2001      	movs	r0, #1
  switch (Channel)
 8006dc6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006dc8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8006dcc:	d03a      	beq.n	8006e44 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006dce:	d806      	bhi.n	8006dde <HAL_TIM_PWM_ConfigChannel+0x26>
 8006dd0:	b1ba      	cbz	r2, 8006e02 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8006dd2:	2a04      	cmp	r2, #4
 8006dd4:	d026      	beq.n	8006e24 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006dde:	2a0c      	cmp	r2, #12
 8006de0:	d1f9      	bne.n	8006dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006de2:	6820      	ldr	r0, [r4, #0]
 8006de4:	f7ff fdcc 	bl	8006980 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006de8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dea:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006df0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006df2:	69c3      	ldr	r3, [r0, #28]
 8006df4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006df8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dfa:	69c3      	ldr	r3, [r0, #28]
 8006dfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e00:	e02e      	b.n	8006e60 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e02:	6820      	ldr	r0, [r4, #0]
 8006e04:	f7ff fd6a 	bl	80068dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e08:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e0a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e0c:	f043 0308 	orr.w	r3, r3, #8
 8006e10:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e12:	6983      	ldr	r3, [r0, #24]
 8006e14:	f023 0304 	bic.w	r3, r3, #4
 8006e18:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e1a:	6983      	ldr	r3, [r0, #24]
 8006e1c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e1e:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2000      	movs	r0, #0
 8006e22:	e7d8      	b.n	8006dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	f7ff ff9b 	bl	8006d60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e2a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e2c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006e32:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e34:	6983      	ldr	r3, [r0, #24]
 8006e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e3a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e3c:	6983      	ldr	r3, [r0, #24]
 8006e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e42:	e7ec      	b.n	8006e1e <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	f7ff fd71 	bl	800692c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e4c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4e:	f043 0308 	orr.w	r3, r3, #8
 8006e52:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e54:	69c3      	ldr	r3, [r0, #28]
 8006e56:	f023 0304 	bic.w	r3, r3, #4
 8006e5a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e5c:	69c3      	ldr	r3, [r0, #28]
 8006e5e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e60:	61c3      	str	r3, [r0, #28]
      break;
 8006e62:	e7dd      	b.n	8006e20 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8006e64:	2002      	movs	r0, #2
 8006e66:	e7b9      	b.n	8006ddc <HAL_TIM_PWM_ConfigChannel+0x24>

08006e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e68:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8006e6e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	f04f 0002 	mov.w	r0, #2
 8006e76:	d022      	beq.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e78:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006e7e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e80:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e82:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e86:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006e88:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e8a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8c:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	d00a      	beq.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e96:	d007      	beq.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006e98:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d003      	beq.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006ea0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	d104      	bne.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ea8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eaa:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eae:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006eb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006eb6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006eba:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8006ebe:	bd30      	pop	{r4, r5, pc}
 8006ec0:	40012c00 	.word	0x40012c00

08006ec4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006ec6:	4770      	bx	lr

08006ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ec8:	b084      	sub	sp, #16
 8006eca:	a804      	add	r0, sp, #16
 8006ecc:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	b004      	add	sp, #16
 8006ed4:	4770      	bx	lr

08006ed6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ed6:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ed8:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8006edc:	2000      	movs	r0, #0
 8006ede:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8006ee6:	4770      	bx	lr

08006ee8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ee8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8006eec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ef0:	045b      	lsls	r3, r3, #17
 8006ef2:	0c5b      	lsrs	r3, r3, #17
 8006ef4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	4770      	bx	lr

08006efc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006efc:	2000      	movs	r0, #0
 8006efe:	4770      	bx	lr

08006f00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f02:	4604      	mov	r4, r0
 8006f04:	a804      	add	r0, sp, #16
 8006f06:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f0a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8006f12:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f16:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f1a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8006f1e:	b004      	add	sp, #16
 8006f20:	bd10      	pop	{r4, pc}
	...

08006f24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f26:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006f28:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f2a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8006f2e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f30:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8006f34:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8006f38:	0424      	lsls	r4, r4, #16
 8006f3a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8006f3c:	2d03      	cmp	r5, #3
 8006f3e:	d803      	bhi.n	8006f48 <USB_ActivateEndpoint+0x24>
 8006f40:	e8df f005 	tbb	[pc, r5]
 8006f44:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8006f48:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006f4a:	f248 0680 	movw	r6, #32896	@ 0x8080
 8006f4e:	4334      	orrs	r4, r6
 8006f50:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006f54:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006f58:	4f9f      	ldr	r7, [pc, #636]	@ (80071d8 <USB_ActivateEndpoint+0x2b4>)
 8006f5a:	b2a4      	uxth	r4, r4
 8006f5c:	403c      	ands	r4, r7
 8006f5e:	4314      	orrs	r4, r2
 8006f60:	4334      	orrs	r4, r6
 8006f62:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8006f66:	7b0c      	ldrb	r4, [r1, #12]
 8006f68:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	f040 808d 	bne.w	800708c <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f72:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8006f74:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f76:	0864      	lsrs	r4, r4, #1
 8006f78:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8006f7a:	b37e      	cbz	r6, 8006fdc <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f7c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8006f80:	b289      	uxth	r1, r1
 8006f82:	4461      	add	r1, ip
 8006f84:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f88:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006f8c:	0649      	lsls	r1, r1, #25
 8006f8e:	d509      	bpl.n	8006fa4 <USB_ActivateEndpoint+0x80>
 8006f90:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006f94:	b289      	uxth	r1, r1
 8006f96:	4039      	ands	r1, r7
 8006f98:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006f9c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006fa0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fa4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006fa8:	4c8c      	ldr	r4, [pc, #560]	@ (80071dc <USB_ActivateEndpoint+0x2b8>)
 8006faa:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8006fac:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fae:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006fb2:	d001      	beq.n	8006fb8 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fb4:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fb8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006fbc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006fc0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8006fc4:	e04c      	b.n	8007060 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8006fc6:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8006fc8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8006fcc:	e7bd      	b.n	8006f4a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006fce:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7b9      	b.n	8006f4a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006fd6:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8006fda:	e7fa      	b.n	8006fd2 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fdc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006fe0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fe2:	b2ad      	uxth	r5, r5
 8006fe4:	4465      	add	r5, ip
 8006fe6:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006fea:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8006fee:	293e      	cmp	r1, #62	@ 0x3e
 8006ff0:	b2a4      	uxth	r4, r4
 8006ff2:	4464      	add	r4, ip
 8006ff4:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8006ff8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006ffc:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8007000:	d92f      	bls.n	8007062 <USB_ActivateEndpoint+0x13e>
 8007002:	094d      	lsrs	r5, r1, #5
 8007004:	06ce      	lsls	r6, r1, #27
 8007006:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800700a:	bf08      	it	eq
 800700c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8007010:	b289      	uxth	r1, r1
 8007012:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8007016:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800701a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800701e:	b289      	uxth	r1, r1
 8007020:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007024:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007028:	044f      	lsls	r7, r1, #17
 800702a:	d50d      	bpl.n	8007048 <USB_ActivateEndpoint+0x124>
 800702c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007030:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007034:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007038:	0409      	lsls	r1, r1, #16
 800703a:	0c09      	lsrs	r1, r1, #16
 800703c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8007040:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007044:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8007048:	4c65      	ldr	r4, [pc, #404]	@ (80071e0 <USB_ActivateEndpoint+0x2bc>)
 800704a:	b9c2      	cbnz	r2, 800707e <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	b292      	uxth	r2, r2
 8007050:	4022      	ands	r2, r4
 8007052:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8007056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800705a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800705e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8007060:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007062:	b911      	cbnz	r1, 800706a <USB_ActivateEndpoint+0x146>
 8007064:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8007068:	e7d5      	b.n	8007016 <USB_ActivateEndpoint+0xf2>
 800706a:	084d      	lsrs	r5, r1, #1
 800706c:	07c9      	lsls	r1, r1, #31
 800706e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8007072:	bf48      	it	mi
 8007074:	3501      	addmi	r5, #1
 8007076:	b289      	uxth	r1, r1
 8007078:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800707c:	e7cf      	b.n	800701e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800707e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007082:	b289      	uxth	r1, r1
 8007084:	4021      	ands	r1, r4
 8007086:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 800708a:	e795      	b.n	8006fb8 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 800708c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800708e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8007092:	d15b      	bne.n	800714c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007094:	b2a4      	uxth	r4, r4
 8007096:	403c      	ands	r4, r7
 8007098:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 800709c:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 80070a0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070a4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80070a8:	890e      	ldrh	r6, [r1, #8]
 80070aa:	b2a4      	uxth	r4, r4
 80070ac:	0876      	lsrs	r6, r6, #1
 80070ae:	4464      	add	r4, ip
 80070b0:	0076      	lsls	r6, r6, #1
 80070b2:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 80070b6:	894e      	ldrh	r6, [r1, #10]
 80070b8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80070bc:	0876      	lsrs	r6, r6, #1
 80070be:	b2a4      	uxth	r4, r4
 80070c0:	4464      	add	r4, ip
 80070c2:	0076      	lsls	r6, r6, #1
 80070c4:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80070c8:	7849      	ldrb	r1, [r1, #1]
 80070ca:	2900      	cmp	r1, #0
 80070cc:	d148      	bne.n	8007160 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80070d2:	044e      	lsls	r6, r1, #17
 80070d4:	d50d      	bpl.n	80070f2 <USB_ActivateEndpoint+0x1ce>
 80070d6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80070da:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80070de:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80070e2:	0409      	lsls	r1, r1, #16
 80070e4:	0c09      	lsrs	r1, r1, #16
 80070e6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80070ea:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80070ee:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80070f6:	064d      	lsls	r5, r1, #25
 80070f8:	d50d      	bpl.n	8007116 <USB_ActivateEndpoint+0x1f2>
 80070fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80070fe:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007102:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007106:	0409      	lsls	r1, r1, #16
 8007108:	0c09      	lsrs	r1, r1, #16
 800710a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800710e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8007112:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007116:	f248 0480 	movw	r4, #32896	@ 0x8080
 800711a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800711e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007122:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007126:	0409      	lsls	r1, r1, #16
 8007128:	0c09      	lsrs	r1, r1, #16
 800712a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 800712e:	4321      	orrs	r1, r4
 8007130:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007134:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007138:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800713c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007140:	0409      	lsls	r1, r1, #16
 8007142:	0c09      	lsrs	r1, r1, #16
 8007144:	430c      	orrs	r4, r1
 8007146:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800714a:	e789      	b.n	8007060 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800714c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8007150:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8007154:	0424      	lsls	r4, r4, #16
 8007156:	0c24      	lsrs	r4, r4, #16
 8007158:	4326      	orrs	r6, r4
 800715a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 800715e:	e7a1      	b.n	80070a4 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007160:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007164:	044c      	lsls	r4, r1, #17
 8007166:	d50d      	bpl.n	8007184 <USB_ActivateEndpoint+0x260>
 8007168:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800716c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007170:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007174:	0409      	lsls	r1, r1, #16
 8007176:	0c09      	lsrs	r1, r1, #16
 8007178:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800717c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007180:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007184:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007188:	0649      	lsls	r1, r1, #25
 800718a:	d50d      	bpl.n	80071a8 <USB_ActivateEndpoint+0x284>
 800718c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007190:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007194:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007198:	0409      	lsls	r1, r1, #16
 800719a:	0c09      	lsrs	r1, r1, #16
 800719c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80071a0:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80071a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071a8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80071ac:	4c0b      	ldr	r4, [pc, #44]	@ (80071dc <USB_ActivateEndpoint+0x2b8>)
 80071ae:	b289      	uxth	r1, r1
 80071b0:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80071b2:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071b4:	bf18      	it	ne
 80071b6:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ba:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80071be:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80071c2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80071ca:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80071ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80071d2:	0409      	lsls	r1, r1, #16
 80071d4:	0c09      	lsrs	r1, r1, #16
 80071d6:	e6ef      	b.n	8006fb8 <USB_ActivateEndpoint+0x94>
 80071d8:	ffff8f8f 	.word	0xffff8f8f
 80071dc:	ffff8fbf 	.word	0xffff8fbf
 80071e0:	ffffbf8f 	.word	0xffffbf8f

080071e4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80071e4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071e6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80071e8:	7b09      	ldrb	r1, [r1, #12]
 80071ea:	bbd9      	cbnz	r1, 8007264 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80071ec:	b30a      	cbz	r2, 8007232 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80071f2:	0651      	lsls	r1, r2, #25
 80071f4:	d50d      	bpl.n	8007212 <USB_DeactivateEndpoint+0x2e>
 80071f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80071fa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80071fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007202:	0412      	lsls	r2, r2, #16
 8007204:	0c12      	lsrs	r2, r2, #16
 8007206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800720a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800720e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007212:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007216:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800721a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800721e:	0412      	lsls	r2, r2, #16
 8007220:	0c12      	lsrs	r2, r2, #16
 8007222:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007226:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800722a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800722e:	2000      	movs	r0, #0
 8007230:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007232:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007236:	0452      	lsls	r2, r2, #17
 8007238:	d50d      	bpl.n	8007256 <USB_DeactivateEndpoint+0x72>
 800723a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800723e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007242:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007246:	0412      	lsls	r2, r2, #16
 8007248:	0c12      	lsrs	r2, r2, #16
 800724a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800724e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007252:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007256:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800725a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800725e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007262:	e7dc      	b.n	800721e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8007264:	2a00      	cmp	r2, #0
 8007266:	d14a      	bne.n	80072fe <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007268:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800726c:	0451      	lsls	r1, r2, #17
 800726e:	d50d      	bpl.n	800728c <USB_DeactivateEndpoint+0xa8>
 8007270:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007274:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007278:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800727c:	0412      	lsls	r2, r2, #16
 800727e:	0c12      	lsrs	r2, r2, #16
 8007280:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007284:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007288:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800728c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007290:	0652      	lsls	r2, r2, #25
 8007292:	d50d      	bpl.n	80072b0 <USB_DeactivateEndpoint+0xcc>
 8007294:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007298:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800729c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80072a0:	0412      	lsls	r2, r2, #16
 80072a2:	0c12      	lsrs	r2, r2, #16
 80072a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072a8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80072ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072b0:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80072b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80072b8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80072bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80072c0:	0412      	lsls	r2, r2, #16
 80072c2:	0c12      	lsrs	r2, r2, #16
 80072c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072c8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80072cc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80072d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80072dc:	0412      	lsls	r2, r2, #16
 80072de:	0c12      	lsrs	r2, r2, #16
 80072e0:	430a      	orrs	r2, r1
 80072e2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80072ea:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80072ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072f2:	0412      	lsls	r2, r2, #16
 80072f4:	0c12      	lsrs	r2, r2, #16
 80072f6:	4311      	orrs	r1, r2
 80072f8:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80072fc:	e797      	b.n	800722e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007302:	0451      	lsls	r1, r2, #17
 8007304:	d50d      	bpl.n	8007322 <USB_DeactivateEndpoint+0x13e>
 8007306:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800730a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800730e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007312:	0412      	lsls	r2, r2, #16
 8007314:	0c12      	lsrs	r2, r2, #16
 8007316:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800731a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800731e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007322:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007326:	0652      	lsls	r2, r2, #25
 8007328:	d50d      	bpl.n	8007346 <USB_DeactivateEndpoint+0x162>
 800732a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800732e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007332:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007336:	0412      	lsls	r2, r2, #16
 8007338:	0c12      	lsrs	r2, r2, #16
 800733a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800733e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007342:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007346:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800734a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800734e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007352:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007356:	0412      	lsls	r2, r2, #16
 8007358:	0c12      	lsrs	r2, r2, #16
 800735a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800735e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007362:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007366:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800736a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800736e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007372:	0412      	lsls	r2, r2, #16
 8007374:	0c12      	lsrs	r2, r2, #16
 8007376:	430a      	orrs	r2, r1
 8007378:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800737c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007380:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007384:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007388:	e7b3      	b.n	80072f2 <USB_DeactivateEndpoint+0x10e>

0800738a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800738a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800738c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800738e:	b18b      	cbz	r3, 80073b4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007390:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	0c1b      	lsrs	r3, r3, #16
 80073a0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80073b0:	2000      	movs	r0, #0
 80073b2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80073b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80073b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80073c8:	e7ec      	b.n	80073a4 <USB_EPSetStall+0x1a>

080073ca <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80073ca:	7b0b      	ldrb	r3, [r1, #12]
 80073cc:	bb3b      	cbnz	r3, 800741e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80073ce:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d0:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80073d2:	b333      	cbz	r3, 8007422 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80073d8:	065b      	lsls	r3, r3, #25
 80073da:	d50d      	bpl.n	80073f8 <USB_EPClearStall+0x2e>
 80073dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80073f8:	78cb      	ldrb	r3, [r1, #3]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d00f      	beq.n	800741e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800741e:	2000      	movs	r0, #0
 8007420:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007422:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007426:	045b      	lsls	r3, r3, #17
 8007428:	d50d      	bpl.n	8007446 <USB_EPClearStall+0x7c>
 800742a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007436:	041b      	lsls	r3, r3, #16
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800743e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007442:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007446:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800744a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800744e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800745a:	e7da      	b.n	8007412 <USB_EPClearStall+0x48>

0800745c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800745c:	b911      	cbnz	r1, 8007464 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8007464:	2000      	movs	r0, #0
 8007466:	4770      	bx	lr

08007468 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8007468:	2000      	movs	r0, #0
 800746a:	4770      	bx	lr

0800746c <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 800746c:	2000      	movs	r0, #0
 800746e:	4770      	bx	lr

08007470 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007470:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8007474:	b280      	uxth	r0, r0
 8007476:	4770      	bx	lr

08007478 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007478:	2000      	movs	r0, #0
 800747a:	4770      	bx	lr

0800747c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800747c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007480:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007482:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 800748c:	4283      	cmp	r3, r0
 800748e:	d100      	bne.n	8007492 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8007490:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007492:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8007496:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800749a:	e7f7      	b.n	800748c <USB_WritePMA+0x10>

0800749c <USB_EPStartXfer>:
{
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80074a0:	784b      	ldrb	r3, [r1, #1]
{
 80074a2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80074a4:	2b01      	cmp	r3, #1
{
 80074a6:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 80074a8:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 80074aa:	f040 8118 	bne.w	80076de <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 80074ae:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80074b2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074b4:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 80074b6:	454f      	cmp	r7, r9
 80074b8:	bf28      	it	cs
 80074ba:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80074bc:	bb0a      	cbnz	r2, 8007502 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074be:	b2bf      	uxth	r7, r7
 80074c0:	88ea      	ldrh	r2, [r5, #6]
 80074c2:	463b      	mov	r3, r7
 80074c4:	f7ff ffda 	bl	800747c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074c8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80074cc:	7829      	ldrb	r1, [r5, #0]
 80074ce:	b280      	uxth	r0, r0
 80074d0:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80074d4:	0109      	lsls	r1, r1, #4
 80074d6:	4402      	add	r2, r0
 80074d8:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074da:	782a      	ldrb	r2, [r5, #0]
 80074dc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80074e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 80074f0:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fa:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8007502:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007504:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8007508:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800750a:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800750c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8007510:	f040 80d0 	bne.w	80076b4 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8007514:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007516:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800751a:	f080 80b4 	bcs.w	8007686 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800751e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007522:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007526:	0412      	lsls	r2, r2, #16
 8007528:	0c12      	lsrs	r2, r2, #16
 800752a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800752e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007532:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007536:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800753a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 800753e:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007540:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8007544:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8007546:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800754a:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800754c:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007550:	d04e      	beq.n	80075f0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007552:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8007556:	4472      	add	r2, lr
 8007558:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800755c:	896a      	ldrh	r2, [r5, #10]
 800755e:	f7ff ff8d 	bl	800747c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007562:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8007564:	bf36      	itet	cc
 8007566:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8007568:	2300      	movcs	r3, #0
 800756a:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800756c:	786a      	ldrb	r2, [r5, #1]
 800756e:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8007570:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007574:	b2b3      	uxth	r3, r6
 8007576:	bb7a      	cbnz	r2, 80075d8 <USB_EPStartXfer+0x13c>
 8007578:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800757c:	7828      	ldrb	r0, [r5, #0]
 800757e:	b292      	uxth	r2, r2
 8007580:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8007584:	0100      	lsls	r0, r0, #4
 8007586:	4411      	add	r1, r2
 8007588:	5a42      	ldrh	r2, [r0, r1]
 800758a:	2e3e      	cmp	r6, #62	@ 0x3e
 800758c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007590:	5242      	strh	r2, [r0, r1]
 8007592:	d914      	bls.n	80075be <USB_EPStartXfer+0x122>
 8007594:	5a42      	ldrh	r2, [r0, r1]
 8007596:	0977      	lsrs	r7, r6, #5
 8007598:	06f6      	lsls	r6, r6, #27
 800759a:	bf08      	it	eq
 800759c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80075a0:	b292      	uxth	r2, r2
 80075a2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80075a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80075aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80075ae:	b292      	uxth	r2, r2
 80075b0:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b2:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b4:	4651      	mov	r1, sl
 80075b6:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b8:	f7ff ff60 	bl	800747c <USB_WritePMA>
 80075bc:	e78d      	b.n	80074da <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075be:	b90e      	cbnz	r6, 80075c4 <USB_EPStartXfer+0x128>
 80075c0:	5a42      	ldrh	r2, [r0, r1]
 80075c2:	e7f0      	b.n	80075a6 <USB_EPStartXfer+0x10a>
 80075c4:	07f2      	lsls	r2, r6, #31
 80075c6:	5a42      	ldrh	r2, [r0, r1]
 80075c8:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80075cc:	bf48      	it	mi
 80075ce:	3701      	addmi	r7, #1
 80075d0:	b292      	uxth	r2, r2
 80075d2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80075d6:	e7ea      	b.n	80075ae <USB_EPStartXfer+0x112>
 80075d8:	2a01      	cmp	r2, #1
 80075da:	d1ea      	bne.n	80075b2 <USB_EPStartXfer+0x116>
 80075dc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80075e0:	7829      	ldrb	r1, [r5, #0]
 80075e2:	b280      	uxth	r0, r0
 80075e4:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80075e8:	0109      	lsls	r1, r1, #4
 80075ea:	4402      	add	r2, r0
 80075ec:	528b      	strh	r3, [r1, r2]
 80075ee:	e7e0      	b.n	80075b2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075f0:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80075f4:	4472      	add	r2, lr
 80075f6:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075fa:	892a      	ldrh	r2, [r5, #8]
 80075fc:	f7ff ff3e 	bl	800747c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007600:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8007602:	bf36      	itet	cc
 8007604:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8007606:	4643      	movcs	r3, r8
 8007608:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800760a:	786a      	ldrb	r2, [r5, #1]
 800760c:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800760e:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007612:	b2b3      	uxth	r3, r6
 8007614:	bb5a      	cbnz	r2, 800766e <USB_EPStartXfer+0x1d2>
 8007616:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800761a:	7828      	ldrb	r0, [r5, #0]
 800761c:	b292      	uxth	r2, r2
 800761e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8007622:	0100      	lsls	r0, r0, #4
 8007624:	4411      	add	r1, r2
 8007626:	5a42      	ldrh	r2, [r0, r1]
 8007628:	2e3e      	cmp	r6, #62	@ 0x3e
 800762a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800762e:	5242      	strh	r2, [r0, r1]
 8007630:	d910      	bls.n	8007654 <USB_EPStartXfer+0x1b8>
 8007632:	5a42      	ldrh	r2, [r0, r1]
 8007634:	0977      	lsrs	r7, r6, #5
 8007636:	06f6      	lsls	r6, r6, #27
 8007638:	bf08      	it	eq
 800763a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800763e:	b292      	uxth	r2, r2
 8007640:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007644:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007648:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800764c:	b292      	uxth	r2, r2
 800764e:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007650:	896a      	ldrh	r2, [r5, #10]
 8007652:	e7af      	b.n	80075b4 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007654:	b90e      	cbnz	r6, 800765a <USB_EPStartXfer+0x1be>
 8007656:	5a42      	ldrh	r2, [r0, r1]
 8007658:	e7f4      	b.n	8007644 <USB_EPStartXfer+0x1a8>
 800765a:	07f2      	lsls	r2, r6, #31
 800765c:	5a42      	ldrh	r2, [r0, r1]
 800765e:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8007662:	bf48      	it	mi
 8007664:	3701      	addmi	r7, #1
 8007666:	b292      	uxth	r2, r2
 8007668:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800766c:	e7ee      	b.n	800764c <USB_EPStartXfer+0x1b0>
 800766e:	2a01      	cmp	r2, #1
 8007670:	d1ee      	bne.n	8007650 <USB_EPStartXfer+0x1b4>
 8007672:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8007676:	7829      	ldrb	r1, [r5, #0]
 8007678:	b280      	uxth	r0, r0
 800767a:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800767e:	0109      	lsls	r1, r1, #4
 8007680:	4402      	add	r2, r0
 8007682:	528b      	strh	r3, [r1, r2]
 8007684:	e7e4      	b.n	8007650 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007686:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800768a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800768e:	0412      	lsls	r2, r2, #16
 8007690:	0c12      	lsrs	r2, r2, #16
 8007692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007696:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800769a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800769e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80076a2:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	441a      	add	r2, r3
 80076aa:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076ac:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b0:	892a      	ldrh	r2, [r5, #8]
 80076b2:	e781      	b.n	80075b8 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80076b4:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076b6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80076ba:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076bc:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80076c0:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076c2:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076c4:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076c6:	d506      	bpl.n	80076d6 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076c8:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80076cc:	4432      	add	r2, r6
 80076ce:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076d2:	896a      	ldrh	r2, [r5, #10]
 80076d4:	e770      	b.n	80075b8 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076d6:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80076da:	4432      	add	r2, r6
 80076dc:	e7e6      	b.n	80076ac <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d13b      	bne.n	800775a <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80076e2:	698b      	ldr	r3, [r1, #24]
 80076e4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076e6:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 80076ea:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80076ec:	bf84      	itt	hi
 80076ee:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 80076f0:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076f2:	7829      	ldrb	r1, [r5, #0]
 80076f4:	61aa      	str	r2, [r5, #24]
 80076f6:	b280      	uxth	r0, r0
 80076f8:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80076fc:	0109      	lsls	r1, r1, #4
 80076fe:	4402      	add	r2, r0
 8007700:	5a88      	ldrh	r0, [r1, r2]
 8007702:	2b3e      	cmp	r3, #62	@ 0x3e
 8007704:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007708:	5288      	strh	r0, [r1, r2]
 800770a:	d91a      	bls.n	8007742 <USB_EPStartXfer+0x2a6>
 800770c:	0958      	lsrs	r0, r3, #5
 800770e:	06de      	lsls	r6, r3, #27
 8007710:	5a8b      	ldrh	r3, [r1, r2]
 8007712:	bf08      	it	eq
 8007714:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8007718:	b29b      	uxth	r3, r3
 800771a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800771e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007726:	b29b      	uxth	r3, r3
 8007728:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800772a:	782a      	ldrb	r2, [r5, #0]
 800772c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8007730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007738:	041b      	lsls	r3, r3, #16
 800773a:	0c1b      	lsrs	r3, r3, #16
 800773c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007740:	e6d6      	b.n	80074f0 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007742:	b90b      	cbnz	r3, 8007748 <USB_EPStartXfer+0x2ac>
 8007744:	5a8b      	ldrh	r3, [r1, r2]
 8007746:	e7ea      	b.n	800771e <USB_EPStartXfer+0x282>
 8007748:	0858      	lsrs	r0, r3, #1
 800774a:	07db      	lsls	r3, r3, #31
 800774c:	5a8b      	ldrh	r3, [r1, r2]
 800774e:	bf48      	it	mi
 8007750:	3001      	addmi	r0, #1
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8007758:	e7e5      	b.n	8007726 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800775a:	78ca      	ldrb	r2, [r1, #3]
 800775c:	2a02      	cmp	r2, #2
 800775e:	d170      	bne.n	8007842 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007760:	2b00      	cmp	r3, #0
 8007762:	d138      	bne.n	80077d6 <USB_EPStartXfer+0x33a>
 8007764:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007768:	780b      	ldrb	r3, [r1, #0]
 800776a:	b292      	uxth	r2, r2
 800776c:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	4410      	add	r0, r2
 8007774:	5ac2      	ldrh	r2, [r0, r3]
 8007776:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800777a:	52c2      	strh	r2, [r0, r3]
 800777c:	690a      	ldr	r2, [r1, #16]
 800777e:	2a3e      	cmp	r2, #62	@ 0x3e
 8007780:	d946      	bls.n	8007810 <USB_EPStartXfer+0x374>
 8007782:	5ac1      	ldrh	r1, [r0, r3]
 8007784:	0956      	lsrs	r6, r2, #5
 8007786:	06d7      	lsls	r7, r2, #27
 8007788:	bf08      	it	eq
 800778a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800778e:	b289      	uxth	r1, r1
 8007790:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007794:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007798:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800779c:	b289      	uxth	r1, r1
 800779e:	52c1      	strh	r1, [r0, r3]
 80077a0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80077a4:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80077a8:	b280      	uxth	r0, r0
 80077aa:	4401      	add	r1, r0
 80077ac:	5ac8      	ldrh	r0, [r1, r3]
 80077ae:	2a3e      	cmp	r2, #62	@ 0x3e
 80077b0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80077b4:	52c8      	strh	r0, [r1, r3]
 80077b6:	d938      	bls.n	800782a <USB_EPStartXfer+0x38e>
 80077b8:	0950      	lsrs	r0, r2, #5
 80077ba:	06d7      	lsls	r7, r2, #27
 80077bc:	5aca      	ldrh	r2, [r1, r3]
 80077be:	bf08      	it	eq
 80077c0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80077c4:	b292      	uxth	r2, r2
 80077c6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80077ca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80077ce:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80077d2:	b292      	uxth	r2, r2
 80077d4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80077d6:	69eb      	ldr	r3, [r5, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0a6      	beq.n	800772a <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80077dc:	f244 0340 	movw	r3, #16448	@ 0x4040
 80077e0:	782a      	ldrb	r2, [r5, #0]
 80077e2:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077e6:	ea03 0001 	and.w	r0, r3, r1
 80077ea:	438b      	bics	r3, r1
 80077ec:	d001      	beq.n	80077f2 <USB_EPStartXfer+0x356>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d19b      	bne.n	800772a <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077f2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80077f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fe:	041b      	lsls	r3, r3, #16
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007806:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800780a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800780e:	e78c      	b.n	800772a <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007810:	b90a      	cbnz	r2, 8007816 <USB_EPStartXfer+0x37a>
 8007812:	5ac1      	ldrh	r1, [r0, r3]
 8007814:	e7be      	b.n	8007794 <USB_EPStartXfer+0x2f8>
 8007816:	07d1      	lsls	r1, r2, #31
 8007818:	5ac1      	ldrh	r1, [r0, r3]
 800781a:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800781e:	bf48      	it	mi
 8007820:	3601      	addmi	r6, #1
 8007822:	b289      	uxth	r1, r1
 8007824:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007828:	e7b8      	b.n	800779c <USB_EPStartXfer+0x300>
 800782a:	b90a      	cbnz	r2, 8007830 <USB_EPStartXfer+0x394>
 800782c:	5aca      	ldrh	r2, [r1, r3]
 800782e:	e7cc      	b.n	80077ca <USB_EPStartXfer+0x32e>
 8007830:	0850      	lsrs	r0, r2, #1
 8007832:	07d6      	lsls	r6, r2, #31
 8007834:	5aca      	ldrh	r2, [r1, r3]
 8007836:	bf48      	it	mi
 8007838:	3001      	addmi	r0, #1
 800783a:	b292      	uxth	r2, r2
 800783c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007840:	e7c7      	b.n	80077d2 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8007842:	2a01      	cmp	r2, #1
 8007844:	d15d      	bne.n	8007902 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8007846:	698a      	ldr	r2, [r1, #24]
 8007848:	6909      	ldr	r1, [r1, #16]
 800784a:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800784c:	bf94      	ite	ls
 800784e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007850:	1a50      	subhi	r0, r2, r1
 8007852:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8007854:	bf88      	it	hi
 8007856:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007858:	2b00      	cmp	r3, #0
 800785a:	f47f af66 	bne.w	800772a <USB_EPStartXfer+0x28e>
 800785e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8007862:	782b      	ldrb	r3, [r5, #0]
 8007864:	b289      	uxth	r1, r1
 8007866:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	4408      	add	r0, r1
 800786e:	5ac1      	ldrh	r1, [r0, r3]
 8007870:	2a3e      	cmp	r2, #62	@ 0x3e
 8007872:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007876:	52c1      	strh	r1, [r0, r3]
 8007878:	d92b      	bls.n	80078d2 <USB_EPStartXfer+0x436>
 800787a:	06d1      	lsls	r1, r2, #27
 800787c:	5ac1      	ldrh	r1, [r0, r3]
 800787e:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8007882:	bf08      	it	eq
 8007884:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007888:	b289      	uxth	r1, r1
 800788a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800788e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007892:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007896:	b289      	uxth	r1, r1
 8007898:	52c1      	strh	r1, [r0, r3]
 800789a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800789e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80078a2:	b280      	uxth	r0, r0
 80078a4:	4401      	add	r1, r0
 80078a6:	5ac8      	ldrh	r0, [r1, r3]
 80078a8:	2a3e      	cmp	r2, #62	@ 0x3e
 80078aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80078ae:	52c8      	strh	r0, [r1, r3]
 80078b0:	d91b      	bls.n	80078ea <USB_EPStartXfer+0x44e>
 80078b2:	0950      	lsrs	r0, r2, #5
 80078b4:	06d6      	lsls	r6, r2, #27
 80078b6:	5aca      	ldrh	r2, [r1, r3]
 80078b8:	bf08      	it	eq
 80078ba:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80078be:	b292      	uxth	r2, r2
 80078c0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80078c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80078c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80078cc:	b292      	uxth	r2, r2
 80078ce:	52ca      	strh	r2, [r1, r3]
 80078d0:	e72b      	b.n	800772a <USB_EPStartXfer+0x28e>
 80078d2:	b90a      	cbnz	r2, 80078d8 <USB_EPStartXfer+0x43c>
 80078d4:	5ac1      	ldrh	r1, [r0, r3]
 80078d6:	e7da      	b.n	800788e <USB_EPStartXfer+0x3f2>
 80078d8:	5ac1      	ldrh	r1, [r0, r3]
 80078da:	0856      	lsrs	r6, r2, #1
 80078dc:	07d7      	lsls	r7, r2, #31
 80078de:	bf48      	it	mi
 80078e0:	3601      	addmi	r6, #1
 80078e2:	b289      	uxth	r1, r1
 80078e4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80078e8:	e7d5      	b.n	8007896 <USB_EPStartXfer+0x3fa>
 80078ea:	b90a      	cbnz	r2, 80078f0 <USB_EPStartXfer+0x454>
 80078ec:	5aca      	ldrh	r2, [r1, r3]
 80078ee:	e7e9      	b.n	80078c4 <USB_EPStartXfer+0x428>
 80078f0:	0850      	lsrs	r0, r2, #1
 80078f2:	07d2      	lsls	r2, r2, #31
 80078f4:	5aca      	ldrh	r2, [r1, r3]
 80078f6:	bf48      	it	mi
 80078f8:	3001      	addmi	r0, #1
 80078fa:	b292      	uxth	r2, r2
 80078fc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007900:	e7e4      	b.n	80078cc <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8007902:	2001      	movs	r0, #1
 8007904:	e5fb      	b.n	80074fe <USB_EPStartXfer+0x62>

08007906 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007906:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800790a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800790c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007910:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8007912:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007914:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8007916:	462e      	mov	r6, r5
 8007918:	3402      	adds	r4, #2
 800791a:	b936      	cbnz	r6, 800792a <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800791c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800791e:	bf44      	itt	mi
 8007920:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007924:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8007928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800792a:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800792e:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8007930:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007932:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007936:	0a12      	lsrs	r2, r2, #8
 8007938:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800793c:	e7ec      	b.n	8007918 <USB_ReadPMA+0x12>
	...

08007940 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007942:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007944:	4c14      	ldr	r4, [pc, #80]	@ (8007998 <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007946:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800794e:	6963      	ldr	r3, [r4, #20]
 8007950:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007952:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007954:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007958:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800795a:	b10b      	cbz	r3, 8007960 <WIZCHIP_READ+0x20>
 800795c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800795e:	b98b      	cbnz	r3, 8007984 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007960:	6a23      	ldr	r3, [r4, #32]
 8007962:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007964:	4630      	mov	r0, r6
 8007966:	6a23      	ldr	r3, [r4, #32]
 8007968:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800796a:	4628      	mov	r0, r5
 800796c:	6a23      	ldr	r3, [r4, #32]
 800796e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8007970:	69e3      	ldr	r3, [r4, #28]
 8007972:	4798      	blx	r3
 8007974:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8007976:	69a3      	ldr	r3, [r4, #24]
 8007978:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	4798      	blx	r3
   return ret;
}
 800797e:	4628      	mov	r0, r5
 8007980:	b002      	add	sp, #8
 8007982:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007984:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007988:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800798a:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800798e:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007992:	a801      	add	r0, sp, #4
 8007994:	4798      	blx	r3
 8007996:	e7eb      	b.n	8007970 <WIZCHIP_READ+0x30>
 8007998:	20000028 	.word	0x20000028

0800799c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799e:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80079a0:	4c16      	ldr	r4, [pc, #88]	@ (80079fc <WIZCHIP_WRITE+0x60>)
{
 80079a2:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 80079a4:	68e3      	ldr	r3, [r4, #12]
 80079a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80079a8:	6963      	ldr	r3, [r4, #20]
 80079aa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80079ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80079ae:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80079b2:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80079b6:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80079b8:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80079bc:	b983      	cbnz	r3, 80079e0 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80079be:	6a23      	ldr	r3, [r4, #32]
 80079c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80079c2:	4628      	mov	r0, r5
 80079c4:	6a23      	ldr	r3, [r4, #32]
 80079c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80079c8:	4638      	mov	r0, r7
 80079ca:	6a23      	ldr	r3, [r4, #32]
 80079cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80079ce:	4630      	mov	r0, r6
 80079d0:	6a23      	ldr	r3, [r4, #32]
 80079d2:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 80079d4:	69a3      	ldr	r3, [r4, #24]
 80079d6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	4798      	blx	r3
}
 80079dc:	b003      	add	sp, #12
 80079de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80079e0:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80079e2:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80079e6:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80079ea:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 80079ee:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80079f2:	eb0d 0001 	add.w	r0, sp, r1
 80079f6:	4798      	blx	r3
 80079f8:	e7ec      	b.n	80079d4 <WIZCHIP_WRITE+0x38>
 80079fa:	bf00      	nop
 80079fc:	20000028 	.word	0x20000028

08007a00 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a04:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007a06:	4c1a      	ldr	r4, [pc, #104]	@ (8007a70 <WIZCHIP_READ_BUF+0x70>)
{
 8007a08:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8007a0a:	68e3      	ldr	r3, [r4, #12]
{
 8007a0c:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 8007a0e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007a10:	6963      	ldr	r3, [r4, #20]
 8007a12:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007a14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007a16:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007a1a:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007a1e:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007a20:	b10b      	cbz	r3, 8007a26 <WIZCHIP_READ_BUF+0x26>
 8007a22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007a24:	b9b3      	cbnz	r3, 8007a54 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007a26:	6a23      	ldr	r3, [r4, #32]
 8007a28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	6a23      	ldr	r3, [r4, #32]
 8007a2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007a30:	4628      	mov	r0, r5
 8007a32:	6a23      	ldr	r3, [r4, #32]
 8007a34:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007a36:	4437      	add	r7, r6
 8007a38:	42b7      	cmp	r7, r6
 8007a3a:	d106      	bne.n	8007a4a <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8007a3c:	69a3      	ldr	r3, [r4, #24]
 8007a3e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	4798      	blx	r3
}
 8007a44:	b002      	add	sp, #8
 8007a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8007a4a:	69e3      	ldr	r3, [r4, #28]
 8007a4c:	4798      	blx	r3
 8007a4e:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 8007a52:	e7f1      	b.n	8007a38 <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007a54:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007a58:	2103      	movs	r1, #3
 8007a5a:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007a5c:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007a60:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007a64:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a6c:	4798      	blx	r3
 8007a6e:	e7e5      	b.n	8007a3c <WIZCHIP_READ_BUF+0x3c>
 8007a70:	20000028 	.word	0x20000028

08007a74 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007a74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a78:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007a7a:	4c1a      	ldr	r4, [pc, #104]	@ (8007ae4 <WIZCHIP_WRITE_BUF+0x70>)
{
 8007a7c:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 8007a7e:	68e3      	ldr	r3, [r4, #12]
{
 8007a80:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 8007a82:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007a84:	6963      	ldr	r3, [r4, #20]
 8007a86:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007a88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007a8a:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007a8e:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007a92:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007a94:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007a98:	b9b3      	cbnz	r3, 8007ac8 <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007a9a:	6a23      	ldr	r3, [r4, #32]
 8007a9c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	6a23      	ldr	r3, [r4, #32]
 8007aa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	6a23      	ldr	r3, [r4, #32]
 8007aa8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007aaa:	44b8      	add	r8, r7
 8007aac:	45b8      	cmp	r8, r7
 8007aae:	d106      	bne.n	8007abe <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8007ab0:	69a3      	ldr	r3, [r4, #24]
 8007ab2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	4798      	blx	r3
}
 8007ab8:	b002      	add	sp, #8
 8007aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8007abe:	6a23      	ldr	r3, [r4, #32]
 8007ac0:	f817 0b01 	ldrb.w	r0, [r7], #1
 8007ac4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007ac6:	e7f1      	b.n	8007aac <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007ac8:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007acc:	2103      	movs	r1, #3
 8007ace:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007ad0:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007ad4:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007ad8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007ada:	4641      	mov	r1, r8
 8007adc:	4638      	mov	r0, r7
 8007ade:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007ae0:	4798      	blx	r3
 8007ae2:	e7e5      	b.n	8007ab0 <WIZCHIP_WRITE_BUF+0x3c>
 8007ae4:	20000028 	.word	0x20000028

08007ae8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8007aea:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007aec:	0144      	lsls	r4, r0, #5
 8007aee:	3408      	adds	r4, #8
 8007af0:	f504 5700 	add.w	r7, r4, #8192	@ 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007af4:	f504 5404 	add.w	r4, r4, #8448	@ 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff ff21 	bl	8007940 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007afe:	0206      	lsls	r6, r0, #8
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7ff ff1d 	bl	8007940 <WIZCHIP_READ>
 8007b06:	b2b6      	uxth	r6, r6
 8007b08:	4406      	add	r6, r0
 8007b0a:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 8007b0c:	b14e      	cbz	r6, 8007b22 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7ff ff16 	bl	8007940 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007b14:	0205      	lsls	r5, r0, #8
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff ff12 	bl	8007940 <WIZCHIP_READ>
 8007b1c:	b2ad      	uxth	r5, r5
 8007b1e:	4405      	add	r5, r0
 8007b20:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8007b22:	42b5      	cmp	r5, r6
 8007b24:	d1e8      	bne.n	8007af8 <getSn_TX_FSR+0x10>
   return val;
}
 8007b26:	4628      	mov	r0, r5
 8007b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b2a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8007b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8007b2c:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007b2e:	0144      	lsls	r4, r0, #5
 8007b30:	3408      	adds	r4, #8
 8007b32:	f504 5718 	add.w	r7, r4, #9728	@ 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007b36:	f504 541c 	add.w	r4, r4, #9984	@ 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f7ff ff00 	bl	8007940 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007b40:	0206      	lsls	r6, r0, #8
 8007b42:	4620      	mov	r0, r4
 8007b44:	f7ff fefc 	bl	8007940 <WIZCHIP_READ>
 8007b48:	b2b6      	uxth	r6, r6
 8007b4a:	4406      	add	r6, r0
 8007b4c:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 8007b4e:	b14e      	cbz	r6, 8007b64 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff fef5 	bl	8007940 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007b56:	0205      	lsls	r5, r0, #8
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff fef1 	bl	8007940 <WIZCHIP_READ>
 8007b5e:	b2ad      	uxth	r5, r5
 8007b60:	4405      	add	r5, r0
 8007b62:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8007b64:	42b5      	cmp	r5, r6
 8007b66:	d1e8      	bne.n	8007b3a <getSn_RX_RSR+0x10>
   return val;
}
 8007b68:	4628      	mov	r0, r5
 8007b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b6c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b70:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8007b72:	4614      	mov	r4, r2
 8007b74:	b32a      	cbz	r2, 8007bc2 <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 8007b76:	0085      	lsls	r5, r0, #2
 8007b78:	1c6f      	adds	r7, r5, #1
 8007b7a:	00ff      	lsls	r7, r7, #3
 8007b7c:	f507 5810 	add.w	r8, r7, #9216	@ 0x2400
 8007b80:	4640      	mov	r0, r8
 8007b82:	f7ff fedd 	bl	8007940 <WIZCHIP_READ>
 8007b86:	f507 5714 	add.w	r7, r7, #9472	@ 0x2500
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff fed7 	bl	8007940 <WIZCHIP_READ>
 8007b92:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8007b96:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8007b98:	3502      	adds	r5, #2
 8007b9a:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	4649      	mov	r1, r9
 8007ba0:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8007ba4:	f7ff ff66 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8007ba8:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 8007baa:	4640      	mov	r0, r8
   ptr += len;
 8007bac:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 8007bae:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007bb2:	f7ff fef3 	bl	800799c <WIZCHIP_WRITE>
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	b2e1      	uxtb	r1, r4
}
 8007bba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8007bbe:	f7ff beed 	b.w	800799c <WIZCHIP_WRITE>
}
 8007bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007bc6 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007bc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bca:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8007bcc:	4614      	mov	r4, r2
 8007bce:	b32a      	cbz	r2, 8007c1c <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 8007bd0:	0085      	lsls	r5, r0, #2
 8007bd2:	1c6f      	adds	r7, r5, #1
 8007bd4:	00ff      	lsls	r7, r7, #3
 8007bd6:	f507 5820 	add.w	r8, r7, #10240	@ 0x2800
 8007bda:	4640      	mov	r0, r8
 8007bdc:	f7ff feb0 	bl	8007940 <WIZCHIP_READ>
 8007be0:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 8007be4:	4606      	mov	r6, r0
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7ff feaa 	bl	8007940 <WIZCHIP_READ>
 8007bec:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8007bf0:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007bf2:	3503      	adds	r5, #3
 8007bf4:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8007bfe:	f7ff feff 	bl	8007a00 <WIZCHIP_READ_BUF>
   ptr += len;
 8007c02:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 8007c04:	4640      	mov	r0, r8
   ptr += len;
 8007c06:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 8007c08:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007c0c:	f7ff fec6 	bl	800799c <WIZCHIP_WRITE>
 8007c10:	4638      	mov	r0, r7
 8007c12:	b2e1      	uxtb	r1, r4
}
 8007c14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8007c18:	f7ff bec0 	b.w	800799c <WIZCHIP_WRITE>
}
 8007c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007c20 <close>:
   return (int8_t)sn;
}  

int8_t close(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007c20:	2807      	cmp	r0, #7
{
 8007c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c24:	4604      	mov	r4, r0
   CHECK_SOCKNUM();
 8007c26:	d82d      	bhi.n	8007c84 <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8007c28:	0147      	lsls	r7, r0, #5
 8007c2a:	f107 0608 	add.w	r6, r7, #8
 8007c2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007c32:	2110      	movs	r1, #16
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff feb1 	bl	800799c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f7ff fe80 	bl	8007940 <WIZCHIP_READ>
 8007c40:	4605      	mov	r5, r0
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1f9      	bne.n	8007c3a <close+0x1a>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8007c46:	211f      	movs	r1, #31
 8007c48:	f506 7000 	add.w	r0, r6, #512	@ 0x200
 8007c4c:	f7ff fea6 	bl	800799c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8007c50:	2301      	movs	r3, #1
 8007c52:	40a3      	lsls	r3, r4
 8007c54:	43db      	mvns	r3, r3
 8007c56:	490d      	ldr	r1, [pc, #52]	@ (8007c8c <close+0x6c>)
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	880a      	ldrh	r2, [r1, #0]
	//
   sock_is_sending &= ~(1<<sn);
   sock_remained_size[sn] = 0;
   sock_pack_info[sn] = PACK_NONE;
   while(getSn_SR(sn) != SOCK_CLOSED);
 8007c5c:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_io_mode &= ~(1<<sn); 
 8007c60:	401a      	ands	r2, r3
 8007c62:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8007c64:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <close+0x70>)
 8007c66:	8811      	ldrh	r1, [r2, #0]
 8007c68:	400b      	ands	r3, r1
 8007c6a:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8007c6c:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <close+0x74>)
 8007c6e:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8007c72:	4b09      	ldr	r3, [pc, #36]	@ (8007c98 <close+0x78>)
 8007c74:	551d      	strb	r5, [r3, r4]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff fe62 	bl	8007940 <WIZCHIP_READ>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d1fa      	bne.n	8007c76 <close+0x56>
 8007c80:	2001      	movs	r0, #1
   return SOCK_OK;
}
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e7fb      	b.n	8007c82 <close+0x62>
 8007c8a:	bf00      	nop
 8007c8c:	200006c2 	.word	0x200006c2
 8007c90:	200006c0 	.word	0x200006c0
 8007c94:	200006b0 	.word	0x200006b0
 8007c98:	200006a8 	.word	0x200006a8

08007c9c <socket>:
   CHECK_SOCKNUM(); 
 8007c9c:	2807      	cmp	r0, #7
{ 
 8007c9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4688      	mov	r8, r1
 8007ca6:	4617      	mov	r7, r2
 8007ca8:	461d      	mov	r5, r3
   CHECK_SOCKNUM(); 
 8007caa:	f200 8082 	bhi.w	8007db2 <socket+0x116>
   switch (protocol & 0x0F)
 8007cae:	f001 030f 	and.w	r3, r1, #15
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	2b0d      	cmp	r3, #13
 8007cb6:	d87f      	bhi.n	8007db8 <socket+0x11c>
 8007cb8:	e8df f003 	tbb	[pc, r3]
 8007cbc:	15151507 	.word	0x15151507
 8007cc0:	7e7e7e7e 	.word	0x7e7e7e7e
 8007cc4:	7e15157e 	.word	0x7e15157e
 8007cc8:	157e      	.short	0x157e
            getSIPR((uint8_t*)&taddr);
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007cd0:	eb0d 0102 	add.w	r1, sp, r2
 8007cd4:	f7ff fe94 	bl	8007a00 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	b923      	cbnz	r3, 8007ce6 <socket+0x4a>
 8007cdc:	f06f 0002 	mvn.w	r0, #2
}  
 8007ce0:	b002      	add	sp, #8
 8007ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007ce6:	0768      	lsls	r0, r5, #29
 8007ce8:	d457      	bmi.n	8007d9a <socket+0xfe>
   if(flag != 0)
 8007cea:	b12d      	cbz	r5, 8007cf8 <socket+0x5c>
      switch(protocol)
 8007cec:	f1b8 0f01 	cmp.w	r8, #1
 8007cf0:	d050      	beq.n	8007d94 <socket+0xf8>
 8007cf2:	f1b8 0f02 	cmp.w	r8, #2
 8007cf6:	d053      	beq.n	8007da0 <socket+0x104>
   close(sn);
 8007cf8:	4620      	mov	r0, r4
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007cfa:	0166      	lsls	r6, r4, #5
   close(sn);
 8007cfc:	f7ff ff90 	bl	8007c20 <close>
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007d00:	3608      	adds	r6, #8
 8007d02:	f025 010f 	bic.w	r1, r5, #15
 8007d06:	4630      	mov	r0, r6
 8007d08:	ea48 0101 	orr.w	r1, r8, r1
 8007d0c:	f7ff fe46 	bl	800799c <WIZCHIP_WRITE>
   if(!port)
 8007d10:	b96f      	cbnz	r7, 8007d2e <socket+0x92>
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007d12:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
      port = sock_any_port++;
 8007d16:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc0 <socket+0x124>)
 8007d18:	8817      	ldrh	r7, [r2, #0]
 8007d1a:	1c7b      	adds	r3, r7, #1
 8007d1c:	b29b      	uxth	r3, r3
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007d1e:	428b      	cmp	r3, r1
 8007d20:	bf05      	ittet	eq
 8007d22:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
      port = sock_any_port++;
 8007d26:	f64f 77ef 	movweq	r7, #65519	@ 0xffef
 8007d2a:	8013      	strhne	r3, [r2, #0]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007d2c:	8013      	strheq	r3, [r2, #0]
   setSn_PORTR(sn,port);
 8007d2e:	0a39      	lsrs	r1, r7, #8
 8007d30:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 8007d34:	f7ff fe32 	bl	800799c <WIZCHIP_WRITE>
 8007d38:	b2f9      	uxtb	r1, r7
 8007d3a:	f506 60a0 	add.w	r0, r6, #1280	@ 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8007d3e:	f506 7780 	add.w	r7, r6, #256	@ 0x100
   setSn_PORTR(sn,port);
 8007d42:	f7ff fe2b 	bl	800799c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007d46:	2101      	movs	r1, #1
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff fe27 	bl	800799c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff fdf6 	bl	8007940 <WIZCHIP_READ>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d1fa      	bne.n	8007d4e <socket+0xb2>
   sock_io_mode &= ~(1 <<sn);
 8007d58:	2301      	movs	r3, #1
 8007d5a:	40a3      	lsls	r3, r4
 8007d5c:	43db      	mvns	r3, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007d5e:	4919      	ldr	r1, [pc, #100]	@ (8007dc4 <socket+0x128>)
 8007d60:	b29b      	uxth	r3, r3
   sock_io_mode &= ~(1 <<sn);
 8007d62:	880a      	ldrh	r2, [r1, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007d64:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 8007d68:	401a      	ands	r2, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007d6a:	40a5      	lsls	r5, r4
 8007d6c:	432a      	orrs	r2, r5
 8007d6e:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8007d70:	4a15      	ldr	r2, [pc, #84]	@ (8007dc8 <socket+0x12c>)
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007d72:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_is_sending &= ~(1<<sn);
 8007d76:	8811      	ldrh	r1, [r2, #0]
 8007d78:	400b      	ands	r3, r1
 8007d7a:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8007d7c:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <socket+0x130>)
 8007d7e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8007d82:	4b13      	ldr	r3, [pc, #76]	@ (8007dd0 <socket+0x134>)
 8007d84:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff fdda 	bl	8007940 <WIZCHIP_READ>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d0fa      	beq.n	8007d86 <socket+0xea>
   return (int8_t)sn;
 8007d90:	b260      	sxtb	r0, r4
 8007d92:	e7a5      	b.n	8007ce0 <socket+0x44>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8007d94:	f015 0f21 	tst.w	r5, #33	@ 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8007d98:	d1ae      	bne.n	8007cf8 <socket+0x5c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007d9a:	f06f 0005 	mvn.w	r0, #5
 8007d9e:	e79f      	b.n	8007ce0 <socket+0x44>
   	      if(flag & SF_IGMP_VER2)
 8007da0:	06a9      	lsls	r1, r5, #26
 8007da2:	d501      	bpl.n	8007da8 <socket+0x10c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8007da4:	062a      	lsls	r2, r5, #24
 8007da6:	d5f8      	bpl.n	8007d9a <socket+0xfe>
      	      if(flag & SF_UNI_BLOCK)
 8007da8:	06eb      	lsls	r3, r5, #27
 8007daa:	d5a5      	bpl.n	8007cf8 <socket+0x5c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8007dac:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8007db0:	e7f2      	b.n	8007d98 <socket+0xfc>
   CHECK_SOCKNUM(); 
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	e793      	b.n	8007ce0 <socket+0x44>
   switch (protocol & 0x0F)
 8007db8:	f06f 0004 	mvn.w	r0, #4
 8007dbc:	e790      	b.n	8007ce0 <socket+0x44>
 8007dbe:	bf00      	nop
 8007dc0:	20000024 	.word	0x20000024
 8007dc4:	200006c2 	.word	0x200006c2
 8007dc8:	200006c0 	.word	0x200006c0
 8007dcc:	200006b0 	.word	0x200006b0
 8007dd0:	200006a8 	.word	0x200006a8

08007dd4 <listen>:

int8_t listen(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007dd4:	2807      	cmp	r0, #7
{
 8007dd6:	b570      	push	{r4, r5, r6, lr}
 8007dd8:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 8007dda:	d827      	bhi.n	8007e2c <listen+0x58>
   CHECK_TCPMODE(); 
 8007ddc:	0144      	lsls	r4, r0, #5
 8007dde:	3408      	adds	r4, #8
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7ff fdad 	bl	8007940 <WIZCHIP_READ>
 8007de6:	f000 0003 	and.w	r0, r0, #3
 8007dea:	2801      	cmp	r0, #1
 8007dec:	d121      	bne.n	8007e32 <listen+0x5e>
   CHECK_SOCKINIT();
 8007dee:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff fda4 	bl	8007940 <WIZCHIP_READ>
 8007df8:	2813      	cmp	r0, #19
 8007dfa:	d11d      	bne.n	8007e38 <listen+0x64>
   setSn_CR(sn,Sn_CR_LISTEN);
 8007dfc:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8007e00:	2102      	movs	r1, #2
 8007e02:	4620      	mov	r0, r4
 8007e04:	f7ff fdca 	bl	800799c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7ff fd99 	bl	8007940 <WIZCHIP_READ>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d1fa      	bne.n	8007e08 <listen+0x34>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff fd94 	bl	8007940 <WIZCHIP_READ>
 8007e18:	2814      	cmp	r0, #20
 8007e1a:	d101      	bne.n	8007e20 <listen+0x4c>
   {
      close(sn);
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	e004      	b.n	8007e2a <listen+0x56>
      close(sn);
 8007e20:	4628      	mov	r0, r5
 8007e22:	f7ff fefd 	bl	8007c20 <close>
      return SOCKERR_SOCKCLOSED;
 8007e26:	f06f 0003 	mvn.w	r0, #3
}
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e7fb      	b.n	8007e2a <listen+0x56>
   CHECK_TCPMODE(); 
 8007e32:	f06f 0004 	mvn.w	r0, #4
 8007e36:	e7f8      	b.n	8007e2a <listen+0x56>
   CHECK_SOCKINIT();
 8007e38:	f06f 0002 	mvn.w	r0, #2
 8007e3c:	e7f5      	b.n	8007e2a <listen+0x56>
	...

08007e40 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007e40:	2807      	cmp	r0, #7
{
 8007e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e44:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 8007e46:	d839      	bhi.n	8007ebc <disconnect+0x7c>
   CHECK_TCPMODE();
 8007e48:	0144      	lsls	r4, r0, #5
 8007e4a:	3408      	adds	r4, #8
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff fd77 	bl	8007940 <WIZCHIP_READ>
 8007e52:	f000 0003 	and.w	r0, r0, #3
 8007e56:	2801      	cmp	r0, #1
 8007e58:	d133      	bne.n	8007ec2 <disconnect+0x82>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8007e5a:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff fd6e 	bl	8007940 <WIZCHIP_READ>
 8007e64:	b908      	cbnz	r0, 8007e6a <disconnect+0x2a>
            close(sn);
            return SOCKERR_TIMEOUT;
         }
      }
   }
   return SOCK_OK;
 8007e66:	2001      	movs	r0, #1
}
 8007e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      setSn_CR(sn,Sn_CR_DISCON);
 8007e6a:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8007e6e:	2108      	movs	r1, #8
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff fd93 	bl	800799c <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff fd62 	bl	8007940 <WIZCHIP_READ>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1fa      	bne.n	8007e76 <disconnect+0x36>
	   sock_is_sending &= ~(1<<sn);
 8007e80:	2201      	movs	r2, #1
 8007e82:	4911      	ldr	r1, [pc, #68]	@ (8007ec8 <disconnect+0x88>)
 8007e84:	40aa      	lsls	r2, r5
 8007e86:	880b      	ldrh	r3, [r1, #0]
 8007e88:	ea23 0302 	bic.w	r3, r3, r2
 8007e8c:	800b      	strh	r3, [r1, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ecc <disconnect+0x8c>)
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	412b      	asrs	r3, r5
 8007e94:	07da      	lsls	r2, r3, #31
 8007e96:	d4e7      	bmi.n	8007e68 <disconnect+0x28>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007e98:	f504 7400 	add.w	r4, r4, #512	@ 0x200
      while(getSn_SR(sn) != SOCK_CLOSED)
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff fd4f 	bl	8007940 <WIZCHIP_READ>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d0df      	beq.n	8007e66 <disconnect+0x26>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7ff fd4a 	bl	8007940 <WIZCHIP_READ>
 8007eac:	0703      	lsls	r3, r0, #28
 8007eae:	d5f5      	bpl.n	8007e9c <disconnect+0x5c>
            close(sn);
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7ff feb5 	bl	8007c20 <close>
            return SOCKERR_TIMEOUT;
 8007eb6:	f06f 000c 	mvn.w	r0, #12
 8007eba:	e7d5      	b.n	8007e68 <disconnect+0x28>
   CHECK_SOCKNUM();
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	e7d2      	b.n	8007e68 <disconnect+0x28>
   CHECK_TCPMODE();
 8007ec2:	f06f 0004 	mvn.w	r0, #4
 8007ec6:	e7cf      	b.n	8007e68 <disconnect+0x28>
 8007ec8:	200006c0 	.word	0x200006c0
 8007ecc:	200006c2 	.word	0x200006c2

08007ed0 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8007ed4:	2807      	cmp	r0, #7
{
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4617      	mov	r7, r2
 8007eda:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8007edc:	f200 80a0 	bhi.w	8008020 <send+0x150>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007ee0:	0146      	lsls	r6, r0, #5
 8007ee2:	3608      	adds	r6, #8
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff fd2b 	bl	8007940 <WIZCHIP_READ>
 8007eea:	f000 000f 	and.w	r0, r0, #15
 8007eee:	2801      	cmp	r0, #1
 8007ef0:	f040 8099 	bne.w	8008026 <send+0x156>
   CHECK_SOCKDATA();
 8007ef4:	2f00      	cmp	r7, #0
 8007ef6:	f000 8099 	beq.w	800802c <send+0x15c>
   tmp = getSn_SR(sn);
 8007efa:	f506 7a40 	add.w	sl, r6, #768	@ 0x300
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7ff fd1e 	bl	8007940 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007f04:	2817      	cmp	r0, #23
 8007f06:	d001      	beq.n	8007f0c <send+0x3c>
 8007f08:	281c      	cmp	r0, #28
 8007f0a:	d136      	bne.n	8007f7a <send+0xaa>
   if( sock_is_sending & (1<<sn) )
 8007f0c:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8008034 <send+0x164>
 8007f10:	f8b8 3000 	ldrh.w	r3, [r8]
 8007f14:	412b      	asrs	r3, r5
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d512      	bpl.n	8007f40 <send+0x70>
   {
      tmp = getSn_IR(sn);
 8007f1a:	f506 7400 	add.w	r4, r6, #512	@ 0x200
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff fd0e 	bl	8007940 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8007f24:	06c3      	lsls	r3, r0, #27
 8007f26:	d52b      	bpl.n	8007f80 <send+0xb0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8007f28:	2110      	movs	r1, #16
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7ff fd36 	bl	800799c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8007f30:	2201      	movs	r2, #1
 8007f32:	f8b8 3000 	ldrh.w	r3, [r8]
 8007f36:	40aa      	lsls	r2, r5
 8007f38:	ea23 0302 	bic.w	r3, r3, r2
 8007f3c:	f8a8 3000 	strh.w	r3, [r8]
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8007f40:	f506 50f8 	add.w	r0, r6, #7936	@ 0x1f00
 8007f44:	f7ff fcfc 	bl	8007940 <WIZCHIP_READ>
 8007f48:	0280      	lsls	r0, r0, #10
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007f4a:	b280      	uxth	r0, r0
 8007f4c:	42b8      	cmp	r0, r7
 8007f4e:	bf28      	it	cs
 8007f50:	4638      	movcs	r0, r7
 8007f52:	2701      	movs	r7, #1
 8007f54:	4604      	mov	r4, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8007f56:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8008038 <send+0x168>
 8007f5a:	40af      	lsls	r7, r5
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff fdc3 	bl	8007ae8 <getSn_TX_FSR>
 8007f62:	4681      	mov	r9, r0
      tmp = getSn_SR(sn);
 8007f64:	4650      	mov	r0, sl
 8007f66:	f7ff fceb 	bl	8007940 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007f6a:	2817      	cmp	r0, #23
 8007f6c:	d014      	beq.n	8007f98 <send+0xc8>
 8007f6e:	281c      	cmp	r0, #28
 8007f70:	d012      	beq.n	8007f98 <send+0xc8>
         if(tmp == SOCK_CLOSED) close(sn);
 8007f72:	b910      	cbnz	r0, 8007f7a <send+0xaa>
 8007f74:	4628      	mov	r0, r5
 8007f76:	f7ff fe53 	bl	8007c20 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007f7a:	f06f 0006 	mvn.w	r0, #6
 8007f7e:	e002      	b.n	8007f86 <send+0xb6>
      else if(tmp & Sn_IR_TIMEOUT)
 8007f80:	0700      	lsls	r0, r0, #28
 8007f82:	d403      	bmi.n	8007f8c <send+0xbc>
      else return SOCK_BUSY;
 8007f84:	2000      	movs	r0, #0
 
   while(getSn_CR(sn));   // wait to process the command...
   sock_is_sending |= (1<<sn);
 
   return len;
}
 8007f86:	b003      	add	sp, #12
 8007f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f7ff fe47 	bl	8007c20 <close>
         return SOCKERR_TIMEOUT;
 8007f92:	f06f 000c 	mvn.w	r0, #12
 8007f96:	e7f6      	b.n	8007f86 <send+0xb6>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8007f98:	f8bb 2000 	ldrh.w	r2, [fp]
 8007f9c:	423a      	tst	r2, r7
 8007f9e:	d028      	beq.n	8007ff2 <send+0x122>
 8007fa0:	45a1      	cmp	r9, r4
 8007fa2:	d3ef      	bcc.n	8007f84 <send+0xb4>
   wiz_send_data(sn, buf, len);
 8007fa4:	9901      	ldr	r1, [sp, #4]
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f7ff fddf 	bl	8007b6c <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8007fae:	f8b8 3000 	ldrh.w	r3, [r8]
 8007fb2:	412b      	asrs	r3, r5
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d50a      	bpl.n	8007fce <send+0xfe>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8007fb8:	f506 7900 	add.w	r9, r6, #512	@ 0x200
 8007fbc:	4648      	mov	r0, r9
 8007fbe:	f7ff fcbf 	bl	8007940 <WIZCHIP_READ>
 8007fc2:	06c3      	lsls	r3, r0, #27
 8007fc4:	d518      	bpl.n	8007ff8 <send+0x128>
      setSn_IR(sn, Sn_IR_SENDOK);
 8007fc6:	2110      	movs	r1, #16
 8007fc8:	4648      	mov	r0, r9
 8007fca:	f7ff fce7 	bl	800799c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 8007fce:	f506 7680 	add.w	r6, r6, #256	@ 0x100
 8007fd2:	2120      	movs	r1, #32
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff fce1 	bl	800799c <WIZCHIP_WRITE>
   while(getSn_CR(sn));   // wait to process the command...
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff fcb0 	bl	8007940 <WIZCHIP_READ>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d1fa      	bne.n	8007fda <send+0x10a>
   sock_is_sending |= (1<<sn);
 8007fe4:	f8b8 3000 	ldrh.w	r3, [r8]
   return len;
 8007fe8:	4620      	mov	r0, r4
   sock_is_sending |= (1<<sn);
 8007fea:	431f      	orrs	r7, r3
 8007fec:	f8a8 7000 	strh.w	r7, [r8]
   return len;
 8007ff0:	e7c9      	b.n	8007f86 <send+0xb6>
      if(len <= freesize) break;
 8007ff2:	45a1      	cmp	r9, r4
 8007ff4:	d3b2      	bcc.n	8007f5c <send+0x8c>
 8007ff6:	e7d5      	b.n	8007fa4 <send+0xd4>
         tmp = getSn_SR(sn);
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	f7ff fca1 	bl	8007940 <WIZCHIP_READ>
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8007ffe:	2817      	cmp	r0, #23
 8008000:	d009      	beq.n	8008016 <send+0x146>
 8008002:	281c      	cmp	r0, #28
 8008004:	d007      	beq.n	8008016 <send+0x146>
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8008006:	2800      	cmp	r0, #0
 8008008:	d0b4      	beq.n	8007f74 <send+0xa4>
 800800a:	4648      	mov	r0, r9
 800800c:	f7ff fc98 	bl	8007940 <WIZCHIP_READ>
 8008010:	0702      	lsls	r2, r0, #28
 8008012:	d4af      	bmi.n	8007f74 <send+0xa4>
 8008014:	e7b1      	b.n	8007f7a <send+0xaa>
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008016:	f8bb 3000 	ldrh.w	r3, [fp]
 800801a:	423b      	tst	r3, r7
 800801c:	d0ce      	beq.n	8007fbc <send+0xec>
 800801e:	e7b1      	b.n	8007f84 <send+0xb4>
   CHECK_SOCKNUM();
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e7af      	b.n	8007f86 <send+0xb6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008026:	f06f 0004 	mvn.w	r0, #4
 800802a:	e7ac      	b.n	8007f86 <send+0xb6>
   CHECK_SOCKDATA();
 800802c:	f06f 000d 	mvn.w	r0, #13
 8008030:	e7a9      	b.n	8007f86 <send+0xb6>
 8008032:	bf00      	nop
 8008034:	200006c0 	.word	0x200006c0
 8008038:	200006c2 	.word	0x200006c2

0800803c <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8008040:	2807      	cmp	r0, #7
{
 8008042:	b085      	sub	sp, #20
 8008044:	4606      	mov	r6, r0
 8008046:	4690      	mov	r8, r2
 8008048:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800804a:	d859      	bhi.n	8008100 <recv+0xc4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800804c:	0145      	lsls	r5, r0, #5
 800804e:	3508      	adds	r5, #8
 8008050:	4628      	mov	r0, r5
 8008052:	f7ff fc75 	bl	8007940 <WIZCHIP_READ>
 8008056:	f000 070f 	and.w	r7, r0, #15
 800805a:	2f01      	cmp	r7, #1
 800805c:	d153      	bne.n	8008106 <recv+0xca>
   CHECK_SOCKDATA();
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	d053      	beq.n	800810c <recv+0xd0>
   
   recvsize = getSn_RxMAX(sn); 
 8008064:	f505 50f0 	add.w	r0, r5, #7680	@ 0x1e00
 8008068:	f7ff fc6a 	bl	8007940 <WIZCHIP_READ>
 800806c:	4681      	mov	r9, r0
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
      tmp = getSn_SR(sn);
 800806e:	f505 7340 	add.w	r3, r5, #768	@ 0x300
 8008072:	9302      	str	r3, [sp, #8]
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008074:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8008118 <recv+0xdc>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8008078:	f505 53f8 	add.w	r3, r5, #7936	@ 0x1f00
 800807c:	40b7      	lsls	r7, r6
 800807e:	9303      	str	r3, [sp, #12]
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff fd52 	bl	8007b2a <getSn_RX_RSR>
 8008086:	4604      	mov	r4, r0
      tmp = getSn_SR(sn);
 8008088:	9802      	ldr	r0, [sp, #8]
 800808a:	f7ff fc59 	bl	8007940 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED)
 800808e:	2817      	cmp	r0, #23
 8008090:	d014      	beq.n	80080bc <recv+0x80>
         if(tmp == SOCK_CLOSE_WAIT)
 8008092:	281c      	cmp	r0, #28
 8008094:	d10a      	bne.n	80080ac <recv+0x70>
            if(recvsize != 0) break;
 8008096:	b9bc      	cbnz	r4, 80080c8 <recv+0x8c>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff fd25 	bl	8007ae8 <getSn_TX_FSR>
 800809e:	4682      	mov	sl, r0
 80080a0:	9803      	ldr	r0, [sp, #12]
 80080a2:	f7ff fc4d 	bl	8007940 <WIZCHIP_READ>
 80080a6:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 80080aa:	d107      	bne.n	80080bc <recv+0x80>
               close(sn);
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff fdb7 	bl	8007c20 <close>
               return SOCKERR_SOCKSTATUS;
 80080b2:	f06f 0006 	mvn.w	r0, #6
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80080b6:	b005      	add	sp, #20
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80080bc:	f8bb 2000 	ldrh.w	r2, [fp]
 80080c0:	423a      	tst	r2, r7
 80080c2:	d126      	bne.n	8008112 <recv+0xd6>
      if(recvsize != 0) break;
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	d0db      	beq.n	8008080 <recv+0x44>
   recvsize = getSn_RxMAX(sn); 
 80080c8:	ea4f 2089 	mov.w	r0, r9, lsl #10
   if(recvsize < len) len = recvsize;
 80080cc:	b280      	uxth	r0, r0
   if(recvsize < len) len = recvsize;
 80080ce:	4540      	cmp	r0, r8
 80080d0:	bf28      	it	cs
 80080d2:	4640      	movcs	r0, r8
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	bf28      	it	cs
 80080d8:	4620      	movcs	r0, r4
 80080da:	b284      	uxth	r4, r0
   wiz_recv_data(sn, buf, len); 
 80080dc:	9901      	ldr	r1, [sp, #4]
 80080de:	4630      	mov	r0, r6
 80080e0:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_RECV); 
 80080e2:	f505 7580 	add.w	r5, r5, #256	@ 0x100
   wiz_recv_data(sn, buf, len); 
 80080e6:	f7ff fd6e 	bl	8007bc6 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 80080ea:	2140      	movs	r1, #64	@ 0x40
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7ff fc55 	bl	800799c <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7ff fc24 	bl	8007940 <WIZCHIP_READ>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d1fa      	bne.n	80080f2 <recv+0xb6>
   return (int32_t)len;
 80080fc:	4620      	mov	r0, r4
 80080fe:	e7da      	b.n	80080b6 <recv+0x7a>
   CHECK_SOCKNUM();
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e7d7      	b.n	80080b6 <recv+0x7a>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008106:	f06f 0004 	mvn.w	r0, #4
 800810a:	e7d4      	b.n	80080b6 <recv+0x7a>
   CHECK_SOCKDATA();
 800810c:	f06f 000d 	mvn.w	r0, #13
 8008110:	e7d1      	b.n	80080b6 <recv+0x7a>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008112:	2000      	movs	r0, #0
 8008114:	e7cf      	b.n	80080b6 <recv+0x7a>
 8008116:	bf00      	nop
 8008118:	200006c2 	.word	0x200006c2

0800811c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800811c:	4770      	bx	lr

0800811e <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800811e:	7800      	ldrb	r0, [r0, #0]
 8008120:	4770      	bx	lr

08008122 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008122:	7001      	strb	r1, [r0, #0]
 8008124:	4770      	bx	lr

08008126 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8008126:	2000      	movs	r0, #0
 8008128:	4770      	bx	lr

0800812a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800812a:	4770      	bx	lr

0800812c <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8008130:	4e04      	ldr	r6, [pc, #16]	@ (8008144 <wizchip_spi_readburst+0x18>)
 8008132:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8008134:	42ac      	cmp	r4, r5
 8008136:	d100      	bne.n	800813a <wizchip_spi_readburst+0xe>
	}
}
 8008138:	bd70      	pop	{r4, r5, r6, pc}
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 800813a:	69f3      	ldr	r3, [r6, #28]
 800813c:	4798      	blx	r3
 800813e:	f804 0b01 	strb.w	r0, [r4], #1
	for(uint16_t i=0; i<len; i++)
 8008142:	e7f7      	b.n	8008134 <wizchip_spi_readburst+0x8>
 8008144:	20000028 	.word	0x20000028

08008148 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 800814c:	4e04      	ldr	r6, [pc, #16]	@ (8008160 <wizchip_spi_writeburst+0x18>)
 800814e:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8008150:	42ac      	cmp	r4, r5
 8008152:	d100      	bne.n	8008156 <wizchip_spi_writeburst+0xe>
	}
}
 8008154:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8008156:	6a33      	ldr	r3, [r6, #32]
 8008158:	f814 0b01 	ldrb.w	r0, [r4], #1
 800815c:	4798      	blx	r3
	for(uint16_t i=0; i<len; i++)
 800815e:	e7f7      	b.n	8008150 <wizchip_spi_writeburst+0x8>
 8008160:	20000028 	.word	0x20000028

08008164 <wizchip_cris_exit>:
void 	  wizchip_cris_exit(void)          {}
 8008164:	4770      	bx	lr

08008166 <wizchip_cs_select>:
void 	wizchip_cs_select(void)            {}
 8008166:	4770      	bx	lr

08008168 <wizchip_cs_deselect>:
void 	wizchip_cs_deselect(void)          {}
 8008168:	4770      	bx	lr
	...

0800816c <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 800816c:	b100      	cbz	r0, 8008170 <reg_wizchip_cs_cbfunc+0x4>
 800816e:	b909      	cbnz	r1, 8008174 <reg_wizchip_cs_cbfunc+0x8>
 8008170:	4802      	ldr	r0, [pc, #8]	@ (800817c <reg_wizchip_cs_cbfunc+0x10>)
 8008172:	4903      	ldr	r1, [pc, #12]	@ (8008180 <reg_wizchip_cs_cbfunc+0x14>)
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8008174:	4b03      	ldr	r3, [pc, #12]	@ (8008184 <reg_wizchip_cs_cbfunc+0x18>)
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8008176:	e9c3 0105 	strd	r0, r1, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 800817a:	4770      	bx	lr
 800817c:	08008167 	.word	0x08008167
 8008180:	08008169 	.word	0x08008169
 8008184:	20000028 	.word	0x20000028

08008188 <reg_wizchip_spi_cbfunc>:
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <reg_wizchip_spi_cbfunc+0x18>)
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	0592      	lsls	r2, r2, #22
 800818e:	d400      	bmi.n	8008192 <reg_wizchip_spi_cbfunc+0xa>
 8008190:	e7fe      	b.n	8008190 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8008192:	b100      	cbz	r0, 8008196 <reg_wizchip_spi_cbfunc+0xe>
 8008194:	b909      	cbnz	r1, 800819a <reg_wizchip_spi_cbfunc+0x12>
 8008196:	4803      	ldr	r0, [pc, #12]	@ (80081a4 <reg_wizchip_spi_cbfunc+0x1c>)
 8008198:	4903      	ldr	r1, [pc, #12]	@ (80081a8 <reg_wizchip_spi_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800819a:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 800819e:	4770      	bx	lr
 80081a0:	20000028 	.word	0x20000028
 80081a4:	08008127 	.word	0x08008127
 80081a8:	0800812b 	.word	0x0800812b

080081ac <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <reg_wizchip_spiburst_cbfunc+0x18>)
 80081ae:	881a      	ldrh	r2, [r3, #0]
 80081b0:	0592      	lsls	r2, r2, #22
 80081b2:	d400      	bmi.n	80081b6 <reg_wizchip_spiburst_cbfunc+0xa>
 80081b4:	e7fe      	b.n	80081b4 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 80081b6:	b100      	cbz	r0, 80081ba <reg_wizchip_spiburst_cbfunc+0xe>
 80081b8:	b909      	cbnz	r1, 80081be <reg_wizchip_spiburst_cbfunc+0x12>
 80081ba:	4803      	ldr	r0, [pc, #12]	@ (80081c8 <reg_wizchip_spiburst_cbfunc+0x1c>)
 80081bc:	4903      	ldr	r1, [pc, #12]	@ (80081cc <reg_wizchip_spiburst_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80081be:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 80081c2:	4770      	bx	lr
 80081c4:	20000028 	.word	0x20000028
 80081c8:	0800812d 	.word	0x0800812d
 80081cc:	08008149 	.word	0x08008149

080081d0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80081d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80081d2:	2206      	movs	r2, #6
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80081da:	f7ff fc11 	bl	8007a00 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80081de:	2204      	movs	r2, #4
 80081e0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80081e4:	eb0d 0102 	add.w	r1, sp, r2
 80081e8:	f7ff fc0a 	bl	8007a00 <WIZCHIP_READ_BUF>
 80081ec:	a902      	add	r1, sp, #8
 80081ee:	2204      	movs	r2, #4
 80081f0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80081f4:	f7ff fc04 	bl	8007a00 <WIZCHIP_READ_BUF>
 80081f8:	2204      	movs	r2, #4
 80081fa:	a903      	add	r1, sp, #12
 80081fc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008200:	f7ff fbfe 	bl	8007a00 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8008204:	2180      	movs	r1, #128	@ 0x80
 8008206:	2000      	movs	r0, #0
 8008208:	f7ff fbc8 	bl	800799c <WIZCHIP_WRITE>
   getMR(); // for delay
 800820c:	2000      	movs	r0, #0
 800820e:	f7ff fb97 	bl	8007940 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8008212:	a904      	add	r1, sp, #16
 8008214:	2206      	movs	r2, #6
 8008216:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800821a:	f7ff fc2b 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800821e:	2204      	movs	r2, #4
 8008220:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008224:	eb0d 0102 	add.w	r1, sp, r2
 8008228:	f7ff fc24 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800822c:	a902      	add	r1, sp, #8
 800822e:	2204      	movs	r2, #4
 8008230:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8008234:	f7ff fc1e 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8008238:	2204      	movs	r2, #4
 800823a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800823e:	a903      	add	r1, sp, #12
 8008240:	f7ff fc18 	bl	8007a74 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8008244:	b007      	add	sp, #28
 8008246:	f85d fb04 	ldr.w	pc, [sp], #4

0800824a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800824a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8008250:	f7ff ffbe 	bl	80081d0 <wizchip_sw_reset>
   if(txsize)
 8008254:	b1d5      	cbz	r5, 800828c <wizchip_init+0x42>
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8008256:	f995 3000 	ldrsb.w	r3, [r5]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 800825a:	2b10      	cmp	r3, #16
 800825c:	dc35      	bgt.n	80082ca <wizchip_init+0x80>
 800825e:	462a      	mov	r2, r5
 8008260:	1de9      	adds	r1, r5, #7
			tmp += txsize[i];
 8008262:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008266:	4403      	add	r3, r0
 8008268:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 800826a:	2b10      	cmp	r3, #16
 800826c:	dc2d      	bgt.n	80082ca <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800826e:	428a      	cmp	r2, r1
 8008270:	d1f7      	bne.n	8008262 <wizchip_init+0x18>
 8008272:	f641 7608 	movw	r6, #7944	@ 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008276:	f242 0708 	movw	r7, #8200	@ 0x2008
 800827a:	3d01      	subs	r5, #1
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800827c:	4630      	mov	r0, r6
 800827e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008282:	3620      	adds	r6, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8008284:	f7ff fb8a 	bl	800799c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008288:	42be      	cmp	r6, r7
 800828a:	d1f7      	bne.n	800827c <wizchip_init+0x32>
#endif
		}	
   }

   if(rxsize)
 800828c:	b90c      	cbnz	r4, 8008292 <wizchip_init+0x48>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 800828e:	2000      	movs	r0, #0
}
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tmp += rxsize[i];
 8008292:	f994 3000 	ldrsb.w	r3, [r4]
			if(tmp > 16) return -1;
 8008296:	2b10      	cmp	r3, #16
 8008298:	dc17      	bgt.n	80082ca <wizchip_init+0x80>
 800829a:	4622      	mov	r2, r4
 800829c:	1de1      	adds	r1, r4, #7
			tmp += rxsize[i];
 800829e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80082a2:	4403      	add	r3, r0
 80082a4:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	dc0f      	bgt.n	80082ca <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80082aa:	4291      	cmp	r1, r2
 80082ac:	d1f7      	bne.n	800829e <wizchip_init+0x54>
 80082ae:	f641 6508 	movw	r5, #7688	@ 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80082b2:	f641 7608 	movw	r6, #7944	@ 0x1f08
 80082b6:	3c01      	subs	r4, #1
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80082b8:	4628      	mov	r0, r5
 80082ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80082be:	3520      	adds	r5, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80082c0:	f7ff fb6c 	bl	800799c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80082c4:	42b5      	cmp	r5, r6
 80082c6:	d1f7      	bne.n	80082b8 <wizchip_init+0x6e>
 80082c8:	e7e1      	b.n	800828e <wizchip_init+0x44>
			if(tmp > 16) return -1;
 80082ca:	f04f 30ff 	mov.w	r0, #4294967295
 80082ce:	e7df      	b.n	8008290 <wizchip_init+0x46>

080082d0 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80082d4:	4601      	mov	r1, r0
 80082d6:	2206      	movs	r2, #6
 80082d8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80082dc:	f7ff fbca 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80082e0:	2204      	movs	r2, #4
 80082e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80082e6:	f104 010e 	add.w	r1, r4, #14
 80082ea:	f7ff fbc3 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80082ee:	2204      	movs	r2, #4
 80082f0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80082f4:	f104 010a 	add.w	r1, r4, #10
 80082f8:	f7ff fbbc 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80082fc:	2204      	movs	r2, #4
 80082fe:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008302:	1da1      	adds	r1, r4, #6
 8008304:	f7ff fbb6 	bl	8007a74 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8008308:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <wizchip_setnetinfo+0x54>)
 800830a:	7ca2      	ldrb	r2, [r4, #18]
 800830c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800830e:	7ce2      	ldrb	r2, [r4, #19]
 8008310:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8008312:	7d22      	ldrb	r2, [r4, #20]
 8008314:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008316:	7d62      	ldrb	r2, [r4, #21]
 8008318:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800831a:	7da2      	ldrb	r2, [r4, #22]
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <wizchip_setnetinfo+0x58>)
 800831e:	701a      	strb	r2, [r3, #0]
}
 8008320:	bd10      	pop	{r4, pc}
 8008322:	bf00      	nop
 8008324:	200006c5 	.word	0x200006c5
 8008328:	200006c4 	.word	0x200006c4

0800832c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800832c:	b510      	push	{r4, lr}
 800832e:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8008330:	4601      	mov	r1, r0
 8008332:	2206      	movs	r2, #6
 8008334:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8008338:	f7ff fb62 	bl	8007a00 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800833c:	2204      	movs	r2, #4
 800833e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008342:	f104 010e 	add.w	r1, r4, #14
 8008346:	f7ff fb5b 	bl	8007a00 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800834a:	2204      	movs	r2, #4
 800834c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8008350:	f104 010a 	add.w	r1, r4, #10
 8008354:	f7ff fb54 	bl	8007a00 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8008358:	2204      	movs	r2, #4
 800835a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800835e:	1da1      	adds	r1, r4, #6
 8008360:	f7ff fb4e 	bl	8007a00 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8008364:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <wizchip_getnetinfo+0x54>)
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800836a:	785a      	ldrb	r2, [r3, #1]
 800836c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800836e:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8008370:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 8008372:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8008374:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8008376:	4b03      	ldr	r3, [pc, #12]	@ (8008384 <wizchip_getnetinfo+0x58>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	75a3      	strb	r3, [r4, #22]
}
 800837c:	bd10      	pop	{r4, pc}
 800837e:	bf00      	nop
 8008380:	200006c5 	.word	0x200006c5
 8008384:	200006c4 	.word	0x200006c4

08008388 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8008388:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800838a:	f030 053a 	bics.w	r5, r0, #58	@ 0x3a
{
 800838e:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8008390:	d10a      	bne.n	80083a8 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 8008392:	4628      	mov	r0, r5
 8008394:	f7ff fad4 	bl	8007940 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8008398:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 800839c:	b2c9      	uxtb	r1, r1
 800839e:	4628      	mov	r0, r5
 80083a0:	f7ff fafc 	bl	800799c <WIZCHIP_WRITE>
   return 0;
 80083a4:	4628      	mov	r0, r5
}
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	e7fb      	b.n	80083a6 <wizchip_setnetmode+0x1e>

080083ae <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7ff bac6 	b.w	8007940 <WIZCHIP_READ>

080083b4 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80083b4:	b510      	push	{r4, lr}
 80083b6:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 80083b8:	7801      	ldrb	r1, [r0, #0]
 80083ba:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80083be:	f7ff faed 	bl	800799c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80083c2:	8861      	ldrh	r1, [r4, #2]
 80083c4:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80083c8:	0a09      	lsrs	r1, r1, #8
 80083ca:	f7ff fae7 	bl	800799c <WIZCHIP_WRITE>
 80083ce:	78a1      	ldrb	r1, [r4, #2]
 80083d0:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
}
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 80083d8:	f7ff bae0 	b.w	800799c <WIZCHIP_WRITE>

080083dc <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 80083e0:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80083e4:	f7ff faac 	bl	8007940 <WIZCHIP_READ>
 80083e8:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 80083ea:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80083ee:	f7ff faa7 	bl	8007940 <WIZCHIP_READ>
 80083f2:	4605      	mov	r5, r0
 80083f4:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80083f8:	f7ff faa2 	bl	8007940 <WIZCHIP_READ>
 80083fc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8008400:	8060      	strh	r0, [r4, #2]
}
 8008402:	bd38      	pop	{r3, r4, r5, pc}

08008404 <ctlnetwork>:
{
 8008404:	b510      	push	{r4, lr}
 8008406:	460c      	mov	r4, r1
   switch(cntype)
 8008408:	2805      	cmp	r0, #5
 800840a:	d81e      	bhi.n	800844a <ctlnetwork+0x46>
 800840c:	e8df f000 	tbb	[pc, r0]
 8008410:	110c0803 	.word	0x110c0803
 8008414:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8008416:	4608      	mov	r0, r1
 8008418:	f7ff ff5a 	bl	80082d0 <wizchip_setnetinfo>
   return 0;
 800841c:	2000      	movs	r0, #0
}
 800841e:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8008420:	4608      	mov	r0, r1
 8008422:	f7ff ff83 	bl	800832c <wizchip_getnetinfo>
         break;
 8008426:	e7f9      	b.n	800841c <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 8008428:	7808      	ldrb	r0, [r1, #0]
}
 800842a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 800842e:	f7ff bfab 	b.w	8008388 <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 8008432:	f7ff ffbc 	bl	80083ae <wizchip_getnetmode>
 8008436:	7020      	strb	r0, [r4, #0]
         break;
 8008438:	e7f0      	b.n	800841c <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800843a:	4608      	mov	r0, r1
 800843c:	f7ff ffba 	bl	80083b4 <wizchip_settimeout>
         break;
 8008440:	e7ec      	b.n	800841c <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8008442:	4608      	mov	r0, r1
 8008444:	f7ff ffca 	bl	80083dc <wizchip_gettimeout>
         break;
 8008448:	e7e8      	b.n	800841c <ctlnetwork+0x18>
   switch(cntype)
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	e7e6      	b.n	800841e <ctlnetwork+0x1a>

08008450 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008450:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8008454:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008456:	b16b      	cbz	r3, 8008474 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008458:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800845c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8008460:	28ff      	cmp	r0, #255	@ 0xff
 8008462:	d007      	beq.n	8008474 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	4621      	mov	r1, r4
 8008468:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800846c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800846e:	23ff      	movs	r3, #255	@ 0xff
 8008470:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8008474:	2000      	movs	r0, #0
 8008476:	bd10      	pop	{r4, pc}

08008478 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008478:	2343      	movs	r3, #67	@ 0x43
 800847a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800847c:	4800      	ldr	r0, [pc, #0]	@ (8008480 <USBD_CDC_GetFSCfgDesc+0x8>)
 800847e:	4770      	bx	lr
 8008480:	20000098 	.word	0x20000098

08008484 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008484:	2343      	movs	r3, #67	@ 0x43
 8008486:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008488:	4800      	ldr	r0, [pc, #0]	@ (800848c <USBD_CDC_GetHSCfgDesc+0x8>)
 800848a:	4770      	bx	lr
 800848c:	200000dc 	.word	0x200000dc

08008490 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008490:	2343      	movs	r3, #67	@ 0x43
 8008492:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008494:	4800      	ldr	r0, [pc, #0]	@ (8008498 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008496:	4770      	bx	lr
 8008498:	20000054 	.word	0x20000054

0800849c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800849c:	230a      	movs	r3, #10
 800849e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80084a0:	4800      	ldr	r0, [pc, #0]	@ (80084a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80084a2:	4770      	bx	lr
 80084a4:	20000158 	.word	0x20000158

080084a8 <USBD_CDC_DataOut>:
{
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ac:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084b0:	f000 ff84 	bl	80093bc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80084b4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084b8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80084bc:	b14b      	cbz	r3, 80084d2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084be:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80084c2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80084cc:	4798      	blx	r3
    return USBD_OK;
 80084ce:	2000      	movs	r0, #0
}
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80084d2:	2002      	movs	r0, #2
 80084d4:	e7fc      	b.n	80084d0 <USBD_CDC_DataOut+0x28>

080084d6 <USBD_CDC_DataIn>:
{
 80084d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084d8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80084dc:	b1ce      	cbz	r6, 8008512 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084de:	2214      	movs	r2, #20
 80084e0:	fb02 0201 	mla	r2, r2, r1, r0
 80084e4:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80084e6:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084ea:	b173      	cbz	r3, 800850a <USBD_CDC_DataIn+0x34>
 80084ec:	2728      	movs	r7, #40	@ 0x28
 80084ee:	fb07 5401 	mla	r4, r7, r1, r5
 80084f2:	6a24      	ldr	r4, [r4, #32]
 80084f4:	fbb3 f5f4 	udiv	r5, r3, r4
 80084f8:	fb04 3315 	mls	r3, r4, r5, r3
 80084fc:	b92b      	cbnz	r3, 800850a <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80084fe:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008500:	461a      	mov	r2, r3
 8008502:	f000 ff49 	bl	8009398 <USBD_LL_Transmit>
    return USBD_OK;
 8008506:	2000      	movs	r0, #0
}
 8008508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8008510:	e7f9      	b.n	8008506 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8008512:	2002      	movs	r0, #2
 8008514:	e7f8      	b.n	8008508 <USBD_CDC_DataIn+0x32>

08008516 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8008516:	2300      	movs	r3, #0
{
 8008518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851a:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 800851c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8008520:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008524:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800852c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008530:	d022      	beq.n	8008578 <USBD_CDC_Setup+0x62>
 8008532:	2b20      	cmp	r3, #32
 8008534:	d13a      	bne.n	80085ac <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8008536:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008538:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800853a:	b1ba      	cbz	r2, 800856c <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 800853c:	0639      	lsls	r1, r7, #24
 800853e:	d50b      	bpl.n	8008558 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008540:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8008544:	4618      	mov	r0, r3
 8008546:	688f      	ldr	r7, [r1, #8]
 8008548:	4631      	mov	r1, r6
 800854a:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800854c:	4631      	mov	r1, r6
 800854e:	4620      	mov	r0, r4
 8008550:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008552:	f000 fc4d 	bl	8008df0 <USBD_CtlSendData>
 8008556:	e006      	b.n	8008566 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008558:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800855a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800855e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008562:	f000 fc5a 	bl	8008e1a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8008566:	2000      	movs	r0, #0
}
 8008568:	b003      	add	sp, #12
 800856a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800856c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8008570:	6884      	ldr	r4, [r0, #8]
 8008572:	4618      	mov	r0, r3
 8008574:	47a0      	blx	r4
 8008576:	e7f6      	b.n	8008566 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8008578:	784b      	ldrb	r3, [r1, #1]
 800857a:	2b0a      	cmp	r3, #10
 800857c:	d00a      	beq.n	8008594 <USBD_CDC_Setup+0x7e>
 800857e:	2b0b      	cmp	r3, #11
 8008580:	d010      	beq.n	80085a4 <USBD_CDC_Setup+0x8e>
 8008582:	b99b      	cbnz	r3, 80085ac <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008588:	2b03      	cmp	r3, #3
 800858a:	d10f      	bne.n	80085ac <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800858c:	2202      	movs	r2, #2
 800858e:	f10d 0106 	add.w	r1, sp, #6
 8008592:	e7de      	b.n	8008552 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008594:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008598:	2b03      	cmp	r3, #3
 800859a:	d107      	bne.n	80085ac <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800859c:	2201      	movs	r2, #1
 800859e:	f10d 0105 	add.w	r1, sp, #5
 80085a2:	e7d6      	b.n	8008552 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d0dc      	beq.n	8008566 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f000 fbf7 	bl	8008da2 <USBD_CtlError>
            ret = USBD_FAIL;
 80085b4:	2002      	movs	r0, #2
 80085b6:	e7d7      	b.n	8008568 <USBD_CDC_Setup+0x52>

080085b8 <USBD_CDC_DeInit>:
{
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085bc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085be:	2181      	movs	r1, #129	@ 0x81
 80085c0:	f000 feb5 	bl	800932e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085c4:	2101      	movs	r1, #1
 80085c6:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085c8:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085ca:	f000 feb0 	bl	800932e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085ce:	2182      	movs	r1, #130	@ 0x82
 80085d0:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085d2:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085d6:	f000 feaa 	bl	800932e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80085da:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80085de:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80085e0:	b14b      	cbz	r3, 80085f6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80085e2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80085ea:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 80085ee:	f000 feed 	bl	80093cc <USBD_static_free>
    pdev->pClassData = NULL;
 80085f2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 80085f6:	2000      	movs	r0, #0
 80085f8:	bd38      	pop	{r3, r4, r5, pc}

080085fa <USBD_CDC_Init>:
{
 80085fa:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fc:	7c03      	ldrb	r3, [r0, #16]
{
 80085fe:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008600:	bba3      	cbnz	r3, 800866c <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008606:	2181      	movs	r1, #129	@ 0x81
 8008608:	2202      	movs	r2, #2
 800860a:	f000 fe84 	bl	8009316 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800860e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008610:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008614:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008616:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008618:	2202      	movs	r2, #2
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fe7b 	bl	8009316 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008620:	2308      	movs	r3, #8
 8008622:	2203      	movs	r2, #3
 8008624:	2182      	movs	r1, #130	@ 0x82
 8008626:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008628:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800862c:	f000 fe73 	bl	8009316 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008630:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008634:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008636:	f000 fec5 	bl	80093c4 <USBD_static_malloc>
 800863a:	4606      	mov	r6, r0
 800863c:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8008640:	b1f8      	cbz	r0, 8008682 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008642:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4798      	blx	r3
    hcdc->TxState = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008650:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008654:	7c23      	ldrb	r3, [r4, #16]
 8008656:	b993      	cbnz	r3, 800867e <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008658:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800865c:	4629      	mov	r1, r5
 800865e:	4620      	mov	r0, r4
 8008660:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8008664:	f000 fea1 	bl	80093aa <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008668:	2000      	movs	r0, #0
}
 800866a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800866c:	2340      	movs	r3, #64	@ 0x40
 800866e:	2181      	movs	r1, #129	@ 0x81
 8008670:	2202      	movs	r2, #2
 8008672:	f000 fe50 	bl	8009316 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008676:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008678:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800867a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800867c:	e7cb      	b.n	8008616 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800867e:	2340      	movs	r3, #64	@ 0x40
 8008680:	e7ec      	b.n	800865c <USBD_CDC_Init+0x62>
    ret = 1U;
 8008682:	4628      	mov	r0, r5
 8008684:	e7f1      	b.n	800866a <USBD_CDC_Init+0x70>

08008686 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008686:	b119      	cbz	r1, 8008690 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008688:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800868c:	2000      	movs	r0, #0
 800868e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008690:	2002      	movs	r0, #2
  }

  return ret;
}
 8008692:	4770      	bx	lr

08008694 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008694:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008698:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800869a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800869e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 80086a2:	4770      	bx	lr

080086a4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80086a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 80086a8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80086aa:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 80086ae:	4770      	bx	lr

080086b0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086b0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80086b4:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80086b6:	b182      	cbz	r2, 80086da <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80086b8:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 80086bc:	2301      	movs	r3, #1
 80086be:	b974      	cbnz	r4, 80086de <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80086c0:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80086c4:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086c8:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80086ca:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086cc:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f000 fe61 	bl	8009398 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80086d6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80086d8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80086da:	2002      	movs	r0, #2
 80086dc:	e7fc      	b.n	80086d8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80086de:	4618      	mov	r0, r3
 80086e0:	e7fa      	b.n	80086d8 <USBD_CDC_TransmitPacket+0x28>

080086e2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086e2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80086e6:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086e8:	b162      	cbz	r2, 8008704 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ea:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086ec:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f0:	b933      	cbnz	r3, 8008700 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80086f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086f6:	2101      	movs	r1, #1
 80086f8:	f000 fe57 	bl	80093aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80086fc:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80086fe:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8008700:	2340      	movs	r3, #64	@ 0x40
 8008702:	e7f8      	b.n	80086f6 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8008704:	2002      	movs	r0, #2
 8008706:	e7fa      	b.n	80086fe <USBD_CDC_ReceivePacket+0x1c>

08008708 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008708:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800870a:	b180      	cbz	r0, 800872e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800870c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008710:	b113      	cbz	r3, 8008718 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008718:	b109      	cbz	r1, 800871e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800871a:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800871e:	2301      	movs	r3, #1
  pdev->id = id;
 8008720:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008722:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008726:	f000 fdad 	bl	8009284 <USBD_LL_Init>

  return USBD_OK;
 800872a:	2000      	movs	r0, #0
}
 800872c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800872e:	2002      	movs	r0, #2
 8008730:	e7fc      	b.n	800872c <USBD_Init+0x24>

08008732 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008732:	b119      	cbz	r1, 800873c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008734:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8008738:	2000      	movs	r0, #0
 800873a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800873c:	2002      	movs	r0, #2
  }

  return status;
}
 800873e:	4770      	bx	lr

08008740 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008740:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008742:	f000 fddf 	bl	8009304 <USBD_LL_Start>

  return USBD_OK;
}
 8008746:	2000      	movs	r0, #0
 8008748:	bd08      	pop	{r3, pc}

0800874a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800874a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800874c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008750:	b133      	cbz	r3, 8008760 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4798      	blx	r3
 8008756:	3800      	subs	r0, #0
 8008758:	bf18      	it	ne
 800875a:	2001      	movne	r0, #1
 800875c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800875e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008760:	2002      	movs	r0, #2
 8008762:	e7fc      	b.n	800875e <USBD_SetClassConfig+0x14>

08008764 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008764:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008766:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4798      	blx	r3

  return USBD_OK;
}
 800876e:	2000      	movs	r0, #0
 8008770:	bd08      	pop	{r3, pc}

08008772 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008772:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008774:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8008778:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800877a:	4628      	mov	r0, r5
 800877c:	f000 fb06 	bl	8008d8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008780:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008782:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8008786:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800878a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800878e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008792:	f001 031f 	and.w	r3, r1, #31
 8008796:	2b01      	cmp	r3, #1
 8008798:	d008      	beq.n	80087ac <USBD_LL_SetupStage+0x3a>
 800879a:	2b02      	cmp	r3, #2
 800879c:	d00b      	beq.n	80087b6 <USBD_LL_SetupStage+0x44>
 800879e:	b97b      	cbnz	r3, 80087c0 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80087a0:	4629      	mov	r1, r5
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 f8fa 	bl	800899c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80087a8:	2000      	movs	r0, #0
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80087ac:	4629      	mov	r1, r5
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 fa3c 	bl	8008c2c <USBD_StdItfReq>
      break;
 80087b4:	e7f8      	b.n	80087a8 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80087b6:	4629      	mov	r1, r5
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fa5b 	bl	8008c74 <USBD_StdEPReq>
      break;
 80087be:	e7f3      	b.n	80087a8 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80087c6:	f000 fdbb 	bl	8009340 <USBD_LL_StallEP>
      break;
 80087ca:	e7ed      	b.n	80087a8 <USBD_LL_SetupStage+0x36>

080087cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087d2:	bb39      	cbnz	r1, 8008824 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80087d8:	2a03      	cmp	r2, #3
 80087da:	d11c      	bne.n	8008816 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 80087dc:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 80087e0:	4295      	cmp	r5, r2
 80087e2:	d90b      	bls.n	80087fc <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 80087e4:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 80087e6:	42aa      	cmp	r2, r5
 80087e8:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 80087ea:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80087ee:	bf8c      	ite	hi
 80087f0:	b2aa      	uxthhi	r2, r5
 80087f2:	b292      	uxthls	r2, r2
 80087f4:	f000 fb1e 	bl	8008e34 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80087f8:	2000      	movs	r0, #0
}
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	b123      	cbz	r3, 800880e <USBD_LL_DataOutStage+0x42>
 8008804:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008808:	2a03      	cmp	r2, #3
 800880a:	d100      	bne.n	800880e <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800880c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fb18 	bl	8008e44 <USBD_CtlSendStatus>
 8008814:	e7f0      	b.n	80087f8 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008816:	2a05      	cmp	r2, #5
 8008818:	d1ee      	bne.n	80087f8 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800881a:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800881e:	f000 fd8f 	bl	8009340 <USBD_LL_StallEP>
 8008822:	e7e9      	b.n	80087f8 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008824:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	b12b      	cbz	r3, 8008838 <USBD_LL_DataOutStage+0x6c>
 800882c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008830:	2a03      	cmp	r2, #3
 8008832:	d101      	bne.n	8008838 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8008834:	4798      	blx	r3
 8008836:	e7df      	b.n	80087f8 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8008838:	2002      	movs	r0, #2
 800883a:	e7de      	b.n	80087fa <USBD_LL_DataOutStage+0x2e>

0800883c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	4604      	mov	r4, r0
 8008840:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008842:	460f      	mov	r7, r1
 8008844:	2900      	cmp	r1, #0
 8008846:	d149      	bne.n	80088dc <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008848:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800884c:	2a02      	cmp	r2, #2
 800884e:	d13a      	bne.n	80088c6 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8008850:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8008854:	42b5      	cmp	r5, r6
 8008856:	d911      	bls.n	800887c <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8008858:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800885a:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800885c:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800885e:	b2aa      	uxth	r2, r5
 8008860:	f000 fad3 	bl	8008e0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008864:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008866:	461a      	mov	r2, r3
 8008868:	4619      	mov	r1, r3
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fd9d 	bl	80093aa <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008870:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d02d      	beq.n	80088d4 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008878:	2000      	movs	r0, #0
}
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800887c:	69c3      	ldr	r3, [r0, #28]
 800887e:	fbb3 f5f6 	udiv	r5, r3, r6
 8008882:	fb06 3515 	mls	r5, r6, r5, r3
 8008886:	b965      	cbnz	r5, 80088a2 <USBD_LL_DataInStage+0x66>
 8008888:	429e      	cmp	r6, r3
 800888a:	d80a      	bhi.n	80088a2 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800888c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8008890:	4293      	cmp	r3, r2
 8008892:	d206      	bcs.n	80088a2 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008894:	462a      	mov	r2, r5
 8008896:	f000 fab8 	bl	8008e0a <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800889a:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800889c:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a0:	e7e1      	b.n	8008866 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088a2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	b12b      	cbz	r3, 80088b6 <USBD_LL_DataInStage+0x7a>
 80088aa:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80088ae:	2a03      	cmp	r2, #3
 80088b0:	d101      	bne.n	80088b6 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80088b2:	4620      	mov	r0, r4
 80088b4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80088b6:	2180      	movs	r1, #128	@ 0x80
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fd41 	bl	8009340 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 facb 	bl	8008e5a <USBD_CtlReceiveStatus>
 80088c4:	e7d4      	b.n	8008870 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088c6:	f032 0304 	bics.w	r3, r2, #4
 80088ca:	d1d1      	bne.n	8008870 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80088cc:	2180      	movs	r1, #128	@ 0x80
 80088ce:	f000 fd37 	bl	8009340 <USBD_LL_StallEP>
 80088d2:	e7cd      	b.n	8008870 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 80088da:	e7cd      	b.n	8008878 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80088dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	b12b      	cbz	r3, 80088f0 <USBD_LL_DataInStage+0xb4>
 80088e4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80088e8:	2a03      	cmp	r2, #3
 80088ea:	d101      	bne.n	80088f0 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 80088ec:	4798      	blx	r3
 80088ee:	e7c3      	b.n	8008878 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 80088f0:	2002      	movs	r0, #2
 80088f2:	e7c2      	b.n	800887a <USBD_LL_DataInStage+0x3e>

080088f4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088f4:	2200      	movs	r2, #0
{
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088fa:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088fc:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088fe:	4611      	mov	r1, r2
 8008900:	2340      	movs	r3, #64	@ 0x40
 8008902:	f000 fd08 	bl	8009316 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008906:	4633      	mov	r3, r6
 8008908:	2180      	movs	r1, #128	@ 0x80
 800890a:	2200      	movs	r2, #0
 800890c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800890e:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008912:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008916:	f000 fcfe 	bl	8009316 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800891a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800891c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008920:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008922:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008924:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008928:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800892c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800892e:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8008932:	b123      	cbz	r3, 800893e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008934:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8008938:	4620      	mov	r0, r4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800893e:	2000      	movs	r0, #0
 8008940:	bd70      	pop	{r4, r5, r6, pc}

08008942 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008942:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008944:	2000      	movs	r0, #0
 8008946:	4770      	bx	lr

08008948 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008948:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800894c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008950:	2304      	movs	r3, #4
 8008952:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8008956:	2000      	movs	r0, #0
 8008958:	4770      	bx	lr

0800895a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800895a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800895e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008960:	bf04      	itt	eq
 8008962:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8008966:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800896a:	2000      	movs	r0, #0
 800896c:	4770      	bx	lr

0800896e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800896e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008970:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008974:	2a03      	cmp	r2, #3
 8008976:	d104      	bne.n	8008982 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008978:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	b103      	cbz	r3, 8008982 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008980:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8008982:	2000      	movs	r0, #0
 8008984:	bd08      	pop	{r3, pc}

08008986 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8008986:	b510      	push	{r4, lr}
 8008988:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800898a:	2180      	movs	r1, #128	@ 0x80
 800898c:	f000 fcd8 	bl	8009340 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008990:	4620      	mov	r0, r4
}
 8008992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008996:	2100      	movs	r1, #0
 8008998:	f000 bcd2 	b.w	8009340 <USBD_LL_StallEP>

0800899c <USBD_StdDevReq>:
{
 800899c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899e:	780b      	ldrb	r3, [r1, #0]
 80089a0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089a6:	2b20      	cmp	r3, #32
{
 80089a8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089aa:	d006      	beq.n	80089ba <USBD_StdDevReq+0x1e>
 80089ac:	2b40      	cmp	r3, #64	@ 0x40
 80089ae:	d004      	beq.n	80089ba <USBD_StdDevReq+0x1e>
 80089b0:	b163      	cbz	r3, 80089cc <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7ff ffe7 	bl	8008986 <USBD_CtlError.constprop.0>
        break;
 80089b8:	e005      	b.n	80089c6 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80089ba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80089be:	4629      	mov	r1, r5
 80089c0:	4620      	mov	r0, r4
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	4798      	blx	r3
}
 80089c6:	2000      	movs	r0, #0
 80089c8:	b003      	add	sp, #12
 80089ca:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80089cc:	784b      	ldrb	r3, [r1, #1]
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d8ef      	bhi.n	80089b2 <USBD_StdDevReq+0x16>
 80089d2:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <USBD_StdDevReq+0x3c>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008bdb 	.word	0x08008bdb
 80089dc:	08008c11 	.word	0x08008c11
 80089e0:	080089b3 	.word	0x080089b3
 80089e4:	08008c03 	.word	0x08008c03
 80089e8:	080089b3 	.word	0x080089b3
 80089ec:	08008b01 	.word	0x08008b01
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	080089b3 	.word	0x080089b3
 80089f8:	08008bab 	.word	0x08008bab
 80089fc:	08008b43 	.word	0x08008b43
  uint16_t len = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008a06:	884b      	ldrh	r3, [r1, #2]
 8008a08:	0a1a      	lsrs	r2, r3, #8
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	2a06      	cmp	r2, #6
 8008a0e:	d8d0      	bhi.n	80089b2 <USBD_StdDevReq+0x16>
 8008a10:	a101      	add	r1, pc, #4	@ (adr r1, 8008a18 <USBD_StdDevReq+0x7c>)
 8008a12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a35 	.word	0x08008a35
 8008a1c:	08008a59 	.word	0x08008a59
 8008a20:	08008a73 	.word	0x08008a73
 8008a24:	080089b3 	.word	0x080089b3
 8008a28:	080089b3 	.word	0x080089b3
 8008a2c:	08008ab7 	.word	0x08008ab7
 8008a30:	08008acd 	.word	0x08008acd
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a34:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a38:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a3a:	7c20      	ldrb	r0, [r4, #16]
 8008a3c:	f10d 0106 	add.w	r1, sp, #6
 8008a40:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8008a42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a46:	88eb      	ldrh	r3, [r5, #6]
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	d054      	beq.n	8008af6 <USBD_StdDevReq+0x15a>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d149      	bne.n	8008ae4 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 f9f7 	bl	8008e44 <USBD_CtlSendStatus>
 8008a56:	e7b6      	b.n	80089c6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a58:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8008a5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a5e:	b932      	cbnz	r2, 8008a6e <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a62:	f10d 0006 	add.w	r0, sp, #6
 8008a66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a68:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a6a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008a6c:	e7e9      	b.n	8008a42 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	e7f7      	b.n	8008a62 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b05      	cmp	r3, #5
 8008a76:	d89c      	bhi.n	80089b2 <USBD_StdDevReq+0x16>
 8008a78:	e8df f003 	tbb	[pc, r3]
 8008a7c:	110d0903 	.word	0x110d0903
 8008a80:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a82:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a86:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1d6      	bne.n	8008a3a <USBD_StdDevReq+0x9e>
 8008a8c:	e791      	b.n	80089b2 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a8e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	e7f8      	b.n	8008a88 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a96:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	e7f4      	b.n	8008a88 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	e7f0      	b.n	8008a88 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	e7ec      	b.n	8008a88 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aae:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	e7e8      	b.n	8008a88 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab6:	7c03      	ldrb	r3, [r0, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f47f af7a 	bne.w	80089b2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008abe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008ac2:	f10d 0006 	add.w	r0, sp, #6
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac8:	4798      	blx	r3
  if (err != 0U)
 8008aca:	e7ba      	b.n	8008a42 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008acc:	7c03      	ldrb	r3, [r0, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f af6f 	bne.w	80089b2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ad4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008ad8:	f10d 0006 	add.w	r0, sp, #6
 8008adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ade:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	2307      	movs	r3, #7
 8008ae2:	e7c2      	b.n	8008a6a <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	bf28      	it	cs
 8008ae8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008aea:	4601      	mov	r1, r0
 8008aec:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008aee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008af2:	f000 f97d 	bl	8008df0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008af6:	88eb      	ldrh	r3, [r5, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f47f af64 	bne.w	80089c6 <USBD_StdDevReq+0x2a>
 8008afe:	e7a7      	b.n	8008a50 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b00:	888b      	ldrh	r3, [r1, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f47f af55 	bne.w	80089b2 <USBD_StdDevReq+0x16>
 8008b08:	88cb      	ldrh	r3, [r1, #6]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f47f af51 	bne.w	80089b2 <USBD_StdDevReq+0x16>
 8008b10:	884d      	ldrh	r5, [r1, #2]
 8008b12:	2d7f      	cmp	r5, #127	@ 0x7f
 8008b14:	f63f af4d 	bhi.w	80089b2 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	f43f af48 	beq.w	80089b2 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b22:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b24:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8008b26:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b2a:	f000 fc2c 	bl	8009386 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f988 	bl	8008e44 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008b34:	b11d      	cbz	r5, 8008b3e <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b36:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b38:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008b3c:	e743      	b.n	80089c6 <USBD_StdDevReq+0x2a>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7fa      	b.n	8008b38 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8008b42:	7889      	ldrb	r1, [r1, #2]
 8008b44:	4d38      	ldr	r5, [pc, #224]	@ (8008c28 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b46:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008b48:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b4a:	f63f af32 	bhi.w	80089b2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8008b4e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d008      	beq.n	8008b68 <USBD_StdDevReq+0x1cc>
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d015      	beq.n	8008b86 <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8008b5a:	f7ff ff14 	bl	8008986 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b5e:	4620      	mov	r0, r4
 8008b60:	7829      	ldrb	r1, [r5, #0]
 8008b62:	f7ff fdff 	bl	8008764 <USBD_ClrClassConfig>
        break;
 8008b66:	e72e      	b.n	80089c6 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	f43f af71 	beq.w	8008a50 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8008b6e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b70:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008b72:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b74:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff fde6 	bl	800874a <USBD_SetClassConfig>
 8008b7e:	2802      	cmp	r0, #2
 8008b80:	f47f af66 	bne.w	8008a50 <USBD_StdDevReq+0xb4>
 8008b84:	e715      	b.n	80089b2 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8008b86:	b931      	cbnz	r1, 8008b96 <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b88:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8008b8a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b90:	f7ff fde8 	bl	8008764 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b94:	e75c      	b.n	8008a50 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8008b96:	6841      	ldr	r1, [r0, #4]
 8008b98:	2901      	cmp	r1, #1
 8008b9a:	f43f af59 	beq.w	8008a50 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b9e:	b2c9      	uxtb	r1, r1
 8008ba0:	f7ff fde0 	bl	8008764 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ba4:	7829      	ldrb	r1, [r5, #0]
 8008ba6:	6061      	str	r1, [r4, #4]
 8008ba8:	e7e6      	b.n	8008b78 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8008baa:	88ca      	ldrh	r2, [r1, #6]
 8008bac:	2a01      	cmp	r2, #1
 8008bae:	f47f af00 	bne.w	80089b2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8008bb2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d80a      	bhi.n	8008bd0 <USBD_StdDevReq+0x234>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f43f aef9 	beq.w	80089b2 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 f911 	bl	8008df0 <USBD_CtlSendData>
      break;
 8008bce:	e6fa      	b.n	80089c6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	f47f aeee 	bne.w	80089b2 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bd6:	1d01      	adds	r1, r0, #4
 8008bd8:	e7f6      	b.n	8008bc8 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8008bda:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008bde:	3b01      	subs	r3, #1
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	f63f aee6 	bhi.w	80089b2 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8008be6:	88ca      	ldrh	r2, [r1, #6]
 8008be8:	2a02      	cmp	r2, #2
 8008bea:	f47f aee2 	bne.w	80089b2 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8008bee:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8008bf2:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2303      	movne	r3, #3
 8008bfc:	f841 3f0c 	str.w	r3, [r1, #12]!
 8008c00:	e7e2      	b.n	8008bc8 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c02:	884b      	ldrh	r3, [r1, #2]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	f47f aede 	bne.w	80089c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8008c0a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8008c0e:	e71f      	b.n	8008a50 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8008c10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008c14:	3b01      	subs	r3, #1
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	f63f aecb 	bhi.w	80089b2 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c1c:	884b      	ldrh	r3, [r1, #2]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	f47f aed1 	bne.w	80089c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e7f0      	b.n	8008c0a <USBD_StdDevReq+0x26e>
 8008c28:	200006c9 	.word	0x200006c9

08008c2c <USBD_StdItfReq>:
{
 8008c2c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2e:	780b      	ldrb	r3, [r1, #0]
{
 8008c30:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c32:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8008c36:	065b      	lsls	r3, r3, #25
{
 8008c38:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c3a:	d501      	bpl.n	8008c40 <USBD_StdItfReq+0x14>
 8008c3c:	2a40      	cmp	r2, #64	@ 0x40
 8008c3e:	d115      	bne.n	8008c6c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8008c40:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008c44:	3b01      	subs	r3, #1
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d810      	bhi.n	8008c6c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c4a:	792b      	ldrb	r3, [r5, #4]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d80d      	bhi.n	8008c6c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c50:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8008c54:	4629      	mov	r1, r5
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c5c:	88eb      	ldrh	r3, [r5, #6]
 8008c5e:	b91b      	cbnz	r3, 8008c68 <USBD_StdItfReq+0x3c>
 8008c60:	b910      	cbnz	r0, 8008c68 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 f8ee 	bl	8008e44 <USBD_CtlSendStatus>
}
 8008c68:	2000      	movs	r0, #0
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7ff fe8a 	bl	8008986 <USBD_CtlError.constprop.0>
          break;
 8008c72:	e7f9      	b.n	8008c68 <USBD_StdItfReq+0x3c>

08008c74 <USBD_StdEPReq>:
{
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	780a      	ldrb	r2, [r1, #0]
 8008c78:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8008c7a:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c7e:	2a20      	cmp	r2, #32
{
 8008c80:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8008c82:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c84:	d006      	beq.n	8008c94 <USBD_StdEPReq+0x20>
 8008c86:	2a40      	cmp	r2, #64	@ 0x40
 8008c88:	d004      	beq.n	8008c94 <USBD_StdEPReq+0x20>
 8008c8a:	b15a      	cbz	r2, 8008ca4 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff fe7a 	bl	8008986 <USBD_CtlError.constprop.0>
              break;
 8008c92:	e005      	b.n	8008ca0 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8008c94:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	6892      	ldr	r2, [r2, #8]
 8008c9e:	4790      	blx	r2
}
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8008ca4:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008ca6:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8008ca8:	2a01      	cmp	r2, #1
 8008caa:	d035      	beq.n	8008d18 <USBD_StdEPReq+0xa4>
 8008cac:	2a03      	cmp	r2, #3
 8008cae:	d021      	beq.n	8008cf4 <USBD_StdEPReq+0x80>
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d1eb      	bne.n	8008c8c <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8008cb4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d044      	beq.n	8008d46 <USBD_StdEPReq+0xd2>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d1e5      	bne.n	8008c8c <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8008cc0:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cc2:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8008cc6:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cca:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8008cce:	d04b      	beq.n	8008d68 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0da      	beq.n	8008c8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd6:	2514      	movs	r5, #20
 8008cd8:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8008cdc:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ce0:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce2:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ce4:	d04b      	beq.n	8008d7e <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 fb3c 	bl	8009364 <USBD_LL_IsStallEP>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d04b      	beq.n	8008d88 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e045      	b.n	8008d80 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8008cf4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008cf8:	2a02      	cmp	r2, #2
 8008cfa:	d01b      	beq.n	8008d34 <USBD_StdEPReq+0xc0>
 8008cfc:	2a03      	cmp	r2, #3
 8008cfe:	d1c5      	bne.n	8008c8c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d00:	885a      	ldrh	r2, [r3, #2]
 8008d02:	b92a      	cbnz	r2, 8008d10 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8008d04:	064a      	lsls	r2, r1, #25
 8008d06:	d003      	beq.n	8008d10 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	b90b      	cbnz	r3, 8008d10 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d0c:	f000 fb18 	bl	8009340 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 f897 	bl	8008e44 <USBD_CtlSendStatus>
              break;
 8008d16:	e7c3      	b.n	8008ca0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8008d18:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008d1c:	2a02      	cmp	r2, #2
 8008d1e:	d009      	beq.n	8008d34 <USBD_StdEPReq+0xc0>
 8008d20:	2a03      	cmp	r2, #3
 8008d22:	d1b3      	bne.n	8008c8c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d24:	885b      	ldrh	r3, [r3, #2]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1ba      	bne.n	8008ca0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d2a:	064d      	lsls	r5, r1, #25
 8008d2c:	d0f0      	beq.n	8008d10 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d2e:	f000 fb10 	bl	8009352 <USBD_LL_ClearStallEP>
 8008d32:	e7ed      	b.n	8008d10 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d34:	064b      	lsls	r3, r1, #25
 8008d36:	d0a9      	beq.n	8008c8c <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8008d38:	f000 fb02 	bl	8009340 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d3c:	2180      	movs	r1, #128	@ 0x80
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fafe 	bl	8009340 <USBD_LL_StallEP>
 8008d44:	e7ac      	b.n	8008ca0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d46:	064a      	lsls	r2, r1, #25
 8008d48:	d1a0      	bne.n	8008c8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8008d4c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d50:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d54:	bf4c      	ite	mi
 8008d56:	f100 0114 	addmi.w	r1, r0, #20
 8008d5a:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8008d5e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f845 	bl	8008df0 <USBD_CtlSendData>
              break;
 8008d66:	e79b      	b.n	8008ca0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d68:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d08d      	beq.n	8008c8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d70:	2514      	movs	r5, #20
 8008d72:	fb05 0501 	mla	r5, r5, r1, r0
 8008d76:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d7a:	2900      	cmp	r1, #0
 8008d7c:	d1b3      	bne.n	8008ce6 <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8008d7e:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8008d80:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d82:	2202      	movs	r2, #2
 8008d84:	4629      	mov	r1, r5
 8008d86:	e7eb      	b.n	8008d60 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8008d88:	6028      	str	r0, [r5, #0]
 8008d8a:	e7fa      	b.n	8008d82 <USBD_StdEPReq+0x10e>

08008d8c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008d8c:	780b      	ldrb	r3, [r1, #0]
 8008d8e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d90:	784b      	ldrb	r3, [r1, #1]
 8008d92:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d94:	884b      	ldrh	r3, [r1, #2]
 8008d96:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d98:	888b      	ldrh	r3, [r1, #4]
 8008d9a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d9c:	88cb      	ldrh	r3, [r1, #6]
 8008d9e:	80c3      	strh	r3, [r0, #6]
}
 8008da0:	4770      	bx	lr

08008da2 <USBD_CtlError>:
{
 8008da2:	b510      	push	{r4, lr}
 8008da4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008da6:	2180      	movs	r1, #128	@ 0x80
 8008da8:	f000 faca 	bl	8009340 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dac:	4620      	mov	r0, r4
}
 8008dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008db2:	2100      	movs	r1, #0
 8008db4:	f000 bac4 	b.w	8009340 <USBD_LL_StallEP>

08008db8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	460d      	mov	r5, r1
 8008dbc:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	b170      	cbz	r0, 8008de0 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008dc2:	f7f7 f9c5 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008dc6:	b2c3      	uxtb	r3, r0
 8008dc8:	3301      	adds	r3, #1
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008dce:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008dd0:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8008dd2:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008dd4:	706b      	strb	r3, [r5, #1]
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8008dda:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8008dde:	b901      	cbnz	r1, 8008de2 <USBD_GetString+0x2a>
}
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	54e9      	strb	r1, [r5, r3]
 8008de6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8008de8:	3302      	adds	r3, #2
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	54a8      	strb	r0, [r5, r2]
 8008dee:	e7f4      	b.n	8008dda <USBD_GetString+0x22>

08008df0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008df0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008df2:	2202      	movs	r2, #2
{
 8008df4:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8008df6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dfa:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dfe:	460a      	mov	r2, r1
 8008e00:	2100      	movs	r1, #0
 8008e02:	f000 fac9 	bl	8009398 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e06:	2000      	movs	r0, #0
 8008e08:	bd10      	pop	{r4, pc}

08008e0a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e0a:	b508      	push	{r3, lr}
 8008e0c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e0e:	460a      	mov	r2, r1
 8008e10:	2100      	movs	r1, #0
 8008e12:	f000 fac1 	bl	8009398 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e16:	2000      	movs	r0, #0
 8008e18:	bd08      	pop	{r3, pc}

08008e1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e1a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e1c:	2203      	movs	r2, #3
{
 8008e1e:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8008e20:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e24:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e28:	460a      	mov	r2, r1
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	f000 fabd 	bl	80093aa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e30:	2000      	movs	r0, #0
 8008e32:	bd10      	pop	{r4, pc}

08008e34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e34:	b508      	push	{r3, lr}
 8008e36:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e38:	460a      	mov	r2, r1
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	f000 fab5 	bl	80093aa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e40:	2000      	movs	r0, #0
 8008e42:	bd08      	pop	{r3, pc}

08008e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e44:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e46:	2304      	movs	r3, #4
 8008e48:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	461a      	mov	r2, r3
 8008e50:	4619      	mov	r1, r3
 8008e52:	f000 faa1 	bl	8009398 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e56:	2000      	movs	r0, #0
 8008e58:	bd08      	pop	{r3, pc}

08008e5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e5a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e5c:	2305      	movs	r3, #5
 8008e5e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e62:	2300      	movs	r3, #0
 8008e64:	461a      	mov	r2, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	f000 fa9f 	bl	80093aa <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	bd08      	pop	{r3, pc}

08008e70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e72:	2200      	movs	r2, #0
 8008e74:	490e      	ldr	r1, [pc, #56]	@ (8008eb0 <MX_USB_DEVICE_Init+0x40>)
 8008e76:	480f      	ldr	r0, [pc, #60]	@ (8008eb4 <MX_USB_DEVICE_Init+0x44>)
 8008e78:	f7ff fc46 	bl	8008708 <USBD_Init>
 8008e7c:	b108      	cbz	r0, 8008e82 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8008e7e:	f7f8 fe2d 	bl	8001adc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e82:	490d      	ldr	r1, [pc, #52]	@ (8008eb8 <MX_USB_DEVICE_Init+0x48>)
 8008e84:	480b      	ldr	r0, [pc, #44]	@ (8008eb4 <MX_USB_DEVICE_Init+0x44>)
 8008e86:	f7ff fc54 	bl	8008732 <USBD_RegisterClass>
 8008e8a:	b108      	cbz	r0, 8008e90 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8008e8c:	f7f8 fe26 	bl	8001adc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e90:	490a      	ldr	r1, [pc, #40]	@ (8008ebc <MX_USB_DEVICE_Init+0x4c>)
 8008e92:	4808      	ldr	r0, [pc, #32]	@ (8008eb4 <MX_USB_DEVICE_Init+0x44>)
 8008e94:	f7ff fbf7 	bl	8008686 <USBD_CDC_RegisterInterface>
 8008e98:	b108      	cbz	r0, 8008e9e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008e9a:	f7f8 fe1f 	bl	8001adc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e9e:	4805      	ldr	r0, [pc, #20]	@ (8008eb4 <MX_USB_DEVICE_Init+0x44>)
 8008ea0:	f7ff fc4e 	bl	8008740 <USBD_Start>
 8008ea4:	b118      	cbz	r0, 8008eae <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008eaa:	f7f8 be17 	b.w	8001adc <Error_Handler>
}
 8008eae:	bd08      	pop	{r3, pc}
 8008eb0:	200001a8 	.word	0x200001a8
 8008eb4:	200006cc 	.word	0x200006cc
 8008eb8:	20000120 	.word	0x20000120
 8008ebc:	20000164 	.word	0x20000164

08008ec0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	4770      	bx	lr

08008ec4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	4770      	bx	lr

08008ec8 <CDC_Init_FS>:
{
 8008ec8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008eca:	4c06      	ldr	r4, [pc, #24]	@ (8008ee4 <CDC_Init_FS+0x1c>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4905      	ldr	r1, [pc, #20]	@ (8008ee8 <CDC_Init_FS+0x20>)
 8008ed2:	f7ff fbdf 	bl	8008694 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4904      	ldr	r1, [pc, #16]	@ (8008eec <CDC_Init_FS+0x24>)
 8008eda:	f7ff fbe3 	bl	80086a4 <USBD_CDC_SetRxBuffer>
}
 8008ede:	2000      	movs	r0, #0
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200006cc 	.word	0x200006cc
 8008ee8:	200009d1 	.word	0x200009d1
 8008eec:	20000dd1 	.word	0x20000dd1

08008ef0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ef0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ef2:	4c09      	ldr	r4, [pc, #36]	@ (8008f18 <CDC_Transmit_FS+0x28>)
{
 8008ef4:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ef6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8008efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008efe:	b943      	cbnz	r3, 8008f12 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f00:	4601      	mov	r1, r0
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff fbc6 	bl	8008694 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f08:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8008f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f0e:	f7ff bbcf 	b.w	80086b0 <USBD_CDC_TransmitPacket>
}
 8008f12:	2001      	movs	r0, #1
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	200006cc 	.word	0x200006cc

08008f1c <CDC_Receive_FS>:
{
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4606      	mov	r6, r0
 8008f22:	4688      	mov	r8, r1
		    for (uint32_t i = 0; i < *Len; i++) {
 8008f24:	2700      	movs	r7, #0
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8008f26:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8009070 <CDC_Receive_FS+0x154>
 8008f2a:	4d52      	ldr	r5, [pc, #328]	@ (8009074 <CDC_Receive_FS+0x158>)
{
 8008f2c:	b095      	sub	sp, #84	@ 0x54
		    for (uint32_t i = 0; i < *Len; i++) {
 8008f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f32:	42bb      	cmp	r3, r7
 8008f34:	d80a      	bhi.n	8008f4c <CDC_Receive_FS+0x30>
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f36:	4631      	mov	r1, r6
 8008f38:	484f      	ldr	r0, [pc, #316]	@ (8009078 <CDC_Receive_FS+0x15c>)
 8008f3a:	f7ff fbb3 	bl	80086a4 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f3e:	484e      	ldr	r0, [pc, #312]	@ (8009078 <CDC_Receive_FS+0x15c>)
 8008f40:	f7ff fbcf 	bl	80086e2 <USBD_CDC_ReceivePacket>
}
 8008f44:	2000      	movs	r0, #0
 8008f46:	b015      	add	sp, #84	@ 0x54
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		        char byte = Buf[i]; // Чтение байта
 8008f4c:	5df2      	ldrb	r2, [r6, r7]
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8008f4e:	f899 3000 	ldrb.w	r3, [r9]
 8008f52:	2a0a      	cmp	r2, #10
 8008f54:	d002      	beq.n	8008f5c <CDC_Receive_FS+0x40>
 8008f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f58:	f240 8084 	bls.w	8009064 <CDC_Receive_FS+0x148>
		            rx_buffer[rx_index] = '\0';
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	54ea      	strb	r2, [r5, r3]
		                     if (rx_buffer[0] == 'F') {
 8008f60:	782b      	ldrb	r3, [r5, #0]
 8008f62:	2b46      	cmp	r3, #70	@ 0x46
 8008f64:	d146      	bne.n	8008ff4 <CDC_Receive_FS+0xd8>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8008f66:	78ab      	ldrb	r3, [r5, #2]
		                         uint8_t ch = rx_buffer[1] - '0';
 8008f68:	786c      	ldrb	r4, [r5, #1]
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8008f6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f6c:	d13f      	bne.n	8008fee <CDC_Receive_FS+0xd2>
		                         uint8_t ch = rx_buffer[1] - '0';
 8008f6e:	3c30      	subs	r4, #48	@ 0x30
 8008f70:	b2e4      	uxtb	r4, r4
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8008f72:	2c02      	cmp	r4, #2
 8008f74:	d83b      	bhi.n	8008fee <CDC_Receive_FS+0xd2>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 8008f76:	4841      	ldr	r0, [pc, #260]	@ (800907c <CDC_Receive_FS+0x160>)
 8008f78:	f000 fa2a 	bl	80093d0 <atoi>
 8008f7c:	4682      	mov	sl, r0
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 8008f7e:	483f      	ldr	r0, [pc, #252]	@ (800907c <CDC_Receive_FS+0x160>)
 8008f80:	f000 fa26 	bl	80093d0 <atoi>
		                             if (set_freq > 0 && set_freq < 150000000) {
 8008f84:	4b3e      	ldr	r3, [pc, #248]	@ (8009080 <CDC_Receive_FS+0x164>)
 8008f86:	1e42      	subs	r2, r0, #1
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d81d      	bhi.n	8008fc8 <CDC_Receive_FS+0xac>
		                            	 freq[ch] = set_freq / 1000;
 8008f8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008f90:	fbb0 f0f3 	udiv	r0, r0, r3
		                            	 int_to_str(freq[ch], num_string[ch]);
 8008f94:	493b      	ldr	r1, [pc, #236]	@ (8009084 <CDC_Receive_FS+0x168>)
 8008f96:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
		                            	 freq[ch] = set_freq / 1000;
 8008f9a:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8009088 <CDC_Receive_FS+0x16c>
		                            	 int_to_str(freq[ch], num_string[ch]);
 8008f9e:	4419      	add	r1, r3
		                            	 freq[ch] = set_freq / 1000;
 8008fa0:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 8008fa4:	f7f7 ffb0 	bl	8000f08 <int_to_str>
		                            	 print_interface_mode0();
 8008fa8:	f7f8 f822 	bl	8000ff0 <print_interface_mode0>
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 8008fac:	4623      	mov	r3, r4
 8008fae:	2140      	movs	r1, #64	@ 0x40
 8008fb0:	4a36      	ldr	r2, [pc, #216]	@ (800908c <CDC_Receive_FS+0x170>)
 8008fb2:	f8cd a000 	str.w	sl, [sp]
 8008fb6:	a804      	add	r0, sp, #16
 8008fb8:	f000 fb40 	bl	800963c <sniprintf>
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8008fbc:	a804      	add	r0, sp, #16
 8008fbe:	f7f7 f8c7 	bl	8000150 <strlen>
 8008fc2:	b281      	uxth	r1, r0
 8008fc4:	a804      	add	r0, sp, #16
 8008fc6:	e00b      	b.n	8008fe0 <CDC_Receive_FS+0xc4>
		                             } else if (freq == 0) {
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	d106      	bne.n	8008fdc <CDC_Receive_FS+0xc0>
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 8008fce:	4623      	mov	r3, r4
 8008fd0:	2120      	movs	r1, #32
 8008fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8009090 <CDC_Receive_FS+0x174>)
 8008fd4:	a804      	add	r0, sp, #16
 8008fd6:	f000 fb31 	bl	800963c <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8008fda:	e7ef      	b.n	8008fbc <CDC_Receive_FS+0xa0>
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 8008fdc:	2114      	movs	r1, #20
 8008fde:	482d      	ldr	r0, [pc, #180]	@ (8009094 <CDC_Receive_FS+0x178>)
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 8008fe0:	f7ff ff86 	bl	8008ef0 <CDC_Transmit_FS>
		            rx_index = 0; // Очищаем буфер
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f889 3000 	strb.w	r3, [r9]
		    for (uint32_t i = 0; i < *Len; i++) {
 8008fea:	3701      	adds	r7, #1
 8008fec:	e79f      	b.n	8008f2e <CDC_Receive_FS+0x12>
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 8008fee:	2111      	movs	r1, #17
 8008ff0:	4829      	ldr	r0, [pc, #164]	@ (8009098 <CDC_Receive_FS+0x17c>)
 8008ff2:	e7f5      	b.n	8008fe0 <CDC_Receive_FS+0xc4>
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	4928      	ldr	r1, [pc, #160]	@ (800909c <CDC_Receive_FS+0x180>)
 8008ffa:	f000 fb5d 	bl	80096b8 <strncmp>
 8008ffe:	b948      	cbnz	r0, 8009014 <CDC_Receive_FS+0xf8>
		                char msg[] = "Normally\r\n";
 8009000:	4a27      	ldr	r2, [pc, #156]	@ (80090a0 <CDC_Receive_FS+0x184>)
 8009002:	ab04      	add	r3, sp, #16
 8009004:	6851      	ldr	r1, [r2, #4]
 8009006:	6810      	ldr	r0, [r2, #0]
 8009008:	c303      	stmia	r3!, {r0, r1}
 800900a:	8911      	ldrh	r1, [r2, #8]
 800900c:	7a92      	ldrb	r2, [r2, #10]
 800900e:	8019      	strh	r1, [r3, #0]
 8009010:	709a      	strb	r2, [r3, #2]
 8009012:	e7d3      	b.n	8008fbc <CDC_Receive_FS+0xa0>
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 8009014:	2206      	movs	r2, #6
 8009016:	4628      	mov	r0, r5
 8009018:	4922      	ldr	r1, [pc, #136]	@ (80090a4 <CDC_Receive_FS+0x188>)
 800901a:	f000 fb4d 	bl	80096b8 <strncmp>
 800901e:	4603      	mov	r3, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1df      	bne.n	8008fe4 <CDC_Receive_FS+0xc8>
 8009024:	4c18      	ldr	r4, [pc, #96]	@ (8009088 <CDC_Receive_FS+0x16c>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8009026:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80090a8 <CDC_Receive_FS+0x18c>
 800902a:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80090ac <CDC_Receive_FS+0x190>
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800902e:	4a20      	ldr	r2, [pc, #128]	@ (80090b0 <CDC_Receive_FS+0x194>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8009030:	f854 1b04 	ldr.w	r1, [r4], #4
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8009034:	9303      	str	r3, [sp, #12]
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8009036:	2900      	cmp	r1, #0
 8009038:	bfd4      	ite	le
 800903a:	4658      	movle	r0, fp
 800903c:	4650      	movgt	r0, sl
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800903e:	e9cd 0100 	strd	r0, r1, [sp]
 8009042:	2140      	movs	r1, #64	@ 0x40
 8009044:	a804      	add	r0, sp, #16
 8009046:	f000 faf9 	bl	800963c <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800904a:	a804      	add	r0, sp, #16
 800904c:	f7f7 f880 	bl	8000150 <strlen>
 8009050:	b281      	uxth	r1, r0
 8009052:	a804      	add	r0, sp, #16
 8009054:	f7ff ff4c 	bl	8008ef0 <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	4a15      	ldr	r2, [pc, #84]	@ (80090b0 <CDC_Receive_FS+0x194>)
 800905c:	3301      	adds	r3, #1
 800905e:	2b03      	cmp	r3, #3
 8009060:	d1e6      	bne.n	8009030 <CDC_Receive_FS+0x114>
 8009062:	e7bf      	b.n	8008fe4 <CDC_Receive_FS+0xc8>
		            rx_buffer[rx_index++] = byte;
 8009064:	1c59      	adds	r1, r3, #1
 8009066:	f889 1000 	strb.w	r1, [r9]
 800906a:	54ea      	strb	r2, [r5, r3]
 800906c:	e7bd      	b.n	8008fea <CDC_Receive_FS+0xce>
 800906e:	bf00      	nop
 8009070:	200009d0 	.word	0x200009d0
 8009074:	20000990 	.word	0x20000990
 8009078:	200006cc 	.word	0x200006cc
 800907c:	20000993 	.word	0x20000993
 8009080:	08f0d17e 	.word	0x08f0d17e
 8009084:	2000023d 	.word	0x2000023d
 8009088:	20000258 	.word	0x20000258
 800908c:	0800ad2c 	.word	0x0800ad2c
 8009090:	0800ad41 	.word	0x0800ad41
 8009094:	0800ad51 	.word	0x0800ad51
 8009098:	0800ad65 	.word	0x0800ad65
 800909c:	0800ad76 	.word	0x0800ad76
 80090a0:	0800ad9b 	.word	0x0800ad9b
 80090a4:	0800ad80 	.word	0x0800ad80
 80090a8:	0800ad28 	.word	0x0800ad28
 80090ac:	0800ad25 	.word	0x0800ad25
 80090b0:	0800ad87 	.word	0x0800ad87

080090b4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090b4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80090b6:	4801      	ldr	r0, [pc, #4]	@ (80090bc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80090b8:	800b      	strh	r3, [r1, #0]
}
 80090ba:	4770      	bx	lr
 80090bc:	20000194 	.word	0x20000194

080090c0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090c0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80090c2:	4801      	ldr	r0, [pc, #4]	@ (80090c8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80090c4:	800b      	strh	r3, [r1, #0]
}
 80090c6:	4770      	bx	lr
 80090c8:	20000190 	.word	0x20000190

080090cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090cc:	2300      	movs	r3, #0
 80090ce:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80090d0:	461e      	mov	r6, r3
 80090d2:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 80090d4:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80090d6:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80090da:	bf34      	ite	cc
 80090dc:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090de:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80090e0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80090e4:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80090e8:	3301      	adds	r3, #1
 80090ea:	b2dc      	uxtb	r4, r3
 80090ec:	42a2      	cmp	r2, r4
    value = value << 4;
 80090ee:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80090f2:	d8ef      	bhi.n	80090d4 <IntToUnicode+0x8>
  }
}
 80090f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080090f8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80090f8:	231a      	movs	r3, #26
{
 80090fa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80090fc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <USBD_FS_SerialStrDescriptor+0x30>)
 8009100:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8009104:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8009108:	1880      	adds	r0, r0, r2
 800910a:	d00a      	beq.n	8009122 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800910c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009110:	4906      	ldr	r1, [pc, #24]	@ (800912c <USBD_FS_SerialStrDescriptor+0x34>)
 8009112:	2208      	movs	r2, #8
 8009114:	f7ff ffda 	bl	80090cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009118:	2204      	movs	r2, #4
 800911a:	4620      	mov	r0, r4
 800911c:	3110      	adds	r1, #16
 800911e:	f7ff ffd5 	bl	80090cc <IntToUnicode>
}
 8009122:	4803      	ldr	r0, [pc, #12]	@ (8009130 <USBD_FS_SerialStrDescriptor+0x38>)
 8009124:	bd10      	pop	{r4, pc}
 8009126:	bf00      	nop
 8009128:	1ffff000 	.word	0x1ffff000
 800912c:	20000176 	.word	0x20000176
 8009130:	20000174 	.word	0x20000174

08009134 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009134:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009136:	4c04      	ldr	r4, [pc, #16]	@ (8009148 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8009138:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800913a:	4804      	ldr	r0, [pc, #16]	@ (800914c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800913c:	4621      	mov	r1, r4
 800913e:	f7ff fe3b 	bl	8008db8 <USBD_GetString>
}
 8009142:	4620      	mov	r0, r4
 8009144:	bd10      	pop	{r4, pc}
 8009146:	bf00      	nop
 8009148:	200011d4 	.word	0x200011d4
 800914c:	0800ada6 	.word	0x0800ada6

08009150 <USBD_FS_ProductStrDescriptor>:
{
 8009150:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009152:	4c04      	ldr	r4, [pc, #16]	@ (8009164 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8009154:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009156:	4804      	ldr	r0, [pc, #16]	@ (8009168 <USBD_FS_ProductStrDescriptor+0x18>)
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff fe2d 	bl	8008db8 <USBD_GetString>
}
 800915e:	4620      	mov	r0, r4
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	200011d4 	.word	0x200011d4
 8009168:	0800adb9 	.word	0x0800adb9

0800916c <USBD_FS_ConfigStrDescriptor>:
{
 800916c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800916e:	4c04      	ldr	r4, [pc, #16]	@ (8009180 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8009170:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009172:	4804      	ldr	r0, [pc, #16]	@ (8009184 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009174:	4621      	mov	r1, r4
 8009176:	f7ff fe1f 	bl	8008db8 <USBD_GetString>
}
 800917a:	4620      	mov	r0, r4
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop
 8009180:	200011d4 	.word	0x200011d4
 8009184:	0800adcc 	.word	0x0800adcc

08009188 <USBD_FS_InterfaceStrDescriptor>:
{
 8009188:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800918a:	4c04      	ldr	r4, [pc, #16]	@ (800919c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800918c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800918e:	4804      	ldr	r0, [pc, #16]	@ (80091a0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009190:	4621      	mov	r1, r4
 8009192:	f7ff fe11 	bl	8008db8 <USBD_GetString>
}
 8009196:	4620      	mov	r0, r4
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	200011d4 	.word	0x200011d4
 80091a0:	0800add7 	.word	0x0800add7

080091a4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80091a4:	b118      	cbz	r0, 80091ae <USBD_Get_USB_Status+0xa>
 80091a6:	2802      	cmp	r0, #2
 80091a8:	bf0c      	ite	eq
 80091aa:	2001      	moveq	r0, #1
 80091ac:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80091ae:	4770      	bx	lr

080091b0 <HAL_PCD_MspInit>:
{
 80091b0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80091b2:	4b12      	ldr	r3, [pc, #72]	@ (80091fc <HAL_PCD_MspInit+0x4c>)
 80091b4:	6802      	ldr	r2, [r0, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d11d      	bne.n	80091f6 <HAL_PCD_MspInit+0x46>
    __HAL_RCC_USB_CLK_ENABLE();
 80091ba:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80091be:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80091c0:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 80091c2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80091c6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80091c8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80091ca:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80091cc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80091ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80091d6:	f7f9 ffe5 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80091da:	2013      	movs	r0, #19
 80091dc:	f7fa f812 	bl	8003204 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2014      	movs	r0, #20
 80091e4:	4611      	mov	r1, r2
 80091e6:	f7f9 ffdd 	bl	80031a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80091ea:	2014      	movs	r0, #20
}
 80091ec:	b003      	add	sp, #12
 80091ee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80091f2:	f7fa b807 	b.w	8003204 <HAL_NVIC_EnableIRQ>
}
 80091f6:	b003      	add	sp, #12
 80091f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80091fc:	40005c00 	.word	0x40005c00

08009200 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009200:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8009204:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009208:	f7ff bab3 	b.w	8008772 <USBD_LL_SetupStage>

0800920c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800920c:	2328      	movs	r3, #40	@ 0x28
 800920e:	fb03 0301 	mla	r3, r3, r1, r0
 8009212:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009216:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800921a:	f7ff bad7 	b.w	80087cc <USBD_LL_DataOutStage>

0800921e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800921e:	2328      	movs	r3, #40	@ 0x28
 8009220:	fb03 0301 	mla	r3, r3, r1, r0
 8009224:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800922a:	f7ff bb07 	b.w	800883c <USBD_LL_DataInStage>

0800922e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800922e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009232:	f7ff bb9c 	b.w	800896e <USBD_LL_SOF>

08009236 <HAL_PCD_ResetCallback>:
{
 8009236:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009238:	7983      	ldrb	r3, [r0, #6]
{
 800923a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800923c:	2b02      	cmp	r3, #2
 800923e:	d001      	beq.n	8009244 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8009240:	f7f8 fc4c 	bl	8001adc <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009244:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8009248:	2101      	movs	r1, #1
 800924a:	f7ff fb7a 	bl	8008942 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800924e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8009252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009256:	f7ff bb4d 	b.w	80088f4 <USBD_LL_Reset>
	...

0800925c <HAL_PCD_SuspendCallback>:
{
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009260:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009264:	f7ff fb70 	bl	8008948 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8009268:	7aa3      	ldrb	r3, [r4, #10]
 800926a:	b123      	cbz	r3, 8009276 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800926c:	4a02      	ldr	r2, [pc, #8]	@ (8009278 <HAL_PCD_SuspendCallback+0x1c>)
 800926e:	6913      	ldr	r3, [r2, #16]
 8009270:	f043 0306 	orr.w	r3, r3, #6
 8009274:	6113      	str	r3, [r2, #16]
}
 8009276:	bd10      	pop	{r4, pc}
 8009278:	e000ed00 	.word	0xe000ed00

0800927c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800927c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009280:	f7ff bb6b 	b.w	800895a <USBD_LL_Resume>

08009284 <USBD_LL_Init>:
{
 8009284:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8009286:	4b1d      	ldr	r3, [pc, #116]	@ (80092fc <USBD_LL_Init+0x78>)
{
 8009288:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800928a:	481d      	ldr	r0, [pc, #116]	@ (8009300 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 800928c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800928e:	2308      	movs	r3, #8
 8009290:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009292:	2302      	movs	r3, #2
 8009294:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009296:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8009298:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800929c:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092a0:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092a2:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092a4:	f7fb fdc6 	bl	8004e34 <HAL_PCD_Init>
 80092a8:	b108      	cbz	r0, 80092ae <USBD_LL_Init+0x2a>
    Error_Handler( );
 80092aa:	f7f8 fc17 	bl	8001adc <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092ae:	2200      	movs	r2, #0
 80092b0:	2318      	movs	r3, #24
 80092b2:	4611      	mov	r1, r2
 80092b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80092b8:	f7fc fc47 	bl	8005b4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092bc:	2358      	movs	r3, #88	@ 0x58
 80092be:	2200      	movs	r2, #0
 80092c0:	2180      	movs	r1, #128	@ 0x80
 80092c2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80092c6:	f7fc fc40 	bl	8005b4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092ca:	23c0      	movs	r3, #192	@ 0xc0
 80092cc:	2200      	movs	r2, #0
 80092ce:	2181      	movs	r1, #129	@ 0x81
 80092d0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80092d4:	f7fc fc39 	bl	8005b4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092d8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80092dc:	2200      	movs	r2, #0
 80092de:	2101      	movs	r1, #1
 80092e0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80092e4:	f7fc fc31 	bl	8005b4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092ec:	2200      	movs	r2, #0
 80092ee:	2182      	movs	r1, #130	@ 0x82
 80092f0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80092f4:	f7fc fc29 	bl	8005b4a <HAL_PCDEx_PMAConfig>
}
 80092f8:	2000      	movs	r0, #0
 80092fa:	bd10      	pop	{r4, pc}
 80092fc:	40005c00 	.word	0x40005c00
 8009300:	200015f4 	.word	0x200015f4

08009304 <USBD_LL_Start>:
{
 8009304:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009306:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800930a:	f7fb fdf6 	bl	8004efa <HAL_PCD_Start>
}
 800930e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009312:	f7ff bf47 	b.w	80091a4 <USBD_Get_USB_Status>

08009316 <USBD_LL_OpenEP>:
{
 8009316:	b510      	push	{r4, lr}
 8009318:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800931a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800931e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009320:	4623      	mov	r3, r4
 8009322:	f7fc fb1b 	bl	800595c <HAL_PCD_EP_Open>
}
 8009326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800932a:	f7ff bf3b 	b.w	80091a4 <USBD_Get_USB_Status>

0800932e <USBD_LL_CloseEP>:
{
 800932e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009330:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009334:	f7fc fb42 	bl	80059bc <HAL_PCD_EP_Close>
}
 8009338:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800933c:	f7ff bf32 	b.w	80091a4 <USBD_Get_USB_Status>

08009340 <USBD_LL_StallEP>:
{
 8009340:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009342:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009346:	f7fc fb98 	bl	8005a7a <HAL_PCD_EP_SetStall>
}
 800934a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800934e:	f7ff bf29 	b.w	80091a4 <USBD_Get_USB_Status>

08009352 <USBD_LL_ClearStallEP>:
{
 8009352:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009354:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009358:	f7fc fbc5 	bl	8005ae6 <HAL_PCD_EP_ClrStall>
}
 800935c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	f7ff bf20 	b.w	80091a4 <USBD_Get_USB_Status>

08009364 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009364:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8009366:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800936a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800936e:	bf1b      	ittet	ne
 8009370:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8009374:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009378:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800937c:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800937e:	bf08      	it	eq
 8009380:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8009384:	4770      	bx	lr

08009386 <USBD_LL_SetUSBAddress>:
{
 8009386:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009388:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800938c:	f7fb fdce 	bl	8004f2c <HAL_PCD_SetAddress>
}
 8009390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009394:	f7ff bf06 	b.w	80091a4 <USBD_Get_USB_Status>

08009398 <USBD_LL_Transmit>:
{
 8009398:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800939a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800939e:	f7fc fb54 	bl	8005a4a <HAL_PCD_EP_Transmit>
}
 80093a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a6:	f7ff befd 	b.w	80091a4 <USBD_Get_USB_Status>

080093aa <USBD_LL_PrepareReceive>:
{
 80093aa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093ac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80093b0:	f7fc fb2c 	bl	8005a0c <HAL_PCD_EP_Receive>
}
 80093b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b8:	f7ff bef4 	b.w	80091a4 <USBD_Get_USB_Status>

080093bc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80093c0:	f7fc bb3b 	b.w	8005a3a <HAL_PCD_EP_GetRxCount>

080093c4 <USBD_static_malloc>:
}
 80093c4:	4800      	ldr	r0, [pc, #0]	@ (80093c8 <USBD_static_malloc+0x4>)
 80093c6:	4770      	bx	lr
 80093c8:	200013d4 	.word	0x200013d4

080093cc <USBD_static_free>:
}
 80093cc:	4770      	bx	lr

080093ce <HAL_PCDEx_SetConnectionState>:
}
 80093ce:	4770      	bx	lr

080093d0 <atoi>:
 80093d0:	220a      	movs	r2, #10
 80093d2:	2100      	movs	r1, #0
 80093d4:	f000 b928 	b.w	8009628 <strtol>

080093d8 <sbrk_aligned>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4e0f      	ldr	r6, [pc, #60]	@ (8009418 <sbrk_aligned+0x40>)
 80093dc:	460c      	mov	r4, r1
 80093de:	6831      	ldr	r1, [r6, #0]
 80093e0:	4605      	mov	r5, r0
 80093e2:	b911      	cbnz	r1, 80093ea <sbrk_aligned+0x12>
 80093e4:	f000 f990 	bl	8009708 <_sbrk_r>
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 f98b 	bl	8009708 <_sbrk_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d103      	bne.n	80093fe <sbrk_aligned+0x26>
 80093f6:	f04f 34ff 	mov.w	r4, #4294967295
 80093fa:	4620      	mov	r0, r4
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d0f8      	beq.n	80093fa <sbrk_aligned+0x22>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f97c 	bl	8009708 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d1f2      	bne.n	80093fa <sbrk_aligned+0x22>
 8009414:	e7ef      	b.n	80093f6 <sbrk_aligned+0x1e>
 8009416:	bf00      	nop
 8009418:	200018cc 	.word	0x200018cc

0800941c <_malloc_r>:
 800941c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009420:	1ccd      	adds	r5, r1, #3
 8009422:	f025 0503 	bic.w	r5, r5, #3
 8009426:	3508      	adds	r5, #8
 8009428:	2d0c      	cmp	r5, #12
 800942a:	bf38      	it	cc
 800942c:	250c      	movcc	r5, #12
 800942e:	2d00      	cmp	r5, #0
 8009430:	4606      	mov	r6, r0
 8009432:	db01      	blt.n	8009438 <_malloc_r+0x1c>
 8009434:	42a9      	cmp	r1, r5
 8009436:	d904      	bls.n	8009442 <_malloc_r+0x26>
 8009438:	230c      	movs	r3, #12
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009518 <_malloc_r+0xfc>
 8009446:	f000 f869 	bl	800951c <__malloc_lock>
 800944a:	f8d8 3000 	ldr.w	r3, [r8]
 800944e:	461c      	mov	r4, r3
 8009450:	bb44      	cbnz	r4, 80094a4 <_malloc_r+0x88>
 8009452:	4629      	mov	r1, r5
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff ffbf 	bl	80093d8 <sbrk_aligned>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	4604      	mov	r4, r0
 800945e:	d158      	bne.n	8009512 <_malloc_r+0xf6>
 8009460:	f8d8 4000 	ldr.w	r4, [r8]
 8009464:	4627      	mov	r7, r4
 8009466:	2f00      	cmp	r7, #0
 8009468:	d143      	bne.n	80094f2 <_malloc_r+0xd6>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d04b      	beq.n	8009506 <_malloc_r+0xea>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	4639      	mov	r1, r7
 8009472:	4630      	mov	r0, r6
 8009474:	eb04 0903 	add.w	r9, r4, r3
 8009478:	f000 f946 	bl	8009708 <_sbrk_r>
 800947c:	4581      	cmp	r9, r0
 800947e:	d142      	bne.n	8009506 <_malloc_r+0xea>
 8009480:	6821      	ldr	r1, [r4, #0]
 8009482:	4630      	mov	r0, r6
 8009484:	1a6d      	subs	r5, r5, r1
 8009486:	4629      	mov	r1, r5
 8009488:	f7ff ffa6 	bl	80093d8 <sbrk_aligned>
 800948c:	3001      	adds	r0, #1
 800948e:	d03a      	beq.n	8009506 <_malloc_r+0xea>
 8009490:	6823      	ldr	r3, [r4, #0]
 8009492:	442b      	add	r3, r5
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	f8d8 3000 	ldr.w	r3, [r8]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	bb62      	cbnz	r2, 80094f8 <_malloc_r+0xdc>
 800949e:	f8c8 7000 	str.w	r7, [r8]
 80094a2:	e00f      	b.n	80094c4 <_malloc_r+0xa8>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	1b52      	subs	r2, r2, r5
 80094a8:	d420      	bmi.n	80094ec <_malloc_r+0xd0>
 80094aa:	2a0b      	cmp	r2, #11
 80094ac:	d917      	bls.n	80094de <_malloc_r+0xc2>
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	6025      	str	r5, [r4, #0]
 80094b4:	bf18      	it	ne
 80094b6:	6059      	strne	r1, [r3, #4]
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	bf08      	it	eq
 80094bc:	f8c8 1000 	streq.w	r1, [r8]
 80094c0:	5162      	str	r2, [r4, r5]
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 f82f 	bl	8009528 <__malloc_unlock>
 80094ca:	f104 000b 	add.w	r0, r4, #11
 80094ce:	1d23      	adds	r3, r4, #4
 80094d0:	f020 0007 	bic.w	r0, r0, #7
 80094d4:	1ac2      	subs	r2, r0, r3
 80094d6:	bf1c      	itt	ne
 80094d8:	1a1b      	subne	r3, r3, r0
 80094da:	50a3      	strne	r3, [r4, r2]
 80094dc:	e7af      	b.n	800943e <_malloc_r+0x22>
 80094de:	6862      	ldr	r2, [r4, #4]
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	bf0c      	ite	eq
 80094e4:	f8c8 2000 	streq.w	r2, [r8]
 80094e8:	605a      	strne	r2, [r3, #4]
 80094ea:	e7eb      	b.n	80094c4 <_malloc_r+0xa8>
 80094ec:	4623      	mov	r3, r4
 80094ee:	6864      	ldr	r4, [r4, #4]
 80094f0:	e7ae      	b.n	8009450 <_malloc_r+0x34>
 80094f2:	463c      	mov	r4, r7
 80094f4:	687f      	ldr	r7, [r7, #4]
 80094f6:	e7b6      	b.n	8009466 <_malloc_r+0x4a>
 80094f8:	461a      	mov	r2, r3
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d1fb      	bne.n	80094f8 <_malloc_r+0xdc>
 8009500:	2300      	movs	r3, #0
 8009502:	6053      	str	r3, [r2, #4]
 8009504:	e7de      	b.n	80094c4 <_malloc_r+0xa8>
 8009506:	230c      	movs	r3, #12
 8009508:	4630      	mov	r0, r6
 800950a:	6033      	str	r3, [r6, #0]
 800950c:	f000 f80c 	bl	8009528 <__malloc_unlock>
 8009510:	e794      	b.n	800943c <_malloc_r+0x20>
 8009512:	6005      	str	r5, [r0, #0]
 8009514:	e7d6      	b.n	80094c4 <_malloc_r+0xa8>
 8009516:	bf00      	nop
 8009518:	200018d0 	.word	0x200018d0

0800951c <__malloc_lock>:
 800951c:	4801      	ldr	r0, [pc, #4]	@ (8009524 <__malloc_lock+0x8>)
 800951e:	f000 b92d 	b.w	800977c <__retarget_lock_acquire_recursive>
 8009522:	bf00      	nop
 8009524:	20001a10 	.word	0x20001a10

08009528 <__malloc_unlock>:
 8009528:	4801      	ldr	r0, [pc, #4]	@ (8009530 <__malloc_unlock+0x8>)
 800952a:	f000 b928 	b.w	800977e <__retarget_lock_release_recursive>
 800952e:	bf00      	nop
 8009530:	20001a10 	.word	0x20001a10

08009534 <_strtol_l.isra.0>:
 8009534:	2b24      	cmp	r3, #36	@ 0x24
 8009536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800953a:	4686      	mov	lr, r0
 800953c:	4690      	mov	r8, r2
 800953e:	d801      	bhi.n	8009544 <_strtol_l.isra.0+0x10>
 8009540:	2b01      	cmp	r3, #1
 8009542:	d106      	bne.n	8009552 <_strtol_l.isra.0+0x1e>
 8009544:	f000 f8f0 	bl	8009728 <__errno>
 8009548:	2316      	movs	r3, #22
 800954a:	6003      	str	r3, [r0, #0]
 800954c:	2000      	movs	r0, #0
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	460d      	mov	r5, r1
 8009554:	4833      	ldr	r0, [pc, #204]	@ (8009624 <_strtol_l.isra.0+0xf0>)
 8009556:	462a      	mov	r2, r5
 8009558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800955c:	5d06      	ldrb	r6, [r0, r4]
 800955e:	f016 0608 	ands.w	r6, r6, #8
 8009562:	d1f8      	bne.n	8009556 <_strtol_l.isra.0+0x22>
 8009564:	2c2d      	cmp	r4, #45	@ 0x2d
 8009566:	d110      	bne.n	800958a <_strtol_l.isra.0+0x56>
 8009568:	2601      	movs	r6, #1
 800956a:	782c      	ldrb	r4, [r5, #0]
 800956c:	1c95      	adds	r5, r2, #2
 800956e:	f033 0210 	bics.w	r2, r3, #16
 8009572:	d115      	bne.n	80095a0 <_strtol_l.isra.0+0x6c>
 8009574:	2c30      	cmp	r4, #48	@ 0x30
 8009576:	d10d      	bne.n	8009594 <_strtol_l.isra.0+0x60>
 8009578:	782a      	ldrb	r2, [r5, #0]
 800957a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800957e:	2a58      	cmp	r2, #88	@ 0x58
 8009580:	d108      	bne.n	8009594 <_strtol_l.isra.0+0x60>
 8009582:	786c      	ldrb	r4, [r5, #1]
 8009584:	3502      	adds	r5, #2
 8009586:	2310      	movs	r3, #16
 8009588:	e00a      	b.n	80095a0 <_strtol_l.isra.0+0x6c>
 800958a:	2c2b      	cmp	r4, #43	@ 0x2b
 800958c:	bf04      	itt	eq
 800958e:	782c      	ldrbeq	r4, [r5, #0]
 8009590:	1c95      	addeq	r5, r2, #2
 8009592:	e7ec      	b.n	800956e <_strtol_l.isra.0+0x3a>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f6      	bne.n	8009586 <_strtol_l.isra.0+0x52>
 8009598:	2c30      	cmp	r4, #48	@ 0x30
 800959a:	bf14      	ite	ne
 800959c:	230a      	movne	r3, #10
 800959e:	2308      	moveq	r3, #8
 80095a0:	2200      	movs	r2, #0
 80095a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80095a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095aa:	fbbc f9f3 	udiv	r9, ip, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80095b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095b8:	2f09      	cmp	r7, #9
 80095ba:	d80f      	bhi.n	80095dc <_strtol_l.isra.0+0xa8>
 80095bc:	463c      	mov	r4, r7
 80095be:	42a3      	cmp	r3, r4
 80095c0:	dd1b      	ble.n	80095fa <_strtol_l.isra.0+0xc6>
 80095c2:	1c57      	adds	r7, r2, #1
 80095c4:	d007      	beq.n	80095d6 <_strtol_l.isra.0+0xa2>
 80095c6:	4581      	cmp	r9, r0
 80095c8:	d314      	bcc.n	80095f4 <_strtol_l.isra.0+0xc0>
 80095ca:	d101      	bne.n	80095d0 <_strtol_l.isra.0+0x9c>
 80095cc:	45a2      	cmp	sl, r4
 80095ce:	db11      	blt.n	80095f4 <_strtol_l.isra.0+0xc0>
 80095d0:	2201      	movs	r2, #1
 80095d2:	fb00 4003 	mla	r0, r0, r3, r4
 80095d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095da:	e7eb      	b.n	80095b4 <_strtol_l.isra.0+0x80>
 80095dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095e0:	2f19      	cmp	r7, #25
 80095e2:	d801      	bhi.n	80095e8 <_strtol_l.isra.0+0xb4>
 80095e4:	3c37      	subs	r4, #55	@ 0x37
 80095e6:	e7ea      	b.n	80095be <_strtol_l.isra.0+0x8a>
 80095e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095ec:	2f19      	cmp	r7, #25
 80095ee:	d804      	bhi.n	80095fa <_strtol_l.isra.0+0xc6>
 80095f0:	3c57      	subs	r4, #87	@ 0x57
 80095f2:	e7e4      	b.n	80095be <_strtol_l.isra.0+0x8a>
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	e7ed      	b.n	80095d6 <_strtol_l.isra.0+0xa2>
 80095fa:	1c53      	adds	r3, r2, #1
 80095fc:	d108      	bne.n	8009610 <_strtol_l.isra.0+0xdc>
 80095fe:	2322      	movs	r3, #34	@ 0x22
 8009600:	4660      	mov	r0, ip
 8009602:	f8ce 3000 	str.w	r3, [lr]
 8009606:	f1b8 0f00 	cmp.w	r8, #0
 800960a:	d0a0      	beq.n	800954e <_strtol_l.isra.0+0x1a>
 800960c:	1e69      	subs	r1, r5, #1
 800960e:	e006      	b.n	800961e <_strtol_l.isra.0+0xea>
 8009610:	b106      	cbz	r6, 8009614 <_strtol_l.isra.0+0xe0>
 8009612:	4240      	negs	r0, r0
 8009614:	f1b8 0f00 	cmp.w	r8, #0
 8009618:	d099      	beq.n	800954e <_strtol_l.isra.0+0x1a>
 800961a:	2a00      	cmp	r2, #0
 800961c:	d1f6      	bne.n	800960c <_strtol_l.isra.0+0xd8>
 800961e:	f8c8 1000 	str.w	r1, [r8]
 8009622:	e794      	b.n	800954e <_strtol_l.isra.0+0x1a>
 8009624:	0800c32b 	.word	0x0800c32b

08009628 <strtol>:
 8009628:	4613      	mov	r3, r2
 800962a:	460a      	mov	r2, r1
 800962c:	4601      	mov	r1, r0
 800962e:	4802      	ldr	r0, [pc, #8]	@ (8009638 <strtol+0x10>)
 8009630:	6800      	ldr	r0, [r0, #0]
 8009632:	f7ff bf7f 	b.w	8009534 <_strtol_l.isra.0>
 8009636:	bf00      	nop
 8009638:	200001c4 	.word	0x200001c4

0800963c <sniprintf>:
 800963c:	b40c      	push	{r2, r3}
 800963e:	b530      	push	{r4, r5, lr}
 8009640:	4b18      	ldr	r3, [pc, #96]	@ (80096a4 <sniprintf+0x68>)
 8009642:	1e0c      	subs	r4, r1, #0
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	b09d      	sub	sp, #116	@ 0x74
 8009648:	da08      	bge.n	800965c <sniprintf+0x20>
 800964a:	238b      	movs	r3, #139	@ 0x8b
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	602b      	str	r3, [r5, #0]
 8009652:	b01d      	add	sp, #116	@ 0x74
 8009654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009658:	b002      	add	sp, #8
 800965a:	4770      	bx	lr
 800965c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009660:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	931b      	str	r3, [sp, #108]	@ 0x6c
 800966a:	bf0c      	ite	eq
 800966c:	4623      	moveq	r3, r4
 800966e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	9307      	str	r3, [sp, #28]
 8009676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800967a:	9002      	str	r0, [sp, #8]
 800967c:	9006      	str	r0, [sp, #24]
 800967e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009682:	4628      	mov	r0, r5
 8009684:	ab21      	add	r3, sp, #132	@ 0x84
 8009686:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009688:	a902      	add	r1, sp, #8
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f000 f92a 	bl	80098e4 <_svfiprintf_r>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	bfbc      	itt	lt
 8009694:	238b      	movlt	r3, #139	@ 0x8b
 8009696:	602b      	strlt	r3, [r5, #0]
 8009698:	2c00      	cmp	r4, #0
 800969a:	d0da      	beq.n	8009652 <sniprintf+0x16>
 800969c:	2200      	movs	r2, #0
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e7d6      	b.n	8009652 <sniprintf+0x16>
 80096a4:	200001c4 	.word	0x200001c4

080096a8 <memset>:
 80096a8:	4603      	mov	r3, r0
 80096aa:	4402      	add	r2, r0
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d100      	bne.n	80096b2 <memset+0xa>
 80096b0:	4770      	bx	lr
 80096b2:	f803 1b01 	strb.w	r1, [r3], #1
 80096b6:	e7f9      	b.n	80096ac <memset+0x4>

080096b8 <strncmp>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	b16a      	cbz	r2, 80096d8 <strncmp+0x20>
 80096bc:	3901      	subs	r1, #1
 80096be:	1884      	adds	r4, r0, r2
 80096c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d103      	bne.n	80096d4 <strncmp+0x1c>
 80096cc:	42a0      	cmp	r0, r4
 80096ce:	d001      	beq.n	80096d4 <strncmp+0x1c>
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	d1f5      	bne.n	80096c0 <strncmp+0x8>
 80096d4:	1ad0      	subs	r0, r2, r3
 80096d6:	bd10      	pop	{r4, pc}
 80096d8:	4610      	mov	r0, r2
 80096da:	e7fc      	b.n	80096d6 <strncmp+0x1e>

080096dc <strstr>:
 80096dc:	780a      	ldrb	r2, [r1, #0]
 80096de:	b570      	push	{r4, r5, r6, lr}
 80096e0:	b96a      	cbnz	r2, 80096fe <strstr+0x22>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d109      	bne.n	80096fc <strstr+0x20>
 80096e8:	460c      	mov	r4, r1
 80096ea:	4605      	mov	r5, r0
 80096ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d0f6      	beq.n	80096e2 <strstr+0x6>
 80096f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80096f8:	429e      	cmp	r6, r3
 80096fa:	d0f7      	beq.n	80096ec <strstr+0x10>
 80096fc:	3001      	adds	r0, #1
 80096fe:	7803      	ldrb	r3, [r0, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1ef      	bne.n	80096e4 <strstr+0x8>
 8009704:	4618      	mov	r0, r3
 8009706:	e7ec      	b.n	80096e2 <strstr+0x6>

08009708 <_sbrk_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	2300      	movs	r3, #0
 800970c:	4d05      	ldr	r5, [pc, #20]	@ (8009724 <_sbrk_r+0x1c>)
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f9 fb38 	bl	8002d88 <_sbrk>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_sbrk_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_sbrk_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20001a0c 	.word	0x20001a0c

08009728 <__errno>:
 8009728:	4b01      	ldr	r3, [pc, #4]	@ (8009730 <__errno+0x8>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	200001c4 	.word	0x200001c4

08009734 <__libc_init_array>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	2600      	movs	r6, #0
 8009738:	4d0c      	ldr	r5, [pc, #48]	@ (800976c <__libc_init_array+0x38>)
 800973a:	4c0d      	ldr	r4, [pc, #52]	@ (8009770 <__libc_init_array+0x3c>)
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	42a6      	cmp	r6, r4
 8009742:	d109      	bne.n	8009758 <__libc_init_array+0x24>
 8009744:	f001 fac4 	bl	800acd0 <_init>
 8009748:	2600      	movs	r6, #0
 800974a:	4d0a      	ldr	r5, [pc, #40]	@ (8009774 <__libc_init_array+0x40>)
 800974c:	4c0a      	ldr	r4, [pc, #40]	@ (8009778 <__libc_init_array+0x44>)
 800974e:	1b64      	subs	r4, r4, r5
 8009750:	10a4      	asrs	r4, r4, #2
 8009752:	42a6      	cmp	r6, r4
 8009754:	d105      	bne.n	8009762 <__libc_init_array+0x2e>
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	f855 3b04 	ldr.w	r3, [r5], #4
 800975c:	4798      	blx	r3
 800975e:	3601      	adds	r6, #1
 8009760:	e7ee      	b.n	8009740 <__libc_init_array+0xc>
 8009762:	f855 3b04 	ldr.w	r3, [r5], #4
 8009766:	4798      	blx	r3
 8009768:	3601      	adds	r6, #1
 800976a:	e7f2      	b.n	8009752 <__libc_init_array+0x1e>
 800976c:	0800c478 	.word	0x0800c478
 8009770:	0800c478 	.word	0x0800c478
 8009774:	0800c478 	.word	0x0800c478
 8009778:	0800c47c 	.word	0x0800c47c

0800977c <__retarget_lock_acquire_recursive>:
 800977c:	4770      	bx	lr

0800977e <__retarget_lock_release_recursive>:
 800977e:	4770      	bx	lr

08009780 <memcpy>:
 8009780:	440a      	add	r2, r1
 8009782:	4291      	cmp	r1, r2
 8009784:	f100 33ff 	add.w	r3, r0, #4294967295
 8009788:	d100      	bne.n	800978c <memcpy+0xc>
 800978a:	4770      	bx	lr
 800978c:	b510      	push	{r4, lr}
 800978e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009792:	4291      	cmp	r1, r2
 8009794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009798:	d1f9      	bne.n	800978e <memcpy+0xe>
 800979a:	bd10      	pop	{r4, pc}

0800979c <_free_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4605      	mov	r5, r0
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d040      	beq.n	8009826 <_free_r+0x8a>
 80097a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a8:	1f0c      	subs	r4, r1, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfb8      	it	lt
 80097ae:	18e4      	addlt	r4, r4, r3
 80097b0:	f7ff feb4 	bl	800951c <__malloc_lock>
 80097b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009828 <_free_r+0x8c>)
 80097b6:	6813      	ldr	r3, [r2, #0]
 80097b8:	b933      	cbnz	r3, 80097c8 <_free_r+0x2c>
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	6014      	str	r4, [r2, #0]
 80097be:	4628      	mov	r0, r5
 80097c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c4:	f7ff beb0 	b.w	8009528 <__malloc_unlock>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d908      	bls.n	80097de <_free_r+0x42>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	1821      	adds	r1, r4, r0
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf01      	itttt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	1809      	addeq	r1, r1, r0
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	e7ed      	b.n	80097ba <_free_r+0x1e>
 80097de:	461a      	mov	r2, r3
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b10b      	cbz	r3, 80097e8 <_free_r+0x4c>
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d9fa      	bls.n	80097de <_free_r+0x42>
 80097e8:	6811      	ldr	r1, [r2, #0]
 80097ea:	1850      	adds	r0, r2, r1
 80097ec:	42a0      	cmp	r0, r4
 80097ee:	d10b      	bne.n	8009808 <_free_r+0x6c>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	4401      	add	r1, r0
 80097f4:	1850      	adds	r0, r2, r1
 80097f6:	4283      	cmp	r3, r0
 80097f8:	6011      	str	r1, [r2, #0]
 80097fa:	d1e0      	bne.n	80097be <_free_r+0x22>
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4408      	add	r0, r1
 8009802:	6010      	str	r0, [r2, #0]
 8009804:	6053      	str	r3, [r2, #4]
 8009806:	e7da      	b.n	80097be <_free_r+0x22>
 8009808:	d902      	bls.n	8009810 <_free_r+0x74>
 800980a:	230c      	movs	r3, #12
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	e7d6      	b.n	80097be <_free_r+0x22>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	1821      	adds	r1, r4, r0
 8009814:	428b      	cmp	r3, r1
 8009816:	bf01      	itttt	eq
 8009818:	6819      	ldreq	r1, [r3, #0]
 800981a:	685b      	ldreq	r3, [r3, #4]
 800981c:	1809      	addeq	r1, r1, r0
 800981e:	6021      	streq	r1, [r4, #0]
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	6054      	str	r4, [r2, #4]
 8009824:	e7cb      	b.n	80097be <_free_r+0x22>
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200018d0 	.word	0x200018d0

0800982c <__ssputs_r>:
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	461f      	mov	r7, r3
 8009832:	688e      	ldr	r6, [r1, #8]
 8009834:	4682      	mov	sl, r0
 8009836:	42be      	cmp	r6, r7
 8009838:	460c      	mov	r4, r1
 800983a:	4690      	mov	r8, r2
 800983c:	680b      	ldr	r3, [r1, #0]
 800983e:	d82d      	bhi.n	800989c <__ssputs_r+0x70>
 8009840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009848:	d026      	beq.n	8009898 <__ssputs_r+0x6c>
 800984a:	6965      	ldr	r5, [r4, #20]
 800984c:	6909      	ldr	r1, [r1, #16]
 800984e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009852:	eba3 0901 	sub.w	r9, r3, r1
 8009856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800985a:	1c7b      	adds	r3, r7, #1
 800985c:	444b      	add	r3, r9
 800985e:	106d      	asrs	r5, r5, #1
 8009860:	429d      	cmp	r5, r3
 8009862:	bf38      	it	cc
 8009864:	461d      	movcc	r5, r3
 8009866:	0553      	lsls	r3, r2, #21
 8009868:	d527      	bpl.n	80098ba <__ssputs_r+0x8e>
 800986a:	4629      	mov	r1, r5
 800986c:	f7ff fdd6 	bl	800941c <_malloc_r>
 8009870:	4606      	mov	r6, r0
 8009872:	b360      	cbz	r0, 80098ce <__ssputs_r+0xa2>
 8009874:	464a      	mov	r2, r9
 8009876:	6921      	ldr	r1, [r4, #16]
 8009878:	f7ff ff82 	bl	8009780 <memcpy>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009886:	81a3      	strh	r3, [r4, #12]
 8009888:	6126      	str	r6, [r4, #16]
 800988a:	444e      	add	r6, r9
 800988c:	6026      	str	r6, [r4, #0]
 800988e:	463e      	mov	r6, r7
 8009890:	6165      	str	r5, [r4, #20]
 8009892:	eba5 0509 	sub.w	r5, r5, r9
 8009896:	60a5      	str	r5, [r4, #8]
 8009898:	42be      	cmp	r6, r7
 800989a:	d900      	bls.n	800989e <__ssputs_r+0x72>
 800989c:	463e      	mov	r6, r7
 800989e:	4632      	mov	r2, r6
 80098a0:	4641      	mov	r1, r8
 80098a2:	6820      	ldr	r0, [r4, #0]
 80098a4:	f000 faaa 	bl	8009dfc <memmove>
 80098a8:	2000      	movs	r0, #0
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	1b9b      	subs	r3, r3, r6
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	4433      	add	r3, r6
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	462a      	mov	r2, r5
 80098bc:	f000 fac6 	bl	8009e4c <_realloc_r>
 80098c0:	4606      	mov	r6, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d1e0      	bne.n	8009888 <__ssputs_r+0x5c>
 80098c6:	4650      	mov	r0, sl
 80098c8:	6921      	ldr	r1, [r4, #16]
 80098ca:	f7ff ff67 	bl	800979c <_free_r>
 80098ce:	230c      	movs	r3, #12
 80098d0:	f8ca 3000 	str.w	r3, [sl]
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	e7e9      	b.n	80098b6 <__ssputs_r+0x8a>
	...

080098e4 <_svfiprintf_r>:
 80098e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	4698      	mov	r8, r3
 80098ea:	898b      	ldrh	r3, [r1, #12]
 80098ec:	4607      	mov	r7, r0
 80098ee:	061b      	lsls	r3, r3, #24
 80098f0:	460d      	mov	r5, r1
 80098f2:	4614      	mov	r4, r2
 80098f4:	b09d      	sub	sp, #116	@ 0x74
 80098f6:	d510      	bpl.n	800991a <_svfiprintf_r+0x36>
 80098f8:	690b      	ldr	r3, [r1, #16]
 80098fa:	b973      	cbnz	r3, 800991a <_svfiprintf_r+0x36>
 80098fc:	2140      	movs	r1, #64	@ 0x40
 80098fe:	f7ff fd8d 	bl	800941c <_malloc_r>
 8009902:	6028      	str	r0, [r5, #0]
 8009904:	6128      	str	r0, [r5, #16]
 8009906:	b930      	cbnz	r0, 8009916 <_svfiprintf_r+0x32>
 8009908:	230c      	movs	r3, #12
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	b01d      	add	sp, #116	@ 0x74
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	2340      	movs	r3, #64	@ 0x40
 8009918:	616b      	str	r3, [r5, #20]
 800991a:	2300      	movs	r3, #0
 800991c:	9309      	str	r3, [sp, #36]	@ 0x24
 800991e:	2320      	movs	r3, #32
 8009920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009924:	2330      	movs	r3, #48	@ 0x30
 8009926:	f04f 0901 	mov.w	r9, #1
 800992a:	f8cd 800c 	str.w	r8, [sp, #12]
 800992e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009ac8 <_svfiprintf_r+0x1e4>
 8009932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009936:	4623      	mov	r3, r4
 8009938:	469a      	mov	sl, r3
 800993a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800993e:	b10a      	cbz	r2, 8009944 <_svfiprintf_r+0x60>
 8009940:	2a25      	cmp	r2, #37	@ 0x25
 8009942:	d1f9      	bne.n	8009938 <_svfiprintf_r+0x54>
 8009944:	ebba 0b04 	subs.w	fp, sl, r4
 8009948:	d00b      	beq.n	8009962 <_svfiprintf_r+0x7e>
 800994a:	465b      	mov	r3, fp
 800994c:	4622      	mov	r2, r4
 800994e:	4629      	mov	r1, r5
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff ff6b 	bl	800982c <__ssputs_r>
 8009956:	3001      	adds	r0, #1
 8009958:	f000 80a7 	beq.w	8009aaa <_svfiprintf_r+0x1c6>
 800995c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800995e:	445a      	add	r2, fp
 8009960:	9209      	str	r2, [sp, #36]	@ 0x24
 8009962:	f89a 3000 	ldrb.w	r3, [sl]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 809f 	beq.w	8009aaa <_svfiprintf_r+0x1c6>
 800996c:	2300      	movs	r3, #0
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009976:	f10a 0a01 	add.w	sl, sl, #1
 800997a:	9304      	str	r3, [sp, #16]
 800997c:	9307      	str	r3, [sp, #28]
 800997e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009982:	931a      	str	r3, [sp, #104]	@ 0x68
 8009984:	4654      	mov	r4, sl
 8009986:	2205      	movs	r2, #5
 8009988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998c:	484e      	ldr	r0, [pc, #312]	@ (8009ac8 <_svfiprintf_r+0x1e4>)
 800998e:	f000 fa4f 	bl	8009e30 <memchr>
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	b9d8      	cbnz	r0, 80099ce <_svfiprintf_r+0xea>
 8009996:	06d0      	lsls	r0, r2, #27
 8009998:	bf44      	itt	mi
 800999a:	2320      	movmi	r3, #32
 800999c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099a0:	0711      	lsls	r1, r2, #28
 80099a2:	bf44      	itt	mi
 80099a4:	232b      	movmi	r3, #43	@ 0x2b
 80099a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099aa:	f89a 3000 	ldrb.w	r3, [sl]
 80099ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b0:	d015      	beq.n	80099de <_svfiprintf_r+0xfa>
 80099b2:	4654      	mov	r4, sl
 80099b4:	2000      	movs	r0, #0
 80099b6:	f04f 0c0a 	mov.w	ip, #10
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4621      	mov	r1, r4
 80099be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c2:	3b30      	subs	r3, #48	@ 0x30
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d94b      	bls.n	8009a60 <_svfiprintf_r+0x17c>
 80099c8:	b1b0      	cbz	r0, 80099f8 <_svfiprintf_r+0x114>
 80099ca:	9207      	str	r2, [sp, #28]
 80099cc:	e014      	b.n	80099f8 <_svfiprintf_r+0x114>
 80099ce:	eba0 0308 	sub.w	r3, r0, r8
 80099d2:	fa09 f303 	lsl.w	r3, r9, r3
 80099d6:	4313      	orrs	r3, r2
 80099d8:	46a2      	mov	sl, r4
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	e7d2      	b.n	8009984 <_svfiprintf_r+0xa0>
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	1d19      	adds	r1, r3, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	9103      	str	r1, [sp, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfbb      	ittet	lt
 80099ea:	425b      	neglt	r3, r3
 80099ec:	f042 0202 	orrlt.w	r2, r2, #2
 80099f0:	9307      	strge	r3, [sp, #28]
 80099f2:	9307      	strlt	r3, [sp, #28]
 80099f4:	bfb8      	it	lt
 80099f6:	9204      	strlt	r2, [sp, #16]
 80099f8:	7823      	ldrb	r3, [r4, #0]
 80099fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80099fc:	d10a      	bne.n	8009a14 <_svfiprintf_r+0x130>
 80099fe:	7863      	ldrb	r3, [r4, #1]
 8009a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a02:	d132      	bne.n	8009a6a <_svfiprintf_r+0x186>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	3402      	adds	r4, #2
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009acc <_svfiprintf_r+0x1e8>
 8009a18:	2203      	movs	r2, #3
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	7821      	ldrb	r1, [r4, #0]
 8009a1e:	f000 fa07 	bl	8009e30 <memchr>
 8009a22:	b138      	cbz	r0, 8009a34 <_svfiprintf_r+0x150>
 8009a24:	2240      	movs	r2, #64	@ 0x40
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	eba0 000a 	sub.w	r0, r0, sl
 8009a2c:	4082      	lsls	r2, r0
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	3401      	adds	r4, #1
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a38:	2206      	movs	r2, #6
 8009a3a:	4825      	ldr	r0, [pc, #148]	@ (8009ad0 <_svfiprintf_r+0x1ec>)
 8009a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a40:	f000 f9f6 	bl	8009e30 <memchr>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d036      	beq.n	8009ab6 <_svfiprintf_r+0x1d2>
 8009a48:	4b22      	ldr	r3, [pc, #136]	@ (8009ad4 <_svfiprintf_r+0x1f0>)
 8009a4a:	bb1b      	cbnz	r3, 8009a94 <_svfiprintf_r+0x1b0>
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	3307      	adds	r3, #7
 8009a50:	f023 0307 	bic.w	r3, r3, #7
 8009a54:	3308      	adds	r3, #8
 8009a56:	9303      	str	r3, [sp, #12]
 8009a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5a:	4433      	add	r3, r6
 8009a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a5e:	e76a      	b.n	8009936 <_svfiprintf_r+0x52>
 8009a60:	460c      	mov	r4, r1
 8009a62:	2001      	movs	r0, #1
 8009a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a68:	e7a8      	b.n	80099bc <_svfiprintf_r+0xd8>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f04f 0c0a 	mov.w	ip, #10
 8009a70:	4619      	mov	r1, r3
 8009a72:	3401      	adds	r4, #1
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7c:	3a30      	subs	r2, #48	@ 0x30
 8009a7e:	2a09      	cmp	r2, #9
 8009a80:	d903      	bls.n	8009a8a <_svfiprintf_r+0x1a6>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0c6      	beq.n	8009a14 <_svfiprintf_r+0x130>
 8009a86:	9105      	str	r1, [sp, #20]
 8009a88:	e7c4      	b.n	8009a14 <_svfiprintf_r+0x130>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a92:	e7f0      	b.n	8009a76 <_svfiprintf_r+0x192>
 8009a94:	ab03      	add	r3, sp, #12
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <_svfiprintf_r+0x1f4>)
 8009a9e:	a904      	add	r1, sp, #16
 8009aa0:	f3af 8000 	nop.w
 8009aa4:	1c42      	adds	r2, r0, #1
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	d1d6      	bne.n	8009a58 <_svfiprintf_r+0x174>
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	065b      	lsls	r3, r3, #25
 8009aae:	f53f af2d 	bmi.w	800990c <_svfiprintf_r+0x28>
 8009ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ab4:	e72c      	b.n	8009910 <_svfiprintf_r+0x2c>
 8009ab6:	ab03      	add	r3, sp, #12
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	462a      	mov	r2, r5
 8009abc:	4638      	mov	r0, r7
 8009abe:	4b06      	ldr	r3, [pc, #24]	@ (8009ad8 <_svfiprintf_r+0x1f4>)
 8009ac0:	a904      	add	r1, sp, #16
 8009ac2:	f000 f87d 	bl	8009bc0 <_printf_i>
 8009ac6:	e7ed      	b.n	8009aa4 <_svfiprintf_r+0x1c0>
 8009ac8:	0800ade5 	.word	0x0800ade5
 8009acc:	0800adeb 	.word	0x0800adeb
 8009ad0:	0800adef 	.word	0x0800adef
 8009ad4:	00000000 	.word	0x00000000
 8009ad8:	0800982d 	.word	0x0800982d

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4698      	mov	r8, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	4607      	mov	r7, r0
 8009aea:	4293      	cmp	r3, r2
 8009aec:	bfb8      	it	lt
 8009aee:	4613      	movlt	r3, r2
 8009af0:	6033      	str	r3, [r6, #0]
 8009af2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009af6:	460c      	mov	r4, r1
 8009af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc2b      	bgt.n	8009b7c <_printf_common+0xa0>
 8009b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	3b00      	subs	r3, #0
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d430      	bmi.n	8009b96 <_printf_common+0xba>
 8009b34:	4641      	mov	r1, r8
 8009b36:	4638      	mov	r0, r7
 8009b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b3c:	47c8      	blx	r9
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d023      	beq.n	8009b8a <_printf_common+0xae>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	f003 0306 	and.w	r3, r3, #6
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	bf14      	ite	ne
 8009b4e:	2500      	movne	r5, #0
 8009b50:	6833      	ldreq	r3, [r6, #0]
 8009b52:	f04f 0600 	mov.w	r6, #0
 8009b56:	bf08      	it	eq
 8009b58:	68e5      	ldreq	r5, [r4, #12]
 8009b5a:	f104 041a 	add.w	r4, r4, #26
 8009b5e:	bf08      	it	eq
 8009b60:	1aed      	subeq	r5, r5, r3
 8009b62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b66:	bf08      	it	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	bfc4      	itt	gt
 8009b70:	1a9b      	subgt	r3, r3, r2
 8009b72:	18ed      	addgt	r5, r5, r3
 8009b74:	42b5      	cmp	r5, r6
 8009b76:	d11a      	bne.n	8009bae <_printf_common+0xd2>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	e008      	b.n	8009b8e <_printf_common+0xb2>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4652      	mov	r2, sl
 8009b80:	4641      	mov	r1, r8
 8009b82:	4638      	mov	r0, r7
 8009b84:	47c8      	blx	r9
 8009b86:	3001      	adds	r0, #1
 8009b88:	d103      	bne.n	8009b92 <_printf_common+0xb6>
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b92:	3501      	adds	r5, #1
 8009b94:	e7c1      	b.n	8009b1a <_printf_common+0x3e>
 8009b96:	2030      	movs	r0, #48	@ 0x30
 8009b98:	18e1      	adds	r1, r4, r3
 8009b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ba4:	4422      	add	r2, r4
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bac:	e7c2      	b.n	8009b34 <_printf_common+0x58>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	47c8      	blx	r9
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d0e6      	beq.n	8009b8a <_printf_common+0xae>
 8009bbc:	3601      	adds	r6, #1
 8009bbe:	e7d9      	b.n	8009b74 <_printf_common+0x98>

08009bc0 <_printf_i>:
 8009bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	7e0f      	ldrb	r7, [r1, #24]
 8009bc6:	4691      	mov	r9, r2
 8009bc8:	2f78      	cmp	r7, #120	@ 0x78
 8009bca:	4680      	mov	r8, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	469a      	mov	sl, r3
 8009bd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bd6:	d807      	bhi.n	8009be8 <_printf_i+0x28>
 8009bd8:	2f62      	cmp	r7, #98	@ 0x62
 8009bda:	d80a      	bhi.n	8009bf2 <_printf_i+0x32>
 8009bdc:	2f00      	cmp	r7, #0
 8009bde:	f000 80d1 	beq.w	8009d84 <_printf_i+0x1c4>
 8009be2:	2f58      	cmp	r7, #88	@ 0x58
 8009be4:	f000 80b8 	beq.w	8009d58 <_printf_i+0x198>
 8009be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bf0:	e03a      	b.n	8009c68 <_printf_i+0xa8>
 8009bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bf6:	2b15      	cmp	r3, #21
 8009bf8:	d8f6      	bhi.n	8009be8 <_printf_i+0x28>
 8009bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8009c00 <_printf_i+0x40>)
 8009bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c00:	08009c59 	.word	0x08009c59
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009be9 	.word	0x08009be9
 8009c0c:	08009be9 	.word	0x08009be9
 8009c10:	08009be9 	.word	0x08009be9
 8009c14:	08009be9 	.word	0x08009be9
 8009c18:	08009c6d 	.word	0x08009c6d
 8009c1c:	08009be9 	.word	0x08009be9
 8009c20:	08009be9 	.word	0x08009be9
 8009c24:	08009be9 	.word	0x08009be9
 8009c28:	08009be9 	.word	0x08009be9
 8009c2c:	08009d6b 	.word	0x08009d6b
 8009c30:	08009c97 	.word	0x08009c97
 8009c34:	08009d25 	.word	0x08009d25
 8009c38:	08009be9 	.word	0x08009be9
 8009c3c:	08009be9 	.word	0x08009be9
 8009c40:	08009d8d 	.word	0x08009d8d
 8009c44:	08009be9 	.word	0x08009be9
 8009c48:	08009c97 	.word	0x08009c97
 8009c4c:	08009be9 	.word	0x08009be9
 8009c50:	08009be9 	.word	0x08009be9
 8009c54:	08009d2d 	.word	0x08009d2d
 8009c58:	6833      	ldr	r3, [r6, #0]
 8009c5a:	1d1a      	adds	r2, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6032      	str	r2, [r6, #0]
 8009c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e09c      	b.n	8009da6 <_printf_i+0x1e6>
 8009c6c:	6833      	ldr	r3, [r6, #0]
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	1d19      	adds	r1, r3, #4
 8009c72:	6031      	str	r1, [r6, #0]
 8009c74:	0606      	lsls	r6, r0, #24
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0xbc>
 8009c78:	681d      	ldr	r5, [r3, #0]
 8009c7a:	e003      	b.n	8009c84 <_printf_i+0xc4>
 8009c7c:	0645      	lsls	r5, r0, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0xb8>
 8009c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	da03      	bge.n	8009c90 <_printf_i+0xd0>
 8009c88:	232d      	movs	r3, #45	@ 0x2d
 8009c8a:	426d      	negs	r5, r5
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c90:	230a      	movs	r3, #10
 8009c92:	4858      	ldr	r0, [pc, #352]	@ (8009df4 <_printf_i+0x234>)
 8009c94:	e011      	b.n	8009cba <_printf_i+0xfa>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	6833      	ldr	r3, [r6, #0]
 8009c9a:	0608      	lsls	r0, r1, #24
 8009c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ca0:	d402      	bmi.n	8009ca8 <_printf_i+0xe8>
 8009ca2:	0649      	lsls	r1, r1, #25
 8009ca4:	bf48      	it	mi
 8009ca6:	b2ad      	uxthmi	r5, r5
 8009ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	bf14      	ite	ne
 8009cae:	230a      	movne	r3, #10
 8009cb0:	2308      	moveq	r3, #8
 8009cb2:	4850      	ldr	r0, [pc, #320]	@ (8009df4 <_printf_i+0x234>)
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cba:	6866      	ldr	r6, [r4, #4]
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	60a6      	str	r6, [r4, #8]
 8009cc0:	db05      	blt.n	8009cce <_printf_i+0x10e>
 8009cc2:	6821      	ldr	r1, [r4, #0]
 8009cc4:	432e      	orrs	r6, r5
 8009cc6:	f021 0104 	bic.w	r1, r1, #4
 8009cca:	6021      	str	r1, [r4, #0]
 8009ccc:	d04b      	beq.n	8009d66 <_printf_i+0x1a6>
 8009cce:	4616      	mov	r6, r2
 8009cd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cd4:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd8:	5dc7      	ldrb	r7, [r0, r7]
 8009cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cde:	462f      	mov	r7, r5
 8009ce0:	42bb      	cmp	r3, r7
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	d9f4      	bls.n	8009cd0 <_printf_i+0x110>
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d10b      	bne.n	8009d02 <_printf_i+0x142>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	07df      	lsls	r7, r3, #31
 8009cee:	d508      	bpl.n	8009d02 <_printf_i+0x142>
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	6861      	ldr	r1, [r4, #4]
 8009cf4:	4299      	cmp	r1, r3
 8009cf6:	bfde      	ittt	le
 8009cf8:	2330      	movle	r3, #48	@ 0x30
 8009cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d02:	1b92      	subs	r2, r2, r6
 8009d04:	6122      	str	r2, [r4, #16]
 8009d06:	464b      	mov	r3, r9
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f8cd a000 	str.w	sl, [sp]
 8009d10:	aa03      	add	r2, sp, #12
 8009d12:	f7ff fee3 	bl	8009adc <_printf_common>
 8009d16:	3001      	adds	r0, #1
 8009d18:	d14a      	bne.n	8009db0 <_printf_i+0x1f0>
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	b004      	add	sp, #16
 8009d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	f043 0320 	orr.w	r3, r3, #32
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	2778      	movs	r7, #120	@ 0x78
 8009d2e:	4832      	ldr	r0, [pc, #200]	@ (8009df8 <_printf_i+0x238>)
 8009d30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	6831      	ldr	r1, [r6, #0]
 8009d38:	061f      	lsls	r7, r3, #24
 8009d3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d3e:	d402      	bmi.n	8009d46 <_printf_i+0x186>
 8009d40:	065f      	lsls	r7, r3, #25
 8009d42:	bf48      	it	mi
 8009d44:	b2ad      	uxthmi	r5, r5
 8009d46:	6031      	str	r1, [r6, #0]
 8009d48:	07d9      	lsls	r1, r3, #31
 8009d4a:	bf44      	itt	mi
 8009d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d50:	6023      	strmi	r3, [r4, #0]
 8009d52:	b11d      	cbz	r5, 8009d5c <_printf_i+0x19c>
 8009d54:	2310      	movs	r3, #16
 8009d56:	e7ad      	b.n	8009cb4 <_printf_i+0xf4>
 8009d58:	4826      	ldr	r0, [pc, #152]	@ (8009df4 <_printf_i+0x234>)
 8009d5a:	e7e9      	b.n	8009d30 <_printf_i+0x170>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	f023 0320 	bic.w	r3, r3, #32
 8009d62:	6023      	str	r3, [r4, #0]
 8009d64:	e7f6      	b.n	8009d54 <_printf_i+0x194>
 8009d66:	4616      	mov	r6, r2
 8009d68:	e7bd      	b.n	8009ce6 <_printf_i+0x126>
 8009d6a:	6833      	ldr	r3, [r6, #0]
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	1d18      	adds	r0, r3, #4
 8009d70:	6961      	ldr	r1, [r4, #20]
 8009d72:	6030      	str	r0, [r6, #0]
 8009d74:	062e      	lsls	r6, r5, #24
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	d501      	bpl.n	8009d7e <_printf_i+0x1be>
 8009d7a:	6019      	str	r1, [r3, #0]
 8009d7c:	e002      	b.n	8009d84 <_printf_i+0x1c4>
 8009d7e:	0668      	lsls	r0, r5, #25
 8009d80:	d5fb      	bpl.n	8009d7a <_printf_i+0x1ba>
 8009d82:	8019      	strh	r1, [r3, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	4616      	mov	r6, r2
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	e7bc      	b.n	8009d06 <_printf_i+0x146>
 8009d8c:	6833      	ldr	r3, [r6, #0]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	1d1a      	adds	r2, r3, #4
 8009d92:	6032      	str	r2, [r6, #0]
 8009d94:	681e      	ldr	r6, [r3, #0]
 8009d96:	6862      	ldr	r2, [r4, #4]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f849 	bl	8009e30 <memchr>
 8009d9e:	b108      	cbz	r0, 8009da4 <_printf_i+0x1e4>
 8009da0:	1b80      	subs	r0, r0, r6
 8009da2:	6060      	str	r0, [r4, #4]
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	2300      	movs	r3, #0
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dae:	e7aa      	b.n	8009d06 <_printf_i+0x146>
 8009db0:	4632      	mov	r2, r6
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	47d0      	blx	sl
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d0ad      	beq.n	8009d1a <_printf_i+0x15a>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	079b      	lsls	r3, r3, #30
 8009dc2:	d413      	bmi.n	8009dec <_printf_i+0x22c>
 8009dc4:	68e0      	ldr	r0, [r4, #12]
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	4298      	cmp	r0, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	4618      	movlt	r0, r3
 8009dce:	e7a6      	b.n	8009d1e <_printf_i+0x15e>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4632      	mov	r2, r6
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	47d0      	blx	sl
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d09d      	beq.n	8009d1a <_printf_i+0x15a>
 8009dde:	3501      	adds	r5, #1
 8009de0:	68e3      	ldr	r3, [r4, #12]
 8009de2:	9903      	ldr	r1, [sp, #12]
 8009de4:	1a5b      	subs	r3, r3, r1
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	dcf2      	bgt.n	8009dd0 <_printf_i+0x210>
 8009dea:	e7eb      	b.n	8009dc4 <_printf_i+0x204>
 8009dec:	2500      	movs	r5, #0
 8009dee:	f104 0619 	add.w	r6, r4, #25
 8009df2:	e7f5      	b.n	8009de0 <_printf_i+0x220>
 8009df4:	0800adf6 	.word	0x0800adf6
 8009df8:	0800ae07 	.word	0x0800ae07

08009dfc <memmove>:
 8009dfc:	4288      	cmp	r0, r1
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	eb01 0402 	add.w	r4, r1, r2
 8009e04:	d902      	bls.n	8009e0c <memmove+0x10>
 8009e06:	4284      	cmp	r4, r0
 8009e08:	4623      	mov	r3, r4
 8009e0a:	d807      	bhi.n	8009e1c <memmove+0x20>
 8009e0c:	1e43      	subs	r3, r0, #1
 8009e0e:	42a1      	cmp	r1, r4
 8009e10:	d008      	beq.n	8009e24 <memmove+0x28>
 8009e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e1a:	e7f8      	b.n	8009e0e <memmove+0x12>
 8009e1c:	4601      	mov	r1, r0
 8009e1e:	4402      	add	r2, r0
 8009e20:	428a      	cmp	r2, r1
 8009e22:	d100      	bne.n	8009e26 <memmove+0x2a>
 8009e24:	bd10      	pop	{r4, pc}
 8009e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e2e:	e7f7      	b.n	8009e20 <memmove+0x24>

08009e30 <memchr>:
 8009e30:	4603      	mov	r3, r0
 8009e32:	b510      	push	{r4, lr}
 8009e34:	b2c9      	uxtb	r1, r1
 8009e36:	4402      	add	r2, r0
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	d101      	bne.n	8009e42 <memchr+0x12>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e003      	b.n	8009e4a <memchr+0x1a>
 8009e42:	7804      	ldrb	r4, [r0, #0]
 8009e44:	3301      	adds	r3, #1
 8009e46:	428c      	cmp	r4, r1
 8009e48:	d1f6      	bne.n	8009e38 <memchr+0x8>
 8009e4a:	bd10      	pop	{r4, pc}

08009e4c <_realloc_r>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	4607      	mov	r7, r0
 8009e52:	4614      	mov	r4, r2
 8009e54:	460d      	mov	r5, r1
 8009e56:	b921      	cbnz	r1, 8009e62 <_realloc_r+0x16>
 8009e58:	4611      	mov	r1, r2
 8009e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	f7ff badd 	b.w	800941c <_malloc_r>
 8009e62:	b92a      	cbnz	r2, 8009e70 <_realloc_r+0x24>
 8009e64:	f7ff fc9a 	bl	800979c <_free_r>
 8009e68:	4625      	mov	r5, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e70:	f000 f81a 	bl	8009ea8 <_malloc_usable_size_r>
 8009e74:	4284      	cmp	r4, r0
 8009e76:	4606      	mov	r6, r0
 8009e78:	d802      	bhi.n	8009e80 <_realloc_r+0x34>
 8009e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e7e:	d8f4      	bhi.n	8009e6a <_realloc_r+0x1e>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4638      	mov	r0, r7
 8009e84:	f7ff faca 	bl	800941c <_malloc_r>
 8009e88:	4680      	mov	r8, r0
 8009e8a:	b908      	cbnz	r0, 8009e90 <_realloc_r+0x44>
 8009e8c:	4645      	mov	r5, r8
 8009e8e:	e7ec      	b.n	8009e6a <_realloc_r+0x1e>
 8009e90:	42b4      	cmp	r4, r6
 8009e92:	4622      	mov	r2, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	bf28      	it	cs
 8009e98:	4632      	movcs	r2, r6
 8009e9a:	f7ff fc71 	bl	8009780 <memcpy>
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff fc7b 	bl	800979c <_free_r>
 8009ea6:	e7f1      	b.n	8009e8c <_realloc_r+0x40>

08009ea8 <_malloc_usable_size_r>:
 8009ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eac:	1f18      	subs	r0, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbc      	itt	lt
 8009eb2:	580b      	ldrlt	r3, [r1, r0]
 8009eb4:	18c0      	addlt	r0, r0, r3
 8009eb6:	4770      	bx	lr

08009eb8 <pow>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	f000 f868 	bl	8009f98 <__ieee754_pow>
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	462b      	mov	r3, r5
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 fd9a 	bl	8000a0c <__aeabi_dcmpun>
 8009ed8:	bbc8      	cbnz	r0, 8009f4e <pow+0x96>
 8009eda:	2200      	movs	r2, #0
 8009edc:	2300      	movs	r3, #0
 8009ede:	4640      	mov	r0, r8
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	f7f6 fd61 	bl	80009a8 <__aeabi_dcmpeq>
 8009ee6:	b1b8      	cbz	r0, 8009f18 <pow+0x60>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d141      	bne.n	8009f7c <pow+0xc4>
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f000 f844 	bl	8009f88 <finite>
 8009f00:	b328      	cbz	r0, 8009f4e <pow+0x96>
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 fd57 	bl	80009bc <__aeabi_dcmplt>
 8009f0e:	b1f0      	cbz	r0, 8009f4e <pow+0x96>
 8009f10:	f7ff fc0a 	bl	8009728 <__errno>
 8009f14:	2322      	movs	r3, #34	@ 0x22
 8009f16:	e019      	b.n	8009f4c <pow+0x94>
 8009f18:	4630      	mov	r0, r6
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	f000 f834 	bl	8009f88 <finite>
 8009f20:	b9c8      	cbnz	r0, 8009f56 <pow+0x9e>
 8009f22:	4640      	mov	r0, r8
 8009f24:	4649      	mov	r1, r9
 8009f26:	f000 f82f 	bl	8009f88 <finite>
 8009f2a:	b1a0      	cbz	r0, 8009f56 <pow+0x9e>
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f000 f82a 	bl	8009f88 <finite>
 8009f34:	b178      	cbz	r0, 8009f56 <pow+0x9e>
 8009f36:	4632      	mov	r2, r6
 8009f38:	463b      	mov	r3, r7
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	f7f6 fd65 	bl	8000a0c <__aeabi_dcmpun>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d0e4      	beq.n	8009f10 <pow+0x58>
 8009f46:	f7ff fbef 	bl	8009728 <__errno>
 8009f4a:	2321      	movs	r3, #33	@ 0x21
 8009f4c:	6003      	str	r3, [r0, #0]
 8009f4e:	4630      	mov	r0, r6
 8009f50:	4639      	mov	r1, r7
 8009f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 fd23 	bl	80009a8 <__aeabi_dcmpeq>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d0f3      	beq.n	8009f4e <pow+0x96>
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f000 f80d 	bl	8009f88 <finite>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d0ed      	beq.n	8009f4e <pow+0x96>
 8009f72:	4620      	mov	r0, r4
 8009f74:	4629      	mov	r1, r5
 8009f76:	f000 f807 	bl	8009f88 <finite>
 8009f7a:	e7c8      	b.n	8009f0e <pow+0x56>
 8009f7c:	2600      	movs	r6, #0
 8009f7e:	4f01      	ldr	r7, [pc, #4]	@ (8009f84 <pow+0xcc>)
 8009f80:	e7e5      	b.n	8009f4e <pow+0x96>
 8009f82:	bf00      	nop
 8009f84:	3ff00000 	.word	0x3ff00000

08009f88 <finite>:
 8009f88:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009f8c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009f90:	0fc0      	lsrs	r0, r0, #31
 8009f92:	4770      	bx	lr
 8009f94:	0000      	movs	r0, r0
	...

08009f98 <__ieee754_pow>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	b091      	sub	sp, #68	@ 0x44
 8009f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8009fa2:	468b      	mov	fp, r1
 8009fa4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009fa8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009fac:	4682      	mov	sl, r0
 8009fae:	ea57 0001 	orrs.w	r0, r7, r1
 8009fb2:	d112      	bne.n	8009fda <__ieee754_pow+0x42>
 8009fb4:	4653      	mov	r3, sl
 8009fb6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009fba:	18db      	adds	r3, r3, r3
 8009fbc:	4152      	adcs	r2, r2
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	4b93      	ldr	r3, [pc, #588]	@ (800a210 <__ieee754_pow+0x278>)
 8009fc2:	4193      	sbcs	r3, r2
 8009fc4:	f080 84cd 	bcs.w	800a962 <__ieee754_pow+0x9ca>
 8009fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fcc:	4650      	mov	r0, sl
 8009fce:	4659      	mov	r1, fp
 8009fd0:	f7f6 f8cc 	bl	800016c <__adddf3>
 8009fd4:	b011      	add	sp, #68	@ 0x44
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	4b8e      	ldr	r3, [pc, #568]	@ (800a214 <__ieee754_pow+0x27c>)
 8009fdc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8009fe0:	429d      	cmp	r5, r3
 8009fe2:	465e      	mov	r6, fp
 8009fe4:	46d1      	mov	r9, sl
 8009fe6:	d80b      	bhi.n	800a000 <__ieee754_pow+0x68>
 8009fe8:	d105      	bne.n	8009ff6 <__ieee754_pow+0x5e>
 8009fea:	f1ba 0f00 	cmp.w	sl, #0
 8009fee:	d1eb      	bne.n	8009fc8 <__ieee754_pow+0x30>
 8009ff0:	42af      	cmp	r7, r5
 8009ff2:	d8e9      	bhi.n	8009fc8 <__ieee754_pow+0x30>
 8009ff4:	e001      	b.n	8009ffa <__ieee754_pow+0x62>
 8009ff6:	429f      	cmp	r7, r3
 8009ff8:	d802      	bhi.n	800a000 <__ieee754_pow+0x68>
 8009ffa:	429f      	cmp	r7, r3
 8009ffc:	d10f      	bne.n	800a01e <__ieee754_pow+0x86>
 8009ffe:	b171      	cbz	r1, 800a01e <__ieee754_pow+0x86>
 800a000:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a004:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a008:	ea56 0609 	orrs.w	r6, r6, r9
 800a00c:	d1dc      	bne.n	8009fc8 <__ieee754_pow+0x30>
 800a00e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a012:	18db      	adds	r3, r3, r3
 800a014:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a018:	4152      	adcs	r2, r2
 800a01a:	429e      	cmp	r6, r3
 800a01c:	e7d0      	b.n	8009fc0 <__ieee754_pow+0x28>
 800a01e:	2e00      	cmp	r6, #0
 800a020:	462b      	mov	r3, r5
 800a022:	da42      	bge.n	800a0aa <__ieee754_pow+0x112>
 800a024:	4a7c      	ldr	r2, [pc, #496]	@ (800a218 <__ieee754_pow+0x280>)
 800a026:	4297      	cmp	r7, r2
 800a028:	d856      	bhi.n	800a0d8 <__ieee754_pow+0x140>
 800a02a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a02e:	4297      	cmp	r7, r2
 800a030:	f240 84a6 	bls.w	800a980 <__ieee754_pow+0x9e8>
 800a034:	153a      	asrs	r2, r7, #20
 800a036:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a03a:	2a14      	cmp	r2, #20
 800a03c:	dd18      	ble.n	800a070 <__ieee754_pow+0xd8>
 800a03e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a042:	fa21 f402 	lsr.w	r4, r1, r2
 800a046:	fa04 f202 	lsl.w	r2, r4, r2
 800a04a:	428a      	cmp	r2, r1
 800a04c:	f040 8498 	bne.w	800a980 <__ieee754_pow+0x9e8>
 800a050:	f004 0401 	and.w	r4, r4, #1
 800a054:	f1c4 0402 	rsb	r4, r4, #2
 800a058:	2900      	cmp	r1, #0
 800a05a:	d159      	bne.n	800a110 <__ieee754_pow+0x178>
 800a05c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a060:	d149      	bne.n	800a0f6 <__ieee754_pow+0x15e>
 800a062:	4652      	mov	r2, sl
 800a064:	465b      	mov	r3, fp
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	f7f6 fa35 	bl	80004d8 <__aeabi_dmul>
 800a06e:	e7b1      	b.n	8009fd4 <__ieee754_pow+0x3c>
 800a070:	2900      	cmp	r1, #0
 800a072:	d14c      	bne.n	800a10e <__ieee754_pow+0x176>
 800a074:	f1c2 0214 	rsb	r2, r2, #20
 800a078:	fa47 f402 	asr.w	r4, r7, r2
 800a07c:	fa04 f202 	lsl.w	r2, r4, r2
 800a080:	42ba      	cmp	r2, r7
 800a082:	f040 847a 	bne.w	800a97a <__ieee754_pow+0x9e2>
 800a086:	f004 0401 	and.w	r4, r4, #1
 800a08a:	f1c4 0402 	rsb	r4, r4, #2
 800a08e:	4a63      	ldr	r2, [pc, #396]	@ (800a21c <__ieee754_pow+0x284>)
 800a090:	4297      	cmp	r7, r2
 800a092:	d1e3      	bne.n	800a05c <__ieee754_pow+0xc4>
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	f280 846b 	bge.w	800a972 <__ieee754_pow+0x9da>
 800a09c:	4652      	mov	r2, sl
 800a09e:	465b      	mov	r3, fp
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	495e      	ldr	r1, [pc, #376]	@ (800a21c <__ieee754_pow+0x284>)
 800a0a4:	f7f6 fb42 	bl	800072c <__aeabi_ddiv>
 800a0a8:	e794      	b.n	8009fd4 <__ieee754_pow+0x3c>
 800a0aa:	2400      	movs	r4, #0
 800a0ac:	bb81      	cbnz	r1, 800a110 <__ieee754_pow+0x178>
 800a0ae:	4a59      	ldr	r2, [pc, #356]	@ (800a214 <__ieee754_pow+0x27c>)
 800a0b0:	4297      	cmp	r7, r2
 800a0b2:	d1ec      	bne.n	800a08e <__ieee754_pow+0xf6>
 800a0b4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800a0b8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a0bc:	ea53 0309 	orrs.w	r3, r3, r9
 800a0c0:	f000 844f 	beq.w	800a962 <__ieee754_pow+0x9ca>
 800a0c4:	4b56      	ldr	r3, [pc, #344]	@ (800a220 <__ieee754_pow+0x288>)
 800a0c6:	429d      	cmp	r5, r3
 800a0c8:	d908      	bls.n	800a0dc <__ieee754_pow+0x144>
 800a0ca:	f1b8 0f00 	cmp.w	r8, #0
 800a0ce:	f280 844c 	bge.w	800a96a <__ieee754_pow+0x9d2>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	e77d      	b.n	8009fd4 <__ieee754_pow+0x3c>
 800a0d8:	2402      	movs	r4, #2
 800a0da:	e7e7      	b.n	800a0ac <__ieee754_pow+0x114>
 800a0dc:	f1b8 0f00 	cmp.w	r8, #0
 800a0e0:	f04f 0000 	mov.w	r0, #0
 800a0e4:	f04f 0100 	mov.w	r1, #0
 800a0e8:	f6bf af74 	bge.w	8009fd4 <__ieee754_pow+0x3c>
 800a0ec:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a0f0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a0f4:	e76e      	b.n	8009fd4 <__ieee754_pow+0x3c>
 800a0f6:	4a4b      	ldr	r2, [pc, #300]	@ (800a224 <__ieee754_pow+0x28c>)
 800a0f8:	4590      	cmp	r8, r2
 800a0fa:	d109      	bne.n	800a110 <__ieee754_pow+0x178>
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	db07      	blt.n	800a110 <__ieee754_pow+0x178>
 800a100:	4650      	mov	r0, sl
 800a102:	4659      	mov	r1, fp
 800a104:	b011      	add	sp, #68	@ 0x44
 800a106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10a:	f000 bd0f 	b.w	800ab2c <__ieee754_sqrt>
 800a10e:	2400      	movs	r4, #0
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	f000 fc69 	bl	800a9ec <fabs>
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	f1b9 0f00 	cmp.w	r9, #0
 800a120:	d127      	bne.n	800a172 <__ieee754_pow+0x1da>
 800a122:	4a3e      	ldr	r2, [pc, #248]	@ (800a21c <__ieee754_pow+0x284>)
 800a124:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800a128:	4594      	cmp	ip, r2
 800a12a:	d000      	beq.n	800a12e <__ieee754_pow+0x196>
 800a12c:	bb0d      	cbnz	r5, 800a172 <__ieee754_pow+0x1da>
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	da05      	bge.n	800a140 <__ieee754_pow+0x1a8>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	2000      	movs	r0, #0
 800a13a:	4938      	ldr	r1, [pc, #224]	@ (800a21c <__ieee754_pow+0x284>)
 800a13c:	f7f6 faf6 	bl	800072c <__aeabi_ddiv>
 800a140:	2e00      	cmp	r6, #0
 800a142:	f6bf af47 	bge.w	8009fd4 <__ieee754_pow+0x3c>
 800a146:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a14a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a14e:	4325      	orrs	r5, r4
 800a150:	d108      	bne.n	800a164 <__ieee754_pow+0x1cc>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	f7f6 f805 	bl	8000168 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	e79f      	b.n	800a0a4 <__ieee754_pow+0x10c>
 800a164:	2c01      	cmp	r4, #1
 800a166:	f47f af35 	bne.w	8009fd4 <__ieee754_pow+0x3c>
 800a16a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a16e:	4619      	mov	r1, r3
 800a170:	e730      	b.n	8009fd4 <__ieee754_pow+0x3c>
 800a172:	0ff2      	lsrs	r2, r6, #31
 800a174:	3a01      	subs	r2, #1
 800a176:	ea52 0c04 	orrs.w	ip, r2, r4
 800a17a:	d102      	bne.n	800a182 <__ieee754_pow+0x1ea>
 800a17c:	4652      	mov	r2, sl
 800a17e:	465b      	mov	r3, fp
 800a180:	e7e9      	b.n	800a156 <__ieee754_pow+0x1be>
 800a182:	f04f 0900 	mov.w	r9, #0
 800a186:	3c01      	subs	r4, #1
 800a188:	4314      	orrs	r4, r2
 800a18a:	bf14      	ite	ne
 800a18c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a21c <__ieee754_pow+0x284>
 800a190:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a228 <__ieee754_pow+0x290>
 800a194:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a198:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a19c:	f240 8104 	bls.w	800a3a8 <__ieee754_pow+0x410>
 800a1a0:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <__ieee754_pow+0x294>)
 800a1a2:	429f      	cmp	r7, r3
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a220 <__ieee754_pow+0x288>)
 800a1a6:	d913      	bls.n	800a1d0 <__ieee754_pow+0x238>
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	d808      	bhi.n	800a1be <__ieee754_pow+0x226>
 800a1ac:	f1b8 0f00 	cmp.w	r8, #0
 800a1b0:	da08      	bge.n	800a1c4 <__ieee754_pow+0x22c>
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	b011      	add	sp, #68	@ 0x44
 800a1b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	f000 bcb1 	b.w	800ab20 <__math_oflow>
 800a1be:	f1b8 0f00 	cmp.w	r8, #0
 800a1c2:	dcf6      	bgt.n	800a1b2 <__ieee754_pow+0x21a>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	b011      	add	sp, #68	@ 0x44
 800a1c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	f000 bca3 	b.w	800ab16 <__math_uflow>
 800a1d0:	429d      	cmp	r5, r3
 800a1d2:	d20c      	bcs.n	800a1ee <__ieee754_pow+0x256>
 800a1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f7f6 fbee 	bl	80009bc <__aeabi_dcmplt>
 800a1e0:	3800      	subs	r0, #0
 800a1e2:	bf18      	it	ne
 800a1e4:	2001      	movne	r0, #1
 800a1e6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ea:	daec      	bge.n	800a1c6 <__ieee754_pow+0x22e>
 800a1ec:	e7e2      	b.n	800a1b4 <__ieee754_pow+0x21c>
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a21c <__ieee754_pow+0x284>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	429d      	cmp	r5, r3
 800a1f4:	d91c      	bls.n	800a230 <__ieee754_pow+0x298>
 800a1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f7f6 fbde 	bl	80009bc <__aeabi_dcmplt>
 800a200:	3800      	subs	r0, #0
 800a202:	bf18      	it	ne
 800a204:	2001      	movne	r0, #1
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	dcd3      	bgt.n	800a1b4 <__ieee754_pow+0x21c>
 800a20c:	e7db      	b.n	800a1c6 <__ieee754_pow+0x22e>
 800a20e:	bf00      	nop
 800a210:	fff00000 	.word	0xfff00000
 800a214:	7ff00000 	.word	0x7ff00000
 800a218:	433fffff 	.word	0x433fffff
 800a21c:	3ff00000 	.word	0x3ff00000
 800a220:	3fefffff 	.word	0x3fefffff
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	bff00000 	.word	0xbff00000
 800a22c:	43f00000 	.word	0x43f00000
 800a230:	4b59      	ldr	r3, [pc, #356]	@ (800a398 <__ieee754_pow+0x400>)
 800a232:	f7f5 ff99 	bl	8000168 <__aeabi_dsub>
 800a236:	a350      	add	r3, pc, #320	@ (adr r3, 800a378 <__ieee754_pow+0x3e0>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	f7f6 f94a 	bl	80004d8 <__aeabi_dmul>
 800a244:	a34e      	add	r3, pc, #312	@ (adr r3, 800a380 <__ieee754_pow+0x3e8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	f7f6 f941 	bl	80004d8 <__aeabi_dmul>
 800a256:	2200      	movs	r2, #0
 800a258:	4682      	mov	sl, r0
 800a25a:	468b      	mov	fp, r1
 800a25c:	4620      	mov	r0, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	4b4e      	ldr	r3, [pc, #312]	@ (800a39c <__ieee754_pow+0x404>)
 800a262:	f7f6 f939 	bl	80004d8 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	a147      	add	r1, pc, #284	@ (adr r1, 800a388 <__ieee754_pow+0x3f0>)
 800a26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a270:	f7f5 ff7a 	bl	8000168 <__aeabi_dsub>
 800a274:	4622      	mov	r2, r4
 800a276:	462b      	mov	r3, r5
 800a278:	f7f6 f92e 	bl	80004d8 <__aeabi_dmul>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	2000      	movs	r0, #0
 800a282:	4947      	ldr	r1, [pc, #284]	@ (800a3a0 <__ieee754_pow+0x408>)
 800a284:	f7f5 ff70 	bl	8000168 <__aeabi_dsub>
 800a288:	4622      	mov	r2, r4
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	462b      	mov	r3, r5
 800a290:	4620      	mov	r0, r4
 800a292:	4629      	mov	r1, r5
 800a294:	f7f6 f920 	bl	80004d8 <__aeabi_dmul>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4640      	mov	r0, r8
 800a29e:	4649      	mov	r1, r9
 800a2a0:	f7f6 f91a 	bl	80004d8 <__aeabi_dmul>
 800a2a4:	a33a      	add	r3, pc, #232	@ (adr r3, 800a390 <__ieee754_pow+0x3f8>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f6 f915 	bl	80004d8 <__aeabi_dmul>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	f7f5 ff57 	bl	8000168 <__aeabi_dsub>
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f7f5 ff50 	bl	800016c <__adddf3>
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	f7f5 ff48 	bl	8000168 <__aeabi_dsub>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	4652      	mov	r2, sl
 800a300:	f7f5 ff32 	bl	8000168 <__aeabi_dsub>
 800a304:	4622      	mov	r2, r4
 800a306:	462b      	mov	r3, r5
 800a308:	f7f6 f8e6 	bl	80004d8 <__aeabi_dmul>
 800a30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a310:	4680      	mov	r8, r0
 800a312:	4689      	mov	r9, r1
 800a314:	4630      	mov	r0, r6
 800a316:	4639      	mov	r1, r7
 800a318:	f7f6 f8de 	bl	80004d8 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	f7f5 ff22 	bl	800016c <__adddf3>
 800a328:	465b      	mov	r3, fp
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	4652      	mov	r2, sl
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 f8d0 	bl	80004d8 <__aeabi_dmul>
 800a338:	460b      	mov	r3, r1
 800a33a:	4602      	mov	r2, r0
 800a33c:	4680      	mov	r8, r0
 800a33e:	4689      	mov	r9, r1
 800a340:	4630      	mov	r0, r6
 800a342:	4639      	mov	r1, r7
 800a344:	f7f5 ff12 	bl	800016c <__adddf3>
 800a348:	4b16      	ldr	r3, [pc, #88]	@ (800a3a4 <__ieee754_pow+0x40c>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4299      	cmp	r1, r3
 800a34e:	460d      	mov	r5, r1
 800a350:	468b      	mov	fp, r1
 800a352:	f340 81fd 	ble.w	800a750 <__ieee754_pow+0x7b8>
 800a356:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a35a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a35e:	4303      	orrs	r3, r0
 800a360:	f000 81dc 	beq.w	800a71c <__ieee754_pow+0x784>
 800a364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	2300      	movs	r3, #0
 800a36c:	f7f6 fb26 	bl	80009bc <__aeabi_dcmplt>
 800a370:	3800      	subs	r0, #0
 800a372:	bf18      	it	ne
 800a374:	2001      	movne	r0, #1
 800a376:	e71d      	b.n	800a1b4 <__ieee754_pow+0x21c>
 800a378:	60000000 	.word	0x60000000
 800a37c:	3ff71547 	.word	0x3ff71547
 800a380:	f85ddf44 	.word	0xf85ddf44
 800a384:	3e54ae0b 	.word	0x3e54ae0b
 800a388:	55555555 	.word	0x55555555
 800a38c:	3fd55555 	.word	0x3fd55555
 800a390:	652b82fe 	.word	0x652b82fe
 800a394:	3ff71547 	.word	0x3ff71547
 800a398:	3ff00000 	.word	0x3ff00000
 800a39c:	3fd00000 	.word	0x3fd00000
 800a3a0:	3fe00000 	.word	0x3fe00000
 800a3a4:	408fffff 	.word	0x408fffff
 800a3a8:	4ad3      	ldr	r2, [pc, #844]	@ (800a6f8 <__ieee754_pow+0x760>)
 800a3aa:	4032      	ands	r2, r6
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	f040 817a 	bne.w	800a6a6 <__ieee754_pow+0x70e>
 800a3b2:	4bd2      	ldr	r3, [pc, #840]	@ (800a6fc <__ieee754_pow+0x764>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f7f6 f88f 	bl	80004d8 <__aeabi_dmul>
 800a3ba:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a3be:	460b      	mov	r3, r1
 800a3c0:	151a      	asrs	r2, r3, #20
 800a3c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a3c6:	4422      	add	r2, r4
 800a3c8:	920a      	str	r2, [sp, #40]	@ 0x28
 800a3ca:	4acd      	ldr	r2, [pc, #820]	@ (800a700 <__ieee754_pow+0x768>)
 800a3cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a3da:	dd08      	ble.n	800a3ee <__ieee754_pow+0x456>
 800a3dc:	4ac9      	ldr	r2, [pc, #804]	@ (800a704 <__ieee754_pow+0x76c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f340 8163 	ble.w	800a6aa <__ieee754_pow+0x712>
 800a3e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	00f3      	lsls	r3, r6, #3
 800a3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3f4:	4bc4      	ldr	r3, [pc, #784]	@ (800a708 <__ieee754_pow+0x770>)
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a400:	461a      	mov	r2, r3
 800a402:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a406:	4623      	mov	r3, r4
 800a408:	4682      	mov	sl, r0
 800a40a:	f7f5 fead 	bl	8000168 <__aeabi_dsub>
 800a40e:	4652      	mov	r2, sl
 800a410:	462b      	mov	r3, r5
 800a412:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a416:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a41a:	f7f5 fea7 	bl	800016c <__adddf3>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	2000      	movs	r0, #0
 800a424:	49b9      	ldr	r1, [pc, #740]	@ (800a70c <__ieee754_pow+0x774>)
 800a426:	f7f6 f981 	bl	800072c <__aeabi_ddiv>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a432:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a436:	f7f6 f84f 	bl	80004d8 <__aeabi_dmul>
 800a43a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a43e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a442:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a446:	2300      	movs	r3, #0
 800a448:	2200      	movs	r2, #0
 800a44a:	46ab      	mov	fp, r5
 800a44c:	106d      	asrs	r5, r5, #1
 800a44e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a458:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a45c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	4614      	mov	r4, r2
 800a466:	461d      	mov	r5, r3
 800a468:	f7f6 f836 	bl	80004d8 <__aeabi_dmul>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a474:	f7f5 fe78 	bl	8000168 <__aeabi_dsub>
 800a478:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 fe70 	bl	8000168 <__aeabi_dsub>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4650      	mov	r0, sl
 800a48e:	4659      	mov	r1, fp
 800a490:	f7f5 fe6a 	bl	8000168 <__aeabi_dsub>
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	f7f6 f81e 	bl	80004d8 <__aeabi_dmul>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f5 fe60 	bl	8000168 <__aeabi_dsub>
 800a4a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4ac:	f7f6 f814 	bl	80004d8 <__aeabi_dmul>
 800a4b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	f7f6 f80c 	bl	80004d8 <__aeabi_dmul>
 800a4c0:	a37b      	add	r3, pc, #492	@ (adr r3, 800a6b0 <__ieee754_pow+0x718>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	f7f6 f805 	bl	80004d8 <__aeabi_dmul>
 800a4ce:	a37a      	add	r3, pc, #488	@ (adr r3, 800a6b8 <__ieee754_pow+0x720>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f5 fe4a 	bl	800016c <__adddf3>
 800a4d8:	4622      	mov	r2, r4
 800a4da:	462b      	mov	r3, r5
 800a4dc:	f7f5 fffc 	bl	80004d8 <__aeabi_dmul>
 800a4e0:	a377      	add	r3, pc, #476	@ (adr r3, 800a6c0 <__ieee754_pow+0x728>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f5 fe41 	bl	800016c <__adddf3>
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	f7f5 fff3 	bl	80004d8 <__aeabi_dmul>
 800a4f2:	a375      	add	r3, pc, #468	@ (adr r3, 800a6c8 <__ieee754_pow+0x730>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f5 fe38 	bl	800016c <__adddf3>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	462b      	mov	r3, r5
 800a500:	f7f5 ffea 	bl	80004d8 <__aeabi_dmul>
 800a504:	a372      	add	r3, pc, #456	@ (adr r3, 800a6d0 <__ieee754_pow+0x738>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f5 fe2f 	bl	800016c <__adddf3>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f5 ffe1 	bl	80004d8 <__aeabi_dmul>
 800a516:	a370      	add	r3, pc, #448	@ (adr r3, 800a6d8 <__ieee754_pow+0x740>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f5 fe26 	bl	800016c <__adddf3>
 800a520:	4622      	mov	r2, r4
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	462b      	mov	r3, r5
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	f7f5 ffd4 	bl	80004d8 <__aeabi_dmul>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f5 ffce 	bl	80004d8 <__aeabi_dmul>
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	f7f5 fe10 	bl	800016c <__adddf3>
 800a54c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a550:	f7f5 ffc2 	bl	80004d8 <__aeabi_dmul>
 800a554:	4622      	mov	r2, r4
 800a556:	462b      	mov	r3, r5
 800a558:	f7f5 fe08 	bl	800016c <__adddf3>
 800a55c:	4642      	mov	r2, r8
 800a55e:	4682      	mov	sl, r0
 800a560:	468b      	mov	fp, r1
 800a562:	464b      	mov	r3, r9
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f5 ffb6 	bl	80004d8 <__aeabi_dmul>
 800a56c:	2200      	movs	r2, #0
 800a56e:	4b68      	ldr	r3, [pc, #416]	@ (800a710 <__ieee754_pow+0x778>)
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	f7f5 fdfa 	bl	800016c <__adddf3>
 800a578:	4652      	mov	r2, sl
 800a57a:	465b      	mov	r3, fp
 800a57c:	f7f5 fdf6 	bl	800016c <__adddf3>
 800a580:	2400      	movs	r4, #0
 800a582:	460d      	mov	r5, r1
 800a584:	4622      	mov	r2, r4
 800a586:	460b      	mov	r3, r1
 800a588:	4640      	mov	r0, r8
 800a58a:	4649      	mov	r1, r9
 800a58c:	f7f5 ffa4 	bl	80004d8 <__aeabi_dmul>
 800a590:	2200      	movs	r2, #0
 800a592:	4680      	mov	r8, r0
 800a594:	4689      	mov	r9, r1
 800a596:	4620      	mov	r0, r4
 800a598:	4629      	mov	r1, r5
 800a59a:	4b5d      	ldr	r3, [pc, #372]	@ (800a710 <__ieee754_pow+0x778>)
 800a59c:	f7f5 fde4 	bl	8000168 <__aeabi_dsub>
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	f7f5 fde0 	bl	8000168 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	4659      	mov	r1, fp
 800a5b0:	f7f5 fdda 	bl	8000168 <__aeabi_dsub>
 800a5b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5b8:	f7f5 ff8e 	bl	80004d8 <__aeabi_dmul>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f7f5 ff86 	bl	80004d8 <__aeabi_dmul>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f5 fdca 	bl	800016c <__adddf3>
 800a5d8:	2400      	movs	r4, #0
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f5 fdc1 	bl	800016c <__adddf3>
 800a5ea:	a33d      	add	r3, pc, #244	@ (adr r3, 800a6e0 <__ieee754_pow+0x748>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	460d      	mov	r5, r1
 800a5f4:	f7f5 ff70 	bl	80004d8 <__aeabi_dmul>
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a600:	4620      	mov	r0, r4
 800a602:	4629      	mov	r1, r5
 800a604:	f7f5 fdb0 	bl	8000168 <__aeabi_dsub>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fdaa 	bl	8000168 <__aeabi_dsub>
 800a614:	a334      	add	r3, pc, #208	@ (adr r3, 800a6e8 <__ieee754_pow+0x750>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	f7f5 ff5d 	bl	80004d8 <__aeabi_dmul>
 800a61e:	a334      	add	r3, pc, #208	@ (adr r3, 800a6f0 <__ieee754_pow+0x758>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f5 ff54 	bl	80004d8 <__aeabi_dmul>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4630      	mov	r0, r6
 800a636:	4639      	mov	r1, r7
 800a638:	f7f5 fd98 	bl	800016c <__adddf3>
 800a63c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a63e:	4b35      	ldr	r3, [pc, #212]	@ (800a714 <__ieee754_pow+0x77c>)
 800a640:	2400      	movs	r4, #0
 800a642:	4413      	add	r3, r2
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	f7f5 fd90 	bl	800016c <__adddf3>
 800a64c:	4682      	mov	sl, r0
 800a64e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a650:	468b      	mov	fp, r1
 800a652:	f7f5 fed7 	bl	8000404 <__aeabi_i2d>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a65c:	4b2e      	ldr	r3, [pc, #184]	@ (800a718 <__ieee754_pow+0x780>)
 800a65e:	4413      	add	r3, r2
 800a660:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a664:	4652      	mov	r2, sl
 800a666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a66a:	465b      	mov	r3, fp
 800a66c:	f7f5 fd7e 	bl	800016c <__adddf3>
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	f7f5 fd7a 	bl	800016c <__adddf3>
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	f7f5 fd76 	bl	800016c <__adddf3>
 800a680:	4632      	mov	r2, r6
 800a682:	463b      	mov	r3, r7
 800a684:	4620      	mov	r0, r4
 800a686:	460d      	mov	r5, r1
 800a688:	f7f5 fd6e 	bl	8000168 <__aeabi_dsub>
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	f7f5 fd6a 	bl	8000168 <__aeabi_dsub>
 800a694:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a698:	f7f5 fd66 	bl	8000168 <__aeabi_dsub>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	4659      	mov	r1, fp
 800a6a4:	e61c      	b.n	800a2e0 <__ieee754_pow+0x348>
 800a6a6:	2400      	movs	r4, #0
 800a6a8:	e68a      	b.n	800a3c0 <__ieee754_pow+0x428>
 800a6aa:	2601      	movs	r6, #1
 800a6ac:	e6a0      	b.n	800a3f0 <__ieee754_pow+0x458>
 800a6ae:	bf00      	nop
 800a6b0:	4a454eef 	.word	0x4a454eef
 800a6b4:	3fca7e28 	.word	0x3fca7e28
 800a6b8:	93c9db65 	.word	0x93c9db65
 800a6bc:	3fcd864a 	.word	0x3fcd864a
 800a6c0:	a91d4101 	.word	0xa91d4101
 800a6c4:	3fd17460 	.word	0x3fd17460
 800a6c8:	518f264d 	.word	0x518f264d
 800a6cc:	3fd55555 	.word	0x3fd55555
 800a6d0:	db6fabff 	.word	0xdb6fabff
 800a6d4:	3fdb6db6 	.word	0x3fdb6db6
 800a6d8:	33333303 	.word	0x33333303
 800a6dc:	3fe33333 	.word	0x3fe33333
 800a6e0:	e0000000 	.word	0xe0000000
 800a6e4:	3feec709 	.word	0x3feec709
 800a6e8:	dc3a03fd 	.word	0xdc3a03fd
 800a6ec:	3feec709 	.word	0x3feec709
 800a6f0:	145b01f5 	.word	0x145b01f5
 800a6f4:	be3e2fe0 	.word	0xbe3e2fe0
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	43400000 	.word	0x43400000
 800a700:	0003988e 	.word	0x0003988e
 800a704:	000bb679 	.word	0x000bb679
 800a708:	0800c450 	.word	0x0800c450
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40080000 	.word	0x40080000
 800a714:	0800c430 	.word	0x0800c430
 800a718:	0800c440 	.word	0x0800c440
 800a71c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a988 <__ieee754_pow+0x9f0>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	f7f5 fd21 	bl	800016c <__adddf3>
 800a72a:	4642      	mov	r2, r8
 800a72c:	e9cd 0100 	strd	r0, r1, [sp]
 800a730:	464b      	mov	r3, r9
 800a732:	4620      	mov	r0, r4
 800a734:	4629      	mov	r1, r5
 800a736:	f7f5 fd17 	bl	8000168 <__aeabi_dsub>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a742:	f7f6 f959 	bl	80009f8 <__aeabi_dcmpgt>
 800a746:	2800      	cmp	r0, #0
 800a748:	f47f ae0c 	bne.w	800a364 <__ieee754_pow+0x3cc>
 800a74c:	4ba0      	ldr	r3, [pc, #640]	@ (800a9d0 <__ieee754_pow+0xa38>)
 800a74e:	e022      	b.n	800a796 <__ieee754_pow+0x7fe>
 800a750:	4ca0      	ldr	r4, [pc, #640]	@ (800a9d4 <__ieee754_pow+0xa3c>)
 800a752:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a756:	42a3      	cmp	r3, r4
 800a758:	d919      	bls.n	800a78e <__ieee754_pow+0x7f6>
 800a75a:	4b9f      	ldr	r3, [pc, #636]	@ (800a9d8 <__ieee754_pow+0xa40>)
 800a75c:	440b      	add	r3, r1
 800a75e:	4303      	orrs	r3, r0
 800a760:	d009      	beq.n	800a776 <__ieee754_pow+0x7de>
 800a762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a766:	2200      	movs	r2, #0
 800a768:	2300      	movs	r3, #0
 800a76a:	f7f6 f927 	bl	80009bc <__aeabi_dcmplt>
 800a76e:	3800      	subs	r0, #0
 800a770:	bf18      	it	ne
 800a772:	2001      	movne	r0, #1
 800a774:	e527      	b.n	800a1c6 <__ieee754_pow+0x22e>
 800a776:	4642      	mov	r2, r8
 800a778:	464b      	mov	r3, r9
 800a77a:	f7f5 fcf5 	bl	8000168 <__aeabi_dsub>
 800a77e:	4632      	mov	r2, r6
 800a780:	463b      	mov	r3, r7
 800a782:	f7f6 f92f 	bl	80009e4 <__aeabi_dcmpge>
 800a786:	2800      	cmp	r0, #0
 800a788:	d1eb      	bne.n	800a762 <__ieee754_pow+0x7ca>
 800a78a:	4b94      	ldr	r3, [pc, #592]	@ (800a9dc <__ieee754_pow+0xa44>)
 800a78c:	e003      	b.n	800a796 <__ieee754_pow+0x7fe>
 800a78e:	4a94      	ldr	r2, [pc, #592]	@ (800a9e0 <__ieee754_pow+0xa48>)
 800a790:	4293      	cmp	r3, r2
 800a792:	f240 80e1 	bls.w	800a958 <__ieee754_pow+0x9c0>
 800a796:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a79a:	151b      	asrs	r3, r3, #20
 800a79c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a7a0:	fa4a fa03 	asr.w	sl, sl, r3
 800a7a4:	44da      	add	sl, fp
 800a7a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a7aa:	488e      	ldr	r0, [pc, #568]	@ (800a9e4 <__ieee754_pow+0xa4c>)
 800a7ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a7b0:	4108      	asrs	r0, r1
 800a7b2:	ea00 030a 	and.w	r3, r0, sl
 800a7b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a7ba:	f1c1 0114 	rsb	r1, r1, #20
 800a7be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	fa4a fa01 	asr.w	sl, sl, r1
 800a7c8:	f1bb 0f00 	cmp.w	fp, #0
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	f04f 0200 	mov.w	r2, #0
 800a7d2:	bfb8      	it	lt
 800a7d4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a7d8:	f7f5 fcc6 	bl	8000168 <__aeabi_dsub>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	4689      	mov	r9, r1
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f5 fcbf 	bl	800016c <__adddf3>
 800a7ee:	a368      	add	r3, pc, #416	@ (adr r3, 800a990 <__ieee754_pow+0x9f8>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	f7f5 fe6e 	bl	80004d8 <__aeabi_dmul>
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	464b      	mov	r3, r9
 800a800:	e9cd 0100 	strd	r0, r1, [sp]
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f5 fcae 	bl	8000168 <__aeabi_dsub>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fca8 	bl	8000168 <__aeabi_dsub>
 800a818:	a35f      	add	r3, pc, #380	@ (adr r3, 800a998 <__ieee754_pow+0xa00>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fe5b 	bl	80004d8 <__aeabi_dmul>
 800a822:	a35f      	add	r3, pc, #380	@ (adr r3, 800a9a0 <__ieee754_pow+0xa08>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	4620      	mov	r0, r4
 800a82e:	4629      	mov	r1, r5
 800a830:	f7f5 fe52 	bl	80004d8 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4640      	mov	r0, r8
 800a83a:	4649      	mov	r1, r9
 800a83c:	f7f5 fc96 	bl	800016c <__adddf3>
 800a840:	4604      	mov	r4, r0
 800a842:	460d      	mov	r5, r1
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a84c:	f7f5 fc8e 	bl	800016c <__adddf3>
 800a850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a854:	4680      	mov	r8, r0
 800a856:	4689      	mov	r9, r1
 800a858:	f7f5 fc86 	bl	8000168 <__aeabi_dsub>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4620      	mov	r0, r4
 800a862:	4629      	mov	r1, r5
 800a864:	f7f5 fc80 	bl	8000168 <__aeabi_dsub>
 800a868:	4642      	mov	r2, r8
 800a86a:	4606      	mov	r6, r0
 800a86c:	460f      	mov	r7, r1
 800a86e:	464b      	mov	r3, r9
 800a870:	4640      	mov	r0, r8
 800a872:	4649      	mov	r1, r9
 800a874:	f7f5 fe30 	bl	80004d8 <__aeabi_dmul>
 800a878:	a34b      	add	r3, pc, #300	@ (adr r3, 800a9a8 <__ieee754_pow+0xa10>)
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	f7f5 fe29 	bl	80004d8 <__aeabi_dmul>
 800a886:	a34a      	add	r3, pc, #296	@ (adr r3, 800a9b0 <__ieee754_pow+0xa18>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f5 fc6c 	bl	8000168 <__aeabi_dsub>
 800a890:	4622      	mov	r2, r4
 800a892:	462b      	mov	r3, r5
 800a894:	f7f5 fe20 	bl	80004d8 <__aeabi_dmul>
 800a898:	a347      	add	r3, pc, #284	@ (adr r3, 800a9b8 <__ieee754_pow+0xa20>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 fc65 	bl	800016c <__adddf3>
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	462b      	mov	r3, r5
 800a8a6:	f7f5 fe17 	bl	80004d8 <__aeabi_dmul>
 800a8aa:	a345      	add	r3, pc, #276	@ (adr r3, 800a9c0 <__ieee754_pow+0xa28>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f7f5 fc5a 	bl	8000168 <__aeabi_dsub>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	f7f5 fe0e 	bl	80004d8 <__aeabi_dmul>
 800a8bc:	a342      	add	r3, pc, #264	@ (adr r3, 800a9c8 <__ieee754_pow+0xa30>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fc53 	bl	800016c <__adddf3>
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	f7f5 fe05 	bl	80004d8 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	f7f5 fc47 	bl	8000168 <__aeabi_dsub>
 800a8da:	4604      	mov	r4, r0
 800a8dc:	460d      	mov	r5, r1
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fdf7 	bl	80004d8 <__aeabi_dmul>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a8f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fc36 	bl	8000168 <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a904:	f7f5 ff12 	bl	800072c <__aeabi_ddiv>
 800a908:	4632      	mov	r2, r6
 800a90a:	4604      	mov	r4, r0
 800a90c:	460d      	mov	r5, r1
 800a90e:	463b      	mov	r3, r7
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f5 fde0 	bl	80004d8 <__aeabi_dmul>
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	f7f5 fc26 	bl	800016c <__adddf3>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fc1e 	bl	8000168 <__aeabi_dsub>
 800a92c:	4642      	mov	r2, r8
 800a92e:	464b      	mov	r3, r9
 800a930:	f7f5 fc1a 	bl	8000168 <__aeabi_dsub>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	2000      	movs	r0, #0
 800a93a:	492b      	ldr	r1, [pc, #172]	@ (800a9e8 <__ieee754_pow+0xa50>)
 800a93c:	f7f5 fc14 	bl	8000168 <__aeabi_dsub>
 800a940:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a944:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a948:	da09      	bge.n	800a95e <__ieee754_pow+0x9c6>
 800a94a:	4652      	mov	r2, sl
 800a94c:	f000 f854 	bl	800a9f8 <scalbn>
 800a950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a954:	f7ff bb89 	b.w	800a06a <__ieee754_pow+0xd2>
 800a958:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a95c:	e740      	b.n	800a7e0 <__ieee754_pow+0x848>
 800a95e:	4621      	mov	r1, r4
 800a960:	e7f6      	b.n	800a950 <__ieee754_pow+0x9b8>
 800a962:	2000      	movs	r0, #0
 800a964:	4920      	ldr	r1, [pc, #128]	@ (800a9e8 <__ieee754_pow+0xa50>)
 800a966:	f7ff bb35 	b.w	8009fd4 <__ieee754_pow+0x3c>
 800a96a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a96e:	f7ff bb31 	b.w	8009fd4 <__ieee754_pow+0x3c>
 800a972:	4650      	mov	r0, sl
 800a974:	4659      	mov	r1, fp
 800a976:	f7ff bb2d 	b.w	8009fd4 <__ieee754_pow+0x3c>
 800a97a:	460c      	mov	r4, r1
 800a97c:	f7ff bb87 	b.w	800a08e <__ieee754_pow+0xf6>
 800a980:	2400      	movs	r4, #0
 800a982:	f7ff bb69 	b.w	800a058 <__ieee754_pow+0xc0>
 800a986:	bf00      	nop
 800a988:	652b82fe 	.word	0x652b82fe
 800a98c:	3c971547 	.word	0x3c971547
 800a990:	00000000 	.word	0x00000000
 800a994:	3fe62e43 	.word	0x3fe62e43
 800a998:	fefa39ef 	.word	0xfefa39ef
 800a99c:	3fe62e42 	.word	0x3fe62e42
 800a9a0:	0ca86c39 	.word	0x0ca86c39
 800a9a4:	be205c61 	.word	0xbe205c61
 800a9a8:	72bea4d0 	.word	0x72bea4d0
 800a9ac:	3e663769 	.word	0x3e663769
 800a9b0:	c5d26bf1 	.word	0xc5d26bf1
 800a9b4:	3ebbbd41 	.word	0x3ebbbd41
 800a9b8:	af25de2c 	.word	0xaf25de2c
 800a9bc:	3f11566a 	.word	0x3f11566a
 800a9c0:	16bebd93 	.word	0x16bebd93
 800a9c4:	3f66c16c 	.word	0x3f66c16c
 800a9c8:	5555553e 	.word	0x5555553e
 800a9cc:	3fc55555 	.word	0x3fc55555
 800a9d0:	40900000 	.word	0x40900000
 800a9d4:	4090cbff 	.word	0x4090cbff
 800a9d8:	3f6f3400 	.word	0x3f6f3400
 800a9dc:	4090cc00 	.word	0x4090cc00
 800a9e0:	3fe00000 	.word	0x3fe00000
 800a9e4:	fff00000 	.word	0xfff00000
 800a9e8:	3ff00000 	.word	0x3ff00000

0800a9ec <fabs>:
 800a9ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4770      	bx	lr
 800a9f4:	0000      	movs	r0, r0
	...

0800a9f8 <scalbn>:
 800a9f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa02:	4683      	mov	fp, r0
 800aa04:	468c      	mov	ip, r1
 800aa06:	460b      	mov	r3, r1
 800aa08:	b982      	cbnz	r2, 800aa2c <scalbn+0x34>
 800aa0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	d035      	beq.n	800aa7e <scalbn+0x86>
 800aa12:	4b2d      	ldr	r3, [pc, #180]	@ (800aac8 <scalbn+0xd0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	f7f5 fd5f 	bl	80004d8 <__aeabi_dmul>
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	@ (800aacc <scalbn+0xd4>)
 800aa1c:	4683      	mov	fp, r0
 800aa1e:	429e      	cmp	r6, r3
 800aa20:	468c      	mov	ip, r1
 800aa22:	da0d      	bge.n	800aa40 <scalbn+0x48>
 800aa24:	a324      	add	r3, pc, #144	@ (adr r3, 800aab8 <scalbn+0xc0>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	e019      	b.n	800aa60 <scalbn+0x68>
 800aa2c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800aa30:	42ba      	cmp	r2, r7
 800aa32:	d109      	bne.n	800aa48 <scalbn+0x50>
 800aa34:	4602      	mov	r2, r0
 800aa36:	f7f5 fb99 	bl	800016c <__adddf3>
 800aa3a:	4683      	mov	fp, r0
 800aa3c:	468c      	mov	ip, r1
 800aa3e:	e01e      	b.n	800aa7e <scalbn+0x86>
 800aa40:	460b      	mov	r3, r1
 800aa42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa46:	3a36      	subs	r2, #54	@ 0x36
 800aa48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800aa4c:	428e      	cmp	r6, r1
 800aa4e:	dd0a      	ble.n	800aa66 <scalbn+0x6e>
 800aa50:	a31b      	add	r3, pc, #108	@ (adr r3, 800aac0 <scalbn+0xc8>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	4665      	mov	r5, ip
 800aa58:	f363 051e 	bfi	r5, r3, #0, #31
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	481c      	ldr	r0, [pc, #112]	@ (800aad0 <scalbn+0xd8>)
 800aa60:	f7f5 fd3a 	bl	80004d8 <__aeabi_dmul>
 800aa64:	e7e9      	b.n	800aa3a <scalbn+0x42>
 800aa66:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aa6a:	4432      	add	r2, r6
 800aa6c:	428a      	cmp	r2, r1
 800aa6e:	dcef      	bgt.n	800aa50 <scalbn+0x58>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	dd08      	ble.n	800aa86 <scalbn+0x8e>
 800aa74:	f36f 531e 	bfc	r3, #20, #11
 800aa78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa7c:	46ac      	mov	ip, r5
 800aa7e:	4658      	mov	r0, fp
 800aa80:	4661      	mov	r1, ip
 800aa82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800aa86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aa8a:	da09      	bge.n	800aaa0 <scalbn+0xa8>
 800aa8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800aa90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800aa94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800aa98:	480e      	ldr	r0, [pc, #56]	@ (800aad4 <scalbn+0xdc>)
 800aa9a:	f041 011f 	orr.w	r1, r1, #31
 800aa9e:	e7c1      	b.n	800aa24 <scalbn+0x2c>
 800aaa0:	3236      	adds	r2, #54	@ 0x36
 800aaa2:	f36f 531e 	bfc	r3, #20, #11
 800aaa6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aaaa:	4658      	mov	r0, fp
 800aaac:	4629      	mov	r1, r5
 800aaae:	2200      	movs	r2, #0
 800aab0:	4b09      	ldr	r3, [pc, #36]	@ (800aad8 <scalbn+0xe0>)
 800aab2:	e7d5      	b.n	800aa60 <scalbn+0x68>
 800aab4:	f3af 8000 	nop.w
 800aab8:	c2f8f359 	.word	0xc2f8f359
 800aabc:	01a56e1f 	.word	0x01a56e1f
 800aac0:	8800759c 	.word	0x8800759c
 800aac4:	7e37e43c 	.word	0x7e37e43c
 800aac8:	43500000 	.word	0x43500000
 800aacc:	ffff3cb0 	.word	0xffff3cb0
 800aad0:	8800759c 	.word	0x8800759c
 800aad4:	c2f8f359 	.word	0xc2f8f359
 800aad8:	3c900000 	.word	0x3c900000

0800aadc <with_errno>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	4604      	mov	r4, r0
 800aae0:	460d      	mov	r5, r1
 800aae2:	4616      	mov	r6, r2
 800aae4:	f7fe fe20 	bl	8009728 <__errno>
 800aae8:	4629      	mov	r1, r5
 800aaea:	6006      	str	r6, [r0, #0]
 800aaec:	4620      	mov	r0, r4
 800aaee:	bd70      	pop	{r4, r5, r6, pc}

0800aaf0 <xflow>:
 800aaf0:	b513      	push	{r0, r1, r4, lr}
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	b10c      	cbz	r4, 800aafe <xflow+0xe>
 800aafa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aafe:	e9cd 2300 	strd	r2, r3, [sp]
 800ab02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab06:	f7f5 fce7 	bl	80004d8 <__aeabi_dmul>
 800ab0a:	2222      	movs	r2, #34	@ 0x22
 800ab0c:	b002      	add	sp, #8
 800ab0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab12:	f7ff bfe3 	b.w	800aadc <with_errno>

0800ab16 <__math_uflow>:
 800ab16:	2200      	movs	r2, #0
 800ab18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab1c:	f7ff bfe8 	b.w	800aaf0 <xflow>

0800ab20 <__math_oflow>:
 800ab20:	2200      	movs	r2, #0
 800ab22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ab26:	f7ff bfe3 	b.w	800aaf0 <xflow>
	...

0800ab2c <__ieee754_sqrt>:
 800ab2c:	4a65      	ldr	r2, [pc, #404]	@ (800acc4 <__ieee754_sqrt+0x198>)
 800ab2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab32:	438a      	bics	r2, r1
 800ab34:	4606      	mov	r6, r0
 800ab36:	460f      	mov	r7, r1
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	d10e      	bne.n	800ab5c <__ieee754_sqrt+0x30>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	f7f5 fcca 	bl	80004d8 <__aeabi_dmul>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f5 fb0e 	bl	800016c <__adddf3>
 800ab50:	4606      	mov	r6, r0
 800ab52:	460f      	mov	r7, r1
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	dc0c      	bgt.n	800ab7a <__ieee754_sqrt+0x4e>
 800ab60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ab64:	4302      	orrs	r2, r0
 800ab66:	d0f5      	beq.n	800ab54 <__ieee754_sqrt+0x28>
 800ab68:	b189      	cbz	r1, 800ab8e <__ieee754_sqrt+0x62>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	f7f5 fafc 	bl	8000168 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	f7f5 fdda 	bl	800072c <__aeabi_ddiv>
 800ab78:	e7ea      	b.n	800ab50 <__ieee754_sqrt+0x24>
 800ab7a:	150a      	asrs	r2, r1, #20
 800ab7c:	d115      	bne.n	800abaa <__ieee754_sqrt+0x7e>
 800ab7e:	2100      	movs	r1, #0
 800ab80:	e009      	b.n	800ab96 <__ieee754_sqrt+0x6a>
 800ab82:	0ae3      	lsrs	r3, r4, #11
 800ab84:	3a15      	subs	r2, #21
 800ab86:	0564      	lsls	r4, r4, #21
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0fa      	beq.n	800ab82 <__ieee754_sqrt+0x56>
 800ab8c:	e7f7      	b.n	800ab7e <__ieee754_sqrt+0x52>
 800ab8e:	460a      	mov	r2, r1
 800ab90:	e7fa      	b.n	800ab88 <__ieee754_sqrt+0x5c>
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	3101      	adds	r1, #1
 800ab96:	02d8      	lsls	r0, r3, #11
 800ab98:	d5fb      	bpl.n	800ab92 <__ieee754_sqrt+0x66>
 800ab9a:	1e48      	subs	r0, r1, #1
 800ab9c:	1a12      	subs	r2, r2, r0
 800ab9e:	f1c1 0020 	rsb	r0, r1, #32
 800aba2:	fa24 f000 	lsr.w	r0, r4, r0
 800aba6:	4303      	orrs	r3, r0
 800aba8:	408c      	lsls	r4, r1
 800abaa:	2700      	movs	r7, #0
 800abac:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800abb0:	2116      	movs	r1, #22
 800abb2:	07d2      	lsls	r2, r2, #31
 800abb4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800abb8:	463a      	mov	r2, r7
 800abba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abc2:	bf5c      	itt	pl
 800abc4:	005b      	lslpl	r3, r3, #1
 800abc6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800abca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abce:	bf58      	it	pl
 800abd0:	0064      	lslpl	r4, r4, #1
 800abd2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800abd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abda:	0064      	lsls	r4, r4, #1
 800abdc:	1815      	adds	r5, r2, r0
 800abde:	429d      	cmp	r5, r3
 800abe0:	bfde      	ittt	le
 800abe2:	182a      	addle	r2, r5, r0
 800abe4:	1b5b      	suble	r3, r3, r5
 800abe6:	183f      	addle	r7, r7, r0
 800abe8:	0fe5      	lsrs	r5, r4, #31
 800abea:	3901      	subs	r1, #1
 800abec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800abf0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800abf4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800abf8:	d1f0      	bne.n	800abdc <__ieee754_sqrt+0xb0>
 800abfa:	460d      	mov	r5, r1
 800abfc:	2620      	movs	r6, #32
 800abfe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ac02:	4293      	cmp	r3, r2
 800ac04:	eb00 0c01 	add.w	ip, r0, r1
 800ac08:	dc02      	bgt.n	800ac10 <__ieee754_sqrt+0xe4>
 800ac0a:	d113      	bne.n	800ac34 <__ieee754_sqrt+0x108>
 800ac0c:	45a4      	cmp	ip, r4
 800ac0e:	d811      	bhi.n	800ac34 <__ieee754_sqrt+0x108>
 800ac10:	f1bc 0f00 	cmp.w	ip, #0
 800ac14:	eb0c 0100 	add.w	r1, ip, r0
 800ac18:	da3e      	bge.n	800ac98 <__ieee754_sqrt+0x16c>
 800ac1a:	2900      	cmp	r1, #0
 800ac1c:	db3c      	blt.n	800ac98 <__ieee754_sqrt+0x16c>
 800ac1e:	f102 0e01 	add.w	lr, r2, #1
 800ac22:	1a9b      	subs	r3, r3, r2
 800ac24:	4672      	mov	r2, lr
 800ac26:	45a4      	cmp	ip, r4
 800ac28:	bf88      	it	hi
 800ac2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac2e:	eba4 040c 	sub.w	r4, r4, ip
 800ac32:	4405      	add	r5, r0
 800ac34:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800ac38:	3e01      	subs	r6, #1
 800ac3a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800ac3e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac42:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ac46:	d1dc      	bne.n	800ac02 <__ieee754_sqrt+0xd6>
 800ac48:	431c      	orrs	r4, r3
 800ac4a:	d01a      	beq.n	800ac82 <__ieee754_sqrt+0x156>
 800ac4c:	4c1e      	ldr	r4, [pc, #120]	@ (800acc8 <__ieee754_sqrt+0x19c>)
 800ac4e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800accc <__ieee754_sqrt+0x1a0>
 800ac52:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac56:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac5a:	f7f5 fa85 	bl	8000168 <__aeabi_dsub>
 800ac5e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4650      	mov	r0, sl
 800ac68:	4659      	mov	r1, fp
 800ac6a:	f7f5 feb1 	bl	80009d0 <__aeabi_dcmple>
 800ac6e:	b140      	cbz	r0, 800ac82 <__ieee754_sqrt+0x156>
 800ac70:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac78:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac7c:	d10e      	bne.n	800ac9c <__ieee754_sqrt+0x170>
 800ac7e:	4635      	mov	r5, r6
 800ac80:	3701      	adds	r7, #1
 800ac82:	107b      	asrs	r3, r7, #1
 800ac84:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac88:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ac8c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800ac90:	086b      	lsrs	r3, r5, #1
 800ac92:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800ac96:	e75b      	b.n	800ab50 <__ieee754_sqrt+0x24>
 800ac98:	4696      	mov	lr, r2
 800ac9a:	e7c2      	b.n	800ac22 <__ieee754_sqrt+0xf6>
 800ac9c:	f7f5 fa66 	bl	800016c <__adddf3>
 800aca0:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4650      	mov	r0, sl
 800acaa:	4659      	mov	r1, fp
 800acac:	f7f5 fe86 	bl	80009bc <__aeabi_dcmplt>
 800acb0:	b120      	cbz	r0, 800acbc <__ieee754_sqrt+0x190>
 800acb2:	1cab      	adds	r3, r5, #2
 800acb4:	bf08      	it	eq
 800acb6:	3701      	addeq	r7, #1
 800acb8:	3502      	adds	r5, #2
 800acba:	e7e2      	b.n	800ac82 <__ieee754_sqrt+0x156>
 800acbc:	1c6b      	adds	r3, r5, #1
 800acbe:	f023 0501 	bic.w	r5, r3, #1
 800acc2:	e7de      	b.n	800ac82 <__ieee754_sqrt+0x156>
 800acc4:	7ff00000 	.word	0x7ff00000
 800acc8:	0800c468 	.word	0x0800c468
 800accc:	0800c460 	.word	0x0800c460

0800acd0 <_init>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr

0800acdc <_fini>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr
