
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  080093c8  080093c8  0000a3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab48  0800ab48  0000c214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab48  0800ab48  0000bb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab50  0800ab50  0000c214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab50  0800ab50  0000bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab54  0800ab54  0000bb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800ab58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000177c  20000218  0800ad6c  0000c218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001994  0800ad6c  0000c994  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025f7c  00000000  00000000  0000c23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f8f  00000000  00000000  000321b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00010e4c  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  00048f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001da1  00000000  00000000  0004a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c400  00000000  00000000  0004c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027997  00000000  00000000  000689f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097729  00000000  00000000  00090388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127ab1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004db8  00000000  00000000  00127af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0012c8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	080093b0 	.word	0x080093b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	080093b0 	.word	0x080093b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <W5500_Select>:

    return ans;
}
//ethernet код
void W5500_Select(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4801      	ldr	r0, [pc, #4]	@ (8000a94 <W5500_Select+0xc>)
 8000a8e:	f001 bc51 	b.w	8002334 <HAL_GPIO_WritePin>
 8000a92:	bf00      	nop
 8000a94:	40010800 	.word	0x40010800

08000a98 <W5500_Unselect>:
}

void W5500_Unselect(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4801      	ldr	r0, [pc, #4]	@ (8000aa4 <W5500_Unselect+0xc>)
 8000a9e:	f001 bc49 	b.w	8002334 <HAL_GPIO_WritePin>
 8000aa2:	bf00      	nop
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <W5500_ReadBuff>:
}

void W5500_ReadBuff(uint8_t* buff, uint16_t len){
 8000aa8:	460a      	mov	r2, r1
	HAL_SPI_Receive(&hspi1,buff,len,HAL_MAX_DELAY);
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	4601      	mov	r1, r0
 8000ab0:	4801      	ldr	r0, [pc, #4]	@ (8000ab8 <W5500_ReadBuff+0x10>)
 8000ab2:	f004 b963 	b.w	8004d7c <HAL_SPI_Receive>
 8000ab6:	bf00      	nop
 8000ab8:	200002f4 	.word	0x200002f4

08000abc <W5500_ReadByte>:

void W5500_WriteBuff(uint8_t* buff,uint16_t len){
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void){
 8000abc:	b507      	push	{r0, r1, r2, lr}
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000abe:	2101      	movs	r1, #1
 8000ac0:	f10d 0007 	add.w	r0, sp, #7
 8000ac4:	f7ff fff0 	bl	8000aa8 <W5500_ReadBuff>
	return byte;
}
 8000ac8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000acc:	b003      	add	sp, #12
 8000ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000ad4 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff,uint16_t len){
 8000ad4:	460a      	mov	r2, r1
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	4601      	mov	r1, r0
 8000adc:	4801      	ldr	r0, [pc, #4]	@ (8000ae4 <W5500_WriteBuff+0x10>)
 8000ade:	f003 bfa1 	b.w	8004a24 <HAL_SPI_Transmit>
 8000ae2:	bf00      	nop
 8000ae4:	200002f4 	.word	0x200002f4

08000ae8 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte){
 8000ae8:	b507      	push	{r0, r1, r2, lr}
	W5500_WriteBuff(&byte, sizeof(byte));
 8000aea:	2101      	movs	r1, #1
void W5500_WriteByte(uint8_t byte){
 8000aec:	f88d 0007 	strb.w	r0, [sp, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000af0:	f10d 0007 	add.w	r0, sp, #7
 8000af4:	f7ff ffee 	bl	8000ad4 <W5500_WriteBuff>
}
 8000af8:	b003      	add	sp, #12
 8000afa:	f85d fb04 	ldr.w	pc, [sp], #4

08000afe <int_to_str>:
void int_to_str(int num, char *str) {
 8000afe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (num == 0) {
 8000b00:	b160      	cbz	r0, 8000b1c <int_to_str+0x1e>
 8000b02:	aa01      	add	r2, sp, #4
    int i = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	4616      	mov	r6, r2
        tmp[i++] = '0' + (num % 10);
 8000b08:	240a      	movs	r4, #10
    while (num > 0) {
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	dc0b      	bgt.n	8000b26 <int_to_str+0x28>
 8000b0e:	461a      	mov	r2, r3
 8000b10:	1e48      	subs	r0, r1, #1
    while (i-- > 0) {
 8000b12:	3a01      	subs	r2, #1
 8000b14:	d211      	bcs.n	8000b3a <int_to_str+0x3c>
    str[j] = '\0';
 8000b16:	2200      	movs	r2, #0
 8000b18:	54ca      	strb	r2, [r1, r3]
 8000b1a:	e002      	b.n	8000b22 <int_to_str+0x24>
        str[0] = '0';
 8000b1c:	2330      	movs	r3, #48	@ 0x30
        str[1] = '\0';
 8000b1e:	7048      	strb	r0, [r1, #1]
        str[0] = '0';
 8000b20:	700b      	strb	r3, [r1, #0]
}
 8000b22:	b004      	add	sp, #16
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
        tmp[i++] = '0' + (num % 10);
 8000b26:	fb90 f5f4 	sdiv	r5, r0, r4
 8000b2a:	fb04 0015 	mls	r0, r4, r5, r0
 8000b2e:	3030      	adds	r0, #48	@ 0x30
 8000b30:	f802 0b01 	strb.w	r0, [r2], #1
 8000b34:	3301      	adds	r3, #1
        num /= 10;
 8000b36:	4628      	mov	r0, r5
 8000b38:	e7e7      	b.n	8000b0a <int_to_str+0xc>
        str[j++] = tmp[i];
 8000b3a:	5cb4      	ldrb	r4, [r6, r2]
 8000b3c:	f800 4f01 	strb.w	r4, [r0, #1]!
 8000b40:	e7e7      	b.n	8000b12 <int_to_str+0x14>
	...

08000b44 <Is_Flash_Valid>:
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <Is_Flash_Valid+0x10>)
 8000b46:	f8d3 0c00 	ldr.w	r0, [r3, #3072]	@ 0xc00
}
 8000b4a:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <Is_Flash_Valid+0x14>)
 8000b4c:	1ac3      	subs	r3, r0, r3
 8000b4e:	4258      	negs	r0, r3
 8000b50:	4158      	adcs	r0, r3
 8000b52:	4770      	bx	lr
 8000b54:	0801f000 	.word	0x0801f000
 8000b58:	deadbeef 	.word	0xdeadbeef

08000b5c <Read_Flash_Array>:
void Read_Flash_Array(int32_t *output) {
 8000b5c:	b508      	push	{r3, lr}
 8000b5e:	4602      	mov	r2, r0
    if (!Is_Flash_Valid()) {
 8000b60:	f7ff fff0 	bl	8000b44 <Is_Flash_Valid>
 8000b64:	b918      	cbnz	r0, 8000b6e <Read_Flash_Array+0x12>
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8000b66:	6010      	str	r0, [r2, #0]
 8000b68:	6050      	str	r0, [r2, #4]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000b6a:	6090      	str	r0, [r2, #8]
}
 8000b6c:	bd08      	pop	{r3, pc}
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000b6e:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <Read_Flash_Array+0x20>)
 8000b70:	cb03      	ldmia	r3!, {r0, r1}
 8000b72:	6010      	str	r0, [r2, #0]
 8000b74:	6051      	str	r1, [r2, #4]
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	e7f7      	b.n	8000b6a <Read_Flash_Array+0xe>
 8000b7a:	bf00      	nop
 8000b7c:	0801fc04 	.word	0x0801fc04

08000b80 <Write_Flash_Array>:
void Write_Flash_Array(int32_t *data) {
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	b08b      	sub	sp, #44	@ 0x2c
 8000b84:	4605      	mov	r5, r0
    HAL_FLASH_Unlock();
 8000b86:	f001 f9fd 	bl	8001f84 <HAL_FLASH_Unlock>
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9302      	str	r3, [sp, #8]
    erase.NbPages = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	4c12      	ldr	r4, [pc, #72]	@ (8000bdc <Write_Flash_Array+0x5c>)
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000b92:	a901      	add	r1, sp, #4
 8000b94:	a802      	add	r0, sp, #8
    erase.NbPages = 1;
 8000b96:	e9cd 4304 	strd	r4, r3, [sp, #16]
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000b9a:	f001 fa9d 	bl	80020d8 <HAL_FLASHEx_Erase>
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <Write_Flash_Array+0x60>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000ba0:	6828      	ldr	r0, [r5, #0]
 8000ba2:	6869      	ldr	r1, [r5, #4]
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000ba4:	9306      	str	r3, [sp, #24]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000ba6:	ab07      	add	r3, sp, #28
 8000ba8:	c303      	stmia	r3!, {r0, r1}
 8000baa:	68a8      	ldr	r0, [r5, #8]
    for (uint32_t i = 0; i < size; i++) {
 8000bac:	4f0d      	ldr	r7, [pc, #52]	@ (8000be4 <Write_Flash_Array+0x64>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000bae:	6018      	str	r0, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000bb0:	ae06      	add	r6, sp, #24
        uint32_t value = ptr[i];
 8000bb2:	f856 5b04 	ldr.w	r5, [r6], #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	2300      	movs	r3, #0
 8000bba:	b2aa      	uxth	r2, r5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f001 fa27 	bl	8002010 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000bc2:	1ca1      	adds	r1, r4, #2
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	0c2a      	lsrs	r2, r5, #16
        addr += 4;
 8000bca:	3404      	adds	r4, #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000bcc:	f001 fa20 	bl	8002010 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < size; i++) {
 8000bd0:	42bc      	cmp	r4, r7
 8000bd2:	d1ee      	bne.n	8000bb2 <Write_Flash_Array+0x32>
    HAL_FLASH_Lock();
 8000bd4:	f001 f9e8 	bl	8001fa8 <HAL_FLASH_Lock>
}
 8000bd8:	b00b      	add	sp, #44	@ 0x2c
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	0801fc00 	.word	0x0801fc00
 8000be0:	deadbeef 	.word	0xdeadbeef
 8000be4:	0801fc20 	.word	0x0801fc20

08000be8 <print_interface_mode0>:
void print_interface_mode0(){
 8000be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ssd1306_SetCursor(1, 1);//установка курсора
 8000bea:	2101      	movs	r1, #1
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 8000bec:	2501      	movs	r5, #1
 8000bee:	4c21      	ldr	r4, [pc, #132]	@ (8000c74 <print_interface_mode0+0x8c>)
	ssd1306_SetCursor(1, 1);//установка курсора
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	f001 f815 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_Fill(Black);//заполнение экрана чёрным(типа стирание)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 ff62 	bl	8001ac0 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 8000bfc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c00:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <print_interface_mode0+0x90>)
 8000c02:	9500      	str	r5, [sp, #0]
 8000c04:	f000 fff6 	bl	8001bf4 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000c08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c0c:	481b      	ldr	r0, [pc, #108]	@ (8000c7c <print_interface_mode0+0x94>)
 8000c0e:	9500      	str	r5, [sp, #0]
 8000c10:	f000 fff0 	bl	8001bf4 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000c14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c18:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <print_interface_mode0+0x98>)
 8000c1a:	9500      	str	r5, [sp, #0]
 8000c1c:	f000 ffea 	bl	8001bf4 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000c20:	210a      	movs	r1, #10
 8000c22:	4628      	mov	r0, r5
 8000c24:	f000 fffc 	bl	8001c20 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000c28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c2c:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <print_interface_mode0+0x9c>)
 8000c2e:	9500      	str	r5, [sp, #0]
 8000c30:	f000 ffe0 	bl	8001bf4 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000c34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c38:	4810      	ldr	r0, [pc, #64]	@ (8000c7c <print_interface_mode0+0x94>)
 8000c3a:	9500      	str	r5, [sp, #0]
 8000c3c:	f000 ffda 	bl	8001bf4 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <print_interface_mode0+0xa0>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b953      	cbnz	r3, 8000c5c <print_interface_mode0+0x74>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000c46:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c4a:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <print_interface_mode0+0xa4>)
 8000c4c:	9500      	str	r5, [sp, #0]
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000c4e:	f000 ffd1 	bl	8001bf4 <ssd1306_WriteString>
}
 8000c52:	b003      	add	sp, #12
 8000c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ssd1306_UpdateScreen();//самая важная функция, без которой что было отправлено на дисплей не отобразится
 8000c58:	f000 bf3e 	b.w	8001ad8 <ssd1306_UpdateScreen>
	}else if(choiced_channel==1){
 8000c5c:	2b01      	cmp	r3, #1
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000c5e:	bf07      	ittee	eq
 8000c60:	9300      	streq	r3, [sp, #0]
 8000c62:	480b      	ldreq	r0, [pc, #44]	@ (8000c90 <print_interface_mode0+0xa8>)
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000c64:	480b      	ldrne	r0, [pc, #44]	@ (8000c94 <print_interface_mode0+0xac>)
 8000c66:	9500      	strne	r5, [sp, #0]
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000c68:	bf0c      	ite	eq
 8000c6a:	e894 000e 	ldmiaeq.w	r4, {r1, r2, r3}
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000c6e:	e894 000e 	ldmiane.w	r4, {r1, r2, r3}
 8000c72:	e7ec      	b.n	8000c4e <print_interface_mode0+0x66>
 8000c74:	0800951c 	.word	0x0800951c
 8000c78:	2000023d 	.word	0x2000023d
 8000c7c:	080093c8 	.word	0x080093c8
 8000c80:	20000244 	.word	0x20000244
 8000c84:	2000024b 	.word	0x2000024b
 8000c88:	2000023b 	.word	0x2000023b
 8000c8c:	080093cc 	.word	0x080093cc
 8000c90:	080093d0 	.word	0x080093d0
 8000c94:	080093d4 	.word	0x080093d4

08000c98 <print_interface_mode1>:
	ssd1306_SetCursor(1, 1);
 8000c98:	2101      	movs	r1, #1
void print_interface_mode1(){
 8000c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_SetCursor(1, 1);
 8000c9e:	4608      	mov	r0, r1
void print_interface_mode1(){
 8000ca0:	b085      	sub	sp, #20
 8000ca2:	4d5c      	ldr	r5, [pc, #368]	@ (8000e14 <print_interface_mode1+0x17c>)
	ssd1306_SetCursor(1, 1);
 8000ca4:	f000 ffbc 	bl	8001c20 <ssd1306_SetCursor>
	if(choiced_num==0){
 8000ca8:	4f5b      	ldr	r7, [pc, #364]	@ (8000e18 <print_interface_mode1+0x180>)
	ssd1306_Fill(Black);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 ff08 	bl	8001ac0 <ssd1306_Fill>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cb0:	7828      	ldrb	r0, [r5, #0]
 8000cb2:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 8000e1c <print_interface_mode1+0x184>
	if(choiced_num==0){
 8000cb6:	783b      	ldrb	r3, [r7, #0]
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cb8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000cbc:	4440      	add	r0, r8
	if(choiced_num==0){
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d13d      	bne.n	8000d3e <print_interface_mode1+0xa6>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cc2:	f7ff fa45 	bl	8000150 <strlen>
			ssd1306_WriteString("0", Font_7x10, White);
 8000cc6:	2701      	movs	r7, #1
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cc8:	4606      	mov	r6, r0
		for(int i=size;i<6;++i){
 8000cca:	4c55      	ldr	r4, [pc, #340]	@ (8000e20 <print_interface_mode1+0x188>)
			ssd1306_WriteString("0", Font_7x10, White);
 8000ccc:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8000e24 <print_interface_mode1+0x18c>
		for(int i=size;i<6;++i){
 8000cd0:	2e05      	cmp	r6, #5
 8000cd2:	dd2c      	ble.n	8000d2e <print_interface_mode1+0x96>
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000cd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000cd8:	2601      	movs	r6, #1
 8000cda:	7828      	ldrb	r0, [r5, #0]
 8000cdc:	9600      	str	r6, [sp, #0]
 8000cde:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000ce2:	4440      	add	r0, r8
 8000ce4:	f000 ff86 	bl	8001bf4 <ssd1306_WriteString>
		ssd1306_WriteString("   ", Font_7x10, White);
 8000ce8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000cec:	484e      	ldr	r0, [pc, #312]	@ (8000e28 <print_interface_mode1+0x190>)
 8000cee:	9600      	str	r6, [sp, #0]
 8000cf0:	f000 ff80 	bl	8001bf4 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e2c <print_interface_mode1+0x194>)
 8000cf6:	484e      	ldr	r0, [pc, #312]	@ (8000e30 <print_interface_mode1+0x198>)
 8000cf8:	9600      	str	r6, [sp, #0]
 8000cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
			ssd1306_WriteString("^", Font_7x10, White);
 8000cfc:	f000 ff7a 	bl	8001bf4 <ssd1306_WriteString>
	if(freq[choiced_channel]==160000){
 8000d00:	782a      	ldrb	r2, [r5, #0]
 8000d02:	4b4c      	ldr	r3, [pc, #304]	@ (8000e34 <print_interface_mode1+0x19c>)
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	4a4b      	ldr	r2, [pc, #300]	@ (8000e38 <print_interface_mode1+0x1a0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d175      	bne.n	8000dfa <print_interface_mode1+0x162>
		ssd1306_SetCursor(77, 18);
 8000d0e:	2112      	movs	r1, #18
 8000d10:	204d      	movs	r0, #77	@ 0x4d
 8000d12:	f000 ff85 	bl	8001c20 <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 8000d16:	2201      	movs	r2, #1
 8000d18:	4b41      	ldr	r3, [pc, #260]	@ (8000e20 <print_interface_mode1+0x188>)
 8000d1a:	4848      	ldr	r0, [pc, #288]	@ (8000e3c <print_interface_mode1+0x1a4>)
 8000d1c:	9200      	str	r2, [sp, #0]
 8000d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
		ssd1306_WriteString("MIN", Font_7x10, White);
 8000d20:	f000 ff68 	bl	8001bf4 <ssd1306_WriteString>
}
 8000d24:	b005      	add	sp, #20
 8000d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_UpdateScreen();
 8000d2a:	f000 bed5 	b.w	8001ad8 <ssd1306_UpdateScreen>
			ssd1306_WriteString("0", Font_7x10, White);
 8000d2e:	4648      	mov	r0, r9
 8000d30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d34:	9700      	str	r7, [sp, #0]
 8000d36:	f000 ff5d 	bl	8001bf4 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7c8      	b.n	8000cd0 <print_interface_mode1+0x38>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000d3e:	f7ff fa07 	bl	8000150 <strlen>
		for(int i=5;i>size-1;--i){
 8000d42:	2405      	movs	r4, #5
		uint16_t size=strlen(num_string[choiced_channel]);
 8000d44:	4606      	mov	r6, r0
				ssd1306_WriteString("0", Font_7x10, White);
 8000d46:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8000e20 <print_interface_mode1+0x188>
 8000d4a:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8000e24 <print_interface_mode1+0x18c>
				ssd1306_WriteString("0", Font_11x18, White);
 8000d4e:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000e2c <print_interface_mode1+0x194>
		for(int i=5;i>size-1;--i){
 8000d52:	42a6      	cmp	r6, r4
 8000d54:	dd28      	ble.n	8000da8 <print_interface_mode1+0x110>
		for(int i=0;i<size;++i){
 8000d56:	2400      	movs	r4, #0
 8000d58:	46a3      	mov	fp, r4
				ssd1306_WriteString(str, Font_7x10, White);
 8000d5a:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8000e20 <print_interface_mode1+0x188>
				ssd1306_WriteString(str, Font_11x18, White);
 8000d5e:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8000e2c <print_interface_mode1+0x194>
		for(int i=0;i<size;++i){
 8000d62:	42a6      	cmp	r6, r4
 8000d64:	dc30      	bgt.n	8000dc8 <print_interface_mode1+0x130>
		ssd1306_WriteString("   ", Font_7x10, White);
 8000d66:	2601      	movs	r6, #1
 8000d68:	4c2d      	ldr	r4, [pc, #180]	@ (8000e20 <print_interface_mode1+0x188>)
 8000d6a:	9600      	str	r6, [sp, #0]
 8000d6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d70:	482d      	ldr	r0, [pc, #180]	@ (8000e28 <print_interface_mode1+0x190>)
 8000d72:	f000 ff3f 	bl	8001bf4 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000d76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d7a:	9600      	str	r6, [sp, #0]
 8000d7c:	482c      	ldr	r0, [pc, #176]	@ (8000e30 <print_interface_mode1+0x198>)
 8000d7e:	f000 ff39 	bl	8001bf4 <ssd1306_WriteString>
		if(choice==1){
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <print_interface_mode1+0x1a8>)
 8000d84:	781e      	ldrb	r6, [r3, #0]
 8000d86:	2e01      	cmp	r6, #1
 8000d88:	d1ba      	bne.n	8000d00 <print_interface_mode1+0x68>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 8000d8a:	7838      	ldrb	r0, [r7, #0]
 8000d8c:	2112      	movs	r1, #18
 8000d8e:	f1c0 0006 	rsb	r0, r0, #6
 8000d92:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000d96:	3001      	adds	r0, #1
 8000d98:	b2c0      	uxtb	r0, r0
 8000d9a:	f000 ff41 	bl	8001c20 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 8000d9e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000da2:	4828      	ldr	r0, [pc, #160]	@ (8000e44 <print_interface_mode1+0x1ac>)
 8000da4:	9600      	str	r6, [sp, #0]
 8000da6:	e7a9      	b.n	8000cfc <print_interface_mode1+0x64>
			if(i==choiced_num-1){
 8000da8:	783b      	ldrb	r3, [r7, #0]
				ssd1306_WriteString("0", Font_7x10, White);
 8000daa:	4658      	mov	r0, fp
			if(i==choiced_num-1){
 8000dac:	3b01      	subs	r3, #1
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	f04f 0301 	mov.w	r3, #1
				ssd1306_WriteString("0", Font_11x18, White);
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	bf0c      	ite	eq
 8000db8:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString("0", Font_7x10, White);
 8000dbc:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
 8000dc0:	f000 ff18 	bl	8001bf4 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000dc4:	3c01      	subs	r4, #1
 8000dc6:	e7c4      	b.n	8000d52 <print_interface_mode1+0xba>
				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000dc8:	782b      	ldrb	r3, [r5, #0]
				ssd1306_WriteString(str, Font_7x10, White);
 8000dca:	a803      	add	r0, sp, #12
				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000dcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000dd0:	4443      	add	r3, r8
 8000dd2:	5d1a      	ldrb	r2, [r3, r4]
			if(i==size-choiced_num){
 8000dd4:	783b      	ldrb	r3, [r7, #0]
				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000dd6:	f88d 200c 	strb.w	r2, [sp, #12]
			if(i==size-choiced_num){
 8000dda:	1af3      	subs	r3, r6, r3
 8000ddc:	42a3      	cmp	r3, r4
				ssd1306_WriteString(str, Font_11x18, White);
 8000dde:	f04f 0301 	mov.w	r3, #1
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	bf0c      	ite	eq
 8000de6:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString(str, Font_7x10, White);
 8000dea:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000dee:	f88d b00d 	strb.w	fp, [sp, #13]
		for(int i=0;i<size;++i){
 8000df2:	3401      	adds	r4, #1
				ssd1306_WriteString(str, Font_7x10, White);
 8000df4:	f000 fefe 	bl	8001bf4 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000df8:	e7b3      	b.n	8000d62 <print_interface_mode1+0xca>
	}else if(freq[choiced_channel]==8){
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d192      	bne.n	8000d24 <print_interface_mode1+0x8c>
		ssd1306_SetCursor(77, 18);
 8000dfe:	2112      	movs	r1, #18
 8000e00:	204d      	movs	r0, #77	@ 0x4d
 8000e02:	f000 ff0d 	bl	8001c20 <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 8000e06:	2201      	movs	r2, #1
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <print_interface_mode1+0x188>)
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <print_interface_mode1+0x1b0>)
 8000e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e10:	e786      	b.n	8000d20 <print_interface_mode1+0x88>
 8000e12:	bf00      	nop
 8000e14:	2000023b 	.word	0x2000023b
 8000e18:	2000023c 	.word	0x2000023c
 8000e1c:	2000023d 	.word	0x2000023d
 8000e20:	0800951c 	.word	0x0800951c
 8000e24:	080093ce 	.word	0x080093ce
 8000e28:	080093c8 	.word	0x080093c8
 8000e2c:	08009510 	.word	0x08009510
 8000e30:	080093d8 	.word	0x080093d8
 8000e34:	20000258 	.word	0x20000258
 8000e38:	00027100 	.word	0x00027100
 8000e3c:	080093df 	.word	0x080093df
 8000e40:	20000252 	.word	0x20000252
 8000e44:	080093dd 	.word	0x080093dd
 8000e48:	080093e3 	.word	0x080093e3

08000e4c <int_mode_0>:
void int_mode_0(){
 8000e4c:	b510      	push	{r4, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4819      	ldr	r0, [pc, #100]	@ (8000eb8 <int_mode_0+0x6c>)
 8000e52:	f001 fa69 	bl	8002328 <HAL_GPIO_ReadPin>
 8000e56:	b910      	cbnz	r0, 8000e5e <int_mode_0+0x12>
		choice=1;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <int_mode_0+0x70>)
 8000e5c:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8000e5e:	4c16      	ldr	r4, [pc, #88]	@ (8000eb8 <int_mode_0+0x6c>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	4620      	mov	r0, r4
 8000e64:	f001 fa60 	bl	8002328 <HAL_GPIO_ReadPin>
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	d0f9      	beq.n	8000e60 <int_mode_0+0x14>
	if(choice==0){
 8000e6c:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <int_mode_0+0x70>)
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	b98b      	cbnz	r3, 8000e96 <int_mode_0+0x4a>
		choiced_channel=get_encoder()%3;
 8000e72:	2203      	movs	r2, #3
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <int_mode_0+0x74>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bfb8      	it	lt
 8000e7c:	3303      	addlt	r3, #3
 8000e7e:	109b      	asrs	r3, r3, #2
		choiced_channel=get_encoder()%3;
 8000e80:	fb93 f2f2 	sdiv	r2, r3, r2
 8000e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <int_mode_0+0x78>)
 8000e8c:	7013      	strb	r3, [r2, #0]
}
 8000e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode0();
 8000e92:	f7ff bea9 	b.w	8000be8 <print_interface_mode0>
	}else if(choice==1){
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d10c      	bne.n	8000eb4 <int_mode_0+0x68>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <int_mode_0+0x74>)
 8000e9e:	6248      	str	r0, [r1, #36]	@ 0x24
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8000ea0:	4909      	ldr	r1, [pc, #36]	@ (8000ec8 <int_mode_0+0x7c>)
 8000ea2:	700b      	strb	r3, [r1, #0]
		interface_mode=1;
 8000ea4:	4909      	ldr	r1, [pc, #36]	@ (8000ecc <int_mode_0+0x80>)
 8000ea6:	700b      	strb	r3, [r1, #0]
		choice=0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	7013      	strb	r3, [r2, #0]
}
 8000eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode1();
 8000eb0:	f7ff bef2 	b.w	8000c98 <print_interface_mode1>
}
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	20000252 	.word	0x20000252
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	2000023b 	.word	0x2000023b
 8000ec8:	2000023c 	.word	0x2000023c
 8000ecc:	2000023a 	.word	0x2000023a

08000ed0 <min_freq>:
	num_string[choiced_channel][0]='8';
 8000ed0:	2038      	movs	r0, #56	@ 0x38
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <min_freq+0x18>)
 8000ed4:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <min_freq+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000edc:	18d1      	adds	r1, r2, r3
 8000ede:	54d0      	strb	r0, [r2, r3]
	num_string[choiced_channel][1]='\0';
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	704b      	strb	r3, [r1, #1]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000023b 	.word	0x2000023b
 8000eec:	2000023d 	.word	0x2000023d

08000ef0 <max_freq>:
	num_string[choiced_channel][0]='1';
 8000ef0:	2031      	movs	r0, #49	@ 0x31
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <max_freq+0x24>)
 8000ef4:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <max_freq+0x28>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000efc:	188b      	adds	r3, r1, r2
 8000efe:	5488      	strb	r0, [r1, r2]
	num_string[choiced_channel][1]='6';
 8000f00:	2236      	movs	r2, #54	@ 0x36
 8000f02:	705a      	strb	r2, [r3, #1]
	num_string[choiced_channel][2]='0';
 8000f04:	2230      	movs	r2, #48	@ 0x30
 8000f06:	709a      	strb	r2, [r3, #2]
	num_string[choiced_channel][3]='0';
 8000f08:	70da      	strb	r2, [r3, #3]
	num_string[choiced_channel][4]='0';
 8000f0a:	711a      	strb	r2, [r3, #4]
	num_string[choiced_channel][5]='0';
 8000f0c:	715a      	strb	r2, [r3, #5]
	num_string[choiced_channel][6]='\0';
 8000f0e:	2200      	movs	r2, #0
 8000f10:	719a      	strb	r2, [r3, #6]
}
 8000f12:	4770      	bx	lr
 8000f14:	2000023b 	.word	0x2000023b
 8000f18:	2000023d 	.word	0x2000023d

08000f1c <int_mode_1>:
void int_mode_1(){
 8000f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000f20:	2101      	movs	r1, #1
void int_mode_1(){
 8000f22:	b087      	sub	sp, #28
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000f24:	485f      	ldr	r0, [pc, #380]	@ (80010a4 <int_mode_1+0x188>)
 8000f26:	f001 f9ff 	bl	8002328 <HAL_GPIO_ReadPin>
 8000f2a:	b978      	cbnz	r0, 8000f4c <int_mode_1+0x30>
		if(choice==0){
 8000f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80010a8 <int_mode_1+0x18c>)
			if(choiced_num!=0){
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80010ac <int_mode_1+0x190>)
		if(choice==0){
 8000f30:	7811      	ldrb	r1, [r2, #0]
			if(choiced_num!=0){
 8000f32:	781b      	ldrb	r3, [r3, #0]
		if(choice==0){
 8000f34:	bb39      	cbnz	r1, 8000f86 <int_mode_1+0x6a>
			choice=1;
 8000f36:	2101      	movs	r1, #1
 8000f38:	7011      	strb	r1, [r2, #0]
			if(choiced_num!=0){
 8000f3a:	b13b      	cbz	r3, 8000f4c <int_mode_1+0x30>
				prev_encoder=1000;
 8000f3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f40:	4b5b      	ldr	r3, [pc, #364]	@ (80010b0 <int_mode_1+0x194>)
 8000f42:	601a      	str	r2, [r3, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8000f44:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f48:	4b5a      	ldr	r3, [pc, #360]	@ (80010b4 <int_mode_1+0x198>)
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8000f4c:	4c55      	ldr	r4, [pc, #340]	@ (80010a4 <int_mode_1+0x188>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4620      	mov	r0, r4
 8000f52:	f001 f9e9 	bl	8002328 <HAL_GPIO_ReadPin>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d0f9      	beq.n	8000f4e <int_mode_1+0x32>
	if(choice==0){
 8000f5a:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <int_mode_1+0x18c>)
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	b9ba      	cbnz	r2, 8000f90 <int_mode_1+0x74>
		choiced_num=get_encoder()%7;
 8000f60:	2207      	movs	r2, #7
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000f62:	4b54      	ldr	r3, [pc, #336]	@ (80010b4 <int_mode_1+0x198>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bfb8      	it	lt
 8000f6a:	3303      	addlt	r3, #3
 8000f6c:	109b      	asrs	r3, r3, #2
		choiced_num=get_encoder()%7;
 8000f6e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f72:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <int_mode_1+0x190>)
 8000f7a:	7013      	strb	r3, [r2, #0]
}
 8000f7c:	b007      	add	sp, #28
 8000f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode1();
 8000f82:	f7ff be89 	b.w	8000c98 <print_interface_mode1>
			choice=0;
 8000f86:	7010      	strb	r0, [r2, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8000f88:	4a4a      	ldr	r2, [pc, #296]	@ (80010b4 <int_mode_1+0x198>)
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000f8e:	e7dd      	b.n	8000f4c <int_mode_1+0x30>
	}else if(choice==1){
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	f040 8084 	bne.w	800109e <int_mode_1+0x182>
		if(choiced_num==0){
 8000f96:	4a45      	ldr	r2, [pc, #276]	@ (80010ac <int_mode_1+0x190>)
 8000f98:	4e47      	ldr	r6, [pc, #284]	@ (80010b8 <int_mode_1+0x19c>)
 8000f9a:	7814      	ldrb	r4, [r2, #0]
 8000f9c:	b974      	cbnz	r4, 8000fbc <int_mode_1+0xa0>
			choice=0;
 8000f9e:	701c      	strb	r4, [r3, #0]
			interface_mode=0;
 8000fa0:	4b46      	ldr	r3, [pc, #280]	@ (80010bc <int_mode_1+0x1a0>)
			Write_Flash_Array(freq);//обновляем значение в памяти
 8000fa2:	4847      	ldr	r0, [pc, #284]	@ (80010c0 <int_mode_1+0x1a4>)
			interface_mode=0;
 8000fa4:	701c      	strb	r4, [r3, #0]
			Write_Flash_Array(freq);//обновляем значение в памяти
 8000fa6:	f7ff fdeb 	bl	8000b80 <Write_Flash_Array>
			set_encoder(choiced_channel);
 8000faa:	7833      	ldrb	r3, [r6, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8000fac:	4a41      	ldr	r2, [pc, #260]	@ (80010b4 <int_mode_1+0x198>)
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000fb2:	b007      	add	sp, #28
 8000fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode0();
 8000fb8:	f7ff be16 	b.w	8000be8 <print_interface_mode0>
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <int_mode_1+0x198>)
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8000fbe:	4f3c      	ldr	r7, [pc, #240]	@ (80010b0 <int_mode_1+0x194>)
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8000fc2:	6838      	ldr	r0, [r7, #0]
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bfb8      	it	lt
 8000fc8:	3303      	addlt	r3, #3
 8000fca:	109a      	asrs	r2, r3, #2
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8000fcc:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000fd0:	9201      	str	r2, [sp, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8000fd2:	f7ff fa17 	bl	8000404 <__aeabi_i2d>
 8000fd6:	4680      	mov	r8, r0
 8000fd8:	1e60      	subs	r0, r4, #1
 8000fda:	4689      	mov	r9, r1
 8000fdc:	f7ff fa12 	bl	8000404 <__aeabi_i2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4682      	mov	sl, r0
 8000fe6:	468b      	mov	fp, r1
 8000fe8:	2000      	movs	r0, #0
 8000fea:	4936      	ldr	r1, [pc, #216]	@ (80010c4 <int_mode_1+0x1a8>)
 8000fec:	f007 fad6 	bl	800859c <pow>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	7835      	ldrb	r5, [r6, #0]
 8000ff6:	4c32      	ldr	r4, [pc, #200]	@ (80010c0 <int_mode_1+0x1a4>)
 8000ff8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ffc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001000:	f7ff fa00 	bl	8000404 <__aeabi_i2d>
 8001004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800100c:	4640      	mov	r0, r8
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff fa62 	bl	80004d8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800101c:	f7ff f8a6 	bl	800016c <__adddf3>
 8001020:	f7ff fd0a 	bl	8000a38 <__aeabi_d2iz>
			if(freq[choiced_channel]<0){
 8001024:	2800      	cmp	r0, #0
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 8001026:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
			if(freq[choiced_channel]<0){
 800102a:	da1a      	bge.n	8001062 <int_mode_1+0x146>
				freq[choiced_channel]=160000+freq[choiced_channel];//если частота очень мала делаем её почти максимальной
 800102c:	f500 301c 	add.w	r0, r0, #159744	@ 0x27000
 8001030:	f500 7080 	add.w	r0, r0, #256	@ 0x100
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001034:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
			if(freq[choiced_channel]<8){
 8001038:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
			prev_encoder=delta;
 800103c:	9b01      	ldr	r3, [sp, #4]
			if(freq[choiced_channel]<8){
 800103e:	2a07      	cmp	r2, #7
			prev_encoder=delta;
 8001040:	603b      	str	r3, [r7, #0]
			if(freq[choiced_channel]<8){
 8001042:	dc24      	bgt.n	800108e <int_mode_1+0x172>
				freq[choiced_channel]=8;
 8001044:	2308      	movs	r3, #8
 8001046:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				min_freq();
 800104a:	f7ff ff41 	bl	8000ed0 <min_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);//обновляем строку с выбранной частотой
 800104e:	7833      	ldrb	r3, [r6, #0]
 8001050:	491d      	ldr	r1, [pc, #116]	@ (80010c8 <int_mode_1+0x1ac>)
 8001052:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001056:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800105a:	4411      	add	r1, r2
 800105c:	f7ff fd4f 	bl	8000afe <int_to_str>
 8001060:	e78c      	b.n	8000f7c <int_mode_1+0x60>
			}else if(freq[choiced_channel]>999999){
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <int_mode_1+0x1b0>)
 8001064:	4298      	cmp	r0, r3
 8001066:	dde7      	ble.n	8001038 <int_mode_1+0x11c>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001068:	4652      	mov	r2, sl
 800106a:	465b      	mov	r3, fp
 800106c:	2000      	movs	r0, #0
 800106e:	4915      	ldr	r1, [pc, #84]	@ (80010c4 <int_mode_1+0x1a8>)
 8001070:	f007 fa94 	bl	800859c <pow>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4640      	mov	r0, r8
 800107a:	4649      	mov	r1, r9
 800107c:	f7ff fa2c 	bl	80004d8 <__aeabi_dmul>
 8001080:	2200      	movs	r2, #0
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <int_mode_1+0x1b4>)
 8001084:	f7ff f872 	bl	800016c <__adddf3>
 8001088:	f7ff fcd6 	bl	8000a38 <__aeabi_d2iz>
 800108c:	e7d2      	b.n	8001034 <int_mode_1+0x118>
			}else if(freq[choiced_channel]>160000){
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <int_mode_1+0x1b8>)
 8001090:	429a      	cmp	r2, r3
 8001092:	dddc      	ble.n	800104e <int_mode_1+0x132>
				freq[choiced_channel]=160000;
 8001094:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
				max_freq();
 8001098:	f7ff ff2a 	bl	8000ef0 <max_freq>
 800109c:	e7d7      	b.n	800104e <int_mode_1+0x132>
}
 800109e:	b007      	add	sp, #28
 80010a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a4:	40010800 	.word	0x40010800
 80010a8:	20000252 	.word	0x20000252
 80010ac:	2000023c 	.word	0x2000023c
 80010b0:	20000254 	.word	0x20000254
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	2000023b 	.word	0x2000023b
 80010bc:	2000023a 	.word	0x2000023a
 80010c0:	20000258 	.word	0x20000258
 80010c4:	40240000 	.word	0x40240000
 80010c8:	2000023d 	.word	0x2000023d
 80010cc:	000f423f 	.word	0x000f423f
 80010d0:	401c0000 	.word	0x401c0000
 80010d4:	00027100 	.word	0x00027100

080010d8 <str_to_int>:
    while(str[i] >= '0' && str[i] <= '9'){
 80010d8:	2200      	movs	r2, #0
uint32_t str_to_int(char* str){
 80010da:	4601      	mov	r1, r0
 80010dc:	b530      	push	{r4, r5, lr}
    uint32_t ans = 0;
 80010de:	4610      	mov	r0, r2
        ans = ans * 10 + (str[i] - '0');
 80010e0:	250a      	movs	r5, #10
    while(str[i] >= '0' && str[i] <= '9'){
 80010e2:	b2d3      	uxtb	r3, r2
 80010e4:	5ccb      	ldrb	r3, [r1, r3]
 80010e6:	3201      	adds	r2, #1
 80010e8:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
 80010ec:	2c09      	cmp	r4, #9
 80010ee:	d900      	bls.n	80010f2 <str_to_int+0x1a>
}
 80010f0:	bd30      	pop	{r4, r5, pc}
        ans = ans * 10 + (str[i] - '0');
 80010f2:	fb05 3300 	mla	r3, r5, r0, r3
 80010f6:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
        i++;
 80010fa:	e7f2      	b.n	80010e2 <str_to_int+0xa>

080010fc <process_client_connection>:
uint8_t stat;
uint8_t reqnr;
char Message[128];
// Функция обработки клиентского подключения
void process_client_connection(uint8_t sn)
{
 80010fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001100:	4604      	mov	r4, r0
    uint8_t received_data[1024];



    // Главный цикл обработки соединения
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001102:	0145      	lsls	r5, r0, #5
            if(received_len > 0)
            {
                received_data[received_len] = '\0';
                uint32_t r=str_to_int((char*)received_data);
                if(r>7 && r<=160000){
                	freq[choiced_channel]=r;
 8001104:	4e29      	ldr	r6, [pc, #164]	@ (80011ac <process_client_connection+0xb0>)
                if(r>7 && r<=160000){
 8001106:	4f2a      	ldr	r7, [pc, #168]	@ (80011b0 <process_client_connection+0xb4>)
                }
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
                print_interface_mode0();
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001108:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 80011b4 <process_client_connection+0xb8>
{
 800110c:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001110:	f505 7542 	add.w	r5, r5, #776	@ 0x308
 8001114:	4628      	mov	r0, r5
 8001116:	f004 ff85 	bl	8006024 <WIZCHIP_READ>
 800111a:	2817      	cmp	r0, #23
 800111c:	d138      	bne.n	8001190 <process_client_connection+0x94>
        uint16_t available = getSn_RX_RSR(sn);
 800111e:	4620      	mov	r0, r4
 8001120:	f005 f875 	bl	800620e <getSn_RX_RSR>
        if(available > 0)
 8001124:	b3c0      	cbz	r0, 8001198 <process_client_connection+0x9c>
            received_len = recv(sn, received_data, sizeof(received_data)-1);
 8001126:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800112a:	4669      	mov	r1, sp
 800112c:	4620      	mov	r0, r4
 800112e:	f005 faf7 	bl	8006720 <recv>
            if(received_len > 0)
 8001132:	2800      	cmp	r0, #0
 8001134:	dd30      	ble.n	8001198 <process_client_connection+0x9c>
                received_data[received_len] = '\0';
 8001136:	2300      	movs	r3, #0
 8001138:	f80d 3000 	strb.w	r3, [sp, r0]
                uint32_t r=str_to_int((char*)received_data);
 800113c:	4668      	mov	r0, sp
 800113e:	f7ff ffcb 	bl	80010d8 <str_to_int>
                if(r>7 && r<=160000){
 8001142:	f1a0 0208 	sub.w	r2, r0, #8
                	freq[choiced_channel]=r;
 8001146:	7833      	ldrb	r3, [r6, #0]
                if(r>7 && r<=160000){
 8001148:	42ba      	cmp	r2, r7
 800114a:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <process_client_connection+0xbc>)
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 800114c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
                	freq[choiced_channel]=r;
 8001150:	bf98      	it	ls
 8001152:	f842 0023 	strls.w	r0, [r2, r3, lsl #2]
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 8001156:	4819      	ldr	r0, [pc, #100]	@ (80011bc <process_client_connection+0xc0>)
 8001158:	4401      	add	r1, r0
 800115a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800115e:	f7ff fcce 	bl	8000afe <int_to_str>
                print_interface_mode0();
 8001162:	f7ff fd41 	bl	8000be8 <print_interface_mode0>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116c:	4640      	mov	r0, r8
 800116e:	f001 f8e1 	bl	8002334 <HAL_GPIO_WritePin>
                send(sn, (uint8_t*)"OK\r\n", 4);
 8001172:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <process_client_connection+0xc4>)
 8001174:	2204      	movs	r2, #4
 8001176:	4620      	mov	r0, r4
 8001178:	f005 fa1c 	bl	80065b4 <send>
                if(strstr((char*)received_data, "EXIT") != NULL)
 800117c:	4668      	mov	r0, sp
 800117e:	4911      	ldr	r1, [pc, #68]	@ (80011c4 <process_client_connection+0xc8>)
 8001180:	f006 fe1e 	bl	8007dc0 <strstr>
 8001184:	b140      	cbz	r0, 8001198 <process_client_connection+0x9c>
                {
                    send(sn, (uint8_t*)"Goodbye!\r\n", 10);
 8001186:	220a      	movs	r2, #10
 8001188:	4620      	mov	r0, r4
 800118a:	490f      	ldr	r1, [pc, #60]	@ (80011c8 <process_client_connection+0xcc>)
 800118c:	f005 fa12 	bl	80065b4 <send>

  	  while(t>HAL_GetTick()-10);
        //HAL_Delay(10); // Небольшая задержка
    }

}
 8001190:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8001194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  	  uint32_t t=HAL_GetTick();
 8001198:	f000 fe06 	bl	8001da8 <HAL_GetTick>
 800119c:	4681      	mov	r9, r0
  	  while(t>HAL_GetTick()-10);
 800119e:	f000 fe03 	bl	8001da8 <HAL_GetTick>
 80011a2:	380a      	subs	r0, #10
 80011a4:	4548      	cmp	r0, r9
 80011a6:	d3fa      	bcc.n	800119e <process_client_connection+0xa2>
 80011a8:	e7b4      	b.n	8001114 <process_client_connection+0x18>
 80011aa:	bf00      	nop
 80011ac:	2000023b 	.word	0x2000023b
 80011b0:	000270f8 	.word	0x000270f8
 80011b4:	40011000 	.word	0x40011000
 80011b8:	20000258 	.word	0x20000258
 80011bc:	2000023d 	.word	0x2000023d
 80011c0:	080093e7 	.word	0x080093e7
 80011c4:	080093ec 	.word	0x080093ec
 80011c8:	080093f1 	.word	0x080093f1

080011cc <init_server>:
// Функция инициализации сервера
uint8_t init_server(uint8_t sn, uint16_t port)
{
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4604      	mov	r4, r0
    // Закрываем сокет если был открыт
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80011d0:	0140      	lsls	r0, r0, #5
 80011d2:	f500 7042 	add.w	r0, r0, #776	@ 0x308
{
 80011d6:	460d      	mov	r5, r1
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80011d8:	f004 ff24 	bl	8006024 <WIZCHIP_READ>
 80011dc:	b110      	cbz	r0, 80011e4 <init_server+0x18>
        close(sn);
 80011de:	4620      	mov	r0, r4
 80011e0:	f005 f890 	bl	8006304 <close>
        //HAL_Delay(100);
    }

    // Создаем сокет
    if((stat = socket(sn, Sn_MR_TCP, port, 0)) != sn) {
 80011e4:	462a      	mov	r2, r5
 80011e6:	2300      	movs	r3, #0
 80011e8:	2101      	movs	r1, #1
 80011ea:	4620      	mov	r0, r4
 80011ec:	f005 f8c8 	bl	8006380 <socket>
 80011f0:	4d08      	ldr	r5, [pc, #32]	@ (8001214 <init_server+0x48>)
 80011f2:	b2c0      	uxtb	r0, r0
 80011f4:	42a0      	cmp	r0, r4
 80011f6:	7028      	strb	r0, [r5, #0]
 80011f8:	d109      	bne.n	800120e <init_server+0x42>

        return 0;
    }

    // Слушаем порт
    if((stat = listen(sn)) != SOCK_OK) {
 80011fa:	4620      	mov	r0, r4
 80011fc:	f005 f95c 	bl	80064b8 <listen>
 8001200:	b2c0      	uxtb	r0, r0
 8001202:	2801      	cmp	r0, #1
 8001204:	7028      	strb	r0, [r5, #0]
 8001206:	d003      	beq.n	8001210 <init_server+0x44>

        close(sn);
 8001208:	4620      	mov	r0, r4
 800120a:	f005 f87b 	bl	8006304 <close>
        return 0;
 800120e:	2000      	movs	r0, #0
        return 0;
    }

    return 1;
}
 8001210:	bd38      	pop	{r3, r4, r5, pc}
 8001212:	bf00      	nop
 8001214:	20000238 	.word	0x20000238

08001218 <ethernet_work>:
void ethernet_work(){
 8001218:	b510      	push	{r4, lr}
	// Мигание светодиодом в режиме ожидания
	          static uint32_t led_timer = 0;
	          if(HAL_GetTick() - led_timer > 500) {
 800121a:	f000 fdc5 	bl	8001da8 <HAL_GetTick>
 800121e:	4c1f      	ldr	r4, [pc, #124]	@ (800129c <ethernet_work+0x84>)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	1ac0      	subs	r0, r0, r3
 8001224:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001228:	d907      	bls.n	800123a <ethernet_work+0x22>
	              HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800122a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800122e:	481c      	ldr	r0, [pc, #112]	@ (80012a0 <ethernet_work+0x88>)
 8001230:	f001 f885 	bl	800233e <HAL_GPIO_TogglePin>
	              led_timer = HAL_GetTick();
 8001234:	f000 fdb8 	bl	8001da8 <HAL_GetTick>
 8001238:	6020      	str	r0, [r4, #0]
	          }

	          // Проверяем статус сокета
	          socket_status = getSn_SR(HTTP_SOCKET);
 800123a:	f44f 7042 	mov.w	r0, #776	@ 0x308
 800123e:	f004 fef1 	bl	8006024 <WIZCHIP_READ>
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <ethernet_work+0x8c>)

	          switch(socket_status)
 8001244:	2814      	cmp	r0, #20
	          socket_status = getSn_SR(HTTP_SOCKET);
 8001246:	7018      	strb	r0, [r3, #0]
	          switch(socket_status)
 8001248:	d006      	beq.n	8001258 <ethernet_work+0x40>
 800124a:	2817      	cmp	r0, #23
 800124c:	d00d      	beq.n	800126a <ethernet_work+0x52>
 800124e:	b1c8      	cbz	r0, 8001284 <ethernet_work+0x6c>
	                  break;

	              default:
	                  // Неизвестный статус - перезапускаем

	                  close(HTTP_SOCKET);
 8001250:	2000      	movs	r0, #0
 8001252:	f005 f857 	bl	8006304 <close>
 8001256:	e01b      	b.n	8001290 <ethernet_work+0x78>
	            	  uint32_t t=HAL_GetTick();
 8001258:	f000 fda6 	bl	8001da8 <HAL_GetTick>
 800125c:	4604      	mov	r4, r0
	            	  while(t>HAL_GetTick()-100);
 800125e:	f000 fda3 	bl	8001da8 <HAL_GetTick>
 8001262:	3864      	subs	r0, #100	@ 0x64
 8001264:	42a0      	cmp	r0, r4
 8001266:	d3fa      	bcc.n	800125e <ethernet_work+0x46>
	                  //HAL_Delay(1000);
	                  break;
	          }

	          //HAL_Delay(10);
}
 8001268:	bd10      	pop	{r4, pc}
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001270:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <ethernet_work+0x88>)
 8001272:	f001 f85f 	bl	8002334 <HAL_GPIO_WritePin>
	                  process_client_connection(HTTP_SOCKET);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ff40 	bl	80010fc <process_client_connection>
	                  disconnect(HTTP_SOCKET);
 800127c:	2000      	movs	r0, #0
 800127e:	f005 f951 	bl	8006524 <disconnect>
	                  close(HTTP_SOCKET);
 8001282:	e7e5      	b.n	8001250 <ethernet_work+0x38>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <ethernet_work+0x88>)
 800128c:	f001 f852 	bl	8002334 <HAL_GPIO_WritePin>
}
 8001290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	                  init_server(HTTP_SOCKET, 80);
 8001294:	2150      	movs	r1, #80	@ 0x50
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff bf98 	b.w	80011cc <init_server>
 800129c:	20000234 	.word	0x20000234
 80012a0:	40011000 	.word	0x40011000
 80012a4:	20000239 	.word	0x20000239

080012a8 <HAL_TIM_PeriodElapsedCallback>:
//функция для работы программы во время прерываний
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ae:	d10c      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	//uint8_t socket_status = getSn_SR(HTTP_SOCKET);
    	if(interface_mode==0 && socket_status!=SOCK_ESTABLISHED){
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b92b      	cbnz	r3, 80012c2 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b17      	cmp	r3, #23
 80012bc:	d005      	beq.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x22>
    		//ethernet_work();
    		int_mode_0();
 80012be:	f7ff bdc5 	b.w	8000e4c <int_mode_0>
    	}else if(interface_mode==1){
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x22>
    		int_mode_1();
 80012c6:	f7ff be29 	b.w	8000f1c <int_mode_1>
    	}
    }
}
 80012ca:	4770      	bx	lr
 80012cc:	2000023a 	.word	0x2000023a
 80012d0:	20000239 	.word	0x20000239

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b530      	push	{r4, r5, lr}
 80012d6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d8:	2214      	movs	r2, #20
 80012da:	2100      	movs	r1, #0
 80012dc:	a80c      	add	r0, sp, #48	@ 0x30
 80012de:	f006 fd55 	bl	8007d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e6:	2100      	movs	r1, #0
 80012e8:	eb0d 0002 	add.w	r0, sp, r2
 80012ec:	f006 fd4e 	bl	8007d8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	462a      	mov	r2, r5
 80012f2:	2100      	movs	r1, #0
 80012f4:	a801      	add	r0, sp, #4
 80012f6:	f006 fd49 	bl	8007d8c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001300:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001306:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800130a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001312:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f002 ffa4 	bl	8004260 <HAL_RCC_OscConfig>
 8001318:	b108      	cbz	r0, 800131e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001320:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	4621      	mov	r1, r4
 8001330:	a805      	add	r0, sp, #20
 8001332:	f003 f957 	bl	80045e4 <HAL_RCC_ClockConfig>
 8001336:	b108      	cbz	r0, 800133c <SystemClock_Config+0x68>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800133c:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001340:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	f003 f9fb 	bl	800473c <HAL_RCCEx_PeriphCLKConfig>
 8001346:	b108      	cbz	r0, 800134c <SystemClock_Config+0x78>
 8001348:	b672      	cpsid	i
  while (1)
 800134a:	e7fe      	b.n	800134a <SystemClock_Config+0x76>
}
 800134c:	b015      	add	sp, #84	@ 0x54
 800134e:	bd30      	pop	{r4, r5, pc}

08001350 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2510      	movs	r5, #16
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 8001356:	f000 fd09 	bl	8001d6c <HAL_Init>
  SystemClock_Config();
 800135a:	f7ff ffbb 	bl	80012d4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	462a      	mov	r2, r5
 8001360:	2100      	movs	r1, #0
 8001362:	a807      	add	r0, sp, #28
 8001364:	f006 fd12 	bl	8007d8c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	4ba0      	ldr	r3, [pc, #640]	@ (80015ec <main+0x29c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800136a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001370:	489f      	ldr	r0, [pc, #636]	@ (80015f0 <main+0x2a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	432a      	orrs	r2, r5
 8001374:	619a      	str	r2, [r3, #24]
 8001376:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	402a      	ands	r2, r5
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001390:	f002 0220 	and.w	r2, r2, #32
 8001394:	9202      	str	r2, [sp, #8]
 8001396:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 800139a:	f8df 8258 	ldr.w	r8, [pc, #600]	@ 80015f4 <main+0x2a4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	f002 0204 	and.w	r2, r2, #4
 80013aa:	9203      	str	r2, [sp, #12]
 80013ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	f042 0208 	orr.w	r2, r2, #8
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	9304      	str	r3, [sp, #16]
 80013c0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013c2:	f000 ffb7 	bl	8002334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	4629      	mov	r1, r5
 80013ca:	488b      	ldr	r0, [pc, #556]	@ (80015f8 <main+0x2a8>)
 80013cc:	f000 ffb2 	bl	8002334 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	4886      	ldr	r0, [pc, #536]	@ (80015f0 <main+0x2a0>)
 80013d6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	e9cd 3907 	strd	r3, r9, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f000 fece 	bl	8002180 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	4884      	ldr	r0, [pc, #528]	@ (80015f8 <main+0x2a8>)
 80013e6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	e9cd 9407 	strd	r9, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f000 fec7 	bl	8002180 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f6:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80013fa:	487f      	ldr	r0, [pc, #508]	@ (80015f8 <main+0x2a8>)
 80013fc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	e9cd 5907 	strd	r5, r9, [sp, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001402:	f000 febd 	bl	8002180 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001406:	487d      	ldr	r0, [pc, #500]	@ (80015fc <main+0x2ac>)
  hi2c1.Init.ClockSpeed = 100000;
 8001408:	4b7d      	ldr	r3, [pc, #500]	@ (8001600 <main+0x2b0>)
  hi2c1.Init.OwnAddress1 = 0;
 800140a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140e:	e9c0 6404 	strd	r6, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001412:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8001418:	e9c0 3800 	strd	r3, r8, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141c:	f001 f8e2 	bl	80025e4 <HAL_I2C_Init>
 8001420:	4604      	mov	r4, r0
 8001422:	b108      	cbz	r0, 8001428 <main+0xd8>
 8001424:	b672      	cpsid	i
  while (1)
 8001426:	e7fe      	b.n	8001426 <main+0xd6>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001428:	2220      	movs	r2, #32
 800142a:	4601      	mov	r1, r0
 800142c:	eb0d 0002 	add.w	r0, sp, r2
 8001430:	f006 fcac 	bl	8007d8c <memset>
  htim1.Init.Period = 7000;
 8001434:	f641 3358 	movw	r3, #7000	@ 0x1b58
  htim1.Instance = TIM1;
 8001438:	4d72      	ldr	r5, [pc, #456]	@ (8001604 <main+0x2b4>)
 800143a:	4f73      	ldr	r7, [pc, #460]	@ (8001608 <main+0x2b8>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001440:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001442:	4628      	mov	r0, r5
 8001444:	a907      	add	r1, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim1.Init.Prescaler = 0;
 800144a:	e9c5 7400 	strd	r7, r4, [r5]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	60ac      	str	r4, [r5, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001454:	9307      	str	r3, [sp, #28]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001456:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145a:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800145e:	f003 ff9d 	bl	800539c <HAL_TIM_Encoder_Init>
 8001462:	b108      	cbz	r0, 8001468 <main+0x118>
 8001464:	b672      	cpsid	i
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0x116>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146c:	a905      	add	r1, sp, #20
 800146e:	4628      	mov	r0, r5
 8001470:	f004 f86c 	bl	800554c <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	b108      	cbz	r0, 800147c <main+0x12c>
 8001478:	b672      	cpsid	i
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x12a>
  hi2c2.Instance = I2C2;
 800147c:	4863      	ldr	r0, [pc, #396]	@ (800160c <main+0x2bc>)
 800147e:	4a64      	ldr	r2, [pc, #400]	@ (8001610 <main+0x2c0>)
  hi2c2.Init.OwnAddress1 = 0;
 8001480:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8001484:	e9c0 2800 	strd	r2, r8, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001488:	e9c0 6304 	strd	r6, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001492:	f001 f8a7 	bl	80025e4 <HAL_I2C_Init>
 8001496:	4604      	mov	r4, r0
 8001498:	b108      	cbz	r0, 800149e <main+0x14e>
 800149a:	b672      	cpsid	i
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0x14c>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	221c      	movs	r2, #28
 80014a0:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	eb0d 0002 	add.w	r0, sp, r2
 80014aa:	f006 fc6f 	bl	8007d8c <memset>
  htim2.Init.Prescaler = 7199;
 80014ae:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 80014b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 80014b6:	4e57      	ldr	r6, [pc, #348]	@ (8001614 <main+0x2c4>)
  htim2.Init.Prescaler = 7199;
 80014b8:	e9c6 1300 	strd	r1, r3, [r6]
  htim2.Init.Period = 999;
 80014bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c0:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ca:	f003 ff3b 	bl	8005344 <HAL_TIM_PWM_Init>
 80014ce:	b108      	cbz	r0, 80014d4 <main+0x184>
 80014d0:	b672      	cpsid	i
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <main+0x182>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d8:	a905      	add	r1, sp, #20
 80014da:	4630      	mov	r0, r6
 80014dc:	f004 f836 	bl	800554c <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4602      	mov	r2, r0
 80014e2:	b108      	cbz	r0, 80014e8 <main+0x198>
 80014e4:	b672      	cpsid	i
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <main+0x196>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80014ec:	e9cd 3007 	strd	r3, r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	a907      	add	r1, sp, #28
 80014f4:	4630      	mov	r0, r6
 80014f6:	f003 ffd1 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4604      	mov	r4, r0
 80014fc:	b108      	cbz	r0, 8001502 <main+0x1b2>
 80014fe:	b672      	cpsid	i
  while (1)
 8001500:	e7fe      	b.n	8001500 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim2);
 8001502:	4630      	mov	r0, r6
 8001504:	f000 f9f8 	bl	80018f8 <HAL_TIM_MspPostInit>
  MX_USB_DEVICE_Init();
 8001508:	f006 f824 	bl	8007554 <MX_USB_DEVICE_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800150c:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001510:	4841      	ldr	r0, [pc, #260]	@ (8001618 <main+0x2c8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001512:	4a42      	ldr	r2, [pc, #264]	@ (800161c <main+0x2cc>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001514:	2608      	movs	r6, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001516:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800151a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800151e:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001522:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001528:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001530:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001532:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001534:	f003 fa1e 	bl	8004974 <HAL_SPI_Init>
 8001538:	4604      	mov	r4, r0
 800153a:	b108      	cbz	r0, 8001540 <main+0x1f0>
 800153c:	b672      	cpsid	i
  while (1)
 800153e:	e7fe      	b.n	800153e <main+0x1ee>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001540:	213c      	movs	r1, #60	@ 0x3c
 8001542:	4628      	mov	r0, r5
 8001544:	f003 fdda 	bl	80050fc <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001548:	f000 fb88 	bl	8001c5c <ssd1306_Init>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 800154c:	627c      	str	r4, [r7, #36]	@ 0x24
      freq[0]=8;//начальная минимальная частота канала 0
 800154e:	4c34      	ldr	r4, [pc, #208]	@ (8001620 <main+0x2d0>)
      freq[1]=8;//начальная минимальная частота канала 1
 8001550:	e9c4 6600 	strd	r6, r6, [r4]
      freq[2]=8;//начальная минимальная частота канала 2
 8001554:	60a6      	str	r6, [r4, #8]
      if (Is_Flash_Valid()==0) {
 8001556:	f7ff faf5 	bl	8000b44 <Is_Flash_Valid>
 800155a:	2800      	cmp	r0, #0
 800155c:	d13e      	bne.n	80015dc <main+0x28c>
          Write_Flash_Array(freq);
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff fb0e 	bl	8000b80 <Write_Flash_Array>
      choice=0;//переменная для считывания был ли нажат энкодер
 8001564:	2500      	movs	r5, #0
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <main+0x2d4>)
      int_to_str(freq[2],num_string[2]);
 8001568:	492f      	ldr	r1, [pc, #188]	@ (8001628 <main+0x2d8>)
 800156a:	68a0      	ldr	r0, [r4, #8]
      choice=0;//переменная для считывания был ли нажат энкодер
 800156c:	701d      	strb	r5, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 800156e:	f7ff fac6 	bl	8000afe <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001572:	6860      	ldr	r0, [r4, #4]
 8001574:	3907      	subs	r1, #7
 8001576:	f7ff fac2 	bl	8000afe <int_to_str>
      int_to_str(freq[0],num_string[0]);
 800157a:	6820      	ldr	r0, [r4, #0]
 800157c:	3907      	subs	r1, #7
 800157e:	f7ff fabe 	bl	8000afe <int_to_str>
      prev_encoder=8;
 8001582:	2208      	movs	r2, #8
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001584:	4b29      	ldr	r3, [pc, #164]	@ (800162c <main+0x2dc>)
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001586:	4c2a      	ldr	r4, [pc, #168]	@ (8001630 <main+0x2e0>)
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001588:	701d      	strb	r5, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <main+0x2e4>)
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 800158c:	7025      	strb	r5, [r4, #0]
      choiced_channel=0;// номер выбранного канала
 800158e:	701d      	strb	r5, [r3, #0]
      prev_encoder=8;
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <main+0x2e8>)
 8001592:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 8001594:	f7ff fb28 	bl	8000be8 <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001598:	481e      	ldr	r0, [pc, #120]	@ (8001614 <main+0x2c4>)
 800159a:	f003 fd85 	bl	80050a8 <HAL_TIM_Base_Start_IT>
            reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800159e:	4927      	ldr	r1, [pc, #156]	@ (800163c <main+0x2ec>)
 80015a0:	4827      	ldr	r0, [pc, #156]	@ (8001640 <main+0x2f0>)
 80015a2:	f005 f955 	bl	8006850 <reg_wizchip_cs_cbfunc>
            reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80015a6:	4927      	ldr	r1, [pc, #156]	@ (8001644 <main+0x2f4>)
 80015a8:	4827      	ldr	r0, [pc, #156]	@ (8001648 <main+0x2f8>)
 80015aa:	f005 f95f 	bl	800686c <reg_wizchip_spi_cbfunc>
            reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80015ae:	4927      	ldr	r1, [pc, #156]	@ (800164c <main+0x2fc>)
 80015b0:	4827      	ldr	r0, [pc, #156]	@ (8001650 <main+0x300>)
 80015b2:	f005 f96d 	bl	8006890 <reg_wizchip_spiburst_cbfunc>
            uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80015b6:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <main+0x304>)
 80015b8:	ab07      	add	r3, sp, #28
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	6851      	ldr	r1, [r2, #4]
 80015be:	c303      	stmia	r3!, {r0, r1}
            wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80015c0:	a907      	add	r1, sp, #28
 80015c2:	4608      	mov	r0, r1
 80015c4:	f005 f9b3 	bl	800692e <wizchip_init>
            wizchip_setnetinfo(&gWIZNETINFO);
 80015c8:	4823      	ldr	r0, [pc, #140]	@ (8001658 <main+0x308>)
 80015ca:	f005 f9f3 	bl	80069b4 <wizchip_setnetinfo>
            ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80015ce:	4628      	mov	r0, r5
 80015d0:	4921      	ldr	r1, [pc, #132]	@ (8001658 <main+0x308>)
 80015d2:	f005 fa89 	bl	8006ae8 <ctlnetwork>
	  if(interface_mode==0){
 80015d6:	7823      	ldrb	r3, [r4, #0]
 80015d8:	b123      	cbz	r3, 80015e4 <main+0x294>
 80015da:	e7fe      	b.n	80015da <main+0x28a>
    	  Read_Flash_Array(freq);
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fabd 	bl	8000b5c <Read_Flash_Array>
 80015e2:	e7bf      	b.n	8001564 <main+0x214>
		  ethernet_work();
 80015e4:	f7ff fe18 	bl	8001218 <ethernet_work>
 80015e8:	e7f5      	b.n	80015d6 <main+0x286>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40011000 	.word	0x40011000
 80015f4:	000186a0 	.word	0x000186a0
 80015f8:	40010800 	.word	0x40010800
 80015fc:	200003a0 	.word	0x200003a0
 8001600:	40005400 	.word	0x40005400
 8001604:	200002ac 	.word	0x200002ac
 8001608:	40012c00 	.word	0x40012c00
 800160c:	2000034c 	.word	0x2000034c
 8001610:	40005800 	.word	0x40005800
 8001614:	20000264 	.word	0x20000264
 8001618:	200002f4 	.word	0x200002f4
 800161c:	40013000 	.word	0x40013000
 8001620:	20000258 	.word	0x20000258
 8001624:	20000252 	.word	0x20000252
 8001628:	2000024b 	.word	0x2000024b
 800162c:	2000023c 	.word	0x2000023c
 8001630:	2000023a 	.word	0x2000023a
 8001634:	2000023b 	.word	0x2000023b
 8001638:	20000254 	.word	0x20000254
 800163c:	08000a99 	.word	0x08000a99
 8001640:	08000a89 	.word	0x08000a89
 8001644:	08000ae9 	.word	0x08000ae9
 8001648:	08000abd 	.word	0x08000abd
 800164c:	08000ad5 	.word	0x08000ad5
 8001650:	08000aa9 	.word	0x08000aa9
 8001654:	080093fc 	.word	0x080093fc
 8001658:	20000000 	.word	0x20000000

0800165c <Error_Handler>:
 800165c:	b672      	cpsid	i
  while (1)
 800165e:	e7fe      	b.n	800165e <Error_Handler+0x2>

08001660 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_MspInit+0x4c>)
{
 8001662:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001664:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001666:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	f002 0201 	and.w	r2, r2, #1
 8001674:	9200      	str	r2, [sp, #0]
 8001676:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800167e:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001684:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800168e:	f000 fbb5 	bl	8001dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001692:	2005      	movs	r0, #5
 8001694:	f000 fbe2 	bl	8001e5c <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001698:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <HAL_MspInit+0x50>)
 800169a:	6853      	ldr	r3, [r2, #4]
 800169c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	b003      	add	sp, #12
 80016a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000

080016b4 <HAL_I2C_MspInit>:
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	2210      	movs	r2, #16
{
 80016b6:	b510      	push	{r4, lr}
 80016b8:	4604      	mov	r4, r0
 80016ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	eb0d 0002 	add.w	r0, sp, r2
 80016c0:	2100      	movs	r1, #0
 80016c2:	f006 fb63 	bl	8007d8c <memset>
  if(hi2c->Instance==I2C1)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_I2C_MspInit+0xd8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12e      	bne.n	800172c <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4c30      	ldr	r4, [pc, #192]	@ (8001790 <HAL_I2C_MspInit+0xdc>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	482f      	ldr	r0, [pc, #188]	@ (8001794 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	61a3      	str	r3, [r4, #24]
 80016dc:	69a3      	ldr	r3, [r4, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e6:	2312      	movs	r3, #18
 80016e8:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ec:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f000 fd45 	bl	8002180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f8:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016fa:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001700:	61e3      	str	r3, [r4, #28]
 8001702:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001704:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800170e:	f000 fb75 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001712:	201f      	movs	r0, #31
 8001714:	f000 fba2 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2020      	movs	r0, #32
 800171c:	4611      	mov	r1, r2
 800171e:	f000 fb6d 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001722:	2020      	movs	r0, #32
    __HAL_RCC_I2C2_CLK_ENABLE();
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001724:	f000 fb9a 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001728:	b008      	add	sp, #32
 800172a:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 800172c:	4a1a      	ldr	r2, [pc, #104]	@ (8001798 <HAL_I2C_MspInit+0xe4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d1fa      	bne.n	8001728 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4c17      	ldr	r4, [pc, #92]	@ (8001790 <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	4816      	ldr	r0, [pc, #88]	@ (8001794 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	61a3      	str	r3, [r4, #24]
 8001742:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174e:	2312      	movs	r3, #18
 8001750:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f000 fd12 	bl	8002180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800175c:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 800175e:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001760:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001762:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001766:	61e3      	str	r3, [r4, #28]
 8001768:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800176a:	2021      	movs	r0, #33	@ 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800176c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001770:	9303      	str	r3, [sp, #12]
 8001772:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001774:	f000 fb42 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001778:	2021      	movs	r0, #33	@ 0x21
 800177a:	f000 fb6f 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2022      	movs	r0, #34	@ 0x22
 8001782:	4611      	mov	r1, r2
 8001784:	f000 fb3a 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001788:	2022      	movs	r0, #34	@ 0x22
 800178a:	e7cb      	b.n	8001724 <HAL_I2C_MspInit+0x70>
 800178c:	40005400 	.word	0x40005400
 8001790:	40021000 	.word	0x40021000
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40005800 	.word	0x40005800

0800179c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b510      	push	{r4, lr}
 800179e:	4604      	mov	r4, r0
 80017a0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	2210      	movs	r2, #16
 80017a4:	2100      	movs	r1, #0
 80017a6:	a802      	add	r0, sp, #8
 80017a8:	f006 faf0 	bl	8007d8c <memset>
  if(hspi->Instance==SPI1)
 80017ac:	6822      	ldr	r2, [r4, #0]
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_SPI_MspInit+0x7c>)
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d12e      	bne.n	8001812 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b4:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 80017b8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	4818      	ldr	r0, [pc, #96]	@ (800181c <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017ca:	9200      	str	r2, [sp, #0]
 80017cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	f042 0204 	orr.w	r2, r2, #4
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f000 fcc7 	bl	8002180 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	4809      	ldr	r0, [pc, #36]	@ (800181c <HAL_SPI_MspInit+0x80>)
 80017f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f000 fcbf 	bl	8002180 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001802:	2023      	movs	r0, #35	@ 0x23
 8001804:	4622      	mov	r2, r4
 8001806:	4621      	mov	r1, r4
 8001808:	f000 faf8 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800180c:	2023      	movs	r0, #35	@ 0x23
 800180e:	f000 fb25 	bl	8001e5c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001812:	b006      	add	sp, #24
 8001814:	bd10      	pop	{r4, pc}
 8001816:	bf00      	nop
 8001818:	40013000 	.word	0x40013000
 800181c:	40010800 	.word	0x40010800

08001820 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001820:	b510      	push	{r4, lr}
 8001822:	4604      	mov	r4, r0
 8001824:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	2210      	movs	r2, #16
 8001828:	2100      	movs	r1, #0
 800182a:	a802      	add	r0, sp, #8
 800182c:	f006 faae 	bl	8007d8c <memset>
  if(htim_encoder->Instance==TIM1)
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x94>)
 8001834:	429a      	cmp	r2, r3
 8001836:	d13a      	bne.n	80018ae <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001838:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800183c:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <HAL_TIM_Encoder_MspInit+0x98>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	f042 0204 	orr.w	r2, r2, #4
 8001858:	619a      	str	r2, [r3, #24]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001864:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001868:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	f000 fc89 	bl	8002180 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2018      	movs	r0, #24
 8001872:	4611      	mov	r1, r2
 8001874:	f000 fac2 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001878:	2018      	movs	r0, #24
 800187a:	f000 faef 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2019      	movs	r0, #25
 8001882:	4611      	mov	r1, r2
 8001884:	f000 faba 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001888:	2019      	movs	r0, #25
 800188a:	f000 fae7 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	201a      	movs	r0, #26
 8001892:	4611      	mov	r1, r2
 8001894:	f000 fab2 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001898:	201a      	movs	r0, #26
 800189a:	f000 fadf 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	201b      	movs	r0, #27
 80018a2:	4611      	mov	r1, r2
 80018a4:	f000 faaa 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018a8:	201b      	movs	r0, #27
 80018aa:	f000 fad7 	bl	8001e5c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018ae:	b006      	add	sp, #24
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	bf00      	nop
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40010800 	.word	0x40010800

080018bc <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80018bc:	6803      	ldr	r3, [r0, #0]
{
 80018be:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM2)
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c4:	d115      	bne.n	80018f2 <HAL_TIM_PWM_MspInit+0x36>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80018ca:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018cc:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e2:	f000 fa8b 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e6:	201c      	movs	r0, #28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018e8:	b003      	add	sp, #12
 80018ea:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ee:	f000 bab5 	b.w	8001e5c <HAL_NVIC_EnableIRQ>
}
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f8:	b510      	push	{r4, lr}
 80018fa:	4604      	mov	r4, r0
 80018fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	2210      	movs	r2, #16
 8001900:	2100      	movs	r1, #0
 8001902:	a802      	add	r0, sp, #8
 8001904:	f006 fa42 	bl	8007d8c <memset>
  if(htim->Instance==TIM2)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190e:	d11d      	bne.n	800194c <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001914:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	480e      	ldr	r0, [pc, #56]	@ (8001950 <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	f042 0204 	orr.w	r2, r2, #4
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f000 fc23 	bl	8002180 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800193a:	4a06      	ldr	r2, [pc, #24]	@ (8001954 <HAL_TIM_MspPostInit+0x5c>)
 800193c:	6853      	ldr	r3, [r2, #4]
 800193e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001942:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800194c:	b006      	add	sp, #24
 800194e:	bd10      	pop	{r4, pc}
 8001950:	40010800 	.word	0x40010800
 8001954:	40010000 	.word	0x40010000

08001958 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler>

0800195a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler>

0800195c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler>

0800195e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler>

08001960 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler>

08001962 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 ba12 	b.w	8001d90 <HAL_IncTick>

0800196c <RCC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 800196c:	4770      	bx	lr
	...

08001970 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001970:	4801      	ldr	r0, [pc, #4]	@ (8001978 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 8001972:	f001 be61 	b.w	8003638 <HAL_PCD_IRQHandler>
 8001976:	bf00      	nop
 8001978:	20001574 	.word	0x20001574

0800197c <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 800197c:	f7ff bff8 	b.w	8001970 <USB_HP_CAN1_TX_IRQHandler>

08001980 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001980:	4801      	ldr	r0, [pc, #4]	@ (8001988 <TIM1_BRK_IRQHandler+0x8>)
 8001982:	f003 bc18 	b.w	80051b6 <HAL_TIM_IRQHandler>
 8001986:	bf00      	nop
 8001988:	200002ac 	.word	0x200002ac

0800198c <TIM1_UP_IRQHandler>:
}

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
 800198c:	f7ff bff8 	b.w	8001980 <TIM1_BRK_IRQHandler>

08001990 <TIM1_TRG_COM_IRQHandler>:
}

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 8001990:	f7ff bff6 	b.w	8001980 <TIM1_BRK_IRQHandler>

08001994 <TIM1_CC_IRQHandler>:
}

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 8001994:	f7ff bff4 	b.w	8001980 <TIM1_BRK_IRQHandler>

08001998 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001998:	4801      	ldr	r0, [pc, #4]	@ (80019a0 <TIM2_IRQHandler+0x8>)
 800199a:	f003 bc0c 	b.w	80051b6 <HAL_TIM_IRQHandler>
 800199e:	bf00      	nop
 80019a0:	20000264 	.word	0x20000264

080019a4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019a4:	4801      	ldr	r0, [pc, #4]	@ (80019ac <I2C1_EV_IRQHandler+0x8>)
 80019a6:	f001 b8bf 	b.w	8002b28 <HAL_I2C_EV_IRQHandler>
 80019aa:	bf00      	nop
 80019ac:	200003a0 	.word	0x200003a0

080019b0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019b0:	4801      	ldr	r0, [pc, #4]	@ (80019b8 <I2C1_ER_IRQHandler+0x8>)
 80019b2:	f001 bd11 	b.w	80033d8 <HAL_I2C_ER_IRQHandler>
 80019b6:	bf00      	nop
 80019b8:	200003a0 	.word	0x200003a0

080019bc <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80019bc:	4801      	ldr	r0, [pc, #4]	@ (80019c4 <I2C2_EV_IRQHandler+0x8>)
 80019be:	f001 b8b3 	b.w	8002b28 <HAL_I2C_EV_IRQHandler>
 80019c2:	bf00      	nop
 80019c4:	2000034c 	.word	0x2000034c

080019c8 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80019c8:	4801      	ldr	r0, [pc, #4]	@ (80019d0 <I2C2_ER_IRQHandler+0x8>)
 80019ca:	f001 bd05 	b.w	80033d8 <HAL_I2C_ER_IRQHandler>
 80019ce:	bf00      	nop
 80019d0:	2000034c 	.word	0x2000034c

080019d4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019d4:	4801      	ldr	r0, [pc, #4]	@ (80019dc <SPI1_IRQHandler+0x8>)
 80019d6:	f003 ba75 	b.w	8004ec4 <HAL_SPI_IRQHandler>
 80019da:	bf00      	nop
 80019dc:	200002f4 	.word	0x200002f4

080019e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <_sbrk+0x30>)
{
 80019e2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80019e4:	6811      	ldr	r1, [r2, #0]
{
 80019e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80019e8:	b909      	cbnz	r1, 80019ee <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80019ea:	490a      	ldr	r1, [pc, #40]	@ (8001a14 <_sbrk+0x34>)
 80019ec:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	4909      	ldr	r1, [pc, #36]	@ (8001a18 <_sbrk+0x38>)
 80019f2:	4c0a      	ldr	r4, [pc, #40]	@ (8001a1c <_sbrk+0x3c>)
 80019f4:	4403      	add	r3, r0
 80019f6:	1b09      	subs	r1, r1, r4
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d906      	bls.n	8001a0a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80019fc:	f006 fa06 	bl	8007e0c <__errno>
 8001a00:	230c      	movs	r3, #12
 8001a02:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a08:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a0a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001a0c:	e7fc      	b.n	8001a08 <_sbrk+0x28>
 8001a0e:	bf00      	nop
 8001a10:	200003f4 	.word	0x200003f4
 8001a14:	20001998 	.word	0x20001998
 8001a18:	20005000 	.word	0x20005000
 8001a1c:	00000400 	.word	0x00000400

08001a20 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	4770      	bx	lr
	...

08001a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a24:	f7ff fffc 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a2a:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a40:	4c09      	ldr	r4, [pc, #36]	@ (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f006 f9e3 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7ff fc7d 	bl	8001350 <main>
  bx lr
 8001a56:	4770      	bx	lr
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001a60:	0800ab58 	.word	0x0800ab58
  ldr r2, =_sbss
 8001a64:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001a68:	20001994 	.word	0x20001994

08001a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC1_2_IRQHandler>
	...

08001a70 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a72:	2301      	movs	r3, #1
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a7c:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8001a80:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a84:	9200      	str	r2, [sp, #0]
 8001a86:	2178      	movs	r1, #120	@ 0x78
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <ssd1306_WriteCommand+0x28>)
 8001a8c:	f000 fe52 	bl	8002734 <HAL_I2C_Mem_Write>
}
 8001a90:	b007      	add	sp, #28
 8001a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a96:	bf00      	nop
 8001a98:	2000034c 	.word	0x2000034c

08001a9c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	b289      	uxth	r1, r1
 8001aa4:	e9cd 0100 	strd	r0, r1, [sp]
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	2301      	movs	r3, #1
 8001aae:	2178      	movs	r1, #120	@ 0x78
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <ssd1306_WriteData+0x20>)
 8001ab2:	f000 fe3f 	bl	8002734 <HAL_I2C_Mem_Write>
}
 8001ab6:	b005      	add	sp, #20
 8001ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001abc:	2000034c 	.word	0x2000034c

08001ac0 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac6:	bf14      	ite	ne
 8001ac8:	21ff      	movne	r1, #255	@ 0xff
 8001aca:	2100      	moveq	r1, #0
 8001acc:	4801      	ldr	r0, [pc, #4]	@ (8001ad4 <ssd1306_Fill+0x14>)
 8001ace:	f006 b95d 	b.w	8007d8c <memset>
 8001ad2:	bf00      	nop
 8001ad4:	200003fe 	.word	0x200003fe

08001ad8 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	24b0      	movs	r4, #176	@ 0xb0
 8001adc:	4d0a      	ldr	r5, [pc, #40]	@ (8001b08 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ffc6 	bl	8001a70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff ffc3 	bl	8001a70 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001aea:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001aec:	2010      	movs	r0, #16
 8001aee:	f7ff ffbf 	bl	8001a70 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001af2:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001af4:	4628      	mov	r0, r5
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	f7ff ffd0 	bl	8001a9c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001afc:	2cb4      	cmp	r4, #180	@ 0xb4
 8001afe:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8001b02:	d1ec      	bne.n	8001ade <ssd1306_UpdateScreen+0x6>
    }
}
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
 8001b06:	bf00      	nop
 8001b08:	200003fe 	.word	0x200003fe

08001b0c <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b0c:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b0e:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b10:	d410      	bmi.n	8001b34 <ssd1306_DrawPixel+0x28>
 8001b12:	291f      	cmp	r1, #31
 8001b14:	d80e      	bhi.n	8001b34 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b16:	2401      	movs	r4, #1
 8001b18:	08cb      	lsrs	r3, r1, #3
 8001b1a:	4d07      	ldr	r5, [pc, #28]	@ (8001b38 <ssd1306_DrawPixel+0x2c>)
 8001b1c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001b20:	5c2b      	ldrb	r3, [r5, r0]
 8001b22:	f001 0107 	and.w	r1, r1, #7
 8001b26:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 8001b2a:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b2c:	bf0c      	ite	eq
 8001b2e:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b30:	438b      	bicne	r3, r1
 8001b32:	542b      	strb	r3, [r5, r0]
    }
}
 8001b34:	bd30      	pop	{r4, r5, pc}
 8001b36:	bf00      	nop
 8001b38:	200003fe 	.word	0x200003fe

08001b3c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b40:	4604      	mov	r4, r0
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	a808      	add	r0, sp, #32
 8001b46:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8001b4a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b4e:	f1a4 0520 	sub.w	r5, r4, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b52:	9302      	str	r3, [sp, #8]
    if (ch < 32 || ch > 126)
 8001b54:	b2eb      	uxtb	r3, r5
 8001b56:	2b5e      	cmp	r3, #94	@ 0x5e
 8001b58:	d848      	bhi.n	8001bec <ssd1306_WriteChar+0xb0>
 8001b5a:	9b07      	ldr	r3, [sp, #28]
        return 0;
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001b5c:	b30b      	cbz	r3, 8001ba2 <ssd1306_WriteChar+0x66>
 8001b5e:	4423      	add	r3, r4
 8001b60:	f813 6c20 	ldrb.w	r6, [r3, #-32]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b64:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8001bf0 <ssd1306_WriteChar+0xb4>
 8001b68:	f8b9 a000 	ldrh.w	sl, [r9]
 8001b6c:	eb0a 0306 	add.w	r3, sl, r6
 8001b70:	2b80      	cmp	r3, #128	@ 0x80
 8001b72:	dc3b      	bgt.n	8001bec <ssd1306_WriteChar+0xb0>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001b74:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001b78:	f89d b015 	ldrb.w	fp, [sp, #21]
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b82:	2a20      	cmp	r2, #32
 8001b84:	dc32      	bgt.n	8001bec <ssd1306_WriteChar+0xb0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001b86:	f04f 0800 	mov.w	r8, #0
 8001b8a:	fb0b f505 	mul.w	r5, fp, r5
 8001b8e:	006d      	lsls	r5, r5, #1
 8001b90:	45c3      	cmp	fp, r8
 8001b92:	d809      	bhi.n	8001ba8 <ssd1306_WriteChar+0x6c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001b94:	4456      	add	r6, sl
 8001b96:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	b009      	add	sp, #36	@ 0x24
 8001b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ba2:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8001ba6:	e7dd      	b.n	8001b64 <ssd1306_WriteChar+0x28>
        for(j = 0; j < char_width; j++) {
 8001ba8:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.height + i];
 8001baa:	9a06      	ldr	r2, [sp, #24]
 8001bac:	5b53      	ldrh	r3, [r2, r5]
 8001bae:	9304      	str	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	eb08 0203 	add.w	r2, r8, r3
 8001bb6:	b2d3      	uxtb	r3, r2
 8001bb8:	9303      	str	r3, [sp, #12]
        for(j = 0; j < char_width; j++) {
 8001bba:	42be      	cmp	r6, r7
 8001bbc:	d803      	bhi.n	8001bc6 <ssd1306_WriteChar+0x8a>
    for(i = 0; i < Font.height; i++) {
 8001bbe:	f108 0801 	add.w	r8, r8, #1
 8001bc2:	3502      	adds	r5, #2
 8001bc4:	e7e4      	b.n	8001b90 <ssd1306_WriteChar+0x54>
            if((b << j) & 0x8000)  {
 8001bc6:	9b04      	ldr	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bc8:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8001bcc:	fa03 f207 	lsl.w	r2, r3, r7
 8001bd0:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bd2:	bf56      	itet	pl
 8001bd4:	9b02      	ldrpl	r3, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bd6:	9a02      	ldrmi	r2, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bd8:	fab3 f283 	clzpl	r2, r3
 8001bdc:	9903      	ldr	r1, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bde:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001be0:	bf58      	it	pl
 8001be2:	0952      	lsrpl	r2, r2, #5
 8001be4:	f7ff ff92 	bl	8001b0c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001be8:	3701      	adds	r7, #1
 8001bea:	e7e6      	b.n	8001bba <ssd1306_WriteChar+0x7e>
        return 0;
 8001bec:	2400      	movs	r4, #0
 8001bee:	e7d4      	b.n	8001b9a <ssd1306_WriteChar+0x5e>
 8001bf0:	200003f8 	.word	0x200003f8

08001bf4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	ac03      	add	r4, sp, #12
 8001bfa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8001bfe:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 8001c02:	1e45      	subs	r5, r0, #1
    while (*str) {
 8001c04:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001c08:	b140      	cbz	r0, 8001c1c <ssd1306_WriteString+0x28>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c0a:	9600      	str	r6, [sp, #0]
 8001c0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001c10:	f7ff ff94 	bl	8001b3c <ssd1306_WriteChar>
 8001c14:	4603      	mov	r3, r0
 8001c16:	7828      	ldrb	r0, [r5, #0]
 8001c18:	4283      	cmp	r3, r0
 8001c1a:	d0f3      	beq.n	8001c04 <ssd1306_WriteString+0x10>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8001c1c:	b006      	add	sp, #24
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}

08001c20 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001c20:	4b01      	ldr	r3, [pc, #4]	@ (8001c28 <ssd1306_SetCursor+0x8>)
 8001c22:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8001c24:	8059      	strh	r1, [r3, #2]
}
 8001c26:	4770      	bx	lr
 8001c28:	200003f8 	.word	0x200003f8

08001c2c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c30:	2081      	movs	r0, #129	@ 0x81
 8001c32:	f7ff ff1d 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c36:	4620      	mov	r0, r4
}
 8001c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8001c3c:	f7ff bf18 	b.w	8001a70 <ssd1306_WriteCommand>

08001c40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 8001c40:	2800      	cmp	r0, #0
    if (on) {
 8001c42:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8001c44:	bf0c      	ite	eq
 8001c46:	4603      	moveq	r3, r0
 8001c48:	2301      	movne	r3, #1
 8001c4a:	4a03      	ldr	r2, [pc, #12]	@ (8001c58 <ssd1306_SetDisplayOn+0x18>)
 8001c4c:	bf0c      	ite	eq
 8001c4e:	20ae      	moveq	r0, #174	@ 0xae
 8001c50:	20af      	movne	r0, #175	@ 0xaf
 8001c52:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8001c54:	f7ff bf0c 	b.w	8001a70 <ssd1306_WriteCommand>
 8001c58:	200003f8 	.word	0x200003f8

08001c5c <ssd1306_Init>:
void ssd1306_Init(void) {
 8001c5c:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8001c5e:	2064      	movs	r0, #100	@ 0x64
 8001c60:	f000 f8a8 	bl	8001db4 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ffeb 	bl	8001c40 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c6a:	2020      	movs	r0, #32
 8001c6c:	f7ff ff00 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fefd 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c76:	20b0      	movs	r0, #176	@ 0xb0
 8001c78:	f7ff fefa 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c7c:	20c8      	movs	r0, #200	@ 0xc8
 8001c7e:	f7ff fef7 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff fef4 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c88:	2010      	movs	r0, #16
 8001c8a:	f7ff fef1 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c8e:	2040      	movs	r0, #64	@ 0x40
 8001c90:	f7ff feee 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8001c94:	20ff      	movs	r0, #255	@ 0xff
 8001c96:	f7ff ffc9 	bl	8001c2c <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c9a:	20a1      	movs	r0, #161	@ 0xa1
 8001c9c:	f7ff fee8 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ca0:	20a6      	movs	r0, #166	@ 0xa6
 8001ca2:	f7ff fee5 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ca6:	20a8      	movs	r0, #168	@ 0xa8
 8001ca8:	f7ff fee2 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); //
 8001cac:	201f      	movs	r0, #31
 8001cae:	f7ff fedf 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cb2:	20a4      	movs	r0, #164	@ 0xa4
 8001cb4:	f7ff fedc 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001cb8:	20d3      	movs	r0, #211	@ 0xd3
 8001cba:	f7ff fed9 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff fed6 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cc4:	20d5      	movs	r0, #213	@ 0xd5
 8001cc6:	f7ff fed3 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cca:	20f0      	movs	r0, #240	@ 0xf0
 8001ccc:	f7ff fed0 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cd0:	20d9      	movs	r0, #217	@ 0xd9
 8001cd2:	f7ff fecd 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cd6:	2022      	movs	r0, #34	@ 0x22
 8001cd8:	f7ff feca 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cdc:	20da      	movs	r0, #218	@ 0xda
 8001cde:	f7ff fec7 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7ff fec4 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ce8:	20db      	movs	r0, #219	@ 0xdb
 8001cea:	f7ff fec1 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cee:	2020      	movs	r0, #32
 8001cf0:	f7ff febe 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cf4:	208d      	movs	r0, #141	@ 0x8d
 8001cf6:	f7ff febb 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cfa:	2014      	movs	r0, #20
 8001cfc:	f7ff feb8 	bl	8001a70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff ff9d 	bl	8001c40 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff feda 	bl	8001ac0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001d0c:	f7ff fee4 	bl	8001ad8 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8001d10:	2200      	movs	r2, #0
 8001d12:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <ssd1306_Init+0xc4>)
 8001d14:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d16:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	711a      	strb	r2, [r3, #4]
}
 8001d1c:	bd08      	pop	{r3, pc}
 8001d1e:	bf00      	nop
 8001d20:	200003f8 	.word	0x200003f8

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <HAL_InitTick+0x3c>)
{
 8001d28:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_InitTick+0x40>)
 8001d36:	6810      	ldr	r0, [r2, #0]
 8001d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3c:	f000 f89c 	bl	8001e78 <HAL_SYSTICK_Config>
 8001d40:	4604      	mov	r4, r0
 8001d42:	b958      	cbnz	r0, 8001d5c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d44:	2d0f      	cmp	r5, #15
 8001d46:	d809      	bhi.n	8001d5c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 f854 	bl	8001dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4620      	mov	r0, r4
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <HAL_InitTick+0x44>)
 8001d58:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e7fc      	b.n	8001d5a <HAL_InitTick+0x36>
 8001d60:	2000001c 	.word	0x2000001c
 8001d64:	20000018 	.word	0x20000018
 8001d68:	20000020 	.word	0x20000020

08001d6c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_Init+0x20>)
{
 8001d6e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7a:	f000 f82d 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f7ff ffd0 	bl	8001d24 <HAL_InitTick>
  HAL_MspInit();
 8001d84:	f7ff fc6c 	bl	8001660 <HAL_MspInit>
}
 8001d88:	2000      	movs	r0, #0
 8001d8a:	bd08      	pop	{r3, pc}
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d90:	4a03      	ldr	r2, [pc, #12]	@ (8001da0 <HAL_IncTick+0x10>)
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <HAL_IncTick+0x14>)
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	440b      	add	r3, r1
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000600 	.word	0x20000600
 8001da4:	2000001c 	.word	0x2000001c

08001da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001da8:	4b01      	ldr	r3, [pc, #4]	@ (8001db0 <HAL_GetTick+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000600 	.word	0x20000600

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
 8001db6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fff6 	bl	8001da8 <HAL_GetTick>
 8001dbc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc0:	bf1e      	ittt	ne
 8001dc2:	4b04      	ldrne	r3, [pc, #16]	@ (8001dd4 <HAL_Delay+0x20>)
 8001dc4:	781b      	ldrbne	r3, [r3, #0]
 8001dc6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	1b43      	subs	r3, r0, r5
 8001dce:	42a3      	cmp	r3, r4
 8001dd0:	d3fa      	bcc.n	8001dc8 <HAL_Delay+0x14>
  {
  }
}
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	2000001c 	.word	0x2000001c

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4907      	ldr	r1, [pc, #28]	@ (8001df8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dda:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dde:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001de6:	0412      	lsls	r2, r2, #16
 8001de8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001df4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b530      	push	{r4, r5, lr}
 8001e00:	68dc      	ldr	r4, [r3, #12]
 8001e02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	bf28      	it	cs
 8001e10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e18:	bf94      	ite	ls
 8001e1a:	2400      	movls	r4, #0
 8001e1c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1e:	fa05 f303 	lsl.w	r3, r5, r3
 8001e22:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e26:	40a5      	lsls	r5, r4
 8001e28:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	bfac      	ite	ge
 8001e36:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	4a07      	ldrlt	r2, [pc, #28]	@ (8001e58 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	bfab      	itete	ge
 8001e44:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e52:	bd30      	pop	{r4, r5, pc}
 8001e54:	e000ed00 	.word	0xe000ed00
 8001e58:	e000ed14 	.word	0xe000ed14

08001e5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	db07      	blt.n	8001e70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e60:	2301      	movs	r3, #1
 8001e62:	0941      	lsrs	r1, r0, #5
 8001e64:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <HAL_NVIC_EnableIRQ+0x18>)
 8001e66:	f000 001f 	and.w	r0, r0, #31
 8001e6a:	4083      	lsls	r3, r0
 8001e6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	3801      	subs	r0, #1
 8001e7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001e7e:	d20b      	bcs.n	8001e98 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	21f0      	movs	r1, #240	@ 0xf0
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e88:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e90:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e92:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e94:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e96:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e98:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ea0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ea2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001eb0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb2:	6803      	ldr	r3, [r0, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ec4:	4a17      	ldr	r2, [pc, #92]	@ (8001f24 <HAL_DMA_Abort_IT+0x84>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x6a>
 8001eca:	3214      	adds	r2, #20
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01e      	beq.n	8001f0e <HAL_DMA_Abort_IT+0x6e>
 8001ed0:	3214      	adds	r2, #20
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_Abort_IT+0x72>
 8001ed6:	3214      	adds	r2, #20
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01d      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x78>
 8001edc:	3214      	adds	r2, #20
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01d      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x7e>
 8001ee2:	3214      	adds	r2, #20
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf14      	ite	ne
 8001ee8:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8001eec:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_DMA_Abort_IT+0x88>)
 8001ef2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001efa:	2300      	movs	r3, #0
 8001efc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001f00:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001f02:	b103      	cbz	r3, 8001f06 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8001f04:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2000      	movs	r0, #0
 8001f08:	e7d2      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e7f0      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x50>
 8001f0e:	2310      	movs	r3, #16
 8001f10:	e7ee      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x50>
 8001f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f16:	e7eb      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x50>
 8001f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1c:	e7e8      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x50>
 8001f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f22:	e7e5      	b.n	8001ef0 <HAL_DMA_Abort_IT+0x50>
 8001f24:	40020008 	.word	0x40020008
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001f2c:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8001f30:	4770      	bx	lr
	...

08001f34 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <FLASH_SetErrorCode+0x48>)
 8001f36:	68d3      	ldr	r3, [r2, #12]
 8001f38:	f013 0310 	ands.w	r3, r3, #16
 8001f3c:	d005      	beq.n	8001f4a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f3e:	4910      	ldr	r1, [pc, #64]	@ (8001f80 <FLASH_SetErrorCode+0x4c>)
 8001f40:	69cb      	ldr	r3, [r1, #28]
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f48:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f4a:	68d2      	ldr	r2, [r2, #12]
 8001f4c:	0750      	lsls	r0, r2, #29
 8001f4e:	d506      	bpl.n	8001f5e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f50:	490b      	ldr	r1, [pc, #44]	@ (8001f80 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001f52:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f56:	69ca      	ldr	r2, [r1, #28]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001f5e:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <FLASH_SetErrorCode+0x48>)
 8001f60:	69d1      	ldr	r1, [r2, #28]
 8001f62:	07c9      	lsls	r1, r1, #31
 8001f64:	d508      	bpl.n	8001f78 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001f66:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <FLASH_SetErrorCode+0x4c>)
 8001f68:	69c1      	ldr	r1, [r0, #28]
 8001f6a:	f041 0104 	orr.w	r1, r1, #4
 8001f6e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f70:	69d1      	ldr	r1, [r2, #28]
 8001f72:	f021 0101 	bic.w	r1, r1, #1
 8001f76:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001f78:	60d3      	str	r3, [r2, #12]
}  
 8001f7a:	4770      	bx	lr
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	20000608 	.word	0x20000608

08001f84 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_FLASH_Unlock+0x1c>)
 8001f86:	6918      	ldr	r0, [r3, #16]
 8001f88:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8001f8c:	d007      	beq.n	8001f9e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f8e:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <HAL_FLASH_Unlock+0x20>)
 8001f90:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f92:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8001f96:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f98:	6918      	ldr	r0, [r3, #16]
 8001f9a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001f9e:	4770      	bx	lr
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	45670123 	.word	0x45670123

08001fa8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fa8:	4a03      	ldr	r2, [pc, #12]	@ (8001fb8 <HAL_FLASH_Lock+0x10>)
}
 8001faa:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fac:	6913      	ldr	r3, [r2, #16]
 8001fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb2:	6113      	str	r3, [r2, #16]
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000

08001fbc <FLASH_WaitForLastOperation>:
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fef2 	bl	8001da8 <HAL_GetTick>
 8001fc4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001fc6:	4c11      	ldr	r4, [pc, #68]	@ (800200c <FLASH_WaitForLastOperation+0x50>)
 8001fc8:	68e3      	ldr	r3, [r4, #12]
 8001fca:	07d8      	lsls	r0, r3, #31
 8001fcc:	d412      	bmi.n	8001ff4 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001fce:	68e3      	ldr	r3, [r4, #12]
 8001fd0:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fd2:	bf44      	itt	mi
 8001fd4:	2320      	movmi	r3, #32
 8001fd6:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001fd8:	68e3      	ldr	r3, [r4, #12]
 8001fda:	06da      	lsls	r2, r3, #27
 8001fdc:	d406      	bmi.n	8001fec <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001fde:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001fe0:	07db      	lsls	r3, r3, #31
 8001fe2:	d403      	bmi.n	8001fec <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fe4:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001fe6:	f010 0004 	ands.w	r0, r0, #4
 8001fea:	d007      	beq.n	8001ffc <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8001fec:	f7ff ffa2 	bl	8001f34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e003      	b.n	8001ffc <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	1c6b      	adds	r3, r5, #1
 8001ff6:	d0e7      	beq.n	8001fc8 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ff8:	b90d      	cbnz	r5, 8001ffe <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8001ffa:	2003      	movs	r0, #3
}
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ffe:	f7ff fed3 	bl	8001da8 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	42a8      	cmp	r0, r5
 8002006:	d9df      	bls.n	8001fc8 <FLASH_WaitForLastOperation+0xc>
 8002008:	e7f7      	b.n	8001ffa <FLASH_WaitForLastOperation+0x3e>
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_FLASH_Program>:
{
 8002010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002014:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80020ac <HAL_FLASH_Program+0x9c>
{
 8002018:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800201a:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 800201e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002020:	2b01      	cmp	r3, #1
{
 8002022:	4688      	mov	r8, r1
 8002024:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8002026:	d03f      	beq.n	80020a8 <HAL_FLASH_Program+0x98>
 8002028:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800202a:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 800202e:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002032:	f7ff ffc3 	bl	8001fbc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002036:	bb90      	cbnz	r0, 800209e <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002038:	2d01      	cmp	r5, #1
 800203a:	d003      	beq.n	8002044 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 800203c:	2d02      	cmp	r5, #2
 800203e:	bf14      	ite	ne
 8002040:	2504      	movne	r5, #4
 8002042:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8002044:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002046:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002048:	f8df b064 	ldr.w	fp, [pc, #100]	@ 80020b0 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800204c:	0134      	lsls	r4, r6, #4
 800204e:	f1c4 0120 	rsb	r1, r4, #32
 8002052:	f1a4 0220 	sub.w	r2, r4, #32
 8002056:	fa07 f101 	lsl.w	r1, r7, r1
 800205a:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800205e:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002062:	430c      	orrs	r4, r1
 8002064:	fa27 f202 	lsr.w	r2, r7, r2
 8002068:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800206a:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800206e:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002078:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 800207c:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002080:	f7ff ff9c 	bl	8001fbc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002084:	f8db 2010 	ldr.w	r2, [fp, #16]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8002090:	b928      	cbnz	r0, 800209e <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8002092:	3601      	adds	r6, #1
 8002094:	b2f2      	uxtb	r2, r6
 8002096:	4295      	cmp	r5, r2
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	d8d6      	bhi.n	800204c <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 800209e:	2300      	movs	r3, #0
 80020a0:	f88a 3018 	strb.w	r3, [sl, #24]
}
 80020a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80020a8:	2002      	movs	r0, #2
 80020aa:	e7fb      	b.n	80020a4 <HAL_FLASH_Program+0x94>
 80020ac:	20000608 	.word	0x20000608
 80020b0:	40022000 	.word	0x40022000

080020b4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <FLASH_PageErase+0x1c>)
 80020b8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <FLASH_PageErase+0x20>)
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	f042 0202 	orr.w	r2, r2, #2
 80020c2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80020c4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80020ce:	4770      	bx	lr
 80020d0:	20000608 	.word	0x20000608
 80020d4:	40022000 	.word	0x40022000

080020d8 <HAL_FLASHEx_Erase>:
{
 80020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80020dc:	4f26      	ldr	r7, [pc, #152]	@ (8002178 <HAL_FLASHEx_Erase+0xa0>)
{
 80020de:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80020e0:	7e3b      	ldrb	r3, [r7, #24]
{
 80020e2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d044      	beq.n	8002172 <HAL_FLASHEx_Erase+0x9a>
 80020e8:	2401      	movs	r4, #1
 80020ea:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020ec:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80020ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d11a      	bne.n	800212c <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80020f6:	f7ff ff61 	bl	8001fbc <FLASH_WaitForLastOperation>
 80020fa:	b120      	cbz	r0, 8002106 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80020fe:	2300      	movs	r3, #0
 8002100:	763b      	strb	r3, [r7, #24]
}
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002106:	4c1d      	ldr	r4, [pc, #116]	@ (800217c <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002108:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800210a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800210c:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002116:	6923      	ldr	r3, [r4, #16]
 8002118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800211c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800211e:	f7ff ff4d 	bl	8001fbc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002122:	6923      	ldr	r3, [r4, #16]
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6123      	str	r3, [r4, #16]
 800212a:	e7e8      	b.n	80020fe <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800212c:	f7ff ff46 	bl	8001fbc <FLASH_WaitForLastOperation>
 8002130:	2800      	cmp	r0, #0
 8002132:	d1e3      	bne.n	80020fc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800213c:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800213e:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002140:	4c0e      	ldr	r4, [pc, #56]	@ (800217c <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002142:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002146:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 800214a:	42b3      	cmp	r3, r6
 800214c:	d9d7      	bls.n	80020fe <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800214e:	4630      	mov	r0, r6
 8002150:	f7ff ffb0 	bl	80020b4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002154:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002158:	f7ff ff30 	bl	8001fbc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	f023 0302 	bic.w	r3, r3, #2
 8002162:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8002164:	b110      	cbz	r0, 800216c <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8002166:	f8c8 6000 	str.w	r6, [r8]
            break;
 800216a:	e7c8      	b.n	80020fe <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800216c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002170:	e7e7      	b.n	8002142 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8002172:	2002      	movs	r0, #2
 8002174:	e7c5      	b.n	8002102 <HAL_FLASHEx_Erase+0x2a>
 8002176:	bf00      	nop
 8002178:	20000608 	.word	0x20000608
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002184:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002186:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 800218a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800218c:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8002314 <HAL_GPIO_Init+0x194>
 8002190:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002192:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	680a      	ldr	r2, [r1, #0]
 8002198:	fa32 f506 	lsrs.w	r5, r2, r6
 800219c:	d102      	bne.n	80021a4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 800219e:	b003      	add	sp, #12
 80021a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80021a4:	2501      	movs	r5, #1
 80021a6:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80021ae:	ea37 0202 	bics.w	r2, r7, r2
 80021b2:	d176      	bne.n	80022a2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80021b4:	684a      	ldr	r2, [r1, #4]
 80021b6:	2a03      	cmp	r2, #3
 80021b8:	d807      	bhi.n	80021ca <HAL_GPIO_Init+0x4a>
 80021ba:	3a01      	subs	r2, #1
 80021bc:	2a02      	cmp	r2, #2
 80021be:	f200 8083 	bhi.w	80022c8 <HAL_GPIO_Init+0x148>
 80021c2:	e8df f002 	tbb	[pc, r2]
 80021c6:	9691      	.short	0x9691
 80021c8:	9c          	.byte	0x9c
 80021c9:	00          	.byte	0x00
 80021ca:	2a12      	cmp	r2, #18
 80021cc:	f000 8094 	beq.w	80022f8 <HAL_GPIO_Init+0x178>
 80021d0:	d869      	bhi.n	80022a6 <HAL_GPIO_Init+0x126>
 80021d2:	2a11      	cmp	r2, #17
 80021d4:	f000 808a 	beq.w	80022ec <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	2dff      	cmp	r5, #255	@ 0xff
 80021da:	bf94      	ite	ls
 80021dc:	4681      	movls	r9, r0
 80021de:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e0:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e4:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e8:	bf88      	it	hi
 80021ea:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ec:	fa0e fa02 	lsl.w	sl, lr, r2
 80021f0:	ea27 070a 	bic.w	r7, r7, sl
 80021f4:	fa04 f202 	lsl.w	r2, r4, r2
 80021f8:	4317      	orrs	r7, r2
 80021fa:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fe:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002202:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002206:	d04c      	beq.n	80022a2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800220c:	f026 0703 	bic.w	r7, r6, #3
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	f8cc 2018 	str.w	r2, [ip, #24]
 8002218:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800221c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002220:	f002 0201 	and.w	r2, r2, #1
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800222a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800222e:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002230:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002234:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002236:	fa0e fb0a 	lsl.w	fp, lr, sl
 800223a:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800223e:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_GPIO_Init+0x19c>)
 8002240:	4290      	cmp	r0, r2
 8002242:	d060      	beq.n	8002306 <HAL_GPIO_Init+0x186>
 8002244:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002248:	4290      	cmp	r0, r2
 800224a:	d05e      	beq.n	800230a <HAL_GPIO_Init+0x18a>
 800224c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002250:	4290      	cmp	r0, r2
 8002252:	d05c      	beq.n	800230e <HAL_GPIO_Init+0x18e>
 8002254:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002258:	4290      	cmp	r0, r2
 800225a:	bf14      	ite	ne
 800225c:	2204      	movne	r2, #4
 800225e:	2203      	moveq	r2, #3
 8002260:	fa02 f20a 	lsl.w	r2, r2, sl
 8002264:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002268:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800226a:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226c:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002270:	bf14      	ite	ne
 8002272:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002274:	43aa      	biceq	r2, r5
 8002276:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002278:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227a:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800227e:	bf14      	ite	ne
 8002280:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002282:	43aa      	biceq	r2, r5
 8002284:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002286:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800228c:	bf14      	ite	ne
 800228e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002290:	43aa      	biceq	r2, r5
 8002292:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002294:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002296:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800229a:	bf14      	ite	ne
 800229c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800229e:	43aa      	biceq	r2, r5
 80022a0:	601a      	str	r2, [r3, #0]
	position++;
 80022a2:	3601      	adds	r6, #1
 80022a4:	e777      	b.n	8002196 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80022a6:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002320 <HAL_GPIO_Init+0x1a0>
 80022aa:	454a      	cmp	r2, r9
 80022ac:	d00c      	beq.n	80022c8 <HAL_GPIO_Init+0x148>
 80022ae:	d814      	bhi.n	80022da <HAL_GPIO_Init+0x15a>
 80022b0:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80022b4:	454a      	cmp	r2, r9
 80022b6:	d007      	beq.n	80022c8 <HAL_GPIO_Init+0x148>
 80022b8:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 80022bc:	454a      	cmp	r2, r9
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x148>
 80022c0:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80022c4:	454a      	cmp	r2, r9
 80022c6:	d187      	bne.n	80021d8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c8:	688a      	ldr	r2, [r1, #8]
 80022ca:	b1d2      	cbz	r2, 8002302 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022cc:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ce:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80022d2:	bf0c      	ite	eq
 80022d4:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80022d6:	6147      	strne	r7, [r0, #20]
 80022d8:	e77e      	b.n	80021d8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80022da:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8002324 <HAL_GPIO_Init+0x1a4>
 80022de:	454a      	cmp	r2, r9
 80022e0:	d0f2      	beq.n	80022c8 <HAL_GPIO_Init+0x148>
 80022e2:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80022e6:	e7ed      	b.n	80022c4 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e8:	68cc      	ldr	r4, [r1, #12]
          break;
 80022ea:	e775      	b.n	80021d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ec:	68cc      	ldr	r4, [r1, #12]
 80022ee:	3404      	adds	r4, #4
          break;
 80022f0:	e772      	b.n	80021d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f2:	68cc      	ldr	r4, [r1, #12]
 80022f4:	3408      	adds	r4, #8
          break;
 80022f6:	e76f      	b.n	80021d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f8:	68cc      	ldr	r4, [r1, #12]
 80022fa:	340c      	adds	r4, #12
          break;
 80022fc:	e76c      	b.n	80021d8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80022fe:	2400      	movs	r4, #0
 8002300:	e76a      	b.n	80021d8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002302:	2404      	movs	r4, #4
 8002304:	e768      	b.n	80021d8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002306:	2200      	movs	r2, #0
 8002308:	e7aa      	b.n	8002260 <HAL_GPIO_Init+0xe0>
 800230a:	2201      	movs	r2, #1
 800230c:	e7a8      	b.n	8002260 <HAL_GPIO_Init+0xe0>
 800230e:	2202      	movs	r2, #2
 8002310:	e7a6      	b.n	8002260 <HAL_GPIO_Init+0xe0>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40010400 	.word	0x40010400
 800231c:	40010800 	.word	0x40010800
 8002320:	10220000 	.word	0x10220000
 8002324:	10310000 	.word	0x10310000

08002328 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002328:	6883      	ldr	r3, [r0, #8]
 800232a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800232c:	bf14      	ite	ne
 800232e:	2001      	movne	r0, #1
 8002330:	2000      	moveq	r0, #0
 8002332:	4770      	bx	lr

08002334 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	b10a      	cbz	r2, 800233a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002336:	6101      	str	r1, [r0, #16]
  }
}
 8002338:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800233a:	0409      	lsls	r1, r1, #16
 800233c:	e7fb      	b.n	8002336 <HAL_GPIO_WritePin+0x2>

0800233e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800233e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002340:	ea01 0203 	and.w	r2, r1, r3
 8002344:	ea21 0103 	bic.w	r1, r1, r3
 8002348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800234c:	6101      	str	r1, [r0, #16]
}
 800234e:	4770      	bx	lr

08002350 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002350:	6801      	ldr	r1, [r0, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	694b      	ldr	r3, [r1, #20]
 8002356:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 800235a:	d010      	beq.n	800237e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002360:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002362:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002364:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002366:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236a:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800236e:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
 800237c:	4770      	bx	lr
  }
  return HAL_OK;
 800237e:	4618      	mov	r0, r3
}
 8002380:	4770      	bx	lr

08002382 <I2C_WaitOnFlagUntilTimeout>:
{
 8002382:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002386:	4606      	mov	r6, r0
 8002388:	460f      	mov	r7, r1
 800238a:	4691      	mov	r9, r2
 800238c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002392:	6833      	ldr	r3, [r6, #0]
 8002394:	f1ba 0f01 	cmp.w	sl, #1
 8002398:	bf0c      	ite	eq
 800239a:	695c      	ldreq	r4, [r3, #20]
 800239c:	699c      	ldrne	r4, [r3, #24]
 800239e:	ea27 0404 	bic.w	r4, r7, r4
 80023a2:	b2a4      	uxth	r4, r4
 80023a4:	fab4 f484 	clz	r4, r4
 80023a8:	0964      	lsrs	r4, r4, #5
 80023aa:	45a1      	cmp	r9, r4
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80023ae:	2000      	movs	r0, #0
 80023b0:	e025      	b.n	80023fe <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	1c6a      	adds	r2, r5, #1
 80023b4:	d0ee      	beq.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7ff fcf7 	bl	8001da8 <HAL_GetTick>
 80023ba:	9b08      	ldr	r3, [sp, #32]
 80023bc:	1ac0      	subs	r0, r0, r3
 80023be:	42a8      	cmp	r0, r5
 80023c0:	d801      	bhi.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80023c2:	2d00      	cmp	r5, #0
 80023c4:	d1e5      	bne.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023c6:	6833      	ldr	r3, [r6, #0]
 80023c8:	f1ba 0f01 	cmp.w	sl, #1
 80023cc:	bf0c      	ite	eq
 80023ce:	695b      	ldreq	r3, [r3, #20]
 80023d0:	699b      	ldrne	r3, [r3, #24]
 80023d2:	ea27 0303 	bic.w	r3, r7, r3
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	4599      	cmp	r9, r3
 80023e0:	d1d7      	bne.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023e2:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80023e4:	2220      	movs	r2, #32
          return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023e8:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023ea:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ee:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80023f4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80023fe:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002402 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002406:	4604      	mov	r4, r0
 8002408:	460f      	mov	r7, r1
 800240a:	4616      	mov	r6, r2
 800240c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800240e:	6825      	ldr	r5, [r4, #0]
 8002410:	6968      	ldr	r0, [r5, #20]
 8002412:	ea27 0000 	bic.w	r0, r7, r0
 8002416:	b280      	uxth	r0, r0
 8002418:	b1c0      	cbz	r0, 800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241a:	696b      	ldr	r3, [r5, #20]
 800241c:	055a      	lsls	r2, r3, #21
 800241e:	d517      	bpl.n	8002450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002422:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002428:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800242e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002430:	2300      	movs	r3, #0
 8002432:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800243c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800243e:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002444:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002448:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002450:	1c73      	adds	r3, r6, #1
 8002452:	d0dd      	beq.n	8002410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002454:	f7ff fca8 	bl	8001da8 <HAL_GetTick>
 8002458:	eba0 0008 	sub.w	r0, r0, r8
 800245c:	42b0      	cmp	r0, r6
 800245e:	d801      	bhi.n	8002464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8002460:	2e00      	cmp	r6, #0
 8002462:	d1d4      	bne.n	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	ea27 0202 	bic.w	r2, r7, r2
 800246c:	b292      	uxth	r2, r2
 800246e:	2a00      	cmp	r2, #0
 8002470:	d0cd      	beq.n	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002476:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002482:	4313      	orrs	r3, r2
 8002484:	e7dd      	b.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002486 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002486:	b570      	push	{r4, r5, r6, lr}
 8002488:	4604      	mov	r4, r0
 800248a:	460d      	mov	r5, r1
 800248c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	d501      	bpl.n	800249a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002496:	2000      	movs	r0, #0
 8002498:	e01e      	b.n	80024d8 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff ff58 	bl	8002350 <I2C_IsAcknowledgeFailed>
 80024a0:	b9c8      	cbnz	r0, 80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	1c6a      	adds	r2, r5, #1
 80024a4:	d0f3      	beq.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7ff fc7f 	bl	8001da8 <HAL_GetTick>
 80024aa:	1b80      	subs	r0, r0, r6
 80024ac:	42a8      	cmp	r0, r5
 80024ae:	d801      	bhi.n	80024b4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80024b0:	2d00      	cmp	r5, #0
 80024b2:	d1ec      	bne.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80024bc:	d1e7      	bne.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80024be:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024c0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024c2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80024cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80024d6:	2001      	movs	r0, #1
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080024dc <I2C_RequestMemoryWrite>:
{
 80024dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024e0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e2:	6802      	ldr	r2, [r0, #0]
{
 80024e4:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e6:	6813      	ldr	r3, [r2, #0]
{
 80024e8:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ee:	6013      	str	r3, [r2, #0]
{
 80024f0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80024f4:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f6:	463b      	mov	r3, r7
 80024f8:	2200      	movs	r2, #0
 80024fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024fe:	f8cd 8000 	str.w	r8, [sp]
{
 8002502:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	f7ff ff3d 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	b138      	cbz	r0, 800251c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	05db      	lsls	r3, r3, #23
 8002510:	d502      	bpl.n	8002518 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002516:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002518:	2603      	movs	r6, #3
 800251a:	e020      	b.n	800255e <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800251c:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8002520:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002522:	463a      	mov	r2, r7
 8002524:	4643      	mov	r3, r8
 8002526:	4620      	mov	r0, r4
 8002528:	4918      	ldr	r1, [pc, #96]	@ (800258c <I2C_RequestMemoryWrite+0xb0>)
 800252a:	f7ff ff6a 	bl	8002402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252e:	b9a8      	cbnz	r0, 800255c <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	9003      	str	r0, [sp, #12]
 8002534:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002538:	9203      	str	r2, [sp, #12]
 800253a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253c:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002540:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002544:	f7ff ff9f 	bl	8002486 <I2C_WaitOnTXEFlagUntilTimeout>
 8002548:	4606      	mov	r6, r0
 800254a:	b160      	cbz	r0, 8002566 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800254e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	bf01      	itttt	eq
 8002552:	6822      	ldreq	r2, [r4, #0]
 8002554:	6813      	ldreq	r3, [r2, #0]
 8002556:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800255a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 800255c:	2601      	movs	r6, #1
}
 800255e:	4630      	mov	r0, r6
 8002560:	b005      	add	sp, #20
 8002562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002566:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256c:	d102      	bne.n	8002574 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800256e:	b2ed      	uxtb	r5, r5
 8002570:	611d      	str	r5, [r3, #16]
 8002572:	e7f4      	b.n	800255e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002574:	0a2a      	lsrs	r2, r5, #8
 8002576:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002578:	4639      	mov	r1, r7
 800257a:	4642      	mov	r2, r8
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff ff82 	bl	8002486 <I2C_WaitOnTXEFlagUntilTimeout>
 8002582:	2800      	cmp	r0, #0
 8002584:	d1e2      	bne.n	800254c <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	e7f1      	b.n	800256e <I2C_RequestMemoryWrite+0x92>
 800258a:	bf00      	nop
 800258c:	00010002 	.word	0x00010002

08002590 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	4604      	mov	r4, r0
 8002594:	460d      	mov	r5, r1
 8002596:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	075b      	lsls	r3, r3, #29
 800259e:	d501      	bpl.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80025a0:	2000      	movs	r0, #0
 80025a2:	e01e      	b.n	80025e2 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff fed3 	bl	8002350 <I2C_IsAcknowledgeFailed>
 80025aa:	b9c8      	cbnz	r0, 80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	1c6a      	adds	r2, r5, #1
 80025ae:	d0f3      	beq.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7ff fbfa 	bl	8001da8 <HAL_GetTick>
 80025b4:	1b80      	subs	r0, r0, r6
 80025b6:	42a8      	cmp	r0, r5
 80025b8:	d801      	bhi.n	80025be <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80025ba:	2d00      	cmp	r5, #0
 80025bc:	d1ec      	bne.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f013 0304 	ands.w	r3, r3, #4
 80025c6:	d1e7      	bne.n	8002598 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80025d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
}
 80025e2:	bd70      	pop	{r4, r5, r6, pc}

080025e4 <HAL_I2C_Init>:
{
 80025e4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80025e6:	4604      	mov	r4, r0
 80025e8:	b908      	cbnz	r0, 80025ee <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
}
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80025f2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025f6:	b91b      	cbnz	r3, 8002600 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80025f8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80025fc:	f7ff f85a 	bl	80016b4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	2324      	movs	r3, #36	@ 0x24
 8002602:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002620:	f002 f87c 	bl	800471c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002624:	4b3f      	ldr	r3, [pc, #252]	@ (8002724 <HAL_I2C_Init+0x140>)
 8002626:	6865      	ldr	r5, [r4, #4]
 8002628:	429d      	cmp	r5, r3
 800262a:	bf94      	ite	ls
 800262c:	4b3e      	ldrls	r3, [pc, #248]	@ (8002728 <HAL_I2C_Init+0x144>)
 800262e:	4b3f      	ldrhi	r3, [pc, #252]	@ (800272c <HAL_I2C_Init+0x148>)
 8002630:	4298      	cmp	r0, r3
 8002632:	bf8c      	ite	hi
 8002634:	2300      	movhi	r3, #0
 8002636:	2301      	movls	r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1d6      	bne.n	80025ea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263c:	4e39      	ldr	r6, [pc, #228]	@ (8002724 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 800263e:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002640:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002646:	bf88      	it	hi
 8002648:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	6851      	ldr	r1, [r2, #4]
 8002650:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002654:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002658:	bf82      	ittt	hi
 800265a:	4373      	mulhi	r3, r6
 800265c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8002660:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002664:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002666:	6a11      	ldr	r1, [r2, #32]
 8002668:	3301      	adds	r3, #1
 800266a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800266e:	430b      	orrs	r3, r1
 8002670:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002672:	69d1      	ldr	r1, [r2, #28]
 8002674:	1e43      	subs	r3, r0, #1
 8002676:	482b      	ldr	r0, [pc, #172]	@ (8002724 <HAL_I2C_Init+0x140>)
 8002678:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800267c:	4285      	cmp	r5, r0
 800267e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002682:	d832      	bhi.n	80026ea <HAL_I2C_Init+0x106>
 8002684:	006d      	lsls	r5, r5, #1
 8002686:	fbb3 f3f5 	udiv	r3, r3, r5
 800268a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800268e:	3301      	adds	r3, #1
 8002690:	4203      	tst	r3, r0
 8002692:	d042      	beq.n	800271a <HAL_I2C_Init+0x136>
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	4319      	orrs	r1, r3
 800269a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800269c:	6811      	ldr	r1, [r2, #0]
 800269e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80026a2:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80026a6:	4303      	orrs	r3, r0
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ac:	6891      	ldr	r1, [r2, #8]
 80026ae:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80026b2:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80026b6:	4303      	orrs	r3, r0
 80026b8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	68d1      	ldr	r1, [r2, #12]
 80026c2:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80026c6:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80026ca:	4303      	orrs	r3, r0
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80026d0:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d2:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80026da:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80026e8:	e780      	b.n	80025ec <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ea:	68a0      	ldr	r0, [r4, #8]
 80026ec:	b950      	cbnz	r0, 8002704 <HAL_I2C_Init+0x120>
 80026ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	b17b      	cbz	r3, 800271e <HAL_I2C_Init+0x13a>
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002702:	e7c9      	b.n	8002698 <HAL_I2C_Init+0xb4>
 8002704:	2019      	movs	r0, #25
 8002706:	4368      	muls	r0, r5
 8002708:	fbb3 f3f0 	udiv	r3, r3, r0
 800270c:	3301      	adds	r3, #1
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	b123      	cbz	r3, 800271e <HAL_I2C_Init+0x13a>
 8002714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002718:	e7be      	b.n	8002698 <HAL_I2C_Init+0xb4>
 800271a:	2304      	movs	r3, #4
 800271c:	e7bc      	b.n	8002698 <HAL_I2C_Init+0xb4>
 800271e:	2301      	movs	r3, #1
 8002720:	e7ba      	b.n	8002698 <HAL_I2C_Init+0xb4>
 8002722:	bf00      	nop
 8002724:	000186a0 	.word	0x000186a0
 8002728:	001e847f 	.word	0x001e847f
 800272c:	003d08ff 	.word	0x003d08ff
 8002730:	000f4240 	.word	0x000f4240

08002734 <HAL_I2C_Mem_Write>:
{
 8002734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002738:	4604      	mov	r4, r0
 800273a:	4699      	mov	r9, r3
 800273c:	460f      	mov	r7, r1
 800273e:	4690      	mov	r8, r2
 8002740:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002742:	f7ff fb31 	bl	8001da8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 800274a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	2b20      	cmp	r3, #32
 800274e:	d003      	beq.n	8002758 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8002750:	2002      	movs	r0, #2
}
 8002752:	b003      	add	sp, #12
 8002754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002758:	9000      	str	r0, [sp, #0]
 800275a:	2319      	movs	r3, #25
 800275c:	2201      	movs	r2, #1
 800275e:	4620      	mov	r0, r4
 8002760:	493a      	ldr	r1, [pc, #232]	@ (800284c <HAL_I2C_Mem_Write+0x118>)
 8002762:	f7ff fe0e 	bl	8002382 <I2C_WaitOnFlagUntilTimeout>
 8002766:	2800      	cmp	r0, #0
 8002768:	d1f2      	bne.n	8002750 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800276a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d0ee      	beq.n	8002750 <HAL_I2C_Mem_Write+0x1c>
 8002772:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002774:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002776:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800277c:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277e:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002780:	bf58      	it	pl
 8002782:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002784:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8002786:	bf5c      	itt	pl
 8002788:	f043 0301 	orrpl.w	r3, r3, #1
 800278c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278e:	6803      	ldr	r3, [r0, #0]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002794:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002796:	2321      	movs	r3, #33	@ 0x21
 8002798:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800279c:	2340      	movs	r3, #64	@ 0x40
 800279e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80027a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a8:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80027aa:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80027b0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027b4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_I2C_Mem_Write+0x11c>)
 80027b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ba:	464b      	mov	r3, r9
 80027bc:	e9cd 6500 	strd	r6, r5, [sp]
 80027c0:	f7ff fe8c 	bl	80024dc <I2C_RequestMemoryWrite>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d02a      	beq.n	800281e <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e7c2      	b.n	8002752 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	f7ff fe5b 	bl	8002486 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	b140      	cbz	r0, 80027e4 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d4:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	bf01      	itttt	eq
 80027d8:	6822      	ldreq	r2, [r4, #0]
 80027da:	6813      	ldreq	r3, [r2, #0]
 80027dc:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80027e0:	6013      	streq	r3, [r2, #0]
 80027e2:	e7f1      	b.n	80027c8 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027e6:	6827      	ldr	r7, [r4, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f812 1b01 	ldrb.w	r1, [r2], #1
 80027ee:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80027f0:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80027f2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80027f4:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80027f6:	3a01      	subs	r2, #1
 80027f8:	b292      	uxth	r2, r2
 80027fa:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027fc:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80027fe:	1e48      	subs	r0, r1, #1
 8002800:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002802:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002804:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002806:	d50a      	bpl.n	800281e <HAL_I2C_Mem_Write+0xea>
 8002808:	b148      	cbz	r0, 800281e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 800280c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002810:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002812:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002814:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002816:	3b01      	subs	r3, #1
 8002818:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800281a:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800281c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800281e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002820:	462a      	mov	r2, r5
 8002822:	4631      	mov	r1, r6
 8002824:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d0      	bne.n	80027cc <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	f7ff feb1 	bl	8002590 <I2C_WaitOnBTFFlagUntilTimeout>
 800282e:	2800      	cmp	r0, #0
 8002830:	d1cf      	bne.n	80027d2 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800283a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800283e:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 800284a:	e782      	b.n	8002752 <HAL_I2C_Mem_Write+0x1e>
 800284c:	00100002 	.word	0x00100002
 8002850:	ffff0000 	.word	0xffff0000

08002854 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002854:	4770      	bx	lr

08002856 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002856:	4770      	bx	lr

08002858 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002858:	4770      	bx	lr

0800285a <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800285a:	4770      	bx	lr

0800285c <HAL_I2C_AddrCallback>:
}
 800285c:	4770      	bx	lr

0800285e <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 800285e:	4770      	bx	lr

08002860 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002860:	4770      	bx	lr

08002862 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002862:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8002866:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8002868:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800286a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800286c:	b983      	cbnz	r3, 8002890 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800286e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002870:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002872:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002874:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002876:	d105      	bne.n	8002884 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002878:	b2db      	uxtb	r3, r3
 800287a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800287c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800287e:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8002880:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8002882:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002884:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002888:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800288a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800288c:	3301      	adds	r3, #1
 800288e:	e7f7      	b.n	8002880 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8002890:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002892:	2b01      	cmp	r3, #1
 8002894:	d103      	bne.n	800289e <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002896:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002898:	6802      	ldr	r2, [r0, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e7f4      	b.n	8002888 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 800289e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d12f      	bne.n	8002904 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80028a4:	2a22      	cmp	r2, #34	@ 0x22
 80028a6:	d105      	bne.n	80028b4 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80028a8:	6802      	ldr	r2, [r0, #0]
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b0:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80028b2:	e7ea      	b.n	800288a <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028b4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	b163      	cbz	r3, 80028d4 <I2C_MemoryTransmit_TXE_BTF+0x72>
 80028ba:	2a21      	cmp	r2, #33	@ 0x21
 80028bc:	d10a      	bne.n	80028d4 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80028c0:	6802      	ldr	r2, [r0, #0]
 80028c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80028c6:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80028c8:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80028ca:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80028d2:	e7d6      	b.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028d4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1d2      	bne.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80028dc:	2a21      	cmp	r2, #33	@ 0x21
 80028de:	d1d0      	bne.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e0:	6802      	ldr	r2, [r0, #0]
 80028e2:	6851      	ldr	r1, [r2, #4]
 80028e4:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80028e8:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80028f0:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80028f4:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028fe:	f7ff ffaf 	bl	8002860 <HAL_I2C_MemTxCpltCallback>
 8002902:	e7be      	b.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002904:	6803      	ldr	r3, [r0, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 800290a:	bf44      	itt	mi
 800290c:	2200      	movmi	r2, #0
 800290e:	611a      	strmi	r2, [r3, #16]
}
 8002910:	e7b7      	b.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0x20>

08002912 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8002914:	4770      	bx	lr

08002916 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8002916:	4770      	bx	lr

08002918 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8002918:	2300      	movs	r3, #0
{
 800291a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800291c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 8002920:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002922:	4b2c      	ldr	r3, [pc, #176]	@ (80029d4 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002924:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002926:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002928:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800292c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002930:	2123      	movs	r1, #35	@ 0x23
 8002932:	434b      	muls	r3, r1
 8002934:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002936:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002938:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 800293a:	9901      	ldr	r1, [sp, #4]
 800293c:	bb41      	cbnz	r1, 8002990 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8002940:	f041 0120 	orr.w	r1, r1, #32
 8002944:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8002946:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002948:	b10c      	cbz	r4, 800294e <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800294a:	2100      	movs	r1, #0
 800294c:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 800294e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002950:	b109      	cbz	r1, 8002956 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002952:	2500      	movs	r5, #0
 8002954:	628d      	str	r5, [r1, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	681d      	ldr	r5, [r3, #0]
 8002958:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800295c:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 800295e:	2500      	movs	r5, #0
 8002960:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8002962:	b104      	cbz	r4, 8002966 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002964:	6365      	str	r5, [r4, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8002966:	b101      	cbz	r1, 800296a <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002968:	634d      	str	r5, [r1, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	f021 0101 	bic.w	r1, r1, #1
 8002970:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002972:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8002976:	2960      	cmp	r1, #96	@ 0x60
 8002978:	d111      	bne.n	800299e <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 800297a:	2320      	movs	r3, #32
 800297c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002980:	2300      	movs	r3, #0
 8002982:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002986:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002988:	f7ff ffc5 	bl	8002916 <HAL_I2C_AbortCpltCallback>
}
 800298c:	b003      	add	sp, #12
 800298e:	bd30      	pop	{r4, r5, pc}
    count--;
 8002990:	9901      	ldr	r1, [sp, #4]
 8002992:	3901      	subs	r1, #1
 8002994:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	0589      	lsls	r1, r1, #22
 800299a:	d4ce      	bmi.n	800293a <I2C_DMAAbort+0x22>
 800299c:	e7d3      	b.n	8002946 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800299e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80029a2:	2a28      	cmp	r2, #40	@ 0x28
 80029a4:	d10e      	bne.n	80029c4 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	f041 0101 	orr.w	r1, r1, #1
 80029ac:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80029b4:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029ba:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80029be:	f7ff ffa9 	bl	8002914 <HAL_I2C_ErrorCallback>
}
 80029c2:	e7e3      	b.n	800298c <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	2320      	movs	r3, #32
 80029c6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 80029d0:	e7f5      	b.n	80029be <I2C_DMAAbort+0xa6>
 80029d2:	bf00      	nop
 80029d4:	20000018 	.word	0x20000018

080029d8 <I2C_ITError>:
{
 80029d8:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029da:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029de:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 80029e2:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029e4:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029e6:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029e8:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029ea:	6803      	ldr	r3, [r0, #0]
 80029ec:	d001      	beq.n	80029f2 <I2C_ITError+0x1a>
 80029ee:	2940      	cmp	r1, #64	@ 0x40
 80029f0:	d113      	bne.n	8002a1a <I2C_ITError+0x42>
 80029f2:	2a22      	cmp	r2, #34	@ 0x22
 80029f4:	d111      	bne.n	8002a1a <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80029fc:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 8002a04:	d106      	bne.n	8002a14 <I2C_ITError+0x3c>
 8002a06:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	bf1e      	ittt	ne
 8002a0a:	2220      	movne	r2, #32
 8002a0c:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a14:	2200      	movs	r2, #0
 8002a16:	6322      	str	r2, [r4, #48]	@ 0x30
 8002a18:	e007      	b.n	8002a2a <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a1a:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 8002a1e:	2928      	cmp	r1, #40	@ 0x28
 8002a20:	d1ed      	bne.n	80029fe <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a22:	2200      	movs	r2, #0
 8002a24:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a26:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8002a30:	d04f      	beq.n	8002ad2 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a32:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a34:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a3c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <I2C_ITError+0x148>)
 8002a44:	d02b      	beq.n	8002a9e <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a46:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a48:	f7ff fa2a 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8002a4c:	b150      	cbz	r0, 8002a64 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8002a4e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a50:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002a62:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8002a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a66:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a68:	bf1f      	itttt	ne
 8002a6a:	6822      	ldrne	r2, [r4, #0]
 8002a6c:	6853      	ldrne	r3, [r2, #4]
 8002a6e:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 8002a72:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002a74:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a78:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 8002a7a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a7c:	0752      	lsls	r2, r2, #29
 8002a7e:	d50d      	bpl.n	8002a9c <I2C_ITError+0xc4>
 8002a80:	2b28      	cmp	r3, #40	@ 0x28
 8002a82:	d10b      	bne.n	8002a9c <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a86:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a88:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a8c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a90:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a94:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a98:	f7ff fee1 	bl	800285e <HAL_I2C_ListenCpltCallback>
}
 8002a9c:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a9e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002aa0:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aa2:	f7ff f9fd 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d0dc      	beq.n	8002a64 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	0651      	lsls	r1, r2, #25
 8002ab0:	d505      	bpl.n	8002abe <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ab6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ab8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002aba:	3301      	adds	r3, #1
 8002abc:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002abe:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ac0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	2320      	movs	r3, #32
 8002acc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ad0:	e7c6      	b.n	8002a60 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ad2:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8002ad6:	2960      	cmp	r1, #96	@ 0x60
 8002ad8:	d115      	bne.n	8002b06 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	2120      	movs	r1, #32
 8002adc:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	0652      	lsls	r2, r2, #25
 8002ae6:	d505      	bpl.n	8002af4 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002aec:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002aee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002af4:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002af6:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b00:	f7ff ff09 	bl	8002916 <HAL_I2C_AbortCpltCallback>
 8002b04:	e7ae      	b.n	8002a64 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	0650      	lsls	r0, r2, #25
 8002b0a:	d505      	bpl.n	8002b18 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b10:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002b12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fefb 	bl	8002914 <HAL_I2C_ErrorCallback>
 8002b1e:	e7a1      	b.n	8002a64 <I2C_ITError+0x8c>
 8002b20:	08002919 	.word	0x08002919
 8002b24:	ffff0000 	.word	0xffff0000

08002b28 <HAL_I2C_EV_IRQHandler>:
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b2c:	6803      	ldr	r3, [r0, #0]
{
 8002b2e:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b30:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b32:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b34:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b38:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b3c:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b3e:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b40:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b42:	d002      	beq.n	8002b4a <HAL_I2C_EV_IRQHandler+0x22>
 8002b44:	2d40      	cmp	r5, #64	@ 0x40
 8002b46:	f040 82e5 	bne.w	8003114 <HAL_I2C_EV_IRQHandler+0x5ec>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b4a:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b4c:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b4e:	f010 0f01 	tst.w	r0, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_I2C_EV_IRQHandler+0x3c>
 8002b54:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8002b58:	d002      	beq.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8002b5a:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8002b5e:	d151      	bne.n	8002c04 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8002b60:	b00f      	add	sp, #60	@ 0x3c
 8002b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b64:	0596      	lsls	r6, r2, #22
 8002b66:	d54d      	bpl.n	8002c04 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b68:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b6a:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8002b6e:	d10c      	bne.n	8002b8a <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b70:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002b72:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b74:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8002b78:	2a40      	cmp	r2, #64	@ 0x40
 8002b7a:	d111      	bne.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002b7c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002b7e:	b952      	cbnz	r2, 8002b96 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b80:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002b82:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	e7ea      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002b8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b8c:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8002b90:	d1f0      	bne.n	8002b74 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002b92:	2208      	movs	r2, #8
 8002b94:	e7ed      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b96:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	e7f2      	b.n	8002b86 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba0:	6922      	ldr	r2, [r4, #16]
 8002ba2:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8002ba6:	d11a      	bne.n	8002bde <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ba8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002bac:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bae:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bb0:	d111      	bne.n	8002bd6 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bb2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bb6:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bb8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002bba:	b10a      	cbz	r2, 8002bc0 <HAL_I2C_EV_IRQHandler+0x98>
 8002bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bbe:	b92a      	cbnz	r2, 8002bcc <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002bc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d0cc      	beq.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8002bc6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d0c9      	beq.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	e7c4      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	e7eb      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8002bde:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002be0:	b932      	cbnz	r2, 8002bf0 <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002be2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002be4:	11d2      	asrs	r2, r2, #7
 8002be6:	f002 0206 	and.w	r2, r2, #6
 8002bea:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8002bee:	e7ca      	b.n	8002b86 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8002bf0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002bf2:	2a01      	cmp	r2, #1
 8002bf4:	d1b4      	bne.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bf6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002bf8:	11d2      	asrs	r2, r2, #7
 8002bfa:	f002 0206 	and.w	r2, r2, #6
 8002bfe:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8002c02:	e7c0      	b.n	8002b86 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c04:	0706      	lsls	r6, r0, #28
 8002c06:	d503      	bpl.n	8002c10 <HAL_I2C_EV_IRQHandler+0xe8>
 8002c08:	0596      	lsls	r6, r2, #22
 8002c0a:	d501      	bpl.n	8002c10 <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002c0e:	e7e4      	b.n	8002bda <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c10:	0786      	lsls	r6, r0, #30
 8002c12:	f140 80f0 	bpl.w	8002df6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002c16:	0596      	lsls	r6, r2, #22
 8002c18:	f140 80ed 	bpl.w	8002df6 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c1c:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c24:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c28:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c2a:	2822      	cmp	r0, #34	@ 0x22
 8002c2c:	f040 80db 	bne.w	8002de6 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c30:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002c32:	b940      	cbnz	r0, 8002c46 <HAL_I2C_EV_IRQHandler+0x11e>
 8002c34:	2940      	cmp	r1, #64	@ 0x40
 8002c36:	d106      	bne.n	8002c46 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c38:	9000      	str	r0, [sp, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	9200      	str	r2, [sp, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	9b00      	ldr	r3, [sp, #0]
 8002c44:	e78c      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c46:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002c48:	b989      	cbnz	r1, 8002c6e <HAL_I2C_EV_IRQHandler+0x146>
 8002c4a:	6920      	ldr	r0, [r4, #16]
 8002c4c:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8002c50:	d10d      	bne.n	8002c6e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	9101      	str	r1, [sp, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	9201      	str	r2, [sp, #4]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	9201      	str	r2, [sp, #4]
 8002c5c:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c64:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c66:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002c68:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8002c6a:	6523      	str	r3, [r4, #80]	@ 0x50
 8002c6c:	e778      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8002c6e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002c70:	b289      	uxth	r1, r1
 8002c72:	b951      	cbnz	r1, 8002c8a <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c74:	9102      	str	r1, [sp, #8]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	9202      	str	r2, [sp, #8]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	9202      	str	r2, [sp, #8]
 8002c7e:	9a02      	ldr	r2, [sp, #8]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e019      	b.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8002c8a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002c8c:	b289      	uxth	r1, r1
 8002c8e:	2901      	cmp	r1, #1
 8002c90:	d149      	bne.n	8002d26 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c92:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cae:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	9203      	str	r2, [sp, #12]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	9203      	str	r2, [sp, #12]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e7d3      	b.n	8002c6a <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	9204      	str	r2, [sp, #16]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	9204      	str	r2, [sp, #16]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	9204      	str	r2, [sp, #16]
 8002ccc:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	e7d7      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002cd0:	2a08      	cmp	r2, #8
 8002cd2:	d01c      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x1e6>
 8002cd4:	2a20      	cmp	r2, #32
 8002cd6:	d01a      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002cd8:	2d12      	cmp	r5, #18
 8002cda:	d10d      	bne.n	8002cf8 <HAL_I2C_EV_IRQHandler+0x1d0>
 8002cdc:	2a01      	cmp	r2, #1
 8002cde:	d116      	bne.n	8002d0e <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	9205      	str	r2, [sp, #20]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	9205      	str	r2, [sp, #20]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	9305      	str	r3, [sp, #20]
 8002cf4:	9b05      	ldr	r3, [sp, #20]
 8002cf6:	e7e2      	b.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cf8:	2a10      	cmp	r2, #16
 8002cfa:	d8f1      	bhi.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
 8002cfc:	4986      	ldr	r1, [pc, #536]	@ (8002f18 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8002cfe:	fa41 f202 	asr.w	r2, r1, r2
 8002d02:	07d7      	lsls	r7, r2, #31
 8002d04:	d4ec      	bmi.n	8002ce0 <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d0c:	e7eb      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d14:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2200      	movs	r2, #0
 8002d18:	9206      	str	r2, [sp, #24]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	9206      	str	r2, [sp, #24]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	9206      	str	r2, [sp, #24]
 8002d22:	9a06      	ldr	r2, [sp, #24]
 8002d24:	e7ac      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8002d26:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002d28:	b289      	uxth	r1, r1
 8002d2a:	2902      	cmp	r1, #2
 8002d2c:	d138      	bne.n	8002da0 <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d2e:	2a10      	cmp	r2, #16
 8002d30:	d803      	bhi.n	8002d3a <HAL_I2C_EV_IRQHandler+0x212>
 8002d32:	497a      	ldr	r1, [pc, #488]	@ (8002f1c <HAL_I2C_EV_IRQHandler+0x3f4>)
 8002d34:	40d1      	lsrs	r1, r2
 8002d36:	07ce      	lsls	r6, r1, #31
 8002d38:	d418      	bmi.n	8002d6c <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8002d40:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2100      	movs	r1, #0
 8002d44:	9107      	str	r1, [sp, #28]
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	9107      	str	r1, [sp, #28]
 8002d4a:	6999      	ldr	r1, [r3, #24]
 8002d4c:	9107      	str	r1, [sp, #28]
 8002d4e:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002d56:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	050d      	lsls	r5, r1, #20
 8002d5c:	d5af      	bpl.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
 8002d5e:	2a20      	cmp	r2, #32
 8002d60:	d81b      	bhi.n	8002d9a <HAL_I2C_EV_IRQHandler+0x272>
 8002d62:	2a07      	cmp	r2, #7
 8002d64:	d80e      	bhi.n	8002d84 <HAL_I2C_EV_IRQHandler+0x25c>
 8002d66:	2a01      	cmp	r2, #1
 8002d68:	d1a9      	bne.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
 8002d6a:	e011      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002d72:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d74:	2100      	movs	r1, #0
 8002d76:	9108      	str	r1, [sp, #32]
 8002d78:	6959      	ldr	r1, [r3, #20]
 8002d7a:	9108      	str	r1, [sp, #32]
 8002d7c:	6999      	ldr	r1, [r3, #24]
 8002d7e:	9108      	str	r1, [sp, #32]
 8002d80:	9908      	ldr	r1, [sp, #32]
 8002d82:	e7e9      	b.n	8002d58 <HAL_I2C_EV_IRQHandler+0x230>
 8002d84:	f1a2 0108 	sub.w	r1, r2, #8
 8002d88:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_I2C_EV_IRQHandler+0x3f8>)
 8002d8a:	40ca      	lsrs	r2, r1
 8002d8c:	07d0      	lsls	r0, r2, #31
 8002d8e:	d596      	bpl.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	e791      	b.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
 8002d9a:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002d9e:	e7e3      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002da6:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	0509      	lsls	r1, r1, #20
 8002dac:	d510      	bpl.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x2a8>
 8002dae:	2a20      	cmp	r2, #32
 8002db0:	d816      	bhi.n	8002de0 <HAL_I2C_EV_IRQHandler+0x2b8>
 8002db2:	2a07      	cmp	r2, #7
 8002db4:	d806      	bhi.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x29c>
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	d10a      	bne.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x2a8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e005      	b.n	8002dd0 <HAL_I2C_EV_IRQHandler+0x2a8>
 8002dc4:	f1a2 0108 	sub.w	r1, r2, #8
 8002dc8:	4a55      	ldr	r2, [pc, #340]	@ (8002f20 <HAL_I2C_EV_IRQHandler+0x3f8>)
 8002dca:	40ca      	lsrs	r2, r1
 8002dcc:	07d2      	lsls	r2, r2, #31
 8002dce:	d4f4      	bmi.n	8002dba <HAL_I2C_EV_IRQHandler+0x292>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dde:	e76e      	b.n	8002cbe <HAL_I2C_EV_IRQHandler+0x196>
 8002de0:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002de4:	e7e8      	b.n	8002db8 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2200      	movs	r2, #0
 8002de8:	920a      	str	r2, [sp, #40]	@ 0x28
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	920a      	str	r2, [sp, #40]	@ 0x28
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8002df2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002df4:	e6b4      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002df6:	077f      	lsls	r7, r7, #29
 8002df8:	f140 8094 	bpl.w	8002f24 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dfc:	685e      	ldr	r6, [r3, #4]
 8002dfe:	0536      	lsls	r6, r6, #20
 8002e00:	f53f aeae 	bmi.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e04:	0607      	lsls	r7, r0, #24
 8002e06:	f000 0604 	and.w	r6, r0, #4
 8002e0a:	d53e      	bpl.n	8002e8a <HAL_I2C_EV_IRQHandler+0x362>
 8002e0c:	0550      	lsls	r0, r2, #21
 8002e0e:	d53c      	bpl.n	8002e8a <HAL_I2C_EV_IRQHandler+0x362>
 8002e10:	2e00      	cmp	r6, #0
 8002e12:	d13d      	bne.n	8002e90 <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e14:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e18:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e1a:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e1e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e20:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e22:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e24:	b9c5      	cbnz	r5, 8002e58 <HAL_I2C_EV_IRQHandler+0x330>
 8002e26:	2a21      	cmp	r2, #33	@ 0x21
 8002e28:	d118      	bne.n	8002e5c <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e2a:	2808      	cmp	r0, #8
 8002e2c:	d058      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002e2e:	2820      	cmp	r0, #32
 8002e30:	d056      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002e32:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8002e36:	d053      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e3e:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e40:	2311      	movs	r3, #17
 8002e42:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e4c:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e52:	f7ff fcff 	bl	8002854 <HAL_I2C_MasterTxCpltCallback>
 8002e56:	e683      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e58:	2a21      	cmp	r2, #33	@ 0x21
 8002e5a:	d005      	beq.n	8002e68 <HAL_I2C_EV_IRQHandler+0x340>
 8002e5c:	2940      	cmp	r1, #64	@ 0x40
 8002e5e:	f47f ae7f 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e62:	2a22      	cmp	r2, #34	@ 0x22
 8002e64:	f47f ae7c 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002e68:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	b91a      	cbnz	r2, 8002e76 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e74:	e6ad      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e76:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8002e7a:	2a40      	cmp	r2, #64	@ 0x40
 8002e7c:	d116      	bne.n	8002eac <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e7e:	4620      	mov	r0, r4
}
 8002e80:	b00f      	add	sp, #60	@ 0x3c
 8002e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e86:	f7ff bcec 	b.w	8002862 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e8a:	2e00      	cmp	r6, #0
 8002e8c:	f43f ae68 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8002e90:	0597      	lsls	r7, r2, #22
 8002e92:	f57f ae65 	bpl.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e96:	2921      	cmp	r1, #33	@ 0x21
 8002e98:	d139      	bne.n	8002f0e <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e9c:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002ea0:	2a21      	cmp	r2, #33	@ 0x21
 8002ea2:	f47f ae5d 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002ea6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	b14a      	cbz	r2, 8002ec0 <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002eae:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002eb2:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002eb4:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002eb6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 8002ebe:	e64f      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ec0:	2908      	cmp	r1, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002ec4:	2920      	cmp	r1, #32
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002ec8:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8002ecc:	d008      	beq.n	8002ee0 <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002ed4:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ed6:	2311      	movs	r3, #17
 8002ed8:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8002ede:	e7b4      	b.n	8002e4a <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee0:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ee2:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ee8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ef2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ef6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002efc:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f04:	2a40      	cmp	r2, #64	@ 0x40
 8002f06:	d1a4      	bne.n	8002e52 <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f08:	f7ff fcaa 	bl	8002860 <HAL_I2C_MemTxCpltCallback>
 8002f0c:	e628      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f0e:	2d40      	cmp	r5, #64	@ 0x40
 8002f10:	f47f ae26 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8002f14:	e7b3      	b.n	8002e7e <HAL_I2C_EV_IRQHandler+0x356>
 8002f16:	bf00      	nop
 8002f18:	fffeffeb 	.word	0xfffeffeb
 8002f1c:	00010014 	.word	0x00010014
 8002f20:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	050e      	lsls	r6, r1, #20
 8002f28:	f53f ae1a 	bmi.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f2c:	0645      	lsls	r5, r0, #25
 8002f2e:	f000 0104 	and.w	r1, r0, #4
 8002f32:	f140 8086 	bpl.w	8003042 <HAL_I2C_EV_IRQHandler+0x51a>
 8002f36:	0550      	lsls	r0, r2, #21
 8002f38:	f140 8083 	bpl.w	8003042 <HAL_I2C_EV_IRQHandler+0x51a>
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	f040 8083 	bne.w	8003048 <HAL_I2C_EV_IRQHandler+0x520>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f42:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002f46:	2a22      	cmp	r2, #34	@ 0x22
 8002f48:	f47f ae0a 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8002f4c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8002f4e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002f50:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002f52:	2a03      	cmp	r2, #3
 8002f54:	d914      	bls.n	8002f80 <HAL_I2C_EV_IRQHandler+0x458>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f5a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f5e:	3301      	adds	r3, #1
 8002f60:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002f62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002f6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	f47f adf6 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	6853      	ldr	r3, [r2, #4]
 8002f78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f7c:	6053      	str	r3, [r2, #4]
 8002f7e:	e5ef      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f80:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002f82:	2d02      	cmp	r5, #2
 8002f84:	f43f af73 	beq.w	8002e6e <HAL_I2C_EV_IRQHandler+0x346>
 8002f88:	2a01      	cmp	r2, #1
 8002f8a:	f63f af70 	bhi.w	8002e6e <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 8002f8e:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f90:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002f94:	4a78      	ldr	r2, [pc, #480]	@ (8003178 <HAL_I2C_EV_IRQHandler+0x650>)
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fbb2 f2f1 	udiv	r2, r2, r1
 8002f9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002fa0:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 8002fa2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8002fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002faa:	b9d1      	cbnz	r1, 8002fe2 <HAL_I2C_EV_IRQHandler+0x4ba>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8002fae:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fbc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002fca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002fdc:	f7ff fc9a 	bl	8002914 <HAL_I2C_ErrorCallback>
 8002fe0:	e5be      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8002fe8:	d1db      	bne.n	8002fa2 <HAL_I2C_EV_IRQHandler+0x47a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	6819      	ldr	r1, [r3, #0]
 8002fec:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002ff0:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002ff8:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	6919      	ldr	r1, [r3, #16]
 8002ffc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ffe:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8003000:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003002:	3301      	adds	r3, #1
 8003004:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003006:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003008:	3b01      	subs	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	2320      	movs	r3, #32
 8003010:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003014:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d104      	bne.n	800302a <HAL_I2C_EV_IRQHandler+0x502>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff fc75 	bl	8002912 <HAL_I2C_MemRxCpltCallback>
 8003028:	e59a      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800302a:	2808      	cmp	r0, #8
 800302c:	d001      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x50a>
 800302e:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003030:	d101      	bne.n	8003036 <HAL_I2C_EV_IRQHandler+0x50e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_EV_IRQHandler+0x510>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003036:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003038:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800303a:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800303c:	f7ff fc0b 	bl	8002856 <HAL_I2C_MasterRxCpltCallback>
 8003040:	e58e      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	2900      	cmp	r1, #0
 8003044:	f43f ad8c 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8003048:	0592      	lsls	r2, r2, #22
 800304a:	f57f ad89 	bpl.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8003050:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003052:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8003054:	b280      	uxth	r0, r0
 8003056:	2804      	cmp	r0, #4
 8003058:	d109      	bne.n	800306e <HAL_I2C_EV_IRQHandler+0x546>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003060:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003066:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003068:	3301      	adds	r3, #1
 800306a:	6263      	str	r3, [r4, #36]	@ 0x24
 800306c:	e723      	b.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 800306e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8003070:	b280      	uxth	r0, r0
 8003072:	2803      	cmp	r0, #3
 8003074:	d10c      	bne.n	8003090 <HAL_I2C_EV_IRQHandler+0x568>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003076:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003078:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800307a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 800307e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003080:	d0ef      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x53a>
 8003082:	2a02      	cmp	r2, #2
 8003084:	d0ed      	beq.n	8003062 <HAL_I2C_EV_IRQHandler+0x53a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	e7e8      	b.n	8003062 <HAL_I2C_EV_IRQHandler+0x53a>
  else if (hi2c->XferCount == 2U)
 8003090:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8003092:	b280      	uxth	r0, r0
 8003094:	2802      	cmp	r0, #2
 8003096:	d1e4      	bne.n	8003062 <HAL_I2C_EV_IRQHandler+0x53a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003098:	2a04      	cmp	r2, #4
 800309a:	d033      	beq.n	8003104 <HAL_I2C_EV_IRQHandler+0x5dc>
 800309c:	d807      	bhi.n	80030ae <HAL_I2C_EV_IRQHandler+0x586>
 800309e:	2a01      	cmp	r2, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_EV_IRQHandler+0x58a>
 80030a2:	2a02      	cmp	r2, #2
 80030a4:	d02e      	beq.n	8003104 <HAL_I2C_EV_IRQHandler+0x5dc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80030ac:	e004      	b.n	80030b8 <HAL_I2C_EV_IRQHandler+0x590>
 80030ae:	2a10      	cmp	r2, #16
 80030b0:	d1f9      	bne.n	80030a6 <HAL_I2C_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80030be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80030c0:	1c4b      	adds	r3, r1, #1
 80030c2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80030c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 80030d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030d4:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80030d6:	3301      	adds	r3, #1
 80030d8:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80030da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030e2:	684b      	ldr	r3, [r1, #4]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	2320      	movs	r3, #32
 80030ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030fe:	d105      	bne.n	800310c <HAL_I2C_EV_IRQHandler+0x5e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003100:	6323      	str	r3, [r4, #48]	@ 0x30
 8003102:	e78e      	b.n	8003022 <HAL_I2C_EV_IRQHandler+0x4fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 800310a:	e7d5      	b.n	80030b8 <HAL_I2C_EV_IRQHandler+0x590>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800310c:	2a08      	cmp	r2, #8
 800310e:	d090      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x50a>
 8003110:	2a20      	cmp	r2, #32
 8003112:	e78d      	b.n	8003030 <HAL_I2C_EV_IRQHandler+0x508>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003114:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003116:	b310      	cbz	r0, 800315e <HAL_I2C_EV_IRQHandler+0x636>
  uint32_t sr2itflags               = 0U;
 8003118:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800311a:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800311c:	0787      	lsls	r7, r0, #30
 800311e:	d52d      	bpl.n	800317c <HAL_I2C_EV_IRQHandler+0x654>
 8003120:	0596      	lsls	r6, r2, #22
 8003122:	d52b      	bpl.n	800317c <HAL_I2C_EV_IRQHandler+0x654>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003124:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003126:	b102      	cbz	r2, 800312a <HAL_I2C_EV_IRQHandler+0x602>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003128:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312a:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800312e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8003132:	2a28      	cmp	r2, #40	@ 0x28
 8003134:	d116      	bne.n	8003164 <HAL_I2C_EV_IRQHandler+0x63c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003136:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003138:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8003140:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003144:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003148:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800314a:	bf54      	ite	pl
 800314c:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800314e:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003150:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 8003154:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003158:	f7ff fb80 	bl	800285c <HAL_I2C_AddrCallback>
 800315c:	e500      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800315e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003160:	6958      	ldr	r0, [r3, #20]
 8003162:	e7db      	b.n	800311c <HAL_I2C_EV_IRQHandler+0x5f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003164:	2200      	movs	r2, #0
 8003166:	920c      	str	r2, [sp, #48]	@ 0x30
 8003168:	6959      	ldr	r1, [r3, #20]
 800316a:	910c      	str	r1, [sp, #48]	@ 0x30
 800316c:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 800316e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	930c      	str	r3, [sp, #48]	@ 0x30
 8003174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003176:	e4f3      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8003178:	20000018 	.word	0x20000018
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317c:	06c6      	lsls	r6, r0, #27
 800317e:	f140 80b1 	bpl.w	80032e4 <HAL_I2C_EV_IRQHandler+0x7bc>
 8003182:	0595      	lsls	r5, r2, #22
 8003184:	f140 80ae 	bpl.w	80032e4 <HAL_I2C_EV_IRQHandler+0x7bc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003188:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318c:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800318e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003190:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003194:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003196:	2200      	movs	r2, #0
 8003198:	920d      	str	r2, [sp, #52]	@ 0x34
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	920d      	str	r2, [sp, #52]	@ 0x34
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ae:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	0510      	lsls	r0, r2, #20
 80031b4:	d520      	bpl.n	80031f8 <HAL_I2C_EV_IRQHandler+0x6d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b6:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 80031ba:	2a22      	cmp	r2, #34	@ 0x22
 80031bc:	d14a      	bne.n	8003254 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80031be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80031c0:	6802      	ldr	r2, [r0, #0]
 80031c2:	6852      	ldr	r2, [r2, #4]
 80031c4:	b292      	uxth	r2, r2
 80031c6:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80031c8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80031ca:	b292      	uxth	r2, r2
 80031cc:	b11a      	cbz	r2, 80031d6 <HAL_I2C_EV_IRQHandler+0x6ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031de:	f7fe fea5 	bl	8001f2c <HAL_DMA_GetState>
 80031e2:	2801      	cmp	r0, #1
 80031e4:	d008      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80031e8:	4b79      	ldr	r3, [pc, #484]	@ (80033d0 <HAL_I2C_EV_IRQHandler+0x8a8>)
 80031ea:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ec:	f7fe fe58 	bl	8001ea0 <HAL_DMA_Abort_IT>
 80031f0:	b110      	cbz	r0, 80031f8 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031f4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80031f6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80031f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	b313      	cbz	r3, 8003244 <HAL_I2C_EV_IRQHandler+0x71c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	0751      	lsls	r1, r2, #29
 8003204:	d509      	bpl.n	800321a <HAL_I2C_EV_IRQHandler+0x6f2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800320a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800320c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003212:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003214:	3b01      	subs	r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	0652      	lsls	r2, r2, #25
 8003220:	d509      	bpl.n	8003236 <HAL_I2C_EV_IRQHandler+0x70e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003226:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003228:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800322a:	3301      	adds	r3, #1
 800322c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800322e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003230:	3b01      	subs	r3, #1
 8003232:	b29b      	uxth	r3, r3
 8003234:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003236:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	b11b      	cbz	r3, 8003244 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800323c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003244:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003246:	b313      	cbz	r3, 800328e <HAL_I2C_EV_IRQHandler+0x766>
    I2C_ITError(hi2c);
 8003248:	4620      	mov	r0, r4
}
 800324a:	b00f      	add	sp, #60	@ 0x3c
 800324c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003250:	f7ff bbc2 	b.w	80029d8 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003254:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003256:	6802      	ldr	r2, [r0, #0]
 8003258:	6852      	ldr	r2, [r2, #4]
 800325a:	b292      	uxth	r2, r2
 800325c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 800325e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003260:	b292      	uxth	r2, r2
 8003262:	b11a      	cbz	r2, 800326c <HAL_I2C_EV_IRQHandler+0x744>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003264:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003266:	f042 0204 	orr.w	r2, r2, #4
 800326a:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003274:	f7fe fe5a 	bl	8001f2c <HAL_DMA_GetState>
 8003278:	2801      	cmp	r0, #1
 800327a:	d0bd      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800327c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800327e:	4b54      	ldr	r3, [pc, #336]	@ (80033d0 <HAL_I2C_EV_IRQHandler+0x8a8>)
 8003280:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003282:	f7fe fe0d 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8003286:	2800      	cmp	r0, #0
 8003288:	d0b6      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800328a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800328c:	e7b2      	b.n	80031f4 <HAL_I2C_EV_IRQHandler+0x6cc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800328e:	2d2a      	cmp	r5, #42	@ 0x2a
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_EV_IRQHandler+0x778>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003292:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003294:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003296:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003298:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800329c:	f7ff fadd 	bl	800285a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80032a4:	2b28      	cmp	r3, #40	@ 0x28
 80032a6:	d10c      	bne.n	80032c2 <HAL_I2C_EV_IRQHandler+0x79a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a8:	4b4a      	ldr	r3, [pc, #296]	@ (80033d4 <HAL_I2C_EV_IRQHandler+0x8ac>)
      hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ae:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 80032b0:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80032b2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80032bc:	f7ff facf 	bl	800285e <HAL_I2C_ListenCpltCallback>
 80032c0:	e44e      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032c4:	2b22      	cmp	r3, #34	@ 0x22
 80032c6:	d002      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0x7a6>
 80032c8:	2d22      	cmp	r5, #34	@ 0x22
 80032ca:	f47f ac49 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80032d2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff fabc 	bl	800285a <HAL_I2C_SlaveRxCpltCallback>
 80032e2:	e43d      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032e4:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 80032e8:	2921      	cmp	r1, #33	@ 0x21
 80032ea:	f000 0504 	and.w	r5, r0, #4
 80032ee:	d135      	bne.n	800335c <HAL_I2C_EV_IRQHandler+0x834>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f0:	0607      	lsls	r7, r0, #24
 80032f2:	d527      	bpl.n	8003344 <HAL_I2C_EV_IRQHandler+0x81c>
 80032f4:	0556      	lsls	r6, r2, #21
 80032f6:	d525      	bpl.n	8003344 <HAL_I2C_EV_IRQHandler+0x81c>
 80032f8:	bb3d      	cbnz	r5, 800334a <HAL_I2C_EV_IRQHandler+0x822>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032fa:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80032fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003300:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003302:	b292      	uxth	r2, r2
 8003304:	2a00      	cmp	r2, #0
 8003306:	f43f ac2b 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800330c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003310:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003312:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003314:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003316:	3a01      	subs	r2, #1
 8003318:	b292      	uxth	r2, r2
 800331a:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800331c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800331e:	b292      	uxth	r2, r2
 8003320:	2a00      	cmp	r2, #0
 8003322:	f47f ac1d 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8003326:	2829      	cmp	r0, #41	@ 0x29
 8003328:	f47f ac1a 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800332c:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800332e:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003336:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003338:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800333e:	f7ff fa8b 	bl	8002858 <HAL_I2C_SlaveTxCpltCallback>
 8003342:	e40d      	b.n	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003344:	2d00      	cmp	r5, #0
 8003346:	f43f ac0b 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 800334a:	0595      	lsls	r5, r2, #22
 800334c:	f57f ac08 	bpl.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003350:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003352:	b292      	uxth	r2, r2
 8003354:	2a00      	cmp	r2, #0
 8003356:	f43f ac03 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 800335a:	e5a7      	b.n	8002eac <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335c:	0640      	lsls	r0, r0, #25
 800335e:	d527      	bpl.n	80033b0 <HAL_I2C_EV_IRQHandler+0x888>
 8003360:	0551      	lsls	r1, r2, #21
 8003362:	d525      	bpl.n	80033b0 <HAL_I2C_EV_IRQHandler+0x888>
 8003364:	bb3d      	cbnz	r5, 80033b6 <HAL_I2C_EV_IRQHandler+0x88e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003366:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800336a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336c:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800336e:	b289      	uxth	r1, r1
 8003370:	2900      	cmp	r1, #0
 8003372:	f43f abf5 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800337a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800337c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800337e:	3301      	adds	r3, #1
 8003380:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003382:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003384:	3b01      	subs	r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800338a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f47f abe6 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 8003394:	2a2a      	cmp	r2, #42	@ 0x2a
 8003396:	f47f abe3 	bne.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	6853      	ldr	r3, [r2, #4]
 800339e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033a2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033a4:	2322      	movs	r3, #34	@ 0x22
 80033a6:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033a8:	2328      	movs	r3, #40	@ 0x28
 80033aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 80033ae:	e795      	b.n	80032dc <HAL_I2C_EV_IRQHandler+0x7b4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b0:	2d00      	cmp	r5, #0
 80033b2:	f43f abd5 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
 80033b6:	0592      	lsls	r2, r2, #22
 80033b8:	f57f abd2 	bpl.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80033bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80033be:	b292      	uxth	r2, r2
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	f43f abcd 	beq.w	8002b60 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e64b      	b.n	8003066 <HAL_I2C_EV_IRQHandler+0x53e>
 80033ce:	bf00      	nop
 80033d0:	08002919 	.word	0x08002919
 80033d4:	ffff0000 	.word	0xffff0000

080033d8 <HAL_I2C_ER_IRQHandler>:
{
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033da:	6803      	ldr	r3, [r0, #0]
{
 80033dc:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033de:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033e0:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033e2:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033e6:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ea:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ec:	d00a      	beq.n	8003404 <HAL_I2C_ER_IRQHandler+0x2c>
 80033ee:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033f4:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 80033f8:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033fa:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003402:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003404:	05b8      	lsls	r0, r7, #22
 8003406:	d506      	bpl.n	8003416 <HAL_I2C_ER_IRQHandler+0x3e>
 8003408:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800340a:	bf42      	ittt	mi
 800340c:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8003410:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003414:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003416:	0578      	lsls	r0, r7, #21
 8003418:	d536      	bpl.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
 800341a:	05f1      	lsls	r1, r6, #23
 800341c:	d534      	bpl.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 800341e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8003420:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003424:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8003426:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
    tmp2 = hi2c->XferCount;
 800342a:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 800342c:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800342e:	d15f      	bne.n	80034f0 <HAL_I2C_ER_IRQHandler+0x118>
 8003430:	2800      	cmp	r0, #0
 8003432:	d15d      	bne.n	80034f0 <HAL_I2C_ER_IRQHandler+0x118>
 8003434:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 8003438:	2821      	cmp	r0, #33	@ 0x21
 800343a:	d004      	beq.n	8003446 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800343c:	2928      	cmp	r1, #40	@ 0x28
 800343e:	d157      	bne.n	80034f0 <HAL_I2C_ER_IRQHandler+0x118>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003440:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 8003444:	d154      	bne.n	80034f0 <HAL_I2C_ER_IRQHandler+0x118>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003446:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800344a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800344c:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800344e:	2908      	cmp	r1, #8
 8003450:	d001      	beq.n	8003456 <HAL_I2C_ER_IRQHandler+0x7e>
 8003452:	2920      	cmp	r1, #32
 8003454:	d12a      	bne.n	80034ac <HAL_I2C_ER_IRQHandler+0xd4>
 8003456:	2a28      	cmp	r2, #40	@ 0x28
 8003458:	d128      	bne.n	80034ac <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345a:	4a2e      	ldr	r2, [pc, #184]	@ (8003514 <HAL_I2C_ER_IRQHandler+0x13c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800345c:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003466:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003468:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800346c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003474:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003478:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800347a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800347c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003480:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003484:	f7ff f9eb 	bl	800285e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003488:	053a      	lsls	r2, r7, #20
 800348a:	d53f      	bpl.n	800350c <HAL_I2C_ER_IRQHandler+0x134>
 800348c:	05f3      	lsls	r3, r6, #23
 800348e:	d53d      	bpl.n	800350c <HAL_I2C_ER_IRQHandler+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003490:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003494:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003496:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800349a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800349c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 800349e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80034a0:	432b      	orrs	r3, r5
 80034a2:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80034a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80034a8:	f7ff ba96 	b.w	80029d8 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034ac:	2a21      	cmp	r2, #33	@ 0x21
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034b0:	4918      	ldr	r1, [pc, #96]	@ (8003514 <HAL_I2C_ER_IRQHandler+0x13c>)
 80034b2:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034b4:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034b6:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80034b8:	2220      	movs	r2, #32
 80034ba:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034be:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034c8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ce:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 80034dc:	bf48      	it	mi
 80034de:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff f9b9 	bl	8002858 <HAL_I2C_SlaveTxCpltCallback>
 80034e6:	e7cf      	b.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	e7cb      	b.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034f4:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80034f8:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0x12a>
 80034fe:	2a40      	cmp	r2, #64	@ 0x40
 8003500:	d1c2      	bne.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e7bd      	b.n	8003488 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 800350c:	2d00      	cmp	r5, #0
 800350e:	d1c5      	bne.n	800349c <HAL_I2C_ER_IRQHandler+0xc4>
}
 8003510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003512:	bf00      	nop
 8003514:	ffff0000 	.word	0xffff0000

08003518 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800351a:	4604      	mov	r4, r0
 800351c:	b1e0      	cbz	r0, 8003558 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800351e:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8003522:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003526:	b91b      	cbnz	r3, 8003530 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003528:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800352c:	f004 f9b2 	bl	8007894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003530:	2303      	movs	r3, #3
 8003532:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003536:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003538:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 800353a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 800353c:	f855 0b04 	ldr.w	r0, [r5], #4
 8003540:	f002 f844 	bl	80055cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003544:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003548:	6820      	ldr	r0, [r4, #0]
 800354a:	f002 f82f 	bl	80055ac <USB_CoreInit>
 800354e:	4601      	mov	r1, r0
 8003550:	b128      	cbz	r0, 800355e <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003552:	2302      	movs	r3, #2
 8003554:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8003558:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800355a:	4628      	mov	r0, r5
 800355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800355e:	6820      	ldr	r0, [r4, #0]
 8003560:	f002 f83e 	bl	80055e0 <USB_SetCurrentMode>
 8003564:	2800      	cmp	r0, #0
 8003566:	d1f4      	bne.n	8003552 <HAL_PCD_Init+0x3a>
 8003568:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 800356a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356c:	7926      	ldrb	r6, [r4, #4]
 800356e:	f104 0310 	add.w	r3, r4, #16
 8003572:	b2c1      	uxtb	r1, r0
 8003574:	428e      	cmp	r6, r1
 8003576:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800357a:	d818      	bhi.n	80035ae <HAL_PCD_Init+0x96>
 800357c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800357e:	460a      	mov	r2, r1
 8003580:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8003584:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	4286      	cmp	r6, r0
 8003588:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800358c:	d81b      	bhi.n	80035c6 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f002 f826 	bl	80055e4 <USB_DevInit>
 8003598:	4605      	mov	r5, r0
 800359a:	2800      	cmp	r0, #0
 800359c:	d1d9      	bne.n	8003552 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 800359e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80035a0:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80035a2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80035a4:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80035a8:	f002 fad2 	bl	8005b50 <USB_DevDisconnect>
  return HAL_OK;
 80035ac:	e7d5      	b.n	800355a <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ae:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 80035b2:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 80035b6:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ba:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035be:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	3001      	adds	r0, #1
 80035c4:	e7d5      	b.n	8003572 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035c6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80035ca:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80035ce:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035da:	3101      	adds	r1, #1
 80035dc:	e7d2      	b.n	8003584 <HAL_PCD_Init+0x6c>

080035de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035de:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80035e0:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 80035e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d010      	beq.n	800360c <HAL_PCD_Start+0x2e>
 80035ea:	2501      	movs	r5, #1
 80035ec:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80035f0:	6800      	ldr	r0, [r0, #0]
 80035f2:	f001 ffe2 	bl	80055ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80035f6:	4629      	mov	r1, r5
 80035f8:	4620      	mov	r0, r4
 80035fa:	f004 fa5a 	bl	8007ab2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80035fe:	6820      	ldr	r0, [r4, #0]
 8003600:	f002 faa4 	bl	8005b4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003604:	2000      	movs	r0, #0
 8003606:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 800360a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800360c:	2002      	movs	r0, #2
 800360e:	e7fc      	b.n	800360a <HAL_PCD_Start+0x2c>

08003610 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003610:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003612:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8003616:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003618:	2a01      	cmp	r2, #1
 800361a:	d00a      	beq.n	8003632 <HAL_PCD_SetAddress+0x22>
 800361c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800361e:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8003620:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003624:	6800      	ldr	r0, [r0, #0]
 8003626:	f002 fa8b 	bl	8005b40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800362a:	2000      	movs	r0, #0
 800362c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8003630:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003632:	2002      	movs	r0, #2
 8003634:	e7fc      	b.n	8003630 <HAL_PCD_SetAddress+0x20>
	...

08003638 <HAL_PCD_IRQHandler>:
{
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003640:	6800      	ldr	r0, [r0, #0]
 8003642:	f002 fa87 	bl	8005b54 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003646:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 800364a:	f000 844f 	beq.w	8003eec <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 800364e:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003650:	4ec6      	ldr	r6, [pc, #792]	@ (800396c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8003658:	041f      	lsls	r7, r3, #16
 800365a:	d402      	bmi.n	8003662 <HAL_PCD_IRQHandler+0x2a>
}
 800365c:	b005      	add	sp, #20
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8003662:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8003666:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 800366a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 800366c:	f040 80c0 	bne.w	80037f0 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003670:	f011 0110 	ands.w	r1, r1, #16
 8003674:	d126      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003676:	8803      	ldrh	r3, [r0, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	4033      	ands	r3, r6
 800367c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003680:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003682:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003686:	7c22      	ldrb	r2, [r4, #16]
 8003688:	b29b      	uxth	r3, r3
 800368a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800368e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003692:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8003696:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003698:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800369c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800369e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036a0:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 80036a2:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036a4:	f004 f92d 	bl	8007902 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036a8:	7b63      	ldrb	r3, [r4, #13]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0d1      	beq.n	8003652 <HAL_PCD_IRQHandler+0x1a>
 80036ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036b0:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d1cd      	bne.n	8003652 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036b6:	7b63      	ldrb	r3, [r4, #13]
 80036b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036bc:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80036c0:	7362      	strb	r2, [r4, #13]
 80036c2:	e7c6      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036c4:	8807      	ldrh	r7, [r0, #0]
 80036c6:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036c8:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 80036cc:	d021      	beq.n	8003712 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80036d2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80036e0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036e4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80036e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036ec:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036f0:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80036f4:	f002 fc79 	bl	8005fea <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036f8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80036fa:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036fc:	8813      	ldrh	r3, [r2, #0]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	051b      	lsls	r3, r3, #20
 8003704:	0d1b      	lsrs	r3, r3, #20
 8003706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800370a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800370c:	f004 f8ea 	bl	80078e4 <HAL_PCD_SetupStageCallback>
 8003710:	e79f      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003712:	0419      	lsls	r1, r3, #16
 8003714:	d59d      	bpl.n	8003652 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003716:	8803      	ldrh	r3, [r0, #0]
 8003718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371c:	051b      	lsls	r3, r3, #20
 800371e:	0d1b      	lsrs	r3, r3, #20
 8003720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003724:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003726:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800372a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800372e:	b29b      	uxth	r3, r3
 8003730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003734:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003738:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003744:	b18b      	cbz	r3, 800376a <HAL_PCD_IRQHandler+0x132>
 8003746:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 800374a:	b171      	cbz	r1, 800376a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800374c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003750:	f002 fc4b 	bl	8005fea <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003754:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8003758:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800375c:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800375e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003760:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003762:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003766:	f004 f8c3 	bl	80078f0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	880a      	ldrh	r2, [r1, #0]
 800376e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003770:	0512      	lsls	r2, r2, #20
 8003772:	f53f af6e 	bmi.w	8003652 <HAL_PCD_IRQHandler+0x1a>
 8003776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800377a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800377e:	f43f af68 	beq.w	8003652 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003782:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8003786:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 800378a:	b292      	uxth	r2, r2
 800378c:	5a83      	ldrh	r3, [r0, r2]
 800378e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003792:	5283      	strh	r3, [r0, r2]
 8003794:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8003798:	2b3e      	cmp	r3, #62	@ 0x3e
 800379a:	d91d      	bls.n	80037d8 <HAL_PCD_IRQHandler+0x1a0>
 800379c:	095f      	lsrs	r7, r3, #5
 800379e:	06db      	lsls	r3, r3, #27
 80037a0:	5a83      	ldrh	r3, [r0, r2]
 80037a2:	bf08      	it	eq
 80037a4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80037ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037ba:	880b      	ldrh	r3, [r1, #0]
 80037bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80037cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d4:	800b      	strh	r3, [r1, #0]
 80037d6:	e73c      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037d8:	b90b      	cbnz	r3, 80037de <HAL_PCD_IRQHandler+0x1a6>
 80037da:	5a83      	ldrh	r3, [r0, r2]
 80037dc:	e7e7      	b.n	80037ae <HAL_PCD_IRQHandler+0x176>
 80037de:	085f      	lsrs	r7, r3, #1
 80037e0:	07db      	lsls	r3, r3, #31
 80037e2:	5a83      	ldrh	r3, [r0, r2]
 80037e4:	bf48      	it	mi
 80037e6:	3701      	addmi	r7, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80037ee:	e7e2      	b.n	80037b6 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037f0:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037f4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037f6:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037fa:	f140 80f6 	bpl.w	80039ea <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037fe:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003802:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	051b      	lsls	r3, r3, #20
 800380c:	0d1b      	lsrs	r3, r3, #20
 800380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003812:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003816:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 800381a:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 800381e:	b9bb      	cbnz	r3, 8003850 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003820:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003824:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8003828:	b29b      	uxth	r3, r3
 800382a:	3306      	adds	r3, #6
 800382c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003830:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003834:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8003838:	f1b9 0f00 	cmp.w	r9, #0
 800383c:	f000 80ba 	beq.w	80039b4 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003840:	464b      	mov	r3, r9
 8003842:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003846:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 800384a:	f002 fbce 	bl	8005fea <USB_ReadPMA>
 800384e:	e0b1      	b.n	80039b4 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8003850:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003854:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8003858:	2b02      	cmp	r3, #2
 800385a:	f040 8089 	bne.w	8003970 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800385e:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8003862:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8003866:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800386a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 800386e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003872:	44d9      	add	r9, fp
 8003874:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003878:	d03c      	beq.n	80038f4 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800387a:	f109 0902 	add.w	r9, r9, #2
 800387e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8003882:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8003886:	4599      	cmp	r9, r3
 8003888:	d913      	bls.n	80038b2 <HAL_PCD_IRQHandler+0x27a>
 800388a:	2300      	movs	r3, #0
 800388c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003890:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80038b0:	e005      	b.n	80038be <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 80038b2:	eba3 0309 	sub.w	r3, r3, r9
 80038b6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0e8      	beq.n	8003890 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038be:	f1bc 0f00 	cmp.w	ip, #0
 80038c2:	d00d      	beq.n	80038e0 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80038e0:	f1b9 0f00 	cmp.w	r9, #0
 80038e4:	d066      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038e6:	2128      	movs	r1, #40	@ 0x28
 80038e8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ec:	464b      	mov	r3, r9
 80038ee:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80038f2:	e7a8      	b.n	8003846 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038f4:	f109 0906 	add.w	r9, r9, #6
 80038f8:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80038fc:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8003900:	4599      	cmp	r9, r3
 8003902:	d912      	bls.n	800392a <HAL_PCD_IRQHandler+0x2f2>
 8003904:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003908:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800390c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800391c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003924:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003928:	e005      	b.n	8003936 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 800392a:	eba3 0309 	sub.w	r3, r3, r9
 800392e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0e8      	beq.n	8003908 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003936:	f1bc 0f00 	cmp.w	ip, #0
 800393a:	d10d      	bne.n	8003958 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800393c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003950:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003954:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003958:	f1b9 0f00 	cmp.w	r9, #0
 800395c:	d02a      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800395e:	2128      	movs	r1, #40	@ 0x28
 8003960:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003964:	464b      	mov	r3, r9
 8003966:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 800396a:	e76c      	b.n	8003846 <HAL_PCD_IRQHandler+0x20e>
 800396c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003970:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003974:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003984:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003988:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800398c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8003990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800399a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800399e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039a0:	d054      	beq.n	8003a4c <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039a2:	3202      	adds	r2, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80039aa:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80039ae:	f1b9 0f00 	cmp.w	r9, #0
 80039b2:	d19b      	bne.n	80038ec <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 80039b4:	fb05 f107 	mul.w	r1, r5, r7
 80039b8:	1863      	adds	r3, r4, r1
 80039ba:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80039be:	444a      	add	r2, r9
 80039c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80039c4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80039c8:	444a      	add	r2, r9
 80039ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039ce:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80039d2:	b11a      	cbz	r2, 80039dc <HAL_PCD_IRQHandler+0x3a4>
 80039d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80039d8:	4599      	cmp	r9, r3
 80039da:	d241      	bcs.n	8003a60 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039dc:	fb05 4307 	mla	r3, r5, r7, r4
 80039e0:	4620      	mov	r0, r4
 80039e2:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80039e6:	f003 ff83 	bl	80078f0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039ea:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039ee:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039f0:	f43f ae2f 	beq.w	8003652 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039f4:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80039f8:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4033      	ands	r3, r6
 8003a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a04:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003a08:	eb04 030c 	add.w	r3, r4, ip
 8003a0c:	7cda      	ldrb	r2, [r3, #19]
 8003a0e:	2a01      	cmp	r2, #1
 8003a10:	d156      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8003a12:	2100      	movs	r1, #0
 8003a14:	fb07 5205 	mla	r2, r7, r5, r5
 8003a18:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8003a1a:	7f1a      	ldrb	r2, [r3, #28]
 8003a1c:	b392      	cbz	r2, 8003a84 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a1e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a22:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a24:	d036      	beq.n	8003a94 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a26:	bb12      	cbnz	r2, 8003a6e <HAL_PCD_IRQHandler+0x436>
 8003a28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003a2c:	7c1b      	ldrb	r3, [r3, #16]
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a36:	4410      	add	r0, r2
 8003a38:	5a1a      	ldrh	r2, [r3, r0]
 8003a3a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a3e:	521a      	strh	r2, [r3, r0]
 8003a40:	5a1a      	ldrh	r2, [r3, r0]
 8003a42:	b292      	uxth	r2, r2
 8003a44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a48:	521a      	strh	r2, [r3, r0]
 8003a4a:	e01b      	b.n	8003a84 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a4c:	3206      	adds	r2, #6
 8003a4e:	4413      	add	r3, r2
 8003a50:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003a54:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003a58:	f1b9 0f00 	cmp.w	r9, #0
 8003a5c:	d0aa      	beq.n	80039b4 <HAL_PCD_IRQHandler+0x37c>
 8003a5e:	e781      	b.n	8003964 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8003a60:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	4421      	add	r1, r4
 8003a68:	f002 f88a 	bl	8005b80 <USB_EPStartXfer>
 8003a6c:	e7bd      	b.n	80039ea <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a6e:	2a01      	cmp	r2, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x44c>
 8003a72:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003a76:	7c1b      	ldrb	r3, [r3, #16]
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4410      	add	r0, r2
 8003a82:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a84:	2328      	movs	r3, #40	@ 0x28
 8003a86:	fb03 4307 	mla	r3, r3, r7, r4
 8003a8a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f003 ff38 	bl	8007902 <HAL_PCD_DataInStageCallback>
 8003a92:	e5de      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a94:	b93a      	cbnz	r2, 8003aa6 <HAL_PCD_IRQHandler+0x46e>
 8003a96:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003a9a:	7c1b      	ldrb	r3, [r3, #16]
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003aa4:	e7c7      	b.n	8003a36 <HAL_PCD_IRQHandler+0x3fe>
 8003aa6:	2a01      	cmp	r2, #1
 8003aa8:	d1ec      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x44c>
 8003aaa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003aae:	7c1b      	ldrb	r3, [r3, #16]
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4410      	add	r0, r2
 8003aba:	f823 8000 	strh.w	r8, [r3, r0]
 8003abe:	e7e1      	b.n	8003a84 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ac0:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ac2:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8003ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ac8:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003acc:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ad0:	d11b      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ad2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8003ad6:	b2bf      	uxth	r7, r7
 8003ad8:	4457      	add	r7, sl
 8003ada:	3702      	adds	r7, #2
 8003adc:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003ae0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003ae4:	4297      	cmp	r7, r2
 8003ae6:	d302      	bcc.n	8003aee <HAL_PCD_IRQHandler+0x4b6>
 8003ae8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8003aec:	e7ce      	b.n	8003a8c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8003aee:	1bd2      	subs	r2, r2, r7
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8003af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8003af4:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8003af8:	443a      	add	r2, r7
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8003afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003afe:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8003b00:	443a      	add	r2, r7
 8003b02:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b04:	f002 f83c 	bl	8005b80 <USB_EPStartXfer>
 8003b08:	e5a3      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b0a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b0e:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b12:	fa1f fc8c 	uxth.w	ip, ip
 8003b16:	44d4      	add	ip, sl
 8003b18:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b1c:	f000 80f4 	beq.w	8003d08 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b20:	f10c 0c02 	add.w	ip, ip, #2
 8003b24:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003b28:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8003b2c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003b30:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003b32:	bf2c      	ite	cs
 8003b34:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8003b36:	eba2 020c 	subcc.w	r2, r2, ip
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d15b      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b40:	2328      	movs	r3, #40	@ 0x28
 8003b42:	fb03 4307 	mla	r3, r3, r7, r4
 8003b46:	7c5b      	ldrb	r3, [r3, #17]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d141      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x598>
 8003b4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003b50:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003b54:	b292      	uxth	r2, r2
 8003b56:	010b      	lsls	r3, r1, #4
 8003b58:	4494      	add	ip, r2
 8003b5a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003b5e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b62:	f82c 2003 	strh.w	r2, [ip, r3]
 8003b66:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003b6a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003b6e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003b72:	b292      	uxth	r2, r2
 8003b74:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003b7c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003b80:	b292      	uxth	r2, r2
 8003b82:	4410      	add	r0, r2
 8003b84:	5ac2      	ldrh	r2, [r0, r3]
 8003b86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b8a:	52c2      	strh	r2, [r0, r3]
 8003b8c:	5ac2      	ldrh	r2, [r0, r3]
 8003b8e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003b92:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003b96:	b292      	uxth	r2, r2
 8003b98:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f003 feb1 	bl	8007902 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ba0:	f1b8 0f00 	cmp.w	r8, #0
 8003ba4:	f000 80f4 	beq.w	8003d90 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ba8:	2328      	movs	r3, #40	@ 0x28
 8003baa:	fb03 4307 	mla	r3, r3, r7, r4
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	7c19      	ldrb	r1, [r3, #16]
 8003bb2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003bce:	e0df      	b.n	8003d90 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d1e2      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x562>
 8003bd4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8003bd8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003bdc:	fa1f fe8e 	uxth.w	lr, lr
 8003be0:	44f4      	add	ip, lr
 8003be2:	010b      	lsls	r3, r1, #4
 8003be4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003be8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003bec:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003bf0:	fa1f fc8c 	uxth.w	ip, ip
 8003bf4:	4460      	add	r0, ip
 8003bf6:	e7cf      	b.n	8003b98 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf8:	f1b8 0f00 	cmp.w	r8, #0
 8003bfc:	d00d      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bfe:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003c02:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003c06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c0a:	0412      	lsls	r2, r2, #16
 8003c0c:	0c12      	lsrs	r2, r2, #16
 8003c0e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c16:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003c1a:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8003c1e:	fb08 4807 	mla	r8, r8, r7, r4
 8003c22:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003c26:	2a01      	cmp	r2, #1
 8003c28:	f040 80b2 	bne.w	8003d90 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003c2c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8003c30:	eb02 0e0c 	add.w	lr, r2, ip
 8003c34:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3a:	4462      	add	r2, ip
 8003c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c3e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8003c42:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d335      	bcc.n	8003cb6 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c50:	2328      	movs	r3, #40	@ 0x28
 8003c52:	fb03 4307 	mla	r3, r3, r7, r4
 8003c56:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003c5a:	b293      	uxth	r3, r2
 8003c5c:	f1bc 0f00 	cmp.w	ip, #0
 8003c60:	d145      	bne.n	8003cee <HAL_PCD_IRQHandler+0x6b6>
 8003c62:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003c66:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003c6a:	fa1f f888 	uxth.w	r8, r8
 8003c6e:	44c4      	add	ip, r8
 8003c70:	0109      	lsls	r1, r1, #4
 8003c72:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8003c76:	2a3e      	cmp	r2, #62	@ 0x3e
 8003c78:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003c7c:	f82c 8001 	strh.w	r8, [ip, r1]
 8003c80:	d925      	bls.n	8003cce <HAL_PCD_IRQHandler+0x696>
 8003c82:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8003c86:	06d2      	lsls	r2, r2, #27
 8003c88:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003c8c:	bf08      	it	eq
 8003c8e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8003c92:	b292      	uxth	r2, r2
 8003c94:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003c98:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c9c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ca0:	b292      	uxth	r2, r2
 8003ca2:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ca6:	2228      	movs	r2, #40	@ 0x28
 8003ca8:	fb02 4207 	mla	r2, r2, r7, r4
 8003cac:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cae:	4671      	mov	r1, lr
 8003cb0:	f001 ff56 	bl	8005b60 <USB_WritePMA>
 8003cb4:	e06c      	b.n	8003d90 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8003cb6:	b91b      	cbnz	r3, 8003cc0 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8003cb8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8003cba:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8003cbe:	e7c7      	b.n	8003c50 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8003cc6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8003cca:	461a      	mov	r2, r3
 8003ccc:	e7c0      	b.n	8003c50 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cce:	b912      	cbnz	r2, 8003cd6 <HAL_PCD_IRQHandler+0x69e>
 8003cd0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003cd4:	e7e0      	b.n	8003c98 <HAL_PCD_IRQHandler+0x660>
 8003cd6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8003cda:	07d2      	lsls	r2, r2, #31
 8003cdc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003ce0:	bf48      	it	mi
 8003ce2:	f108 0801 	addmi.w	r8, r8, #1
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003cec:	e7d8      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x668>
 8003cee:	f1bc 0f01 	cmp.w	ip, #1
 8003cf2:	d1d8      	bne.n	8003ca6 <HAL_PCD_IRQHandler+0x66e>
 8003cf4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003cf8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8003cfc:	fa1f fc8c 	uxth.w	ip, ip
 8003d00:	4462      	add	r2, ip
 8003d02:	0109      	lsls	r1, r1, #4
 8003d04:	5253      	strh	r3, [r2, r1]
 8003d06:	e7ce      	b.n	8003ca6 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d08:	f10c 0c06 	add.w	ip, ip, #6
 8003d0c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003d10:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8003d14:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003d18:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8003d1a:	bf8c      	ite	hi
 8003d1c:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8003d1e:	eba2 020c 	subls.w	r2, r2, ip
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003d24:	2a00      	cmp	r2, #0
 8003d26:	d15d      	bne.n	8003de4 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d28:	2328      	movs	r3, #40	@ 0x28
 8003d2a:	fb03 4307 	mla	r3, r3, r7, r4
 8003d2e:	7c5b      	ldrb	r3, [r3, #17]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d143      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x784>
 8003d34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003d38:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	010b      	lsls	r3, r1, #4
 8003d40:	4494      	add	ip, r2
 8003d42:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003d46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d4a:	f82c 2003 	strh.w	r2, [ip, r3]
 8003d4e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003d52:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d56:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d60:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003d64:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	4410      	add	r0, r2
 8003d6c:	5ac2      	ldrh	r2, [r0, r3]
 8003d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d72:	52c2      	strh	r2, [r0, r3]
 8003d74:	5ac2      	ldrh	r2, [r0, r3]
 8003d76:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d7a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d82:	4620      	mov	r0, r4
 8003d84:	f003 fdbd 	bl	8007902 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d88:	f1b8 0f00 	cmp.w	r8, #0
 8003d8c:	f43f af0c 	beq.w	8003ba8 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d90:	2328      	movs	r3, #40	@ 0x28
 8003d92:	fb03 4307 	mla	r3, r3, r7, r4
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	7c19      	ldrb	r1, [r3, #16]
 8003d9a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003dba:	e44a      	b.n	8003652 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d1e0      	bne.n	8003d82 <HAL_PCD_IRQHandler+0x74a>
 8003dc0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8003dc4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003dc8:	fa1f fe8e 	uxth.w	lr, lr
 8003dcc:	44f4      	add	ip, lr
 8003dce:	010b      	lsls	r3, r1, #4
 8003dd0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003dd8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003ddc:	fa1f fc8c 	uxth.w	ip, ip
 8003de0:	4460      	add	r0, ip
 8003de2:	e7cd      	b.n	8003d80 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003de4:	f1b8 0f00 	cmp.w	r8, #0
 8003de8:	d10d      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003dea:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003dee:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003df2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003df6:	0412      	lsls	r2, r2, #16
 8003df8:	0c12      	lsrs	r2, r2, #16
 8003dfa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003dfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e02:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003e06:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8003e0a:	fb08 4807 	mla	r8, r8, r7, r4
 8003e0e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003e12:	2a01      	cmp	r2, #1
 8003e14:	d1bc      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003e16:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8003e1a:	eb02 0e0c 	add.w	lr, r2, ip
 8003e1e:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e24:	4462      	add	r2, ip
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e28:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8003e2c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d332      	bcc.n	8003e9a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e3a:	2328      	movs	r3, #40	@ 0x28
 8003e3c:	fb03 4307 	mla	r3, r3, r7, r4
 8003e40:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003e44:	b293      	uxth	r3, r2
 8003e46:	f1bc 0f00 	cmp.w	ip, #0
 8003e4a:	d142      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x89a>
 8003e4c:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003e50:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003e54:	fa1f f888 	uxth.w	r8, r8
 8003e58:	44c4      	add	ip, r8
 8003e5a:	0109      	lsls	r1, r1, #4
 8003e5c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8003e60:	2a3e      	cmp	r2, #62	@ 0x3e
 8003e62:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003e66:	f82c 8001 	strh.w	r8, [ip, r1]
 8003e6a:	d922      	bls.n	8003eb2 <HAL_PCD_IRQHandler+0x87a>
 8003e6c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8003e70:	06d2      	lsls	r2, r2, #27
 8003e72:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003e76:	bf08      	it	eq
 8003e78:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003e82:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e86:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e8a:	b292      	uxth	r2, r2
 8003e8c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e90:	2228      	movs	r2, #40	@ 0x28
 8003e92:	fb02 4207 	mla	r2, r2, r7, r4
 8003e96:	8b52      	ldrh	r2, [r2, #26]
 8003e98:	e709      	b.n	8003cae <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 8003e9a:	b91b      	cbnz	r3, 8003ea4 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 8003e9c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8003e9e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8003ea2:	e7ca      	b.n	8003e3a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8003eaa:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 8003eae:	461a      	mov	r2, r3
 8003eb0:	e7c3      	b.n	8003e3a <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eb2:	b912      	cbnz	r2, 8003eba <HAL_PCD_IRQHandler+0x882>
 8003eb4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003eb8:	e7e3      	b.n	8003e82 <HAL_PCD_IRQHandler+0x84a>
 8003eba:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8003ebe:	07d2      	lsls	r2, r2, #31
 8003ec0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003ec4:	bf48      	it	mi
 8003ec6:	f108 0801 	addmi.w	r8, r8, #1
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003ed0:	e7db      	b.n	8003e8a <HAL_PCD_IRQHandler+0x852>
 8003ed2:	f1bc 0f01 	cmp.w	ip, #1
 8003ed6:	d1db      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x858>
 8003ed8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003edc:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	4494      	add	ip, r2
 8003ee4:	010a      	lsls	r2, r1, #4
 8003ee6:	f82c 3002 	strh.w	r3, [ip, r2]
 8003eea:	e7d1      	b.n	8003e90 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003eec:	0546      	lsls	r6, r0, #21
 8003eee:	d512      	bpl.n	8003f16 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ef0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003ef2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ef4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003ef8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003f04:	f003 fd09 	bl	800791a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4620      	mov	r0, r4
}
 8003f0c:	b005      	add	sp, #20
 8003f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f12:	f7ff bb7d 	b.w	8003610 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f16:	0441      	lsls	r1, r0, #17
 8003f18:	d50a      	bpl.n	8003f30 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8003f2c:	f7ff bb96 	b.w	800365c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f30:	0482      	lsls	r2, r0, #18
 8003f32:	d505      	bpl.n	8003f40 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f3e:	e7f1      	b.n	8003f24 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003f40:	04c3      	lsls	r3, r0, #19
 8003f42:	d519      	bpl.n	8003f78 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003f44:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8003f46:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003f48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f58:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003f5c:	f023 0308 	bic.w	r3, r3, #8
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003f68:	f003 fcfa 	bl	8007960 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f76:	e7d5      	b.n	8003f24 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003f78:	0507      	lsls	r7, r0, #20
 8003f7a:	d548      	bpl.n	800400e <HAL_PCD_IRQHandler+0x9d6>
 8003f7c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	4606      	mov	r6, r0
 8003f82:	4619      	mov	r1, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	f103 0520 	add.w	r5, r3, #32
 8003f8a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8003f8e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003f90:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8003f94:	d1f9      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003f96:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003fa4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	0412      	lsls	r2, r2, #16
 8003fae:	0c12      	lsrs	r2, r2, #16
 8003fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003fb4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003fb8:	0556      	lsls	r6, r2, #21
 8003fba:	d5fb      	bpl.n	8003fb4 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fbc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc4:	0412      	lsls	r2, r2, #16
 8003fc6:	0c12      	lsrs	r2, r2, #16
 8003fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003fcc:	f830 2b02 	ldrh.w	r2, [r0], #2
 8003fd0:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8003fd4:	428d      	cmp	r5, r1
 8003fd6:	d1f9      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fd8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003fdc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	f042 0208 	orr.w	r2, r2, #8
 8003fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003fe8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003fec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff0:	0412      	lsls	r2, r2, #16
 8003ff2:	0c12      	lsrs	r2, r2, #16
 8003ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ff8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	f042 0204 	orr.w	r2, r2, #4
 8004002:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004006:	f003 fc9b 	bl	8007940 <HAL_PCD_SuspendCallback>
    return;
 800400a:	f7ff bb27 	b.w	800365c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800400e:	0582      	lsls	r2, r0, #22
 8004010:	d50d      	bpl.n	800402e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004012:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8004014:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004016:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800401a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004026:	f003 fc74 	bl	8007912 <HAL_PCD_SOFCallback>
    return;
 800402a:	f7ff bb17 	b.w	800365c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800402e:	05c3      	lsls	r3, r0, #23
 8004030:	f57f ab14 	bpl.w	800365c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800403a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403e:	e771      	b.n	8003f24 <HAL_PCD_IRQHandler+0x8ec>

08004040 <HAL_PCD_EP_Open>:
{
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	2428      	movs	r4, #40	@ 0x28
 8004044:	4605      	mov	r5, r0
 8004046:	f001 0007 	and.w	r0, r1, #7
 800404a:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800404c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004050:	bf14      	ite	ne
 8004052:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004056:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 800405a:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800405e:	bf15      	itete	ne
 8004060:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8004062:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8004064:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8004066:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406a:	bf14      	ite	ne
 800406c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8004070:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8004072:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8004074:	bf08      	it	eq
 8004076:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004078:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800407a:	bf08      	it	eq
 800407c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800407e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004080:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8004084:	2b01      	cmp	r3, #1
 8004086:	d009      	beq.n	800409c <HAL_PCD_EP_Open+0x5c>
 8004088:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800408a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800408c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004090:	f001 faba 	bl	8005608 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004094:	2000      	movs	r0, #0
 8004096:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800409a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800409c:	2002      	movs	r0, #2
 800409e:	e7fc      	b.n	800409a <HAL_PCD_EP_Open+0x5a>

080040a0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80040a0:	2328      	movs	r3, #40	@ 0x28
 80040a2:	f001 0207 	and.w	r2, r1, #7
 80040a6:	4353      	muls	r3, r2
 80040a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b0:	bf18      	it	ne
 80040b2:	f103 0110 	addne.w	r1, r3, #16
 80040b6:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	bf0b      	itete	eq
 80040ba:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80040be:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80040c0:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	bf0a      	itet	eq
 80040c6:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80040c8:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80040ca:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ce:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80040d0:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d009      	beq.n	80040ec <HAL_PCD_EP_Close+0x4c>
 80040d8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80040dc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040e0:	f001 fbf2 	bl	80058c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80040ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80040ec:	2002      	movs	r0, #2
 80040ee:	e7fc      	b.n	80040ea <HAL_PCD_EP_Close+0x4a>

080040f0 <HAL_PCD_EP_Receive>:
{
 80040f0:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80040f2:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 80040f4:	2600      	movs	r6, #0
 80040f6:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80040fa:	434c      	muls	r4, r1
 80040fc:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80040fe:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004102:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004106:	4401      	add	r1, r0
  ep->xfer_len = len;
 8004108:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 800410c:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8004110:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004114:	6800      	ldr	r0, [r0, #0]
 8004116:	f001 fd33 	bl	8005b80 <USB_EPStartXfer>
}
 800411a:	4630      	mov	r0, r6
 800411c:	bd70      	pop	{r4, r5, r6, pc}

0800411e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800411e:	2328      	movs	r3, #40	@ 0x28
 8004120:	f001 0107 	and.w	r1, r1, #7
 8004124:	fb03 0001 	mla	r0, r3, r1, r0
}
 8004128:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800412c:	4770      	bx	lr

0800412e <HAL_PCD_EP_Transmit>:
{
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	2528      	movs	r5, #40	@ 0x28
 8004132:	f001 0107 	and.w	r1, r1, #7
 8004136:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8004138:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 800413a:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800413c:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8004140:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004142:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004144:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004148:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 800414a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 800414e:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8004150:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8004152:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004154:	6800      	ldr	r0, [r0, #0]
 8004156:	f001 fd13 	bl	8005b80 <USB_EPStartXfer>
}
 800415a:	4630      	mov	r0, r6
 800415c:	bd70      	pop	{r4, r5, r6, pc}

0800415e <HAL_PCD_EP_SetStall>:
{
 800415e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004160:	7903      	ldrb	r3, [r0, #4]
 8004162:	f001 0507 	and.w	r5, r1, #7
 8004166:	42ab      	cmp	r3, r5
{
 8004168:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800416a:	d32a      	bcc.n	80041c2 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800416c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004170:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8004174:	d01c      	beq.n	80041b0 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8004176:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004178:	436b      	muls	r3, r5
 800417a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800417e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004180:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004182:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8004184:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004186:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004188:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800418a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800418e:	429a      	cmp	r2, r3
 8004190:	d019      	beq.n	80041c6 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004192:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004194:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004198:	f001 fc69 	bl	8005a6e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800419c:	b925      	cbnz	r5, 80041a8 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80041a4:	f001 fcda 	bl	8005b5c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80041b0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80041b2:	434b      	muls	r3, r1
 80041b4:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 80041b8:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80041ba:	4401      	add	r1, r0
    ep->is_in = 0U;
 80041bc:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 80041c0:	e7e0      	b.n	8004184 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
 80041c4:	e7f3      	b.n	80041ae <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 80041c6:	2002      	movs	r0, #2
 80041c8:	e7f1      	b.n	80041ae <HAL_PCD_EP_SetStall+0x50>

080041ca <HAL_PCD_EP_ClrStall>:
{
 80041ca:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041cc:	7902      	ldrb	r2, [r0, #4]
 80041ce:	f001 030f 	and.w	r3, r1, #15
 80041d2:	429a      	cmp	r2, r3
{
 80041d4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041d6:	d326      	bcc.n	8004226 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80041d8:	2328      	movs	r3, #40	@ 0x28
 80041da:	f001 0207 	and.w	r2, r1, #7
 80041de:	4353      	muls	r3, r2
 80041e0:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	bf14      	ite	ne
 80041e6:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ea:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 80041ee:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80041f0:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80041f4:	bf15      	itete	ne
 80041f6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80041f8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fc:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80041fe:	bf14      	ite	ne
 8004200:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8004202:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8004206:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004208:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800420a:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800420e:	2b01      	cmp	r3, #1
 8004210:	d00b      	beq.n	800422a <HAL_PCD_EP_ClrStall+0x60>
 8004212:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004214:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004216:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800421a:	f001 fc48 	bl	8005aae <USB_EPClearStall>
  return HAL_OK;
 800421e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8004220:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8004224:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
 8004228:	e7fc      	b.n	8004224 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 800422a:	2002      	movs	r0, #2
 800422c:	e7fa      	b.n	8004224 <HAL_PCD_EP_ClrStall+0x5a>

0800422e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800422e:	b510      	push	{r4, lr}
 8004230:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004232:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004236:	bf1b      	ittet	ne
 8004238:	f001 0107 	andne.w	r1, r1, #7
 800423c:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004240:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004244:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8004246:	bf08      	it	eq
 8004248:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800424c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800424e:	b91a      	cbnz	r2, 8004258 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8004250:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8004252:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004254:	2000      	movs	r0, #0
 8004256:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8004258:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800425a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800425c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800425e:	e7f9      	b.n	8004254 <HAL_PCDEx_PMAConfig+0x26>

08004260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004264:	4605      	mov	r5, r0
 8004266:	b338      	cbz	r0, 80042b8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004268:	6803      	ldr	r3, [r0, #0]
 800426a:	07db      	lsls	r3, r3, #31
 800426c:	d410      	bmi.n	8004290 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	079f      	lsls	r7, r3, #30
 8004272:	d45e      	bmi.n	8004332 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	0719      	lsls	r1, r3, #28
 8004278:	f100 8095 	bmi.w	80043a6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	075a      	lsls	r2, r3, #29
 8004280:	f100 80c1 	bmi.w	8004406 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004284:	69eb      	ldr	r3, [r5, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 812c 	bne.w	80044e4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800428c:	2000      	movs	r0, #0
 800428e:	e029      	b.n	80042e4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004290:	4c90      	ldr	r4, [pc, #576]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b04      	cmp	r3, #4
 800429a:	d007      	beq.n	80042ac <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d10a      	bne.n	80042bc <HAL_RCC_OscConfig+0x5c>
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	03de      	lsls	r6, r3, #15
 80042aa:	d507      	bpl.n	80042bc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	039c      	lsls	r4, r3, #14
 80042b0:	d5dd      	bpl.n	800426e <HAL_RCC_OscConfig+0xe>
 80042b2:	686b      	ldr	r3, [r5, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1da      	bne.n	800426e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
 80042ba:	e013      	b.n	80042e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042bc:	686b      	ldr	r3, [r5, #4]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c2:	d112      	bne.n	80042ea <HAL_RCC_OscConfig+0x8a>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042cc:	f7fd fd6c 	bl	8001da8 <HAL_GetTick>
 80042d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	0398      	lsls	r0, r3, #14
 80042d6:	d4ca      	bmi.n	800426e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fd fd66 	bl	8001da8 <HAL_GetTick>
 80042dc:	1b80      	subs	r0, r0, r6
 80042de:	2864      	cmp	r0, #100	@ 0x64
 80042e0:	d9f7      	bls.n	80042d2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80042e2:	2003      	movs	r0, #3
}
 80042e4:	b002      	add	sp, #8
 80042e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ea:	b99b      	cbnz	r3, 8004314 <HAL_RCC_OscConfig+0xb4>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042fc:	f7fd fd54 	bl	8001da8 <HAL_GetTick>
 8004300:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	0399      	lsls	r1, r3, #14
 8004306:	d5b2      	bpl.n	800426e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fd fd4e 	bl	8001da8 <HAL_GetTick>
 800430c:	1b80      	subs	r0, r0, r6
 800430e:	2864      	cmp	r0, #100	@ 0x64
 8004310:	d9f7      	bls.n	8004302 <HAL_RCC_OscConfig+0xa2>
 8004312:	e7e6      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	d103      	bne.n	8004324 <HAL_RCC_OscConfig+0xc4>
 800431c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	e7cf      	b.n	80042c4 <HAL_RCC_OscConfig+0x64>
 8004324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004330:	e7cb      	b.n	80042ca <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004332:	4c68      	ldr	r4, [pc, #416]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	f013 0f0c 	tst.w	r3, #12
 800433a:	d007      	beq.n	800434c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b08      	cmp	r3, #8
 8004344:	d110      	bne.n	8004368 <HAL_RCC_OscConfig+0x108>
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	03da      	lsls	r2, r3, #15
 800434a:	d40d      	bmi.n	8004368 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	079b      	lsls	r3, r3, #30
 8004350:	d502      	bpl.n	8004358 <HAL_RCC_OscConfig+0xf8>
 8004352:	692b      	ldr	r3, [r5, #16]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d1af      	bne.n	80042b8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	696a      	ldr	r2, [r5, #20]
 800435c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004360:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	e785      	b.n	8004274 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004368:	692a      	ldr	r2, [r5, #16]
 800436a:	4b5b      	ldr	r3, [pc, #364]	@ (80044d8 <HAL_RCC_OscConfig+0x278>)
 800436c:	b16a      	cbz	r2, 800438a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004372:	f7fd fd19 	bl	8001da8 <HAL_GetTick>
 8004376:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079f      	lsls	r7, r3, #30
 800437c:	d4ec      	bmi.n	8004358 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437e:	f7fd fd13 	bl	8001da8 <HAL_GetTick>
 8004382:	1b80      	subs	r0, r0, r6
 8004384:	2802      	cmp	r0, #2
 8004386:	d9f7      	bls.n	8004378 <HAL_RCC_OscConfig+0x118>
 8004388:	e7ab      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800438a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800438c:	f7fd fd0c 	bl	8001da8 <HAL_GetTick>
 8004390:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	0798      	lsls	r0, r3, #30
 8004396:	f57f af6d 	bpl.w	8004274 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fd05 	bl	8001da8 <HAL_GetTick>
 800439e:	1b80      	subs	r0, r0, r6
 80043a0:	2802      	cmp	r0, #2
 80043a2:	d9f6      	bls.n	8004392 <HAL_RCC_OscConfig+0x132>
 80043a4:	e79d      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a6:	69aa      	ldr	r2, [r5, #24]
 80043a8:	4e4a      	ldr	r6, [pc, #296]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 80043aa:	4b4b      	ldr	r3, [pc, #300]	@ (80044d8 <HAL_RCC_OscConfig+0x278>)
 80043ac:	b1e2      	cbz	r2, 80043e8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80043ae:	2201      	movs	r2, #1
 80043b0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80043b4:	f7fd fcf8 	bl	8001da8 <HAL_GetTick>
 80043b8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80043bc:	079b      	lsls	r3, r3, #30
 80043be:	d50d      	bpl.n	80043dc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043c0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80043c4:	4b45      	ldr	r3, [pc, #276]	@ (80044dc <HAL_RCC_OscConfig+0x27c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043cc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80043ce:	bf00      	nop
  }
  while (Delay --);
 80043d0:	9b01      	ldr	r3, [sp, #4]
 80043d2:	1e5a      	subs	r2, r3, #1
 80043d4:	9201      	str	r2, [sp, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f9      	bne.n	80043ce <HAL_RCC_OscConfig+0x16e>
 80043da:	e74f      	b.n	800427c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd fce4 	bl	8001da8 <HAL_GetTick>
 80043e0:	1b00      	subs	r0, r0, r4
 80043e2:	2802      	cmp	r0, #2
 80043e4:	d9e9      	bls.n	80043ba <HAL_RCC_OscConfig+0x15a>
 80043e6:	e77c      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80043e8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80043ec:	f7fd fcdc 	bl	8001da8 <HAL_GetTick>
 80043f0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80043f4:	079f      	lsls	r7, r3, #30
 80043f6:	f57f af41 	bpl.w	800427c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fcd5 	bl	8001da8 <HAL_GetTick>
 80043fe:	1b00      	subs	r0, r0, r4
 8004400:	2802      	cmp	r0, #2
 8004402:	d9f6      	bls.n	80043f2 <HAL_RCC_OscConfig+0x192>
 8004404:	e76d      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004406:	4c33      	ldr	r4, [pc, #204]	@ (80044d4 <HAL_RCC_OscConfig+0x274>)
 8004408:	69e3      	ldr	r3, [r4, #28]
 800440a:	00d8      	lsls	r0, r3, #3
 800440c:	d424      	bmi.n	8004458 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800440e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	69e3      	ldr	r3, [r4, #28]
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004416:	61e3      	str	r3, [r4, #28]
 8004418:	69e3      	ldr	r3, [r4, #28]
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	4e2f      	ldr	r6, [pc, #188]	@ (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	05d9      	lsls	r1, r3, #23
 8004428:	d518      	bpl.n	800445c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442a:	68eb      	ldr	r3, [r5, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d126      	bne.n	800447e <HAL_RCC_OscConfig+0x21e>
 8004430:	6a23      	ldr	r3, [r4, #32]
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004438:	f7fd fcb6 	bl	8001da8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004440:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004442:	6a23      	ldr	r3, [r4, #32]
 8004444:	079b      	lsls	r3, r3, #30
 8004446:	d53f      	bpl.n	80044c8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004448:	2f00      	cmp	r7, #0
 800444a:	f43f af1b 	beq.w	8004284 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800444e:	69e3      	ldr	r3, [r4, #28]
 8004450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004454:	61e3      	str	r3, [r4, #28]
 8004456:	e715      	b.n	8004284 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004458:	2700      	movs	r7, #0
 800445a:	e7e2      	b.n	8004422 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445c:	6833      	ldr	r3, [r6, #0]
 800445e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004462:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004464:	f7fd fca0 	bl	8001da8 <HAL_GetTick>
 8004468:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	6833      	ldr	r3, [r6, #0]
 800446c:	05da      	lsls	r2, r3, #23
 800446e:	d4dc      	bmi.n	800442a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fd fc9a 	bl	8001da8 <HAL_GetTick>
 8004474:	eba0 0008 	sub.w	r0, r0, r8
 8004478:	2864      	cmp	r0, #100	@ 0x64
 800447a:	d9f6      	bls.n	800446a <HAL_RCC_OscConfig+0x20a>
 800447c:	e731      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447e:	b9ab      	cbnz	r3, 80044ac <HAL_RCC_OscConfig+0x24c>
 8004480:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6223      	str	r3, [r4, #32]
 800448c:	6a23      	ldr	r3, [r4, #32]
 800448e:	f023 0304 	bic.w	r3, r3, #4
 8004492:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004494:	f7fd fc88 	bl	8001da8 <HAL_GetTick>
 8004498:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	6a23      	ldr	r3, [r4, #32]
 800449c:	0798      	lsls	r0, r3, #30
 800449e:	d5d3      	bpl.n	8004448 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd fc82 	bl	8001da8 <HAL_GetTick>
 80044a4:	1b80      	subs	r0, r0, r6
 80044a6:	4540      	cmp	r0, r8
 80044a8:	d9f7      	bls.n	800449a <HAL_RCC_OscConfig+0x23a>
 80044aa:	e71a      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	6a23      	ldr	r3, [r4, #32]
 80044b0:	d103      	bne.n	80044ba <HAL_RCC_OscConfig+0x25a>
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	6223      	str	r3, [r4, #32]
 80044b8:	e7ba      	b.n	8004430 <HAL_RCC_OscConfig+0x1d0>
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6223      	str	r3, [r4, #32]
 80044c0:	6a23      	ldr	r3, [r4, #32]
 80044c2:	f023 0304 	bic.w	r3, r3, #4
 80044c6:	e7b6      	b.n	8004436 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fd fc6e 	bl	8001da8 <HAL_GetTick>
 80044cc:	1b80      	subs	r0, r0, r6
 80044ce:	4540      	cmp	r0, r8
 80044d0:	d9b7      	bls.n	8004442 <HAL_RCC_OscConfig+0x1e2>
 80044d2:	e706      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
 80044d4:	40021000 	.word	0x40021000
 80044d8:	42420000 	.word	0x42420000
 80044dc:	20000018 	.word	0x20000018
 80044e0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e4:	4c2a      	ldr	r4, [pc, #168]	@ (8004590 <HAL_RCC_OscConfig+0x330>)
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	f002 020c 	and.w	r2, r2, #12
 80044ec:	2a08      	cmp	r2, #8
 80044ee:	d03e      	beq.n	800456e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f0:	2200      	movs	r2, #0
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	4b27      	ldr	r3, [pc, #156]	@ (8004594 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80044f6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f8:	d12c      	bne.n	8004554 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80044fa:	f7fd fc55 	bl	8001da8 <HAL_GetTick>
 80044fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	0199      	lsls	r1, r3, #6
 8004504:	d420      	bmi.n	8004548 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004506:	6a2b      	ldr	r3, [r5, #32]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d105      	bne.n	800451a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	68a9      	ldr	r1, [r5, #8]
 8004512:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004516:	430a      	orrs	r2, r1
 8004518:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800451a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800451c:	6862      	ldr	r2, [r4, #4]
 800451e:	430b      	orrs	r3, r1
 8004520:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004524:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004526:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004528:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800452a:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <HAL_RCC_OscConfig+0x334>)
 800452c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800452e:	f7fd fc3b 	bl	8001da8 <HAL_GetTick>
 8004532:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	f53f aea8 	bmi.w	800428c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fd fc34 	bl	8001da8 <HAL_GetTick>
 8004540:	1b40      	subs	r0, r0, r5
 8004542:	2802      	cmp	r0, #2
 8004544:	d9f6      	bls.n	8004534 <HAL_RCC_OscConfig+0x2d4>
 8004546:	e6cc      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004548:	f7fd fc2e 	bl	8001da8 <HAL_GetTick>
 800454c:	1b80      	subs	r0, r0, r6
 800454e:	2802      	cmp	r0, #2
 8004550:	d9d6      	bls.n	8004500 <HAL_RCC_OscConfig+0x2a0>
 8004552:	e6c6      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004554:	f7fd fc28 	bl	8001da8 <HAL_GetTick>
 8004558:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	f57f ae95 	bpl.w	800428c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fc21 	bl	8001da8 <HAL_GetTick>
 8004566:	1b40      	subs	r0, r0, r5
 8004568:	2802      	cmp	r0, #2
 800456a:	d9f6      	bls.n	800455a <HAL_RCC_OscConfig+0x2fa>
 800456c:	e6b9      	b.n	80042e2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456e:	2b01      	cmp	r3, #1
 8004570:	f43f aea2 	beq.w	80042b8 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004574:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	6a2b      	ldr	r3, [r5, #32]
 8004578:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800457c:	429a      	cmp	r2, r3
 800457e:	f47f ae9b 	bne.w	80042b8 <HAL_RCC_OscConfig+0x58>
 8004582:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004584:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004588:	1ac0      	subs	r0, r0, r3
 800458a:	bf18      	it	ne
 800458c:	2001      	movne	r0, #1
 800458e:	e6a9      	b.n	80042e4 <HAL_RCC_OscConfig+0x84>
 8004590:	40021000 	.word	0x40021000
 8004594:	42420000 	.word	0x42420000

08004598 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x38>)
 800459a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800459c:	f003 010c 	and.w	r1, r3, #12
 80045a0:	2908      	cmp	r1, #8
 80045a2:	d112      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045a4:	480b      	ldr	r0, [pc, #44]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045a6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045aa:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ac:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045ae:	d509      	bpl.n	80045c4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045b2:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x44>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045be:	fbb0 f0f3 	udiv	r0, r0, r3
 80045c2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045c4:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x48>)
 80045c6:	4358      	muls	r0, r3
 80045c8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80045ca:	4803      	ldr	r0, [pc, #12]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800a9f2 	.word	0x0800a9f2
 80045d8:	007a1200 	.word	0x007a1200
 80045dc:	0800a9f0 	.word	0x0800a9f0
 80045e0:	003d0900 	.word	0x003d0900

080045e4 <HAL_RCC_ClockConfig>:
{
 80045e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80045ea:	4604      	mov	r4, r0
 80045ec:	b910      	cbnz	r0, 80045f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4a44      	ldr	r2, [pc, #272]	@ (8004708 <HAL_RCC_ClockConfig+0x124>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d328      	bcc.n	8004652 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	6821      	ldr	r1, [r4, #0]
 8004602:	078e      	lsls	r6, r1, #30
 8004604:	d430      	bmi.n	8004668 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004606:	07ca      	lsls	r2, r1, #31
 8004608:	d443      	bmi.n	8004692 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800460a:	4a3f      	ldr	r2, [pc, #252]	@ (8004708 <HAL_RCC_ClockConfig+0x124>)
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	42ab      	cmp	r3, r5
 8004614:	d865      	bhi.n	80046e2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	4d3c      	ldr	r5, [pc, #240]	@ (800470c <HAL_RCC_ClockConfig+0x128>)
 800461a:	f012 0f04 	tst.w	r2, #4
 800461e:	d16c      	bne.n	80046fa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	0713      	lsls	r3, r2, #28
 8004622:	d506      	bpl.n	8004632 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004624:	686b      	ldr	r3, [r5, #4]
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800462c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004630:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f7ff ffb1 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004636:	686b      	ldr	r3, [r5, #4]
 8004638:	4a35      	ldr	r2, [pc, #212]	@ (8004710 <HAL_RCC_ClockConfig+0x12c>)
 800463a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	40d8      	lsrs	r0, r3
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCC_ClockConfig+0x130>)
 8004644:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004646:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <HAL_RCC_ClockConfig+0x134>)
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f7fd fb6b 	bl	8001d24 <HAL_InitTick>
  return HAL_OK;
 800464e:	2000      	movs	r0, #0
 8004650:	e7ce      	b.n	80045f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f023 0307 	bic.w	r3, r3, #7
 8004658:	430b      	orrs	r3, r1
 800465a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	428b      	cmp	r3, r1
 8004664:	d1c3      	bne.n	80045ee <HAL_RCC_ClockConfig+0xa>
 8004666:	e7cb      	b.n	8004600 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <HAL_RCC_ClockConfig+0x128>)
 800466a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466e:	bf1e      	ittt	ne
 8004670:	685a      	ldrne	r2, [r3, #4]
 8004672:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004676:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467a:	bf42      	ittt	mi
 800467c:	685a      	ldrmi	r2, [r3, #4]
 800467e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004682:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68a0      	ldr	r0, [r4, #8]
 8004688:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800468c:	4302      	orrs	r2, r0
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	e7b9      	b.n	8004606 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004692:	6862      	ldr	r2, [r4, #4]
 8004694:	4e1d      	ldr	r6, [pc, #116]	@ (800470c <HAL_RCC_ClockConfig+0x128>)
 8004696:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004698:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	d11a      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	d0a5      	beq.n	80045ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a8:	f023 0303 	bic.w	r3, r3, #3
 80046ac:	4313      	orrs	r3, r2
 80046ae:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80046b0:	f7fd fb7a 	bl	8001da8 <HAL_GetTick>
 80046b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	6873      	ldr	r3, [r6, #4]
 80046b8:	6862      	ldr	r2, [r4, #4]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046c2:	d0a2      	beq.n	800460a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fd fb70 	bl	8001da8 <HAL_GetTick>
 80046c8:	1bc0      	subs	r0, r0, r7
 80046ca:	4540      	cmp	r0, r8
 80046cc:	d9f3      	bls.n	80046b6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80046ce:	2003      	movs	r0, #3
 80046d0:	e78e      	b.n	80045f0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d2:	2a02      	cmp	r2, #2
 80046d4:	d102      	bne.n	80046dc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80046da:	e7e1      	b.n	80046a0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	f013 0f02 	tst.w	r3, #2
 80046e0:	e7de      	b.n	80046a0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	f023 0307 	bic.w	r3, r3, #7
 80046e8:	432b      	orrs	r3, r5
 80046ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	f47f af7b 	bne.w	80045ee <HAL_RCC_ClockConfig+0xa>
 80046f8:	e78d      	b.n	8004616 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fa:	686b      	ldr	r3, [r5, #4]
 80046fc:	68e1      	ldr	r1, [r4, #12]
 80046fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004702:	430b      	orrs	r3, r1
 8004704:	606b      	str	r3, [r5, #4]
 8004706:	e78b      	b.n	8004620 <HAL_RCC_ClockConfig+0x3c>
 8004708:	40022000 	.word	0x40022000
 800470c:	40021000 	.word	0x40021000
 8004710:	08009500 	.word	0x08009500
 8004714:	20000018 	.word	0x20000018
 8004718:	20000020 	.word	0x20000020

0800471c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x14>)
 800471e:	4a05      	ldr	r2, [pc, #20]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	4a03      	ldr	r2, [pc, #12]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800472a:	6810      	ldr	r0, [r2, #0]
}
 800472c:	40d8      	lsrs	r0, r3
 800472e:	4770      	bx	lr
 8004730:	40021000 	.word	0x40021000
 8004734:	080094f8 	.word	0x080094f8
 8004738:	20000018 	.word	0x20000018

0800473c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800473c:	6803      	ldr	r3, [r0, #0]
{
 800473e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004742:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004744:	07d8      	lsls	r0, r3, #31
 8004746:	d521      	bpl.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004748:	4c36      	ldr	r4, [pc, #216]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800474a:	69e3      	ldr	r3, [r4, #28]
 800474c:	00d9      	lsls	r1, r3, #3
 800474e:	d42b      	bmi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004750:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	69e3      	ldr	r3, [r4, #28]
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004758:	61e3      	str	r3, [r4, #28]
 800475a:	69e3      	ldr	r3, [r4, #28]
 800475c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004764:	4f30      	ldr	r7, [pc, #192]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	05da      	lsls	r2, r3, #23
 800476a:	d51f      	bpl.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800476e:	686a      	ldr	r2, [r5, #4]
 8004770:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004774:	d12e      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004776:	6a23      	ldr	r3, [r4, #32]
 8004778:	686a      	ldr	r2, [r5, #4]
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477e:	4313      	orrs	r3, r2
 8004780:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004782:	b11e      	cbz	r6, 800478c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004784:	69e3      	ldr	r3, [r4, #28]
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800478a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800478c:	682a      	ldr	r2, [r5, #0]
 800478e:	0791      	lsls	r1, r2, #30
 8004790:	d506      	bpl.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004792:	4924      	ldr	r1, [pc, #144]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004794:	68a8      	ldr	r0, [r5, #8]
 8004796:	684b      	ldr	r3, [r1, #4]
 8004798:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800479c:	4303      	orrs	r3, r0
 800479e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047a0:	06d3      	lsls	r3, r2, #27
 80047a2:	d436      	bmi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047a4:	2000      	movs	r0, #0
 80047a6:	e012      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80047a8:	2600      	movs	r6, #0
 80047aa:	e7db      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80047b4:	f7fd faf8 	bl	8001da8 <HAL_GetTick>
 80047b8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	05db      	lsls	r3, r3, #23
 80047be:	d4d5      	bmi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c0:	f7fd faf2 	bl	8001da8 <HAL_GetTick>
 80047c4:	eba0 0008 	sub.w	r0, r0, r8
 80047c8:	2864      	cmp	r0, #100	@ 0x64
 80047ca:	d9f6      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80047cc:	2003      	movs	r0, #3
}
 80047ce:	b002      	add	sp, #8
 80047d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80047d8:	429a      	cmp	r2, r3
 80047da:	d0cc      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80047dc:	2001      	movs	r0, #1
 80047de:	4a13      	ldr	r2, [pc, #76]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047ec:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80047f2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f4:	d5bf      	bpl.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80047f6:	f7fd fad7 	bl	8001da8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80047fe:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	6a23      	ldr	r3, [r4, #32]
 8004802:	0798      	lsls	r0, r3, #30
 8004804:	d4b7      	bmi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fd facf 	bl	8001da8 <HAL_GetTick>
 800480a:	1bc0      	subs	r0, r0, r7
 800480c:	4540      	cmp	r0, r8
 800480e:	d9f7      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004810:	e7dc      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004812:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004814:	68e9      	ldr	r1, [r5, #12]
 8004816:	6853      	ldr	r3, [r2, #4]
 8004818:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800481c:	430b      	orrs	r3, r1
 800481e:	6053      	str	r3, [r2, #4]
 8004820:	e7c0      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
 800482c:	42420000 	.word	0x42420000

08004830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	461f      	mov	r7, r3
 8004836:	4689      	mov	r9, r1
 8004838:	4690      	mov	r8, r2
 800483a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800483c:	f7fd fab4 	bl	8001da8 <HAL_GetTick>
 8004840:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004842:	443d      	add	r5, r7
 8004844:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004846:	f7fd faaf 	bl	8001da8 <HAL_GetTick>
 800484a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484c:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800484e:	681e      	ldr	r6, [r3, #0]
 8004850:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004854:	436e      	muls	r6, r5
 8004856:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6893      	ldr	r3, [r2, #8]
 800485c:	ea39 0303 	bics.w	r3, r9, r3
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	4543      	cmp	r3, r8
 8004868:	d101      	bne.n	800486e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800486a:	2000      	movs	r0, #0
 800486c:	e02e      	b.n	80048cc <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800486e:	1c7b      	adds	r3, r7, #1
 8004870:	d0f3      	beq.n	800485a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004872:	f7fd fa99 	bl	8001da8 <HAL_GetTick>
 8004876:	eba0 000a 	sub.w	r0, r0, sl
 800487a:	42a8      	cmp	r0, r5
 800487c:	d329      	bcc.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004886:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800488e:	d10a      	bne.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0x76>
 8004890:	68a2      	ldr	r2, [r4, #8]
 8004892:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004896:	d002      	beq.n	800489e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004898:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800489c:	d103      	bne.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80048a8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80048ac:	d107      	bne.n	80048be <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048bc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048be:	2301      	movs	r3, #1
 80048c0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048c4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80048c6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80048c8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80048cc:	b002      	add	sp, #8
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80048d2:	9a01      	ldr	r2, [sp, #4]
      count--;
 80048d4:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80048d6:	2a00      	cmp	r2, #0
      count--;
 80048d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80048dc:	bf08      	it	eq
 80048de:	4615      	moveq	r5, r2
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	e7b9      	b.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x28>
 80048e4:	20000018 	.word	0x20000018

080048e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048ea:	460b      	mov	r3, r1
 80048ec:	9200      	str	r2, [sp, #0]
{
 80048ee:	460d      	mov	r5, r1
 80048f0:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048f2:	2102      	movs	r1, #2
 80048f4:	2201      	movs	r2, #1
{
 80048f6:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048f8:	f7ff ff9a 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 80048fc:	4602      	mov	r2, r0
 80048fe:	b128      	cbz	r0, 800490c <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004900:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004902:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004904:	f043 0320 	orr.w	r3, r3, #32
 8004908:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800490a:	e007      	b.n	800491c <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	462b      	mov	r3, r5
 800490e:	2180      	movs	r1, #128	@ 0x80
 8004910:	4620      	mov	r0, r4
 8004912:	9600      	str	r6, [sp, #0]
 8004914:	f7ff ff8c 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004918:	2800      	cmp	r0, #0
 800491a:	d1f1      	bne.n	8004900 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800491c:	b002      	add	sp, #8
 800491e:	bd70      	pop	{r4, r5, r6, pc}

08004920 <SPI_EndRxTransaction>:
{
 8004920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004922:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004924:	6841      	ldr	r1, [r0, #4]
{
 8004926:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004928:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 800492c:	d118      	bne.n	8004960 <SPI_EndRxTransaction+0x40>
 800492e:	6881      	ldr	r1, [r0, #8]
 8004930:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004934:	d002      	beq.n	800493c <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004936:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800493a:	d111      	bne.n	8004960 <SPI_EndRxTransaction+0x40>
    __HAL_SPI_DISABLE(hspi);
 800493c:	6825      	ldr	r5, [r4, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800493e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8004942:	6828      	ldr	r0, [r5, #0]
 8004944:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004948:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800494a:	d109      	bne.n	8004960 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800494c:	9200      	str	r2, [sp, #0]
 800494e:	2101      	movs	r1, #1
 8004950:	2200      	movs	r2, #0
 8004952:	4620      	mov	r0, r4
 8004954:	f7ff ff6c 	bl	8004830 <SPI_WaitFlagStateUntilTimeout>
 8004958:	b930      	cbnz	r0, 8004968 <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 800495a:	2000      	movs	r0, #0
}
 800495c:	b003      	add	sp, #12
 800495e:	bd30      	pop	{r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	9200      	str	r2, [sp, #0]
 8004962:	2180      	movs	r1, #128	@ 0x80
 8004964:	2200      	movs	r2, #0
 8004966:	e7f4      	b.n	8004952 <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004968:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004972:	e7f3      	b.n	800495c <SPI_EndRxTransaction+0x3c>

08004974 <HAL_SPI_Init>:
{
 8004974:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004976:	4604      	mov	r4, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	d051      	beq.n	8004a20 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d14a      	bne.n	8004a18 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	6842      	ldr	r2, [r0, #4]
 8004984:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004988:	d000      	beq.n	800498c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004990:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8004994:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004998:	b923      	cbnz	r3, 80049a4 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800499a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800499c:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80049a0:	f7fc fefc 	bl	800179c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80049a4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80049a6:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80049a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80049ac:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ae:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80049b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80049bc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80049c0:	4303      	orrs	r3, r0
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	69a1      	ldr	r1, [r4, #24]
 80049c6:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80049ca:	4303      	orrs	r3, r0
 80049cc:	6920      	ldr	r0, [r4, #16]
 80049ce:	f000 0002 	and.w	r0, r0, #2
 80049d2:	4303      	orrs	r3, r0
 80049d4:	6960      	ldr	r0, [r4, #20]
 80049d6:	f000 0001 	and.w	r0, r0, #1
 80049da:	4303      	orrs	r3, r0
 80049dc:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80049e0:	4303      	orrs	r3, r0
 80049e2:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049e4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e6:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80049ea:	4303      	orrs	r3, r0
 80049ec:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ee:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f2:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80049f6:	4303      	orrs	r3, r0
 80049f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80049fa:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80049fe:	4303      	orrs	r3, r0
 8004a00:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a02:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a04:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a06:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a0c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a10:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a12:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8004a16:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a18:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1e:	e7b5      	b.n	800498c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7f8      	b.n	8004a16 <HAL_SPI_Init+0xa2>

08004a24 <HAL_SPI_Transmit>:
{
 8004a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	460d      	mov	r5, r1
 8004a2e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8004a30:	f7fd f9ba 	bl	8001da8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a34:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8004a38:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	b2d8      	uxtb	r0, r3
 8004a3e:	f040 809f 	bne.w	8004b80 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	d074      	beq.n	8004b30 <HAL_SPI_Transmit+0x10c>
 8004a46:	f1b8 0f00 	cmp.w	r8, #0
 8004a4a:	d071      	beq.n	8004b30 <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8004a4c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f000 8095 	beq.w	8004b80 <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a56:	2303      	movs	r3, #3
 8004a58:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8004a60:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8004a64:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a68:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a6a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a6c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004a70:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 8004a76:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a7a:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a7c:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a80:	d107      	bne.n	8004a92 <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8004a82:	6833      	ldr	r3, [r6, #0]
 8004a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a88:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a90:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a92:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a94:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a96:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004a98:	bf5e      	ittt	pl
 8004a9a:	6833      	ldrpl	r3, [r6, #0]
 8004a9c:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004aa0:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa2:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa8:	d145      	bne.n	8004b36 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aaa:	b113      	cbz	r3, 8004ab2 <HAL_SPI_Transmit+0x8e>
 8004aac:	f1b8 0f01 	cmp.w	r8, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ab2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ab6:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004aba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8004ac2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	b9d3      	cbnz	r3, 8004afe <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac8:	464a      	mov	r2, r9
 8004aca:	4639      	mov	r1, r7
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff ff0b 	bl	80048e8 <SPI_EndRxTxTransaction>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d151      	bne.n	8004b7a <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	b933      	cbnz	r3, 8004ae8 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	9201      	str	r2, [sp, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004aee:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8004af2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af6:	1ac0      	subs	r0, r0, r3
 8004af8:	bf18      	it	ne
 8004afa:	2001      	movne	r0, #1
 8004afc:	e018      	b.n	8004b30 <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	6893      	ldr	r3, [r2, #8]
 8004b02:	0798      	lsls	r0, r3, #30
 8004b04:	d505      	bpl.n	8004b12 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b08:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b0c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b10:	e7d3      	b.n	8004aba <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b12:	f7fd f949 	bl	8001da8 <HAL_GetTick>
 8004b16:	eba0 0009 	sub.w	r0, r0, r9
 8004b1a:	42b8      	cmp	r0, r7
 8004b1c:	d3d1      	bcc.n	8004ac2 <HAL_SPI_Transmit+0x9e>
 8004b1e:	1c79      	adds	r1, r7, #1
 8004b20:	d0cf      	beq.n	8004ac2 <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b28:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004b2a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8004b2c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004b30:	b003      	add	sp, #12
 8004b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b36:	b113      	cbz	r3, 8004b3e <HAL_SPI_Transmit+0x11a>
 8004b38:	f1b8 0f01 	cmp.w	r8, #1
 8004b3c:	d108      	bne.n	8004b50 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b3e:	782b      	ldrb	r3, [r5, #0]
 8004b40:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b44:	3301      	adds	r3, #1
 8004b46:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8004b50:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0b7      	beq.n	8004ac8 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	0792      	lsls	r2, r2, #30
 8004b5e:	d503      	bpl.n	8004b68 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	731a      	strb	r2, [r3, #12]
 8004b66:	e7ec      	b.n	8004b42 <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b68:	f7fd f91e 	bl	8001da8 <HAL_GetTick>
 8004b6c:	eba0 0009 	sub.w	r0, r0, r9
 8004b70:	42b8      	cmp	r0, r7
 8004b72:	d3ed      	bcc.n	8004b50 <HAL_SPI_Transmit+0x12c>
 8004b74:	1c7b      	adds	r3, r7, #1
 8004b76:	d0eb      	beq.n	8004b50 <HAL_SPI_Transmit+0x12c>
 8004b78:	e7d3      	b.n	8004b22 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	6563      	str	r3, [r4, #84]	@ 0x54
 8004b7e:	e7aa      	b.n	8004ad6 <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 8004b80:	2002      	movs	r0, #2
 8004b82:	e7d5      	b.n	8004b30 <HAL_SPI_Transmit+0x10c>

08004b84 <HAL_SPI_TransmitReceive>:
{
 8004b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b88:	4604      	mov	r4, r0
 8004b8a:	460d      	mov	r5, r1
 8004b8c:	4691      	mov	r9, r2
 8004b8e:	461e      	mov	r6, r3
 8004b90:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8004b94:	f7fd f908 	bl	8001da8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004b98:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8004b9c:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b9e:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8004ba0:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8004ba2:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ba4:	d00a      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x38>
 8004ba6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004baa:	f040 80e5 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 80e1 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1f4>
 8004bb6:	2904      	cmp	r1, #4
 8004bb8:	f040 80de 	bne.w	8004d78 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	d04b      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0xd4>
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	d048      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0xd4>
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	d046      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8004bca:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	f000 80d2 	beq.w	8004d78 <HAL_SPI_TransmitReceive+0x1f4>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bda:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bde:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004be2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004be4:	bf1c      	itt	ne
 8004be6:	2305      	movne	r3, #5
 8004be8:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8004bf0:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004bf6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8004bf8:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfa:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8004bfc:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfe:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8004c00:	bf58      	it	pl
 8004c02:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c04:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8004c06:	bf58      	it	pl
 8004c08:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8004c0c:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8004c0e:	bf58      	it	pl
 8004c10:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c12:	68e1      	ldr	r1, [r4, #12]
 8004c14:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8004c18:	d155      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1a:	b10a      	cbz	r2, 8004c20 <HAL_SPI_TransmitReceive+0x9c>
 8004c1c:	2e01      	cmp	r6, #1
 8004c1e:	d107      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c20:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004c24:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004c26:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8004c30:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	b98b      	cbnz	r3, 8004c5c <HAL_SPI_TransmitReceive+0xd8>
 8004c38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	b973      	cbnz	r3, 8004c5c <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c3e:	463a      	mov	r2, r7
 8004c40:	4641      	mov	r1, r8
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7ff fe50 	bl	80048e8 <SPI_EndRxTxTransaction>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f000 8081 	beq.w	8004d50 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c4e:	2320      	movs	r3, #32
 8004c50:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c52:	2300      	movs	r3, #0
 8004c54:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8004c58:	2001      	movs	r0, #1
 8004c5a:	e031      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5c:	6821      	ldr	r1, [r4, #0]
 8004c5e:	688b      	ldr	r3, [r1, #8]
 8004c60:	079a      	lsls	r2, r3, #30
 8004c62:	d50d      	bpl.n	8004c80 <HAL_SPI_TransmitReceive+0xfc>
 8004c64:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	b153      	cbz	r3, 8004c80 <HAL_SPI_TransmitReceive+0xfc>
 8004c6a:	b145      	cbz	r5, 8004c7e <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c6e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004c72:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c74:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c76:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8004c7e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	f012 0201 	ands.w	r2, r2, #1
 8004c86:	d00c      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x11e>
 8004c88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	b14b      	cbz	r3, 8004ca2 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8004c8e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c90:	68c9      	ldr	r1, [r1, #12]
 8004c92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004c94:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c98:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c9a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ca2:	f7fd f881 	bl	8001da8 <HAL_GetTick>
 8004ca6:	1bc0      	subs	r0, r0, r7
 8004ca8:	4540      	cmp	r0, r8
 8004caa:	d3c2      	bcc.n	8004c32 <HAL_SPI_TransmitReceive+0xae>
 8004cac:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004cb0:	d0bf      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004cb8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8004cbc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004cc0:	b003      	add	sp, #12
 8004cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc6:	b10a      	cbz	r2, 8004ccc <HAL_SPI_TransmitReceive+0x148>
 8004cc8:	2e01      	cmp	r6, #1
 8004cca:	d108      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ccc:	782a      	ldrb	r2, [r5, #0]
 8004cce:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cd6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8004cde:	2501      	movs	r5, #1
 8004ce0:	e02d      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	6893      	ldr	r3, [r2, #8]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d50e      	bpl.n	8004d08 <HAL_SPI_TransmitReceive+0x184>
 8004cea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	b15b      	cbz	r3, 8004d08 <HAL_SPI_TransmitReceive+0x184>
 8004cf0:	b14d      	cbz	r5, 8004d06 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004cf8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cfe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8004d06:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	6891      	ldr	r1, [r2, #8]
 8004d0c:	f011 0101 	ands.w	r1, r1, #1
 8004d10:	d00d      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x1aa>
 8004d12:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b153      	cbz	r3, 8004d2e <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8004d18:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d1a:	68d2      	ldr	r2, [r2, #12]
 8004d1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004d1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d20:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004d22:	3301      	adds	r3, #1
 8004d24:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d26:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2e:	f7fd f83b 	bl	8001da8 <HAL_GetTick>
 8004d32:	1bc0      	subs	r0, r0, r7
 8004d34:	4540      	cmp	r0, r8
 8004d36:	d302      	bcc.n	8004d3e <HAL_SPI_TransmitReceive+0x1ba>
 8004d38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d3c:	d1b9      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1cd      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x15e>
 8004d46:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1c9      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x15e>
 8004d4e:	e776      	b.n	8004c3e <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	b933      	cbnz	r3, 8004d62 <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	9201      	str	r2, [sp, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004d68:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d6a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8004d6c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d70:	1ac0      	subs	r0, r0, r3
 8004d72:	bf18      	it	ne
 8004d74:	2001      	movne	r0, #1
 8004d76:	e7a3      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8004d78:	2002      	movs	r0, #2
 8004d7a:	e7a1      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x13c>

08004d7c <HAL_SPI_Receive>:
{
 8004d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	461e      	mov	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d82:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 8004d86:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d88:	2b01      	cmp	r3, #1
{
 8004d8a:	4689      	mov	r9, r1
 8004d8c:	4617      	mov	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8e:	b2dd      	uxtb	r5, r3
 8004d90:	d004      	beq.n	8004d9c <HAL_SPI_Receive+0x20>
    return HAL_BUSY;
 8004d92:	2502      	movs	r5, #2
}
 8004d94:	4628      	mov	r0, r5
 8004d96:	b003      	add	sp, #12
 8004d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d9c:	6843      	ldr	r3, [r0, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004da2:	d10b      	bne.n	8004dbc <HAL_SPI_Receive+0x40>
 8004da4:	6883      	ldr	r3, [r0, #8]
 8004da6:	b94b      	cbnz	r3, 8004dbc <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004da8:	2304      	movs	r3, #4
 8004daa:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dae:	4613      	mov	r3, r2
 8004db0:	9600      	str	r6, [sp, #0]
 8004db2:	460a      	mov	r2, r1
 8004db4:	f7ff fee6 	bl	8004b84 <HAL_SPI_TransmitReceive>
 8004db8:	4605      	mov	r5, r0
 8004dba:	e7eb      	b.n	8004d94 <HAL_SPI_Receive+0x18>
  tickstart = HAL_GetTick();
 8004dbc:	f7fc fff4 	bl	8001da8 <HAL_GetTick>
 8004dc0:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0U))
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	d0e5      	beq.n	8004d94 <HAL_SPI_Receive+0x18>
 8004dc8:	2f00      	cmp	r7, #0
 8004dca:	d0e3      	beq.n	8004d94 <HAL_SPI_Receive+0x18>
  __HAL_LOCK(hspi);
 8004dcc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d0de      	beq.n	8004d92 <HAL_SPI_Receive+0x16>
 8004dd4:	2301      	movs	r3, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd6:	2500      	movs	r5, #0
  __HAL_LOCK(hspi);
 8004dd8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ddc:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dde:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004de0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de8:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8004dea:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004dee:	87e7      	strh	r7, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 8004df0:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004df2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004df6:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004df8:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004dfa:	86a5      	strh	r5, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004dfc:	86e5      	strh	r5, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfe:	d107      	bne.n	8004e10 <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e0e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	0655      	lsls	r5, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004e14:	bf5e      	ittt	pl
 8004e16:	681a      	ldrpl	r2, [r3, #0]
 8004e18:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8004e1c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	b1f3      	cbz	r3, 8004e60 <HAL_SPI_Receive+0xe4>
    while (hspi->RxXferCount > 0U)
 8004e22:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b1fb      	cbz	r3, 8004e68 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	07d2      	lsls	r2, r2, #31
 8004e2e:	d53c      	bpl.n	8004eaa <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e34:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e38:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e3a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004e42:	e7ee      	b.n	8004e22 <HAL_SPI_Receive+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	07d0      	lsls	r0, r2, #31
 8004e4a:	d51e      	bpl.n	8004e8a <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e4c:	7b1b      	ldrb	r3, [r3, #12]
 8004e4e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004e50:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e54:	3301      	adds	r3, #1
 8004e56:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e58:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8004e60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ed      	bne.n	8004e44 <HAL_SPI_Receive+0xc8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e68:	4642      	mov	r2, r8
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7ff fd57 	bl	8004920 <SPI_EndRxTransaction>
 8004e72:	bb18      	cbnz	r0, 8004ebc <HAL_SPI_Receive+0x140>
  hspi->State = HAL_SPI_STATE_READY;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004e7a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e7c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8004e7e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e82:	1aed      	subs	r5, r5, r3
 8004e84:	bf18      	it	ne
 8004e86:	2501      	movne	r5, #1
 8004e88:	e784      	b.n	8004d94 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8a:	f7fc ff8d 	bl	8001da8 <HAL_GetTick>
 8004e8e:	eba0 0008 	sub.w	r0, r0, r8
 8004e92:	42b0      	cmp	r0, r6
 8004e94:	d3e4      	bcc.n	8004e60 <HAL_SPI_Receive+0xe4>
 8004e96:	1c71      	adds	r1, r6, #1
 8004e98:	d0e2      	beq.n	8004e60 <HAL_SPI_Receive+0xe4>
          hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ea0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004ea2:	2503      	movs	r5, #3
          __HAL_UNLOCK(hspi);
 8004ea4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8004ea8:	e774      	b.n	8004d94 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eaa:	f7fc ff7d 	bl	8001da8 <HAL_GetTick>
 8004eae:	eba0 0008 	sub.w	r0, r0, r8
 8004eb2:	42b0      	cmp	r0, r6
 8004eb4:	d3b5      	bcc.n	8004e22 <HAL_SPI_Receive+0xa6>
 8004eb6:	1c73      	adds	r3, r6, #1
 8004eb8:	d0b3      	beq.n	8004e22 <HAL_SPI_Receive+0xa6>
 8004eba:	e7ee      	b.n	8004e9a <HAL_SPI_Receive+0x11e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ec0:	e7d8      	b.n	8004e74 <HAL_SPI_Receive+0xf8>

08004ec2 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_SPI_IRQHandler>:
{
 8004ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8004ec6:	6803      	ldr	r3, [r0, #0]
{
 8004ec8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8004eca:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004ecc:	689a      	ldr	r2, [r3, #8]
{
 8004ece:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ed0:	0656      	lsls	r6, r2, #25
 8004ed2:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8004ed6:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8004eda:	d408      	bmi.n	8004eee <HAL_SPI_IRQHandler+0x2a>
 8004edc:	07d6      	lsls	r6, r2, #31
 8004ede:	d506      	bpl.n	8004eee <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ee0:	064e      	lsls	r6, r1, #25
 8004ee2:	d504      	bpl.n	8004eee <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8004ee4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 8004ee6:	b005      	add	sp, #20
 8004ee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8004eec:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004eee:	0796      	lsls	r6, r2, #30
 8004ef0:	d504      	bpl.n	8004efc <HAL_SPI_IRQHandler+0x38>
 8004ef2:	0608      	lsls	r0, r1, #24
 8004ef4:	d502      	bpl.n	8004efc <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004efa:	e7f4      	b.n	8004ee6 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004efc:	ea45 1552 	orr.w	r5, r5, r2, lsr #5
 8004f00:	0956      	lsrs	r6, r2, #5
 8004f02:	07ea      	lsls	r2, r5, #31
 8004f04:	d54c      	bpl.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f06:	068d      	lsls	r5, r1, #26
 8004f08:	d54a      	bpl.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f0a:	b177      	cbz	r7, 8004f2a <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f0c:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 8004f10:	2000      	movs	r0, #0
 8004f12:	2a03      	cmp	r2, #3
 8004f14:	d03e      	beq.n	8004f94 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f18:	f042 0204 	orr.w	r2, r2, #4
 8004f1c:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1e:	9001      	str	r0, [sp, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	9201      	str	r2, [sp, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	9201      	str	r2, [sp, #4]
 8004f28:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f2a:	07f0      	lsls	r0, r6, #31
 8004f2c:	d50c      	bpl.n	8004f48 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f36:	2200      	movs	r2, #0
 8004f38:	9203      	str	r2, [sp, #12]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	9203      	str	r2, [sp, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f4a:	b34a      	cbz	r2, 8004fa0 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f52:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004f54:	2201      	movs	r2, #1
 8004f56:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f5a:	078a      	lsls	r2, r1, #30
 8004f5c:	d022      	beq.n	8004fa4 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f5e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004f60:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f62:	f022 0203 	bic.w	r2, r2, #3
 8004f66:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004f68:	b140      	cbz	r0, 8004f7c <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f6a:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <HAL_SPI_IRQHandler+0xe8>)
 8004f6c:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f6e:	f7fc ff97 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8004f72:	b118      	cbz	r0, 8004f7c <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f7a:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004f7c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004f7e:	b178      	cbz	r0, 8004fa0 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f80:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_SPI_IRQHandler+0xe8>)
 8004f82:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f84:	f7fc ff8c 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8004f88:	b150      	cbz	r0, 8004fa0 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f90:	6563      	str	r3, [r4, #84]	@ 0x54
 8004f92:	e005      	b.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f94:	9002      	str	r0, [sp, #8]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	9202      	str	r2, [sp, #8]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	9b02      	ldr	r3, [sp, #8]
}
 8004fa0:	b005      	add	sp, #20
 8004fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff ff8c 	bl	8004ec2 <HAL_SPI_ErrorCallback>
 8004faa:	e7f9      	b.n	8004fa0 <HAL_SPI_IRQHandler+0xdc>
 8004fac:	08004fb1 	.word	0x08004fb1

08004fb0 <SPI_DMAAbortOnError>:
{
 8004fb0:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8004fb2:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fb4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8004fb6:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004fb8:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 8004fba:	f7ff ff82 	bl	8004ec2 <HAL_SPI_ErrorCallback>
}
 8004fbe:	bd08      	pop	{r3, pc}

08004fc0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	6a02      	ldr	r2, [r0, #32]
{
 8004fc4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004fd6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fd8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004fda:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004fde:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe0:	4d0a      	ldr	r5, [pc, #40]	@ (800500c <TIM_OC1_SetConfig+0x4c>)
 8004fe2:	42a8      	cmp	r0, r5
 8004fe4:	d10b      	bne.n	8004ffe <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004fec:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fee:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004ff6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ffc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005000:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005002:	684a      	ldr	r2, [r1, #4]
 8005004:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	6203      	str	r3, [r0, #32]
}
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00

08005010 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005010:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005012:	6a02      	ldr	r2, [r0, #32]
{
 8005014:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005016:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800501a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005022:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005026:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005028:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800502a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005032:	4d0b      	ldr	r5, [pc, #44]	@ (8005060 <TIM_OC3_SetConfig+0x50>)
 8005034:	42a8      	cmp	r0, r5
 8005036:	d10d      	bne.n	8005054 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005038:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800503a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005046:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800504a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800504c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005050:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005056:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005058:	684a      	ldr	r2, [r1, #4]
 800505a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	6203      	str	r3, [r0, #32]
}
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	40012c00 	.word	0x40012c00

08005064 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005064:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005066:	6a02      	ldr	r2, [r0, #32]
{
 8005068:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800506e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005072:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005076:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800507e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005080:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005084:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005088:	4d06      	ldr	r5, [pc, #24]	@ (80050a4 <TIM_OC4_SetConfig+0x40>)
 800508a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800508c:	bf02      	ittt	eq
 800508e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005090:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005094:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800509c:	684a      	ldr	r2, [r1, #4]
 800509e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	6203      	str	r3, [r0, #32]
}
 80050a2:	bd30      	pop	{r4, r5, pc}
 80050a4:	40012c00 	.word	0x40012c00

080050a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80050a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d120      	bne.n	80050f2 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b6:	6803      	ldr	r3, [r0, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	4a0d      	ldr	r2, [pc, #52]	@ (80050f8 <HAL_TIM_Base_Start_IT+0x50>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00a      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x34>
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d007      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x34>
 80050cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <HAL_TIM_Base_Start_IT+0x34>
 80050d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80050d8:	4293      	cmp	r3, r2
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	2a06      	cmp	r2, #6
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050ee:	2000      	movs	r0, #0
 80050f0:	4770      	bx	lr
    return HAL_ERROR;
 80050f2:	2001      	movs	r0, #1
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00

080050fc <HAL_TIM_Encoder_Start>:
{
 80050fc:	4603      	mov	r3, r0
 80050fe:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005100:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005104:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005108:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800510c:	f893 4043 	ldrb.w	r4, [r3, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005110:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005112:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005114:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005116:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8005118:	b9c1      	cbnz	r1, 800514c <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	2801      	cmp	r0, #1
 800511c:	d145      	bne.n	80051aa <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800511e:	2d01      	cmp	r5, #1
 8005120:	d113      	bne.n	800514a <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800512c:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800512e:	6a11      	ldr	r1, [r2, #32]
 8005130:	f021 0101 	bic.w	r1, r1, #1
 8005134:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005136:	6a11      	ldr	r1, [r2, #32]
 8005138:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 800513c:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800513e:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 800514c:	2904      	cmp	r1, #4
 800514e:	d111      	bne.n	8005174 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005150:	2a01      	cmp	r2, #1
 8005152:	d12a      	bne.n	80051aa <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005154:	2c01      	cmp	r4, #1
 8005156:	d128      	bne.n	80051aa <HAL_TIM_Encoder_Start+0xae>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005162:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005164:	6a11      	ldr	r1, [r2, #32]
 8005166:	f021 0110 	bic.w	r1, r1, #16
 800516a:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800516c:	6a11      	ldr	r1, [r2, #32]
 800516e:	f041 0110 	orr.w	r1, r1, #16
 8005172:	e7e3      	b.n	800513c <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005174:	2801      	cmp	r0, #1
 8005176:	d118      	bne.n	80051aa <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005178:	2a01      	cmp	r2, #1
 800517a:	d1e6      	bne.n	800514a <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800517c:	2d01      	cmp	r5, #1
 800517e:	d1e4      	bne.n	800514a <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005180:	2c01      	cmp	r4, #1
 8005182:	d1e2      	bne.n	800514a <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005184:	2202      	movs	r2, #2
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005196:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005198:	6a11      	ldr	r1, [r2, #32]
 800519a:	f021 0101 	bic.w	r1, r1, #1
 800519e:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a0:	6a11      	ldr	r1, [r2, #32]
 80051a2:	f041 0101 	orr.w	r1, r1, #1
 80051a6:	6211      	str	r1, [r2, #32]
 80051a8:	e7dc      	b.n	8005164 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 80051aa:	2001      	movs	r0, #1
 80051ac:	e7cd      	b.n	800514a <HAL_TIM_Encoder_Start+0x4e>

080051ae <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80051b6:	6803      	ldr	r3, [r0, #0]
{
 80051b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80051ba:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051bc:	691e      	ldr	r6, [r3, #16]
{
 80051be:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c0:	07b1      	lsls	r1, r6, #30
 80051c2:	d50d      	bpl.n	80051e0 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051c4:	07aa      	lsls	r2, r5, #30
 80051c6:	d50b      	bpl.n	80051e0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051c8:	f06f 0202 	mvn.w	r2, #2
 80051cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ce:	2201      	movs	r2, #1
 80051d0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	079b      	lsls	r3, r3, #30
 80051d6:	d069      	beq.n	80052ac <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	f7ff ffea 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051dc:	2300      	movs	r3, #0
 80051de:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051e0:	0771      	lsls	r1, r6, #29
 80051e2:	d510      	bpl.n	8005206 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051e4:	076a      	lsls	r2, r5, #29
 80051e6:	d50e      	bpl.n	8005206 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e8:	f06f 0204 	mvn.w	r2, #4
 80051ec:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	2202      	movs	r2, #2
 80051f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80051fc:	d05c      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	f7ff ffd7 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	2300      	movs	r3, #0
 8005204:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005206:	0733      	lsls	r3, r6, #28
 8005208:	d50f      	bpl.n	800522a <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800520a:	0728      	lsls	r0, r5, #28
 800520c:	d50d      	bpl.n	800522a <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800520e:	f06f 0208 	mvn.w	r2, #8
 8005212:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8005214:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005218:	2204      	movs	r2, #4
 800521a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	0799      	lsls	r1, r3, #30
 8005220:	d050      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	f7ff ffc5 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	2300      	movs	r3, #0
 8005228:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800522a:	06f2      	lsls	r2, r6, #27
 800522c:	d510      	bpl.n	8005250 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800522e:	06eb      	lsls	r3, r5, #27
 8005230:	d50e      	bpl.n	8005250 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005232:	f06f 0210 	mvn.w	r2, #16
 8005236:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8005238:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800523a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523c:	2208      	movs	r2, #8
 800523e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005246:	d043      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005248:	f7ff ffb2 	bl	80051b0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	2300      	movs	r3, #0
 800524e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005250:	07f0      	lsls	r0, r6, #31
 8005252:	d508      	bpl.n	8005266 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005254:	07e9      	lsls	r1, r5, #31
 8005256:	d506      	bpl.n	8005266 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005260:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005262:	f7fc f821 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005266:	0632      	lsls	r2, r6, #24
 8005268:	d508      	bpl.n	800527c <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526a:	062b      	lsls	r3, r5, #24
 800526c:	d506      	bpl.n	800527c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800526e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005272:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8005274:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005276:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005278:	f000 f997 	bl	80055aa <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800527c:	0670      	lsls	r0, r6, #25
 800527e:	d508      	bpl.n	8005292 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005280:	0669      	lsls	r1, r5, #25
 8005282:	d506      	bpl.n	8005292 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005284:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005288:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 800528a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800528c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800528e:	f7ff ff91 	bl	80051b4 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005292:	06b2      	lsls	r2, r6, #26
 8005294:	d522      	bpl.n	80052dc <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005296:	06ab      	lsls	r3, r5, #26
 8005298:	d520      	bpl.n	80052dc <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800529a:	f06f 0220 	mvn.w	r2, #32
 800529e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	4620      	mov	r0, r4
}
 80052a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80052a8:	f000 b97e 	b.w	80055a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ac:	f7ff ff7f 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff ff7e 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80052b6:	e791      	b.n	80051dc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b8:	f7ff ff79 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff ff78 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80052c2:	e79e      	b.n	8005202 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c4:	f7ff ff73 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7ff ff72 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80052ce:	e7aa      	b.n	8005226 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	f7ff ff6d 	bl	80051ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7ff ff6c 	bl	80051b2 <HAL_TIM_PWM_PulseFinishedCallback>
 80052da:	e7b7      	b.n	800524c <HAL_TIM_IRQHandler+0x96>
}
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080052e0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e0:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <TIM_Base_SetConfig+0x60>)
  tmpcr1 = TIMx->CR1;
 80052e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	4290      	cmp	r0, r2
 80052e6:	d00a      	beq.n	80052fe <TIM_Base_SetConfig+0x1e>
 80052e8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80052ec:	d007      	beq.n	80052fe <TIM_Base_SetConfig+0x1e>
 80052ee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80052f2:	4290      	cmp	r0, r2
 80052f4:	d003      	beq.n	80052fe <TIM_Base_SetConfig+0x1e>
 80052f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052fa:	4290      	cmp	r0, r2
 80052fc:	d107      	bne.n	800530e <TIM_Base_SetConfig+0x2e>
    tmpcr1 |= Structure->CounterMode;
 80052fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005304:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005306:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530e:	694a      	ldr	r2, [r1, #20]
 8005310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005314:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005316:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005318:	688b      	ldr	r3, [r1, #8]
 800531a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800531c:	680b      	ldr	r3, [r1, #0]
 800531e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005320:	4b07      	ldr	r3, [pc, #28]	@ (8005340 <TIM_Base_SetConfig+0x60>)
 8005322:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	bf04      	itt	eq
 8005326:	690b      	ldreq	r3, [r1, #16]
 8005328:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800532a:	2301      	movs	r3, #1
 800532c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532e:	6903      	ldr	r3, [r0, #16]
 8005330:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005332:	bf42      	ittt	mi
 8005334:	6903      	ldrmi	r3, [r0, #16]
 8005336:	f023 0301 	bicmi.w	r3, r3, #1
 800533a:	6103      	strmi	r3, [r0, #16]
}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00

08005344 <HAL_TIM_PWM_Init>:
{
 8005344:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005346:	4604      	mov	r4, r0
 8005348:	b330      	cbz	r0, 8005398 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800534a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800534e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005352:	b91b      	cbnz	r3, 800535c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005354:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005358:	f7fc fab0 	bl	80018bc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005364:	1d21      	adds	r1, r4, #4
 8005366:	f7ff ffbb 	bl	80052e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536a:	2301      	movs	r3, #1
  return HAL_OK;
 800536c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005372:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005376:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800537a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800537e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005382:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800538a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800538e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005392:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005396:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005398:	2001      	movs	r0, #1
 800539a:	e7fc      	b.n	8005396 <HAL_TIM_PWM_Init+0x52>

0800539c <HAL_TIM_Encoder_Init>:
{
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	460d      	mov	r5, r1
  if (htim == NULL)
 80053a0:	4604      	mov	r4, r0
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d04c      	beq.n	8005440 <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80053ae:	b91b      	cbnz	r3, 80053b8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80053b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80053b4:	f7fc fa34 	bl	8001820 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053ba:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80053c4:	6883      	ldr	r3, [r0, #8]
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d0:	f7ff ff86 	bl	80052e0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80053d4:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80053d6:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 80053d8:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053da:	69ae      	ldr	r6, [r5, #24]
  tmpsmcr |= sConfig->EncoderMode;
 80053dc:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053de:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e4:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053e8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80053ec:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053ee:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053f0:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80053f8:	68ee      	ldr	r6, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053fa:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053fe:	4333      	orrs	r3, r6
 8005400:	6a2e      	ldr	r6, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005402:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005406:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer = htim->Instance->CCER;
 800540a:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800540c:	696e      	ldr	r6, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800540e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005410:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005412:	f027 0722 	bic.w	r7, r7, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005416:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  htim->Instance->SMCR = tmpsmcr;
 800541a:	6081      	str	r1, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800541c:	4317      	orrs	r7, r2
  htim->Instance->CCMR1 = tmpccmr1;
 800541e:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8005422:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8005424:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005426:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 800543a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005440:	2001      	movs	r0, #1
 8005442:	e7fc      	b.n	800543e <HAL_TIM_Encoder_Init+0xa2>

08005444 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005444:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005446:	6a02      	ldr	r2, [r0, #32]
{
 8005448:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544a:	f022 0210 	bic.w	r2, r2, #16
 800544e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005450:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005452:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005456:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800545a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800545e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005460:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005464:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005468:	4d0b      	ldr	r5, [pc, #44]	@ (8005498 <TIM_OC2_SetConfig+0x54>)
 800546a:	42a8      	cmp	r0, r5
 800546c:	d10d      	bne.n	800548a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005474:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005478:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800547c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005480:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005486:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800548a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800548c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800548e:	684a      	ldr	r2, [r1, #4]
 8005490:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005492:	6203      	str	r3, [r0, #32]
}
 8005494:	bd70      	pop	{r4, r5, r6, pc}
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00

0800549c <HAL_TIM_PWM_ConfigChannel>:
{
 800549c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800549e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80054a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d04f      	beq.n	8005548 <HAL_TIM_PWM_ConfigChannel+0xac>
 80054a8:	2001      	movs	r0, #1
  switch (Channel)
 80054aa:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80054ac:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 80054b0:	d03a      	beq.n	8005528 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80054b2:	d806      	bhi.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x26>
 80054b4:	b1ba      	cbz	r2, 80054e6 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80054b6:	2a04      	cmp	r2, #4
 80054b8:	d026      	beq.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80054c0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80054c2:	2a0c      	cmp	r2, #12
 80054c4:	d1f9      	bne.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	f7ff fdcc 	bl	8005064 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054cc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ce:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054d4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054d6:	69c3      	ldr	r3, [r0, #28]
 80054d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054dc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054de:	69c3      	ldr	r3, [r0, #28]
 80054e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80054e4:	e02e      	b.n	8005544 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	f7ff fd6a 	bl	8004fc0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ec:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ee:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f6:	6983      	ldr	r3, [r0, #24]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054fe:	6983      	ldr	r3, [r0, #24]
 8005500:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005502:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005504:	2000      	movs	r0, #0
 8005506:	e7d8      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	f7ff ff9b 	bl	8005444 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005510:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005512:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005516:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005518:	6983      	ldr	r3, [r0, #24]
 800551a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800551e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005520:	6983      	ldr	r3, [r0, #24]
 8005522:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005526:	e7ec      	b.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	f7ff fd71 	bl	8005010 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800552e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005530:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005532:	f043 0308 	orr.w	r3, r3, #8
 8005536:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005538:	69c3      	ldr	r3, [r0, #28]
 800553a:	f023 0304 	bic.w	r3, r3, #4
 800553e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005540:	69c3      	ldr	r3, [r0, #28]
 8005542:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005544:	61c3      	str	r3, [r0, #28]
      break;
 8005546:	e7dd      	b.n	8005504 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 8005548:	2002      	movs	r0, #2
 800554a:	e7b9      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x24>

0800554c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800554c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8005552:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8005554:	2b01      	cmp	r3, #1
 8005556:	f04f 0002 	mov.w	r0, #2
 800555a:	d022      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800555e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005562:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005564:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005566:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800556c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800556e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	4c0c      	ldr	r4, [pc, #48]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8005572:	42a3      	cmp	r3, r4
 8005574:	d00a      	beq.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557a:	d007      	beq.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800557c:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8005580:	42a3      	cmp	r3, r4
 8005582:	d003      	beq.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005584:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005588:	42a3      	cmp	r3, r4
 800558a:	d104      	bne.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005592:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005594:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005596:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005598:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800559a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800559e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80055a2:	bd30      	pop	{r4, r5, pc}
 80055a4:	40012c00 	.word	0x40012c00

080055a8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80055a8:	4770      	bx	lr

080055aa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80055aa:	4770      	bx	lr

080055ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055ac:	b084      	sub	sp, #16
 80055ae:	a804      	add	r0, sp, #16
 80055b0:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	b004      	add	sp, #16
 80055b8:	4770      	bx	lr

080055ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055ba:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055bc:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 80055c0:	2000      	movs	r0, #0
 80055c2:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80055c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80055ca:	4770      	bx	lr

080055cc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80055d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055d4:	045b      	lsls	r3, r3, #17
 80055d6:	0c5b      	lsrs	r3, r3, #17
 80055d8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80055dc:	2000      	movs	r0, #0
 80055de:	4770      	bx	lr

080055e0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80055e0:	2000      	movs	r0, #0
 80055e2:	4770      	bx	lr

080055e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055e6:	4604      	mov	r4, r0
 80055e8:	a804      	add	r0, sp, #16
 80055ea:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055ee:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 80055f6:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055fa:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055fe:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8005602:	b004      	add	sp, #16
 8005604:	bd10      	pop	{r4, pc}
	...

08005608 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800560a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800560c:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800560e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8005612:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005614:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8005618:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 800561c:	0424      	lsls	r4, r4, #16
 800561e:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8005620:	2d03      	cmp	r5, #3
 8005622:	d803      	bhi.n	800562c <USB_ActivateEndpoint+0x24>
 8005624:	e8df f005 	tbb	[pc, r5]
 8005628:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800562c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800562e:	f248 0680 	movw	r6, #32896	@ 0x8080
 8005632:	4334      	orrs	r4, r6
 8005634:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005638:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800563c:	4f9f      	ldr	r7, [pc, #636]	@ (80058bc <USB_ActivateEndpoint+0x2b4>)
 800563e:	b2a4      	uxth	r4, r4
 8005640:	403c      	ands	r4, r7
 8005642:	4314      	orrs	r4, r2
 8005644:	4334      	orrs	r4, r6
 8005646:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800564a:	7b0c      	ldrb	r4, [r1, #12]
 800564c:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8005650:	2c00      	cmp	r4, #0
 8005652:	f040 808d 	bne.w	8005770 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005656:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8005658:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800565a:	0864      	lsrs	r4, r4, #1
 800565c:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800565e:	b37e      	cbz	r6, 80056c0 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005660:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8005664:	b289      	uxth	r1, r1
 8005666:	4461      	add	r1, ip
 8005668:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800566c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005670:	0649      	lsls	r1, r1, #25
 8005672:	d509      	bpl.n	8005688 <USB_ActivateEndpoint+0x80>
 8005674:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005678:	b289      	uxth	r1, r1
 800567a:	4039      	ands	r1, r7
 800567c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005680:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8005684:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005688:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800568c:	4c8c      	ldr	r4, [pc, #560]	@ (80058c0 <USB_ActivateEndpoint+0x2b8>)
 800568e:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8005690:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005692:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005696:	d001      	beq.n	800569c <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005698:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800569c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80056a0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80056a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80056a8:	e04c      	b.n	8005744 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 80056aa:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 80056ac:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 80056b0:	e7bd      	b.n	800562e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b2:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 80056b6:	2000      	movs	r0, #0
 80056b8:	e7b9      	b.n	800562e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056ba:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 80056be:	e7fa      	b.n	80056b6 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056c0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056c4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056c6:	b2ad      	uxth	r5, r5
 80056c8:	4465      	add	r5, ip
 80056ca:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056ce:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80056d2:	293e      	cmp	r1, #62	@ 0x3e
 80056d4:	b2a4      	uxth	r4, r4
 80056d6:	4464      	add	r4, ip
 80056d8:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 80056dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056e0:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 80056e4:	d92f      	bls.n	8005746 <USB_ActivateEndpoint+0x13e>
 80056e6:	094d      	lsrs	r5, r1, #5
 80056e8:	06ce      	lsls	r6, r1, #27
 80056ea:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80056ee:	bf08      	it	eq
 80056f0:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80056f4:	b289      	uxth	r1, r1
 80056f6:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80056fa:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80056fe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005702:	b289      	uxth	r1, r1
 8005704:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005708:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800570c:	044f      	lsls	r7, r1, #17
 800570e:	d50d      	bpl.n	800572c <USB_ActivateEndpoint+0x124>
 8005710:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005714:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005718:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800571c:	0409      	lsls	r1, r1, #16
 800571e:	0c09      	lsrs	r1, r1, #16
 8005720:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005724:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005728:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 800572c:	4c65      	ldr	r4, [pc, #404]	@ (80058c4 <USB_ActivateEndpoint+0x2bc>)
 800572e:	b9c2      	cbnz	r2, 8005762 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	b292      	uxth	r2, r2
 8005734:	4022      	ands	r2, r4
 8005736:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800573a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005742:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005746:	b911      	cbnz	r1, 800574e <USB_ActivateEndpoint+0x146>
 8005748:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800574c:	e7d5      	b.n	80056fa <USB_ActivateEndpoint+0xf2>
 800574e:	084d      	lsrs	r5, r1, #1
 8005750:	07c9      	lsls	r1, r1, #31
 8005752:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005756:	bf48      	it	mi
 8005758:	3501      	addmi	r5, #1
 800575a:	b289      	uxth	r1, r1
 800575c:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8005760:	e7cf      	b.n	8005702 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005762:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005766:	b289      	uxth	r1, r1
 8005768:	4021      	ands	r1, r4
 800576a:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 800576e:	e795      	b.n	800569c <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8005770:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005772:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8005776:	d15b      	bne.n	8005830 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005778:	b2a4      	uxth	r4, r4
 800577a:	403c      	ands	r4, r7
 800577c:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8005780:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8005784:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005788:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800578c:	890e      	ldrh	r6, [r1, #8]
 800578e:	b2a4      	uxth	r4, r4
 8005790:	0876      	lsrs	r6, r6, #1
 8005792:	4464      	add	r4, ip
 8005794:	0076      	lsls	r6, r6, #1
 8005796:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 800579a:	894e      	ldrh	r6, [r1, #10]
 800579c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80057a0:	0876      	lsrs	r6, r6, #1
 80057a2:	b2a4      	uxth	r4, r4
 80057a4:	4464      	add	r4, ip
 80057a6:	0076      	lsls	r6, r6, #1
 80057a8:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80057ac:	7849      	ldrb	r1, [r1, #1]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d148      	bne.n	8005844 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057b2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80057b6:	044e      	lsls	r6, r1, #17
 80057b8:	d50d      	bpl.n	80057d6 <USB_ActivateEndpoint+0x1ce>
 80057ba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80057be:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80057c2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80057c6:	0409      	lsls	r1, r1, #16
 80057c8:	0c09      	lsrs	r1, r1, #16
 80057ca:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80057ce:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80057d2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057d6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80057da:	064d      	lsls	r5, r1, #25
 80057dc:	d50d      	bpl.n	80057fa <USB_ActivateEndpoint+0x1f2>
 80057de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80057e2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80057e6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80057ea:	0409      	lsls	r1, r1, #16
 80057ec:	0c09      	lsrs	r1, r1, #16
 80057ee:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80057f2:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80057f6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057fa:	f248 0480 	movw	r4, #32896	@ 0x8080
 80057fe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005802:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005806:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800580a:	0409      	lsls	r1, r1, #16
 800580c:	0c09      	lsrs	r1, r1, #16
 800580e:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8005812:	4321      	orrs	r1, r4
 8005814:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005818:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800581c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005820:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005824:	0409      	lsls	r1, r1, #16
 8005826:	0c09      	lsrs	r1, r1, #16
 8005828:	430c      	orrs	r4, r1
 800582a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800582e:	e789      	b.n	8005744 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005830:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8005834:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8005838:	0424      	lsls	r4, r4, #16
 800583a:	0c24      	lsrs	r4, r4, #16
 800583c:	4326      	orrs	r6, r4
 800583e:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8005842:	e7a1      	b.n	8005788 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005844:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005848:	044c      	lsls	r4, r1, #17
 800584a:	d50d      	bpl.n	8005868 <USB_ActivateEndpoint+0x260>
 800584c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005850:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005854:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005858:	0409      	lsls	r1, r1, #16
 800585a:	0c09      	lsrs	r1, r1, #16
 800585c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005860:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005864:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005868:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800586c:	0649      	lsls	r1, r1, #25
 800586e:	d50d      	bpl.n	800588c <USB_ActivateEndpoint+0x284>
 8005870:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005874:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005878:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800587c:	0409      	lsls	r1, r1, #16
 800587e:	0c09      	lsrs	r1, r1, #16
 8005880:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005884:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8005888:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800588c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005890:	4c0b      	ldr	r4, [pc, #44]	@ (80058c0 <USB_ActivateEndpoint+0x2b8>)
 8005892:	b289      	uxth	r1, r1
 8005894:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005896:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005898:	bf18      	it	ne
 800589a:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80058a2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80058a6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058aa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80058ae:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80058b2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80058b6:	0409      	lsls	r1, r1, #16
 80058b8:	0c09      	lsrs	r1, r1, #16
 80058ba:	e6ef      	b.n	800569c <USB_ActivateEndpoint+0x94>
 80058bc:	ffff8f8f 	.word	0xffff8f8f
 80058c0:	ffff8fbf 	.word	0xffff8fbf
 80058c4:	ffffbf8f 	.word	0xffffbf8f

080058c8 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80058c8:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80058cc:	7b09      	ldrb	r1, [r1, #12]
 80058ce:	bbd9      	cbnz	r1, 8005948 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80058d0:	b30a      	cbz	r2, 8005916 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058d6:	0651      	lsls	r1, r2, #25
 80058d8:	d50d      	bpl.n	80058f6 <USB_DeactivateEndpoint+0x2e>
 80058da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058de:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80058e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80058e6:	0412      	lsls	r2, r2, #16
 80058e8:	0c12      	lsrs	r2, r2, #16
 80058ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ee:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80058f2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058fa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80058fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005902:	0412      	lsls	r2, r2, #16
 8005904:	0c12      	lsrs	r2, r2, #16
 8005906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800590a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800590e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005912:	2000      	movs	r0, #0
 8005914:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005916:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800591a:	0452      	lsls	r2, r2, #17
 800591c:	d50d      	bpl.n	800593a <USB_DeactivateEndpoint+0x72>
 800591e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005922:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005926:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800592a:	0412      	lsls	r2, r2, #16
 800592c:	0c12      	lsrs	r2, r2, #16
 800592e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005932:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005936:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800593a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800593e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005942:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005946:	e7dc      	b.n	8005902 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8005948:	2a00      	cmp	r2, #0
 800594a:	d14a      	bne.n	80059e2 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800594c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005950:	0451      	lsls	r1, r2, #17
 8005952:	d50d      	bpl.n	8005970 <USB_DeactivateEndpoint+0xa8>
 8005954:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005958:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800595c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005960:	0412      	lsls	r2, r2, #16
 8005962:	0c12      	lsrs	r2, r2, #16
 8005964:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005968:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800596c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005970:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005974:	0652      	lsls	r2, r2, #25
 8005976:	d50d      	bpl.n	8005994 <USB_DeactivateEndpoint+0xcc>
 8005978:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800597c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005980:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005984:	0412      	lsls	r2, r2, #16
 8005986:	0c12      	lsrs	r2, r2, #16
 8005988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005990:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005994:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8005998:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800599c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80059a0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059a4:	0412      	lsls	r2, r2, #16
 80059a6:	0c12      	lsrs	r2, r2, #16
 80059a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ac:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80059b0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059c0:	0412      	lsls	r2, r2, #16
 80059c2:	0c12      	lsrs	r2, r2, #16
 80059c4:	430a      	orrs	r2, r1
 80059c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059ce:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80059d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059d6:	0412      	lsls	r2, r2, #16
 80059d8:	0c12      	lsrs	r2, r2, #16
 80059da:	4311      	orrs	r1, r2
 80059dc:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80059e0:	e797      	b.n	8005912 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059e6:	0451      	lsls	r1, r2, #17
 80059e8:	d50d      	bpl.n	8005a06 <USB_DeactivateEndpoint+0x13e>
 80059ea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059ee:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80059f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80059f6:	0412      	lsls	r2, r2, #16
 80059f8:	0c12      	lsrs	r2, r2, #16
 80059fa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80059fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a02:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005a0a:	0652      	lsls	r2, r2, #25
 8005a0c:	d50d      	bpl.n	8005a2a <USB_DeactivateEndpoint+0x162>
 8005a0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005a12:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005a16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a1a:	0412      	lsls	r2, r2, #16
 8005a1c:	0c12      	lsrs	r2, r2, #16
 8005a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a22:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005a26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a2a:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005a2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005a32:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005a36:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a3a:	0412      	lsls	r2, r2, #16
 8005a3c:	0c12      	lsrs	r2, r2, #16
 8005a3e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005a42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a46:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005a4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a56:	0412      	lsls	r2, r2, #16
 8005a58:	0c12      	lsrs	r2, r2, #16
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005a64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005a6c:	e7b3      	b.n	80059d6 <USB_DeactivateEndpoint+0x10e>

08005a6e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005a6e:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a70:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005a72:	b18b      	cbz	r3, 8005a98 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005a94:	2000      	movs	r0, #0
 8005a96:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	0c1b      	lsrs	r3, r3, #16
 8005aa8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005aac:	e7ec      	b.n	8005a88 <USB_EPSetStall+0x1a>

08005aae <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005aae:	7b0b      	ldrb	r3, [r1, #12]
 8005ab0:	bb3b      	cbnz	r3, 8005b02 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8005ab2:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab4:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005ab6:	b333      	cbz	r3, 8005b06 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005abc:	065b      	lsls	r3, r3, #25
 8005abe:	d50d      	bpl.n	8005adc <USB_EPClearStall+0x2e>
 8005ac0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	0c1b      	lsrs	r3, r3, #16
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ad8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005adc:	78cb      	ldrb	r3, [r1, #3]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00f      	beq.n	8005b02 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	0c1b      	lsrs	r3, r3, #16
 8005af2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005afe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005b02:	2000      	movs	r0, #0
 8005b04:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b0a:	045b      	lsls	r3, r3, #17
 8005b0c:	d50d      	bpl.n	8005b2a <USB_EPClearStall+0x7c>
 8005b0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	0c1b      	lsrs	r3, r3, #16
 8005b3a:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005b3e:	e7da      	b.n	8005af6 <USB_EPClearStall+0x48>

08005b40 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005b40:	b911      	cbnz	r1, 8005b48 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005b42:	2380      	movs	r3, #128	@ 0x80
 8005b44:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8005b48:	2000      	movs	r0, #0
 8005b4a:	4770      	bx	lr

08005b4c <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	4770      	bx	lr

08005b50 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005b50:	2000      	movs	r0, #0
 8005b52:	4770      	bx	lr

08005b54 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b54:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8005b58:	b280      	uxth	r0, r0
 8005b5a:	4770      	bx	lr

08005b5c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	4770      	bx	lr

08005b60 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b60:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b64:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b66:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8005b70:	4283      	cmp	r3, r0
 8005b72:	d100      	bne.n	8005b76 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005b74:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b76:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005b7a:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005b7e:	e7f7      	b.n	8005b70 <USB_WritePMA+0x10>

08005b80 <USB_EPStartXfer>:
{
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8005b84:	784b      	ldrb	r3, [r1, #1]
{
 8005b86:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8005b88:	2b01      	cmp	r3, #1
{
 8005b8a:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8005b8c:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8005b8e:	f040 8118 	bne.w	8005dc2 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8005b92:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005b96:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b98:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8005b9a:	454f      	cmp	r7, r9
 8005b9c:	bf28      	it	cs
 8005b9e:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8005ba0:	bb0a      	cbnz	r2, 8005be6 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ba2:	b2bf      	uxth	r7, r7
 8005ba4:	88ea      	ldrh	r2, [r5, #6]
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	f7ff ffda 	bl	8005b60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bac:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005bb0:	7829      	ldrb	r1, [r5, #0]
 8005bb2:	b280      	uxth	r0, r0
 8005bb4:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8005bb8:	0109      	lsls	r1, r1, #4
 8005bba:	4402      	add	r2, r0
 8005bbc:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bbe:	782a      	ldrb	r2, [r5, #0]
 8005bc0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8005bd4:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bde:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8005be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8005be6:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005be8:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8005bec:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8005bee:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bf0:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8005bf4:	f040 80d0 	bne.w	8005d98 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8005bf8:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bfa:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8005bfe:	f080 80b4 	bcs.w	8005d6a <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c02:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005c06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c0a:	0412      	lsls	r2, r2, #16
 8005c0c:	0c12      	lsrs	r2, r2, #16
 8005c0e:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8005c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c16:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c1a:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c1e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8005c22:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c24:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8005c28:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8005c2a:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c2e:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c30:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c34:	d04e      	beq.n	8005cd4 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c36:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8005c3a:	4472      	add	r2, lr
 8005c3c:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c40:	896a      	ldrh	r2, [r5, #10]
 8005c42:	f7ff ff8d 	bl	8005b60 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8005c46:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8005c48:	bf36      	itet	cc
 8005c4a:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005c4c:	2300      	movcs	r3, #0
 8005c4e:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c50:	786a      	ldrb	r2, [r5, #1]
 8005c52:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8005c54:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c58:	b2b3      	uxth	r3, r6
 8005c5a:	bb7a      	cbnz	r2, 8005cbc <USB_EPStartXfer+0x13c>
 8005c5c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005c60:	7828      	ldrb	r0, [r5, #0]
 8005c62:	b292      	uxth	r2, r2
 8005c64:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8005c68:	0100      	lsls	r0, r0, #4
 8005c6a:	4411      	add	r1, r2
 8005c6c:	5a42      	ldrh	r2, [r0, r1]
 8005c6e:	2e3e      	cmp	r6, #62	@ 0x3e
 8005c70:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c74:	5242      	strh	r2, [r0, r1]
 8005c76:	d914      	bls.n	8005ca2 <USB_EPStartXfer+0x122>
 8005c78:	5a42      	ldrh	r2, [r0, r1]
 8005c7a:	0977      	lsrs	r7, r6, #5
 8005c7c:	06f6      	lsls	r6, r6, #27
 8005c7e:	bf08      	it	eq
 8005c80:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005c84:	b292      	uxth	r2, r2
 8005c86:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005c8a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005c8e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005c92:	b292      	uxth	r2, r2
 8005c94:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c96:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c98:	4651      	mov	r1, sl
 8005c9a:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c9c:	f7ff ff60 	bl	8005b60 <USB_WritePMA>
 8005ca0:	e78d      	b.n	8005bbe <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ca2:	b90e      	cbnz	r6, 8005ca8 <USB_EPStartXfer+0x128>
 8005ca4:	5a42      	ldrh	r2, [r0, r1]
 8005ca6:	e7f0      	b.n	8005c8a <USB_EPStartXfer+0x10a>
 8005ca8:	07f2      	lsls	r2, r6, #31
 8005caa:	5a42      	ldrh	r2, [r0, r1]
 8005cac:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8005cb0:	bf48      	it	mi
 8005cb2:	3701      	addmi	r7, #1
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005cba:	e7ea      	b.n	8005c92 <USB_EPStartXfer+0x112>
 8005cbc:	2a01      	cmp	r2, #1
 8005cbe:	d1ea      	bne.n	8005c96 <USB_EPStartXfer+0x116>
 8005cc0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005cc4:	7829      	ldrb	r1, [r5, #0]
 8005cc6:	b280      	uxth	r0, r0
 8005cc8:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8005ccc:	0109      	lsls	r1, r1, #4
 8005cce:	4402      	add	r2, r0
 8005cd0:	528b      	strh	r3, [r1, r2]
 8005cd2:	e7e0      	b.n	8005c96 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cd4:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005cd8:	4472      	add	r2, lr
 8005cda:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cde:	892a      	ldrh	r2, [r5, #8]
 8005ce0:	f7ff ff3e 	bl	8005b60 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8005ce4:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8005ce6:	bf36      	itet	cc
 8005ce8:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005cea:	4643      	movcs	r3, r8
 8005cec:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cee:	786a      	ldrb	r2, [r5, #1]
 8005cf0:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8005cf2:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cf6:	b2b3      	uxth	r3, r6
 8005cf8:	bb5a      	cbnz	r2, 8005d52 <USB_EPStartXfer+0x1d2>
 8005cfa:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005cfe:	7828      	ldrb	r0, [r5, #0]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8005d06:	0100      	lsls	r0, r0, #4
 8005d08:	4411      	add	r1, r2
 8005d0a:	5a42      	ldrh	r2, [r0, r1]
 8005d0c:	2e3e      	cmp	r6, #62	@ 0x3e
 8005d0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005d12:	5242      	strh	r2, [r0, r1]
 8005d14:	d910      	bls.n	8005d38 <USB_EPStartXfer+0x1b8>
 8005d16:	5a42      	ldrh	r2, [r0, r1]
 8005d18:	0977      	lsrs	r7, r6, #5
 8005d1a:	06f6      	lsls	r6, r6, #27
 8005d1c:	bf08      	it	eq
 8005d1e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005d22:	b292      	uxth	r2, r2
 8005d24:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005d28:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005d2c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005d30:	b292      	uxth	r2, r2
 8005d32:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d34:	896a      	ldrh	r2, [r5, #10]
 8005d36:	e7af      	b.n	8005c98 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d38:	b90e      	cbnz	r6, 8005d3e <USB_EPStartXfer+0x1be>
 8005d3a:	5a42      	ldrh	r2, [r0, r1]
 8005d3c:	e7f4      	b.n	8005d28 <USB_EPStartXfer+0x1a8>
 8005d3e:	07f2      	lsls	r2, r6, #31
 8005d40:	5a42      	ldrh	r2, [r0, r1]
 8005d42:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8005d46:	bf48      	it	mi
 8005d48:	3701      	addmi	r7, #1
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005d50:	e7ee      	b.n	8005d30 <USB_EPStartXfer+0x1b0>
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	d1ee      	bne.n	8005d34 <USB_EPStartXfer+0x1b4>
 8005d56:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005d5a:	7829      	ldrb	r1, [r5, #0]
 8005d5c:	b280      	uxth	r0, r0
 8005d5e:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8005d62:	0109      	lsls	r1, r1, #4
 8005d64:	4402      	add	r2, r0
 8005d66:	528b      	strh	r3, [r1, r2]
 8005d68:	e7e4      	b.n	8005d34 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005d6a:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8005d6e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d72:	0412      	lsls	r2, r2, #16
 8005d74:	0c12      	lsrs	r2, r2, #16
 8005d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d7e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d82:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005d86:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	441a      	add	r2, r3
 8005d8e:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d90:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d94:	892a      	ldrh	r2, [r5, #8]
 8005d96:	e781      	b.n	8005c9c <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8005d98:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d9a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 8005d9e:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005da0:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005da4:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005da6:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005da8:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005daa:	d506      	bpl.n	8005dba <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dac:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8005db0:	4432      	add	r2, r6
 8005db2:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005db6:	896a      	ldrh	r2, [r5, #10]
 8005db8:	e770      	b.n	8005c9c <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dba:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005dbe:	4432      	add	r2, r6
 8005dc0:	e7e6      	b.n	8005d90 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d13b      	bne.n	8005e3e <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8005dc6:	698b      	ldr	r3, [r1, #24]
 8005dc8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005dca:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8005dce:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8005dd0:	bf84      	itt	hi
 8005dd2:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8005dd4:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005dd6:	7829      	ldrb	r1, [r5, #0]
 8005dd8:	61aa      	str	r2, [r5, #24]
 8005dda:	b280      	uxth	r0, r0
 8005ddc:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8005de0:	0109      	lsls	r1, r1, #4
 8005de2:	4402      	add	r2, r0
 8005de4:	5a88      	ldrh	r0, [r1, r2]
 8005de6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005dec:	5288      	strh	r0, [r1, r2]
 8005dee:	d91a      	bls.n	8005e26 <USB_EPStartXfer+0x2a6>
 8005df0:	0958      	lsrs	r0, r3, #5
 8005df2:	06de      	lsls	r6, r3, #27
 8005df4:	5a8b      	ldrh	r3, [r1, r2]
 8005df6:	bf08      	it	eq
 8005df8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e0e:	782a      	ldrb	r2, [r5, #0]
 8005e10:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005e24:	e6d6      	b.n	8005bd4 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e26:	b90b      	cbnz	r3, 8005e2c <USB_EPStartXfer+0x2ac>
 8005e28:	5a8b      	ldrh	r3, [r1, r2]
 8005e2a:	e7ea      	b.n	8005e02 <USB_EPStartXfer+0x282>
 8005e2c:	0858      	lsrs	r0, r3, #1
 8005e2e:	07db      	lsls	r3, r3, #31
 8005e30:	5a8b      	ldrh	r3, [r1, r2]
 8005e32:	bf48      	it	mi
 8005e34:	3001      	addmi	r0, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005e3c:	e7e5      	b.n	8005e0a <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8005e3e:	78ca      	ldrb	r2, [r1, #3]
 8005e40:	2a02      	cmp	r2, #2
 8005e42:	d170      	bne.n	8005f26 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d138      	bne.n	8005eba <USB_EPStartXfer+0x33a>
 8005e48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005e4c:	780b      	ldrb	r3, [r1, #0]
 8005e4e:	b292      	uxth	r2, r2
 8005e50:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	4410      	add	r0, r2
 8005e58:	5ac2      	ldrh	r2, [r0, r3]
 8005e5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005e5e:	52c2      	strh	r2, [r0, r3]
 8005e60:	690a      	ldr	r2, [r1, #16]
 8005e62:	2a3e      	cmp	r2, #62	@ 0x3e
 8005e64:	d946      	bls.n	8005ef4 <USB_EPStartXfer+0x374>
 8005e66:	5ac1      	ldrh	r1, [r0, r3]
 8005e68:	0956      	lsrs	r6, r2, #5
 8005e6a:	06d7      	lsls	r7, r2, #27
 8005e6c:	bf08      	it	eq
 8005e6e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005e72:	b289      	uxth	r1, r1
 8005e74:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005e78:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005e7c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005e80:	b289      	uxth	r1, r1
 8005e82:	52c1      	strh	r1, [r0, r3]
 8005e84:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005e88:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8005e8c:	b280      	uxth	r0, r0
 8005e8e:	4401      	add	r1, r0
 8005e90:	5ac8      	ldrh	r0, [r1, r3]
 8005e92:	2a3e      	cmp	r2, #62	@ 0x3e
 8005e94:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005e98:	52c8      	strh	r0, [r1, r3]
 8005e9a:	d938      	bls.n	8005f0e <USB_EPStartXfer+0x38e>
 8005e9c:	0950      	lsrs	r0, r2, #5
 8005e9e:	06d7      	lsls	r7, r2, #27
 8005ea0:	5aca      	ldrh	r2, [r1, r3]
 8005ea2:	bf08      	it	eq
 8005ea4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005eae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005eb2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8005eba:	69eb      	ldr	r3, [r5, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0a6      	beq.n	8005e0e <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ec0:	f244 0340 	movw	r3, #16448	@ 0x4040
 8005ec4:	782a      	ldrb	r2, [r5, #0]
 8005ec6:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005eca:	ea03 0001 	and.w	r0, r3, r1
 8005ece:	438b      	bics	r3, r1
 8005ed0:	d001      	beq.n	8005ed6 <USB_EPStartXfer+0x356>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d19b      	bne.n	8005e0e <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ed6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005eee:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8005ef2:	e78c      	b.n	8005e0e <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ef4:	b90a      	cbnz	r2, 8005efa <USB_EPStartXfer+0x37a>
 8005ef6:	5ac1      	ldrh	r1, [r0, r3]
 8005ef8:	e7be      	b.n	8005e78 <USB_EPStartXfer+0x2f8>
 8005efa:	07d1      	lsls	r1, r2, #31
 8005efc:	5ac1      	ldrh	r1, [r0, r3]
 8005efe:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8005f02:	bf48      	it	mi
 8005f04:	3601      	addmi	r6, #1
 8005f06:	b289      	uxth	r1, r1
 8005f08:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005f0c:	e7b8      	b.n	8005e80 <USB_EPStartXfer+0x300>
 8005f0e:	b90a      	cbnz	r2, 8005f14 <USB_EPStartXfer+0x394>
 8005f10:	5aca      	ldrh	r2, [r1, r3]
 8005f12:	e7cc      	b.n	8005eae <USB_EPStartXfer+0x32e>
 8005f14:	0850      	lsrs	r0, r2, #1
 8005f16:	07d6      	lsls	r6, r2, #31
 8005f18:	5aca      	ldrh	r2, [r1, r3]
 8005f1a:	bf48      	it	mi
 8005f1c:	3001      	addmi	r0, #1
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005f24:	e7c7      	b.n	8005eb6 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	d15d      	bne.n	8005fe6 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8005f2a:	698a      	ldr	r2, [r1, #24]
 8005f2c:	6909      	ldr	r1, [r1, #16]
 8005f2e:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8005f30:	bf94      	ite	ls
 8005f32:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8005f34:	1a50      	subhi	r0, r2, r1
 8005f36:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8005f38:	bf88      	it	hi
 8005f3a:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f af66 	bne.w	8005e0e <USB_EPStartXfer+0x28e>
 8005f42:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8005f46:	782b      	ldrb	r3, [r5, #0]
 8005f48:	b289      	uxth	r1, r1
 8005f4a:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	4408      	add	r0, r1
 8005f52:	5ac1      	ldrh	r1, [r0, r3]
 8005f54:	2a3e      	cmp	r2, #62	@ 0x3e
 8005f56:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005f5a:	52c1      	strh	r1, [r0, r3]
 8005f5c:	d92b      	bls.n	8005fb6 <USB_EPStartXfer+0x436>
 8005f5e:	06d1      	lsls	r1, r2, #27
 8005f60:	5ac1      	ldrh	r1, [r0, r3]
 8005f62:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8005f66:	bf08      	it	eq
 8005f68:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005f6c:	b289      	uxth	r1, r1
 8005f6e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005f72:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005f76:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005f7a:	b289      	uxth	r1, r1
 8005f7c:	52c1      	strh	r1, [r0, r3]
 8005f7e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005f82:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8005f86:	b280      	uxth	r0, r0
 8005f88:	4401      	add	r1, r0
 8005f8a:	5ac8      	ldrh	r0, [r1, r3]
 8005f8c:	2a3e      	cmp	r2, #62	@ 0x3e
 8005f8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005f92:	52c8      	strh	r0, [r1, r3]
 8005f94:	d91b      	bls.n	8005fce <USB_EPStartXfer+0x44e>
 8005f96:	0950      	lsrs	r0, r2, #5
 8005f98:	06d6      	lsls	r6, r2, #27
 8005f9a:	5aca      	ldrh	r2, [r1, r3]
 8005f9c:	bf08      	it	eq
 8005f9e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005fa8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005fac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	52ca      	strh	r2, [r1, r3]
 8005fb4:	e72b      	b.n	8005e0e <USB_EPStartXfer+0x28e>
 8005fb6:	b90a      	cbnz	r2, 8005fbc <USB_EPStartXfer+0x43c>
 8005fb8:	5ac1      	ldrh	r1, [r0, r3]
 8005fba:	e7da      	b.n	8005f72 <USB_EPStartXfer+0x3f2>
 8005fbc:	5ac1      	ldrh	r1, [r0, r3]
 8005fbe:	0856      	lsrs	r6, r2, #1
 8005fc0:	07d7      	lsls	r7, r2, #31
 8005fc2:	bf48      	it	mi
 8005fc4:	3601      	addmi	r6, #1
 8005fc6:	b289      	uxth	r1, r1
 8005fc8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005fcc:	e7d5      	b.n	8005f7a <USB_EPStartXfer+0x3fa>
 8005fce:	b90a      	cbnz	r2, 8005fd4 <USB_EPStartXfer+0x454>
 8005fd0:	5aca      	ldrh	r2, [r1, r3]
 8005fd2:	e7e9      	b.n	8005fa8 <USB_EPStartXfer+0x428>
 8005fd4:	0850      	lsrs	r0, r2, #1
 8005fd6:	07d2      	lsls	r2, r2, #31
 8005fd8:	5aca      	ldrh	r2, [r1, r3]
 8005fda:	bf48      	it	mi
 8005fdc:	3001      	addmi	r0, #1
 8005fde:	b292      	uxth	r2, r2
 8005fe0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005fe4:	e7e4      	b.n	8005fb0 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e5fb      	b.n	8005be2 <USB_EPStartXfer+0x62>

08005fea <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8005fee:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ff0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ff4:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005ff6:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ff8:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8005ffa:	462e      	mov	r6, r5
 8005ffc:	3402      	adds	r4, #2
 8005ffe:	b936      	cbnz	r6, 800600e <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006000:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8006002:	bf44      	itt	mi
 8006004:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006008:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800600e:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8006012:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8006014:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006016:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800601a:	0a12      	lsrs	r2, r2, #8
 800601c:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8006020:	e7ec      	b.n	8005ffc <USB_ReadPMA+0x12>
	...

08006024 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006026:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8006028:	4c14      	ldr	r4, [pc, #80]	@ (800607c <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800602a:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006032:	6963      	ldr	r3, [r4, #20]
 8006034:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006036:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006038:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800603c:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800603e:	b10b      	cbz	r3, 8006044 <WIZCHIP_READ+0x20>
 8006040:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006042:	b98b      	cbnz	r3, 8006068 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006044:	6a23      	ldr	r3, [r4, #32]
 8006046:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006048:	4630      	mov	r0, r6
 800604a:	6a23      	ldr	r3, [r4, #32]
 800604c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800604e:	4628      	mov	r0, r5
 8006050:	6a23      	ldr	r3, [r4, #32]
 8006052:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8006054:	69e3      	ldr	r3, [r4, #28]
 8006056:	4798      	blx	r3
 8006058:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 800605a:	69a3      	ldr	r3, [r4, #24]
 800605c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800605e:	6923      	ldr	r3, [r4, #16]
 8006060:	4798      	blx	r3
   return ret;
}
 8006062:	4628      	mov	r0, r5
 8006064:	b002      	add	sp, #8
 8006066:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006068:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800606c:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800606e:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006072:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006076:	a801      	add	r0, sp, #4
 8006078:	4798      	blx	r3
 800607a:	e7eb      	b.n	8006054 <WIZCHIP_READ+0x30>
 800607c:	20000028 	.word	0x20000028

08006080 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8006080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006082:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8006084:	4c16      	ldr	r4, [pc, #88]	@ (80060e0 <WIZCHIP_WRITE+0x60>)
{
 8006086:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8006088:	68e3      	ldr	r3, [r4, #12]
 800608a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800608c:	6963      	ldr	r3, [r4, #20]
 800608e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006090:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006092:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006096:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800609a:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800609c:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80060a0:	b983      	cbnz	r3, 80060c4 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80060a2:	6a23      	ldr	r3, [r4, #32]
 80060a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80060a6:	4628      	mov	r0, r5
 80060a8:	6a23      	ldr	r3, [r4, #32]
 80060aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80060ac:	4638      	mov	r0, r7
 80060ae:	6a23      	ldr	r3, [r4, #32]
 80060b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80060b2:	4630      	mov	r0, r6
 80060b4:	6a23      	ldr	r3, [r4, #32]
 80060b6:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 80060b8:	69a3      	ldr	r3, [r4, #24]
 80060ba:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	4798      	blx	r3
}
 80060c0:	b003      	add	sp, #12
 80060c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80060c4:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80060c6:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80060ca:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80060ce:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 80060d2:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80060d6:	eb0d 0001 	add.w	r0, sp, r1
 80060da:	4798      	blx	r3
 80060dc:	e7ec      	b.n	80060b8 <WIZCHIP_WRITE+0x38>
 80060de:	bf00      	nop
 80060e0:	20000028 	.word	0x20000028

080060e4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80060e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060e8:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80060ea:	4c1a      	ldr	r4, [pc, #104]	@ (8006154 <WIZCHIP_READ_BUF+0x70>)
{
 80060ec:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 80060ee:	68e3      	ldr	r3, [r4, #12]
{
 80060f0:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 80060f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80060f4:	6963      	ldr	r3, [r4, #20]
 80060f6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80060f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80060fa:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80060fe:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006102:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006104:	b10b      	cbz	r3, 800610a <WIZCHIP_READ_BUF+0x26>
 8006106:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006108:	b9b3      	cbnz	r3, 8006138 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800610a:	6a23      	ldr	r3, [r4, #32]
 800610c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800610e:	4640      	mov	r0, r8
 8006110:	6a23      	ldr	r3, [r4, #32]
 8006112:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006114:	4628      	mov	r0, r5
 8006116:	6a23      	ldr	r3, [r4, #32]
 8006118:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800611a:	4437      	add	r7, r6
 800611c:	42b7      	cmp	r7, r6
 800611e:	d106      	bne.n	800612e <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8006120:	69a3      	ldr	r3, [r4, #24]
 8006122:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006124:	6923      	ldr	r3, [r4, #16]
 8006126:	4798      	blx	r3
}
 8006128:	b002      	add	sp, #8
 800612a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800612e:	69e3      	ldr	r3, [r4, #28]
 8006130:	4798      	blx	r3
 8006132:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 8006136:	e7f1      	b.n	800611c <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006138:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800613c:	2103      	movs	r1, #3
 800613e:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006140:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006144:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006148:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800614a:	4639      	mov	r1, r7
 800614c:	4630      	mov	r0, r6
 800614e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006150:	4798      	blx	r3
 8006152:	e7e5      	b.n	8006120 <WIZCHIP_READ_BUF+0x3c>
 8006154:	20000028 	.word	0x20000028

08006158 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800615c:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800615e:	4c1a      	ldr	r4, [pc, #104]	@ (80061c8 <WIZCHIP_WRITE_BUF+0x70>)
{
 8006160:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 8006162:	68e3      	ldr	r3, [r4, #12]
{
 8006164:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 8006166:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006168:	6963      	ldr	r3, [r4, #20]
 800616a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800616c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800616e:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006172:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006176:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006178:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800617c:	b9b3      	cbnz	r3, 80061ac <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800617e:	6a23      	ldr	r3, [r4, #32]
 8006180:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006182:	4628      	mov	r0, r5
 8006184:	6a23      	ldr	r3, [r4, #32]
 8006186:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006188:	4630      	mov	r0, r6
 800618a:	6a23      	ldr	r3, [r4, #32]
 800618c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800618e:	44b8      	add	r8, r7
 8006190:	45b8      	cmp	r8, r7
 8006192:	d106      	bne.n	80061a2 <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8006194:	69a3      	ldr	r3, [r4, #24]
 8006196:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	4798      	blx	r3
}
 800619c:	b002      	add	sp, #8
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80061a2:	6a23      	ldr	r3, [r4, #32]
 80061a4:	f817 0b01 	ldrb.w	r0, [r7], #1
 80061a8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80061aa:	e7f1      	b.n	8006190 <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80061ac:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80061b0:	2103      	movs	r1, #3
 80061b2:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80061b4:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80061b8:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80061bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80061be:	4641      	mov	r1, r8
 80061c0:	4638      	mov	r0, r7
 80061c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061c4:	4798      	blx	r3
 80061c6:	e7e5      	b.n	8006194 <WIZCHIP_WRITE_BUF+0x3c>
 80061c8:	20000028 	.word	0x20000028

080061cc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 80061ce:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80061d0:	0144      	lsls	r4, r0, #5
 80061d2:	3408      	adds	r4, #8
 80061d4:	f504 5700 	add.w	r7, r4, #8192	@ 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80061d8:	f504 5404 	add.w	r4, r4, #8448	@ 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff21 	bl	8006024 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80061e2:	0206      	lsls	r6, r0, #8
 80061e4:	4620      	mov	r0, r4
 80061e6:	f7ff ff1d 	bl	8006024 <WIZCHIP_READ>
 80061ea:	b2b6      	uxth	r6, r6
 80061ec:	4406      	add	r6, r0
 80061ee:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 80061f0:	b14e      	cbz	r6, 8006206 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80061f2:	4638      	mov	r0, r7
 80061f4:	f7ff ff16 	bl	8006024 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80061f8:	0205      	lsls	r5, r0, #8
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff ff12 	bl	8006024 <WIZCHIP_READ>
 8006200:	b2ad      	uxth	r5, r5
 8006202:	4405      	add	r5, r0
 8006204:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8006206:	42b5      	cmp	r5, r6
 8006208:	d1e8      	bne.n	80061dc <getSn_TX_FSR+0x10>
   return val;
}
 800620a:	4628      	mov	r0, r5
 800620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800620e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800620e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8006210:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006212:	0144      	lsls	r4, r0, #5
 8006214:	3408      	adds	r4, #8
 8006216:	f504 5718 	add.w	r7, r4, #9728	@ 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800621a:	f504 541c 	add.w	r4, r4, #9984	@ 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff ff00 	bl	8006024 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006224:	0206      	lsls	r6, r0, #8
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff fefc 	bl	8006024 <WIZCHIP_READ>
 800622c:	b2b6      	uxth	r6, r6
 800622e:	4406      	add	r6, r0
 8006230:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 8006232:	b14e      	cbz	r6, 8006248 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006234:	4638      	mov	r0, r7
 8006236:	f7ff fef5 	bl	8006024 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800623a:	0205      	lsls	r5, r0, #8
 800623c:	4620      	mov	r0, r4
 800623e:	f7ff fef1 	bl	8006024 <WIZCHIP_READ>
 8006242:	b2ad      	uxth	r5, r5
 8006244:	4405      	add	r5, r0
 8006246:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8006248:	42b5      	cmp	r5, r6
 800624a:	d1e8      	bne.n	800621e <getSn_RX_RSR+0x10>
   return val;
}
 800624c:	4628      	mov	r0, r5
 800624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006250 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8006250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006254:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8006256:	4614      	mov	r4, r2
 8006258:	b32a      	cbz	r2, 80062a6 <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 800625a:	0085      	lsls	r5, r0, #2
 800625c:	1c6f      	adds	r7, r5, #1
 800625e:	00ff      	lsls	r7, r7, #3
 8006260:	f507 5810 	add.w	r8, r7, #9216	@ 0x2400
 8006264:	4640      	mov	r0, r8
 8006266:	f7ff fedd 	bl	8006024 <WIZCHIP_READ>
 800626a:	f507 5714 	add.w	r7, r7, #9472	@ 0x2500
 800626e:	4606      	mov	r6, r0
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff fed7 	bl	8006024 <WIZCHIP_READ>
 8006276:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800627a:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800627c:	3502      	adds	r5, #2
 800627e:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8006280:	4622      	mov	r2, r4
 8006282:	4649      	mov	r1, r9
 8006284:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8006288:	f7ff ff66 	bl	8006158 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800628c:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 800628e:	4640      	mov	r0, r8
   ptr += len;
 8006290:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 8006292:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8006296:	f7ff fef3 	bl	8006080 <WIZCHIP_WRITE>
 800629a:	4638      	mov	r0, r7
 800629c:	b2e1      	uxtb	r1, r4
}
 800629e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 80062a2:	f7ff beed 	b.w	8006080 <WIZCHIP_WRITE>
}
 80062a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080062aa <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80062aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ae:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 80062b0:	4614      	mov	r4, r2
 80062b2:	b32a      	cbz	r2, 8006300 <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 80062b4:	0085      	lsls	r5, r0, #2
 80062b6:	1c6f      	adds	r7, r5, #1
 80062b8:	00ff      	lsls	r7, r7, #3
 80062ba:	f507 5820 	add.w	r8, r7, #10240	@ 0x2800
 80062be:	4640      	mov	r0, r8
 80062c0:	f7ff feb0 	bl	8006024 <WIZCHIP_READ>
 80062c4:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 80062c8:	4606      	mov	r6, r0
 80062ca:	4638      	mov	r0, r7
 80062cc:	f7ff feaa 	bl	8006024 <WIZCHIP_READ>
 80062d0:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80062d4:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80062d6:	3503      	adds	r5, #3
 80062d8:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80062da:	4622      	mov	r2, r4
 80062dc:	4649      	mov	r1, r9
 80062de:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 80062e2:	f7ff feff 	bl	80060e4 <WIZCHIP_READ_BUF>
   ptr += len;
 80062e6:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 80062e8:	4640      	mov	r0, r8
   ptr += len;
 80062ea:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 80062ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80062f0:	f7ff fec6 	bl	8006080 <WIZCHIP_WRITE>
 80062f4:	4638      	mov	r0, r7
 80062f6:	b2e1      	uxtb	r1, r4
}
 80062f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 80062fc:	f7ff bec0 	b.w	8006080 <WIZCHIP_WRITE>
}
 8006300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006304 <close>:
   return (int8_t)sn;
}  

int8_t close(uint8_t sn)
{
   CHECK_SOCKNUM();
 8006304:	2807      	cmp	r0, #7
{
 8006306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006308:	4604      	mov	r4, r0
   CHECK_SOCKNUM();
 800630a:	d82d      	bhi.n	8006368 <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 800630c:	0147      	lsls	r7, r0, #5
 800630e:	f107 0608 	add.w	r6, r7, #8
 8006312:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006316:	2110      	movs	r1, #16
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff feb1 	bl	8006080 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800631e:	4638      	mov	r0, r7
 8006320:	f7ff fe80 	bl	8006024 <WIZCHIP_READ>
 8006324:	4605      	mov	r5, r0
 8006326:	2800      	cmp	r0, #0
 8006328:	d1f9      	bne.n	800631e <close+0x1a>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 800632a:	211f      	movs	r1, #31
 800632c:	f506 7000 	add.w	r0, r6, #512	@ 0x200
 8006330:	f7ff fea6 	bl	8006080 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8006334:	2301      	movs	r3, #1
 8006336:	40a3      	lsls	r3, r4
 8006338:	43db      	mvns	r3, r3
 800633a:	490d      	ldr	r1, [pc, #52]	@ (8006370 <close+0x6c>)
 800633c:	b29b      	uxth	r3, r3
 800633e:	880a      	ldrh	r2, [r1, #0]
	//
   sock_is_sending &= ~(1<<sn);
   sock_remained_size[sn] = 0;
   sock_pack_info[sn] = PACK_NONE;
   while(getSn_SR(sn) != SOCK_CLOSED);
 8006340:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_io_mode &= ~(1<<sn); 
 8006344:	401a      	ands	r2, r3
 8006346:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8006348:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <close+0x70>)
 800634a:	8811      	ldrh	r1, [r2, #0]
 800634c:	400b      	ands	r3, r1
 800634e:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8006350:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <close+0x74>)
 8006352:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8006356:	4b09      	ldr	r3, [pc, #36]	@ (800637c <close+0x78>)
 8006358:	551d      	strb	r5, [r3, r4]
   while(getSn_SR(sn) != SOCK_CLOSED);
 800635a:	4630      	mov	r0, r6
 800635c:	f7ff fe62 	bl	8006024 <WIZCHIP_READ>
 8006360:	2800      	cmp	r0, #0
 8006362:	d1fa      	bne.n	800635a <close+0x56>
 8006364:	2001      	movs	r0, #1
   return SOCK_OK;
}
 8006366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	e7fb      	b.n	8006366 <close+0x62>
 800636e:	bf00      	nop
 8006370:	20000642 	.word	0x20000642
 8006374:	20000640 	.word	0x20000640
 8006378:	20000630 	.word	0x20000630
 800637c:	20000628 	.word	0x20000628

08006380 <socket>:
   CHECK_SOCKNUM(); 
 8006380:	2807      	cmp	r0, #7
{ 
 8006382:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006386:	4604      	mov	r4, r0
 8006388:	4688      	mov	r8, r1
 800638a:	4617      	mov	r7, r2
 800638c:	461d      	mov	r5, r3
   CHECK_SOCKNUM(); 
 800638e:	f200 8082 	bhi.w	8006496 <socket+0x116>
   switch (protocol & 0x0F)
 8006392:	f001 030f 	and.w	r3, r1, #15
 8006396:	3b01      	subs	r3, #1
 8006398:	2b0d      	cmp	r3, #13
 800639a:	d87f      	bhi.n	800649c <socket+0x11c>
 800639c:	e8df f003 	tbb	[pc, r3]
 80063a0:	15151507 	.word	0x15151507
 80063a4:	7e7e7e7e 	.word	0x7e7e7e7e
 80063a8:	7e15157e 	.word	0x7e15157e
 80063ac:	157e      	.short	0x157e
            getSIPR((uint8_t*)&taddr);
 80063ae:	2204      	movs	r2, #4
 80063b0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80063b4:	eb0d 0102 	add.w	r1, sp, r2
 80063b8:	f7ff fe94 	bl	80060e4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80063bc:	9b01      	ldr	r3, [sp, #4]
 80063be:	b923      	cbnz	r3, 80063ca <socket+0x4a>
 80063c0:	f06f 0002 	mvn.w	r0, #2
}  
 80063c4:	b002      	add	sp, #8
 80063c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80063ca:	0768      	lsls	r0, r5, #29
 80063cc:	d457      	bmi.n	800647e <socket+0xfe>
   if(flag != 0)
 80063ce:	b12d      	cbz	r5, 80063dc <socket+0x5c>
      switch(protocol)
 80063d0:	f1b8 0f01 	cmp.w	r8, #1
 80063d4:	d050      	beq.n	8006478 <socket+0xf8>
 80063d6:	f1b8 0f02 	cmp.w	r8, #2
 80063da:	d053      	beq.n	8006484 <socket+0x104>
   close(sn);
 80063dc:	4620      	mov	r0, r4
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80063de:	0166      	lsls	r6, r4, #5
   close(sn);
 80063e0:	f7ff ff90 	bl	8006304 <close>
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80063e4:	3608      	adds	r6, #8
 80063e6:	f025 010f 	bic.w	r1, r5, #15
 80063ea:	4630      	mov	r0, r6
 80063ec:	ea48 0101 	orr.w	r1, r8, r1
 80063f0:	f7ff fe46 	bl	8006080 <WIZCHIP_WRITE>
   if(!port)
 80063f4:	b96f      	cbnz	r7, 8006412 <socket+0x92>
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80063f6:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
      port = sock_any_port++;
 80063fa:	4a2a      	ldr	r2, [pc, #168]	@ (80064a4 <socket+0x124>)
 80063fc:	8817      	ldrh	r7, [r2, #0]
 80063fe:	1c7b      	adds	r3, r7, #1
 8006400:	b29b      	uxth	r3, r3
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8006402:	428b      	cmp	r3, r1
 8006404:	bf05      	ittet	eq
 8006406:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
      port = sock_any_port++;
 800640a:	f64f 77ef 	movweq	r7, #65519	@ 0xffef
 800640e:	8013      	strhne	r3, [r2, #0]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8006410:	8013      	strheq	r3, [r2, #0]
   setSn_PORTR(sn,port);
 8006412:	0a39      	lsrs	r1, r7, #8
 8006414:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 8006418:	f7ff fe32 	bl	8006080 <WIZCHIP_WRITE>
 800641c:	b2f9      	uxtb	r1, r7
 800641e:	f506 60a0 	add.w	r0, r6, #1280	@ 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8006422:	f506 7780 	add.w	r7, r6, #256	@ 0x100
   setSn_PORTR(sn,port);
 8006426:	f7ff fe2b 	bl	8006080 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800642a:	2101      	movs	r1, #1
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff fe27 	bl	8006080 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8006432:	4638      	mov	r0, r7
 8006434:	f7ff fdf6 	bl	8006024 <WIZCHIP_READ>
 8006438:	2800      	cmp	r0, #0
 800643a:	d1fa      	bne.n	8006432 <socket+0xb2>
   sock_io_mode &= ~(1 <<sn);
 800643c:	2301      	movs	r3, #1
 800643e:	40a3      	lsls	r3, r4
 8006440:	43db      	mvns	r3, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8006442:	4919      	ldr	r1, [pc, #100]	@ (80064a8 <socket+0x128>)
 8006444:	b29b      	uxth	r3, r3
   sock_io_mode &= ~(1 <<sn);
 8006446:	880a      	ldrh	r2, [r1, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8006448:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 800644c:	401a      	ands	r2, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800644e:	40a5      	lsls	r5, r4
 8006450:	432a      	orrs	r2, r5
 8006452:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8006454:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <socket+0x12c>)
   while(getSn_SR(sn) == SOCK_CLOSED);
 8006456:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_is_sending &= ~(1<<sn);
 800645a:	8811      	ldrh	r1, [r2, #0]
 800645c:	400b      	ands	r3, r1
 800645e:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <socket+0x130>)
 8006462:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8006466:	4b13      	ldr	r3, [pc, #76]	@ (80064b4 <socket+0x134>)
 8006468:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff fdda 	bl	8006024 <WIZCHIP_READ>
 8006470:	2800      	cmp	r0, #0
 8006472:	d0fa      	beq.n	800646a <socket+0xea>
   return (int8_t)sn;
 8006474:	b260      	sxtb	r0, r4
 8006476:	e7a5      	b.n	80063c4 <socket+0x44>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8006478:	f015 0f21 	tst.w	r5, #33	@ 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800647c:	d1ae      	bne.n	80063dc <socket+0x5c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800647e:	f06f 0005 	mvn.w	r0, #5
 8006482:	e79f      	b.n	80063c4 <socket+0x44>
   	      if(flag & SF_IGMP_VER2)
 8006484:	06a9      	lsls	r1, r5, #26
 8006486:	d501      	bpl.n	800648c <socket+0x10c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8006488:	062a      	lsls	r2, r5, #24
 800648a:	d5f8      	bpl.n	800647e <socket+0xfe>
      	      if(flag & SF_UNI_BLOCK)
 800648c:	06eb      	lsls	r3, r5, #27
 800648e:	d5a5      	bpl.n	80063dc <socket+0x5c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8006490:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006494:	e7f2      	b.n	800647c <socket+0xfc>
   CHECK_SOCKNUM(); 
 8006496:	f04f 30ff 	mov.w	r0, #4294967295
 800649a:	e793      	b.n	80063c4 <socket+0x44>
   switch (protocol & 0x0F)
 800649c:	f06f 0004 	mvn.w	r0, #4
 80064a0:	e790      	b.n	80063c4 <socket+0x44>
 80064a2:	bf00      	nop
 80064a4:	20000024 	.word	0x20000024
 80064a8:	20000642 	.word	0x20000642
 80064ac:	20000640 	.word	0x20000640
 80064b0:	20000630 	.word	0x20000630
 80064b4:	20000628 	.word	0x20000628

080064b8 <listen>:

int8_t listen(uint8_t sn)
{
   CHECK_SOCKNUM();
 80064b8:	2807      	cmp	r0, #7
{
 80064ba:	b570      	push	{r4, r5, r6, lr}
 80064bc:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 80064be:	d827      	bhi.n	8006510 <listen+0x58>
   CHECK_TCPMODE(); 
 80064c0:	0144      	lsls	r4, r0, #5
 80064c2:	3408      	adds	r4, #8
 80064c4:	4620      	mov	r0, r4
 80064c6:	f7ff fdad 	bl	8006024 <WIZCHIP_READ>
 80064ca:	f000 0003 	and.w	r0, r0, #3
 80064ce:	2801      	cmp	r0, #1
 80064d0:	d121      	bne.n	8006516 <listen+0x5e>
   CHECK_SOCKINIT();
 80064d2:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff fda4 	bl	8006024 <WIZCHIP_READ>
 80064dc:	2813      	cmp	r0, #19
 80064de:	d11d      	bne.n	800651c <listen+0x64>
   setSn_CR(sn,Sn_CR_LISTEN);
 80064e0:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 80064e4:	2102      	movs	r1, #2
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff fdca 	bl	8006080 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff fd99 	bl	8006024 <WIZCHIP_READ>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1fa      	bne.n	80064ec <listen+0x34>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7ff fd94 	bl	8006024 <WIZCHIP_READ>
 80064fc:	2814      	cmp	r0, #20
 80064fe:	d101      	bne.n	8006504 <listen+0x4c>
   {
      close(sn);
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 8006500:	2001      	movs	r0, #1
 8006502:	e004      	b.n	800650e <listen+0x56>
      close(sn);
 8006504:	4628      	mov	r0, r5
 8006506:	f7ff fefd 	bl	8006304 <close>
      return SOCKERR_SOCKCLOSED;
 800650a:	f06f 0003 	mvn.w	r0, #3
}
 800650e:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	e7fb      	b.n	800650e <listen+0x56>
   CHECK_TCPMODE(); 
 8006516:	f06f 0004 	mvn.w	r0, #4
 800651a:	e7f8      	b.n	800650e <listen+0x56>
   CHECK_SOCKINIT();
 800651c:	f06f 0002 	mvn.w	r0, #2
 8006520:	e7f5      	b.n	800650e <listen+0x56>
	...

08006524 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8006524:	2807      	cmp	r0, #7
{
 8006526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006528:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 800652a:	d839      	bhi.n	80065a0 <disconnect+0x7c>
   CHECK_TCPMODE();
 800652c:	0144      	lsls	r4, r0, #5
 800652e:	3408      	adds	r4, #8
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fd77 	bl	8006024 <WIZCHIP_READ>
 8006536:	f000 0003 	and.w	r0, r0, #3
 800653a:	2801      	cmp	r0, #1
 800653c:	d133      	bne.n	80065a6 <disconnect+0x82>
   if(getSn_SR(sn) != SOCK_CLOSED)
 800653e:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff fd6e 	bl	8006024 <WIZCHIP_READ>
 8006548:	b908      	cbnz	r0, 800654e <disconnect+0x2a>
            close(sn);
            return SOCKERR_TIMEOUT;
         }
      }
   }
   return SOCK_OK;
 800654a:	2001      	movs	r0, #1
}
 800654c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      setSn_CR(sn,Sn_CR_DISCON);
 800654e:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8006552:	2108      	movs	r1, #8
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff fd93 	bl	8006080 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 800655a:	4638      	mov	r0, r7
 800655c:	f7ff fd62 	bl	8006024 <WIZCHIP_READ>
 8006560:	2800      	cmp	r0, #0
 8006562:	d1fa      	bne.n	800655a <disconnect+0x36>
	   sock_is_sending &= ~(1<<sn);
 8006564:	2201      	movs	r2, #1
 8006566:	4911      	ldr	r1, [pc, #68]	@ (80065ac <disconnect+0x88>)
 8006568:	40aa      	lsls	r2, r5
 800656a:	880b      	ldrh	r3, [r1, #0]
 800656c:	ea23 0302 	bic.w	r3, r3, r2
 8006570:	800b      	strh	r3, [r1, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8006572:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <disconnect+0x8c>)
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	412b      	asrs	r3, r5
 8006578:	07da      	lsls	r2, r3, #31
 800657a:	d4e7      	bmi.n	800654c <disconnect+0x28>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800657c:	f504 7400 	add.w	r4, r4, #512	@ 0x200
      while(getSn_SR(sn) != SOCK_CLOSED)
 8006580:	4630      	mov	r0, r6
 8006582:	f7ff fd4f 	bl	8006024 <WIZCHIP_READ>
 8006586:	2800      	cmp	r0, #0
 8006588:	d0df      	beq.n	800654a <disconnect+0x26>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800658a:	4620      	mov	r0, r4
 800658c:	f7ff fd4a 	bl	8006024 <WIZCHIP_READ>
 8006590:	0703      	lsls	r3, r0, #28
 8006592:	d5f5      	bpl.n	8006580 <disconnect+0x5c>
            close(sn);
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff feb5 	bl	8006304 <close>
            return SOCKERR_TIMEOUT;
 800659a:	f06f 000c 	mvn.w	r0, #12
 800659e:	e7d5      	b.n	800654c <disconnect+0x28>
   CHECK_SOCKNUM();
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e7d2      	b.n	800654c <disconnect+0x28>
   CHECK_TCPMODE();
 80065a6:	f06f 0004 	mvn.w	r0, #4
 80065aa:	e7cf      	b.n	800654c <disconnect+0x28>
 80065ac:	20000640 	.word	0x20000640
 80065b0:	20000642 	.word	0x20000642

080065b4 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80065b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 80065b8:	2807      	cmp	r0, #7
{
 80065ba:	4605      	mov	r5, r0
 80065bc:	4617      	mov	r7, r2
 80065be:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 80065c0:	f200 80a0 	bhi.w	8006704 <send+0x150>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80065c4:	0146      	lsls	r6, r0, #5
 80065c6:	3608      	adds	r6, #8
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff fd2b 	bl	8006024 <WIZCHIP_READ>
 80065ce:	f000 000f 	and.w	r0, r0, #15
 80065d2:	2801      	cmp	r0, #1
 80065d4:	f040 8099 	bne.w	800670a <send+0x156>
   CHECK_SOCKDATA();
 80065d8:	2f00      	cmp	r7, #0
 80065da:	f000 8099 	beq.w	8006710 <send+0x15c>
   tmp = getSn_SR(sn);
 80065de:	f506 7a40 	add.w	sl, r6, #768	@ 0x300
 80065e2:	4650      	mov	r0, sl
 80065e4:	f7ff fd1e 	bl	8006024 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80065e8:	2817      	cmp	r0, #23
 80065ea:	d001      	beq.n	80065f0 <send+0x3c>
 80065ec:	281c      	cmp	r0, #28
 80065ee:	d136      	bne.n	800665e <send+0xaa>
   if( sock_is_sending & (1<<sn) )
 80065f0:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006718 <send+0x164>
 80065f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80065f8:	412b      	asrs	r3, r5
 80065fa:	07da      	lsls	r2, r3, #31
 80065fc:	d512      	bpl.n	8006624 <send+0x70>
   {
      tmp = getSn_IR(sn);
 80065fe:	f506 7400 	add.w	r4, r6, #512	@ 0x200
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff fd0e 	bl	8006024 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8006608:	06c3      	lsls	r3, r0, #27
 800660a:	d52b      	bpl.n	8006664 <send+0xb0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800660c:	2110      	movs	r1, #16
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff fd36 	bl	8006080 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8006614:	2201      	movs	r2, #1
 8006616:	f8b8 3000 	ldrh.w	r3, [r8]
 800661a:	40aa      	lsls	r2, r5
 800661c:	ea23 0302 	bic.w	r3, r3, r2
 8006620:	f8a8 3000 	strh.w	r3, [r8]
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8006624:	f506 50f8 	add.w	r0, r6, #7936	@ 0x1f00
 8006628:	f7ff fcfc 	bl	8006024 <WIZCHIP_READ>
 800662c:	0280      	lsls	r0, r0, #10
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800662e:	b280      	uxth	r0, r0
 8006630:	42b8      	cmp	r0, r7
 8006632:	bf28      	it	cs
 8006634:	4638      	movcs	r0, r7
 8006636:	2701      	movs	r7, #1
 8006638:	4604      	mov	r4, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 800663a:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 800671c <send+0x168>
 800663e:	40af      	lsls	r7, r5
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8006640:	4628      	mov	r0, r5
 8006642:	f7ff fdc3 	bl	80061cc <getSn_TX_FSR>
 8006646:	4681      	mov	r9, r0
      tmp = getSn_SR(sn);
 8006648:	4650      	mov	r0, sl
 800664a:	f7ff fceb 	bl	8006024 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800664e:	2817      	cmp	r0, #23
 8006650:	d014      	beq.n	800667c <send+0xc8>
 8006652:	281c      	cmp	r0, #28
 8006654:	d012      	beq.n	800667c <send+0xc8>
         if(tmp == SOCK_CLOSED) close(sn);
 8006656:	b910      	cbnz	r0, 800665e <send+0xaa>
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff fe53 	bl	8006304 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800665e:	f06f 0006 	mvn.w	r0, #6
 8006662:	e002      	b.n	800666a <send+0xb6>
      else if(tmp & Sn_IR_TIMEOUT)
 8006664:	0700      	lsls	r0, r0, #28
 8006666:	d403      	bmi.n	8006670 <send+0xbc>
      else return SOCK_BUSY;
 8006668:	2000      	movs	r0, #0
 
   while(getSn_CR(sn));   // wait to process the command...
   sock_is_sending |= (1<<sn);
 
   return len;
}
 800666a:	b003      	add	sp, #12
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 8006670:	4628      	mov	r0, r5
 8006672:	f7ff fe47 	bl	8006304 <close>
         return SOCKERR_TIMEOUT;
 8006676:	f06f 000c 	mvn.w	r0, #12
 800667a:	e7f6      	b.n	800666a <send+0xb6>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 800667c:	f8bb 2000 	ldrh.w	r2, [fp]
 8006680:	423a      	tst	r2, r7
 8006682:	d028      	beq.n	80066d6 <send+0x122>
 8006684:	45a1      	cmp	r9, r4
 8006686:	d3ef      	bcc.n	8006668 <send+0xb4>
   wiz_send_data(sn, buf, len);
 8006688:	9901      	ldr	r1, [sp, #4]
 800668a:	4622      	mov	r2, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f7ff fddf 	bl	8006250 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8006692:	f8b8 3000 	ldrh.w	r3, [r8]
 8006696:	412b      	asrs	r3, r5
 8006698:	07d9      	lsls	r1, r3, #31
 800669a:	d50a      	bpl.n	80066b2 <send+0xfe>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 800669c:	f506 7900 	add.w	r9, r6, #512	@ 0x200
 80066a0:	4648      	mov	r0, r9
 80066a2:	f7ff fcbf 	bl	8006024 <WIZCHIP_READ>
 80066a6:	06c3      	lsls	r3, r0, #27
 80066a8:	d518      	bpl.n	80066dc <send+0x128>
      setSn_IR(sn, Sn_IR_SENDOK);
 80066aa:	2110      	movs	r1, #16
 80066ac:	4648      	mov	r0, r9
 80066ae:	f7ff fce7 	bl	8006080 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 80066b2:	f506 7680 	add.w	r6, r6, #256	@ 0x100
 80066b6:	2120      	movs	r1, #32
 80066b8:	4630      	mov	r0, r6
 80066ba:	f7ff fce1 	bl	8006080 <WIZCHIP_WRITE>
   while(getSn_CR(sn));   // wait to process the command...
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff fcb0 	bl	8006024 <WIZCHIP_READ>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1fa      	bne.n	80066be <send+0x10a>
   sock_is_sending |= (1<<sn);
 80066c8:	f8b8 3000 	ldrh.w	r3, [r8]
   return len;
 80066cc:	4620      	mov	r0, r4
   sock_is_sending |= (1<<sn);
 80066ce:	431f      	orrs	r7, r3
 80066d0:	f8a8 7000 	strh.w	r7, [r8]
   return len;
 80066d4:	e7c9      	b.n	800666a <send+0xb6>
      if(len <= freesize) break;
 80066d6:	45a1      	cmp	r9, r4
 80066d8:	d3b2      	bcc.n	8006640 <send+0x8c>
 80066da:	e7d5      	b.n	8006688 <send+0xd4>
         tmp = getSn_SR(sn);
 80066dc:	4650      	mov	r0, sl
 80066de:	f7ff fca1 	bl	8006024 <WIZCHIP_READ>
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 80066e2:	2817      	cmp	r0, #23
 80066e4:	d009      	beq.n	80066fa <send+0x146>
 80066e6:	281c      	cmp	r0, #28
 80066e8:	d007      	beq.n	80066fa <send+0x146>
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d0b4      	beq.n	8006658 <send+0xa4>
 80066ee:	4648      	mov	r0, r9
 80066f0:	f7ff fc98 	bl	8006024 <WIZCHIP_READ>
 80066f4:	0702      	lsls	r2, r0, #28
 80066f6:	d4af      	bmi.n	8006658 <send+0xa4>
 80066f8:	e7b1      	b.n	800665e <send+0xaa>
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80066fa:	f8bb 3000 	ldrh.w	r3, [fp]
 80066fe:	423b      	tst	r3, r7
 8006700:	d0ce      	beq.n	80066a0 <send+0xec>
 8006702:	e7b1      	b.n	8006668 <send+0xb4>
   CHECK_SOCKNUM();
 8006704:	f04f 30ff 	mov.w	r0, #4294967295
 8006708:	e7af      	b.n	800666a <send+0xb6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800670a:	f06f 0004 	mvn.w	r0, #4
 800670e:	e7ac      	b.n	800666a <send+0xb6>
   CHECK_SOCKDATA();
 8006710:	f06f 000d 	mvn.w	r0, #13
 8006714:	e7a9      	b.n	800666a <send+0xb6>
 8006716:	bf00      	nop
 8006718:	20000640 	.word	0x20000640
 800671c:	20000642 	.word	0x20000642

08006720 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8006724:	2807      	cmp	r0, #7
{
 8006726:	b085      	sub	sp, #20
 8006728:	4606      	mov	r6, r0
 800672a:	4690      	mov	r8, r2
 800672c:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800672e:	d859      	bhi.n	80067e4 <recv+0xc4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8006730:	0145      	lsls	r5, r0, #5
 8006732:	3508      	adds	r5, #8
 8006734:	4628      	mov	r0, r5
 8006736:	f7ff fc75 	bl	8006024 <WIZCHIP_READ>
 800673a:	f000 070f 	and.w	r7, r0, #15
 800673e:	2f01      	cmp	r7, #1
 8006740:	d153      	bne.n	80067ea <recv+0xca>
   CHECK_SOCKDATA();
 8006742:	f1b8 0f00 	cmp.w	r8, #0
 8006746:	d053      	beq.n	80067f0 <recv+0xd0>
   
   recvsize = getSn_RxMAX(sn); 
 8006748:	f505 50f0 	add.w	r0, r5, #7680	@ 0x1e00
 800674c:	f7ff fc6a 	bl	8006024 <WIZCHIP_READ>
 8006750:	4681      	mov	r9, r0
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
      tmp = getSn_SR(sn);
 8006752:	f505 7340 	add.w	r3, r5, #768	@ 0x300
 8006756:	9302      	str	r3, [sp, #8]
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8006758:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 80067fc <recv+0xdc>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800675c:	f505 53f8 	add.w	r3, r5, #7936	@ 0x1f00
 8006760:	40b7      	lsls	r7, r6
 8006762:	9303      	str	r3, [sp, #12]
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff fd52 	bl	800620e <getSn_RX_RSR>
 800676a:	4604      	mov	r4, r0
      tmp = getSn_SR(sn);
 800676c:	9802      	ldr	r0, [sp, #8]
 800676e:	f7ff fc59 	bl	8006024 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED)
 8006772:	2817      	cmp	r0, #23
 8006774:	d014      	beq.n	80067a0 <recv+0x80>
         if(tmp == SOCK_CLOSE_WAIT)
 8006776:	281c      	cmp	r0, #28
 8006778:	d10a      	bne.n	8006790 <recv+0x70>
            if(recvsize != 0) break;
 800677a:	b9bc      	cbnz	r4, 80067ac <recv+0x8c>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff fd25 	bl	80061cc <getSn_TX_FSR>
 8006782:	4682      	mov	sl, r0
 8006784:	9803      	ldr	r0, [sp, #12]
 8006786:	f7ff fc4d 	bl	8006024 <WIZCHIP_READ>
 800678a:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 800678e:	d107      	bne.n	80067a0 <recv+0x80>
               close(sn);
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff fdb7 	bl	8006304 <close>
               return SOCKERR_SOCKSTATUS;
 8006796:	f06f 0006 	mvn.w	r0, #6
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 800679a:	b005      	add	sp, #20
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80067a0:	f8bb 2000 	ldrh.w	r2, [fp]
 80067a4:	423a      	tst	r2, r7
 80067a6:	d126      	bne.n	80067f6 <recv+0xd6>
      if(recvsize != 0) break;
 80067a8:	2c00      	cmp	r4, #0
 80067aa:	d0db      	beq.n	8006764 <recv+0x44>
   recvsize = getSn_RxMAX(sn); 
 80067ac:	ea4f 2089 	mov.w	r0, r9, lsl #10
   if(recvsize < len) len = recvsize;
 80067b0:	b280      	uxth	r0, r0
   if(recvsize < len) len = recvsize;
 80067b2:	4540      	cmp	r0, r8
 80067b4:	bf28      	it	cs
 80067b6:	4640      	movcs	r0, r8
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	bf28      	it	cs
 80067bc:	4620      	movcs	r0, r4
 80067be:	b284      	uxth	r4, r0
   wiz_recv_data(sn, buf, len); 
 80067c0:	9901      	ldr	r1, [sp, #4]
 80067c2:	4630      	mov	r0, r6
 80067c4:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_RECV); 
 80067c6:	f505 7580 	add.w	r5, r5, #256	@ 0x100
   wiz_recv_data(sn, buf, len); 
 80067ca:	f7ff fd6e 	bl	80062aa <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 80067ce:	2140      	movs	r1, #64	@ 0x40
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff fc55 	bl	8006080 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 80067d6:	4628      	mov	r0, r5
 80067d8:	f7ff fc24 	bl	8006024 <WIZCHIP_READ>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d1fa      	bne.n	80067d6 <recv+0xb6>
   return (int32_t)len;
 80067e0:	4620      	mov	r0, r4
 80067e2:	e7da      	b.n	800679a <recv+0x7a>
   CHECK_SOCKNUM();
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	e7d7      	b.n	800679a <recv+0x7a>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80067ea:	f06f 0004 	mvn.w	r0, #4
 80067ee:	e7d4      	b.n	800679a <recv+0x7a>
   CHECK_SOCKDATA();
 80067f0:	f06f 000d 	mvn.w	r0, #13
 80067f4:	e7d1      	b.n	800679a <recv+0x7a>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7cf      	b.n	800679a <recv+0x7a>
 80067fa:	bf00      	nop
 80067fc:	20000642 	.word	0x20000642

08006800 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8006800:	4770      	bx	lr

08006802 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006802:	7800      	ldrb	r0, [r0, #0]
 8006804:	4770      	bx	lr

08006806 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006806:	7001      	strb	r1, [r0, #0]
 8006808:	4770      	bx	lr

0800680a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800680a:	2000      	movs	r0, #0
 800680c:	4770      	bx	lr

0800680e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800680e:	4770      	bx	lr

08006810 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8006814:	4e04      	ldr	r6, [pc, #16]	@ (8006828 <wizchip_spi_readburst+0x18>)
 8006816:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8006818:	42ac      	cmp	r4, r5
 800681a:	d100      	bne.n	800681e <wizchip_spi_readburst+0xe>
	}
}
 800681c:	bd70      	pop	{r4, r5, r6, pc}
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 800681e:	69f3      	ldr	r3, [r6, #28]
 8006820:	4798      	blx	r3
 8006822:	f804 0b01 	strb.w	r0, [r4], #1
	for(uint16_t i=0; i<len; i++)
 8006826:	e7f7      	b.n	8006818 <wizchip_spi_readburst+0x8>
 8006828:	20000028 	.word	0x20000028

0800682c <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8006830:	4e04      	ldr	r6, [pc, #16]	@ (8006844 <wizchip_spi_writeburst+0x18>)
 8006832:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8006834:	42ac      	cmp	r4, r5
 8006836:	d100      	bne.n	800683a <wizchip_spi_writeburst+0xe>
	}
}
 8006838:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 800683a:	6a33      	ldr	r3, [r6, #32]
 800683c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006840:	4798      	blx	r3
	for(uint16_t i=0; i<len; i++)
 8006842:	e7f7      	b.n	8006834 <wizchip_spi_writeburst+0x8>
 8006844:	20000028 	.word	0x20000028

08006848 <wizchip_cris_exit>:
void 	  wizchip_cris_exit(void)          {}
 8006848:	4770      	bx	lr

0800684a <wizchip_cs_select>:
void 	wizchip_cs_select(void)            {}
 800684a:	4770      	bx	lr

0800684c <wizchip_cs_deselect>:
void 	wizchip_cs_deselect(void)          {}
 800684c:	4770      	bx	lr
	...

08006850 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8006850:	b100      	cbz	r0, 8006854 <reg_wizchip_cs_cbfunc+0x4>
 8006852:	b909      	cbnz	r1, 8006858 <reg_wizchip_cs_cbfunc+0x8>
 8006854:	4802      	ldr	r0, [pc, #8]	@ (8006860 <reg_wizchip_cs_cbfunc+0x10>)
 8006856:	4903      	ldr	r1, [pc, #12]	@ (8006864 <reg_wizchip_cs_cbfunc+0x14>)
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8006858:	4b03      	ldr	r3, [pc, #12]	@ (8006868 <reg_wizchip_cs_cbfunc+0x18>)
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800685a:	e9c3 0105 	strd	r0, r1, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 800685e:	4770      	bx	lr
 8006860:	0800684b 	.word	0x0800684b
 8006864:	0800684d 	.word	0x0800684d
 8006868:	20000028 	.word	0x20000028

0800686c <reg_wizchip_spi_cbfunc>:
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800686c:	4b05      	ldr	r3, [pc, #20]	@ (8006884 <reg_wizchip_spi_cbfunc+0x18>)
 800686e:	881a      	ldrh	r2, [r3, #0]
 8006870:	0592      	lsls	r2, r2, #22
 8006872:	d400      	bmi.n	8006876 <reg_wizchip_spi_cbfunc+0xa>
 8006874:	e7fe      	b.n	8006874 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8006876:	b100      	cbz	r0, 800687a <reg_wizchip_spi_cbfunc+0xe>
 8006878:	b909      	cbnz	r1, 800687e <reg_wizchip_spi_cbfunc+0x12>
 800687a:	4803      	ldr	r0, [pc, #12]	@ (8006888 <reg_wizchip_spi_cbfunc+0x1c>)
 800687c:	4903      	ldr	r1, [pc, #12]	@ (800688c <reg_wizchip_spi_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800687e:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 8006882:	4770      	bx	lr
 8006884:	20000028 	.word	0x20000028
 8006888:	0800680b 	.word	0x0800680b
 800688c:	0800680f 	.word	0x0800680f

08006890 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <reg_wizchip_spiburst_cbfunc+0x18>)
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	0592      	lsls	r2, r2, #22
 8006896:	d400      	bmi.n	800689a <reg_wizchip_spiburst_cbfunc+0xa>
 8006898:	e7fe      	b.n	8006898 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 800689a:	b100      	cbz	r0, 800689e <reg_wizchip_spiburst_cbfunc+0xe>
 800689c:	b909      	cbnz	r1, 80068a2 <reg_wizchip_spiburst_cbfunc+0x12>
 800689e:	4803      	ldr	r0, [pc, #12]	@ (80068ac <reg_wizchip_spiburst_cbfunc+0x1c>)
 80068a0:	4903      	ldr	r1, [pc, #12]	@ (80068b0 <reg_wizchip_spiburst_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80068a2:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 80068a6:	4770      	bx	lr
 80068a8:	20000028 	.word	0x20000028
 80068ac:	08006811 	.word	0x08006811
 80068b0:	0800682d 	.word	0x0800682d

080068b4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80068b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80068b6:	2206      	movs	r2, #6
 80068b8:	a904      	add	r1, sp, #16
 80068ba:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80068be:	f7ff fc11 	bl	80060e4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80068c2:	2204      	movs	r2, #4
 80068c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80068c8:	eb0d 0102 	add.w	r1, sp, r2
 80068cc:	f7ff fc0a 	bl	80060e4 <WIZCHIP_READ_BUF>
 80068d0:	a902      	add	r1, sp, #8
 80068d2:	2204      	movs	r2, #4
 80068d4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80068d8:	f7ff fc04 	bl	80060e4 <WIZCHIP_READ_BUF>
 80068dc:	2204      	movs	r2, #4
 80068de:	a903      	add	r1, sp, #12
 80068e0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80068e4:	f7ff fbfe 	bl	80060e4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80068e8:	2180      	movs	r1, #128	@ 0x80
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7ff fbc8 	bl	8006080 <WIZCHIP_WRITE>
   getMR(); // for delay
 80068f0:	2000      	movs	r0, #0
 80068f2:	f7ff fb97 	bl	8006024 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	2206      	movs	r2, #6
 80068fa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80068fe:	f7ff fc2b 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8006902:	2204      	movs	r2, #4
 8006904:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006908:	eb0d 0102 	add.w	r1, sp, r2
 800690c:	f7ff fc24 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8006910:	a902      	add	r1, sp, #8
 8006912:	2204      	movs	r2, #4
 8006914:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006918:	f7ff fc1e 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800691c:	2204      	movs	r2, #4
 800691e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006922:	a903      	add	r1, sp, #12
 8006924:	f7ff fc18 	bl	8006158 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8006928:	b007      	add	sp, #28
 800692a:	f85d fb04 	ldr.w	pc, [sp], #4

0800692e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800692e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006930:	4605      	mov	r5, r0
 8006932:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8006934:	f7ff ffbe 	bl	80068b4 <wizchip_sw_reset>
   if(txsize)
 8006938:	b1d5      	cbz	r5, 8006970 <wizchip_init+0x42>
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 800693a:	f995 3000 	ldrsb.w	r3, [r5]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 800693e:	2b10      	cmp	r3, #16
 8006940:	dc35      	bgt.n	80069ae <wizchip_init+0x80>
 8006942:	462a      	mov	r2, r5
 8006944:	1de9      	adds	r1, r5, #7
			tmp += txsize[i];
 8006946:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800694a:	4403      	add	r3, r0
 800694c:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 800694e:	2b10      	cmp	r3, #16
 8006950:	dc2d      	bgt.n	80069ae <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006952:	428a      	cmp	r2, r1
 8006954:	d1f7      	bne.n	8006946 <wizchip_init+0x18>
 8006956:	f641 7608 	movw	r6, #7944	@ 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800695a:	f242 0708 	movw	r7, #8200	@ 0x2008
 800695e:	3d01      	subs	r5, #1
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006960:	4630      	mov	r0, r6
 8006962:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006966:	3620      	adds	r6, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006968:	f7ff fb8a 	bl	8006080 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800696c:	42be      	cmp	r6, r7
 800696e:	d1f7      	bne.n	8006960 <wizchip_init+0x32>
#endif
		}	
   }

   if(rxsize)
 8006970:	b90c      	cbnz	r4, 8006976 <wizchip_init+0x48>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8006972:	2000      	movs	r0, #0
}
 8006974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tmp += rxsize[i];
 8006976:	f994 3000 	ldrsb.w	r3, [r4]
			if(tmp > 16) return -1;
 800697a:	2b10      	cmp	r3, #16
 800697c:	dc17      	bgt.n	80069ae <wizchip_init+0x80>
 800697e:	4622      	mov	r2, r4
 8006980:	1de1      	adds	r1, r4, #7
			tmp += rxsize[i];
 8006982:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006986:	4403      	add	r3, r0
 8006988:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 800698a:	2b10      	cmp	r3, #16
 800698c:	dc0f      	bgt.n	80069ae <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f7      	bne.n	8006982 <wizchip_init+0x54>
 8006992:	f641 6508 	movw	r5, #7688	@ 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006996:	f641 7608 	movw	r6, #7944	@ 0x1f08
 800699a:	3c01      	subs	r4, #1
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800699c:	4628      	mov	r0, r5
 800699e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80069a2:	3520      	adds	r5, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80069a4:	f7ff fb6c 	bl	8006080 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80069a8:	42b5      	cmp	r5, r6
 80069aa:	d1f7      	bne.n	800699c <wizchip_init+0x6e>
 80069ac:	e7e1      	b.n	8006972 <wizchip_init+0x44>
			if(tmp > 16) return -1;
 80069ae:	f04f 30ff 	mov.w	r0, #4294967295
 80069b2:	e7df      	b.n	8006974 <wizchip_init+0x46>

080069b4 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 80069b8:	4601      	mov	r1, r0
 80069ba:	2206      	movs	r2, #6
 80069bc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80069c0:	f7ff fbca 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80069c4:	2204      	movs	r2, #4
 80069c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80069ca:	f104 010e 	add.w	r1, r4, #14
 80069ce:	f7ff fbc3 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80069d2:	2204      	movs	r2, #4
 80069d4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80069d8:	f104 010a 	add.w	r1, r4, #10
 80069dc:	f7ff fbbc 	bl	8006158 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80069e0:	2204      	movs	r2, #4
 80069e2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80069e6:	1da1      	adds	r1, r4, #6
 80069e8:	f7ff fbb6 	bl	8006158 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <wizchip_setnetinfo+0x54>)
 80069ee:	7ca2      	ldrb	r2, [r4, #18]
 80069f0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80069f2:	7ce2      	ldrb	r2, [r4, #19]
 80069f4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80069f6:	7d22      	ldrb	r2, [r4, #20]
 80069f8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80069fa:	7d62      	ldrb	r2, [r4, #21]
 80069fc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80069fe:	7da2      	ldrb	r2, [r4, #22]
 8006a00:	4b02      	ldr	r3, [pc, #8]	@ (8006a0c <wizchip_setnetinfo+0x58>)
 8006a02:	701a      	strb	r2, [r3, #0]
}
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	bf00      	nop
 8006a08:	20000645 	.word	0x20000645
 8006a0c:	20000644 	.word	0x20000644

08006a10 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8006a14:	4601      	mov	r1, r0
 8006a16:	2206      	movs	r2, #6
 8006a18:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006a1c:	f7ff fb62 	bl	80060e4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8006a20:	2204      	movs	r2, #4
 8006a22:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006a26:	f104 010e 	add.w	r1, r4, #14
 8006a2a:	f7ff fb5b 	bl	80060e4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006a2e:	2204      	movs	r2, #4
 8006a30:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006a34:	f104 010a 	add.w	r1, r4, #10
 8006a38:	f7ff fb54 	bl	80060e4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006a42:	1da1      	adds	r1, r4, #6
 8006a44:	f7ff fb4e 	bl	80060e4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006a48:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <wizchip_getnetinfo+0x54>)
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006a4e:	785a      	ldrb	r2, [r3, #1]
 8006a50:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006a52:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8006a54:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 8006a56:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006a58:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <wizchip_getnetinfo+0x58>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	75a3      	strb	r3, [r4, #22]
}
 8006a60:	bd10      	pop	{r4, pc}
 8006a62:	bf00      	nop
 8006a64:	20000645 	.word	0x20000645
 8006a68:	20000644 	.word	0x20000644

08006a6c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006a6c:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006a6e:	f030 053a 	bics.w	r5, r0, #58	@ 0x3a
{
 8006a72:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006a74:	d10a      	bne.n	8006a8c <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7ff fad4 	bl	8006024 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8006a7c:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 8006a80:	b2c9      	uxtb	r1, r1
 8006a82:	4628      	mov	r0, r5
 8006a84:	f7ff fafc 	bl	8006080 <WIZCHIP_WRITE>
   return 0;
 8006a88:	4628      	mov	r0, r5
}
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	e7fb      	b.n	8006a8a <wizchip_setnetmode+0x1e>

08006a92 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 8006a92:	2000      	movs	r0, #0
 8006a94:	f7ff bac6 	b.w	8006024 <WIZCHIP_READ>

08006a98 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8006a9c:	7801      	ldrb	r1, [r0, #0]
 8006a9e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8006aa2:	f7ff faed 	bl	8006080 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006aa6:	8861      	ldrh	r1, [r4, #2]
 8006aa8:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8006aac:	0a09      	lsrs	r1, r1, #8
 8006aae:	f7ff fae7 	bl	8006080 <WIZCHIP_WRITE>
 8006ab2:	78a1      	ldrb	r1, [r4, #2]
 8006ab4:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
}
 8006ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 8006abc:	f7ff bae0 	b.w	8006080 <WIZCHIP_WRITE>

08006ac0 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 8006ac4:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8006ac8:	f7ff faac 	bl	8006024 <WIZCHIP_READ>
 8006acc:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 8006ace:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8006ad2:	f7ff faa7 	bl	8006024 <WIZCHIP_READ>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006adc:	f7ff faa2 	bl	8006024 <WIZCHIP_READ>
 8006ae0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8006ae4:	8060      	strh	r0, [r4, #2]
}
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}

08006ae8 <ctlnetwork>:
{
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
   switch(cntype)
 8006aec:	2805      	cmp	r0, #5
 8006aee:	d81e      	bhi.n	8006b2e <ctlnetwork+0x46>
 8006af0:	e8df f000 	tbb	[pc, r0]
 8006af4:	110c0803 	.word	0x110c0803
 8006af8:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8006afa:	4608      	mov	r0, r1
 8006afc:	f7ff ff5a 	bl	80069b4 <wizchip_setnetinfo>
   return 0;
 8006b00:	2000      	movs	r0, #0
}
 8006b02:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006b04:	4608      	mov	r0, r1
 8006b06:	f7ff ff83 	bl	8006a10 <wizchip_getnetinfo>
         break;
 8006b0a:	e7f9      	b.n	8006b00 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006b0c:	7808      	ldrb	r0, [r1, #0]
}
 8006b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006b12:	f7ff bfab 	b.w	8006a6c <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 8006b16:	f7ff ffbc 	bl	8006a92 <wizchip_getnetmode>
 8006b1a:	7020      	strb	r0, [r4, #0]
         break;
 8006b1c:	e7f0      	b.n	8006b00 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8006b1e:	4608      	mov	r0, r1
 8006b20:	f7ff ffba 	bl	8006a98 <wizchip_settimeout>
         break;
 8006b24:	e7ec      	b.n	8006b00 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006b26:	4608      	mov	r0, r1
 8006b28:	f7ff ffca 	bl	8006ac0 <wizchip_gettimeout>
         break;
 8006b2c:	e7e8      	b.n	8006b00 <ctlnetwork+0x18>
   switch(cntype)
 8006b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b32:	e7e6      	b.n	8006b02 <ctlnetwork+0x1a>

08006b34 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b34:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8006b38:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b3a:	b16b      	cbz	r3, 8006b58 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b40:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8006b44:	28ff      	cmp	r0, #255	@ 0xff
 8006b46:	d007      	beq.n	8006b58 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8006b50:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006b52:	23ff      	movs	r3, #255	@ 0xff
 8006b54:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8006b58:	2000      	movs	r0, #0
 8006b5a:	bd10      	pop	{r4, pc}

08006b5c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b5c:	2343      	movs	r3, #67	@ 0x43
 8006b5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006b60:	4800      	ldr	r0, [pc, #0]	@ (8006b64 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006b62:	4770      	bx	lr
 8006b64:	20000098 	.word	0x20000098

08006b68 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b68:	2343      	movs	r3, #67	@ 0x43
 8006b6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006b6c:	4800      	ldr	r0, [pc, #0]	@ (8006b70 <USBD_CDC_GetHSCfgDesc+0x8>)
 8006b6e:	4770      	bx	lr
 8006b70:	200000dc 	.word	0x200000dc

08006b74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b74:	2343      	movs	r3, #67	@ 0x43
 8006b76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006b78:	4800      	ldr	r0, [pc, #0]	@ (8006b7c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006b7a:	4770      	bx	lr
 8006b7c:	20000054 	.word	0x20000054

08006b80 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b80:	230a      	movs	r3, #10
 8006b82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006b84:	4800      	ldr	r0, [pc, #0]	@ (8006b88 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006b86:	4770      	bx	lr
 8006b88:	20000158 	.word	0x20000158

08006b8c <USBD_CDC_DataOut>:
{
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b90:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b94:	f000 ff84 	bl	8007aa0 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8006b98:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b9c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8006ba0:	b14b      	cbz	r3, 8006bb6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006ba6:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8006bb0:	4798      	blx	r3
    return USBD_OK;
 8006bb2:	2000      	movs	r0, #0
}
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006bb6:	2002      	movs	r0, #2
 8006bb8:	e7fc      	b.n	8006bb4 <USBD_CDC_DataOut+0x28>

08006bba <USBD_CDC_DataIn>:
{
 8006bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bbc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8006bc0:	b1ce      	cbz	r6, 8006bf6 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bc2:	2214      	movs	r2, #20
 8006bc4:	fb02 0201 	mla	r2, r2, r1, r0
 8006bc8:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bca:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bce:	b173      	cbz	r3, 8006bee <USBD_CDC_DataIn+0x34>
 8006bd0:	2728      	movs	r7, #40	@ 0x28
 8006bd2:	fb07 5401 	mla	r4, r7, r1, r5
 8006bd6:	6a24      	ldr	r4, [r4, #32]
 8006bd8:	fbb3 f5f4 	udiv	r5, r3, r4
 8006bdc:	fb04 3315 	mls	r3, r4, r5, r3
 8006be0:	b92b      	cbnz	r3, 8006bee <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8006be2:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006be4:	461a      	mov	r2, r3
 8006be6:	f000 ff49 	bl	8007a7c <USBD_LL_Transmit>
    return USBD_OK;
 8006bea:	2000      	movs	r0, #0
}
 8006bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8006bf4:	e7f9      	b.n	8006bea <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8006bf6:	2002      	movs	r0, #2
 8006bf8:	e7f8      	b.n	8006bec <USBD_CDC_DataIn+0x32>

08006bfa <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8006bfa:	2300      	movs	r3, #0
{
 8006bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfe:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8006c00:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8006c04:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c08:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c10:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c14:	d022      	beq.n	8006c5c <USBD_CDC_Setup+0x62>
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d13a      	bne.n	8006c90 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8006c1a:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c1c:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8006c1e:	b1ba      	cbz	r2, 8006c50 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8006c20:	0639      	lsls	r1, r7, #24
 8006c22:	d50b      	bpl.n	8006c3c <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c24:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8006c28:	4618      	mov	r0, r3
 8006c2a:	688f      	ldr	r7, [r1, #8]
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c30:	4631      	mov	r1, r6
 8006c32:	4620      	mov	r0, r4
 8006c34:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c36:	f000 fc4d 	bl	80074d4 <USBD_CtlSendData>
 8006c3a:	e006      	b.n	8006c4a <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c3c:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8006c3e:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c42:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c46:	f000 fc5a 	bl	80074fe <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8006c4a:	2000      	movs	r0, #0
}
 8006c4c:	b003      	add	sp, #12
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c50:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8006c54:	6884      	ldr	r4, [r0, #8]
 8006c56:	4618      	mov	r0, r3
 8006c58:	47a0      	blx	r4
 8006c5a:	e7f6      	b.n	8006c4a <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8006c5c:	784b      	ldrb	r3, [r1, #1]
 8006c5e:	2b0a      	cmp	r3, #10
 8006c60:	d00a      	beq.n	8006c78 <USBD_CDC_Setup+0x7e>
 8006c62:	2b0b      	cmp	r3, #11
 8006c64:	d010      	beq.n	8006c88 <USBD_CDC_Setup+0x8e>
 8006c66:	b99b      	cbnz	r3, 8006c90 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c68:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d10f      	bne.n	8006c90 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c70:	2202      	movs	r2, #2
 8006c72:	f10d 0106 	add.w	r1, sp, #6
 8006c76:	e7de      	b.n	8006c36 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c78:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d107      	bne.n	8006c90 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c80:	2201      	movs	r2, #1
 8006c82:	f10d 0105 	add.w	r1, sp, #5
 8006c86:	e7d6      	b.n	8006c36 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c88:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d0dc      	beq.n	8006c4a <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8006c90:	4620      	mov	r0, r4
 8006c92:	4629      	mov	r1, r5
 8006c94:	f000 fbf7 	bl	8007486 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c98:	2002      	movs	r0, #2
 8006c9a:	e7d7      	b.n	8006c4c <USBD_CDC_Setup+0x52>

08006c9c <USBD_CDC_DeInit>:
{
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ca0:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ca2:	2181      	movs	r1, #129	@ 0x81
 8006ca4:	f000 feb5 	bl	8007a12 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cac:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cae:	f000 feb0 	bl	8007a12 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cb2:	2182      	movs	r1, #130	@ 0x82
 8006cb4:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cb6:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cba:	f000 feaa 	bl	8007a12 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006cbe:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cc2:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8006cc4:	b14b      	cbz	r3, 8006cda <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006cc6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cce:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8006cd2:	f000 feed 	bl	8007ab0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cd6:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8006cda:	2000      	movs	r0, #0
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}

08006cde <USBD_CDC_Init>:
{
 8006cde:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce0:	7c03      	ldrb	r3, [r0, #16]
{
 8006ce2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce4:	bba3      	cbnz	r3, 8006d50 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cea:	2181      	movs	r1, #129	@ 0x81
 8006cec:	2202      	movs	r2, #2
 8006cee:	f000 fe84 	bl	80079fa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cf2:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cf8:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cfa:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 fe7b 	bl	80079fa <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d04:	2308      	movs	r3, #8
 8006d06:	2203      	movs	r2, #3
 8006d08:	2182      	movs	r1, #130	@ 0x82
 8006d0a:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d0c:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d10:	f000 fe73 	bl	80079fa <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d18:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d1a:	f000 fec5 	bl	8007aa8 <USBD_static_malloc>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8006d24:	b1f8      	cbz	r0, 8006d66 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d26:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4798      	blx	r3
    hcdc->TxState = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006d34:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d38:	7c23      	ldrb	r3, [r4, #16]
 8006d3a:	b993      	cbnz	r3, 8006d62 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d40:	4629      	mov	r1, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8006d48:	f000 fea1 	bl	8007a8e <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006d4c:	2000      	movs	r0, #0
}
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d50:	2340      	movs	r3, #64	@ 0x40
 8006d52:	2181      	movs	r1, #129	@ 0x81
 8006d54:	2202      	movs	r2, #2
 8006d56:	f000 fe50 	bl	80079fa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d5a:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d5c:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d5e:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d60:	e7cb      	b.n	8006cfa <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d62:	2340      	movs	r3, #64	@ 0x40
 8006d64:	e7ec      	b.n	8006d40 <USBD_CDC_Init+0x62>
    ret = 1U;
 8006d66:	4628      	mov	r0, r5
 8006d68:	e7f1      	b.n	8006d4e <USBD_CDC_Init+0x70>

08006d6a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006d6a:	b119      	cbz	r1, 8006d74 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8006d6c:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8006d70:	2000      	movs	r0, #0
 8006d72:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006d74:	2002      	movs	r0, #2
  }

  return ret;
}
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d78:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8006d7c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8006d7e:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8006d86:	4770      	bx	lr

08006d88 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8006d88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8006d8c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8006d8e:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8006d92:	4770      	bx	lr

08006d94 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d94:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8006d98:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8006d9a:	b182      	cbz	r2, 8006dbe <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8006d9c:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8006da0:	2301      	movs	r3, #1
 8006da2:	b974      	cbnz	r4, 8006dc2 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006da4:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006da8:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dac:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006dae:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006db0:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f000 fe61 	bl	8007a7c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8006dba:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006dbc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006dbe:	2002      	movs	r0, #2
 8006dc0:	e7fc      	b.n	8006dbc <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	e7fa      	b.n	8006dbc <USBD_CDC_TransmitPacket+0x28>

08006dc6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8006dca:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006dcc:	b162      	cbz	r2, 8006de8 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dce:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dd0:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd4:	b933      	cbnz	r3, 8006de4 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8006dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dda:	2101      	movs	r1, #1
 8006ddc:	f000 fe57 	bl	8007a8e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006de0:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006de2:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8006de4:	2340      	movs	r3, #64	@ 0x40
 8006de6:	e7f8      	b.n	8006dda <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8006de8:	2002      	movs	r0, #2
 8006dea:	e7fa      	b.n	8006de2 <USBD_CDC_ReceivePacket+0x1c>

08006dec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dec:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dee:	b180      	cbz	r0, 8006e12 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006df0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006df4:	b113      	cbz	r3, 8006dfc <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dfc:	b109      	cbz	r1, 8006e02 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8006dfe:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e02:	2301      	movs	r3, #1
  pdev->id = id;
 8006e04:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e06:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e0a:	f000 fdad 	bl	8007968 <USBD_LL_Init>

  return USBD_OK;
 8006e0e:	2000      	movs	r0, #0
}
 8006e10:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006e12:	2002      	movs	r0, #2
 8006e14:	e7fc      	b.n	8006e10 <USBD_Init+0x24>

08006e16 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006e16:	b119      	cbz	r1, 8006e20 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e18:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e20:	2002      	movs	r0, #2
  }

  return status;
}
 8006e22:	4770      	bx	lr

08006e24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e24:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e26:	f000 fddf 	bl	80079e8 <USBD_LL_Start>

  return USBD_OK;
}
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	bd08      	pop	{r3, pc}

08006e2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e2e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006e30:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e34:	b133      	cbz	r3, 8006e44 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4798      	blx	r3
 8006e3a:	3800      	subs	r0, #0
 8006e3c:	bf18      	it	ne
 8006e3e:	2001      	movne	r0, #1
 8006e40:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006e42:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e44:	2002      	movs	r0, #2
 8006e46:	e7fc      	b.n	8006e42 <USBD_SetClassConfig+0x14>

08006e48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e48:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4798      	blx	r3

  return USBD_OK;
}
 8006e52:	2000      	movs	r0, #0
 8006e54:	bd08      	pop	{r3, pc}

08006e56 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e56:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e58:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8006e5c:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f000 fb06 	bl	8007470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e64:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006e66:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8006e6a:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8006e6e:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8006e72:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8006e76:	f001 031f 	and.w	r3, r1, #31
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d008      	beq.n	8006e90 <USBD_LL_SetupStage+0x3a>
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d00b      	beq.n	8006e9a <USBD_LL_SetupStage+0x44>
 8006e82:	b97b      	cbnz	r3, 8006ea4 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e84:	4629      	mov	r1, r5
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f8fa 	bl	8007080 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8006e90:	4629      	mov	r1, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fa3c 	bl	8007310 <USBD_StdItfReq>
      break;
 8006e98:	e7f8      	b.n	8006e8c <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fa5b 	bl	8007358 <USBD_StdEPReq>
      break;
 8006ea2:	e7f3      	b.n	8006e8c <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8006eaa:	f000 fdbb 	bl	8007a24 <USBD_LL_StallEP>
      break;
 8006eae:	e7ed      	b.n	8006e8c <USBD_LL_SetupStage+0x36>

08006eb0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006eb6:	bb39      	cbnz	r1, 8006f08 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006eb8:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006ebc:	2a03      	cmp	r2, #3
 8006ebe:	d11c      	bne.n	8006efa <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ec0:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8006ec4:	4295      	cmp	r5, r2
 8006ec6:	d90b      	bls.n	8006ee0 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8006ec8:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8006eca:	42aa      	cmp	r2, r5
 8006ecc:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8006ece:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8006ed2:	bf8c      	ite	hi
 8006ed4:	b2aa      	uxthhi	r2, r5
 8006ed6:	b292      	uxthls	r2, r2
 8006ed8:	f000 fb1e 	bl	8007518 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006edc:	2000      	movs	r0, #0
}
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	b123      	cbz	r3, 8006ef2 <USBD_LL_DataOutStage+0x42>
 8006ee8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006eec:	2a03      	cmp	r2, #3
 8006eee:	d100      	bne.n	8006ef2 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8006ef0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fb18 	bl	8007528 <USBD_CtlSendStatus>
 8006ef8:	e7f0      	b.n	8006edc <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006efa:	2a05      	cmp	r2, #5
 8006efc:	d1ee      	bne.n	8006edc <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8006efe:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f02:	f000 fd8f 	bl	8007a24 <USBD_LL_StallEP>
 8006f06:	e7e9      	b.n	8006edc <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	b12b      	cbz	r3, 8006f1c <USBD_LL_DataOutStage+0x6c>
 8006f10:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006f14:	2a03      	cmp	r2, #3
 8006f16:	d101      	bne.n	8006f1c <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8006f18:	4798      	blx	r3
 8006f1a:	e7df      	b.n	8006edc <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8006f1c:	2002      	movs	r0, #2
 8006f1e:	e7de      	b.n	8006ede <USBD_LL_DataOutStage+0x2e>

08006f20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	4604      	mov	r4, r0
 8006f24:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f26:	460f      	mov	r7, r1
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d149      	bne.n	8006fc0 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f2c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006f30:	2a02      	cmp	r2, #2
 8006f32:	d13a      	bne.n	8006faa <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f34:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8006f38:	42b5      	cmp	r5, r6
 8006f3a:	d911      	bls.n	8006f60 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8006f3c:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f3e:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8006f40:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f42:	b2aa      	uxth	r2, r5
 8006f44:	f000 fad3 	bl	80074ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f48:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fd9d 	bl	8007a8e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f54:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d02d      	beq.n	8006fb8 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006f5c:	2000      	movs	r0, #0
}
 8006f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f60:	69c3      	ldr	r3, [r0, #28]
 8006f62:	fbb3 f5f6 	udiv	r5, r3, r6
 8006f66:	fb06 3515 	mls	r5, r6, r5, r3
 8006f6a:	b965      	cbnz	r5, 8006f86 <USBD_LL_DataInStage+0x66>
 8006f6c:	429e      	cmp	r6, r3
 8006f6e:	d80a      	bhi.n	8006f86 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8006f70:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d206      	bcs.n	8006f86 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f78:	462a      	mov	r2, r5
 8006f7a:	f000 fab8 	bl	80074ee <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f7e:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8006f80:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f84:	e7e1      	b.n	8006f4a <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f86:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	b12b      	cbz	r3, 8006f9a <USBD_LL_DataInStage+0x7a>
 8006f8e:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8006f92:	2a03      	cmp	r2, #3
 8006f94:	d101      	bne.n	8006f9a <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8006f96:	4620      	mov	r0, r4
 8006f98:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8006f9a:	2180      	movs	r1, #128	@ 0x80
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fd41 	bl	8007a24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 facb 	bl	800753e <USBD_CtlReceiveStatus>
 8006fa8:	e7d4      	b.n	8006f54 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006faa:	f032 0304 	bics.w	r3, r2, #4
 8006fae:	d1d1      	bne.n	8006f54 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8006fb0:	2180      	movs	r1, #128	@ 0x80
 8006fb2:	f000 fd37 	bl	8007a24 <USBD_LL_StallEP>
 8006fb6:	e7cd      	b.n	8006f54 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8006fbe:	e7cd      	b.n	8006f5c <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fc0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	b12b      	cbz	r3, 8006fd4 <USBD_LL_DataInStage+0xb4>
 8006fc8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006fcc:	2a03      	cmp	r2, #3
 8006fce:	d101      	bne.n	8006fd4 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8006fd0:	4798      	blx	r3
 8006fd2:	e7c3      	b.n	8006f5c <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	e7c2      	b.n	8006f5e <USBD_LL_DataInStage+0x3e>

08006fd8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd8:	2200      	movs	r2, #0
{
 8006fda:	b570      	push	{r4, r5, r6, lr}
 8006fdc:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fde:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe0:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	2340      	movs	r3, #64	@ 0x40
 8006fe6:	f000 fd08 	bl	80079fa <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fea:	4633      	mov	r3, r6
 8006fec:	2180      	movs	r1, #128	@ 0x80
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ff2:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ff6:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ffa:	f000 fcfe 	bl	80079fa <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ffe:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007000:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007004:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007006:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007008:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800700c:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007010:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007012:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8007016:	b123      	cbz	r3, 8007022 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007018:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800701c:	4620      	mov	r0, r4
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007022:	2000      	movs	r0, #0
 8007024:	bd70      	pop	{r4, r5, r6, pc}

08007026 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007026:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007028:	2000      	movs	r0, #0
 800702a:	4770      	bx	lr

0800702c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800702c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007030:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007034:	2304      	movs	r3, #4
 8007036:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800703a:	2000      	movs	r0, #0
 800703c:	4770      	bx	lr

0800703e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800703e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007042:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007044:	bf04      	itt	eq
 8007046:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800704a:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800704e:	2000      	movs	r0, #0
 8007050:	4770      	bx	lr

08007052 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007052:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007054:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007058:	2a03      	cmp	r2, #3
 800705a:	d104      	bne.n	8007066 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800705c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	b103      	cbz	r3, 8007066 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007064:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8007066:	2000      	movs	r0, #0
 8007068:	bd08      	pop	{r3, pc}

0800706a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800706e:	2180      	movs	r1, #128	@ 0x80
 8007070:	f000 fcd8 	bl	8007a24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007074:	4620      	mov	r0, r4
}
 8007076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800707a:	2100      	movs	r1, #0
 800707c:	f000 bcd2 	b.w	8007a24 <USBD_LL_StallEP>

08007080 <USBD_StdDevReq>:
{
 8007080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007082:	780b      	ldrb	r3, [r1, #0]
 8007084:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007086:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800708a:	2b20      	cmp	r3, #32
{
 800708c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708e:	d006      	beq.n	800709e <USBD_StdDevReq+0x1e>
 8007090:	2b40      	cmp	r3, #64	@ 0x40
 8007092:	d004      	beq.n	800709e <USBD_StdDevReq+0x1e>
 8007094:	b163      	cbz	r3, 80070b0 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 8007096:	4620      	mov	r0, r4
 8007098:	f7ff ffe7 	bl	800706a <USBD_CtlError.constprop.0>
        break;
 800709c:	e005      	b.n	80070aa <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 800709e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80070a2:	4629      	mov	r1, r5
 80070a4:	4620      	mov	r0, r4
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4798      	blx	r3
}
 80070aa:	2000      	movs	r0, #0
 80070ac:	b003      	add	sp, #12
 80070ae:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80070b0:	784b      	ldrb	r3, [r1, #1]
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d8ef      	bhi.n	8007096 <USBD_StdDevReq+0x16>
 80070b6:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <USBD_StdDevReq+0x3c>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080072bf 	.word	0x080072bf
 80070c0:	080072f5 	.word	0x080072f5
 80070c4:	08007097 	.word	0x08007097
 80070c8:	080072e7 	.word	0x080072e7
 80070cc:	08007097 	.word	0x08007097
 80070d0:	080071e5 	.word	0x080071e5
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	08007097 	.word	0x08007097
 80070dc:	0800728f 	.word	0x0800728f
 80070e0:	08007227 	.word	0x08007227
  uint16_t len = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80070ea:	884b      	ldrh	r3, [r1, #2]
 80070ec:	0a1a      	lsrs	r2, r3, #8
 80070ee:	3a01      	subs	r2, #1
 80070f0:	2a06      	cmp	r2, #6
 80070f2:	d8d0      	bhi.n	8007096 <USBD_StdDevReq+0x16>
 80070f4:	a101      	add	r1, pc, #4	@ (adr r1, 80070fc <USBD_StdDevReq+0x7c>)
 80070f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007119 	.word	0x08007119
 8007100:	0800713d 	.word	0x0800713d
 8007104:	08007157 	.word	0x08007157
 8007108:	08007097 	.word	0x08007097
 800710c:	08007097 	.word	0x08007097
 8007110:	0800719b 	.word	0x0800719b
 8007114:	080071b1 	.word	0x080071b1
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007118:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800711c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800711e:	7c20      	ldrb	r0, [r4, #16]
 8007120:	f10d 0106 	add.w	r1, sp, #6
 8007124:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007126:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800712a:	88eb      	ldrh	r3, [r5, #6]
 800712c:	2a00      	cmp	r2, #0
 800712e:	d054      	beq.n	80071da <USBD_StdDevReq+0x15a>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d149      	bne.n	80071c8 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f9f7 	bl	8007528 <USBD_CtlSendStatus>
 800713a:	e7b6      	b.n	80070aa <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800713e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007142:	b932      	cbnz	r2, 8007152 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007146:	f10d 0006 	add.w	r0, sp, #6
 800714a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800714c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800714e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007150:	e7e9      	b.n	8007126 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	e7f7      	b.n	8007146 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b05      	cmp	r3, #5
 800715a:	d89c      	bhi.n	8007096 <USBD_StdDevReq+0x16>
 800715c:	e8df f003 	tbb	[pc, r3]
 8007160:	110d0903 	.word	0x110d0903
 8007164:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007166:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800716a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1d6      	bne.n	800711e <USBD_StdDevReq+0x9e>
 8007170:	e791      	b.n	8007096 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007172:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	e7f8      	b.n	800716c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800717a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	e7f4      	b.n	800716c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007182:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	e7f0      	b.n	800716c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800718a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	e7ec      	b.n	800716c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007192:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	e7e8      	b.n	800716c <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800719a:	7c03      	ldrb	r3, [r0, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f47f af7a 	bne.w	8007096 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071a6:	f10d 0006 	add.w	r0, sp, #6
 80071aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ac:	4798      	blx	r3
  if (err != 0U)
 80071ae:	e7ba      	b.n	8007126 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b0:	7c03      	ldrb	r3, [r0, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f47f af6f 	bne.w	8007096 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80071bc:	f10d 0006 	add.w	r0, sp, #6
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071c4:	2307      	movs	r3, #7
 80071c6:	e7c2      	b.n	800714e <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 80071c8:	429a      	cmp	r2, r3
 80071ca:	bf28      	it	cs
 80071cc:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ce:	4601      	mov	r1, r0
 80071d0:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80071d2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071d6:	f000 f97d 	bl	80074d4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80071da:	88eb      	ldrh	r3, [r5, #6]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f47f af64 	bne.w	80070aa <USBD_StdDevReq+0x2a>
 80071e2:	e7a7      	b.n	8007134 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071e4:	888b      	ldrh	r3, [r1, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f47f af55 	bne.w	8007096 <USBD_StdDevReq+0x16>
 80071ec:	88cb      	ldrh	r3, [r1, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f47f af51 	bne.w	8007096 <USBD_StdDevReq+0x16>
 80071f4:	884d      	ldrh	r5, [r1, #2]
 80071f6:	2d7f      	cmp	r5, #127	@ 0x7f
 80071f8:	f63f af4d 	bhi.w	8007096 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007200:	2b03      	cmp	r3, #3
 8007202:	f43f af48 	beq.w	8007096 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007206:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007208:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 800720a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800720e:	f000 fc2c 	bl	8007a6a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007212:	4620      	mov	r0, r4
 8007214:	f000 f988 	bl	8007528 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007218:	b11d      	cbz	r5, 8007222 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800721a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8007220:	e743      	b.n	80070aa <USBD_StdDevReq+0x2a>
 8007222:	2301      	movs	r3, #1
 8007224:	e7fa      	b.n	800721c <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8007226:	7889      	ldrb	r1, [r1, #2]
 8007228:	4d38      	ldr	r5, [pc, #224]	@ (800730c <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800722a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800722c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800722e:	f63f af32 	bhi.w	8007096 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8007232:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007236:	2b02      	cmp	r3, #2
 8007238:	d008      	beq.n	800724c <USBD_StdDevReq+0x1cc>
 800723a:	2b03      	cmp	r3, #3
 800723c:	d015      	beq.n	800726a <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 800723e:	f7ff ff14 	bl	800706a <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007242:	4620      	mov	r0, r4
 8007244:	7829      	ldrb	r1, [r5, #0]
 8007246:	f7ff fdff 	bl	8006e48 <USBD_ClrClassConfig>
        break;
 800724a:	e72e      	b.n	80070aa <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800724c:	2900      	cmp	r1, #0
 800724e:	f43f af71 	beq.w	8007134 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8007252:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007254:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007256:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007258:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800725c:	4620      	mov	r0, r4
 800725e:	f7ff fde6 	bl	8006e2e <USBD_SetClassConfig>
 8007262:	2802      	cmp	r0, #2
 8007264:	f47f af66 	bne.w	8007134 <USBD_StdDevReq+0xb4>
 8007268:	e715      	b.n	8007096 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 800726a:	b931      	cbnz	r1, 800727a <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800726c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800726e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007270:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007274:	f7ff fde8 	bl	8006e48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007278:	e75c      	b.n	8007134 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 800727a:	6841      	ldr	r1, [r0, #4]
 800727c:	2901      	cmp	r1, #1
 800727e:	f43f af59 	beq.w	8007134 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007282:	b2c9      	uxtb	r1, r1
 8007284:	f7ff fde0 	bl	8006e48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007288:	7829      	ldrb	r1, [r5, #0]
 800728a:	6061      	str	r1, [r4, #4]
 800728c:	e7e6      	b.n	800725c <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 800728e:	88ca      	ldrh	r2, [r1, #6]
 8007290:	2a01      	cmp	r2, #1
 8007292:	f47f af00 	bne.w	8007096 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8007296:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800729a:	2b02      	cmp	r3, #2
 800729c:	d80a      	bhi.n	80072b4 <USBD_StdDevReq+0x234>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f43f aef9 	beq.w	8007096 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 80072a4:	4601      	mov	r1, r0
 80072a6:	2300      	movs	r3, #0
 80072a8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 f911 	bl	80074d4 <USBD_CtlSendData>
      break;
 80072b2:	e6fa      	b.n	80070aa <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	f47f aeee 	bne.w	8007096 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072ba:	1d01      	adds	r1, r0, #4
 80072bc:	e7f6      	b.n	80072ac <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 80072be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80072c2:	3b01      	subs	r3, #1
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	f63f aee6 	bhi.w	8007096 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 80072ca:	88ca      	ldrh	r2, [r1, #6]
 80072cc:	2a02      	cmp	r2, #2
 80072ce:	f47f aee2 	bne.w	8007096 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 80072d2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80072d6:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2303      	movne	r3, #3
 80072e0:	f841 3f0c 	str.w	r3, [r1, #12]!
 80072e4:	e7e2      	b.n	80072ac <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072e6:	884b      	ldrh	r3, [r1, #2]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f47f aede 	bne.w	80070aa <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80072ee:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 80072f2:	e71f      	b.n	8007134 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 80072f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80072f8:	3b01      	subs	r3, #1
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	f63f aecb 	bhi.w	8007096 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007300:	884b      	ldrh	r3, [r1, #2]
 8007302:	2b01      	cmp	r3, #1
 8007304:	f47f aed1 	bne.w	80070aa <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	e7f0      	b.n	80072ee <USBD_StdDevReq+0x26e>
 800730c:	20000649 	.word	0x20000649

08007310 <USBD_StdItfReq>:
{
 8007310:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	780b      	ldrb	r3, [r1, #0]
{
 8007314:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007316:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800731a:	065b      	lsls	r3, r3, #25
{
 800731c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800731e:	d501      	bpl.n	8007324 <USBD_StdItfReq+0x14>
 8007320:	2a40      	cmp	r2, #64	@ 0x40
 8007322:	d115      	bne.n	8007350 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8007324:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8007328:	3b01      	subs	r3, #1
 800732a:	2b02      	cmp	r3, #2
 800732c:	d810      	bhi.n	8007350 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800732e:	792b      	ldrb	r3, [r5, #4]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d80d      	bhi.n	8007350 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007334:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8007338:	4629      	mov	r1, r5
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4620      	mov	r0, r4
 800733e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007340:	88eb      	ldrh	r3, [r5, #6]
 8007342:	b91b      	cbnz	r3, 800734c <USBD_StdItfReq+0x3c>
 8007344:	b910      	cbnz	r0, 800734c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8007346:	4620      	mov	r0, r4
 8007348:	f000 f8ee 	bl	8007528 <USBD_CtlSendStatus>
}
 800734c:	2000      	movs	r0, #0
 800734e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff fe8a 	bl	800706a <USBD_CtlError.constprop.0>
          break;
 8007356:	e7f9      	b.n	800734c <USBD_StdItfReq+0x3c>

08007358 <USBD_StdEPReq>:
{
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	780a      	ldrb	r2, [r1, #0]
 800735c:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800735e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007362:	2a20      	cmp	r2, #32
{
 8007364:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8007366:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007368:	d006      	beq.n	8007378 <USBD_StdEPReq+0x20>
 800736a:	2a40      	cmp	r2, #64	@ 0x40
 800736c:	d004      	beq.n	8007378 <USBD_StdEPReq+0x20>
 800736e:	b15a      	cbz	r2, 8007388 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fe7a 	bl	800706a <USBD_CtlError.constprop.0>
              break;
 8007376:	e005      	b.n	8007384 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8007378:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 800737c:	4619      	mov	r1, r3
 800737e:	4620      	mov	r0, r4
 8007380:	6892      	ldr	r2, [r2, #8]
 8007382:	4790      	blx	r2
}
 8007384:	2000      	movs	r0, #0
 8007386:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8007388:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800738a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800738c:	2a01      	cmp	r2, #1
 800738e:	d035      	beq.n	80073fc <USBD_StdEPReq+0xa4>
 8007390:	2a03      	cmp	r2, #3
 8007392:	d021      	beq.n	80073d8 <USBD_StdEPReq+0x80>
 8007394:	2a00      	cmp	r2, #0
 8007396:	d1eb      	bne.n	8007370 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8007398:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800739c:	2b02      	cmp	r3, #2
 800739e:	d044      	beq.n	800742a <USBD_StdEPReq+0xd2>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d1e5      	bne.n	8007370 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 80073a4:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073a6:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80073aa:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073ae:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80073b2:	d04b      	beq.n	800744c <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0da      	beq.n	8007370 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ba:	2514      	movs	r5, #20
 80073bc:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 80073c0:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c4:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073c6:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c8:	d04b      	beq.n	8007462 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fb3c 	bl	8007a48 <USBD_LL_IsStallEP>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d04b      	beq.n	800746c <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e045      	b.n	8007464 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 80073d8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80073dc:	2a02      	cmp	r2, #2
 80073de:	d01b      	beq.n	8007418 <USBD_StdEPReq+0xc0>
 80073e0:	2a03      	cmp	r2, #3
 80073e2:	d1c5      	bne.n	8007370 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073e4:	885a      	ldrh	r2, [r3, #2]
 80073e6:	b92a      	cbnz	r2, 80073f4 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 80073e8:	064a      	lsls	r2, r1, #25
 80073ea:	d003      	beq.n	80073f4 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	b90b      	cbnz	r3, 80073f4 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 80073f0:	f000 fb18 	bl	8007a24 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 f897 	bl	8007528 <USBD_CtlSendStatus>
              break;
 80073fa:	e7c3      	b.n	8007384 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80073fc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007400:	2a02      	cmp	r2, #2
 8007402:	d009      	beq.n	8007418 <USBD_StdEPReq+0xc0>
 8007404:	2a03      	cmp	r2, #3
 8007406:	d1b3      	bne.n	8007370 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007408:	885b      	ldrh	r3, [r3, #2]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ba      	bne.n	8007384 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800740e:	064d      	lsls	r5, r1, #25
 8007410:	d0f0      	beq.n	80073f4 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007412:	f000 fb10 	bl	8007a36 <USBD_LL_ClearStallEP>
 8007416:	e7ed      	b.n	80073f4 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007418:	064b      	lsls	r3, r1, #25
 800741a:	d0a9      	beq.n	8007370 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 800741c:	f000 fb02 	bl	8007a24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007420:	2180      	movs	r1, #128	@ 0x80
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fafe 	bl	8007a24 <USBD_LL_StallEP>
 8007428:	e7ac      	b.n	8007384 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800742a:	064a      	lsls	r2, r1, #25
 800742c:	d1a0      	bne.n	8007370 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800742e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8007430:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007434:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007438:	bf4c      	ite	mi
 800743a:	f100 0114 	addmi.w	r1, r0, #20
 800743e:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8007442:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007444:	4620      	mov	r0, r4
 8007446:	f000 f845 	bl	80074d4 <USBD_CtlSendData>
              break;
 800744a:	e79b      	b.n	8007384 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800744c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8007450:	2b00      	cmp	r3, #0
 8007452:	d08d      	beq.n	8007370 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007454:	2514      	movs	r5, #20
 8007456:	fb05 0501 	mla	r5, r5, r1, r0
 800745a:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800745e:	2900      	cmp	r1, #0
 8007460:	d1b3      	bne.n	80073ca <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8007462:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8007464:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007466:	2202      	movs	r2, #2
 8007468:	4629      	mov	r1, r5
 800746a:	e7eb      	b.n	8007444 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 800746c:	6028      	str	r0, [r5, #0]
 800746e:	e7fa      	b.n	8007466 <USBD_StdEPReq+0x10e>

08007470 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007470:	780b      	ldrb	r3, [r1, #0]
 8007472:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007474:	784b      	ldrb	r3, [r1, #1]
 8007476:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007478:	884b      	ldrh	r3, [r1, #2]
 800747a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800747c:	888b      	ldrh	r3, [r1, #4]
 800747e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007480:	88cb      	ldrh	r3, [r1, #6]
 8007482:	80c3      	strh	r3, [r0, #6]
}
 8007484:	4770      	bx	lr

08007486 <USBD_CtlError>:
{
 8007486:	b510      	push	{r4, lr}
 8007488:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800748a:	2180      	movs	r1, #128	@ 0x80
 800748c:	f000 faca 	bl	8007a24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007490:	4620      	mov	r0, r4
}
 8007492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007496:	2100      	movs	r1, #0
 8007498:	f000 bac4 	b.w	8007a24 <USBD_LL_StallEP>

0800749c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460d      	mov	r5, r1
 80074a0:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80074a2:	4604      	mov	r4, r0
 80074a4:	b170      	cbz	r0, 80074c4 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80074a6:	f7f8 fe53 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074aa:	b2c3      	uxtb	r3, r0
 80074ac:	3301      	adds	r3, #1
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074b2:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074b4:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 80074b6:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074b8:	706b      	strb	r3, [r5, #1]
 80074ba:	2302      	movs	r3, #2
 80074bc:	3c01      	subs	r4, #1
    while (*desc != '\0')
 80074be:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80074c2:	b901      	cbnz	r1, 80074c6 <USBD_GetString+0x2a>
}
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	54e9      	strb	r1, [r5, r3]
 80074ca:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80074cc:	3302      	adds	r3, #2
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	54a8      	strb	r0, [r5, r2]
 80074d2:	e7f4      	b.n	80074be <USBD_GetString+0x22>

080074d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80074d4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074d6:	2202      	movs	r2, #2
{
 80074d8:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80074da:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074de:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074e2:	460a      	mov	r2, r1
 80074e4:	2100      	movs	r1, #0
 80074e6:	f000 fac9 	bl	8007a7c <USBD_LL_Transmit>

  return USBD_OK;
}
 80074ea:	2000      	movs	r0, #0
 80074ec:	bd10      	pop	{r4, pc}

080074ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074ee:	b508      	push	{r3, lr}
 80074f0:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074f2:	460a      	mov	r2, r1
 80074f4:	2100      	movs	r1, #0
 80074f6:	f000 fac1 	bl	8007a7c <USBD_LL_Transmit>

  return USBD_OK;
}
 80074fa:	2000      	movs	r0, #0
 80074fc:	bd08      	pop	{r3, pc}

080074fe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80074fe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007500:	2203      	movs	r2, #3
{
 8007502:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8007504:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007508:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800750c:	460a      	mov	r2, r1
 800750e:	2100      	movs	r1, #0
 8007510:	f000 fabd 	bl	8007a8e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007514:	2000      	movs	r0, #0
 8007516:	bd10      	pop	{r4, pc}

08007518 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007518:	b508      	push	{r3, lr}
 800751a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800751c:	460a      	mov	r2, r1
 800751e:	2100      	movs	r1, #0
 8007520:	f000 fab5 	bl	8007a8e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007524:	2000      	movs	r0, #0
 8007526:	bd08      	pop	{r3, pc}

08007528 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007528:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800752a:	2304      	movs	r3, #4
 800752c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007530:	2300      	movs	r3, #0
 8007532:	461a      	mov	r2, r3
 8007534:	4619      	mov	r1, r3
 8007536:	f000 faa1 	bl	8007a7c <USBD_LL_Transmit>

  return USBD_OK;
}
 800753a:	2000      	movs	r0, #0
 800753c:	bd08      	pop	{r3, pc}

0800753e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800753e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007540:	2305      	movs	r3, #5
 8007542:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007546:	2300      	movs	r3, #0
 8007548:	461a      	mov	r2, r3
 800754a:	4619      	mov	r1, r3
 800754c:	f000 fa9f 	bl	8007a8e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007550:	2000      	movs	r0, #0
 8007552:	bd08      	pop	{r3, pc}

08007554 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007556:	2200      	movs	r2, #0
 8007558:	490e      	ldr	r1, [pc, #56]	@ (8007594 <MX_USB_DEVICE_Init+0x40>)
 800755a:	480f      	ldr	r0, [pc, #60]	@ (8007598 <MX_USB_DEVICE_Init+0x44>)
 800755c:	f7ff fc46 	bl	8006dec <USBD_Init>
 8007560:	b108      	cbz	r0, 8007566 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8007562:	f7fa f87b 	bl	800165c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007566:	490d      	ldr	r1, [pc, #52]	@ (800759c <MX_USB_DEVICE_Init+0x48>)
 8007568:	480b      	ldr	r0, [pc, #44]	@ (8007598 <MX_USB_DEVICE_Init+0x44>)
 800756a:	f7ff fc54 	bl	8006e16 <USBD_RegisterClass>
 800756e:	b108      	cbz	r0, 8007574 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8007570:	f7fa f874 	bl	800165c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007574:	490a      	ldr	r1, [pc, #40]	@ (80075a0 <MX_USB_DEVICE_Init+0x4c>)
 8007576:	4808      	ldr	r0, [pc, #32]	@ (8007598 <MX_USB_DEVICE_Init+0x44>)
 8007578:	f7ff fbf7 	bl	8006d6a <USBD_CDC_RegisterInterface>
 800757c:	b108      	cbz	r0, 8007582 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800757e:	f7fa f86d 	bl	800165c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007582:	4805      	ldr	r0, [pc, #20]	@ (8007598 <MX_USB_DEVICE_Init+0x44>)
 8007584:	f7ff fc4e 	bl	8006e24 <USBD_Start>
 8007588:	b118      	cbz	r0, 8007592 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800758a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800758e:	f7fa b865 	b.w	800165c <Error_Handler>
}
 8007592:	bd08      	pop	{r3, pc}
 8007594:	200001a8 	.word	0x200001a8
 8007598:	2000064c 	.word	0x2000064c
 800759c:	20000120 	.word	0x20000120
 80075a0:	20000164 	.word	0x20000164

080075a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80075a4:	2000      	movs	r0, #0
 80075a6:	4770      	bx	lr

080075a8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80075a8:	2000      	movs	r0, #0
 80075aa:	4770      	bx	lr

080075ac <CDC_Init_FS>:
{
 80075ac:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075ae:	4c06      	ldr	r4, [pc, #24]	@ (80075c8 <CDC_Init_FS+0x1c>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	4620      	mov	r0, r4
 80075b4:	4905      	ldr	r1, [pc, #20]	@ (80075cc <CDC_Init_FS+0x20>)
 80075b6:	f7ff fbdf 	bl	8006d78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075ba:	4620      	mov	r0, r4
 80075bc:	4904      	ldr	r1, [pc, #16]	@ (80075d0 <CDC_Init_FS+0x24>)
 80075be:	f7ff fbe3 	bl	8006d88 <USBD_CDC_SetRxBuffer>
}
 80075c2:	2000      	movs	r0, #0
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	bf00      	nop
 80075c8:	2000064c 	.word	0x2000064c
 80075cc:	20000951 	.word	0x20000951
 80075d0:	20000d51 	.word	0x20000d51

080075d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075d4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075d6:	4c09      	ldr	r4, [pc, #36]	@ (80075fc <CDC_Transmit_FS+0x28>)
{
 80075d8:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80075da:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 80075de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075e2:	b943      	cbnz	r3, 80075f6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075e4:	4601      	mov	r1, r0
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7ff fbc6 	bl	8006d78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075ec:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80075ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075f2:	f7ff bbcf 	b.w	8006d94 <USBD_CDC_TransmitPacket>
}
 80075f6:	2001      	movs	r0, #1
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	2000064c 	.word	0x2000064c

08007600 <CDC_Receive_FS>:
{
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	4606      	mov	r6, r0
 8007606:	4688      	mov	r8, r1
		    for (uint32_t i = 0; i < *Len; i++) {
 8007608:	2700      	movs	r7, #0
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 800760a:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8007754 <CDC_Receive_FS+0x154>
 800760e:	4d52      	ldr	r5, [pc, #328]	@ (8007758 <CDC_Receive_FS+0x158>)
{
 8007610:	b095      	sub	sp, #84	@ 0x54
		    for (uint32_t i = 0; i < *Len; i++) {
 8007612:	f8d8 3000 	ldr.w	r3, [r8]
 8007616:	42bb      	cmp	r3, r7
 8007618:	d80a      	bhi.n	8007630 <CDC_Receive_FS+0x30>
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800761a:	4631      	mov	r1, r6
 800761c:	484f      	ldr	r0, [pc, #316]	@ (800775c <CDC_Receive_FS+0x15c>)
 800761e:	f7ff fbb3 	bl	8006d88 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007622:	484e      	ldr	r0, [pc, #312]	@ (800775c <CDC_Receive_FS+0x15c>)
 8007624:	f7ff fbcf 	bl	8006dc6 <USBD_CDC_ReceivePacket>
}
 8007628:	2000      	movs	r0, #0
 800762a:	b015      	add	sp, #84	@ 0x54
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		        char byte = Buf[i]; // Чтение байта
 8007630:	5df2      	ldrb	r2, [r6, r7]
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8007632:	f899 3000 	ldrb.w	r3, [r9]
 8007636:	2a0a      	cmp	r2, #10
 8007638:	d002      	beq.n	8007640 <CDC_Receive_FS+0x40>
 800763a:	2b3e      	cmp	r3, #62	@ 0x3e
 800763c:	f240 8084 	bls.w	8007748 <CDC_Receive_FS+0x148>
		            rx_buffer[rx_index] = '\0';
 8007640:	2200      	movs	r2, #0
 8007642:	54ea      	strb	r2, [r5, r3]
		                     if (rx_buffer[0] == 'F') {
 8007644:	782b      	ldrb	r3, [r5, #0]
 8007646:	2b46      	cmp	r3, #70	@ 0x46
 8007648:	d146      	bne.n	80076d8 <CDC_Receive_FS+0xd8>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800764a:	78ab      	ldrb	r3, [r5, #2]
		                         uint8_t ch = rx_buffer[1] - '0';
 800764c:	786c      	ldrb	r4, [r5, #1]
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800764e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007650:	d13f      	bne.n	80076d2 <CDC_Receive_FS+0xd2>
		                         uint8_t ch = rx_buffer[1] - '0';
 8007652:	3c30      	subs	r4, #48	@ 0x30
 8007654:	b2e4      	uxtb	r4, r4
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8007656:	2c02      	cmp	r4, #2
 8007658:	d83b      	bhi.n	80076d2 <CDC_Receive_FS+0xd2>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 800765a:	4841      	ldr	r0, [pc, #260]	@ (8007760 <CDC_Receive_FS+0x160>)
 800765c:	f000 fa2a 	bl	8007ab4 <atoi>
 8007660:	4682      	mov	sl, r0
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 8007662:	483f      	ldr	r0, [pc, #252]	@ (8007760 <CDC_Receive_FS+0x160>)
 8007664:	f000 fa26 	bl	8007ab4 <atoi>
		                             if (set_freq > 0 && set_freq < 150000000) {
 8007668:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <CDC_Receive_FS+0x164>)
 800766a:	1e42      	subs	r2, r0, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	d81d      	bhi.n	80076ac <CDC_Receive_FS+0xac>
		                            	 freq[ch] = set_freq / 1000;
 8007670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007674:	fbb0 f0f3 	udiv	r0, r0, r3
		                            	 int_to_str(freq[ch], num_string[ch]);
 8007678:	493b      	ldr	r1, [pc, #236]	@ (8007768 <CDC_Receive_FS+0x168>)
 800767a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
		                            	 freq[ch] = set_freq / 1000;
 800767e:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800776c <CDC_Receive_FS+0x16c>
		                            	 int_to_str(freq[ch], num_string[ch]);
 8007682:	4419      	add	r1, r3
		                            	 freq[ch] = set_freq / 1000;
 8007684:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 8007688:	f7f9 fa39 	bl	8000afe <int_to_str>
		                            	 print_interface_mode0();
 800768c:	f7f9 faac 	bl	8000be8 <print_interface_mode0>
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 8007690:	4623      	mov	r3, r4
 8007692:	2140      	movs	r1, #64	@ 0x40
 8007694:	4a36      	ldr	r2, [pc, #216]	@ (8007770 <CDC_Receive_FS+0x170>)
 8007696:	f8cd a000 	str.w	sl, [sp]
 800769a:	a804      	add	r0, sp, #16
 800769c:	f000 fb40 	bl	8007d20 <sniprintf>
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80076a0:	a804      	add	r0, sp, #16
 80076a2:	f7f8 fd55 	bl	8000150 <strlen>
 80076a6:	b281      	uxth	r1, r0
 80076a8:	a804      	add	r0, sp, #16
 80076aa:	e00b      	b.n	80076c4 <CDC_Receive_FS+0xc4>
		                             } else if (freq == 0) {
 80076ac:	f1ba 0f00 	cmp.w	sl, #0
 80076b0:	d106      	bne.n	80076c0 <CDC_Receive_FS+0xc0>
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 80076b2:	4623      	mov	r3, r4
 80076b4:	2120      	movs	r1, #32
 80076b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007774 <CDC_Receive_FS+0x174>)
 80076b8:	a804      	add	r0, sp, #16
 80076ba:	f000 fb31 	bl	8007d20 <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80076be:	e7ef      	b.n	80076a0 <CDC_Receive_FS+0xa0>
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 80076c0:	2114      	movs	r1, #20
 80076c2:	482d      	ldr	r0, [pc, #180]	@ (8007778 <CDC_Receive_FS+0x178>)
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 80076c4:	f7ff ff86 	bl	80075d4 <CDC_Transmit_FS>
		            rx_index = 0; // Очищаем буфер
 80076c8:	2300      	movs	r3, #0
 80076ca:	f889 3000 	strb.w	r3, [r9]
		    for (uint32_t i = 0; i < *Len; i++) {
 80076ce:	3701      	adds	r7, #1
 80076d0:	e79f      	b.n	8007612 <CDC_Receive_FS+0x12>
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 80076d2:	2111      	movs	r1, #17
 80076d4:	4829      	ldr	r0, [pc, #164]	@ (800777c <CDC_Receive_FS+0x17c>)
 80076d6:	e7f5      	b.n	80076c4 <CDC_Receive_FS+0xc4>
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 80076d8:	2204      	movs	r2, #4
 80076da:	4628      	mov	r0, r5
 80076dc:	4928      	ldr	r1, [pc, #160]	@ (8007780 <CDC_Receive_FS+0x180>)
 80076de:	f000 fb5d 	bl	8007d9c <strncmp>
 80076e2:	b948      	cbnz	r0, 80076f8 <CDC_Receive_FS+0xf8>
		                char msg[] = "Normally\r\n";
 80076e4:	4a27      	ldr	r2, [pc, #156]	@ (8007784 <CDC_Receive_FS+0x184>)
 80076e6:	ab04      	add	r3, sp, #16
 80076e8:	6851      	ldr	r1, [r2, #4]
 80076ea:	6810      	ldr	r0, [r2, #0]
 80076ec:	c303      	stmia	r3!, {r0, r1}
 80076ee:	8911      	ldrh	r1, [r2, #8]
 80076f0:	7a92      	ldrb	r2, [r2, #10]
 80076f2:	8019      	strh	r1, [r3, #0]
 80076f4:	709a      	strb	r2, [r3, #2]
 80076f6:	e7d3      	b.n	80076a0 <CDC_Receive_FS+0xa0>
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 80076f8:	2206      	movs	r2, #6
 80076fa:	4628      	mov	r0, r5
 80076fc:	4922      	ldr	r1, [pc, #136]	@ (8007788 <CDC_Receive_FS+0x188>)
 80076fe:	f000 fb4d 	bl	8007d9c <strncmp>
 8007702:	4603      	mov	r3, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	d1df      	bne.n	80076c8 <CDC_Receive_FS+0xc8>
 8007708:	4c18      	ldr	r4, [pc, #96]	@ (800776c <CDC_Receive_FS+0x16c>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800770a:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800778c <CDC_Receive_FS+0x18c>
 800770e:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8007790 <CDC_Receive_FS+0x190>
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8007712:	4a20      	ldr	r2, [pc, #128]	@ (8007794 <CDC_Receive_FS+0x194>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8007714:	f854 1b04 	ldr.w	r1, [r4], #4
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8007718:	9303      	str	r3, [sp, #12]
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800771a:	2900      	cmp	r1, #0
 800771c:	bfd4      	ite	le
 800771e:	4658      	movle	r0, fp
 8007720:	4650      	movgt	r0, sl
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8007722:	e9cd 0100 	strd	r0, r1, [sp]
 8007726:	2140      	movs	r1, #64	@ 0x40
 8007728:	a804      	add	r0, sp, #16
 800772a:	f000 faf9 	bl	8007d20 <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800772e:	a804      	add	r0, sp, #16
 8007730:	f7f8 fd0e 	bl	8000150 <strlen>
 8007734:	b281      	uxth	r1, r0
 8007736:	a804      	add	r0, sp, #16
 8007738:	f7ff ff4c 	bl	80075d4 <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <CDC_Receive_FS+0x194>)
 8007740:	3301      	adds	r3, #1
 8007742:	2b03      	cmp	r3, #3
 8007744:	d1e6      	bne.n	8007714 <CDC_Receive_FS+0x114>
 8007746:	e7bf      	b.n	80076c8 <CDC_Receive_FS+0xc8>
		            rx_buffer[rx_index++] = byte;
 8007748:	1c59      	adds	r1, r3, #1
 800774a:	f889 1000 	strb.w	r1, [r9]
 800774e:	54ea      	strb	r2, [r5, r3]
 8007750:	e7bd      	b.n	80076ce <CDC_Receive_FS+0xce>
 8007752:	bf00      	nop
 8007754:	20000950 	.word	0x20000950
 8007758:	20000910 	.word	0x20000910
 800775c:	2000064c 	.word	0x2000064c
 8007760:	20000913 	.word	0x20000913
 8007764:	08f0d17e 	.word	0x08f0d17e
 8007768:	2000023d 	.word	0x2000023d
 800776c:	20000258 	.word	0x20000258
 8007770:	0800940c 	.word	0x0800940c
 8007774:	08009421 	.word	0x08009421
 8007778:	08009431 	.word	0x08009431
 800777c:	08009445 	.word	0x08009445
 8007780:	08009456 	.word	0x08009456
 8007784:	0800947b 	.word	0x0800947b
 8007788:	08009460 	.word	0x08009460
 800778c:	08009408 	.word	0x08009408
 8007790:	08009405 	.word	0x08009405
 8007794:	08009467 	.word	0x08009467

08007798 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007798:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800779a:	4801      	ldr	r0, [pc, #4]	@ (80077a0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800779c:	800b      	strh	r3, [r1, #0]
}
 800779e:	4770      	bx	lr
 80077a0:	20000194 	.word	0x20000194

080077a4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077a4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80077a6:	4801      	ldr	r0, [pc, #4]	@ (80077ac <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80077a8:	800b      	strh	r3, [r1, #0]
}
 80077aa:	4770      	bx	lr
 80077ac:	20000190 	.word	0x20000190

080077b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077b0:	2300      	movs	r3, #0
 80077b2:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80077b4:	461e      	mov	r6, r3
 80077b6:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 80077b8:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80077ba:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80077be:	bf34      	ite	cc
 80077c0:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077c2:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80077c4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80077c8:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80077cc:	3301      	adds	r3, #1
 80077ce:	b2dc      	uxtb	r4, r3
 80077d0:	42a2      	cmp	r2, r4
    value = value << 4;
 80077d2:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80077d6:	d8ef      	bhi.n	80077b8 <IntToUnicode+0x8>
  }
}
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080077dc <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80077dc:	231a      	movs	r3, #26
{
 80077de:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80077e0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077e2:	4b0a      	ldr	r3, [pc, #40]	@ (800780c <USBD_FS_SerialStrDescriptor+0x30>)
 80077e4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 80077e8:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 80077ec:	1880      	adds	r0, r0, r2
 80077ee:	d00a      	beq.n	8007806 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077f0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077f4:	4906      	ldr	r1, [pc, #24]	@ (8007810 <USBD_FS_SerialStrDescriptor+0x34>)
 80077f6:	2208      	movs	r2, #8
 80077f8:	f7ff ffda 	bl	80077b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077fc:	2204      	movs	r2, #4
 80077fe:	4620      	mov	r0, r4
 8007800:	3110      	adds	r1, #16
 8007802:	f7ff ffd5 	bl	80077b0 <IntToUnicode>
}
 8007806:	4803      	ldr	r0, [pc, #12]	@ (8007814 <USBD_FS_SerialStrDescriptor+0x38>)
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	1ffff000 	.word	0x1ffff000
 8007810:	20000176 	.word	0x20000176
 8007814:	20000174 	.word	0x20000174

08007818 <USBD_FS_ManufacturerStrDescriptor>:
{
 8007818:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800781a:	4c04      	ldr	r4, [pc, #16]	@ (800782c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800781c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800781e:	4804      	ldr	r0, [pc, #16]	@ (8007830 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007820:	4621      	mov	r1, r4
 8007822:	f7ff fe3b 	bl	800749c <USBD_GetString>
}
 8007826:	4620      	mov	r0, r4
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	20001154 	.word	0x20001154
 8007830:	08009486 	.word	0x08009486

08007834 <USBD_FS_ProductStrDescriptor>:
{
 8007834:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007836:	4c04      	ldr	r4, [pc, #16]	@ (8007848 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8007838:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800783a:	4804      	ldr	r0, [pc, #16]	@ (800784c <USBD_FS_ProductStrDescriptor+0x18>)
 800783c:	4621      	mov	r1, r4
 800783e:	f7ff fe2d 	bl	800749c <USBD_GetString>
}
 8007842:	4620      	mov	r0, r4
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	20001154 	.word	0x20001154
 800784c:	08009499 	.word	0x08009499

08007850 <USBD_FS_ConfigStrDescriptor>:
{
 8007850:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007852:	4c04      	ldr	r4, [pc, #16]	@ (8007864 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007854:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007856:	4804      	ldr	r0, [pc, #16]	@ (8007868 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007858:	4621      	mov	r1, r4
 800785a:	f7ff fe1f 	bl	800749c <USBD_GetString>
}
 800785e:	4620      	mov	r0, r4
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	20001154 	.word	0x20001154
 8007868:	080094ac 	.word	0x080094ac

0800786c <USBD_FS_InterfaceStrDescriptor>:
{
 800786c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800786e:	4c04      	ldr	r4, [pc, #16]	@ (8007880 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007870:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007872:	4804      	ldr	r0, [pc, #16]	@ (8007884 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007874:	4621      	mov	r1, r4
 8007876:	f7ff fe11 	bl	800749c <USBD_GetString>
}
 800787a:	4620      	mov	r0, r4
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	20001154 	.word	0x20001154
 8007884:	080094b7 	.word	0x080094b7

08007888 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007888:	b118      	cbz	r0, 8007892 <USBD_Get_USB_Status+0xa>
 800788a:	2802      	cmp	r0, #2
 800788c:	bf0c      	ite	eq
 800788e:	2001      	moveq	r0, #1
 8007890:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007892:	4770      	bx	lr

08007894 <HAL_PCD_MspInit>:
{
 8007894:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8007896:	4b12      	ldr	r3, [pc, #72]	@ (80078e0 <HAL_PCD_MspInit+0x4c>)
 8007898:	6802      	ldr	r2, [r0, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d11d      	bne.n	80078da <HAL_PCD_MspInit+0x46>
    __HAL_RCC_USB_CLK_ENABLE();
 800789e:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80078a2:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80078a4:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 80078a6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80078aa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80078ac:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80078ae:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80078b0:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80078b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80078ba:	f7fa fa9f 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80078be:	2013      	movs	r0, #19
 80078c0:	f7fa facc 	bl	8001e5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80078c4:	2200      	movs	r2, #0
 80078c6:	2014      	movs	r0, #20
 80078c8:	4611      	mov	r1, r2
 80078ca:	f7fa fa97 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80078ce:	2014      	movs	r0, #20
}
 80078d0:	b003      	add	sp, #12
 80078d2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80078d6:	f7fa bac1 	b.w	8001e5c <HAL_NVIC_EnableIRQ>
}
 80078da:	b003      	add	sp, #12
 80078dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80078e0:	40005c00 	.word	0x40005c00

080078e4 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078e4:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80078e8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80078ec:	f7ff bab3 	b.w	8006e56 <USBD_LL_SetupStage>

080078f0 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078f0:	2328      	movs	r3, #40	@ 0x28
 80078f2:	fb03 0301 	mla	r3, r3, r1, r0
 80078f6:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80078fa:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80078fe:	f7ff bad7 	b.w	8006eb0 <USBD_LL_DataOutStage>

08007902 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007902:	2328      	movs	r3, #40	@ 0x28
 8007904:	fb03 0301 	mla	r3, r3, r1, r0
 8007908:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800790c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800790e:	f7ff bb07 	b.w	8006f20 <USBD_LL_DataInStage>

08007912 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007912:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007916:	f7ff bb9c 	b.w	8007052 <USBD_LL_SOF>

0800791a <HAL_PCD_ResetCallback>:
{
 800791a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800791c:	7983      	ldrb	r3, [r0, #6]
{
 800791e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007920:	2b02      	cmp	r3, #2
 8007922:	d001      	beq.n	8007928 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007924:	f7f9 fe9a 	bl	800165c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007928:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800792c:	2101      	movs	r1, #1
 800792e:	f7ff fb7a 	bl	8007026 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007932:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8007936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800793a:	f7ff bb4d 	b.w	8006fd8 <USBD_LL_Reset>
	...

08007940 <HAL_PCD_SuspendCallback>:
{
 8007940:	b510      	push	{r4, lr}
 8007942:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007944:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007948:	f7ff fb70 	bl	800702c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800794c:	7aa3      	ldrb	r3, [r4, #10]
 800794e:	b123      	cbz	r3, 800795a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007950:	4a02      	ldr	r2, [pc, #8]	@ (800795c <HAL_PCD_SuspendCallback+0x1c>)
 8007952:	6913      	ldr	r3, [r2, #16]
 8007954:	f043 0306 	orr.w	r3, r3, #6
 8007958:	6113      	str	r3, [r2, #16]
}
 800795a:	bd10      	pop	{r4, pc}
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007960:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007964:	f7ff bb6b 	b.w	800703e <USBD_LL_Resume>

08007968 <USBD_LL_Init>:
{
 8007968:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800796a:	4b1d      	ldr	r3, [pc, #116]	@ (80079e0 <USBD_LL_Init+0x78>)
{
 800796c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800796e:	481d      	ldr	r0, [pc, #116]	@ (80079e4 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8007970:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007972:	2308      	movs	r3, #8
 8007974:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007976:	2302      	movs	r3, #2
 8007978:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800797a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800797c:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007980:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007984:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007986:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007988:	f7fb fdc6 	bl	8003518 <HAL_PCD_Init>
 800798c:	b108      	cbz	r0, 8007992 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800798e:	f7f9 fe65 	bl	800165c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007992:	2200      	movs	r2, #0
 8007994:	2318      	movs	r3, #24
 8007996:	4611      	mov	r1, r2
 8007998:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800799c:	f7fc fc47 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80079a0:	2358      	movs	r3, #88	@ 0x58
 80079a2:	2200      	movs	r2, #0
 80079a4:	2180      	movs	r1, #128	@ 0x80
 80079a6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80079aa:	f7fc fc40 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80079ae:	23c0      	movs	r3, #192	@ 0xc0
 80079b0:	2200      	movs	r2, #0
 80079b2:	2181      	movs	r1, #129	@ 0x81
 80079b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80079b8:	f7fc fc39 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80079bc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80079c0:	2200      	movs	r2, #0
 80079c2:	2101      	movs	r1, #1
 80079c4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80079c8:	f7fc fc31 	bl	800422e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80079cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079d0:	2200      	movs	r2, #0
 80079d2:	2182      	movs	r1, #130	@ 0x82
 80079d4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80079d8:	f7fc fc29 	bl	800422e <HAL_PCDEx_PMAConfig>
}
 80079dc:	2000      	movs	r0, #0
 80079de:	bd10      	pop	{r4, pc}
 80079e0:	40005c00 	.word	0x40005c00
 80079e4:	20001574 	.word	0x20001574

080079e8 <USBD_LL_Start>:
{
 80079e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80079ea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80079ee:	f7fb fdf6 	bl	80035de <HAL_PCD_Start>
}
 80079f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f6:	f7ff bf47 	b.w	8007888 <USBD_Get_USB_Status>

080079fa <USBD_LL_OpenEP>:
{
 80079fa:	b510      	push	{r4, lr}
 80079fc:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8007a02:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a04:	4623      	mov	r3, r4
 8007a06:	f7fc fb1b 	bl	8004040 <HAL_PCD_EP_Open>
}
 8007a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0e:	f7ff bf3b 	b.w	8007888 <USBD_Get_USB_Status>

08007a12 <USBD_LL_CloseEP>:
{
 8007a12:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a14:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a18:	f7fc fb42 	bl	80040a0 <HAL_PCD_EP_Close>
}
 8007a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a20:	f7ff bf32 	b.w	8007888 <USBD_Get_USB_Status>

08007a24 <USBD_LL_StallEP>:
{
 8007a24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a2a:	f7fc fb98 	bl	800415e <HAL_PCD_EP_SetStall>
}
 8007a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a32:	f7ff bf29 	b.w	8007888 <USBD_Get_USB_Status>

08007a36 <USBD_LL_ClearStallEP>:
{
 8007a36:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a38:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a3c:	f7fc fbc5 	bl	80041ca <HAL_PCD_EP_ClrStall>
}
 8007a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a44:	f7ff bf20 	b.w	8007888 <USBD_Get_USB_Status>

08007a48 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a48:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8007a4a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a4e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a52:	bf1b      	ittet	ne
 8007a54:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8007a58:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a5c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a60:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a62:	bf08      	it	eq
 8007a64:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8007a68:	4770      	bx	lr

08007a6a <USBD_LL_SetUSBAddress>:
{
 8007a6a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a6c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a70:	f7fb fdce 	bl	8003610 <HAL_PCD_SetAddress>
}
 8007a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a78:	f7ff bf06 	b.w	8007888 <USBD_Get_USB_Status>

08007a7c <USBD_LL_Transmit>:
{
 8007a7c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a7e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a82:	f7fc fb54 	bl	800412e <HAL_PCD_EP_Transmit>
}
 8007a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a8a:	f7ff befd 	b.w	8007888 <USBD_Get_USB_Status>

08007a8e <USBD_LL_PrepareReceive>:
{
 8007a8e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a90:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007a94:	f7fc fb2c 	bl	80040f0 <HAL_PCD_EP_Receive>
}
 8007a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a9c:	f7ff bef4 	b.w	8007888 <USBD_Get_USB_Status>

08007aa0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007aa0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007aa4:	f7fc bb3b 	b.w	800411e <HAL_PCD_EP_GetRxCount>

08007aa8 <USBD_static_malloc>:
}
 8007aa8:	4800      	ldr	r0, [pc, #0]	@ (8007aac <USBD_static_malloc+0x4>)
 8007aaa:	4770      	bx	lr
 8007aac:	20001354 	.word	0x20001354

08007ab0 <USBD_static_free>:
}
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_PCDEx_SetConnectionState>:
}
 8007ab2:	4770      	bx	lr

08007ab4 <atoi>:
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	f000 b928 	b.w	8007d0c <strtol>

08007abc <sbrk_aligned>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4e0f      	ldr	r6, [pc, #60]	@ (8007afc <sbrk_aligned+0x40>)
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	6831      	ldr	r1, [r6, #0]
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	b911      	cbnz	r1, 8007ace <sbrk_aligned+0x12>
 8007ac8:	f000 f990 	bl	8007dec <_sbrk_r>
 8007acc:	6030      	str	r0, [r6, #0]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 f98b 	bl	8007dec <_sbrk_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d103      	bne.n	8007ae2 <sbrk_aligned+0x26>
 8007ada:	f04f 34ff 	mov.w	r4, #4294967295
 8007ade:	4620      	mov	r0, r4
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	1cc4      	adds	r4, r0, #3
 8007ae4:	f024 0403 	bic.w	r4, r4, #3
 8007ae8:	42a0      	cmp	r0, r4
 8007aea:	d0f8      	beq.n	8007ade <sbrk_aligned+0x22>
 8007aec:	1a21      	subs	r1, r4, r0
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f97c 	bl	8007dec <_sbrk_r>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d1f2      	bne.n	8007ade <sbrk_aligned+0x22>
 8007af8:	e7ef      	b.n	8007ada <sbrk_aligned+0x1e>
 8007afa:	bf00      	nop
 8007afc:	2000184c 	.word	0x2000184c

08007b00 <_malloc_r>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	1ccd      	adds	r5, r1, #3
 8007b06:	f025 0503 	bic.w	r5, r5, #3
 8007b0a:	3508      	adds	r5, #8
 8007b0c:	2d0c      	cmp	r5, #12
 8007b0e:	bf38      	it	cc
 8007b10:	250c      	movcc	r5, #12
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	4606      	mov	r6, r0
 8007b16:	db01      	blt.n	8007b1c <_malloc_r+0x1c>
 8007b18:	42a9      	cmp	r1, r5
 8007b1a:	d904      	bls.n	8007b26 <_malloc_r+0x26>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	6033      	str	r3, [r6, #0]
 8007b20:	2000      	movs	r0, #0
 8007b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bfc <_malloc_r+0xfc>
 8007b2a:	f000 f869 	bl	8007c00 <__malloc_lock>
 8007b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b32:	461c      	mov	r4, r3
 8007b34:	bb44      	cbnz	r4, 8007b88 <_malloc_r+0x88>
 8007b36:	4629      	mov	r1, r5
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff ffbf 	bl	8007abc <sbrk_aligned>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	4604      	mov	r4, r0
 8007b42:	d158      	bne.n	8007bf6 <_malloc_r+0xf6>
 8007b44:	f8d8 4000 	ldr.w	r4, [r8]
 8007b48:	4627      	mov	r7, r4
 8007b4a:	2f00      	cmp	r7, #0
 8007b4c:	d143      	bne.n	8007bd6 <_malloc_r+0xd6>
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d04b      	beq.n	8007bea <_malloc_r+0xea>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	4639      	mov	r1, r7
 8007b56:	4630      	mov	r0, r6
 8007b58:	eb04 0903 	add.w	r9, r4, r3
 8007b5c:	f000 f946 	bl	8007dec <_sbrk_r>
 8007b60:	4581      	cmp	r9, r0
 8007b62:	d142      	bne.n	8007bea <_malloc_r+0xea>
 8007b64:	6821      	ldr	r1, [r4, #0]
 8007b66:	4630      	mov	r0, r6
 8007b68:	1a6d      	subs	r5, r5, r1
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7ff ffa6 	bl	8007abc <sbrk_aligned>
 8007b70:	3001      	adds	r0, #1
 8007b72:	d03a      	beq.n	8007bea <_malloc_r+0xea>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	442b      	add	r3, r5
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	bb62      	cbnz	r2, 8007bdc <_malloc_r+0xdc>
 8007b82:	f8c8 7000 	str.w	r7, [r8]
 8007b86:	e00f      	b.n	8007ba8 <_malloc_r+0xa8>
 8007b88:	6822      	ldr	r2, [r4, #0]
 8007b8a:	1b52      	subs	r2, r2, r5
 8007b8c:	d420      	bmi.n	8007bd0 <_malloc_r+0xd0>
 8007b8e:	2a0b      	cmp	r2, #11
 8007b90:	d917      	bls.n	8007bc2 <_malloc_r+0xc2>
 8007b92:	1961      	adds	r1, r4, r5
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	6025      	str	r5, [r4, #0]
 8007b98:	bf18      	it	ne
 8007b9a:	6059      	strne	r1, [r3, #4]
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	bf08      	it	eq
 8007ba0:	f8c8 1000 	streq.w	r1, [r8]
 8007ba4:	5162      	str	r2, [r4, r5]
 8007ba6:	604b      	str	r3, [r1, #4]
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 f82f 	bl	8007c0c <__malloc_unlock>
 8007bae:	f104 000b 	add.w	r0, r4, #11
 8007bb2:	1d23      	adds	r3, r4, #4
 8007bb4:	f020 0007 	bic.w	r0, r0, #7
 8007bb8:	1ac2      	subs	r2, r0, r3
 8007bba:	bf1c      	itt	ne
 8007bbc:	1a1b      	subne	r3, r3, r0
 8007bbe:	50a3      	strne	r3, [r4, r2]
 8007bc0:	e7af      	b.n	8007b22 <_malloc_r+0x22>
 8007bc2:	6862      	ldr	r2, [r4, #4]
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	bf0c      	ite	eq
 8007bc8:	f8c8 2000 	streq.w	r2, [r8]
 8007bcc:	605a      	strne	r2, [r3, #4]
 8007bce:	e7eb      	b.n	8007ba8 <_malloc_r+0xa8>
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	6864      	ldr	r4, [r4, #4]
 8007bd4:	e7ae      	b.n	8007b34 <_malloc_r+0x34>
 8007bd6:	463c      	mov	r4, r7
 8007bd8:	687f      	ldr	r7, [r7, #4]
 8007bda:	e7b6      	b.n	8007b4a <_malloc_r+0x4a>
 8007bdc:	461a      	mov	r2, r3
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d1fb      	bne.n	8007bdc <_malloc_r+0xdc>
 8007be4:	2300      	movs	r3, #0
 8007be6:	6053      	str	r3, [r2, #4]
 8007be8:	e7de      	b.n	8007ba8 <_malloc_r+0xa8>
 8007bea:	230c      	movs	r3, #12
 8007bec:	4630      	mov	r0, r6
 8007bee:	6033      	str	r3, [r6, #0]
 8007bf0:	f000 f80c 	bl	8007c0c <__malloc_unlock>
 8007bf4:	e794      	b.n	8007b20 <_malloc_r+0x20>
 8007bf6:	6005      	str	r5, [r0, #0]
 8007bf8:	e7d6      	b.n	8007ba8 <_malloc_r+0xa8>
 8007bfa:	bf00      	nop
 8007bfc:	20001850 	.word	0x20001850

08007c00 <__malloc_lock>:
 8007c00:	4801      	ldr	r0, [pc, #4]	@ (8007c08 <__malloc_lock+0x8>)
 8007c02:	f000 b92d 	b.w	8007e60 <__retarget_lock_acquire_recursive>
 8007c06:	bf00      	nop
 8007c08:	20001990 	.word	0x20001990

08007c0c <__malloc_unlock>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	@ (8007c14 <__malloc_unlock+0x8>)
 8007c0e:	f000 b928 	b.w	8007e62 <__retarget_lock_release_recursive>
 8007c12:	bf00      	nop
 8007c14:	20001990 	.word	0x20001990

08007c18 <_strtol_l.isra.0>:
 8007c18:	2b24      	cmp	r3, #36	@ 0x24
 8007c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1e:	4686      	mov	lr, r0
 8007c20:	4690      	mov	r8, r2
 8007c22:	d801      	bhi.n	8007c28 <_strtol_l.isra.0+0x10>
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d106      	bne.n	8007c36 <_strtol_l.isra.0+0x1e>
 8007c28:	f000 f8f0 	bl	8007e0c <__errno>
 8007c2c:	2316      	movs	r3, #22
 8007c2e:	6003      	str	r3, [r0, #0]
 8007c30:	2000      	movs	r0, #0
 8007c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c36:	460d      	mov	r5, r1
 8007c38:	4833      	ldr	r0, [pc, #204]	@ (8007d08 <_strtol_l.isra.0+0xf0>)
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c40:	5d06      	ldrb	r6, [r0, r4]
 8007c42:	f016 0608 	ands.w	r6, r6, #8
 8007c46:	d1f8      	bne.n	8007c3a <_strtol_l.isra.0+0x22>
 8007c48:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c4a:	d110      	bne.n	8007c6e <_strtol_l.isra.0+0x56>
 8007c4c:	2601      	movs	r6, #1
 8007c4e:	782c      	ldrb	r4, [r5, #0]
 8007c50:	1c95      	adds	r5, r2, #2
 8007c52:	f033 0210 	bics.w	r2, r3, #16
 8007c56:	d115      	bne.n	8007c84 <_strtol_l.isra.0+0x6c>
 8007c58:	2c30      	cmp	r4, #48	@ 0x30
 8007c5a:	d10d      	bne.n	8007c78 <_strtol_l.isra.0+0x60>
 8007c5c:	782a      	ldrb	r2, [r5, #0]
 8007c5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c62:	2a58      	cmp	r2, #88	@ 0x58
 8007c64:	d108      	bne.n	8007c78 <_strtol_l.isra.0+0x60>
 8007c66:	786c      	ldrb	r4, [r5, #1]
 8007c68:	3502      	adds	r5, #2
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	e00a      	b.n	8007c84 <_strtol_l.isra.0+0x6c>
 8007c6e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c70:	bf04      	itt	eq
 8007c72:	782c      	ldrbeq	r4, [r5, #0]
 8007c74:	1c95      	addeq	r5, r2, #2
 8007c76:	e7ec      	b.n	8007c52 <_strtol_l.isra.0+0x3a>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f6      	bne.n	8007c6a <_strtol_l.isra.0+0x52>
 8007c7c:	2c30      	cmp	r4, #48	@ 0x30
 8007c7e:	bf14      	ite	ne
 8007c80:	230a      	movne	r3, #10
 8007c82:	2308      	moveq	r3, #8
 8007c84:	2200      	movs	r2, #0
 8007c86:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c8e:	fbbc f9f3 	udiv	r9, ip, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c9c:	2f09      	cmp	r7, #9
 8007c9e:	d80f      	bhi.n	8007cc0 <_strtol_l.isra.0+0xa8>
 8007ca0:	463c      	mov	r4, r7
 8007ca2:	42a3      	cmp	r3, r4
 8007ca4:	dd1b      	ble.n	8007cde <_strtol_l.isra.0+0xc6>
 8007ca6:	1c57      	adds	r7, r2, #1
 8007ca8:	d007      	beq.n	8007cba <_strtol_l.isra.0+0xa2>
 8007caa:	4581      	cmp	r9, r0
 8007cac:	d314      	bcc.n	8007cd8 <_strtol_l.isra.0+0xc0>
 8007cae:	d101      	bne.n	8007cb4 <_strtol_l.isra.0+0x9c>
 8007cb0:	45a2      	cmp	sl, r4
 8007cb2:	db11      	blt.n	8007cd8 <_strtol_l.isra.0+0xc0>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fb00 4003 	mla	r0, r0, r3, r4
 8007cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cbe:	e7eb      	b.n	8007c98 <_strtol_l.isra.0+0x80>
 8007cc0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007cc4:	2f19      	cmp	r7, #25
 8007cc6:	d801      	bhi.n	8007ccc <_strtol_l.isra.0+0xb4>
 8007cc8:	3c37      	subs	r4, #55	@ 0x37
 8007cca:	e7ea      	b.n	8007ca2 <_strtol_l.isra.0+0x8a>
 8007ccc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007cd0:	2f19      	cmp	r7, #25
 8007cd2:	d804      	bhi.n	8007cde <_strtol_l.isra.0+0xc6>
 8007cd4:	3c57      	subs	r4, #87	@ 0x57
 8007cd6:	e7e4      	b.n	8007ca2 <_strtol_l.isra.0+0x8a>
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	e7ed      	b.n	8007cba <_strtol_l.isra.0+0xa2>
 8007cde:	1c53      	adds	r3, r2, #1
 8007ce0:	d108      	bne.n	8007cf4 <_strtol_l.isra.0+0xdc>
 8007ce2:	2322      	movs	r3, #34	@ 0x22
 8007ce4:	4660      	mov	r0, ip
 8007ce6:	f8ce 3000 	str.w	r3, [lr]
 8007cea:	f1b8 0f00 	cmp.w	r8, #0
 8007cee:	d0a0      	beq.n	8007c32 <_strtol_l.isra.0+0x1a>
 8007cf0:	1e69      	subs	r1, r5, #1
 8007cf2:	e006      	b.n	8007d02 <_strtol_l.isra.0+0xea>
 8007cf4:	b106      	cbz	r6, 8007cf8 <_strtol_l.isra.0+0xe0>
 8007cf6:	4240      	negs	r0, r0
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	d099      	beq.n	8007c32 <_strtol_l.isra.0+0x1a>
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	d1f6      	bne.n	8007cf0 <_strtol_l.isra.0+0xd8>
 8007d02:	f8c8 1000 	str.w	r1, [r8]
 8007d06:	e794      	b.n	8007c32 <_strtol_l.isra.0+0x1a>
 8007d08:	0800aa03 	.word	0x0800aa03

08007d0c <strtol>:
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	460a      	mov	r2, r1
 8007d10:	4601      	mov	r1, r0
 8007d12:	4802      	ldr	r0, [pc, #8]	@ (8007d1c <strtol+0x10>)
 8007d14:	6800      	ldr	r0, [r0, #0]
 8007d16:	f7ff bf7f 	b.w	8007c18 <_strtol_l.isra.0>
 8007d1a:	bf00      	nop
 8007d1c:	200001c4 	.word	0x200001c4

08007d20 <sniprintf>:
 8007d20:	b40c      	push	{r2, r3}
 8007d22:	b530      	push	{r4, r5, lr}
 8007d24:	4b18      	ldr	r3, [pc, #96]	@ (8007d88 <sniprintf+0x68>)
 8007d26:	1e0c      	subs	r4, r1, #0
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	b09d      	sub	sp, #116	@ 0x74
 8007d2c:	da08      	bge.n	8007d40 <sniprintf+0x20>
 8007d2e:	238b      	movs	r3, #139	@ 0x8b
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	602b      	str	r3, [r5, #0]
 8007d36:	b01d      	add	sp, #116	@ 0x74
 8007d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d3c:	b002      	add	sp, #8
 8007d3e:	4770      	bx	lr
 8007d40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d4e:	bf0c      	ite	eq
 8007d50:	4623      	moveq	r3, r4
 8007d52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	9307      	str	r3, [sp, #28]
 8007d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d5e:	9002      	str	r0, [sp, #8]
 8007d60:	9006      	str	r0, [sp, #24]
 8007d62:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d66:	4628      	mov	r0, r5
 8007d68:	ab21      	add	r3, sp, #132	@ 0x84
 8007d6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d6c:	a902      	add	r1, sp, #8
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f000 f92a 	bl	8007fc8 <_svfiprintf_r>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	bfbc      	itt	lt
 8007d78:	238b      	movlt	r3, #139	@ 0x8b
 8007d7a:	602b      	strlt	r3, [r5, #0]
 8007d7c:	2c00      	cmp	r4, #0
 8007d7e:	d0da      	beq.n	8007d36 <sniprintf+0x16>
 8007d80:	2200      	movs	r2, #0
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e7d6      	b.n	8007d36 <sniprintf+0x16>
 8007d88:	200001c4 	.word	0x200001c4

08007d8c <memset>:
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4402      	add	r2, r0
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d100      	bne.n	8007d96 <memset+0xa>
 8007d94:	4770      	bx	lr
 8007d96:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9a:	e7f9      	b.n	8007d90 <memset+0x4>

08007d9c <strncmp>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	b16a      	cbz	r2, 8007dbc <strncmp+0x20>
 8007da0:	3901      	subs	r1, #1
 8007da2:	1884      	adds	r4, r0, r2
 8007da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d103      	bne.n	8007db8 <strncmp+0x1c>
 8007db0:	42a0      	cmp	r0, r4
 8007db2:	d001      	beq.n	8007db8 <strncmp+0x1c>
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	d1f5      	bne.n	8007da4 <strncmp+0x8>
 8007db8:	1ad0      	subs	r0, r2, r3
 8007dba:	bd10      	pop	{r4, pc}
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	e7fc      	b.n	8007dba <strncmp+0x1e>

08007dc0 <strstr>:
 8007dc0:	780a      	ldrb	r2, [r1, #0]
 8007dc2:	b570      	push	{r4, r5, r6, lr}
 8007dc4:	b96a      	cbnz	r2, 8007de2 <strstr+0x22>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d109      	bne.n	8007de0 <strstr+0x20>
 8007dcc:	460c      	mov	r4, r1
 8007dce:	4605      	mov	r5, r0
 8007dd0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f6      	beq.n	8007dc6 <strstr+0x6>
 8007dd8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ddc:	429e      	cmp	r6, r3
 8007dde:	d0f7      	beq.n	8007dd0 <strstr+0x10>
 8007de0:	3001      	adds	r0, #1
 8007de2:	7803      	ldrb	r3, [r0, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ef      	bne.n	8007dc8 <strstr+0x8>
 8007de8:	4618      	mov	r0, r3
 8007dea:	e7ec      	b.n	8007dc6 <strstr+0x6>

08007dec <_sbrk_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	2300      	movs	r3, #0
 8007df0:	4d05      	ldr	r5, [pc, #20]	@ (8007e08 <_sbrk_r+0x1c>)
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	f7f9 fdf2 	bl	80019e0 <_sbrk>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_sbrk_r+0x1a>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_sbrk_r+0x1a>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	2000198c 	.word	0x2000198c

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	@ (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200001c4 	.word	0x200001c4

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	4d0c      	ldr	r5, [pc, #48]	@ (8007e50 <__libc_init_array+0x38>)
 8007e1e:	4c0d      	ldr	r4, [pc, #52]	@ (8007e54 <__libc_init_array+0x3c>)
 8007e20:	1b64      	subs	r4, r4, r5
 8007e22:	10a4      	asrs	r4, r4, #2
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	f001 fac2 	bl	80093b0 <_init>
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	4d0a      	ldr	r5, [pc, #40]	@ (8007e58 <__libc_init_array+0x40>)
 8007e30:	4c0a      	ldr	r4, [pc, #40]	@ (8007e5c <__libc_init_array+0x44>)
 8007e32:	1b64      	subs	r4, r4, r5
 8007e34:	10a4      	asrs	r4, r4, #2
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	0800ab50 	.word	0x0800ab50
 8007e54:	0800ab50 	.word	0x0800ab50
 8007e58:	0800ab50 	.word	0x0800ab50
 8007e5c:	0800ab54 	.word	0x0800ab54

08007e60 <__retarget_lock_acquire_recursive>:
 8007e60:	4770      	bx	lr

08007e62 <__retarget_lock_release_recursive>:
 8007e62:	4770      	bx	lr

08007e64 <memcpy>:
 8007e64:	440a      	add	r2, r1
 8007e66:	4291      	cmp	r1, r2
 8007e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	4770      	bx	lr
 8007e70:	b510      	push	{r4, lr}
 8007e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e76:	4291      	cmp	r1, r2
 8007e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e7c:	d1f9      	bne.n	8007e72 <memcpy+0xe>
 8007e7e:	bd10      	pop	{r4, pc}

08007e80 <_free_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4605      	mov	r5, r0
 8007e84:	2900      	cmp	r1, #0
 8007e86:	d040      	beq.n	8007f0a <_free_r+0x8a>
 8007e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e8c:	1f0c      	subs	r4, r1, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfb8      	it	lt
 8007e92:	18e4      	addlt	r4, r4, r3
 8007e94:	f7ff feb4 	bl	8007c00 <__malloc_lock>
 8007e98:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <_free_r+0x8c>)
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	b933      	cbnz	r3, 8007eac <_free_r+0x2c>
 8007e9e:	6063      	str	r3, [r4, #4]
 8007ea0:	6014      	str	r4, [r2, #0]
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea8:	f7ff beb0 	b.w	8007c0c <__malloc_unlock>
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	d908      	bls.n	8007ec2 <_free_r+0x42>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	1821      	adds	r1, r4, r0
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf01      	itttt	eq
 8007eb8:	6819      	ldreq	r1, [r3, #0]
 8007eba:	685b      	ldreq	r3, [r3, #4]
 8007ebc:	1809      	addeq	r1, r1, r0
 8007ebe:	6021      	streq	r1, [r4, #0]
 8007ec0:	e7ed      	b.n	8007e9e <_free_r+0x1e>
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	b10b      	cbz	r3, 8007ecc <_free_r+0x4c>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d9fa      	bls.n	8007ec2 <_free_r+0x42>
 8007ecc:	6811      	ldr	r1, [r2, #0]
 8007ece:	1850      	adds	r0, r2, r1
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d10b      	bne.n	8007eec <_free_r+0x6c>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	4401      	add	r1, r0
 8007ed8:	1850      	adds	r0, r2, r1
 8007eda:	4283      	cmp	r3, r0
 8007edc:	6011      	str	r1, [r2, #0]
 8007ede:	d1e0      	bne.n	8007ea2 <_free_r+0x22>
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	4408      	add	r0, r1
 8007ee6:	6010      	str	r0, [r2, #0]
 8007ee8:	6053      	str	r3, [r2, #4]
 8007eea:	e7da      	b.n	8007ea2 <_free_r+0x22>
 8007eec:	d902      	bls.n	8007ef4 <_free_r+0x74>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	e7d6      	b.n	8007ea2 <_free_r+0x22>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	1821      	adds	r1, r4, r0
 8007ef8:	428b      	cmp	r3, r1
 8007efa:	bf01      	itttt	eq
 8007efc:	6819      	ldreq	r1, [r3, #0]
 8007efe:	685b      	ldreq	r3, [r3, #4]
 8007f00:	1809      	addeq	r1, r1, r0
 8007f02:	6021      	streq	r1, [r4, #0]
 8007f04:	6063      	str	r3, [r4, #4]
 8007f06:	6054      	str	r4, [r2, #4]
 8007f08:	e7cb      	b.n	8007ea2 <_free_r+0x22>
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	20001850 	.word	0x20001850

08007f10 <__ssputs_r>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	461f      	mov	r7, r3
 8007f16:	688e      	ldr	r6, [r1, #8]
 8007f18:	4682      	mov	sl, r0
 8007f1a:	42be      	cmp	r6, r7
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	4690      	mov	r8, r2
 8007f20:	680b      	ldr	r3, [r1, #0]
 8007f22:	d82d      	bhi.n	8007f80 <__ssputs_r+0x70>
 8007f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f2c:	d026      	beq.n	8007f7c <__ssputs_r+0x6c>
 8007f2e:	6965      	ldr	r5, [r4, #20]
 8007f30:	6909      	ldr	r1, [r1, #16]
 8007f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f36:	eba3 0901 	sub.w	r9, r3, r1
 8007f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f3e:	1c7b      	adds	r3, r7, #1
 8007f40:	444b      	add	r3, r9
 8007f42:	106d      	asrs	r5, r5, #1
 8007f44:	429d      	cmp	r5, r3
 8007f46:	bf38      	it	cc
 8007f48:	461d      	movcc	r5, r3
 8007f4a:	0553      	lsls	r3, r2, #21
 8007f4c:	d527      	bpl.n	8007f9e <__ssputs_r+0x8e>
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7ff fdd6 	bl	8007b00 <_malloc_r>
 8007f54:	4606      	mov	r6, r0
 8007f56:	b360      	cbz	r0, 8007fb2 <__ssputs_r+0xa2>
 8007f58:	464a      	mov	r2, r9
 8007f5a:	6921      	ldr	r1, [r4, #16]
 8007f5c:	f7ff ff82 	bl	8007e64 <memcpy>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	6126      	str	r6, [r4, #16]
 8007f6e:	444e      	add	r6, r9
 8007f70:	6026      	str	r6, [r4, #0]
 8007f72:	463e      	mov	r6, r7
 8007f74:	6165      	str	r5, [r4, #20]
 8007f76:	eba5 0509 	sub.w	r5, r5, r9
 8007f7a:	60a5      	str	r5, [r4, #8]
 8007f7c:	42be      	cmp	r6, r7
 8007f7e:	d900      	bls.n	8007f82 <__ssputs_r+0x72>
 8007f80:	463e      	mov	r6, r7
 8007f82:	4632      	mov	r2, r6
 8007f84:	4641      	mov	r1, r8
 8007f86:	6820      	ldr	r0, [r4, #0]
 8007f88:	f000 faaa 	bl	80084e0 <memmove>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	1b9b      	subs	r3, r3, r6
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	4433      	add	r3, r6
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	f000 fac6 	bl	8008530 <_realloc_r>
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d1e0      	bne.n	8007f6c <__ssputs_r+0x5c>
 8007faa:	4650      	mov	r0, sl
 8007fac:	6921      	ldr	r1, [r4, #16]
 8007fae:	f7ff ff67 	bl	8007e80 <_free_r>
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	f8ca 3000 	str.w	r3, [sl]
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	e7e9      	b.n	8007f9a <__ssputs_r+0x8a>
	...

08007fc8 <_svfiprintf_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	4698      	mov	r8, r3
 8007fce:	898b      	ldrh	r3, [r1, #12]
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	4614      	mov	r4, r2
 8007fd8:	b09d      	sub	sp, #116	@ 0x74
 8007fda:	d510      	bpl.n	8007ffe <_svfiprintf_r+0x36>
 8007fdc:	690b      	ldr	r3, [r1, #16]
 8007fde:	b973      	cbnz	r3, 8007ffe <_svfiprintf_r+0x36>
 8007fe0:	2140      	movs	r1, #64	@ 0x40
 8007fe2:	f7ff fd8d 	bl	8007b00 <_malloc_r>
 8007fe6:	6028      	str	r0, [r5, #0]
 8007fe8:	6128      	str	r0, [r5, #16]
 8007fea:	b930      	cbnz	r0, 8007ffa <_svfiprintf_r+0x32>
 8007fec:	230c      	movs	r3, #12
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	b01d      	add	sp, #116	@ 0x74
 8007ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffa:	2340      	movs	r3, #64	@ 0x40
 8007ffc:	616b      	str	r3, [r5, #20]
 8007ffe:	2300      	movs	r3, #0
 8008000:	9309      	str	r3, [sp, #36]	@ 0x24
 8008002:	2320      	movs	r3, #32
 8008004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008008:	2330      	movs	r3, #48	@ 0x30
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008012:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80081ac <_svfiprintf_r+0x1e4>
 8008016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800801a:	4623      	mov	r3, r4
 800801c:	469a      	mov	sl, r3
 800801e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008022:	b10a      	cbz	r2, 8008028 <_svfiprintf_r+0x60>
 8008024:	2a25      	cmp	r2, #37	@ 0x25
 8008026:	d1f9      	bne.n	800801c <_svfiprintf_r+0x54>
 8008028:	ebba 0b04 	subs.w	fp, sl, r4
 800802c:	d00b      	beq.n	8008046 <_svfiprintf_r+0x7e>
 800802e:	465b      	mov	r3, fp
 8008030:	4622      	mov	r2, r4
 8008032:	4629      	mov	r1, r5
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ff6b 	bl	8007f10 <__ssputs_r>
 800803a:	3001      	adds	r0, #1
 800803c:	f000 80a7 	beq.w	800818e <_svfiprintf_r+0x1c6>
 8008040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008042:	445a      	add	r2, fp
 8008044:	9209      	str	r2, [sp, #36]	@ 0x24
 8008046:	f89a 3000 	ldrb.w	r3, [sl]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 809f 	beq.w	800818e <_svfiprintf_r+0x1c6>
 8008050:	2300      	movs	r3, #0
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800805a:	f10a 0a01 	add.w	sl, sl, #1
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	9307      	str	r3, [sp, #28]
 8008062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008066:	931a      	str	r3, [sp, #104]	@ 0x68
 8008068:	4654      	mov	r4, sl
 800806a:	2205      	movs	r2, #5
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	484e      	ldr	r0, [pc, #312]	@ (80081ac <_svfiprintf_r+0x1e4>)
 8008072:	f000 fa4f 	bl	8008514 <memchr>
 8008076:	9a04      	ldr	r2, [sp, #16]
 8008078:	b9d8      	cbnz	r0, 80080b2 <_svfiprintf_r+0xea>
 800807a:	06d0      	lsls	r0, r2, #27
 800807c:	bf44      	itt	mi
 800807e:	2320      	movmi	r3, #32
 8008080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008084:	0711      	lsls	r1, r2, #28
 8008086:	bf44      	itt	mi
 8008088:	232b      	movmi	r3, #43	@ 0x2b
 800808a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800808e:	f89a 3000 	ldrb.w	r3, [sl]
 8008092:	2b2a      	cmp	r3, #42	@ 0x2a
 8008094:	d015      	beq.n	80080c2 <_svfiprintf_r+0xfa>
 8008096:	4654      	mov	r4, sl
 8008098:	2000      	movs	r0, #0
 800809a:	f04f 0c0a 	mov.w	ip, #10
 800809e:	9a07      	ldr	r2, [sp, #28]
 80080a0:	4621      	mov	r1, r4
 80080a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a6:	3b30      	subs	r3, #48	@ 0x30
 80080a8:	2b09      	cmp	r3, #9
 80080aa:	d94b      	bls.n	8008144 <_svfiprintf_r+0x17c>
 80080ac:	b1b0      	cbz	r0, 80080dc <_svfiprintf_r+0x114>
 80080ae:	9207      	str	r2, [sp, #28]
 80080b0:	e014      	b.n	80080dc <_svfiprintf_r+0x114>
 80080b2:	eba0 0308 	sub.w	r3, r0, r8
 80080b6:	fa09 f303 	lsl.w	r3, r9, r3
 80080ba:	4313      	orrs	r3, r2
 80080bc:	46a2      	mov	sl, r4
 80080be:	9304      	str	r3, [sp, #16]
 80080c0:	e7d2      	b.n	8008068 <_svfiprintf_r+0xa0>
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	1d19      	adds	r1, r3, #4
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	9103      	str	r1, [sp, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bfbb      	ittet	lt
 80080ce:	425b      	neglt	r3, r3
 80080d0:	f042 0202 	orrlt.w	r2, r2, #2
 80080d4:	9307      	strge	r3, [sp, #28]
 80080d6:	9307      	strlt	r3, [sp, #28]
 80080d8:	bfb8      	it	lt
 80080da:	9204      	strlt	r2, [sp, #16]
 80080dc:	7823      	ldrb	r3, [r4, #0]
 80080de:	2b2e      	cmp	r3, #46	@ 0x2e
 80080e0:	d10a      	bne.n	80080f8 <_svfiprintf_r+0x130>
 80080e2:	7863      	ldrb	r3, [r4, #1]
 80080e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e6:	d132      	bne.n	800814e <_svfiprintf_r+0x186>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	3402      	adds	r4, #2
 80080ec:	1d1a      	adds	r2, r3, #4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	9203      	str	r2, [sp, #12]
 80080f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80081b0 <_svfiprintf_r+0x1e8>
 80080fc:	2203      	movs	r2, #3
 80080fe:	4650      	mov	r0, sl
 8008100:	7821      	ldrb	r1, [r4, #0]
 8008102:	f000 fa07 	bl	8008514 <memchr>
 8008106:	b138      	cbz	r0, 8008118 <_svfiprintf_r+0x150>
 8008108:	2240      	movs	r2, #64	@ 0x40
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	eba0 000a 	sub.w	r0, r0, sl
 8008110:	4082      	lsls	r2, r0
 8008112:	4313      	orrs	r3, r2
 8008114:	3401      	adds	r4, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811c:	2206      	movs	r2, #6
 800811e:	4825      	ldr	r0, [pc, #148]	@ (80081b4 <_svfiprintf_r+0x1ec>)
 8008120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008124:	f000 f9f6 	bl	8008514 <memchr>
 8008128:	2800      	cmp	r0, #0
 800812a:	d036      	beq.n	800819a <_svfiprintf_r+0x1d2>
 800812c:	4b22      	ldr	r3, [pc, #136]	@ (80081b8 <_svfiprintf_r+0x1f0>)
 800812e:	bb1b      	cbnz	r3, 8008178 <_svfiprintf_r+0x1b0>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	3307      	adds	r3, #7
 8008134:	f023 0307 	bic.w	r3, r3, #7
 8008138:	3308      	adds	r3, #8
 800813a:	9303      	str	r3, [sp, #12]
 800813c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813e:	4433      	add	r3, r6
 8008140:	9309      	str	r3, [sp, #36]	@ 0x24
 8008142:	e76a      	b.n	800801a <_svfiprintf_r+0x52>
 8008144:	460c      	mov	r4, r1
 8008146:	2001      	movs	r0, #1
 8008148:	fb0c 3202 	mla	r2, ip, r2, r3
 800814c:	e7a8      	b.n	80080a0 <_svfiprintf_r+0xd8>
 800814e:	2300      	movs	r3, #0
 8008150:	f04f 0c0a 	mov.w	ip, #10
 8008154:	4619      	mov	r1, r3
 8008156:	3401      	adds	r4, #1
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	4620      	mov	r0, r4
 800815c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008160:	3a30      	subs	r2, #48	@ 0x30
 8008162:	2a09      	cmp	r2, #9
 8008164:	d903      	bls.n	800816e <_svfiprintf_r+0x1a6>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0c6      	beq.n	80080f8 <_svfiprintf_r+0x130>
 800816a:	9105      	str	r1, [sp, #20]
 800816c:	e7c4      	b.n	80080f8 <_svfiprintf_r+0x130>
 800816e:	4604      	mov	r4, r0
 8008170:	2301      	movs	r3, #1
 8008172:	fb0c 2101 	mla	r1, ip, r1, r2
 8008176:	e7f0      	b.n	800815a <_svfiprintf_r+0x192>
 8008178:	ab03      	add	r3, sp, #12
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	462a      	mov	r2, r5
 800817e:	4638      	mov	r0, r7
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <_svfiprintf_r+0x1f4>)
 8008182:	a904      	add	r1, sp, #16
 8008184:	f3af 8000 	nop.w
 8008188:	1c42      	adds	r2, r0, #1
 800818a:	4606      	mov	r6, r0
 800818c:	d1d6      	bne.n	800813c <_svfiprintf_r+0x174>
 800818e:	89ab      	ldrh	r3, [r5, #12]
 8008190:	065b      	lsls	r3, r3, #25
 8008192:	f53f af2d 	bmi.w	8007ff0 <_svfiprintf_r+0x28>
 8008196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008198:	e72c      	b.n	8007ff4 <_svfiprintf_r+0x2c>
 800819a:	ab03      	add	r3, sp, #12
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	462a      	mov	r2, r5
 80081a0:	4638      	mov	r0, r7
 80081a2:	4b06      	ldr	r3, [pc, #24]	@ (80081bc <_svfiprintf_r+0x1f4>)
 80081a4:	a904      	add	r1, sp, #16
 80081a6:	f000 f87d 	bl	80082a4 <_printf_i>
 80081aa:	e7ed      	b.n	8008188 <_svfiprintf_r+0x1c0>
 80081ac:	080094c5 	.word	0x080094c5
 80081b0:	080094cb 	.word	0x080094cb
 80081b4:	080094cf 	.word	0x080094cf
 80081b8:	00000000 	.word	0x00000000
 80081bc:	08007f11 	.word	0x08007f11

080081c0 <_printf_common>:
 80081c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c4:	4616      	mov	r6, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	688a      	ldr	r2, [r1, #8]
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4607      	mov	r7, r0
 80081ce:	4293      	cmp	r3, r2
 80081d0:	bfb8      	it	lt
 80081d2:	4613      	movlt	r3, r2
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081da:	460c      	mov	r4, r1
 80081dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e0:	b10a      	cbz	r2, 80081e6 <_printf_common+0x26>
 80081e2:	3301      	adds	r3, #1
 80081e4:	6033      	str	r3, [r6, #0]
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	0699      	lsls	r1, r3, #26
 80081ea:	bf42      	ittt	mi
 80081ec:	6833      	ldrmi	r3, [r6, #0]
 80081ee:	3302      	addmi	r3, #2
 80081f0:	6033      	strmi	r3, [r6, #0]
 80081f2:	6825      	ldr	r5, [r4, #0]
 80081f4:	f015 0506 	ands.w	r5, r5, #6
 80081f8:	d106      	bne.n	8008208 <_printf_common+0x48>
 80081fa:	f104 0a19 	add.w	sl, r4, #25
 80081fe:	68e3      	ldr	r3, [r4, #12]
 8008200:	6832      	ldr	r2, [r6, #0]
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	42ab      	cmp	r3, r5
 8008206:	dc2b      	bgt.n	8008260 <_printf_common+0xa0>
 8008208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	3b00      	subs	r3, #0
 8008210:	bf18      	it	ne
 8008212:	2301      	movne	r3, #1
 8008214:	0692      	lsls	r2, r2, #26
 8008216:	d430      	bmi.n	800827a <_printf_common+0xba>
 8008218:	4641      	mov	r1, r8
 800821a:	4638      	mov	r0, r7
 800821c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008220:	47c8      	blx	r9
 8008222:	3001      	adds	r0, #1
 8008224:	d023      	beq.n	800826e <_printf_common+0xae>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	6922      	ldr	r2, [r4, #16]
 800822a:	f003 0306 	and.w	r3, r3, #6
 800822e:	2b04      	cmp	r3, #4
 8008230:	bf14      	ite	ne
 8008232:	2500      	movne	r5, #0
 8008234:	6833      	ldreq	r3, [r6, #0]
 8008236:	f04f 0600 	mov.w	r6, #0
 800823a:	bf08      	it	eq
 800823c:	68e5      	ldreq	r5, [r4, #12]
 800823e:	f104 041a 	add.w	r4, r4, #26
 8008242:	bf08      	it	eq
 8008244:	1aed      	subeq	r5, r5, r3
 8008246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800824a:	bf08      	it	eq
 800824c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008250:	4293      	cmp	r3, r2
 8008252:	bfc4      	itt	gt
 8008254:	1a9b      	subgt	r3, r3, r2
 8008256:	18ed      	addgt	r5, r5, r3
 8008258:	42b5      	cmp	r5, r6
 800825a:	d11a      	bne.n	8008292 <_printf_common+0xd2>
 800825c:	2000      	movs	r0, #0
 800825e:	e008      	b.n	8008272 <_printf_common+0xb2>
 8008260:	2301      	movs	r3, #1
 8008262:	4652      	mov	r2, sl
 8008264:	4641      	mov	r1, r8
 8008266:	4638      	mov	r0, r7
 8008268:	47c8      	blx	r9
 800826a:	3001      	adds	r0, #1
 800826c:	d103      	bne.n	8008276 <_printf_common+0xb6>
 800826e:	f04f 30ff 	mov.w	r0, #4294967295
 8008272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008276:	3501      	adds	r5, #1
 8008278:	e7c1      	b.n	80081fe <_printf_common+0x3e>
 800827a:	2030      	movs	r0, #48	@ 0x30
 800827c:	18e1      	adds	r1, r4, r3
 800827e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008288:	4422      	add	r2, r4
 800828a:	3302      	adds	r3, #2
 800828c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008290:	e7c2      	b.n	8008218 <_printf_common+0x58>
 8008292:	2301      	movs	r3, #1
 8008294:	4622      	mov	r2, r4
 8008296:	4641      	mov	r1, r8
 8008298:	4638      	mov	r0, r7
 800829a:	47c8      	blx	r9
 800829c:	3001      	adds	r0, #1
 800829e:	d0e6      	beq.n	800826e <_printf_common+0xae>
 80082a0:	3601      	adds	r6, #1
 80082a2:	e7d9      	b.n	8008258 <_printf_common+0x98>

080082a4 <_printf_i>:
 80082a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	7e0f      	ldrb	r7, [r1, #24]
 80082aa:	4691      	mov	r9, r2
 80082ac:	2f78      	cmp	r7, #120	@ 0x78
 80082ae:	4680      	mov	r8, r0
 80082b0:	460c      	mov	r4, r1
 80082b2:	469a      	mov	sl, r3
 80082b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ba:	d807      	bhi.n	80082cc <_printf_i+0x28>
 80082bc:	2f62      	cmp	r7, #98	@ 0x62
 80082be:	d80a      	bhi.n	80082d6 <_printf_i+0x32>
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	f000 80d1 	beq.w	8008468 <_printf_i+0x1c4>
 80082c6:	2f58      	cmp	r7, #88	@ 0x58
 80082c8:	f000 80b8 	beq.w	800843c <_printf_i+0x198>
 80082cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d4:	e03a      	b.n	800834c <_printf_i+0xa8>
 80082d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082da:	2b15      	cmp	r3, #21
 80082dc:	d8f6      	bhi.n	80082cc <_printf_i+0x28>
 80082de:	a101      	add	r1, pc, #4	@ (adr r1, 80082e4 <_printf_i+0x40>)
 80082e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e4:	0800833d 	.word	0x0800833d
 80082e8:	08008351 	.word	0x08008351
 80082ec:	080082cd 	.word	0x080082cd
 80082f0:	080082cd 	.word	0x080082cd
 80082f4:	080082cd 	.word	0x080082cd
 80082f8:	080082cd 	.word	0x080082cd
 80082fc:	08008351 	.word	0x08008351
 8008300:	080082cd 	.word	0x080082cd
 8008304:	080082cd 	.word	0x080082cd
 8008308:	080082cd 	.word	0x080082cd
 800830c:	080082cd 	.word	0x080082cd
 8008310:	0800844f 	.word	0x0800844f
 8008314:	0800837b 	.word	0x0800837b
 8008318:	08008409 	.word	0x08008409
 800831c:	080082cd 	.word	0x080082cd
 8008320:	080082cd 	.word	0x080082cd
 8008324:	08008471 	.word	0x08008471
 8008328:	080082cd 	.word	0x080082cd
 800832c:	0800837b 	.word	0x0800837b
 8008330:	080082cd 	.word	0x080082cd
 8008334:	080082cd 	.word	0x080082cd
 8008338:	08008411 	.word	0x08008411
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6032      	str	r2, [r6, #0]
 8008344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800834c:	2301      	movs	r3, #1
 800834e:	e09c      	b.n	800848a <_printf_i+0x1e6>
 8008350:	6833      	ldr	r3, [r6, #0]
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	6031      	str	r1, [r6, #0]
 8008358:	0606      	lsls	r6, r0, #24
 800835a:	d501      	bpl.n	8008360 <_printf_i+0xbc>
 800835c:	681d      	ldr	r5, [r3, #0]
 800835e:	e003      	b.n	8008368 <_printf_i+0xc4>
 8008360:	0645      	lsls	r5, r0, #25
 8008362:	d5fb      	bpl.n	800835c <_printf_i+0xb8>
 8008364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008368:	2d00      	cmp	r5, #0
 800836a:	da03      	bge.n	8008374 <_printf_i+0xd0>
 800836c:	232d      	movs	r3, #45	@ 0x2d
 800836e:	426d      	negs	r5, r5
 8008370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008374:	230a      	movs	r3, #10
 8008376:	4858      	ldr	r0, [pc, #352]	@ (80084d8 <_printf_i+0x234>)
 8008378:	e011      	b.n	800839e <_printf_i+0xfa>
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	0608      	lsls	r0, r1, #24
 8008380:	f853 5b04 	ldr.w	r5, [r3], #4
 8008384:	d402      	bmi.n	800838c <_printf_i+0xe8>
 8008386:	0649      	lsls	r1, r1, #25
 8008388:	bf48      	it	mi
 800838a:	b2ad      	uxthmi	r5, r5
 800838c:	2f6f      	cmp	r7, #111	@ 0x6f
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	bf14      	ite	ne
 8008392:	230a      	movne	r3, #10
 8008394:	2308      	moveq	r3, #8
 8008396:	4850      	ldr	r0, [pc, #320]	@ (80084d8 <_printf_i+0x234>)
 8008398:	2100      	movs	r1, #0
 800839a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800839e:	6866      	ldr	r6, [r4, #4]
 80083a0:	2e00      	cmp	r6, #0
 80083a2:	60a6      	str	r6, [r4, #8]
 80083a4:	db05      	blt.n	80083b2 <_printf_i+0x10e>
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	432e      	orrs	r6, r5
 80083aa:	f021 0104 	bic.w	r1, r1, #4
 80083ae:	6021      	str	r1, [r4, #0]
 80083b0:	d04b      	beq.n	800844a <_printf_i+0x1a6>
 80083b2:	4616      	mov	r6, r2
 80083b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80083b8:	fb03 5711 	mls	r7, r3, r1, r5
 80083bc:	5dc7      	ldrb	r7, [r0, r7]
 80083be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083c2:	462f      	mov	r7, r5
 80083c4:	42bb      	cmp	r3, r7
 80083c6:	460d      	mov	r5, r1
 80083c8:	d9f4      	bls.n	80083b4 <_printf_i+0x110>
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d10b      	bne.n	80083e6 <_printf_i+0x142>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	07df      	lsls	r7, r3, #31
 80083d2:	d508      	bpl.n	80083e6 <_printf_i+0x142>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	6861      	ldr	r1, [r4, #4]
 80083d8:	4299      	cmp	r1, r3
 80083da:	bfde      	ittt	le
 80083dc:	2330      	movle	r3, #48	@ 0x30
 80083de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083e6:	1b92      	subs	r2, r2, r6
 80083e8:	6122      	str	r2, [r4, #16]
 80083ea:	464b      	mov	r3, r9
 80083ec:	4621      	mov	r1, r4
 80083ee:	4640      	mov	r0, r8
 80083f0:	f8cd a000 	str.w	sl, [sp]
 80083f4:	aa03      	add	r2, sp, #12
 80083f6:	f7ff fee3 	bl	80081c0 <_printf_common>
 80083fa:	3001      	adds	r0, #1
 80083fc:	d14a      	bne.n	8008494 <_printf_i+0x1f0>
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	b004      	add	sp, #16
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	f043 0320 	orr.w	r3, r3, #32
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	2778      	movs	r7, #120	@ 0x78
 8008412:	4832      	ldr	r0, [pc, #200]	@ (80084dc <_printf_i+0x238>)
 8008414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	6831      	ldr	r1, [r6, #0]
 800841c:	061f      	lsls	r7, r3, #24
 800841e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008422:	d402      	bmi.n	800842a <_printf_i+0x186>
 8008424:	065f      	lsls	r7, r3, #25
 8008426:	bf48      	it	mi
 8008428:	b2ad      	uxthmi	r5, r5
 800842a:	6031      	str	r1, [r6, #0]
 800842c:	07d9      	lsls	r1, r3, #31
 800842e:	bf44      	itt	mi
 8008430:	f043 0320 	orrmi.w	r3, r3, #32
 8008434:	6023      	strmi	r3, [r4, #0]
 8008436:	b11d      	cbz	r5, 8008440 <_printf_i+0x19c>
 8008438:	2310      	movs	r3, #16
 800843a:	e7ad      	b.n	8008398 <_printf_i+0xf4>
 800843c:	4826      	ldr	r0, [pc, #152]	@ (80084d8 <_printf_i+0x234>)
 800843e:	e7e9      	b.n	8008414 <_printf_i+0x170>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	f023 0320 	bic.w	r3, r3, #32
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	e7f6      	b.n	8008438 <_printf_i+0x194>
 800844a:	4616      	mov	r6, r2
 800844c:	e7bd      	b.n	80083ca <_printf_i+0x126>
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	1d18      	adds	r0, r3, #4
 8008454:	6961      	ldr	r1, [r4, #20]
 8008456:	6030      	str	r0, [r6, #0]
 8008458:	062e      	lsls	r6, r5, #24
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	d501      	bpl.n	8008462 <_printf_i+0x1be>
 800845e:	6019      	str	r1, [r3, #0]
 8008460:	e002      	b.n	8008468 <_printf_i+0x1c4>
 8008462:	0668      	lsls	r0, r5, #25
 8008464:	d5fb      	bpl.n	800845e <_printf_i+0x1ba>
 8008466:	8019      	strh	r1, [r3, #0]
 8008468:	2300      	movs	r3, #0
 800846a:	4616      	mov	r6, r2
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	e7bc      	b.n	80083ea <_printf_i+0x146>
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	2100      	movs	r1, #0
 8008474:	1d1a      	adds	r2, r3, #4
 8008476:	6032      	str	r2, [r6, #0]
 8008478:	681e      	ldr	r6, [r3, #0]
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f849 	bl	8008514 <memchr>
 8008482:	b108      	cbz	r0, 8008488 <_printf_i+0x1e4>
 8008484:	1b80      	subs	r0, r0, r6
 8008486:	6060      	str	r0, [r4, #4]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	2300      	movs	r3, #0
 800848e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008492:	e7aa      	b.n	80083ea <_printf_i+0x146>
 8008494:	4632      	mov	r2, r6
 8008496:	4649      	mov	r1, r9
 8008498:	4640      	mov	r0, r8
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	47d0      	blx	sl
 800849e:	3001      	adds	r0, #1
 80084a0:	d0ad      	beq.n	80083fe <_printf_i+0x15a>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	079b      	lsls	r3, r3, #30
 80084a6:	d413      	bmi.n	80084d0 <_printf_i+0x22c>
 80084a8:	68e0      	ldr	r0, [r4, #12]
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	4298      	cmp	r0, r3
 80084ae:	bfb8      	it	lt
 80084b0:	4618      	movlt	r0, r3
 80084b2:	e7a6      	b.n	8008402 <_printf_i+0x15e>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4632      	mov	r2, r6
 80084b8:	4649      	mov	r1, r9
 80084ba:	4640      	mov	r0, r8
 80084bc:	47d0      	blx	sl
 80084be:	3001      	adds	r0, #1
 80084c0:	d09d      	beq.n	80083fe <_printf_i+0x15a>
 80084c2:	3501      	adds	r5, #1
 80084c4:	68e3      	ldr	r3, [r4, #12]
 80084c6:	9903      	ldr	r1, [sp, #12]
 80084c8:	1a5b      	subs	r3, r3, r1
 80084ca:	42ab      	cmp	r3, r5
 80084cc:	dcf2      	bgt.n	80084b4 <_printf_i+0x210>
 80084ce:	e7eb      	b.n	80084a8 <_printf_i+0x204>
 80084d0:	2500      	movs	r5, #0
 80084d2:	f104 0619 	add.w	r6, r4, #25
 80084d6:	e7f5      	b.n	80084c4 <_printf_i+0x220>
 80084d8:	080094d6 	.word	0x080094d6
 80084dc:	080094e7 	.word	0x080094e7

080084e0 <memmove>:
 80084e0:	4288      	cmp	r0, r1
 80084e2:	b510      	push	{r4, lr}
 80084e4:	eb01 0402 	add.w	r4, r1, r2
 80084e8:	d902      	bls.n	80084f0 <memmove+0x10>
 80084ea:	4284      	cmp	r4, r0
 80084ec:	4623      	mov	r3, r4
 80084ee:	d807      	bhi.n	8008500 <memmove+0x20>
 80084f0:	1e43      	subs	r3, r0, #1
 80084f2:	42a1      	cmp	r1, r4
 80084f4:	d008      	beq.n	8008508 <memmove+0x28>
 80084f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084fe:	e7f8      	b.n	80084f2 <memmove+0x12>
 8008500:	4601      	mov	r1, r0
 8008502:	4402      	add	r2, r0
 8008504:	428a      	cmp	r2, r1
 8008506:	d100      	bne.n	800850a <memmove+0x2a>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800850e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008512:	e7f7      	b.n	8008504 <memmove+0x24>

08008514 <memchr>:
 8008514:	4603      	mov	r3, r0
 8008516:	b510      	push	{r4, lr}
 8008518:	b2c9      	uxtb	r1, r1
 800851a:	4402      	add	r2, r0
 800851c:	4293      	cmp	r3, r2
 800851e:	4618      	mov	r0, r3
 8008520:	d101      	bne.n	8008526 <memchr+0x12>
 8008522:	2000      	movs	r0, #0
 8008524:	e003      	b.n	800852e <memchr+0x1a>
 8008526:	7804      	ldrb	r4, [r0, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	428c      	cmp	r4, r1
 800852c:	d1f6      	bne.n	800851c <memchr+0x8>
 800852e:	bd10      	pop	{r4, pc}

08008530 <_realloc_r>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4614      	mov	r4, r2
 8008538:	460d      	mov	r5, r1
 800853a:	b921      	cbnz	r1, 8008546 <_realloc_r+0x16>
 800853c:	4611      	mov	r1, r2
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f7ff badd 	b.w	8007b00 <_malloc_r>
 8008546:	b92a      	cbnz	r2, 8008554 <_realloc_r+0x24>
 8008548:	f7ff fc9a 	bl	8007e80 <_free_r>
 800854c:	4625      	mov	r5, r4
 800854e:	4628      	mov	r0, r5
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	f000 f81a 	bl	800858c <_malloc_usable_size_r>
 8008558:	4284      	cmp	r4, r0
 800855a:	4606      	mov	r6, r0
 800855c:	d802      	bhi.n	8008564 <_realloc_r+0x34>
 800855e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008562:	d8f4      	bhi.n	800854e <_realloc_r+0x1e>
 8008564:	4621      	mov	r1, r4
 8008566:	4638      	mov	r0, r7
 8008568:	f7ff faca 	bl	8007b00 <_malloc_r>
 800856c:	4680      	mov	r8, r0
 800856e:	b908      	cbnz	r0, 8008574 <_realloc_r+0x44>
 8008570:	4645      	mov	r5, r8
 8008572:	e7ec      	b.n	800854e <_realloc_r+0x1e>
 8008574:	42b4      	cmp	r4, r6
 8008576:	4622      	mov	r2, r4
 8008578:	4629      	mov	r1, r5
 800857a:	bf28      	it	cs
 800857c:	4632      	movcs	r2, r6
 800857e:	f7ff fc71 	bl	8007e64 <memcpy>
 8008582:	4629      	mov	r1, r5
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff fc7b 	bl	8007e80 <_free_r>
 800858a:	e7f1      	b.n	8008570 <_realloc_r+0x40>

0800858c <_malloc_usable_size_r>:
 800858c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008590:	1f18      	subs	r0, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfbc      	itt	lt
 8008596:	580b      	ldrlt	r3, [r1, r0]
 8008598:	18c0      	addlt	r0, r0, r3
 800859a:	4770      	bx	lr

0800859c <pow>:
 800859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a0:	4614      	mov	r4, r2
 80085a2:	461d      	mov	r5, r3
 80085a4:	4680      	mov	r8, r0
 80085a6:	4689      	mov	r9, r1
 80085a8:	f000 f866 	bl	8008678 <__ieee754_pow>
 80085ac:	4622      	mov	r2, r4
 80085ae:	4606      	mov	r6, r0
 80085b0:	460f      	mov	r7, r1
 80085b2:	462b      	mov	r3, r5
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7f8 fa28 	bl	8000a0c <__aeabi_dcmpun>
 80085bc:	bbc8      	cbnz	r0, 8008632 <pow+0x96>
 80085be:	2200      	movs	r2, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f8 f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80085ca:	b1b8      	cbz	r0, 80085fc <pow+0x60>
 80085cc:	2200      	movs	r2, #0
 80085ce:	2300      	movs	r3, #0
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f8 f9e8 	bl	80009a8 <__aeabi_dcmpeq>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d141      	bne.n	8008660 <pow+0xc4>
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f000 f844 	bl	800866c <finite>
 80085e4:	b328      	cbz	r0, 8008632 <pow+0x96>
 80085e6:	2200      	movs	r2, #0
 80085e8:	2300      	movs	r3, #0
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f8 f9e5 	bl	80009bc <__aeabi_dcmplt>
 80085f2:	b1f0      	cbz	r0, 8008632 <pow+0x96>
 80085f4:	f7ff fc0a 	bl	8007e0c <__errno>
 80085f8:	2322      	movs	r3, #34	@ 0x22
 80085fa:	e019      	b.n	8008630 <pow+0x94>
 80085fc:	4630      	mov	r0, r6
 80085fe:	4639      	mov	r1, r7
 8008600:	f000 f834 	bl	800866c <finite>
 8008604:	b9c8      	cbnz	r0, 800863a <pow+0x9e>
 8008606:	4640      	mov	r0, r8
 8008608:	4649      	mov	r1, r9
 800860a:	f000 f82f 	bl	800866c <finite>
 800860e:	b1a0      	cbz	r0, 800863a <pow+0x9e>
 8008610:	4620      	mov	r0, r4
 8008612:	4629      	mov	r1, r5
 8008614:	f000 f82a 	bl	800866c <finite>
 8008618:	b178      	cbz	r0, 800863a <pow+0x9e>
 800861a:	4632      	mov	r2, r6
 800861c:	463b      	mov	r3, r7
 800861e:	4630      	mov	r0, r6
 8008620:	4639      	mov	r1, r7
 8008622:	f7f8 f9f3 	bl	8000a0c <__aeabi_dcmpun>
 8008626:	2800      	cmp	r0, #0
 8008628:	d0e4      	beq.n	80085f4 <pow+0x58>
 800862a:	f7ff fbef 	bl	8007e0c <__errno>
 800862e:	2321      	movs	r3, #33	@ 0x21
 8008630:	6003      	str	r3, [r0, #0]
 8008632:	4630      	mov	r0, r6
 8008634:	4639      	mov	r1, r7
 8008636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f8 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 8008646:	2800      	cmp	r0, #0
 8008648:	d0f3      	beq.n	8008632 <pow+0x96>
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f000 f80d 	bl	800866c <finite>
 8008652:	2800      	cmp	r0, #0
 8008654:	d0ed      	beq.n	8008632 <pow+0x96>
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f000 f807 	bl	800866c <finite>
 800865e:	e7c8      	b.n	80085f2 <pow+0x56>
 8008660:	2600      	movs	r6, #0
 8008662:	4f01      	ldr	r7, [pc, #4]	@ (8008668 <pow+0xcc>)
 8008664:	e7e5      	b.n	8008632 <pow+0x96>
 8008666:	bf00      	nop
 8008668:	3ff00000 	.word	0x3ff00000

0800866c <finite>:
 800866c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8008670:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008674:	0fc0      	lsrs	r0, r0, #31
 8008676:	4770      	bx	lr

08008678 <__ieee754_pow>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	b091      	sub	sp, #68	@ 0x44
 800867e:	e9cd 2300 	strd	r2, r3, [sp]
 8008682:	468b      	mov	fp, r1
 8008684:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008688:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800868c:	4682      	mov	sl, r0
 800868e:	ea57 0001 	orrs.w	r0, r7, r1
 8008692:	d112      	bne.n	80086ba <__ieee754_pow+0x42>
 8008694:	4653      	mov	r3, sl
 8008696:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800869a:	18db      	adds	r3, r3, r3
 800869c:	4152      	adcs	r2, r2
 800869e:	4298      	cmp	r0, r3
 80086a0:	4b93      	ldr	r3, [pc, #588]	@ (80088f0 <__ieee754_pow+0x278>)
 80086a2:	4193      	sbcs	r3, r2
 80086a4:	f080 84cd 	bcs.w	8009042 <__ieee754_pow+0x9ca>
 80086a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ac:	4650      	mov	r0, sl
 80086ae:	4659      	mov	r1, fp
 80086b0:	f7f7 fd5c 	bl	800016c <__adddf3>
 80086b4:	b011      	add	sp, #68	@ 0x44
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	4b8e      	ldr	r3, [pc, #568]	@ (80088f4 <__ieee754_pow+0x27c>)
 80086bc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80086c0:	429d      	cmp	r5, r3
 80086c2:	465e      	mov	r6, fp
 80086c4:	46d1      	mov	r9, sl
 80086c6:	d80b      	bhi.n	80086e0 <__ieee754_pow+0x68>
 80086c8:	d105      	bne.n	80086d6 <__ieee754_pow+0x5e>
 80086ca:	f1ba 0f00 	cmp.w	sl, #0
 80086ce:	d1eb      	bne.n	80086a8 <__ieee754_pow+0x30>
 80086d0:	42af      	cmp	r7, r5
 80086d2:	d8e9      	bhi.n	80086a8 <__ieee754_pow+0x30>
 80086d4:	e001      	b.n	80086da <__ieee754_pow+0x62>
 80086d6:	429f      	cmp	r7, r3
 80086d8:	d802      	bhi.n	80086e0 <__ieee754_pow+0x68>
 80086da:	429f      	cmp	r7, r3
 80086dc:	d10f      	bne.n	80086fe <__ieee754_pow+0x86>
 80086de:	b171      	cbz	r1, 80086fe <__ieee754_pow+0x86>
 80086e0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80086e4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80086e8:	ea56 0609 	orrs.w	r6, r6, r9
 80086ec:	d1dc      	bne.n	80086a8 <__ieee754_pow+0x30>
 80086ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086f2:	18db      	adds	r3, r3, r3
 80086f4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80086f8:	4152      	adcs	r2, r2
 80086fa:	429e      	cmp	r6, r3
 80086fc:	e7d0      	b.n	80086a0 <__ieee754_pow+0x28>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	462b      	mov	r3, r5
 8008702:	da42      	bge.n	800878a <__ieee754_pow+0x112>
 8008704:	4a7c      	ldr	r2, [pc, #496]	@ (80088f8 <__ieee754_pow+0x280>)
 8008706:	4297      	cmp	r7, r2
 8008708:	d856      	bhi.n	80087b8 <__ieee754_pow+0x140>
 800870a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800870e:	4297      	cmp	r7, r2
 8008710:	f240 84a6 	bls.w	8009060 <__ieee754_pow+0x9e8>
 8008714:	153a      	asrs	r2, r7, #20
 8008716:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800871a:	2a14      	cmp	r2, #20
 800871c:	dd18      	ble.n	8008750 <__ieee754_pow+0xd8>
 800871e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008722:	fa21 f402 	lsr.w	r4, r1, r2
 8008726:	fa04 f202 	lsl.w	r2, r4, r2
 800872a:	428a      	cmp	r2, r1
 800872c:	f040 8498 	bne.w	8009060 <__ieee754_pow+0x9e8>
 8008730:	f004 0401 	and.w	r4, r4, #1
 8008734:	f1c4 0402 	rsb	r4, r4, #2
 8008738:	2900      	cmp	r1, #0
 800873a:	d159      	bne.n	80087f0 <__ieee754_pow+0x178>
 800873c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8008740:	d149      	bne.n	80087d6 <__ieee754_pow+0x15e>
 8008742:	4652      	mov	r2, sl
 8008744:	465b      	mov	r3, fp
 8008746:	4650      	mov	r0, sl
 8008748:	4659      	mov	r1, fp
 800874a:	f7f7 fec5 	bl	80004d8 <__aeabi_dmul>
 800874e:	e7b1      	b.n	80086b4 <__ieee754_pow+0x3c>
 8008750:	2900      	cmp	r1, #0
 8008752:	d14c      	bne.n	80087ee <__ieee754_pow+0x176>
 8008754:	f1c2 0214 	rsb	r2, r2, #20
 8008758:	fa47 f402 	asr.w	r4, r7, r2
 800875c:	fa04 f202 	lsl.w	r2, r4, r2
 8008760:	42ba      	cmp	r2, r7
 8008762:	f040 847a 	bne.w	800905a <__ieee754_pow+0x9e2>
 8008766:	f004 0401 	and.w	r4, r4, #1
 800876a:	f1c4 0402 	rsb	r4, r4, #2
 800876e:	4a63      	ldr	r2, [pc, #396]	@ (80088fc <__ieee754_pow+0x284>)
 8008770:	4297      	cmp	r7, r2
 8008772:	d1e3      	bne.n	800873c <__ieee754_pow+0xc4>
 8008774:	f1b8 0f00 	cmp.w	r8, #0
 8008778:	f280 846b 	bge.w	8009052 <__ieee754_pow+0x9da>
 800877c:	4652      	mov	r2, sl
 800877e:	465b      	mov	r3, fp
 8008780:	2000      	movs	r0, #0
 8008782:	495e      	ldr	r1, [pc, #376]	@ (80088fc <__ieee754_pow+0x284>)
 8008784:	f7f7 ffd2 	bl	800072c <__aeabi_ddiv>
 8008788:	e794      	b.n	80086b4 <__ieee754_pow+0x3c>
 800878a:	2400      	movs	r4, #0
 800878c:	bb81      	cbnz	r1, 80087f0 <__ieee754_pow+0x178>
 800878e:	4a59      	ldr	r2, [pc, #356]	@ (80088f4 <__ieee754_pow+0x27c>)
 8008790:	4297      	cmp	r7, r2
 8008792:	d1ec      	bne.n	800876e <__ieee754_pow+0xf6>
 8008794:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8008798:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800879c:	ea53 0309 	orrs.w	r3, r3, r9
 80087a0:	f000 844f 	beq.w	8009042 <__ieee754_pow+0x9ca>
 80087a4:	4b56      	ldr	r3, [pc, #344]	@ (8008900 <__ieee754_pow+0x288>)
 80087a6:	429d      	cmp	r5, r3
 80087a8:	d908      	bls.n	80087bc <__ieee754_pow+0x144>
 80087aa:	f1b8 0f00 	cmp.w	r8, #0
 80087ae:	f280 844c 	bge.w	800904a <__ieee754_pow+0x9d2>
 80087b2:	2000      	movs	r0, #0
 80087b4:	2100      	movs	r1, #0
 80087b6:	e77d      	b.n	80086b4 <__ieee754_pow+0x3c>
 80087b8:	2402      	movs	r4, #2
 80087ba:	e7e7      	b.n	800878c <__ieee754_pow+0x114>
 80087bc:	f1b8 0f00 	cmp.w	r8, #0
 80087c0:	f04f 0000 	mov.w	r0, #0
 80087c4:	f04f 0100 	mov.w	r1, #0
 80087c8:	f6bf af74 	bge.w	80086b4 <__ieee754_pow+0x3c>
 80087cc:	e9dd 0300 	ldrd	r0, r3, [sp]
 80087d0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80087d4:	e76e      	b.n	80086b4 <__ieee754_pow+0x3c>
 80087d6:	4a4b      	ldr	r2, [pc, #300]	@ (8008904 <__ieee754_pow+0x28c>)
 80087d8:	4590      	cmp	r8, r2
 80087da:	d109      	bne.n	80087f0 <__ieee754_pow+0x178>
 80087dc:	2e00      	cmp	r6, #0
 80087de:	db07      	blt.n	80087f0 <__ieee754_pow+0x178>
 80087e0:	4650      	mov	r0, sl
 80087e2:	4659      	mov	r1, fp
 80087e4:	b011      	add	sp, #68	@ 0x44
 80087e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	f000 bd0f 	b.w	800920c <__ieee754_sqrt>
 80087ee:	2400      	movs	r4, #0
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	9302      	str	r3, [sp, #8]
 80087f6:	f000 fc69 	bl	80090cc <fabs>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	f1b9 0f00 	cmp.w	r9, #0
 8008800:	d127      	bne.n	8008852 <__ieee754_pow+0x1da>
 8008802:	4a3e      	ldr	r2, [pc, #248]	@ (80088fc <__ieee754_pow+0x284>)
 8008804:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8008808:	4594      	cmp	ip, r2
 800880a:	d000      	beq.n	800880e <__ieee754_pow+0x196>
 800880c:	bb0d      	cbnz	r5, 8008852 <__ieee754_pow+0x1da>
 800880e:	f1b8 0f00 	cmp.w	r8, #0
 8008812:	da05      	bge.n	8008820 <__ieee754_pow+0x1a8>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	2000      	movs	r0, #0
 800881a:	4938      	ldr	r1, [pc, #224]	@ (80088fc <__ieee754_pow+0x284>)
 800881c:	f7f7 ff86 	bl	800072c <__aeabi_ddiv>
 8008820:	2e00      	cmp	r6, #0
 8008822:	f6bf af47 	bge.w	80086b4 <__ieee754_pow+0x3c>
 8008826:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800882a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800882e:	4325      	orrs	r5, r4
 8008830:	d108      	bne.n	8008844 <__ieee754_pow+0x1cc>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f7f7 fc95 	bl	8000168 <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e79f      	b.n	8008784 <__ieee754_pow+0x10c>
 8008844:	2c01      	cmp	r4, #1
 8008846:	f47f af35 	bne.w	80086b4 <__ieee754_pow+0x3c>
 800884a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800884e:	4619      	mov	r1, r3
 8008850:	e730      	b.n	80086b4 <__ieee754_pow+0x3c>
 8008852:	0ff2      	lsrs	r2, r6, #31
 8008854:	3a01      	subs	r2, #1
 8008856:	ea52 0c04 	orrs.w	ip, r2, r4
 800885a:	d102      	bne.n	8008862 <__ieee754_pow+0x1ea>
 800885c:	4652      	mov	r2, sl
 800885e:	465b      	mov	r3, fp
 8008860:	e7e9      	b.n	8008836 <__ieee754_pow+0x1be>
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	3c01      	subs	r4, #1
 8008868:	4314      	orrs	r4, r2
 800886a:	bf14      	ite	ne
 800886c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80088fc <__ieee754_pow+0x284>
 8008870:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008908 <__ieee754_pow+0x290>
 8008874:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008878:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800887c:	f240 8104 	bls.w	8008a88 <__ieee754_pow+0x410>
 8008880:	4b22      	ldr	r3, [pc, #136]	@ (800890c <__ieee754_pow+0x294>)
 8008882:	429f      	cmp	r7, r3
 8008884:	4b1e      	ldr	r3, [pc, #120]	@ (8008900 <__ieee754_pow+0x288>)
 8008886:	d913      	bls.n	80088b0 <__ieee754_pow+0x238>
 8008888:	429d      	cmp	r5, r3
 800888a:	d808      	bhi.n	800889e <__ieee754_pow+0x226>
 800888c:	f1b8 0f00 	cmp.w	r8, #0
 8008890:	da08      	bge.n	80088a4 <__ieee754_pow+0x22c>
 8008892:	2000      	movs	r0, #0
 8008894:	b011      	add	sp, #68	@ 0x44
 8008896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f000 bcb1 	b.w	8009200 <__math_oflow>
 800889e:	f1b8 0f00 	cmp.w	r8, #0
 80088a2:	dcf6      	bgt.n	8008892 <__ieee754_pow+0x21a>
 80088a4:	2000      	movs	r0, #0
 80088a6:	b011      	add	sp, #68	@ 0x44
 80088a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	f000 bca3 	b.w	80091f6 <__math_uflow>
 80088b0:	429d      	cmp	r5, r3
 80088b2:	d20c      	bcs.n	80088ce <__ieee754_pow+0x256>
 80088b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	f7f8 f87e 	bl	80009bc <__aeabi_dcmplt>
 80088c0:	3800      	subs	r0, #0
 80088c2:	bf18      	it	ne
 80088c4:	2001      	movne	r0, #1
 80088c6:	f1b8 0f00 	cmp.w	r8, #0
 80088ca:	daec      	bge.n	80088a6 <__ieee754_pow+0x22e>
 80088cc:	e7e2      	b.n	8008894 <__ieee754_pow+0x21c>
 80088ce:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <__ieee754_pow+0x284>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	429d      	cmp	r5, r3
 80088d4:	d91c      	bls.n	8008910 <__ieee754_pow+0x298>
 80088d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088da:	2300      	movs	r3, #0
 80088dc:	f7f8 f86e 	bl	80009bc <__aeabi_dcmplt>
 80088e0:	3800      	subs	r0, #0
 80088e2:	bf18      	it	ne
 80088e4:	2001      	movne	r0, #1
 80088e6:	f1b8 0f00 	cmp.w	r8, #0
 80088ea:	dcd3      	bgt.n	8008894 <__ieee754_pow+0x21c>
 80088ec:	e7db      	b.n	80088a6 <__ieee754_pow+0x22e>
 80088ee:	bf00      	nop
 80088f0:	fff00000 	.word	0xfff00000
 80088f4:	7ff00000 	.word	0x7ff00000
 80088f8:	433fffff 	.word	0x433fffff
 80088fc:	3ff00000 	.word	0x3ff00000
 8008900:	3fefffff 	.word	0x3fefffff
 8008904:	3fe00000 	.word	0x3fe00000
 8008908:	bff00000 	.word	0xbff00000
 800890c:	43f00000 	.word	0x43f00000
 8008910:	4b59      	ldr	r3, [pc, #356]	@ (8008a78 <__ieee754_pow+0x400>)
 8008912:	f7f7 fc29 	bl	8000168 <__aeabi_dsub>
 8008916:	a350      	add	r3, pc, #320	@ (adr r3, 8008a58 <__ieee754_pow+0x3e0>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	f7f7 fdda 	bl	80004d8 <__aeabi_dmul>
 8008924:	a34e      	add	r3, pc, #312	@ (adr r3, 8008a60 <__ieee754_pow+0x3e8>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fdd1 	bl	80004d8 <__aeabi_dmul>
 8008936:	2200      	movs	r2, #0
 8008938:	4682      	mov	sl, r0
 800893a:	468b      	mov	fp, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	4b4e      	ldr	r3, [pc, #312]	@ (8008a7c <__ieee754_pow+0x404>)
 8008942:	f7f7 fdc9 	bl	80004d8 <__aeabi_dmul>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	a147      	add	r1, pc, #284	@ (adr r1, 8008a68 <__ieee754_pow+0x3f0>)
 800894c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008950:	f7f7 fc0a 	bl	8000168 <__aeabi_dsub>
 8008954:	4622      	mov	r2, r4
 8008956:	462b      	mov	r3, r5
 8008958:	f7f7 fdbe 	bl	80004d8 <__aeabi_dmul>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	2000      	movs	r0, #0
 8008962:	4947      	ldr	r1, [pc, #284]	@ (8008a80 <__ieee754_pow+0x408>)
 8008964:	f7f7 fc00 	bl	8000168 <__aeabi_dsub>
 8008968:	4622      	mov	r2, r4
 800896a:	4680      	mov	r8, r0
 800896c:	4689      	mov	r9, r1
 800896e:	462b      	mov	r3, r5
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fdb0 	bl	80004d8 <__aeabi_dmul>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	f7f7 fdaa 	bl	80004d8 <__aeabi_dmul>
 8008984:	a33a      	add	r3, pc, #232	@ (adr r3, 8008a70 <__ieee754_pow+0x3f8>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fda5 	bl	80004d8 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4650      	mov	r0, sl
 8008994:	4659      	mov	r1, fp
 8008996:	f7f7 fbe7 	bl	8000168 <__aeabi_dsub>
 800899a:	2400      	movs	r4, #0
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4680      	mov	r8, r0
 80089a2:	4689      	mov	r9, r1
 80089a4:	4630      	mov	r0, r6
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 fbe0 	bl	800016c <__adddf3>
 80089ac:	4632      	mov	r2, r6
 80089ae:	463b      	mov	r3, r7
 80089b0:	4620      	mov	r0, r4
 80089b2:	460d      	mov	r5, r1
 80089b4:	f7f7 fbd8 	bl	8000168 <__aeabi_dsub>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4640      	mov	r0, r8
 80089be:	4649      	mov	r1, r9
 80089c0:	f7f7 fbd2 	bl	8000168 <__aeabi_dsub>
 80089c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089cc:	2300      	movs	r3, #0
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089dc:	465b      	mov	r3, fp
 80089de:	4652      	mov	r2, sl
 80089e0:	f7f7 fbc2 	bl	8000168 <__aeabi_dsub>
 80089e4:	4622      	mov	r2, r4
 80089e6:	462b      	mov	r3, r5
 80089e8:	f7f7 fd76 	bl	80004d8 <__aeabi_dmul>
 80089ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f0:	4680      	mov	r8, r0
 80089f2:	4689      	mov	r9, r1
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f7f7 fd6e 	bl	80004d8 <__aeabi_dmul>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4640      	mov	r0, r8
 8008a02:	4649      	mov	r1, r9
 8008a04:	f7f7 fbb2 	bl	800016c <__adddf3>
 8008a08:	465b      	mov	r3, fp
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fd60 	bl	80004d8 <__aeabi_dmul>
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4689      	mov	r9, r1
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f7 fba2 	bl	800016c <__adddf3>
 8008a28:	4b16      	ldr	r3, [pc, #88]	@ (8008a84 <__ieee754_pow+0x40c>)
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4299      	cmp	r1, r3
 8008a2e:	460d      	mov	r5, r1
 8008a30:	468b      	mov	fp, r1
 8008a32:	f340 81fd 	ble.w	8008e30 <__ieee754_pow+0x7b8>
 8008a36:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008a3a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008a3e:	4303      	orrs	r3, r0
 8008a40:	f000 81dc 	beq.w	8008dfc <__ieee754_pow+0x784>
 8008a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f7f7 ffb6 	bl	80009bc <__aeabi_dcmplt>
 8008a50:	3800      	subs	r0, #0
 8008a52:	bf18      	it	ne
 8008a54:	2001      	movne	r0, #1
 8008a56:	e71d      	b.n	8008894 <__ieee754_pow+0x21c>
 8008a58:	60000000 	.word	0x60000000
 8008a5c:	3ff71547 	.word	0x3ff71547
 8008a60:	f85ddf44 	.word	0xf85ddf44
 8008a64:	3e54ae0b 	.word	0x3e54ae0b
 8008a68:	55555555 	.word	0x55555555
 8008a6c:	3fd55555 	.word	0x3fd55555
 8008a70:	652b82fe 	.word	0x652b82fe
 8008a74:	3ff71547 	.word	0x3ff71547
 8008a78:	3ff00000 	.word	0x3ff00000
 8008a7c:	3fd00000 	.word	0x3fd00000
 8008a80:	3fe00000 	.word	0x3fe00000
 8008a84:	408fffff 	.word	0x408fffff
 8008a88:	4ad3      	ldr	r2, [pc, #844]	@ (8008dd8 <__ieee754_pow+0x760>)
 8008a8a:	4032      	ands	r2, r6
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	f040 817a 	bne.w	8008d86 <__ieee754_pow+0x70e>
 8008a92:	4bd2      	ldr	r3, [pc, #840]	@ (8008ddc <__ieee754_pow+0x764>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7f7 fd1f 	bl	80004d8 <__aeabi_dmul>
 8008a9a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	151a      	asrs	r2, r3, #20
 8008aa2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008aa6:	4422      	add	r2, r4
 8008aa8:	920a      	str	r2, [sp, #40]	@ 0x28
 8008aaa:	4acd      	ldr	r2, [pc, #820]	@ (8008de0 <__ieee754_pow+0x768>)
 8008aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008aba:	dd08      	ble.n	8008ace <__ieee754_pow+0x456>
 8008abc:	4ac9      	ldr	r2, [pc, #804]	@ (8008de4 <__ieee754_pow+0x76c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	f340 8163 	ble.w	8008d8a <__ieee754_pow+0x712>
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ac6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008aca:	3301      	adds	r3, #1
 8008acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ace:	2600      	movs	r6, #0
 8008ad0:	00f3      	lsls	r3, r6, #3
 8008ad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ad4:	4bc4      	ldr	r3, [pc, #784]	@ (8008de8 <__ieee754_pow+0x770>)
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	4682      	mov	sl, r0
 8008aea:	f7f7 fb3d 	bl	8000168 <__aeabi_dsub>
 8008aee:	4652      	mov	r2, sl
 8008af0:	462b      	mov	r3, r5
 8008af2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008af6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008afa:	f7f7 fb37 	bl	800016c <__adddf3>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	2000      	movs	r0, #0
 8008b04:	49b9      	ldr	r1, [pc, #740]	@ (8008dec <__ieee754_pow+0x774>)
 8008b06:	f7f7 fe11 	bl	800072c <__aeabi_ddiv>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b16:	f7f7 fcdf 	bl	80004d8 <__aeabi_dmul>
 8008b1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b1e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008b22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b26:	2300      	movs	r3, #0
 8008b28:	2200      	movs	r2, #0
 8008b2a:	46ab      	mov	fp, r5
 8008b2c:	106d      	asrs	r5, r5, #1
 8008b2e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008b38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b3c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	4614      	mov	r4, r2
 8008b46:	461d      	mov	r5, r3
 8008b48:	f7f7 fcc6 	bl	80004d8 <__aeabi_dmul>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b54:	f7f7 fb08 	bl	8000168 <__aeabi_dsub>
 8008b58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	4620      	mov	r0, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fb00 	bl	8000168 <__aeabi_dsub>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4659      	mov	r1, fp
 8008b70:	f7f7 fafa 	bl	8000168 <__aeabi_dsub>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 fcae 	bl	80004d8 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 faf0 	bl	8000168 <__aeabi_dsub>
 8008b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b8c:	f7f7 fca4 	bl	80004d8 <__aeabi_dmul>
 8008b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f7f7 fc9c 	bl	80004d8 <__aeabi_dmul>
 8008ba0:	a37b      	add	r3, pc, #492	@ (adr r3, 8008d90 <__ieee754_pow+0x718>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	460d      	mov	r5, r1
 8008baa:	f7f7 fc95 	bl	80004d8 <__aeabi_dmul>
 8008bae:	a37a      	add	r3, pc, #488	@ (adr r3, 8008d98 <__ieee754_pow+0x720>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 fada 	bl	800016c <__adddf3>
 8008bb8:	4622      	mov	r2, r4
 8008bba:	462b      	mov	r3, r5
 8008bbc:	f7f7 fc8c 	bl	80004d8 <__aeabi_dmul>
 8008bc0:	a377      	add	r3, pc, #476	@ (adr r3, 8008da0 <__ieee754_pow+0x728>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fad1 	bl	800016c <__adddf3>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	462b      	mov	r3, r5
 8008bce:	f7f7 fc83 	bl	80004d8 <__aeabi_dmul>
 8008bd2:	a375      	add	r3, pc, #468	@ (adr r3, 8008da8 <__ieee754_pow+0x730>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fac8 	bl	800016c <__adddf3>
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	f7f7 fc7a 	bl	80004d8 <__aeabi_dmul>
 8008be4:	a372      	add	r3, pc, #456	@ (adr r3, 8008db0 <__ieee754_pow+0x738>)
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	f7f7 fabf 	bl	800016c <__adddf3>
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f7f7 fc71 	bl	80004d8 <__aeabi_dmul>
 8008bf6:	a370      	add	r3, pc, #448	@ (adr r3, 8008db8 <__ieee754_pow+0x740>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fab6 	bl	800016c <__adddf3>
 8008c00:	4622      	mov	r2, r4
 8008c02:	4606      	mov	r6, r0
 8008c04:	460f      	mov	r7, r1
 8008c06:	462b      	mov	r3, r5
 8008c08:	4620      	mov	r0, r4
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	f7f7 fc64 	bl	80004d8 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4630      	mov	r0, r6
 8008c16:	4639      	mov	r1, r7
 8008c18:	f7f7 fc5e 	bl	80004d8 <__aeabi_dmul>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	f7f7 faa0 	bl	800016c <__adddf3>
 8008c2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c30:	f7f7 fc52 	bl	80004d8 <__aeabi_dmul>
 8008c34:	4622      	mov	r2, r4
 8008c36:	462b      	mov	r3, r5
 8008c38:	f7f7 fa98 	bl	800016c <__adddf3>
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	4682      	mov	sl, r0
 8008c40:	468b      	mov	fp, r1
 8008c42:	464b      	mov	r3, r9
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 fc46 	bl	80004d8 <__aeabi_dmul>
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4b68      	ldr	r3, [pc, #416]	@ (8008df0 <__ieee754_pow+0x778>)
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	f7f7 fa8a 	bl	800016c <__adddf3>
 8008c58:	4652      	mov	r2, sl
 8008c5a:	465b      	mov	r3, fp
 8008c5c:	f7f7 fa86 	bl	800016c <__adddf3>
 8008c60:	2400      	movs	r4, #0
 8008c62:	460d      	mov	r5, r1
 8008c64:	4622      	mov	r2, r4
 8008c66:	460b      	mov	r3, r1
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 fc34 	bl	80004d8 <__aeabi_dmul>
 8008c70:	2200      	movs	r2, #0
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8008df0 <__ieee754_pow+0x778>)
 8008c7c:	f7f7 fa74 	bl	8000168 <__aeabi_dsub>
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	f7f7 fa70 	bl	8000168 <__aeabi_dsub>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	4659      	mov	r1, fp
 8008c90:	f7f7 fa6a 	bl	8000168 <__aeabi_dsub>
 8008c94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c98:	f7f7 fc1e 	bl	80004d8 <__aeabi_dmul>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	f7f7 fc16 	bl	80004d8 <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 fa5a 	bl	800016c <__adddf3>
 8008cb8:	2400      	movs	r4, #0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	f7f7 fa51 	bl	800016c <__adddf3>
 8008cca:	a33d      	add	r3, pc, #244	@ (adr r3, 8008dc0 <__ieee754_pow+0x748>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	f7f7 fc00 	bl	80004d8 <__aeabi_dmul>
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	f7f7 fa40 	bl	8000168 <__aeabi_dsub>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 fa3a 	bl	8000168 <__aeabi_dsub>
 8008cf4:	a334      	add	r3, pc, #208	@ (adr r3, 8008dc8 <__ieee754_pow+0x750>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fbed 	bl	80004d8 <__aeabi_dmul>
 8008cfe:	a334      	add	r3, pc, #208	@ (adr r3, 8008dd0 <__ieee754_pow+0x758>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f7f7 fbe4 	bl	80004d8 <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f7f7 fa28 	bl	800016c <__adddf3>
 8008d1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d1e:	4b35      	ldr	r3, [pc, #212]	@ (8008df4 <__ieee754_pow+0x77c>)
 8008d20:	2400      	movs	r4, #0
 8008d22:	4413      	add	r3, r2
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fa20 	bl	800016c <__adddf3>
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d30:	468b      	mov	fp, r1
 8008d32:	f7f7 fb67 	bl	8000404 <__aeabi_i2d>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8008df8 <__ieee754_pow+0x780>)
 8008d3e:	4413      	add	r3, r2
 8008d40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d44:	4652      	mov	r2, sl
 8008d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	f7f7 fa0e 	bl	800016c <__adddf3>
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	f7f7 fa0a 	bl	800016c <__adddf3>
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	f7f7 fa06 	bl	800016c <__adddf3>
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	4620      	mov	r0, r4
 8008d66:	460d      	mov	r5, r1
 8008d68:	f7f7 f9fe 	bl	8000168 <__aeabi_dsub>
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	f7f7 f9fa 	bl	8000168 <__aeabi_dsub>
 8008d74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d78:	f7f7 f9f6 	bl	8000168 <__aeabi_dsub>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4650      	mov	r0, sl
 8008d82:	4659      	mov	r1, fp
 8008d84:	e61c      	b.n	80089c0 <__ieee754_pow+0x348>
 8008d86:	2400      	movs	r4, #0
 8008d88:	e68a      	b.n	8008aa0 <__ieee754_pow+0x428>
 8008d8a:	2601      	movs	r6, #1
 8008d8c:	e6a0      	b.n	8008ad0 <__ieee754_pow+0x458>
 8008d8e:	bf00      	nop
 8008d90:	4a454eef 	.word	0x4a454eef
 8008d94:	3fca7e28 	.word	0x3fca7e28
 8008d98:	93c9db65 	.word	0x93c9db65
 8008d9c:	3fcd864a 	.word	0x3fcd864a
 8008da0:	a91d4101 	.word	0xa91d4101
 8008da4:	3fd17460 	.word	0x3fd17460
 8008da8:	518f264d 	.word	0x518f264d
 8008dac:	3fd55555 	.word	0x3fd55555
 8008db0:	db6fabff 	.word	0xdb6fabff
 8008db4:	3fdb6db6 	.word	0x3fdb6db6
 8008db8:	33333303 	.word	0x33333303
 8008dbc:	3fe33333 	.word	0x3fe33333
 8008dc0:	e0000000 	.word	0xe0000000
 8008dc4:	3feec709 	.word	0x3feec709
 8008dc8:	dc3a03fd 	.word	0xdc3a03fd
 8008dcc:	3feec709 	.word	0x3feec709
 8008dd0:	145b01f5 	.word	0x145b01f5
 8008dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8008dd8:	7ff00000 	.word	0x7ff00000
 8008ddc:	43400000 	.word	0x43400000
 8008de0:	0003988e 	.word	0x0003988e
 8008de4:	000bb679 	.word	0x000bb679
 8008de8:	0800ab28 	.word	0x0800ab28
 8008dec:	3ff00000 	.word	0x3ff00000
 8008df0:	40080000 	.word	0x40080000
 8008df4:	0800ab08 	.word	0x0800ab08
 8008df8:	0800ab18 	.word	0x0800ab18
 8008dfc:	a39a      	add	r3, pc, #616	@ (adr r3, 8009068 <__ieee754_pow+0x9f0>)
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	4630      	mov	r0, r6
 8008e04:	4639      	mov	r1, r7
 8008e06:	f7f7 f9b1 	bl	800016c <__adddf3>
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e10:	464b      	mov	r3, r9
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 f9a7 	bl	8000168 <__aeabi_dsub>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e22:	f7f7 fde9 	bl	80009f8 <__aeabi_dcmpgt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f47f ae0c 	bne.w	8008a44 <__ieee754_pow+0x3cc>
 8008e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80090b0 <__ieee754_pow+0xa38>)
 8008e2e:	e022      	b.n	8008e76 <__ieee754_pow+0x7fe>
 8008e30:	4ca0      	ldr	r4, [pc, #640]	@ (80090b4 <__ieee754_pow+0xa3c>)
 8008e32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e36:	42a3      	cmp	r3, r4
 8008e38:	d919      	bls.n	8008e6e <__ieee754_pow+0x7f6>
 8008e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80090b8 <__ieee754_pow+0xa40>)
 8008e3c:	440b      	add	r3, r1
 8008e3e:	4303      	orrs	r3, r0
 8008e40:	d009      	beq.n	8008e56 <__ieee754_pow+0x7de>
 8008e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f7f7 fdb7 	bl	80009bc <__aeabi_dcmplt>
 8008e4e:	3800      	subs	r0, #0
 8008e50:	bf18      	it	ne
 8008e52:	2001      	movne	r0, #1
 8008e54:	e527      	b.n	80088a6 <__ieee754_pow+0x22e>
 8008e56:	4642      	mov	r2, r8
 8008e58:	464b      	mov	r3, r9
 8008e5a:	f7f7 f985 	bl	8000168 <__aeabi_dsub>
 8008e5e:	4632      	mov	r2, r6
 8008e60:	463b      	mov	r3, r7
 8008e62:	f7f7 fdbf 	bl	80009e4 <__aeabi_dcmpge>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1eb      	bne.n	8008e42 <__ieee754_pow+0x7ca>
 8008e6a:	4b94      	ldr	r3, [pc, #592]	@ (80090bc <__ieee754_pow+0xa44>)
 8008e6c:	e003      	b.n	8008e76 <__ieee754_pow+0x7fe>
 8008e6e:	4a94      	ldr	r2, [pc, #592]	@ (80090c0 <__ieee754_pow+0xa48>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	f240 80e1 	bls.w	8009038 <__ieee754_pow+0x9c0>
 8008e76:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008e7a:	151b      	asrs	r3, r3, #20
 8008e7c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008e80:	fa4a fa03 	asr.w	sl, sl, r3
 8008e84:	44da      	add	sl, fp
 8008e86:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008e8a:	488e      	ldr	r0, [pc, #568]	@ (80090c4 <__ieee754_pow+0xa4c>)
 8008e8c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008e90:	4108      	asrs	r0, r1
 8008e92:	ea00 030a 	and.w	r3, r0, sl
 8008e96:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008e9a:	f1c1 0114 	rsb	r1, r1, #20
 8008e9e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	fa4a fa01 	asr.w	sl, sl, r1
 8008ea8:	f1bb 0f00 	cmp.w	fp, #0
 8008eac:	4649      	mov	r1, r9
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	bfb8      	it	lt
 8008eb4:	f1ca 0a00 	rsblt	sl, sl, #0
 8008eb8:	f7f7 f956 	bl	8000168 <__aeabi_dsub>
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4649      	mov	r1, r9
 8008eca:	f7f7 f94f 	bl	800016c <__adddf3>
 8008ece:	a368      	add	r3, pc, #416	@ (adr r3, 8009070 <__ieee754_pow+0x9f8>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	f7f7 fafe 	bl	80004d8 <__aeabi_dmul>
 8008edc:	4642      	mov	r2, r8
 8008ede:	464b      	mov	r3, r9
 8008ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f7f7 f93e 	bl	8000168 <__aeabi_dsub>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 f938 	bl	8000168 <__aeabi_dsub>
 8008ef8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009078 <__ieee754_pow+0xa00>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 faeb 	bl	80004d8 <__aeabi_dmul>
 8008f02:	a35f      	add	r3, pc, #380	@ (adr r3, 8009080 <__ieee754_pow+0xa08>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4689      	mov	r9, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 fae2 	bl	80004d8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 f926 	bl	800016c <__adddf3>
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f2c:	f7f7 f91e 	bl	800016c <__adddf3>
 8008f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	f7f7 f916 	bl	8000168 <__aeabi_dsub>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4620      	mov	r0, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	f7f7 f910 	bl	8000168 <__aeabi_dsub>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	464b      	mov	r3, r9
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fac0 	bl	80004d8 <__aeabi_dmul>
 8008f58:	a34b      	add	r3, pc, #300	@ (adr r3, 8009088 <__ieee754_pow+0xa10>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	f7f7 fab9 	bl	80004d8 <__aeabi_dmul>
 8008f66:	a34a      	add	r3, pc, #296	@ (adr r3, 8009090 <__ieee754_pow+0xa18>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	f7f7 f8fc 	bl	8000168 <__aeabi_dsub>
 8008f70:	4622      	mov	r2, r4
 8008f72:	462b      	mov	r3, r5
 8008f74:	f7f7 fab0 	bl	80004d8 <__aeabi_dmul>
 8008f78:	a347      	add	r3, pc, #284	@ (adr r3, 8009098 <__ieee754_pow+0xa20>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f7f7 f8f5 	bl	800016c <__adddf3>
 8008f82:	4622      	mov	r2, r4
 8008f84:	462b      	mov	r3, r5
 8008f86:	f7f7 faa7 	bl	80004d8 <__aeabi_dmul>
 8008f8a:	a345      	add	r3, pc, #276	@ (adr r3, 80090a0 <__ieee754_pow+0xa28>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f7f7 f8ea 	bl	8000168 <__aeabi_dsub>
 8008f94:	4622      	mov	r2, r4
 8008f96:	462b      	mov	r3, r5
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	a342      	add	r3, pc, #264	@ (adr r3, 80090a8 <__ieee754_pow+0xa30>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f8e3 	bl	800016c <__adddf3>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f7f7 fa95 	bl	80004d8 <__aeabi_dmul>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 f8d7 	bl	8000168 <__aeabi_dsub>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 fa87 	bl	80004d8 <__aeabi_dmul>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8008fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 f8c6 	bl	8000168 <__aeabi_dsub>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe4:	f7f7 fba2 	bl	800072c <__aeabi_ddiv>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4604      	mov	r4, r0
 8008fec:	460d      	mov	r5, r1
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 fa70 	bl	80004d8 <__aeabi_dmul>
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	f7f7 f8b6 	bl	800016c <__adddf3>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 f8ae 	bl	8000168 <__aeabi_dsub>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	f7f7 f8aa 	bl	8000168 <__aeabi_dsub>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	2000      	movs	r0, #0
 800901a:	492b      	ldr	r1, [pc, #172]	@ (80090c8 <__ieee754_pow+0xa50>)
 800901c:	f7f7 f8a4 	bl	8000168 <__aeabi_dsub>
 8009020:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009024:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009028:	da09      	bge.n	800903e <__ieee754_pow+0x9c6>
 800902a:	4652      	mov	r2, sl
 800902c:	f000 f854 	bl	80090d8 <scalbn>
 8009030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009034:	f7ff bb89 	b.w	800874a <__ieee754_pow+0xd2>
 8009038:	f8dd a010 	ldr.w	sl, [sp, #16]
 800903c:	e740      	b.n	8008ec0 <__ieee754_pow+0x848>
 800903e:	4621      	mov	r1, r4
 8009040:	e7f6      	b.n	8009030 <__ieee754_pow+0x9b8>
 8009042:	2000      	movs	r0, #0
 8009044:	4920      	ldr	r1, [pc, #128]	@ (80090c8 <__ieee754_pow+0xa50>)
 8009046:	f7ff bb35 	b.w	80086b4 <__ieee754_pow+0x3c>
 800904a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800904e:	f7ff bb31 	b.w	80086b4 <__ieee754_pow+0x3c>
 8009052:	4650      	mov	r0, sl
 8009054:	4659      	mov	r1, fp
 8009056:	f7ff bb2d 	b.w	80086b4 <__ieee754_pow+0x3c>
 800905a:	460c      	mov	r4, r1
 800905c:	f7ff bb87 	b.w	800876e <__ieee754_pow+0xf6>
 8009060:	2400      	movs	r4, #0
 8009062:	f7ff bb69 	b.w	8008738 <__ieee754_pow+0xc0>
 8009066:	bf00      	nop
 8009068:	652b82fe 	.word	0x652b82fe
 800906c:	3c971547 	.word	0x3c971547
 8009070:	00000000 	.word	0x00000000
 8009074:	3fe62e43 	.word	0x3fe62e43
 8009078:	fefa39ef 	.word	0xfefa39ef
 800907c:	3fe62e42 	.word	0x3fe62e42
 8009080:	0ca86c39 	.word	0x0ca86c39
 8009084:	be205c61 	.word	0xbe205c61
 8009088:	72bea4d0 	.word	0x72bea4d0
 800908c:	3e663769 	.word	0x3e663769
 8009090:	c5d26bf1 	.word	0xc5d26bf1
 8009094:	3ebbbd41 	.word	0x3ebbbd41
 8009098:	af25de2c 	.word	0xaf25de2c
 800909c:	3f11566a 	.word	0x3f11566a
 80090a0:	16bebd93 	.word	0x16bebd93
 80090a4:	3f66c16c 	.word	0x3f66c16c
 80090a8:	5555553e 	.word	0x5555553e
 80090ac:	3fc55555 	.word	0x3fc55555
 80090b0:	40900000 	.word	0x40900000
 80090b4:	4090cbff 	.word	0x4090cbff
 80090b8:	3f6f3400 	.word	0x3f6f3400
 80090bc:	4090cc00 	.word	0x4090cc00
 80090c0:	3fe00000 	.word	0x3fe00000
 80090c4:	fff00000 	.word	0xfff00000
 80090c8:	3ff00000 	.word	0x3ff00000

080090cc <fabs>:
 80090cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090d0:	4619      	mov	r1, r3
 80090d2:	4770      	bx	lr
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <scalbn>:
 80090d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80090dc:	4616      	mov	r6, r2
 80090de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090e2:	4683      	mov	fp, r0
 80090e4:	468c      	mov	ip, r1
 80090e6:	460b      	mov	r3, r1
 80090e8:	b982      	cbnz	r2, 800910c <scalbn+0x34>
 80090ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090ee:	4303      	orrs	r3, r0
 80090f0:	d035      	beq.n	800915e <scalbn+0x86>
 80090f2:	4b2d      	ldr	r3, [pc, #180]	@ (80091a8 <scalbn+0xd0>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	f7f7 f9ef 	bl	80004d8 <__aeabi_dmul>
 80090fa:	4b2c      	ldr	r3, [pc, #176]	@ (80091ac <scalbn+0xd4>)
 80090fc:	4683      	mov	fp, r0
 80090fe:	429e      	cmp	r6, r3
 8009100:	468c      	mov	ip, r1
 8009102:	da0d      	bge.n	8009120 <scalbn+0x48>
 8009104:	a324      	add	r3, pc, #144	@ (adr r3, 8009198 <scalbn+0xc0>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	e019      	b.n	8009140 <scalbn+0x68>
 800910c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009110:	42ba      	cmp	r2, r7
 8009112:	d109      	bne.n	8009128 <scalbn+0x50>
 8009114:	4602      	mov	r2, r0
 8009116:	f7f7 f829 	bl	800016c <__adddf3>
 800911a:	4683      	mov	fp, r0
 800911c:	468c      	mov	ip, r1
 800911e:	e01e      	b.n	800915e <scalbn+0x86>
 8009120:	460b      	mov	r3, r1
 8009122:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009126:	3a36      	subs	r2, #54	@ 0x36
 8009128:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800912c:	428e      	cmp	r6, r1
 800912e:	dd0a      	ble.n	8009146 <scalbn+0x6e>
 8009130:	a31b      	add	r3, pc, #108	@ (adr r3, 80091a0 <scalbn+0xc8>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	4665      	mov	r5, ip
 8009138:	f363 051e 	bfi	r5, r3, #0, #31
 800913c:	4629      	mov	r1, r5
 800913e:	481c      	ldr	r0, [pc, #112]	@ (80091b0 <scalbn+0xd8>)
 8009140:	f7f7 f9ca 	bl	80004d8 <__aeabi_dmul>
 8009144:	e7e9      	b.n	800911a <scalbn+0x42>
 8009146:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800914a:	4432      	add	r2, r6
 800914c:	428a      	cmp	r2, r1
 800914e:	dcef      	bgt.n	8009130 <scalbn+0x58>
 8009150:	2a00      	cmp	r2, #0
 8009152:	dd08      	ble.n	8009166 <scalbn+0x8e>
 8009154:	f36f 531e 	bfc	r3, #20, #11
 8009158:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800915c:	46ac      	mov	ip, r5
 800915e:	4658      	mov	r0, fp
 8009160:	4661      	mov	r1, ip
 8009162:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009166:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800916a:	da09      	bge.n	8009180 <scalbn+0xa8>
 800916c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009170:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8009174:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009178:	480e      	ldr	r0, [pc, #56]	@ (80091b4 <scalbn+0xdc>)
 800917a:	f041 011f 	orr.w	r1, r1, #31
 800917e:	e7c1      	b.n	8009104 <scalbn+0x2c>
 8009180:	3236      	adds	r2, #54	@ 0x36
 8009182:	f36f 531e 	bfc	r3, #20, #11
 8009186:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800918a:	4658      	mov	r0, fp
 800918c:	4629      	mov	r1, r5
 800918e:	2200      	movs	r2, #0
 8009190:	4b09      	ldr	r3, [pc, #36]	@ (80091b8 <scalbn+0xe0>)
 8009192:	e7d5      	b.n	8009140 <scalbn+0x68>
 8009194:	f3af 8000 	nop.w
 8009198:	c2f8f359 	.word	0xc2f8f359
 800919c:	01a56e1f 	.word	0x01a56e1f
 80091a0:	8800759c 	.word	0x8800759c
 80091a4:	7e37e43c 	.word	0x7e37e43c
 80091a8:	43500000 	.word	0x43500000
 80091ac:	ffff3cb0 	.word	0xffff3cb0
 80091b0:	8800759c 	.word	0x8800759c
 80091b4:	c2f8f359 	.word	0xc2f8f359
 80091b8:	3c900000 	.word	0x3c900000

080091bc <with_errno>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	460d      	mov	r5, r1
 80091c2:	4616      	mov	r6, r2
 80091c4:	f7fe fe22 	bl	8007e0c <__errno>
 80091c8:	4629      	mov	r1, r5
 80091ca:	6006      	str	r6, [r0, #0]
 80091cc:	4620      	mov	r0, r4
 80091ce:	bd70      	pop	{r4, r5, r6, pc}

080091d0 <xflow>:
 80091d0:	b513      	push	{r0, r1, r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	b10c      	cbz	r4, 80091de <xflow+0xe>
 80091da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80091de:	e9cd 2300 	strd	r2, r3, [sp]
 80091e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e6:	f7f7 f977 	bl	80004d8 <__aeabi_dmul>
 80091ea:	2222      	movs	r2, #34	@ 0x22
 80091ec:	b002      	add	sp, #8
 80091ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f2:	f7ff bfe3 	b.w	80091bc <with_errno>

080091f6 <__math_uflow>:
 80091f6:	2200      	movs	r2, #0
 80091f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091fc:	f7ff bfe8 	b.w	80091d0 <xflow>

08009200 <__math_oflow>:
 8009200:	2200      	movs	r2, #0
 8009202:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8009206:	f7ff bfe3 	b.w	80091d0 <xflow>
	...

0800920c <__ieee754_sqrt>:
 800920c:	4a65      	ldr	r2, [pc, #404]	@ (80093a4 <__ieee754_sqrt+0x198>)
 800920e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009212:	438a      	bics	r2, r1
 8009214:	4606      	mov	r6, r0
 8009216:	460f      	mov	r7, r1
 8009218:	460b      	mov	r3, r1
 800921a:	4604      	mov	r4, r0
 800921c:	d10e      	bne.n	800923c <__ieee754_sqrt+0x30>
 800921e:	4602      	mov	r2, r0
 8009220:	f7f7 f95a 	bl	80004d8 <__aeabi_dmul>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f7f6 ff9e 	bl	800016c <__adddf3>
 8009230:	4606      	mov	r6, r0
 8009232:	460f      	mov	r7, r1
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	2900      	cmp	r1, #0
 800923e:	dc0c      	bgt.n	800925a <__ieee754_sqrt+0x4e>
 8009240:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009244:	4302      	orrs	r2, r0
 8009246:	d0f5      	beq.n	8009234 <__ieee754_sqrt+0x28>
 8009248:	b189      	cbz	r1, 800926e <__ieee754_sqrt+0x62>
 800924a:	4602      	mov	r2, r0
 800924c:	f7f6 ff8c 	bl	8000168 <__aeabi_dsub>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	f7f7 fa6a 	bl	800072c <__aeabi_ddiv>
 8009258:	e7ea      	b.n	8009230 <__ieee754_sqrt+0x24>
 800925a:	150a      	asrs	r2, r1, #20
 800925c:	d115      	bne.n	800928a <__ieee754_sqrt+0x7e>
 800925e:	2100      	movs	r1, #0
 8009260:	e009      	b.n	8009276 <__ieee754_sqrt+0x6a>
 8009262:	0ae3      	lsrs	r3, r4, #11
 8009264:	3a15      	subs	r2, #21
 8009266:	0564      	lsls	r4, r4, #21
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0fa      	beq.n	8009262 <__ieee754_sqrt+0x56>
 800926c:	e7f7      	b.n	800925e <__ieee754_sqrt+0x52>
 800926e:	460a      	mov	r2, r1
 8009270:	e7fa      	b.n	8009268 <__ieee754_sqrt+0x5c>
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	3101      	adds	r1, #1
 8009276:	02d8      	lsls	r0, r3, #11
 8009278:	d5fb      	bpl.n	8009272 <__ieee754_sqrt+0x66>
 800927a:	1e48      	subs	r0, r1, #1
 800927c:	1a12      	subs	r2, r2, r0
 800927e:	f1c1 0020 	rsb	r0, r1, #32
 8009282:	fa24 f000 	lsr.w	r0, r4, r0
 8009286:	4303      	orrs	r3, r0
 8009288:	408c      	lsls	r4, r1
 800928a:	2700      	movs	r7, #0
 800928c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009290:	2116      	movs	r1, #22
 8009292:	07d2      	lsls	r2, r2, #31
 8009294:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009298:	463a      	mov	r2, r7
 800929a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800929e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092a2:	bf5c      	itt	pl
 80092a4:	005b      	lslpl	r3, r3, #1
 80092a6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80092aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80092ae:	bf58      	it	pl
 80092b0:	0064      	lslpl	r4, r4, #1
 80092b2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80092b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092ba:	0064      	lsls	r4, r4, #1
 80092bc:	1815      	adds	r5, r2, r0
 80092be:	429d      	cmp	r5, r3
 80092c0:	bfde      	ittt	le
 80092c2:	182a      	addle	r2, r5, r0
 80092c4:	1b5b      	suble	r3, r3, r5
 80092c6:	183f      	addle	r7, r7, r0
 80092c8:	0fe5      	lsrs	r5, r4, #31
 80092ca:	3901      	subs	r1, #1
 80092cc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80092d0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80092d4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80092d8:	d1f0      	bne.n	80092bc <__ieee754_sqrt+0xb0>
 80092da:	460d      	mov	r5, r1
 80092dc:	2620      	movs	r6, #32
 80092de:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80092e2:	4293      	cmp	r3, r2
 80092e4:	eb00 0c01 	add.w	ip, r0, r1
 80092e8:	dc02      	bgt.n	80092f0 <__ieee754_sqrt+0xe4>
 80092ea:	d113      	bne.n	8009314 <__ieee754_sqrt+0x108>
 80092ec:	45a4      	cmp	ip, r4
 80092ee:	d811      	bhi.n	8009314 <__ieee754_sqrt+0x108>
 80092f0:	f1bc 0f00 	cmp.w	ip, #0
 80092f4:	eb0c 0100 	add.w	r1, ip, r0
 80092f8:	da3e      	bge.n	8009378 <__ieee754_sqrt+0x16c>
 80092fa:	2900      	cmp	r1, #0
 80092fc:	db3c      	blt.n	8009378 <__ieee754_sqrt+0x16c>
 80092fe:	f102 0e01 	add.w	lr, r2, #1
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	4672      	mov	r2, lr
 8009306:	45a4      	cmp	ip, r4
 8009308:	bf88      	it	hi
 800930a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800930e:	eba4 040c 	sub.w	r4, r4, ip
 8009312:	4405      	add	r5, r0
 8009314:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009318:	3e01      	subs	r6, #1
 800931a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800931e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009322:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009326:	d1dc      	bne.n	80092e2 <__ieee754_sqrt+0xd6>
 8009328:	431c      	orrs	r4, r3
 800932a:	d01a      	beq.n	8009362 <__ieee754_sqrt+0x156>
 800932c:	4c1e      	ldr	r4, [pc, #120]	@ (80093a8 <__ieee754_sqrt+0x19c>)
 800932e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80093ac <__ieee754_sqrt+0x1a0>
 8009332:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009336:	e9d9 2300 	ldrd	r2, r3, [r9]
 800933a:	f7f6 ff15 	bl	8000168 <__aeabi_dsub>
 800933e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4650      	mov	r0, sl
 8009348:	4659      	mov	r1, fp
 800934a:	f7f7 fb41 	bl	80009d0 <__aeabi_dcmple>
 800934e:	b140      	cbz	r0, 8009362 <__ieee754_sqrt+0x156>
 8009350:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009358:	f1b5 3fff 	cmp.w	r5, #4294967295
 800935c:	d10e      	bne.n	800937c <__ieee754_sqrt+0x170>
 800935e:	4635      	mov	r5, r6
 8009360:	3701      	adds	r7, #1
 8009362:	107b      	asrs	r3, r7, #1
 8009364:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009368:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800936c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009370:	086b      	lsrs	r3, r5, #1
 8009372:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8009376:	e75b      	b.n	8009230 <__ieee754_sqrt+0x24>
 8009378:	4696      	mov	lr, r2
 800937a:	e7c2      	b.n	8009302 <__ieee754_sqrt+0xf6>
 800937c:	f7f6 fef6 	bl	800016c <__adddf3>
 8009380:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4650      	mov	r0, sl
 800938a:	4659      	mov	r1, fp
 800938c:	f7f7 fb16 	bl	80009bc <__aeabi_dcmplt>
 8009390:	b120      	cbz	r0, 800939c <__ieee754_sqrt+0x190>
 8009392:	1cab      	adds	r3, r5, #2
 8009394:	bf08      	it	eq
 8009396:	3701      	addeq	r7, #1
 8009398:	3502      	adds	r5, #2
 800939a:	e7e2      	b.n	8009362 <__ieee754_sqrt+0x156>
 800939c:	1c6b      	adds	r3, r5, #1
 800939e:	f023 0501 	bic.w	r5, r3, #1
 80093a2:	e7de      	b.n	8009362 <__ieee754_sqrt+0x156>
 80093a4:	7ff00000 	.word	0x7ff00000
 80093a8:	0800ab40 	.word	0x0800ab40
 80093ac:	0800ab38 	.word	0x0800ab38

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
