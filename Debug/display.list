
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  0800a8b0  0800a8b0  0000b8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  0000e214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c038  0800c038  0000d038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  0000e214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0000d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c044  0800c044  0000d044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800c048  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b4  20000218  0800c25c  0000e218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  0800c25c  0000e9cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c48  00000000  00000000  0000e23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063c6  00000000  00000000  00035e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00011715  00000000  00000000  0003c24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  0004d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e5f  00000000  00000000  0004f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6ad  00000000  00000000  000510d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028974  00000000  00000000  0006d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000984cb  00000000  00000000  000960f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e5c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000502c  00000000  00000000  0012e608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00133634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a898 	.word	0x0800a898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800a898 	.word	0x0800a898

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <W5500_Select>:

    return ans;
}
//ethernet код
void W5500_Select(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	4801      	ldr	r0, [pc, #4]	@ (8000f90 <W5500_Select+0xc>)
 8000f8a:	f002 b851 	b.w	8003030 <HAL_GPIO_WritePin>
 8000f8e:	bf00      	nop
 8000f90:	40010800 	.word	0x40010800

08000f94 <W5500_Unselect>:
}

void W5500_Unselect(void){
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	4801      	ldr	r0, [pc, #4]	@ (8000fa0 <W5500_Unselect+0xc>)
 8000f9a:	f002 b849 	b.w	8003030 <HAL_GPIO_WritePin>
 8000f9e:	bf00      	nop
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <W5500_ReadBuff>:
}

void W5500_ReadBuff(uint8_t* buff, uint16_t len){
 8000fa4:	460a      	mov	r2, r1
	HAL_SPI_Receive(&hspi1,buff,len,HAL_MAX_DELAY);
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	4601      	mov	r1, r0
 8000fac:	4801      	ldr	r0, [pc, #4]	@ (8000fb4 <W5500_ReadBuff+0x10>)
 8000fae:	f005 b813 	b.w	8005fd8 <HAL_SPI_Receive>
 8000fb2:	bf00      	nop
 8000fb4:	200002f4 	.word	0x200002f4

08000fb8 <W5500_ReadByte>:

void W5500_WriteBuff(uint8_t* buff,uint16_t len){
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
}

uint8_t W5500_ReadByte(void){
 8000fb8:	b507      	push	{r0, r1, r2, lr}
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f10d 0007 	add.w	r0, sp, #7
 8000fc0:	f7ff fff0 	bl	8000fa4 <W5500_ReadBuff>
	return byte;
}
 8000fc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000fc8:	b003      	add	sp, #12
 8000fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000fd0 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff,uint16_t len){
 8000fd0:	460a      	mov	r2, r1
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4801      	ldr	r0, [pc, #4]	@ (8000fe0 <W5500_WriteBuff+0x10>)
 8000fda:	f004 be51 	b.w	8005c80 <HAL_SPI_Transmit>
 8000fde:	bf00      	nop
 8000fe0:	200002f4 	.word	0x200002f4

08000fe4 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte){
 8000fe4:	b507      	push	{r0, r1, r2, lr}
	W5500_WriteBuff(&byte, sizeof(byte));
 8000fe6:	2101      	movs	r1, #1
void W5500_WriteByte(uint8_t byte){
 8000fe8:	f88d 0007 	strb.w	r0, [sp, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000fec:	f10d 0007 	add.w	r0, sp, #7
 8000ff0:	f7ff ffee 	bl	8000fd0 <W5500_WriteBuff>
}
 8000ff4:	b003      	add	sp, #12
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffa:	0000      	movs	r0, r0
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <si5351_set_frequency>:
err_t si5351_set_frequency(uint8_t output, uint32_t frequency) {
 8001000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	4682      	mov	sl, r0
    if (output > 2) return ERROR_INVALIDPARAMETER;
 8001006:	f1ba 0f02 	cmp.w	sl, #2
err_t si5351_set_frequency(uint8_t output, uint32_t frequency) {
 800100a:	4608      	mov	r0, r1
    if (output > 2) return ERROR_INVALIDPARAMETER;
 800100c:	f200 80c9 	bhi.w	80011a2 <si5351_set_frequency+0x1a2>
    if (frequency < 8000 || frequency > 150000000) return ERROR_INVALIDPARAMETER;
 8001010:	4b6f      	ldr	r3, [pc, #444]	@ (80011d0 <si5351_set_frequency+0x1d0>)
 8001012:	f5a1 52fa 	sub.w	r2, r1, #8000	@ 0x1f40
 8001016:	429a      	cmp	r2, r3
 8001018:	f200 80c3 	bhi.w	80011a2 <si5351_set_frequency+0x1a2>
    if (frequency < 500000) {
 800101c:	4a6d      	ldr	r2, [pc, #436]	@ (80011d4 <si5351_set_frequency+0x1d4>)
 800101e:	4291      	cmp	r1, r2
 8001020:	f200 8099 	bhi.w	8001156 <si5351_set_frequency+0x156>
 8001024:	2307      	movs	r3, #7
    uint32_t r_div_value = 1;
 8001026:	2401      	movs	r4, #1
            r_div_value *= 2;
 8001028:	0064      	lsls	r4, r4, #1
            min_freq = frequency * r_div_value;
 800102a:	fb04 f100 	mul.w	r1, r4, r0
        while (min_freq < 500000 && r_div_value < 128) {
 800102e:	4291      	cmp	r1, r2
 8001030:	d801      	bhi.n	8001036 <si5351_set_frequency+0x36>
 8001032:	3b01      	subs	r3, #1
 8001034:	d1f8      	bne.n	8001028 <si5351_set_frequency+0x28>
        switch (r_div_value) {
 8001036:	2c10      	cmp	r4, #16
 8001038:	f000 8090 	beq.w	800115c <si5351_set_frequency+0x15c>
 800103c:	f200 8082 	bhi.w	8001144 <si5351_set_frequency+0x144>
 8001040:	2c04      	cmp	r4, #4
 8001042:	f000 808d 	beq.w	8001160 <si5351_set_frequency+0x160>
 8001046:	2c08      	cmp	r4, #8
 8001048:	f000 808c 	beq.w	8001164 <si5351_set_frequency+0x164>
 800104c:	1ea2      	subs	r2, r4, #2
 800104e:	4255      	negs	r5, r2
 8001050:	4155      	adcs	r5, r2
    double f_ms = (double)frequency * r_div_value;
 8001052:	f7ff f9c7 	bl	80003e4 <__aeabi_ui2d>
 8001056:	4606      	mov	r6, r0
 8001058:	4620      	mov	r0, r4
 800105a:	460f      	mov	r7, r1
 800105c:	f7ff f9c2 	bl	80003e4 <__aeabi_ui2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4630      	mov	r0, r6
 8001066:	4639      	mov	r1, r7
 8001068:	f7ff fa36 	bl	80004d8 <__aeabi_dmul>
    uint32_t div = (uint32_t)(800000000.0 / f_ms); // Целевой делитель для ~800 МГц
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
    double f_ms = (double)frequency * r_div_value;
 8001070:	4606      	mov	r6, r0
 8001072:	460f      	mov	r7, r1
    uint32_t div = (uint32_t)(800000000.0 / f_ms); // Целевой делитель для ~800 МГц
 8001074:	a14e      	add	r1, pc, #312	@ (adr r1, 80011b0 <si5351_set_frequency+0x1b0>)
 8001076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800107a:	f7ff fb57 	bl	800072c <__aeabi_ddiv>
 800107e:	f7ff fd03 	bl	8000a88 <__aeabi_d2uiz>
    if (div > 900) div = 900;
 8001082:	f5b0 7f61 	cmp.w	r0, #900	@ 0x384
 8001086:	bf28      	it	cs
 8001088:	f44f 7061 	movcs.w	r0, #900	@ 0x384
 800108c:	2808      	cmp	r0, #8
 800108e:	4604      	mov	r4, r0
 8001090:	bf38      	it	cc
 8001092:	2408      	movcc	r4, #8
    double f_pll = f_ms * div;
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff f9a5 	bl	80003e4 <__aeabi_ui2d>
 800109a:	4632      	mov	r2, r6
 800109c:	463b      	mov	r3, r7
 800109e:	f7ff fa1b 	bl	80004d8 <__aeabi_dmul>
    if (f_pll < 600000000 || f_pll > 900000000) {
 80010a2:	a345      	add	r3, pc, #276	@ (adr r3, 80011b8 <si5351_set_frequency+0x1b8>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    double f_pll = f_ms * div;
 80010a8:	4680      	mov	r8, r0
 80010aa:	4689      	mov	r9, r1
 80010ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
    if (f_pll < 600000000 || f_pll > 900000000) {
 80010b0:	f7ff fc84 	bl	80009bc <__aeabi_dcmplt>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d15b      	bne.n	8001170 <si5351_set_frequency+0x170>
 80010b8:	a341      	add	r3, pc, #260	@ (adr r3, 80011c0 <si5351_set_frequency+0x1c0>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	4640      	mov	r0, r8
 80010c0:	4649      	mov	r1, r9
 80010c2:	f7ff fc99 	bl	80009f8 <__aeabi_dcmpgt>
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d168      	bne.n	800119c <si5351_set_frequency+0x19c>
    double f_xtal = (double)m_si5351Config.crystalFreq;
 80010ca:	4b43      	ldr	r3, [pc, #268]	@ (80011d8 <si5351_set_frequency+0x1d8>)
 80010cc:	6858      	ldr	r0, [r3, #4]
 80010ce:	f7ff f989 	bl	80003e4 <__aeabi_ui2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
    uint32_t mult = (uint32_t)(f_pll / f_xtal);
 80010d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80010da:	f7ff fb27 	bl	800072c <__aeabi_ddiv>
 80010de:	4606      	mov	r6, r0
 80010e0:	460f      	mov	r7, r1
 80010e2:	f7ff fcd1 	bl	8000a88 <__aeabi_d2uiz>
 80010e6:	4680      	mov	r8, r0
    double fraction = (f_pll / f_xtal) - mult;
 80010e8:	f7ff f97c 	bl	80003e4 <__aeabi_ui2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4630      	mov	r0, r6
 80010f2:	4639      	mov	r1, r7
 80010f4:	f7ff f838 	bl	8000168 <__aeabi_dsub>
    uint32_t num = (uint32_t)round(fraction * 1048575.0); // 20-битный числитель
 80010f8:	a333      	add	r3, pc, #204	@ (adr r3, 80011c8 <si5351_set_frequency+0x1c8>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f9eb 	bl	80004d8 <__aeabi_dmul>
 8001102:	f008 fce5 	bl	8009ad0 <round>
    si5351PLL_t pll = (output == 2) ? SI5351_PLL_B : SI5351_PLL_A;
 8001106:	f1aa 0302 	sub.w	r3, sl, #2
 800110a:	425e      	negs	r6, r3
 800110c:	415e      	adcs	r6, r3
    uint32_t num = (uint32_t)round(fraction * 1048575.0); // 20-битный числитель
 800110e:	f7ff fcbb 	bl	8000a88 <__aeabi_d2uiz>
    ASSERT_STATUS(si5351_setupPLL(pll, mult, num, denom));
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <si5351_set_frequency+0x1dc>)
    uint32_t num = (uint32_t)round(fraction * 1048575.0); // 20-битный числитель
 8001114:	4602      	mov	r2, r0
    ASSERT_STATUS(si5351_setupPLL(pll, mult, num, denom));
 8001116:	fa5f f188 	uxtb.w	r1, r8
 800111a:	4630      	mov	r0, r6
 800111c:	f000 feb4 	bl	8001e88 <si5351_setupPLL>
 8001120:	2800      	cmp	r0, #0
 8001122:	d13f      	bne.n	80011a4 <si5351_set_frequency+0x1a4>
    ASSERT_STATUS(si5351_setupMultisynth(output, pll, div, 0, 1)); // Целочисленный режим
 8001124:	2301      	movs	r3, #1
 8001126:	4622      	mov	r2, r4
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4631      	mov	r1, r6
 800112c:	4603      	mov	r3, r0
 800112e:	4650      	mov	r0, sl
 8001130:	f000 ff92 	bl	8002058 <si5351_setupMultisynth>
 8001134:	bbb0      	cbnz	r0, 80011a4 <si5351_set_frequency+0x1a4>
    ASSERT_STATUS(si5351_setupRdiv(output, r_div));
 8001136:	4629      	mov	r1, r5
 8001138:	4650      	mov	r0, sl
}
 800113a:	b004      	add	sp, #16
 800113c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ASSERT_STATUS(si5351_setupRdiv(output, r_div));
 8001140:	f001 b8d2 	b.w	80022e8 <si5351_setupRdiv>
        switch (r_div_value) {
 8001144:	2c40      	cmp	r4, #64	@ 0x40
 8001146:	d00f      	beq.n	8001168 <si5351_set_frequency+0x168>
 8001148:	2c80      	cmp	r4, #128	@ 0x80
 800114a:	d00f      	beq.n	800116c <si5351_set_frequency+0x16c>
            default:  r_div = SI5351_R_DIV_1;   break;
 800114c:	2c20      	cmp	r4, #32
 800114e:	bf0c      	ite	eq
 8001150:	2505      	moveq	r5, #5
 8001152:	2500      	movne	r5, #0
 8001154:	e77d      	b.n	8001052 <si5351_set_frequency+0x52>
    uint32_t r_div_value = 1;
 8001156:	2401      	movs	r4, #1
    si5351RDiv_t r_div = SI5351_R_DIV_1;
 8001158:	2500      	movs	r5, #0
 800115a:	e77a      	b.n	8001052 <si5351_set_frequency+0x52>
            case 16:  r_div = SI5351_R_DIV_16;  break;
 800115c:	2504      	movs	r5, #4
 800115e:	e778      	b.n	8001052 <si5351_set_frequency+0x52>
        switch (r_div_value) {
 8001160:	2502      	movs	r5, #2
 8001162:	e776      	b.n	8001052 <si5351_set_frequency+0x52>
            case 8:   r_div = SI5351_R_DIV_8;   break;
 8001164:	2503      	movs	r5, #3
 8001166:	e774      	b.n	8001052 <si5351_set_frequency+0x52>
            case 64:  r_div = SI5351_R_DIV_64;  break;
 8001168:	2506      	movs	r5, #6
 800116a:	e772      	b.n	8001052 <si5351_set_frequency+0x52>
            case 128: r_div = SI5351_R_DIV_128; break;
 800116c:	2507      	movs	r5, #7
 800116e:	e770      	b.n	8001052 <si5351_set_frequency+0x52>
        div = (f_pll < 600000000) ? (uint32_t)ceil(600000000.0 / f_ms) : 900;
 8001170:	4632      	mov	r2, r6
 8001172:	a111      	add	r1, pc, #68	@ (adr r1, 80011b8 <si5351_set_frequency+0x1b8>)
 8001174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001178:	463b      	mov	r3, r7
 800117a:	f7ff fad7 	bl	800072c <__aeabi_ddiv>
 800117e:	f008 fbab 	bl	80098d8 <ceil>
 8001182:	f7ff fc81 	bl	8000a88 <__aeabi_d2uiz>
 8001186:	4604      	mov	r4, r0
        f_pll = f_ms * div;
 8001188:	4620      	mov	r0, r4
 800118a:	f7ff f92b 	bl	80003e4 <__aeabi_ui2d>
 800118e:	4632      	mov	r2, r6
 8001190:	463b      	mov	r3, r7
 8001192:	f7ff f9a1 	bl	80004d8 <__aeabi_dmul>
 8001196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800119a:	e796      	b.n	80010ca <si5351_set_frequency+0xca>
        div = (f_pll < 600000000) ? (uint32_t)ceil(600000000.0 / f_ms) : 900;
 800119c:	f44f 7461 	mov.w	r4, #900	@ 0x384
 80011a0:	e7f2      	b.n	8001188 <si5351_set_frequency+0x188>
    if (output > 2) return ERROR_INVALIDPARAMETER;
 80011a2:	2004      	movs	r0, #4
}
 80011a4:	b004      	add	sp, #16
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	00000000 	.word	0x00000000
 80011b4:	41c7d784 	.word	0x41c7d784
 80011b8:	00000000 	.word	0x00000000
 80011bc:	41c1e1a3 	.word	0x41c1e1a3
 80011c0:	80000000 	.word	0x80000000
 80011c4:	41cad274 	.word	0x41cad274
 80011c8:	00000000 	.word	0x00000000
 80011cc:	412ffffe 	.word	0x412ffffe
 80011d0:	08f0b240 	.word	0x08f0b240
 80011d4:	0007a11f 	.word	0x0007a11f
 80011d8:	200003f4 	.word	0x200003f4
 80011dc:	000fffff 	.word	0x000fffff

080011e0 <int_to_str>:
void int_to_str(int num, char *str) {
 80011e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (num == 0) {
 80011e2:	b160      	cbz	r0, 80011fe <int_to_str+0x1e>
 80011e4:	aa01      	add	r2, sp, #4
    int i = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	4616      	mov	r6, r2
        tmp[i++] = '0' + (num % 10);
 80011ea:	240a      	movs	r4, #10
    while (num > 0) {
 80011ec:	2800      	cmp	r0, #0
 80011ee:	dc0b      	bgt.n	8001208 <int_to_str+0x28>
 80011f0:	461a      	mov	r2, r3
 80011f2:	1e48      	subs	r0, r1, #1
    while (i-- > 0) {
 80011f4:	3a01      	subs	r2, #1
 80011f6:	d211      	bcs.n	800121c <int_to_str+0x3c>
    str[j] = '\0';
 80011f8:	2200      	movs	r2, #0
 80011fa:	54ca      	strb	r2, [r1, r3]
 80011fc:	e002      	b.n	8001204 <int_to_str+0x24>
        str[0] = '0';
 80011fe:	2330      	movs	r3, #48	@ 0x30
        str[1] = '\0';
 8001200:	7048      	strb	r0, [r1, #1]
        str[0] = '0';
 8001202:	700b      	strb	r3, [r1, #0]
}
 8001204:	b004      	add	sp, #16
 8001206:	bd70      	pop	{r4, r5, r6, pc}
        tmp[i++] = '0' + (num % 10);
 8001208:	fb90 f5f4 	sdiv	r5, r0, r4
 800120c:	fb04 0015 	mls	r0, r4, r5, r0
 8001210:	3030      	adds	r0, #48	@ 0x30
 8001212:	f802 0b01 	strb.w	r0, [r2], #1
 8001216:	3301      	adds	r3, #1
        num /= 10;
 8001218:	4628      	mov	r0, r5
 800121a:	e7e7      	b.n	80011ec <int_to_str+0xc>
        str[j++] = tmp[i];
 800121c:	5cb4      	ldrb	r4, [r6, r2]
 800121e:	f800 4f01 	strb.w	r4, [r0, #1]!
 8001222:	e7e7      	b.n	80011f4 <int_to_str+0x14>

08001224 <Is_Flash_Valid>:
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <Is_Flash_Valid+0x10>)
 8001226:	f8d3 0c00 	ldr.w	r0, [r3, #3072]	@ 0xc00
}
 800122a:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <Is_Flash_Valid+0x14>)
 800122c:	1ac3      	subs	r3, r0, r3
 800122e:	4258      	negs	r0, r3
 8001230:	4158      	adcs	r0, r3
 8001232:	4770      	bx	lr
 8001234:	0801f000 	.word	0x0801f000
 8001238:	deadbeef 	.word	0xdeadbeef

0800123c <Read_Flash_Array>:
void Read_Flash_Array(int32_t *output) {
 800123c:	b508      	push	{r3, lr}
 800123e:	4602      	mov	r2, r0
    if (!Is_Flash_Valid()) {
 8001240:	f7ff fff0 	bl	8001224 <Is_Flash_Valid>
 8001244:	b918      	cbnz	r0, 800124e <Read_Flash_Array+0x12>
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8001246:	6010      	str	r0, [r2, #0]
 8001248:	6050      	str	r0, [r2, #4]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 800124a:	6090      	str	r0, [r2, #8]
}
 800124c:	bd08      	pop	{r3, pc}
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 800124e:	4b03      	ldr	r3, [pc, #12]	@ (800125c <Read_Flash_Array+0x20>)
 8001250:	cb03      	ldmia	r3!, {r0, r1}
 8001252:	6010      	str	r0, [r2, #0]
 8001254:	6051      	str	r1, [r2, #4]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	e7f7      	b.n	800124a <Read_Flash_Array+0xe>
 800125a:	bf00      	nop
 800125c:	0801fc04 	.word	0x0801fc04

08001260 <Write_Flash_Array>:
void Write_Flash_Array(int32_t *data) {
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	b08b      	sub	sp, #44	@ 0x2c
 8001264:	4605      	mov	r5, r0
    HAL_FLASH_Unlock();
 8001266:	f001 fd0b 	bl	8002c80 <HAL_FLASH_Unlock>
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800126a:	2300      	movs	r3, #0
 800126c:	9302      	str	r3, [sp, #8]
    erase.NbPages = 1;
 800126e:	2301      	movs	r3, #1
 8001270:	4c12      	ldr	r4, [pc, #72]	@ (80012bc <Write_Flash_Array+0x5c>)
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001272:	a901      	add	r1, sp, #4
 8001274:	a802      	add	r0, sp, #8
    erase.NbPages = 1;
 8001276:	e9cd 4304 	strd	r4, r3, [sp, #16]
    HAL_FLASHEx_Erase(&erase, &page_error);
 800127a:	f001 fdab 	bl	8002dd4 <HAL_FLASHEx_Erase>
    flash_data.magic = FLASH_MAGIC_NUMBER;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <Write_Flash_Array+0x60>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8001280:	6828      	ldr	r0, [r5, #0]
 8001282:	6869      	ldr	r1, [r5, #4]
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8001284:	9306      	str	r3, [sp, #24]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8001286:	ab07      	add	r3, sp, #28
 8001288:	c303      	stmia	r3!, {r0, r1}
 800128a:	68a8      	ldr	r0, [r5, #8]
    for (uint32_t i = 0; i < size; i++) {
 800128c:	4f0d      	ldr	r7, [pc, #52]	@ (80012c4 <Write_Flash_Array+0x64>)
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 800128e:	6018      	str	r0, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8001290:	ae06      	add	r6, sp, #24
        uint32_t value = ptr[i];
 8001292:	f856 5b04 	ldr.w	r5, [r6], #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8001296:	4621      	mov	r1, r4
 8001298:	2300      	movs	r3, #0
 800129a:	b2aa      	uxth	r2, r5
 800129c:	2001      	movs	r0, #1
 800129e:	f001 fd35 	bl	8002d0c <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 80012a2:	1ca1      	adds	r1, r4, #2
 80012a4:	2300      	movs	r3, #0
 80012a6:	2001      	movs	r0, #1
 80012a8:	0c2a      	lsrs	r2, r5, #16
        addr += 4;
 80012aa:	3404      	adds	r4, #4
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 80012ac:	f001 fd2e 	bl	8002d0c <HAL_FLASH_Program>
    for (uint32_t i = 0; i < size; i++) {
 80012b0:	42bc      	cmp	r4, r7
 80012b2:	d1ee      	bne.n	8001292 <Write_Flash_Array+0x32>
    HAL_FLASH_Lock();
 80012b4:	f001 fcf6 	bl	8002ca4 <HAL_FLASH_Lock>
}
 80012b8:	b00b      	add	sp, #44	@ 0x2c
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012bc:	0801fc00 	.word	0x0801fc00
 80012c0:	deadbeef 	.word	0xdeadbeef
 80012c4:	0801fc20 	.word	0x0801fc20

080012c8 <print_interface_mode0>:
void print_interface_mode0(){
 80012c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ssd1306_SetCursor(1, 1);//установка курсора
 80012ca:	2101      	movs	r1, #1
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 80012cc:	2501      	movs	r5, #1
 80012ce:	4c21      	ldr	r4, [pc, #132]	@ (8001354 <print_interface_mode0+0x8c>)
	ssd1306_SetCursor(1, 1);//установка курсора
 80012d0:	4608      	mov	r0, r1
 80012d2:	f001 fb23 	bl	800291c <ssd1306_SetCursor>
	ssd1306_Fill(Black);//заполнение экрана чёрным(типа стирание)
 80012d6:	2000      	movs	r0, #0
 80012d8:	f001 fa70 	bl	80027bc <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 80012dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012e0:	481d      	ldr	r0, [pc, #116]	@ (8001358 <print_interface_mode0+0x90>)
 80012e2:	9500      	str	r5, [sp, #0]
 80012e4:	f001 fb04 	bl	80028f0 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 80012e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012ec:	481b      	ldr	r0, [pc, #108]	@ (800135c <print_interface_mode0+0x94>)
 80012ee:	9500      	str	r5, [sp, #0]
 80012f0:	f001 fafe 	bl	80028f0 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 80012f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012f8:	4819      	ldr	r0, [pc, #100]	@ (8001360 <print_interface_mode0+0x98>)
 80012fa:	9500      	str	r5, [sp, #0]
 80012fc:	f001 faf8 	bl	80028f0 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8001300:	210a      	movs	r1, #10
 8001302:	4628      	mov	r0, r5
 8001304:	f001 fb0a 	bl	800291c <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8001308:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800130c:	4815      	ldr	r0, [pc, #84]	@ (8001364 <print_interface_mode0+0x9c>)
 800130e:	9500      	str	r5, [sp, #0]
 8001310:	f001 faee 	bl	80028f0 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8001314:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001318:	4810      	ldr	r0, [pc, #64]	@ (800135c <print_interface_mode0+0x94>)
 800131a:	9500      	str	r5, [sp, #0]
 800131c:	f001 fae8 	bl	80028f0 <ssd1306_WriteString>
	if(choiced_channel==0){
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <print_interface_mode0+0xa0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b953      	cbnz	r3, 800133c <print_interface_mode0+0x74>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8001326:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800132a:	4810      	ldr	r0, [pc, #64]	@ (800136c <print_interface_mode0+0xa4>)
 800132c:	9500      	str	r5, [sp, #0]
		ssd1306_WriteString("ch2", Font_7x10, White);
 800132e:	f001 fadf 	bl	80028f0 <ssd1306_WriteString>
}
 8001332:	b003      	add	sp, #12
 8001334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ssd1306_UpdateScreen();//самая важная функция, без которой что было отправлено на дисплей не отобразится
 8001338:	f001 ba4c 	b.w	80027d4 <ssd1306_UpdateScreen>
	}else if(choiced_channel==1){
 800133c:	2b01      	cmp	r3, #1
		ssd1306_WriteString("ch1", Font_7x10, White);
 800133e:	bf07      	ittee	eq
 8001340:	9300      	streq	r3, [sp, #0]
 8001342:	480b      	ldreq	r0, [pc, #44]	@ (8001370 <print_interface_mode0+0xa8>)
		ssd1306_WriteString("ch2", Font_7x10, White);
 8001344:	480b      	ldrne	r0, [pc, #44]	@ (8001374 <print_interface_mode0+0xac>)
 8001346:	9500      	strne	r5, [sp, #0]
		ssd1306_WriteString("ch1", Font_7x10, White);
 8001348:	bf0c      	ite	eq
 800134a:	e894 000e 	ldmiaeq.w	r4, {r1, r2, r3}
		ssd1306_WriteString("ch2", Font_7x10, White);
 800134e:	e894 000e 	ldmiane.w	r4, {r1, r2, r3}
 8001352:	e7ec      	b.n	800132e <print_interface_mode0+0x66>
 8001354:	0800aa0c 	.word	0x0800aa0c
 8001358:	2000023d 	.word	0x2000023d
 800135c:	0800a8b0 	.word	0x0800a8b0
 8001360:	20000244 	.word	0x20000244
 8001364:	2000024b 	.word	0x2000024b
 8001368:	2000023b 	.word	0x2000023b
 800136c:	0800a8b4 	.word	0x0800a8b4
 8001370:	0800a8b8 	.word	0x0800a8b8
 8001374:	0800a8bc 	.word	0x0800a8bc

08001378 <print_interface_mode1>:
	ssd1306_SetCursor(1, 1);
 8001378:	2101      	movs	r1, #1
void print_interface_mode1(){
 800137a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_SetCursor(1, 1);
 800137e:	4608      	mov	r0, r1
void print_interface_mode1(){
 8001380:	b085      	sub	sp, #20
 8001382:	4d5c      	ldr	r5, [pc, #368]	@ (80014f4 <print_interface_mode1+0x17c>)
	ssd1306_SetCursor(1, 1);
 8001384:	f001 faca 	bl	800291c <ssd1306_SetCursor>
	if(choiced_num==0){
 8001388:	4f5b      	ldr	r7, [pc, #364]	@ (80014f8 <print_interface_mode1+0x180>)
	ssd1306_Fill(Black);
 800138a:	2000      	movs	r0, #0
 800138c:	f001 fa16 	bl	80027bc <ssd1306_Fill>
		uint16_t size=strlen(num_string[choiced_channel]);
 8001390:	7828      	ldrb	r0, [r5, #0]
 8001392:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 80014fc <print_interface_mode1+0x184>
	if(choiced_num==0){
 8001396:	783b      	ldrb	r3, [r7, #0]
		uint16_t size=strlen(num_string[choiced_channel]);
 8001398:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800139c:	4440      	add	r0, r8
	if(choiced_num==0){
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d13d      	bne.n	800141e <print_interface_mode1+0xa6>
		uint16_t size=strlen(num_string[choiced_channel]);
 80013a2:	f7fe fed5 	bl	8000150 <strlen>
			ssd1306_WriteString("0", Font_7x10, White);
 80013a6:	2701      	movs	r7, #1
		uint16_t size=strlen(num_string[choiced_channel]);
 80013a8:	4606      	mov	r6, r0
		for(int i=size;i<6;++i){
 80013aa:	4c55      	ldr	r4, [pc, #340]	@ (8001500 <print_interface_mode1+0x188>)
			ssd1306_WriteString("0", Font_7x10, White);
 80013ac:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8001504 <print_interface_mode1+0x18c>
		for(int i=size;i<6;++i){
 80013b0:	2e05      	cmp	r6, #5
 80013b2:	dd2c      	ble.n	800140e <print_interface_mode1+0x96>
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 80013b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80013b8:	2601      	movs	r6, #1
 80013ba:	7828      	ldrb	r0, [r5, #0]
 80013bc:	9600      	str	r6, [sp, #0]
 80013be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80013c2:	4440      	add	r0, r8
 80013c4:	f001 fa94 	bl	80028f0 <ssd1306_WriteString>
		ssd1306_WriteString("   ", Font_7x10, White);
 80013c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80013cc:	484e      	ldr	r0, [pc, #312]	@ (8001508 <print_interface_mode1+0x190>)
 80013ce:	9600      	str	r6, [sp, #0]
 80013d0:	f001 fa8e 	bl	80028f0 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 80013d4:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <print_interface_mode1+0x194>)
 80013d6:	484e      	ldr	r0, [pc, #312]	@ (8001510 <print_interface_mode1+0x198>)
 80013d8:	9600      	str	r6, [sp, #0]
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
			ssd1306_WriteString("^", Font_7x10, White);
 80013dc:	f001 fa88 	bl	80028f0 <ssd1306_WriteString>
	if(freq[choiced_channel]==160000){
 80013e0:	782a      	ldrb	r2, [r5, #0]
 80013e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001514 <print_interface_mode1+0x19c>)
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001518 <print_interface_mode1+0x1a0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d175      	bne.n	80014da <print_interface_mode1+0x162>
		ssd1306_SetCursor(77, 18);
 80013ee:	2112      	movs	r1, #18
 80013f0:	204d      	movs	r0, #77	@ 0x4d
 80013f2:	f001 fa93 	bl	800291c <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 80013f6:	2201      	movs	r2, #1
 80013f8:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <print_interface_mode1+0x188>)
 80013fa:	4848      	ldr	r0, [pc, #288]	@ (800151c <print_interface_mode1+0x1a4>)
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	cb0e      	ldmia	r3, {r1, r2, r3}
		ssd1306_WriteString("MIN", Font_7x10, White);
 8001400:	f001 fa76 	bl	80028f0 <ssd1306_WriteString>
}
 8001404:	b005      	add	sp, #20
 8001406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ssd1306_UpdateScreen();
 800140a:	f001 b9e3 	b.w	80027d4 <ssd1306_UpdateScreen>
			ssd1306_WriteString("0", Font_7x10, White);
 800140e:	4648      	mov	r0, r9
 8001410:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001414:	9700      	str	r7, [sp, #0]
 8001416:	f001 fa6b 	bl	80028f0 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 800141a:	3601      	adds	r6, #1
 800141c:	e7c8      	b.n	80013b0 <print_interface_mode1+0x38>
		uint16_t size=strlen(num_string[choiced_channel]);
 800141e:	f7fe fe97 	bl	8000150 <strlen>
		for(int i=5;i>size-1;--i){
 8001422:	2405      	movs	r4, #5
		uint16_t size=strlen(num_string[choiced_channel]);
 8001424:	4606      	mov	r6, r0
				ssd1306_WriteString("0", Font_7x10, White);
 8001426:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8001500 <print_interface_mode1+0x188>
 800142a:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8001504 <print_interface_mode1+0x18c>
				ssd1306_WriteString("0", Font_11x18, White);
 800142e:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800150c <print_interface_mode1+0x194>
		for(int i=5;i>size-1;--i){
 8001432:	42a6      	cmp	r6, r4
 8001434:	dd28      	ble.n	8001488 <print_interface_mode1+0x110>
		for(int i=0;i<size;++i){
 8001436:	2400      	movs	r4, #0
 8001438:	46a3      	mov	fp, r4
				ssd1306_WriteString(str, Font_7x10, White);
 800143a:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8001500 <print_interface_mode1+0x188>
				ssd1306_WriteString(str, Font_11x18, White);
 800143e:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 800150c <print_interface_mode1+0x194>
		for(int i=0;i<size;++i){
 8001442:	42a6      	cmp	r6, r4
 8001444:	dc30      	bgt.n	80014a8 <print_interface_mode1+0x130>
		ssd1306_WriteString("   ", Font_7x10, White);
 8001446:	2601      	movs	r6, #1
 8001448:	4c2d      	ldr	r4, [pc, #180]	@ (8001500 <print_interface_mode1+0x188>)
 800144a:	9600      	str	r6, [sp, #0]
 800144c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001450:	482d      	ldr	r0, [pc, #180]	@ (8001508 <print_interface_mode1+0x190>)
 8001452:	f001 fa4d 	bl	80028f0 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8001456:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800145a:	9600      	str	r6, [sp, #0]
 800145c:	482c      	ldr	r0, [pc, #176]	@ (8001510 <print_interface_mode1+0x198>)
 800145e:	f001 fa47 	bl	80028f0 <ssd1306_WriteString>
		if(choice==1){
 8001462:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <print_interface_mode1+0x1a8>)
 8001464:	781e      	ldrb	r6, [r3, #0]
 8001466:	2e01      	cmp	r6, #1
 8001468:	d1ba      	bne.n	80013e0 <print_interface_mode1+0x68>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 800146a:	7838      	ldrb	r0, [r7, #0]
 800146c:	2112      	movs	r1, #18
 800146e:	f1c0 0006 	rsb	r0, r0, #6
 8001472:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001476:	3001      	adds	r0, #1
 8001478:	b2c0      	uxtb	r0, r0
 800147a:	f001 fa4f 	bl	800291c <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 800147e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001482:	4828      	ldr	r0, [pc, #160]	@ (8001524 <print_interface_mode1+0x1ac>)
 8001484:	9600      	str	r6, [sp, #0]
 8001486:	e7a9      	b.n	80013dc <print_interface_mode1+0x64>
			if(i==choiced_num-1){
 8001488:	783b      	ldrb	r3, [r7, #0]
				ssd1306_WriteString("0", Font_7x10, White);
 800148a:	4658      	mov	r0, fp
			if(i==choiced_num-1){
 800148c:	3b01      	subs	r3, #1
 800148e:	42a3      	cmp	r3, r4
 8001490:	f04f 0301 	mov.w	r3, #1
				ssd1306_WriteString("0", Font_11x18, White);
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	bf0c      	ite	eq
 8001498:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString("0", Font_7x10, White);
 800149c:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
 80014a0:	f001 fa26 	bl	80028f0 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 80014a4:	3c01      	subs	r4, #1
 80014a6:	e7c4      	b.n	8001432 <print_interface_mode1+0xba>
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80014a8:	782b      	ldrb	r3, [r5, #0]
				ssd1306_WriteString(str, Font_7x10, White);
 80014aa:	a803      	add	r0, sp, #12
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80014ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80014b0:	4443      	add	r3, r8
 80014b2:	5d1a      	ldrb	r2, [r3, r4]
			if(i==size-choiced_num){
 80014b4:	783b      	ldrb	r3, [r7, #0]
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80014b6:	f88d 200c 	strb.w	r2, [sp, #12]
			if(i==size-choiced_num){
 80014ba:	1af3      	subs	r3, r6, r3
 80014bc:	42a3      	cmp	r3, r4
				ssd1306_WriteString(str, Font_11x18, White);
 80014be:	f04f 0301 	mov.w	r3, #1
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	bf0c      	ite	eq
 80014c6:	e89a 000e 	ldmiaeq.w	sl, {r1, r2, r3}
				ssd1306_WriteString(str, Font_7x10, White);
 80014ca:	e899 000e 	ldmiane.w	r9, {r1, r2, r3}
				char str[2] = {num_string[choiced_channel][i], '\0'};
 80014ce:	f88d b00d 	strb.w	fp, [sp, #13]
		for(int i=0;i<size;++i){
 80014d2:	3401      	adds	r4, #1
				ssd1306_WriteString(str, Font_7x10, White);
 80014d4:	f001 fa0c 	bl	80028f0 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 80014d8:	e7b3      	b.n	8001442 <print_interface_mode1+0xca>
	}else if(freq[choiced_channel]==8){
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d192      	bne.n	8001404 <print_interface_mode1+0x8c>
		ssd1306_SetCursor(77, 18);
 80014de:	2112      	movs	r1, #18
 80014e0:	204d      	movs	r0, #77	@ 0x4d
 80014e2:	f001 fa1b 	bl	800291c <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 80014e6:	2201      	movs	r2, #1
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <print_interface_mode1+0x188>)
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	480e      	ldr	r0, [pc, #56]	@ (8001528 <print_interface_mode1+0x1b0>)
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	e786      	b.n	8001400 <print_interface_mode1+0x88>
 80014f2:	bf00      	nop
 80014f4:	2000023b 	.word	0x2000023b
 80014f8:	2000023c 	.word	0x2000023c
 80014fc:	2000023d 	.word	0x2000023d
 8001500:	0800aa0c 	.word	0x0800aa0c
 8001504:	0800a8b6 	.word	0x0800a8b6
 8001508:	0800a8b0 	.word	0x0800a8b0
 800150c:	0800aa00 	.word	0x0800aa00
 8001510:	0800a8c0 	.word	0x0800a8c0
 8001514:	20000258 	.word	0x20000258
 8001518:	00027100 	.word	0x00027100
 800151c:	0800a8c7 	.word	0x0800a8c7
 8001520:	20000252 	.word	0x20000252
 8001524:	0800a8c5 	.word	0x0800a8c5
 8001528:	0800a8cb 	.word	0x0800a8cb

0800152c <int_mode_0>:
void int_mode_0(){
 800152c:	b510      	push	{r4, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 800152e:	2101      	movs	r1, #1
 8001530:	4819      	ldr	r0, [pc, #100]	@ (8001598 <int_mode_0+0x6c>)
 8001532:	f001 fd77 	bl	8003024 <HAL_GPIO_ReadPin>
 8001536:	b910      	cbnz	r0, 800153e <int_mode_0+0x12>
		choice=1;
 8001538:	2201      	movs	r2, #1
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <int_mode_0+0x70>)
 800153c:	701a      	strb	r2, [r3, #0]
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 800153e:	4c16      	ldr	r4, [pc, #88]	@ (8001598 <int_mode_0+0x6c>)
 8001540:	2101      	movs	r1, #1
 8001542:	4620      	mov	r0, r4
 8001544:	f001 fd6e 	bl	8003024 <HAL_GPIO_ReadPin>
 8001548:	2800      	cmp	r0, #0
 800154a:	d0f9      	beq.n	8001540 <int_mode_0+0x14>
	if(choice==0){
 800154c:	4a13      	ldr	r2, [pc, #76]	@ (800159c <int_mode_0+0x70>)
 800154e:	7813      	ldrb	r3, [r2, #0]
 8001550:	b98b      	cbnz	r3, 8001576 <int_mode_0+0x4a>
		choiced_channel=get_encoder()%3;
 8001552:	2203      	movs	r2, #3
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <int_mode_0+0x74>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001558:	2b00      	cmp	r3, #0
 800155a:	bfb8      	it	lt
 800155c:	3303      	addlt	r3, #3
 800155e:	109b      	asrs	r3, r3, #2
		choiced_channel=get_encoder()%3;
 8001560:	fb93 f2f2 	sdiv	r2, r3, r2
 8001564:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <int_mode_0+0x78>)
 800156c:	7013      	strb	r3, [r2, #0]
}
 800156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode0();
 8001572:	f7ff bea9 	b.w	80012c8 <print_interface_mode0>
	}else if(choice==1){
 8001576:	2b01      	cmp	r3, #1
 8001578:	d10c      	bne.n	8001594 <int_mode_0+0x68>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 800157a:	2004      	movs	r0, #4
 800157c:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <int_mode_0+0x74>)
 800157e:	6248      	str	r0, [r1, #36]	@ 0x24
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8001580:	4909      	ldr	r1, [pc, #36]	@ (80015a8 <int_mode_0+0x7c>)
 8001582:	700b      	strb	r3, [r1, #0]
		interface_mode=1;
 8001584:	4909      	ldr	r1, [pc, #36]	@ (80015ac <int_mode_0+0x80>)
 8001586:	700b      	strb	r3, [r1, #0]
		choice=0;
 8001588:	2300      	movs	r3, #0
 800158a:	7013      	strb	r3, [r2, #0]
}
 800158c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		print_interface_mode1();
 8001590:	f7ff bef2 	b.w	8001378 <print_interface_mode1>
}
 8001594:	bd10      	pop	{r4, pc}
 8001596:	bf00      	nop
 8001598:	40010800 	.word	0x40010800
 800159c:	20000252 	.word	0x20000252
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	2000023b 	.word	0x2000023b
 80015a8:	2000023c 	.word	0x2000023c
 80015ac:	2000023a 	.word	0x2000023a

080015b0 <min_freq>:
	num_string[choiced_channel][0]='8';
 80015b0:	2038      	movs	r0, #56	@ 0x38
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <min_freq+0x18>)
 80015b4:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <min_freq+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80015bc:	18d1      	adds	r1, r2, r3
 80015be:	54d0      	strb	r0, [r2, r3]
	num_string[choiced_channel][1]='\0';
 80015c0:	2300      	movs	r3, #0
 80015c2:	704b      	strb	r3, [r1, #1]
}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000023b 	.word	0x2000023b
 80015cc:	2000023d 	.word	0x2000023d

080015d0 <max_freq>:
	num_string[choiced_channel][0]='1';
 80015d0:	2031      	movs	r0, #49	@ 0x31
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <max_freq+0x24>)
 80015d4:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <max_freq+0x28>)
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80015dc:	188b      	adds	r3, r1, r2
 80015de:	5488      	strb	r0, [r1, r2]
	num_string[choiced_channel][1]='6';
 80015e0:	2236      	movs	r2, #54	@ 0x36
 80015e2:	705a      	strb	r2, [r3, #1]
	num_string[choiced_channel][2]='0';
 80015e4:	2230      	movs	r2, #48	@ 0x30
 80015e6:	709a      	strb	r2, [r3, #2]
	num_string[choiced_channel][3]='0';
 80015e8:	70da      	strb	r2, [r3, #3]
	num_string[choiced_channel][4]='0';
 80015ea:	711a      	strb	r2, [r3, #4]
	num_string[choiced_channel][5]='0';
 80015ec:	715a      	strb	r2, [r3, #5]
	num_string[choiced_channel][6]='\0';
 80015ee:	2200      	movs	r2, #0
 80015f0:	719a      	strb	r2, [r3, #6]
}
 80015f2:	4770      	bx	lr
 80015f4:	2000023b 	.word	0x2000023b
 80015f8:	2000023d 	.word	0x2000023d

080015fc <int_mode_1>:
void int_mode_1(){
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001600:	2101      	movs	r1, #1
void int_mode_1(){
 8001602:	b087      	sub	sp, #28
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001604:	4865      	ldr	r0, [pc, #404]	@ (800179c <int_mode_1+0x1a0>)
 8001606:	f001 fd0d 	bl	8003024 <HAL_GPIO_ReadPin>
 800160a:	b978      	cbnz	r0, 800162c <int_mode_1+0x30>
		if(choice==0){
 800160c:	4a64      	ldr	r2, [pc, #400]	@ (80017a0 <int_mode_1+0x1a4>)
			if(choiced_num!=0){
 800160e:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <int_mode_1+0x1a8>)
		if(choice==0){
 8001610:	7811      	ldrb	r1, [r2, #0]
			if(choiced_num!=0){
 8001612:	781b      	ldrb	r3, [r3, #0]
		if(choice==0){
 8001614:	bb39      	cbnz	r1, 8001666 <int_mode_1+0x6a>
			choice=1;
 8001616:	2101      	movs	r1, #1
 8001618:	7011      	strb	r1, [r2, #0]
			if(choiced_num!=0){
 800161a:	b13b      	cbz	r3, 800162c <int_mode_1+0x30>
				prev_encoder=1000;
 800161c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001620:	4b61      	ldr	r3, [pc, #388]	@ (80017a8 <int_mode_1+0x1ac>)
 8001622:	601a      	str	r2, [r3, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8001624:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001628:	4b60      	ldr	r3, [pc, #384]	@ (80017ac <int_mode_1+0x1b0>)
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 800162c:	4c5b      	ldr	r4, [pc, #364]	@ (800179c <int_mode_1+0x1a0>)
 800162e:	2101      	movs	r1, #1
 8001630:	4620      	mov	r0, r4
 8001632:	f001 fcf7 	bl	8003024 <HAL_GPIO_ReadPin>
 8001636:	2800      	cmp	r0, #0
 8001638:	d0f9      	beq.n	800162e <int_mode_1+0x32>
	if(choice==0){
 800163a:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <int_mode_1+0x1a4>)
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	b9ba      	cbnz	r2, 8001670 <int_mode_1+0x74>
		choiced_num=get_encoder()%7;
 8001640:	2207      	movs	r2, #7
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8001642:	4b5a      	ldr	r3, [pc, #360]	@ (80017ac <int_mode_1+0x1b0>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	2b00      	cmp	r3, #0
 8001648:	bfb8      	it	lt
 800164a:	3303      	addlt	r3, #3
 800164c:	109b      	asrs	r3, r3, #2
		choiced_num=get_encoder()%7;
 800164e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001652:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	4a52      	ldr	r2, [pc, #328]	@ (80017a4 <int_mode_1+0x1a8>)
 800165a:	7013      	strb	r3, [r2, #0]
}
 800165c:	b007      	add	sp, #28
 800165e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode1();
 8001662:	f7ff be89 	b.w	8001378 <print_interface_mode1>
			choice=0;
 8001666:	7010      	strb	r0, [r2, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8001668:	4a50      	ldr	r2, [pc, #320]	@ (80017ac <int_mode_1+0x1b0>)
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800166e:	e7dd      	b.n	800162c <int_mode_1+0x30>
	}else if(choice==1){
 8001670:	2a01      	cmp	r2, #1
 8001672:	f040 8090 	bne.w	8001796 <int_mode_1+0x19a>
		if(choiced_num==0){
 8001676:	4a4b      	ldr	r2, [pc, #300]	@ (80017a4 <int_mode_1+0x1a8>)
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 8001678:	4e4d      	ldr	r6, [pc, #308]	@ (80017b0 <int_mode_1+0x1b4>)
		if(choiced_num==0){
 800167a:	7815      	ldrb	r5, [r2, #0]
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 800167c:	7834      	ldrb	r4, [r6, #0]
		if(choiced_num==0){
 800167e:	b9d5      	cbnz	r5, 80016b6 <int_mode_1+0xba>
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 8001680:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
			choice=0;
 8001684:	701d      	strb	r5, [r3, #0]
			interface_mode=0;
 8001686:	4b4b      	ldr	r3, [pc, #300]	@ (80017b4 <int_mode_1+0x1b8>)
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 8001688:	4620      	mov	r0, r4
			interface_mode=0;
 800168a:	701d      	strb	r5, [r3, #0]
			si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);
 800168c:	4d4a      	ldr	r5, [pc, #296]	@ (80017b8 <int_mode_1+0x1bc>)
 800168e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8001692:	4359      	muls	r1, r3
 8001694:	f7ff fcb4 	bl	8001000 <si5351_set_frequency>
			si5351_enableOutputs(0xFF);
 8001698:	20ff      	movs	r0, #255	@ 0xff
 800169a:	f000 fdf7 	bl	800228c <si5351_enableOutputs>
			Write_Flash_Array(freq);//обновляем значение в памяти
 800169e:	4628      	mov	r0, r5
 80016a0:	f7ff fdde 	bl	8001260 <Write_Flash_Array>
			set_encoder(choiced_channel);
 80016a4:	7833      	ldrb	r3, [r6, #0]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 80016a6:	4a41      	ldr	r2, [pc, #260]	@ (80017ac <int_mode_1+0x1b0>)
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80016ac:	b007      	add	sp, #28
 80016ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print_interface_mode0();
 80016b2:	f7ff be09 	b.w	80012c8 <print_interface_mode0>
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <int_mode_1+0x1b0>)
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80016b8:	4f3b      	ldr	r7, [pc, #236]	@ (80017a8 <int_mode_1+0x1ac>)
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80016bc:	6838      	ldr	r0, [r7, #0]
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bfb8      	it	lt
 80016c2:	3303      	addlt	r3, #3
 80016c4:	109a      	asrs	r2, r3, #2
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80016c6:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80016ca:	9201      	str	r2, [sp, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 80016cc:	f7fe fe9a 	bl	8000404 <__aeabi_i2d>
 80016d0:	4680      	mov	r8, r0
 80016d2:	1e68      	subs	r0, r5, #1
 80016d4:	4689      	mov	r9, r1
 80016d6:	f7fe fe95 	bl	8000404 <__aeabi_i2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4682      	mov	sl, r0
 80016e0:	468b      	mov	fp, r1
 80016e2:	2000      	movs	r0, #0
 80016e4:	4935      	ldr	r1, [pc, #212]	@ (80017bc <int_mode_1+0x1c0>)
 80016e6:	f008 f887 	bl	80097f8 <pow>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4d32      	ldr	r5, [pc, #200]	@ (80017b8 <int_mode_1+0x1bc>)
 80016f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016f4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80016f8:	f7fe fe84 	bl	8000404 <__aeabi_i2d>
 80016fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001704:	4640      	mov	r0, r8
 8001706:	4649      	mov	r1, r9
 8001708:	f7fe fee6 	bl	80004d8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001714:	f7fe fd2a 	bl	800016c <__adddf3>
 8001718:	f7ff f98e 	bl	8000a38 <__aeabi_d2iz>
			if(freq[choiced_channel]<0){
 800171c:	2800      	cmp	r0, #0
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 800171e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
			if(freq[choiced_channel]<0){
 8001722:	da1a      	bge.n	800175a <int_mode_1+0x15e>
				freq[choiced_channel]=160000+freq[choiced_channel];//если частота очень мала делаем её почти максимальной
 8001724:	f500 301c 	add.w	r0, r0, #159744	@ 0x27000
 8001728:	f500 7080 	add.w	r0, r0, #256	@ 0x100
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 800172c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
			if(freq[choiced_channel]<8){
 8001730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
			prev_encoder=delta;
 8001734:	9b01      	ldr	r3, [sp, #4]
			if(freq[choiced_channel]<8){
 8001736:	2a07      	cmp	r2, #7
			prev_encoder=delta;
 8001738:	603b      	str	r3, [r7, #0]
			if(freq[choiced_channel]<8){
 800173a:	dc24      	bgt.n	8001786 <int_mode_1+0x18a>
				freq[choiced_channel]=8;
 800173c:	2308      	movs	r3, #8
 800173e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
				min_freq();
 8001742:	f7ff ff35 	bl	80015b0 <min_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);//обновляем строку с выбранной частотой
 8001746:	7833      	ldrb	r3, [r6, #0]
 8001748:	491d      	ldr	r1, [pc, #116]	@ (80017c0 <int_mode_1+0x1c4>)
 800174a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800174e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8001752:	4411      	add	r1, r2
 8001754:	f7ff fd44 	bl	80011e0 <int_to_str>
 8001758:	e780      	b.n	800165c <int_mode_1+0x60>
			}else if(freq[choiced_channel]>999999){
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <int_mode_1+0x1c8>)
 800175c:	4298      	cmp	r0, r3
 800175e:	dde7      	ble.n	8001730 <int_mode_1+0x134>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001760:	4652      	mov	r2, sl
 8001762:	465b      	mov	r3, fp
 8001764:	2000      	movs	r0, #0
 8001766:	4915      	ldr	r1, [pc, #84]	@ (80017bc <int_mode_1+0x1c0>)
 8001768:	f008 f846 	bl	80097f8 <pow>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4640      	mov	r0, r8
 8001772:	4649      	mov	r1, r9
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	2200      	movs	r2, #0
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <int_mode_1+0x1cc>)
 800177c:	f7fe fcf6 	bl	800016c <__adddf3>
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2iz>
 8001784:	e7d2      	b.n	800172c <int_mode_1+0x130>
			}else if(freq[choiced_channel]>160000){
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <int_mode_1+0x1d0>)
 8001788:	429a      	cmp	r2, r3
 800178a:	dddc      	ble.n	8001746 <int_mode_1+0x14a>
				freq[choiced_channel]=160000;
 800178c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
				max_freq();
 8001790:	f7ff ff1e 	bl	80015d0 <max_freq>
 8001794:	e7d7      	b.n	8001746 <int_mode_1+0x14a>
}
 8001796:	b007      	add	sp, #28
 8001798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800179c:	40010800 	.word	0x40010800
 80017a0:	20000252 	.word	0x20000252
 80017a4:	2000023c 	.word	0x2000023c
 80017a8:	20000254 	.word	0x20000254
 80017ac:	40012c00 	.word	0x40012c00
 80017b0:	2000023b 	.word	0x2000023b
 80017b4:	2000023a 	.word	0x2000023a
 80017b8:	20000258 	.word	0x20000258
 80017bc:	40240000 	.word	0x40240000
 80017c0:	2000023d 	.word	0x2000023d
 80017c4:	000f423f 	.word	0x000f423f
 80017c8:	401c0000 	.word	0x401c0000
 80017cc:	00027100 	.word	0x00027100

080017d0 <str_to_int>:
    while(str[i] >= '0' && str[i] <= '9'){
 80017d0:	2200      	movs	r2, #0
uint32_t str_to_int(char* str){
 80017d2:	4601      	mov	r1, r0
 80017d4:	b530      	push	{r4, r5, lr}
    uint32_t ans = 0;
 80017d6:	4610      	mov	r0, r2
        ans = ans * 10 + (str[i] - '0');
 80017d8:	250a      	movs	r5, #10
    while(str[i] >= '0' && str[i] <= '9'){
 80017da:	b2d3      	uxtb	r3, r2
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	3201      	adds	r2, #1
 80017e0:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
 80017e4:	2c09      	cmp	r4, #9
 80017e6:	d900      	bls.n	80017ea <str_to_int+0x1a>
}
 80017e8:	bd30      	pop	{r4, r5, pc}
        ans = ans * 10 + (str[i] - '0');
 80017ea:	fb05 3300 	mla	r3, r5, r0, r3
 80017ee:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
        i++;
 80017f2:	e7f2      	b.n	80017da <str_to_int+0xa>

080017f4 <process_client_connection>:
uint8_t stat;
uint8_t reqnr;
char Message[128];
// Функция обработки клиентского подключения
void process_client_connection(uint8_t sn)
{
 80017f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f8:	4604      	mov	r4, r0
    uint8_t received_data[1024];



    // Главный цикл обработки соединения
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 80017fa:	0146      	lsls	r6, r0, #5
            // Читаем данные
            received_len = recv(sn, received_data, sizeof(received_data)-1);

            if(received_len > 0)
            {
                if(strstr((char*)received_data, "EXIT") != NULL)
 80017fc:	4f31      	ldr	r7, [pc, #196]	@ (80018c4 <process_client_connection+0xd0>)
                    break;
                }
                received_data[received_len] = '\0';
                uint32_t r=str_to_int((char*)received_data);
                if(r>7 && r<=160000){
                	freq[choiced_channel]=r;
 80017fe:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80018c8 <process_client_connection+0xd4>
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
                si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);//устанвливаем частоту введённую через ethernet
                si5351_enableOutputs(0xFF);//включаем все выходы
                Write_Flash_Array(freq);
                print_interface_mode0();
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001802:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 80018cc <process_client_connection+0xd8>
{
 8001806:	f5ad 6d80 	sub.w	sp, sp, #1024	@ 0x400
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 800180a:	f506 7642 	add.w	r6, r6, #776	@ 0x308
 800180e:	4630      	mov	r0, r6
 8001810:	f005 fd36 	bl	8007280 <WIZCHIP_READ>
 8001814:	2817      	cmp	r0, #23
 8001816:	d116      	bne.n	8001846 <process_client_connection+0x52>
        uint16_t available = getSn_RX_RSR(sn);
 8001818:	4620      	mov	r0, r4
 800181a:	f005 fe26 	bl	800746a <getSn_RX_RSR>
        if(available > 0)
 800181e:	2800      	cmp	r0, #0
 8001820:	d047      	beq.n	80018b2 <process_client_connection+0xbe>
            received_len = recv(sn, received_data, sizeof(received_data)-1);
 8001822:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001826:	4669      	mov	r1, sp
 8001828:	4620      	mov	r0, r4
 800182a:	f006 f8a7 	bl	800797c <recv>
            if(received_len > 0)
 800182e:	1e05      	subs	r5, r0, #0
 8001830:	dd3f      	ble.n	80018b2 <process_client_connection+0xbe>
                if(strstr((char*)received_data, "EXIT") != NULL)
 8001832:	4639      	mov	r1, r7
 8001834:	4668      	mov	r0, sp
 8001836:	f007 fbf1 	bl	800901c <strstr>
 800183a:	b140      	cbz	r0, 800184e <process_client_connection+0x5a>
                    send(sn, (uint8_t*)"Goodbye!\r\n", 10);
 800183c:	220a      	movs	r2, #10
 800183e:	4620      	mov	r0, r4
 8001840:	4923      	ldr	r1, [pc, #140]	@ (80018d0 <process_client_connection+0xdc>)
 8001842:	f005 ffe5 	bl	8007810 <send>

  	  while(t>HAL_GetTick()-10);
        //HAL_Delay(10); // Небольшая задержка
    }

}
 8001846:	f50d 6d80 	add.w	sp, sp, #1024	@ 0x400
 800184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                received_data[received_len] = '\0';
 800184e:	f80d 0005 	strb.w	r0, [sp, r5]
                uint32_t r=str_to_int((char*)received_data);
 8001852:	4668      	mov	r0, sp
 8001854:	f7ff ffbc 	bl	80017d0 <str_to_int>
                if(r>7 && r<=160000){
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <process_client_connection+0xe0>)
 800185a:	f1a0 0208 	sub.w	r2, r0, #8
 800185e:	429a      	cmp	r2, r3
                	freq[choiced_channel]=r;
 8001860:	f898 5000 	ldrb.w	r5, [r8]
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <process_client_connection+0xe4>)
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 8001866:	491d      	ldr	r1, [pc, #116]	@ (80018dc <process_client_connection+0xe8>)
                	freq[choiced_channel]=r;
 8001868:	bf98      	it	ls
 800186a:	f843 0025 	strls.w	r0, [r3, r5, lsl #2]
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 800186e:	f853 a025 	ldr.w	sl, [r3, r5, lsl #2]
 8001872:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001876:	4419      	add	r1, r3
 8001878:	4650      	mov	r0, sl
 800187a:	f7ff fcb1 	bl	80011e0 <int_to_str>
                si5351_set_frequency(choiced_channel, freq[choiced_channel]*1000);//устанвливаем частоту введённую через ethernet
 800187e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001882:	4628      	mov	r0, r5
 8001884:	fb01 f10a 	mul.w	r1, r1, sl
 8001888:	f7ff fbba 	bl	8001000 <si5351_set_frequency>
                si5351_enableOutputs(0xFF);//включаем все выходы
 800188c:	20ff      	movs	r0, #255	@ 0xff
 800188e:	f000 fcfd 	bl	800228c <si5351_enableOutputs>
                Write_Flash_Array(freq);
 8001892:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <process_client_connection+0xe4>)
 8001894:	f7ff fce4 	bl	8001260 <Write_Flash_Array>
                print_interface_mode0();
 8001898:	f7ff fd16 	bl	80012c8 <print_interface_mode0>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a2:	4648      	mov	r0, r9
 80018a4:	f001 fbc4 	bl	8003030 <HAL_GPIO_WritePin>
                send(sn, (uint8_t*)"OK\r\n", 4);
 80018a8:	2204      	movs	r2, #4
 80018aa:	4620      	mov	r0, r4
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <process_client_connection+0xec>)
 80018ae:	f005 ffaf 	bl	8007810 <send>
  	  uint32_t t=HAL_GetTick();
 80018b2:	f001 f8f7 	bl	8002aa4 <HAL_GetTick>
 80018b6:	4605      	mov	r5, r0
  	  while(t>HAL_GetTick()-10);
 80018b8:	f001 f8f4 	bl	8002aa4 <HAL_GetTick>
 80018bc:	380a      	subs	r0, #10
 80018be:	42a8      	cmp	r0, r5
 80018c0:	d3fa      	bcc.n	80018b8 <process_client_connection+0xc4>
 80018c2:	e7a4      	b.n	800180e <process_client_connection+0x1a>
 80018c4:	0800a8cf 	.word	0x0800a8cf
 80018c8:	2000023b 	.word	0x2000023b
 80018cc:	40011000 	.word	0x40011000
 80018d0:	0800a8d4 	.word	0x0800a8d4
 80018d4:	000270f8 	.word	0x000270f8
 80018d8:	20000258 	.word	0x20000258
 80018dc:	2000023d 	.word	0x2000023d
 80018e0:	0800a8df 	.word	0x0800a8df

080018e4 <init_server>:
// Функция инициализации сервера
uint8_t init_server(uint8_t sn, uint16_t port)
{
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	4604      	mov	r4, r0
    // Закрываем сокет если был открыт
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80018e8:	0140      	lsls	r0, r0, #5
 80018ea:	f500 7042 	add.w	r0, r0, #776	@ 0x308
{
 80018ee:	460d      	mov	r5, r1
    if(getSn_SR(sn) != SOCK_CLOSED) {
 80018f0:	f005 fcc6 	bl	8007280 <WIZCHIP_READ>
 80018f4:	b110      	cbz	r0, 80018fc <init_server+0x18>
        close(sn);
 80018f6:	4620      	mov	r0, r4
 80018f8:	f005 fe32 	bl	8007560 <close>
        //HAL_Delay(100);
    }

    // Создаем сокет
    if((stat = socket(sn, Sn_MR_TCP, port, 0)) != sn) {
 80018fc:	462a      	mov	r2, r5
 80018fe:	2300      	movs	r3, #0
 8001900:	2101      	movs	r1, #1
 8001902:	4620      	mov	r0, r4
 8001904:	f005 fe6a 	bl	80075dc <socket>
 8001908:	4d08      	ldr	r5, [pc, #32]	@ (800192c <init_server+0x48>)
 800190a:	b2c0      	uxtb	r0, r0
 800190c:	42a0      	cmp	r0, r4
 800190e:	7028      	strb	r0, [r5, #0]
 8001910:	d109      	bne.n	8001926 <init_server+0x42>

        return 0;
    }

    // Слушаем порт
    if((stat = listen(sn)) != SOCK_OK) {
 8001912:	4620      	mov	r0, r4
 8001914:	f005 fefe 	bl	8007714 <listen>
 8001918:	b2c0      	uxtb	r0, r0
 800191a:	2801      	cmp	r0, #1
 800191c:	7028      	strb	r0, [r5, #0]
 800191e:	d003      	beq.n	8001928 <init_server+0x44>

        close(sn);
 8001920:	4620      	mov	r0, r4
 8001922:	f005 fe1d 	bl	8007560 <close>
        return 0;
 8001926:	2000      	movs	r0, #0
        return 0;
    }

    return 1;
}
 8001928:	bd38      	pop	{r3, r4, r5, pc}
 800192a:	bf00      	nop
 800192c:	20000238 	.word	0x20000238

08001930 <ethernet_work>:
void ethernet_work(){
 8001930:	b510      	push	{r4, lr}
	// Мигание светодиодом в режиме ожидания
	          static uint32_t led_timer = 0;
	          if(HAL_GetTick() - led_timer > 500) {
 8001932:	f001 f8b7 	bl	8002aa4 <HAL_GetTick>
 8001936:	4c21      	ldr	r4, [pc, #132]	@ (80019bc <ethernet_work+0x8c>)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	1ac0      	subs	r0, r0, r3
 800193c:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001940:	d907      	bls.n	8001952 <ethernet_work+0x22>
	              HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001942:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001946:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <ethernet_work+0x90>)
 8001948:	f001 fb77 	bl	800303a <HAL_GPIO_TogglePin>
	              led_timer = HAL_GetTick();
 800194c:	f001 f8aa 	bl	8002aa4 <HAL_GetTick>
 8001950:	6020      	str	r0, [r4, #0]
	          }

	          // Проверяем статус сокета
	          socket_status = getSn_SR(HTTP_SOCKET);
 8001952:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001956:	f005 fc93 	bl	8007280 <WIZCHIP_READ>
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <ethernet_work+0x94>)

	          switch(socket_status)
 800195c:	2814      	cmp	r0, #20
	          socket_status = getSn_SR(HTTP_SOCKET);
 800195e:	7018      	strb	r0, [r3, #0]
	          switch(socket_status)
 8001960:	d006      	beq.n	8001970 <ethernet_work+0x40>
 8001962:	2817      	cmp	r0, #23
 8001964:	d00d      	beq.n	8001982 <ethernet_work+0x52>
 8001966:	b1e8      	cbz	r0, 80019a4 <ethernet_work+0x74>
	                  break;

	              default:
	                  // Неизвестный статус - перезапускаем

	                  close(HTTP_SOCKET);
 8001968:	2000      	movs	r0, #0
 800196a:	f005 fdf9 	bl	8007560 <close>
 800196e:	e01f      	b.n	80019b0 <ethernet_work+0x80>
	            	  uint32_t t=HAL_GetTick();
 8001970:	f001 f898 	bl	8002aa4 <HAL_GetTick>
 8001974:	4604      	mov	r4, r0
	            	  while(t>HAL_GetTick()-100);
 8001976:	f001 f895 	bl	8002aa4 <HAL_GetTick>
 800197a:	3864      	subs	r0, #100	@ 0x64
 800197c:	42a0      	cmp	r0, r4
 800197e:	d3fa      	bcc.n	8001976 <ethernet_work+0x46>
	                  //HAL_Delay(1000);
	                  break;
	          }

	          //HAL_Delay(10);
}
 8001980:	bd10      	pop	{r4, pc}
	            	  if(interface_mode==0){
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <ethernet_work+0x98>)
 8001984:	781c      	ldrb	r4, [r3, #0]
 8001986:	2c00      	cmp	r4, #0
 8001988:	d1fa      	bne.n	8001980 <ethernet_work+0x50>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 800198a:	4622      	mov	r2, r4
 800198c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <ethernet_work+0x90>)
 8001992:	f001 fb4d 	bl	8003030 <HAL_GPIO_WritePin>
	                  process_client_connection(HTTP_SOCKET);
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff ff2c 	bl	80017f4 <process_client_connection>
	                  disconnect(HTTP_SOCKET);
 800199c:	4620      	mov	r0, r4
 800199e:	f005 feef 	bl	8007780 <disconnect>
	                  close(HTTP_SOCKET);
 80019a2:	e7e1      	b.n	8001968 <ethernet_work+0x38>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <ethernet_work+0x90>)
 80019ac:	f001 fb40 	bl	8003030 <HAL_GPIO_WritePin>
}
 80019b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	                  init_server(HTTP_SOCKET, 80);
 80019b4:	2150      	movs	r1, #80	@ 0x50
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff bf94 	b.w	80018e4 <init_server>
 80019bc:	20000234 	.word	0x20000234
 80019c0:	40011000 	.word	0x40011000
 80019c4:	20000239 	.word	0x20000239
 80019c8:	2000023a 	.word	0x2000023a

080019cc <HAL_TIM_PeriodElapsedCallback>:
//функция для работы программы во время прерываний
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d2:	d10c      	bne.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	//uint8_t socket_status = getSn_SR(HTTP_SOCKET);
    	if(interface_mode==0 && socket_status!=SOCK_ESTABLISHED){
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b92b      	cbnz	r3, 80019e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b17      	cmp	r3, #23
 80019e0:	d005      	beq.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x22>
    		//ethernet_work();
    		int_mode_0();
 80019e2:	f7ff bda3 	b.w	800152c <int_mode_0>
    	}else if(interface_mode==1){
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x22>
    		int_mode_1();
 80019ea:	f7ff be07 	b.w	80015fc <int_mode_1>
    	}
    }
}
 80019ee:	4770      	bx	lr
 80019f0:	2000023a 	.word	0x2000023a
 80019f4:	20000239 	.word	0x20000239

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b530      	push	{r4, r5, lr}
 80019fa:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fc:	2214      	movs	r2, #20
 80019fe:	2100      	movs	r1, #0
 8001a00:	a80c      	add	r0, sp, #48	@ 0x30
 8001a02:	f007 faf1 	bl	8008fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a06:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	eb0d 0002 	add.w	r0, sp, r2
 8001a10:	f007 faea 	bl	8008fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	462a      	mov	r2, r5
 8001a16:	2100      	movs	r1, #0
 8001a18:	a801      	add	r0, sp, #4
 8001a1a:	f007 fae5 	bl	8008fe8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a24:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a26:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a32:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a36:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a38:	f003 fd40 	bl	80054bc <HAL_RCC_OscConfig>
 8001a3c:	b108      	cbz	r0, 8001a42 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a42:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a44:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a52:	4621      	mov	r1, r4
 8001a54:	a805      	add	r0, sp, #20
 8001a56:	f003 fef3 	bl	8005840 <HAL_RCC_ClockConfig>
 8001a5a:	b108      	cbz	r0, 8001a60 <SystemClock_Config+0x68>
 8001a5c:	b672      	cpsid	i
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a60:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a62:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a64:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a66:	f003 ff97 	bl	8005998 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	b108      	cbz	r0, 8001a70 <SystemClock_Config+0x78>
 8001a6c:	b672      	cpsid	i
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <SystemClock_Config+0x76>
}
 8001a70:	b015      	add	sp, #84	@ 0x54
 8001a72:	bd30      	pop	{r4, r5, pc}

08001a74 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	2510      	movs	r5, #16
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 8001a7a:	f000 fff5 	bl	8002a68 <HAL_Init>
  SystemClock_Config();
 8001a7e:	f7ff ffbb 	bl	80019f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	462a      	mov	r2, r5
 8001a84:	2100      	movs	r1, #0
 8001a86:	a807      	add	r0, sp, #28
 8001a88:	f007 faae 	bl	8008fe8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	4ba8      	ldr	r3, [pc, #672]	@ (8001d30 <main+0x2bc>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a94:	48a7      	ldr	r0, [pc, #668]	@ (8001d34 <main+0x2c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	432a      	orrs	r2, r5
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	402a      	ands	r2, r5
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	f042 0220 	orr.w	r2, r2, #32
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab4:	f002 0220 	and.w	r2, r2, #32
 8001ab8:	9202      	str	r2, [sp, #8]
 8001aba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 8001abe:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 8001d38 <main+0x2c4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	f042 0204 	orr.w	r2, r2, #4
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	f002 0204 	and.w	r2, r2, #4
 8001ace:	9203      	str	r2, [sp, #12]
 8001ad0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	f042 0208 	orr.w	r2, r2, #8
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ae6:	f001 faa3 	bl	8003030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	4629      	mov	r1, r5
 8001aee:	4893      	ldr	r0, [pc, #588]	@ (8001d3c <main+0x2c8>)
 8001af0:	f001 fa9e 	bl	8003030 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	488e      	ldr	r0, [pc, #568]	@ (8001d34 <main+0x2c0>)
 8001afa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	e9cd 3907 	strd	r3, r9, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f001 f9ba 	bl	8002e7c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	488c      	ldr	r0, [pc, #560]	@ (8001d3c <main+0x2c8>)
 8001b0a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	e9cd 9407 	strd	r9, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f001 f9b3 	bl	8002e7c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1a:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	4887      	ldr	r0, [pc, #540]	@ (8001d3c <main+0x2c8>)
 8001b20:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	e9cd 5907 	strd	r5, r9, [sp, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f001 f9a9 	bl	8002e7c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001b2a:	4885      	ldr	r0, [pc, #532]	@ (8001d40 <main+0x2cc>)
  hi2c1.Init.ClockSpeed = 100000;
 8001b2c:	4b85      	ldr	r3, [pc, #532]	@ (8001d44 <main+0x2d0>)
  hi2c1.Init.OwnAddress1 = 0;
 8001b2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b32:	e9c0 6404 	strd	r6, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3a:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3c:	e9c0 3800 	strd	r3, r8, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b40:	f001 fc86 	bl	8003450 <HAL_I2C_Init>
 8001b44:	4604      	mov	r4, r0
 8001b46:	b108      	cbz	r0, 8001b4c <main+0xd8>
 8001b48:	b672      	cpsid	i
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <main+0xd6>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	4601      	mov	r1, r0
 8001b50:	eb0d 0002 	add.w	r0, sp, r2
 8001b54:	f007 fa48 	bl	8008fe8 <memset>
  htim1.Init.Period = 7000;
 8001b58:	f641 3358 	movw	r3, #7000	@ 0x1b58
  htim1.Instance = TIM1;
 8001b5c:	4d7a      	ldr	r5, [pc, #488]	@ (8001d48 <main+0x2d4>)
 8001b5e:	4f7b      	ldr	r7, [pc, #492]	@ (8001d4c <main+0x2d8>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b64:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b66:	4628      	mov	r0, r5
 8001b68:	a907      	add	r1, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim1.Init.Prescaler = 0;
 8001b6e:	e9c5 7400 	strd	r7, r4, [r5]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	60ac      	str	r4, [r5, #8]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b78:	9307      	str	r3, [sp, #28]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b82:	f004 fd39 	bl	80065f8 <HAL_TIM_Encoder_Init>
 8001b86:	b108      	cbz	r0, 8001b8c <main+0x118>
 8001b88:	b672      	cpsid	i
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <main+0x116>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b90:	a905      	add	r1, sp, #20
 8001b92:	4628      	mov	r0, r5
 8001b94:	f004 fe08 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b108      	cbz	r0, 8001ba0 <main+0x12c>
 8001b9c:	b672      	cpsid	i
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <main+0x12a>
  hi2c2.Instance = I2C2;
 8001ba0:	486b      	ldr	r0, [pc, #428]	@ (8001d50 <main+0x2dc>)
 8001ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d54 <main+0x2e0>)
  hi2c2.Init.OwnAddress1 = 0;
 8001ba4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8001ba8:	e9c0 2800 	strd	r2, r8, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bac:	e9c0 6304 	strd	r6, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bb6:	f001 fc4b 	bl	8003450 <HAL_I2C_Init>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b108      	cbz	r0, 8001bc2 <main+0x14e>
 8001bbe:	b672      	cpsid	i
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x14c>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	221c      	movs	r2, #28
 8001bc4:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	eb0d 0002 	add.w	r0, sp, r2
 8001bce:	f007 fa0b 	bl	8008fe8 <memset>
  htim2.Init.Prescaler = 7199;
 8001bd2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001bd6:	f641 431f 	movw	r3, #7199	@ 0x1c1f
  htim2.Instance = TIM2;
 8001bda:	4e5f      	ldr	r6, [pc, #380]	@ (8001d58 <main+0x2e4>)
  htim2.Init.Prescaler = 7199;
 8001bdc:	e9c6 0300 	strd	r0, r3, [r6]
  htim2.Init.Period = 999;
 8001be0:	f240 33e7 	movw	r3, #999	@ 0x3e7
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001be4:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be6:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bec:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bee:	f004 fcd7 	bl	80065a0 <HAL_TIM_PWM_Init>
 8001bf2:	b108      	cbz	r0, 8001bf8 <main+0x184>
 8001bf4:	b672      	cpsid	i
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <main+0x182>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfc:	a905      	add	r1, sp, #20
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f004 fdd2 	bl	80067a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4602      	mov	r2, r0
 8001c06:	b108      	cbz	r0, 8001c0c <main+0x198>
 8001c08:	b672      	cpsid	i
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <main+0x196>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0c:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c10:	e9cd 3007 	strd	r3, r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c14:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	a907      	add	r1, sp, #28
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f004 fd6d 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b108      	cbz	r0, 8001c26 <main+0x1b2>
 8001c22:	b672      	cpsid	i
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <main+0x1b0>
  HAL_TIM_MspPostInit(&htim2);
 8001c26:	4630      	mov	r0, r6
 8001c28:	f000 fce4 	bl	80025f4 <HAL_TIM_MspPostInit>
  MX_USB_DEVICE_Init();
 8001c2c:	f006 fdc0 	bl	80087b0 <MX_USB_DEVICE_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c30:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001c34:	4849      	ldr	r0, [pc, #292]	@ (8001d5c <main+0x2e8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c36:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <main+0x2ec>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c3c:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c40:	2308      	movs	r3, #8
 8001c42:	e9c0 1306 	strd	r1, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001c46:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c48:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c50:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c54:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c56:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c58:	f003 ffba 	bl	8005bd0 <HAL_SPI_Init>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	b108      	cbz	r0, 8001c64 <main+0x1f0>
 8001c60:	b672      	cpsid	i
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <main+0x1ee>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c64:	213c      	movs	r1, #60	@ 0x3c
 8001c66:	4628      	mov	r0, r5
 8001c68:	f004 fb76 	bl	8006358 <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001c6c:	f000 fe74 	bl	8002958 <ssd1306_Init>
  si5351_Init();
 8001c70:	f000 f8b8 	bl	8001de4 <si5351_Init>
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 8001c74:	627c      	str	r4, [r7, #36]	@ 0x24
      if (Is_Flash_Valid()==0) {
 8001c76:	f7ff fad5 	bl	8001224 <Is_Flash_Valid>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d153      	bne.n	8001d26 <main+0x2b2>
          Write_Flash_Array(freq);
 8001c7e:	4839      	ldr	r0, [pc, #228]	@ (8001d64 <main+0x2f0>)
 8001c80:	f7ff faee 	bl	8001260 <Write_Flash_Array>
      choice=0;//переменная для считывания был ли нажат энкодер
 8001c84:	2500      	movs	r5, #0
      int_to_str(freq[2],num_string[2]);
 8001c86:	4c37      	ldr	r4, [pc, #220]	@ (8001d64 <main+0x2f0>)
      choice=0;//переменная для считывания был ли нажат энкодер
 8001c88:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <main+0x2f4>)
      int_to_str(freq[2],num_string[2]);
 8001c8a:	4938      	ldr	r1, [pc, #224]	@ (8001d6c <main+0x2f8>)
 8001c8c:	68a0      	ldr	r0, [r4, #8]
      choice=0;//переменная для считывания был ли нажат энкодер
 8001c8e:	701d      	strb	r5, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 8001c90:	f7ff faa6 	bl	80011e0 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001c94:	6860      	ldr	r0, [r4, #4]
 8001c96:	3907      	subs	r1, #7
 8001c98:	f7ff faa2 	bl	80011e0 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 8001c9c:	3907      	subs	r1, #7
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f7ff fa9e 	bl	80011e0 <int_to_str>
      prev_encoder=8;
 8001ca4:	2208      	movs	r2, #8
  si5351_set_frequency(0, freq[0]*1000);//устанвливаем частоту в минимальную
 8001ca6:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <main+0x2fc>)
 8001cac:	701d      	strb	r5, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 8001cae:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <main+0x300>)
 8001cb0:	701d      	strb	r5, [r3, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <main+0x304>)
 8001cb4:	701d      	strb	r5, [r3, #0]
      prev_encoder=8;
 8001cb6:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <main+0x308>)
 8001cb8:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 8001cba:	f7ff fb05 	bl	80012c8 <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001cbe:	4826      	ldr	r0, [pc, #152]	@ (8001d58 <main+0x2e4>)
 8001cc0:	f004 fb20 	bl	8006304 <HAL_TIM_Base_Start_IT>
            reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001cc4:	492e      	ldr	r1, [pc, #184]	@ (8001d80 <main+0x30c>)
 8001cc6:	482f      	ldr	r0, [pc, #188]	@ (8001d84 <main+0x310>)
 8001cc8:	f005 fef0 	bl	8007aac <reg_wizchip_cs_cbfunc>
            reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001ccc:	492e      	ldr	r1, [pc, #184]	@ (8001d88 <main+0x314>)
 8001cce:	482f      	ldr	r0, [pc, #188]	@ (8001d8c <main+0x318>)
 8001cd0:	f005 fefa 	bl	8007ac8 <reg_wizchip_spi_cbfunc>
            reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001cd4:	492e      	ldr	r1, [pc, #184]	@ (8001d90 <main+0x31c>)
 8001cd6:	482f      	ldr	r0, [pc, #188]	@ (8001d94 <main+0x320>)
 8001cd8:	f005 ff08 	bl	8007aec <reg_wizchip_spiburst_cbfunc>
            uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d98 <main+0x324>)
 8001cde:	ab07      	add	r3, sp, #28
 8001ce0:	6810      	ldr	r0, [r2, #0]
 8001ce2:	6851      	ldr	r1, [r2, #4]
 8001ce4:	c303      	stmia	r3!, {r0, r1}
            wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001ce6:	a907      	add	r1, sp, #28
 8001ce8:	4608      	mov	r0, r1
 8001cea:	f005 ff4e 	bl	8007b8a <wizchip_init>
            wizchip_setnetinfo(&gWIZNETINFO);
 8001cee:	482b      	ldr	r0, [pc, #172]	@ (8001d9c <main+0x328>)
 8001cf0:	f005 ff8e 	bl	8007c10 <wizchip_setnetinfo>
            ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8001cf4:	4929      	ldr	r1, [pc, #164]	@ (8001d9c <main+0x328>)
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f006 f824 	bl	8007d44 <ctlnetwork>
  si5351_set_frequency(0, freq[0]*1000);//устанвливаем частоту в минимальную
 8001cfc:	6821      	ldr	r1, [r4, #0]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	4371      	muls	r1, r6
 8001d02:	f7ff f97d 	bl	8001000 <si5351_set_frequency>
  si5351_set_frequency(1, freq[1]*1000);//устанвливаем частоту в минимальную
 8001d06:	6861      	ldr	r1, [r4, #4]
 8001d08:	2001      	movs	r0, #1
 8001d0a:	4371      	muls	r1, r6
 8001d0c:	f7ff f978 	bl	8001000 <si5351_set_frequency>
  si5351_set_frequency(2, freq[2]*1000);//устанвливаем частоту в минимальную
 8001d10:	68a1      	ldr	r1, [r4, #8]
 8001d12:	2002      	movs	r0, #2
 8001d14:	4371      	muls	r1, r6
 8001d16:	f7ff f973 	bl	8001000 <si5351_set_frequency>
  si5351_enableOutputs(0xFF);//включаем все выходы
 8001d1a:	20ff      	movs	r0, #255	@ 0xff
 8001d1c:	f000 fab6 	bl	800228c <si5351_enableOutputs>
	  ethernet_work();
 8001d20:	f7ff fe06 	bl	8001930 <ethernet_work>
  while (1)
 8001d24:	e7fc      	b.n	8001d20 <main+0x2ac>
    	  Read_Flash_Array(freq);
 8001d26:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <main+0x2f0>)
 8001d28:	f7ff fa88 	bl	800123c <Read_Flash_Array>
 8001d2c:	e7aa      	b.n	8001c84 <main+0x210>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40011000 	.word	0x40011000
 8001d38:	000186a0 	.word	0x000186a0
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	200003a0 	.word	0x200003a0
 8001d44:	40005400 	.word	0x40005400
 8001d48:	200002ac 	.word	0x200002ac
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	2000034c 	.word	0x2000034c
 8001d54:	40005800 	.word	0x40005800
 8001d58:	20000264 	.word	0x20000264
 8001d5c:	200002f4 	.word	0x200002f4
 8001d60:	40013000 	.word	0x40013000
 8001d64:	20000258 	.word	0x20000258
 8001d68:	20000252 	.word	0x20000252
 8001d6c:	2000024b 	.word	0x2000024b
 8001d70:	2000023c 	.word	0x2000023c
 8001d74:	2000023b 	.word	0x2000023b
 8001d78:	2000023a 	.word	0x2000023a
 8001d7c:	20000254 	.word	0x20000254
 8001d80:	08000f95 	.word	0x08000f95
 8001d84:	08000f85 	.word	0x08000f85
 8001d88:	08000fe5 	.word	0x08000fe5
 8001d8c:	08000fb9 	.word	0x08000fb9
 8001d90:	08000fd1 	.word	0x08000fd1
 8001d94:	08000fa5 	.word	0x08000fa5
 8001d98:	0800a8e4 	.word	0x0800a8e4
 8001d9c:	20000000 	.word	0x20000000

08001da0 <Error_Handler>:
 8001da0:	b672      	cpsid	i
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <Error_Handler+0x2>

08001da4 <si5351_write8>:
/*!
    @brief  Writes a register and an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_write8 (uint8_t reg, uint8_t value)
{
 8001da4:	b530      	push	{r4, r5, lr}
 8001da6:	4605      	mov	r5, r0
 8001da8:	b087      	sub	sp, #28
 8001daa:	f88d 1017 	strb.w	r1, [sp, #23]
	HAL_StatusTypeDef status = HAL_OK;

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 8001dae:	2364      	movs	r3, #100	@ 0x64
 8001db0:	2203      	movs	r2, #3
 8001db2:	21c0      	movs	r1, #192	@ 0xc0
 8001db4:	480a      	ldr	r0, [pc, #40]	@ (8001de0 <si5351_write8+0x3c>)
 8001db6:	f001 fdc7 	bl	8003948 <HAL_I2C_IsDeviceReady>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d1f6      	bne.n	8001dae <si5351_write8+0xa>

    status = HAL_I2C_Mem_Write(&hi2c1,							// i2c handle
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	2264      	movs	r2, #100	@ 0x64
 8001dc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001dc8:	f10d 0217 	add.w	r2, sp, #23
 8001dcc:	9200      	str	r2, [sp, #0]
 8001dce:	21c0      	movs	r1, #192	@ 0xc0
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <si5351_write8+0x3c>)
 8001dd4:	f001 fbe4 	bl	80035a0 <HAL_I2C_Mem_Write>
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
}
 8001dd8:	4620      	mov	r0, r4
 8001dda:	b007      	add	sp, #28
 8001ddc:	bd30      	pop	{r4, r5, pc}
 8001dde:	bf00      	nop
 8001de0:	200003a0 	.word	0x200003a0

08001de4 <si5351_Init>:
{
 8001de4:	b510      	push	{r4, lr}
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8001de6:	4a26      	ldr	r2, [pc, #152]	@ (8001e80 <si5351_Init+0x9c>)
	  m_si5351Config.initialised     = 0;
 8001de8:	4c26      	ldr	r4, [pc, #152]	@ (8001e84 <si5351_Init+0xa0>)
 8001dea:	2300      	movs	r3, #0
	  m_si5351Config.crystalFreq     = SI5351_CRYSTAL_FREQ_25MHZ;
 8001dec:	6062      	str	r2, [r4, #4]
	  m_si5351Config.crystalLoad     = SI5351_CRYSTAL_LOAD_10PF;
 8001dee:	22c0      	movs	r2, #192	@ 0xc0
 8001df0:	7222      	strb	r2, [r4, #8]
	  m_si5351Config.crystalPPM      = 30;
 8001df2:	221e      	movs	r2, #30
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 8001df4:	21ff      	movs	r1, #255	@ 0xff
 8001df6:	2003      	movs	r0, #3
	  m_si5351Config.ms0_freq		 = 0;
 8001df8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	  m_si5351Config.ms2_freq		 = 0;
 8001dfc:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
	  m_si5351Config.ms1_r_div		 = 0;
 8001e00:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
	  m_si5351Config.initialised     = 0;
 8001e04:	7023      	strb	r3, [r4, #0]
	  m_si5351Config.crystalPPM      = 30;
 8001e06:	60e2      	str	r2, [r4, #12]
	  m_si5351Config.plla_configured = 0;
 8001e08:	7423      	strb	r3, [r4, #16]
	  m_si5351Config.plla_freq       = 0;
 8001e0a:	6163      	str	r3, [r4, #20]
	  m_si5351Config.pllb_configured = 0;
 8001e0c:	7623      	strb	r3, [r4, #24]
	  m_si5351Config.ms2_r_div		 = 0;
 8001e0e:	6363      	str	r3, [r4, #52]	@ 0x34
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF));
 8001e10:	f7ff ffc8 	bl	8001da4 <si5351_write8>
 8001e14:	bb98      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, 0x80));
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	2010      	movs	r0, #16
 8001e1a:	f7ff ffc3 	bl	8001da4 <si5351_write8>
 8001e1e:	bb70      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, 0x80));
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	2011      	movs	r0, #17
 8001e24:	f7ff ffbe 	bl	8001da4 <si5351_write8>
 8001e28:	bb48      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, 0x80));
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	2012      	movs	r0, #18
 8001e2e:	f7ff ffb9 	bl	8001da4 <si5351_write8>
 8001e32:	bb20      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_19_CLK3_CONTROL, 0x80));
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	2013      	movs	r0, #19
 8001e38:	f7ff ffb4 	bl	8001da4 <si5351_write8>
 8001e3c:	b9f8      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_20_CLK4_CONTROL, 0x80));
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	2014      	movs	r0, #20
 8001e42:	f7ff ffaf 	bl	8001da4 <si5351_write8>
 8001e46:	b9d0      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_21_CLK5_CONTROL, 0x80));
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	2015      	movs	r0, #21
 8001e4c:	f7ff ffaa 	bl	8001da4 <si5351_write8>
 8001e50:	b9a8      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_22_CLK6_CONTROL, 0x80));
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	2016      	movs	r0, #22
 8001e56:	f7ff ffa5 	bl	8001da4 <si5351_write8>
 8001e5a:	b980      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_23_CLK7_CONTROL, 0x80));
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	2017      	movs	r0, #23
 8001e60:	f7ff ffa0 	bl	8001da4 <si5351_write8>
 8001e64:	b958      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE,
 8001e66:	20b7      	movs	r0, #183	@ 0xb7
 8001e68:	7a21      	ldrb	r1, [r4, #8]
 8001e6a:	f7ff ff9b 	bl	8001da4 <si5351_write8>
 8001e6e:	b930      	cbnz	r0, 8001e7e <si5351_Init+0x9a>
  m_si5351Config.plla_configured = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	7423      	strb	r3, [r4, #16]
  m_si5351Config.plla_freq = 0;
 8001e74:	6163      	str	r3, [r4, #20]
  m_si5351Config.pllb_configured = 0;
 8001e76:	7623      	strb	r3, [r4, #24]
  m_si5351Config.pllb_freq = 0;
 8001e78:	61e3      	str	r3, [r4, #28]
  m_si5351Config.initialised = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	7023      	strb	r3, [r4, #0]
}
 8001e7e:	bd10      	pop	{r4, pc}
 8001e80:	017d7840 	.word	0x017d7840
 8001e84:	200003f4 	.word	0x200003f4

08001e88 <si5351_setupPLL>:
{
 8001e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001e8c:	4f70      	ldr	r7, [pc, #448]	@ (8002050 <si5351_setupPLL+0x1c8>)
{
 8001e8e:	461c      	mov	r4, r3
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001e90:	783b      	ldrb	r3, [r7, #0]
{
 8001e92:	4683      	mov	fp, r0
 8001e94:	468a      	mov	sl, r1
 8001e96:	4615      	mov	r5, r2
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80d4 	beq.w	8002046 <si5351_setupPLL+0x1be>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 8001e9e:	f1a1 030f 	sub.w	r3, r1, #15
 8001ea2:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ea4:	f200 80d1 	bhi.w	800204a <si5351_setupPLL+0x1c2>
  ASSERT( denom > 0,                  ERROR_INVALIDPARAMETER ); /* Avoid divide by zero */
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8002054 <si5351_setupPLL+0x1cc>)
 8001eaa:	1e62      	subs	r2, r4, #1
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f200 80cc 	bhi.w	800204a <si5351_setupPLL+0x1c2>
  ASSERT( num <= 0xFFFFF,             ERROR_INVALIDPARAMETER ); /* 20-bit limit */
 8001eb2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8001eb6:	f080 80c8 	bcs.w	800204a <si5351_setupPLL+0x1c2>
  if (num == 0)
 8001eba:	2d00      	cmp	r5, #0
 8001ebc:	f040 8085 	bne.w	8001fca <si5351_setupPLL+0x142>
    P2 = num;
 8001ec0:	46a9      	mov	r9, r5
    P1 = 128 * mult - 512;
 8001ec2:	1f0e      	subs	r6, r1, #4
 8001ec4:	01f6      	lsls	r6, r6, #7
  uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001ec6:	f1bb 0f00 	cmp.w	fp, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	f04f 0822 	movne.w	r8, #34	@ 0x22
 8001ed0:	f04f 081a 	moveq.w	r8, #26
  ASSERT_STATUS( si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8));
 8001ed4:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8001ed8:	4640      	mov	r0, r8
 8001eda:	f7ff ff63 	bl	8001da4 <si5351_write8>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d16e      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+1, (P3 & 0x000000FF)));
 8001ee4:	b2e1      	uxtb	r1, r4
 8001ee6:	f108 0001 	add.w	r0, r8, #1
 8001eea:	f7ff ff5b 	bl	8001da4 <si5351_write8>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d166      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16));
 8001ef4:	f3c6 4101 	ubfx	r1, r6, #16, #2
 8001ef8:	f108 0002 	add.w	r0, r8, #2
 8001efc:	f7ff ff52 	bl	8001da4 <si5351_write8>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d15d      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8));
 8001f06:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8001f0a:	f108 0003 	add.w	r0, r8, #3
 8001f0e:	f7ff ff49 	bl	8001da4 <si5351_write8>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d154      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+4, (P1 & 0x000000FF)));
 8001f18:	b2f1      	uxtb	r1, r6
 8001f1a:	f108 0004 	add.w	r0, r8, #4
 8001f1e:	f7ff ff41 	bl	8001da4 <si5351_write8>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d14c      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) ));
 8001f28:	0b23      	lsrs	r3, r4, #12
 8001f2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f2e:	f3c9 4103 	ubfx	r1, r9, #16, #4
 8001f32:	4319      	orrs	r1, r3
 8001f34:	f108 0005 	add.w	r0, r8, #5
 8001f38:	f7ff ff34 	bl	8001da4 <si5351_write8>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d13f      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8));
 8001f42:	f3c9 2107 	ubfx	r1, r9, #8, #8
 8001f46:	f108 0006 	add.w	r0, r8, #6
 8001f4a:	f7ff ff2b 	bl	8001da4 <si5351_write8>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d136      	bne.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8( baseaddr+7, (P2 & 0x000000FF)));
 8001f54:	fa5f f189 	uxtb.w	r1, r9
 8001f58:	f108 0007 	add.w	r0, r8, #7
 8001f5c:	f7ff ff22 	bl	8001da4 <si5351_write8>
 8001f60:	4603      	mov	r3, r0
 8001f62:	bb70      	cbnz	r0, 8001fc2 <si5351_setupPLL+0x13a>
  ASSERT_STATUS( si5351_write8(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) ));
 8001f64:	21a0      	movs	r1, #160	@ 0xa0
 8001f66:	20b1      	movs	r0, #177	@ 0xb1
 8001f68:	f7ff ff1c 	bl	8001da4 <si5351_write8>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	bb40      	cbnz	r0, 8001fc2 <si5351_setupPLL+0x13a>
 8001f70:	9000      	str	r0, [sp, #0]
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 8001f72:	4628      	mov	r0, r5
 8001f74:	f7fe fe5e 	bl	8000c34 <__aeabi_ui2f>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7fe fe5a 	bl	8000c34 <__aeabi_ui2f>
 8001f80:	4601      	mov	r1, r0
    float fvco = m_si5351Config.crystalFreq * (mult + ( (float)num / (float)denom ));
 8001f82:	4628      	mov	r0, r5
 8001f84:	f7fe ff62 	bl	8000e4c <__aeabi_fdiv>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	4650      	mov	r0, sl
 8001f8c:	f7fe fe56 	bl	8000c3c <__aeabi_i2f>
 8001f90:	4601      	mov	r1, r0
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7fe fd9e 	bl	8000ad4 <__addsf3>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fe4a 	bl	8000c34 <__aeabi_ui2f>
 8001fa0:	4601      	mov	r1, r0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe fe9e 	bl	8000ce4 <__aeabi_fmul>
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001fa8:	f7fe fa3e 	bl	8000428 <__aeabi_f2d>
 8001fac:	f007 fd10 	bl	80099d0 <floor>
 8001fb0:	f7fe fd6a 	bl	8000a88 <__aeabi_d2uiz>
 8001fb4:	2201      	movs	r2, #1
  if (pll == SI5351_PLL_A)
 8001fb6:	9b00      	ldr	r3, [sp, #0]
 8001fb8:	f1bb 0f00 	cmp.w	fp, #0
 8001fbc:	d140      	bne.n	8002040 <si5351_setupPLL+0x1b8>
    m_si5351Config.plla_configured = 1; //true
 8001fbe:	743a      	strb	r2, [r7, #16]
    m_si5351Config.plla_freq = (uint32_t)floor(fvco);
 8001fc0:	6178      	str	r0, [r7, #20]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	b003      	add	sp, #12
 8001fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    P1 = (uint32_t)(128 * mult + floor(128 * ((float)num/(float)denom)) - 512);
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f7fe fe32 	bl	8000c34 <__aeabi_ui2f>
 8001fd0:	4606      	mov	r6, r0
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7fe fe2e 	bl	8000c34 <__aeabi_ui2f>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f7fe ff36 	bl	8000e4c <__aeabi_fdiv>
 8001fe0:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8001fe4:	f7fe fe7e 	bl	8000ce4 <__aeabi_fmul>
 8001fe8:	f7fe fa1e 	bl	8000428 <__aeabi_f2d>
 8001fec:	f007 fcf0 	bl	80099d0 <floor>
 8001ff0:	4689      	mov	r9, r1
 8001ff2:	4680      	mov	r8, r0
 8001ff4:	ea4f 10ca 	mov.w	r0, sl, lsl #7
 8001ff8:	f7fe fa04 	bl	8000404 <__aeabi_i2d>
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4642      	mov	r2, r8
 8002000:	f7fe f8b4 	bl	800016c <__adddf3>
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800200a:	f7fe f8ad 	bl	8000168 <__aeabi_dsub>
 800200e:	f7fe fd3b 	bl	8000a88 <__aeabi_d2uiz>
 8002012:	4606      	mov	r6, r0
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 8002014:	01e8      	lsls	r0, r5, #7
 8002016:	f7fe f9e5 	bl	80003e4 <__aeabi_ui2d>
 800201a:	e9cd 0100 	strd	r0, r1, [sp]
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f9e0 	bl	80003e4 <__aeabi_ui2d>
 8002024:	464b      	mov	r3, r9
 8002026:	4642      	mov	r2, r8
 8002028:	f7fe fa56 	bl	80004d8 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002034:	f7fe f898 	bl	8000168 <__aeabi_dsub>
 8002038:	f7fe fd26 	bl	8000a88 <__aeabi_d2uiz>
 800203c:	4681      	mov	r9, r0
    P3 = denom;
 800203e:	e742      	b.n	8001ec6 <si5351_setupPLL+0x3e>
    m_si5351Config.pllb_configured = 1; //true
 8002040:	763a      	strb	r2, [r7, #24]
    m_si5351Config.pllb_freq = (uint32_t)floor(fvco);
 8002042:	61f8      	str	r0, [r7, #28]
 8002044:	e7bd      	b.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED );
 8002046:	2305      	movs	r3, #5
 8002048:	e7bb      	b.n	8001fc2 <si5351_setupPLL+0x13a>
  ASSERT( (mult > 14) && (mult < 91), ERROR_INVALIDPARAMETER ); /* mult = 15..90 */
 800204a:	2304      	movs	r3, #4
 800204c:	e7b9      	b.n	8001fc2 <si5351_setupPLL+0x13a>
 800204e:	bf00      	nop
 8002050:	200003f4 	.word	0x200003f4
 8002054:	000ffffe 	.word	0x000ffffe

08002058 <si5351_setupMultisynth>:
{
 8002058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800205c:	4e8a      	ldr	r6, [pc, #552]	@ (8002288 <si5351_setupMultisynth+0x230>)
{
 800205e:	461c      	mov	r4, r3
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 8002060:	7833      	ldrb	r3, [r6, #0]
{
 8002062:	b087      	sub	sp, #28
 8002064:	4605      	mov	r5, r0
 8002066:	4692      	mov	sl, r2
 8002068:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800206c:	9101      	str	r1, [sp, #4]
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8104 	beq.w	800227c <si5351_setupMultisynth+0x224>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8002074:	2802      	cmp	r0, #2
 8002076:	f200 8105 	bhi.w	8002284 <si5351_setupMultisynth+0x22c>
  if (pllSource == SI5351_PLL_A)
 800207a:	2301      	movs	r3, #1
 800207c:	2900      	cmp	r1, #0
 800207e:	d178      	bne.n	8002172 <si5351_setupMultisynth+0x11a>
    ASSERT(m_si5351Config.plla_configured = 1, ERROR_INVALIDPARAMETER);
 8002080:	7433      	strb	r3, [r6, #16]
  if (num == 0)
 8002082:	2c00      	cmp	r4, #0
 8002084:	d177      	bne.n	8002176 <si5351_setupMultisynth+0x11e>
    P2 = num;
 8002086:	46a3      	mov	fp, r4
    P1 = 128 * div - 512;
 8002088:	f10a 7700 	add.w	r7, sl, #33554432	@ 0x2000000
 800208c:	3f04      	subs	r7, #4
 800208e:	01ff      	lsls	r7, r7, #7
  switch (output)
 8002090:	2d01      	cmp	r5, #1
 8002092:	f000 80ab 	beq.w	80021ec <si5351_setupMultisynth+0x194>
      baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8002096:	2d02      	cmp	r5, #2
 8002098:	bf0c      	ite	eq
 800209a:	f04f 083a 	moveq.w	r8, #58	@ 0x3a
 800209e:	f04f 082a 	movne.w	r8, #42	@ 0x2a
  si5351_write8( baseaddr,   (P3 & 0x0000FF00) >> 8);
 80020a2:	f3c9 2107 	ubfx	r1, r9, #8, #8
 80020a6:	4640      	mov	r0, r8
 80020a8:	f7ff fe7c 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+1, (P3 & 0x000000FF));
 80020ac:	fa5f f189 	uxtb.w	r1, r9
 80020b0:	f108 0001 	add.w	r0, r8, #1
 80020b4:	f7ff fe76 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+2, (P1 & 0x00030000) >> 16);	/* ToDo: Add DIVBY4 (>150MHz) and R0 support (<500kHz) later */
 80020b8:	f3c7 4101 	ubfx	r1, r7, #16, #2
 80020bc:	f108 0002 	add.w	r0, r8, #2
 80020c0:	f7ff fe70 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+3, (P1 & 0x0000FF00) >> 8);
 80020c4:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80020c8:	f108 0003 	add.w	r0, r8, #3
 80020cc:	f7ff fe6a 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+4, (P1 & 0x000000FF));
 80020d0:	b2f9      	uxtb	r1, r7
 80020d2:	f108 0004 	add.w	r0, r8, #4
 80020d6:	f7ff fe65 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+5, ((P3 & 0x000F0000) >> 12) | ((P2 & 0x000F0000) >> 16) );
 80020da:	ea4f 3319 	mov.w	r3, r9, lsr #12
 80020de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e2:	f3cb 4103 	ubfx	r1, fp, #16, #4
 80020e6:	4319      	orrs	r1, r3
 80020e8:	f108 0005 	add.w	r0, r8, #5
 80020ec:	f7ff fe5a 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+6, (P2 & 0x0000FF00) >> 8);
 80020f0:	f3cb 2107 	ubfx	r1, fp, #8, #8
 80020f4:	f108 0006 	add.w	r0, r8, #6
 80020f8:	f7ff fe54 	bl	8001da4 <si5351_write8>
  si5351_write8( baseaddr+7, (P2 & 0x000000FF));
 80020fc:	fa5f f18b 	uxtb.w	r1, fp
 8002100:	f108 0007 	add.w	r0, r8, #7
 8002104:	f7ff fe4e 	bl	8001da4 <si5351_write8>
  if (pllSource == SI5351_PLL_A)
 8002108:	9b01      	ldr	r3, [sp, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d17e      	bne.n	800220c <si5351_setupMultisynth+0x1b4>
          float fvco = m_si5351Config.plla_freq / (div + ( (float)num / (float)denom ));
 800210e:	6970      	ldr	r0, [r6, #20]
 8002110:	f7fe fd90 	bl	8000c34 <__aeabi_ui2f>
 8002114:	4607      	mov	r7, r0
 8002116:	4620      	mov	r0, r4
 8002118:	f7fe fd8c 	bl	8000c34 <__aeabi_ui2f>
 800211c:	4680      	mov	r8, r0
 800211e:	4648      	mov	r0, r9
 8002120:	f7fe fd88 	bl	8000c34 <__aeabi_ui2f>
 8002124:	4601      	mov	r1, r0
 8002126:	4640      	mov	r0, r8
 8002128:	f7fe fe90 	bl	8000e4c <__aeabi_fdiv>
 800212c:	4680      	mov	r8, r0
 800212e:	4650      	mov	r0, sl
 8002130:	f7fe fd80 	bl	8000c34 <__aeabi_ui2f>
 8002134:	4601      	mov	r1, r0
 8002136:	4640      	mov	r0, r8
 8002138:	f7fe fccc 	bl	8000ad4 <__addsf3>
 800213c:	4601      	mov	r1, r0
 800213e:	4638      	mov	r0, r7
 8002140:	f7fe fe84 	bl	8000e4c <__aeabi_fdiv>
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002144:	f7fe f970 	bl	8000428 <__aeabi_f2d>
 8002148:	f007 fc42 	bl	80099d0 <floor>
 800214c:	f7fe fc9c 	bl	8000a88 <__aeabi_d2uiz>
          switch (output)
 8002150:	2d01      	cmp	r5, #1
 8002152:	d04e      	beq.n	80021f2 <si5351_setupMultisynth+0x19a>
 8002154:	2d02      	cmp	r5, #2
 8002156:	d053      	beq.n	8002200 <si5351_setupMultisynth+0x1a8>
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002158:	6230      	str	r0, [r6, #32]
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 800215a:	2c00      	cmp	r4, #0
 800215c:	f040 808c 	bne.w	8002278 <si5351_setupMultisynth+0x220>
 8002160:	214f      	movs	r1, #79	@ 0x4f
  switch (output)
 8002162:	2d02      	cmp	r5, #2
 8002164:	d050      	beq.n	8002208 <si5351_setupMultisynth+0x1b0>
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_16_CLK0_CONTROL, clkControlReg));
 8002166:	2010      	movs	r0, #16
}
 8002168:	b007      	add	sp, #28
 800216a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 800216e:	f7ff be19 	b.w	8001da4 <si5351_write8>
    ASSERT(m_si5351Config.pllb_configured = 1, ERROR_INVALIDPARAMETER);
 8002172:	7633      	strb	r3, [r6, #24]
 8002174:	e785      	b.n	8002082 <si5351_setupMultisynth+0x2a>
    P1 = (uint32_t)(128 * div + floor(128 * ((float)num/(float)denom)) - 512);
 8002176:	4620      	mov	r0, r4
 8002178:	f7fe fd5c 	bl	8000c34 <__aeabi_ui2f>
 800217c:	4607      	mov	r7, r0
 800217e:	4648      	mov	r0, r9
 8002180:	f7fe fd58 	bl	8000c34 <__aeabi_ui2f>
 8002184:	4601      	mov	r1, r0
 8002186:	4638      	mov	r0, r7
 8002188:	f7fe fe60 	bl	8000e4c <__aeabi_fdiv>
 800218c:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8002190:	f7fe fda8 	bl	8000ce4 <__aeabi_fmul>
 8002194:	f7fe f948 	bl	8000428 <__aeabi_f2d>
 8002198:	f007 fc1a 	bl	80099d0 <floor>
 800219c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021a0:	ea4f 10ca 	mov.w	r0, sl, lsl #7
 80021a4:	f7fe f91e 	bl	80003e4 <__aeabi_ui2d>
 80021a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021ac:	f7fd ffde 	bl	800016c <__adddf3>
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80021b6:	f7fd ffd7 	bl	8000168 <__aeabi_dsub>
 80021ba:	f7fe fc65 	bl	8000a88 <__aeabi_d2uiz>
 80021be:	4607      	mov	r7, r0
    P2 = (uint32_t)(128 * num - denom * floor(128 * ((float)num/(float)denom)));
 80021c0:	01e0      	lsls	r0, r4, #7
 80021c2:	f7fe f90f 	bl	80003e4 <__aeabi_ui2d>
 80021c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80021ca:	4648      	mov	r0, r9
 80021cc:	f7fe f90a 	bl	80003e4 <__aeabi_ui2d>
 80021d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021d4:	f7fe f980 	bl	80004d8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80021e0:	f7fd ffc2 	bl	8000168 <__aeabi_dsub>
 80021e4:	f7fe fc50 	bl	8000a88 <__aeabi_d2uiz>
 80021e8:	4683      	mov	fp, r0
    P3 = denom;
 80021ea:	e751      	b.n	8002090 <si5351_setupMultisynth+0x38>
  switch (output)
 80021ec:	f04f 0832 	mov.w	r8, #50	@ 0x32
 80021f0:	e757      	b.n	80020a2 <si5351_setupMultisynth+0x4a>
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	bf14      	ite	ne
 80021f6:	210f      	movne	r1, #15
 80021f8:	214f      	moveq	r1, #79	@ 0x4f
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 80021fa:	6270      	str	r0, [r6, #36]	@ 0x24
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_17_CLK1_CONTROL, clkControlReg));
 80021fc:	2011      	movs	r0, #17
 80021fe:	e7b3      	b.n	8002168 <si5351_setupMultisynth+0x110>
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002200:	62b0      	str	r0, [r6, #40]	@ 0x28
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 8002202:	2c00      	cmp	r4, #0
 8002204:	d0ac      	beq.n	8002160 <si5351_setupMultisynth+0x108>
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 8002206:	210f      	movs	r1, #15
      ASSERT_STATUS(si5351_write8(SI5351_REGISTER_18_CLK2_CONTROL, clkControlReg));
 8002208:	2012      	movs	r0, #18
 800220a:	e7ad      	b.n	8002168 <si5351_setupMultisynth+0x110>
          float fvco = m_si5351Config.pllb_freq / (div + ( (float)num / (float)denom));
 800220c:	69f0      	ldr	r0, [r6, #28]
 800220e:	f7fe fd11 	bl	8000c34 <__aeabi_ui2f>
 8002212:	4607      	mov	r7, r0
 8002214:	4620      	mov	r0, r4
 8002216:	f7fe fd0d 	bl	8000c34 <__aeabi_ui2f>
 800221a:	4680      	mov	r8, r0
 800221c:	4648      	mov	r0, r9
 800221e:	f7fe fd09 	bl	8000c34 <__aeabi_ui2f>
 8002222:	4601      	mov	r1, r0
 8002224:	4640      	mov	r0, r8
 8002226:	f7fe fe11 	bl	8000e4c <__aeabi_fdiv>
 800222a:	4680      	mov	r8, r0
 800222c:	4650      	mov	r0, sl
 800222e:	f7fe fd01 	bl	8000c34 <__aeabi_ui2f>
 8002232:	4601      	mov	r1, r0
 8002234:	4640      	mov	r0, r8
 8002236:	f7fe fc4d 	bl	8000ad4 <__addsf3>
 800223a:	4601      	mov	r1, r0
 800223c:	4638      	mov	r0, r7
 800223e:	f7fe fe05 	bl	8000e4c <__aeabi_fdiv>
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002242:	f7fe f8f1 	bl	8000428 <__aeabi_f2d>
 8002246:	f007 fbc3 	bl	80099d0 <floor>
 800224a:	f7fe fc1d 	bl	8000a88 <__aeabi_d2uiz>
          switch (output)
 800224e:	2d01      	cmp	r5, #1
 8002250:	d00e      	beq.n	8002270 <si5351_setupMultisynth+0x218>
 8002252:	2d02      	cmp	r5, #2
 8002254:	d00e      	beq.n	8002274 <si5351_setupMultisynth+0x21c>
           m_si5351Config.ms0_freq = (uint32_t)floor(fvco);
 8002256:	6230      	str	r0, [r6, #32]
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	2b01      	cmp	r3, #1
 800225c:	bf0c      	ite	eq
 800225e:	212f      	moveq	r1, #47	@ 0x2f
 8002260:	210f      	movne	r1, #15
  if (num == 0) clkControlReg |= (1 << 6);                  /* Integer mode */
 8002262:	b90c      	cbnz	r4, 8002268 <si5351_setupMultisynth+0x210>
 8002264:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
  switch (output)
 8002268:	2d01      	cmp	r5, #1
 800226a:	f47f af7a 	bne.w	8002162 <si5351_setupMultisynth+0x10a>
 800226e:	e7c5      	b.n	80021fc <si5351_setupMultisynth+0x1a4>
           m_si5351Config.ms1_freq = (uint32_t)floor(fvco);
 8002270:	6270      	str	r0, [r6, #36]	@ 0x24
           break;
 8002272:	e7f1      	b.n	8002258 <si5351_setupMultisynth+0x200>
           m_si5351Config.ms2_freq = (uint32_t)floor(fvco);
 8002274:	62b0      	str	r0, [r6, #40]	@ 0x28
           break;
 8002276:	e7ef      	b.n	8002258 <si5351_setupMultisynth+0x200>
  uint8_t clkControlReg = 0x0F;                             /* 8mA drive strength, MS0 as CLK0 source, Clock not inverted, powered up */
 8002278:	210f      	movs	r1, #15
 800227a:	e774      	b.n	8002166 <si5351_setupMultisynth+0x10e>
  ASSERT( m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800227c:	2005      	movs	r0, #5
}
 800227e:	b007      	add	sp, #28
 8002280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 8002284:	2004      	movs	r0, #4
 8002286:	e7fa      	b.n	800227e <si5351_setupMultisynth+0x226>
 8002288:	200003f4 	.word	0x200003f4

0800228c <si5351_enableOutputs>:
  ASSERT(m_si5351Config.initialised, ERROR_DEVICENOTINITIALISED);
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <si5351_enableOutputs+0x1c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b13b      	cbz	r3, 80022a2 <si5351_enableOutputs+0x16>
  ASSERT_STATUS(si5351_write8(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, enabled ? 0x00: 0xFF));
 8002292:	fab0 f080 	clz	r0, r0
 8002296:	0940      	lsrs	r0, r0, #5
 8002298:	4241      	negs	r1, r0
 800229a:	b2c9      	uxtb	r1, r1
 800229c:	2003      	movs	r0, #3
 800229e:	f7ff bd81 	b.w	8001da4 <si5351_write8>
}
 80022a2:	2005      	movs	r0, #5
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200003f4 	.word	0x200003f4

080022ac <si5351_read8>:
/*!
    @brief  Reads an 8 bit value over I2C
*/
/**************************************************************************/
err_t si5351_read8(uint8_t reg, uint8_t *value)
{
 80022ac:	b530      	push	{r4, r5, lr}
 80022ae:	4605      	mov	r5, r0
 80022b0:	b087      	sub	sp, #28
 80022b2:	9105      	str	r1, [sp, #20]
	HAL_StatusTypeDef status = HAL_OK;

	while (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(SI5351_ADDRESS<<1), 3, 100) != HAL_OK) { }
 80022b4:	2364      	movs	r3, #100	@ 0x64
 80022b6:	2203      	movs	r2, #3
 80022b8:	21c0      	movs	r1, #192	@ 0xc0
 80022ba:	480a      	ldr	r0, [pc, #40]	@ (80022e4 <si5351_read8+0x38>)
 80022bc:	f001 fb44 	bl	8003948 <HAL_I2C_IsDeviceReady>
 80022c0:	4604      	mov	r4, r0
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d1f6      	bne.n	80022b4 <si5351_read8+0x8>

    status = HAL_I2C_Mem_Read(&hi2c1,							// i2c handle
 80022c6:	2301      	movs	r3, #1
 80022c8:	2264      	movs	r2, #100	@ 0x64
 80022ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80022ce:	aa05      	add	r2, sp, #20
 80022d0:	9200      	str	r2, [sp, #0]
 80022d2:	21c0      	movs	r1, #192	@ 0xc0
 80022d4:	462a      	mov	r2, r5
 80022d6:	4803      	ldr	r0, [pc, #12]	@ (80022e4 <si5351_read8+0x38>)
 80022d8:	f001 f9f2 	bl	80036c0 <HAL_I2C_Mem_Read>
							  (uint8_t*)(&value),				// write returned data to this variable
							  1,								// how many bytes to expect returned
							  100);								// timeout

  return ERROR_NONE;
}
 80022dc:	4620      	mov	r0, r4
 80022de:	b007      	add	sp, #28
 80022e0:	bd30      	pop	{r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	200003a0 	.word	0x200003a0

080022e8 <si5351_setupRdiv>:
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 80022e8:	2802      	cmp	r0, #2
err_t si5351_setupRdiv(uint8_t  output, si5351RDiv_t div) {
 80022ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	f04f 0600 	mov.w	r6, #0
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 80022f4:	d82b      	bhi.n	800234e <si5351_setupRdiv+0x66>
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 80022f6:	2801      	cmp	r0, #1
 80022f8:	d023      	beq.n	8002342 <si5351_setupRdiv+0x5a>
  if (output == 2) Rreg = SI5351_REGISTER_60_MULTISYNTH2_PARAMETERS_3;
 80022fa:	2802      	cmp	r0, #2
 80022fc:	bf0c      	ite	eq
 80022fe:	273c      	moveq	r7, #60	@ 0x3c
 8002300:	272c      	movne	r7, #44	@ 0x2c
  si5351_read8(Rreg, &regval);
 8002302:	f10d 0107 	add.w	r1, sp, #7
 8002306:	4638      	mov	r0, r7
 8002308:	f7ff ffd0 	bl	80022ac <si5351_read8>
  regval &= 0x0F;
 800230c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  divider <<= 4;
 8002310:	012a      	lsls	r2, r5, #4
  regval &= 0x0F;
 8002312:	f003 030f 	and.w	r3, r3, #15
  divider <<= 4;
 8002316:	f002 0270 	and.w	r2, r2, #112	@ 0x70
  regval |= divider;
 800231a:	ea43 0102 	orr.w	r1, r3, r2
  si5351_write8(Rreg, regval);
 800231e:	4638      	mov	r0, r7
  regval |= divider;
 8002320:	f88d 1007 	strb.w	r1, [sp, #7]
  si5351_write8(Rreg, regval);
 8002324:	f7ff fd3e 	bl	8001da4 <si5351_write8>
  switch(div)
 8002328:	2d07      	cmp	r5, #7
 800232a:	bf9c      	itt	ls
 800232c:	4b09      	ldrls	r3, [pc, #36]	@ (8002354 <si5351_setupRdiv+0x6c>)
 800232e:	5d5e      	ldrbls	r6, [r3, r5]
  switch(output)
 8002330:	2c01      	cmp	r4, #1
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <si5351_setupRdiv+0x70>)
 8002334:	d007      	beq.n	8002346 <si5351_setupRdiv+0x5e>
 8002336:	2c02      	cmp	r4, #2
 8002338:	d007      	beq.n	800234a <si5351_setupRdiv+0x62>
  m_si5351Config.ms0_r_div = rDiv;
 800233a:	62de      	str	r6, [r3, #44]	@ 0x2c
  return ERROR_NONE;
 800233c:	2000      	movs	r0, #0
}
 800233e:	b003      	add	sp, #12
 8002340:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (output == 1) Rreg = SI5351_REGISTER_52_MULTISYNTH1_PARAMETERS_3;
 8002342:	2734      	movs	r7, #52	@ 0x34
 8002344:	e7dd      	b.n	8002302 <si5351_setupRdiv+0x1a>
  m_si5351Config.ms1_r_div = rDiv;
 8002346:	631e      	str	r6, [r3, #48]	@ 0x30
  break;
 8002348:	e7f8      	b.n	800233c <si5351_setupRdiv+0x54>
  m_si5351Config.ms2_r_div = rDiv;
 800234a:	635e      	str	r6, [r3, #52]	@ 0x34
  break;
 800234c:	e7f6      	b.n	800233c <si5351_setupRdiv+0x54>
  ASSERT( output < 3,                 ERROR_INVALIDPARAMETER);  /* Channel range */
 800234e:	2004      	movs	r0, #4
 8002350:	e7f5      	b.n	800233e <si5351_setupRdiv+0x56>
 8002352:	bf00      	nop
 8002354:	0800a9e0 	.word	0x0800a9e0
 8002358:	200003f4 	.word	0x200003f4

0800235c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_MspInit+0x4c>)
{
 800235e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002362:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	619a      	str	r2, [r3, #24]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	f002 0201 	and.w	r2, r2, #1
 8002370:	9200      	str	r2, [sp, #0]
 8002372:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800237a:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002380:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800238a:	f000 fbb5 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800238e:	2005      	movs	r0, #5
 8002390:	f000 fbe2 	bl	8002b58 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002394:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <HAL_MspInit+0x50>)
 8002396:	6853      	ldr	r3, [r2, #4]
 8002398:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800239c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	b003      	add	sp, #12
 80023a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000

080023b0 <HAL_I2C_MspInit>:
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	2210      	movs	r2, #16
{
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
 80023b6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	eb0d 0002 	add.w	r0, sp, r2
 80023bc:	2100      	movs	r1, #0
 80023be:	f006 fe13 	bl	8008fe8 <memset>
  if(hi2c->Instance==I2C1)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	@ (8002488 <HAL_I2C_MspInit+0xd8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12e      	bne.n	8002428 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4c30      	ldr	r4, [pc, #192]	@ (800248c <HAL_I2C_MspInit+0xdc>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023cc:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	482f      	ldr	r0, [pc, #188]	@ (8002490 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	61a3      	str	r3, [r4, #24]
 80023d8:	69a3      	ldr	r3, [r4, #24]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e2:	2312      	movs	r3, #18
 80023e4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f000 fd45 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f4:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023f6:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023fc:	61e3      	str	r3, [r4, #28]
 80023fe:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002400:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800240a:	f000 fb75 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800240e:	201f      	movs	r0, #31
 8002410:	f000 fba2 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2020      	movs	r0, #32
 8002418:	4611      	mov	r1, r2
 800241a:	f000 fb6d 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800241e:	2020      	movs	r0, #32
    __HAL_RCC_I2C2_CLK_ENABLE();
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002420:	f000 fb9a 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002424:	b008      	add	sp, #32
 8002426:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8002428:	4a1a      	ldr	r2, [pc, #104]	@ (8002494 <HAL_I2C_MspInit+0xe4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d1fa      	bne.n	8002424 <HAL_I2C_MspInit+0x74>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4c17      	ldr	r4, [pc, #92]	@ (800248c <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002430:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	4816      	ldr	r0, [pc, #88]	@ (8002490 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	61a3      	str	r3, [r4, #24]
 800243e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244a:	2312      	movs	r3, #18
 800244c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f000 fd12 	bl	8002e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002458:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 800245a:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800245c:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002462:	61e3      	str	r3, [r4, #28]
 8002464:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002466:	2021      	movs	r0, #33	@ 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246c:	9303      	str	r3, [sp, #12]
 800246e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002470:	f000 fb42 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002474:	2021      	movs	r0, #33	@ 0x21
 8002476:	f000 fb6f 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2022      	movs	r0, #34	@ 0x22
 800247e:	4611      	mov	r1, r2
 8002480:	f000 fb3a 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002484:	2022      	movs	r0, #34	@ 0x22
 8002486:	e7cb      	b.n	8002420 <HAL_I2C_MspInit+0x70>
 8002488:	40005400 	.word	0x40005400
 800248c:	40021000 	.word	0x40021000
 8002490:	40010c00 	.word	0x40010c00
 8002494:	40005800 	.word	0x40005800

08002498 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b510      	push	{r4, lr}
 800249a:	4604      	mov	r4, r0
 800249c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	2210      	movs	r2, #16
 80024a0:	2100      	movs	r1, #0
 80024a2:	a802      	add	r0, sp, #8
 80024a4:	f006 fda0 	bl	8008fe8 <memset>
  if(hspi->Instance==SPI1)
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <HAL_SPI_MspInit+0x7c>)
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d12e      	bne.n	800250e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b0:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 80024b4:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	4818      	ldr	r0, [pc, #96]	@ (8002518 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024c6:	9200      	str	r2, [sp, #0]
 80024c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024cc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	f042 0204 	orr.w	r2, r2, #4
 80024d2:	619a      	str	r2, [r3, #24]
 80024d4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f000 fcc7 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ee:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <HAL_SPI_MspInit+0x80>)
 80024f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f000 fcbf 	bl	8002e7c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024fe:	2023      	movs	r0, #35	@ 0x23
 8002500:	4622      	mov	r2, r4
 8002502:	4621      	mov	r1, r4
 8002504:	f000 faf8 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002508:	2023      	movs	r0, #35	@ 0x23
 800250a:	f000 fb25 	bl	8002b58 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800250e:	b006      	add	sp, #24
 8002510:	bd10      	pop	{r4, pc}
 8002512:	bf00      	nop
 8002514:	40013000 	.word	0x40013000
 8002518:	40010800 	.word	0x40010800

0800251c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
 8002520:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002522:	2210      	movs	r2, #16
 8002524:	2100      	movs	r1, #0
 8002526:	a802      	add	r0, sp, #8
 8002528:	f006 fd5e 	bl	8008fe8 <memset>
  if(htim_encoder->Instance==TIM1)
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_TIM_Encoder_MspInit+0x94>)
 8002530:	429a      	cmp	r2, r3
 8002532:	d13a      	bne.n	80025aa <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002534:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002538:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	481e      	ldr	r0, [pc, #120]	@ (80025b4 <HAL_TIM_Encoder_MspInit+0x98>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002540:	619a      	str	r2, [r3, #24]
 8002542:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002546:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800254a:	9200      	str	r2, [sp, #0]
 800254c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	f042 0204 	orr.w	r2, r2, #4
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002560:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002564:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f000 fc89 	bl	8002e7c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2018      	movs	r0, #24
 800256e:	4611      	mov	r1, r2
 8002570:	f000 fac2 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002574:	2018      	movs	r0, #24
 8002576:	f000 faef 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2019      	movs	r0, #25
 800257e:	4611      	mov	r1, r2
 8002580:	f000 faba 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002584:	2019      	movs	r0, #25
 8002586:	f000 fae7 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	201a      	movs	r0, #26
 800258e:	4611      	mov	r1, r2
 8002590:	f000 fab2 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002594:	201a      	movs	r0, #26
 8002596:	f000 fadf 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	201b      	movs	r0, #27
 800259e:	4611      	mov	r1, r2
 80025a0:	f000 faaa 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025a4:	201b      	movs	r0, #27
 80025a6:	f000 fad7 	bl	8002b58 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80025aa:	b006      	add	sp, #24
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40010800 	.word	0x40010800

080025b8 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80025b8:	6803      	ldr	r3, [r0, #0]
{
 80025ba:	b507      	push	{r0, r1, r2, lr}
  if(htim_pwm->Instance==TIM2)
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c0:	d115      	bne.n	80025ee <HAL_TIM_PWM_MspInit+0x36>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80025c6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025c8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025de:	f000 fa8b 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e2:	201c      	movs	r0, #28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025e4:	b003      	add	sp, #12
 80025e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ea:	f000 bab5 	b.w	8002b58 <HAL_NVIC_EnableIRQ>
}
 80025ee:	b003      	add	sp, #12
 80025f0:	f85d fb04 	ldr.w	pc, [sp], #4

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f4:	b510      	push	{r4, lr}
 80025f6:	4604      	mov	r4, r0
 80025f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fa:	2210      	movs	r2, #16
 80025fc:	2100      	movs	r1, #0
 80025fe:	a802      	add	r0, sp, #8
 8002600:	f006 fcf2 	bl	8008fe8 <memset>
  if(htim->Instance==TIM2)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260a:	d11d      	bne.n	8002648 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002610:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	480e      	ldr	r0, [pc, #56]	@ (800264c <HAL_TIM_MspPostInit+0x58>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	f042 0204 	orr.w	r2, r2, #4
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f000 fc23 	bl	8002e7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002636:	4a06      	ldr	r2, [pc, #24]	@ (8002650 <HAL_TIM_MspPostInit+0x5c>)
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800263e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002646:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002648:	b006      	add	sp, #24
 800264a:	bd10      	pop	{r4, pc}
 800264c:	40010800 	.word	0x40010800
 8002650:	40010000 	.word	0x40010000

08002654 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002654:	e7fe      	b.n	8002654 <NMI_Handler>

08002656 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler>

08002658 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler>

0800265a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <BusFault_Handler>

0800265c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <UsageFault_Handler>

0800265e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002660:	4770      	bx	lr

08002662 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 ba12 	b.w	8002a8c <HAL_IncTick>

08002668 <RCC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 8002668:	4770      	bx	lr
	...

0800266c <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800266c:	4801      	ldr	r0, [pc, #4]	@ (8002674 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 800266e:	f002 b911 	b.w	8004894 <HAL_PCD_IRQHandler>
 8002672:	bf00      	nop
 8002674:	200015ac 	.word	0x200015ac

08002678 <USB_LP_CAN1_RX0_IRQHandler>:
}

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
 8002678:	f7ff bff8 	b.w	800266c <USB_HP_CAN1_TX_IRQHandler>

0800267c <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800267c:	4801      	ldr	r0, [pc, #4]	@ (8002684 <TIM1_BRK_IRQHandler+0x8>)
 800267e:	f003 bec8 	b.w	8006412 <HAL_TIM_IRQHandler>
 8002682:	bf00      	nop
 8002684:	200002ac 	.word	0x200002ac

08002688 <TIM1_UP_IRQHandler>:
}

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
 8002688:	f7ff bff8 	b.w	800267c <TIM1_BRK_IRQHandler>

0800268c <TIM1_TRG_COM_IRQHandler>:
}

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
 800268c:	f7ff bff6 	b.w	800267c <TIM1_BRK_IRQHandler>

08002690 <TIM1_CC_IRQHandler>:
}

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 8002690:	f7ff bff4 	b.w	800267c <TIM1_BRK_IRQHandler>

08002694 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002694:	4801      	ldr	r0, [pc, #4]	@ (800269c <TIM2_IRQHandler+0x8>)
 8002696:	f003 bebc 	b.w	8006412 <HAL_TIM_IRQHandler>
 800269a:	bf00      	nop
 800269c:	20000264 	.word	0x20000264

080026a0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026a0:	4801      	ldr	r0, [pc, #4]	@ (80026a8 <I2C1_EV_IRQHandler+0x8>)
 80026a2:	f001 bb6f 	b.w	8003d84 <HAL_I2C_EV_IRQHandler>
 80026a6:	bf00      	nop
 80026a8:	200003a0 	.word	0x200003a0

080026ac <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026ac:	4801      	ldr	r0, [pc, #4]	@ (80026b4 <I2C1_ER_IRQHandler+0x8>)
 80026ae:	f001 bfc1 	b.w	8004634 <HAL_I2C_ER_IRQHandler>
 80026b2:	bf00      	nop
 80026b4:	200003a0 	.word	0x200003a0

080026b8 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80026b8:	4801      	ldr	r0, [pc, #4]	@ (80026c0 <I2C2_EV_IRQHandler+0x8>)
 80026ba:	f001 bb63 	b.w	8003d84 <HAL_I2C_EV_IRQHandler>
 80026be:	bf00      	nop
 80026c0:	2000034c 	.word	0x2000034c

080026c4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80026c4:	4801      	ldr	r0, [pc, #4]	@ (80026cc <I2C2_ER_IRQHandler+0x8>)
 80026c6:	f001 bfb5 	b.w	8004634 <HAL_I2C_ER_IRQHandler>
 80026ca:	bf00      	nop
 80026cc:	2000034c 	.word	0x2000034c

080026d0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026d0:	4801      	ldr	r0, [pc, #4]	@ (80026d8 <SPI1_IRQHandler+0x8>)
 80026d2:	f003 bd25 	b.w	8006120 <HAL_SPI_IRQHandler>
 80026d6:	bf00      	nop
 80026d8:	200002f4 	.word	0x200002f4

080026dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4a0b      	ldr	r2, [pc, #44]	@ (800270c <_sbrk+0x30>)
{
 80026de:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80026e0:	6811      	ldr	r1, [r2, #0]
{
 80026e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80026e4:	b909      	cbnz	r1, 80026ea <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80026e6:	490a      	ldr	r1, [pc, #40]	@ (8002710 <_sbrk+0x34>)
 80026e8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	6810      	ldr	r0, [r2, #0]
 80026ec:	4909      	ldr	r1, [pc, #36]	@ (8002714 <_sbrk+0x38>)
 80026ee:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <_sbrk+0x3c>)
 80026f0:	4403      	add	r3, r0
 80026f2:	1b09      	subs	r1, r1, r4
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d906      	bls.n	8002706 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80026f8:	f006 fcb6 	bl	8009068 <__errno>
 80026fc:	230c      	movs	r3, #12
 80026fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002700:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002704:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002706:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002708:	e7fc      	b.n	8002704 <_sbrk+0x28>
 800270a:	bf00      	nop
 800270c:	2000042c 	.word	0x2000042c
 8002710:	200019d0 	.word	0x200019d0
 8002714:	20005000 	.word	0x20005000
 8002718:	00000400 	.word	0x00000400

0800271c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	4770      	bx	lr
	...

08002720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002720:	f7ff fffc 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480b      	ldr	r0, [pc, #44]	@ (8002754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002726:	490c      	ldr	r1, [pc, #48]	@ (8002758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002728:	4a0c      	ldr	r2, [pc, #48]	@ (800275c <LoopFillZerobss+0x16>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800273c:	4c09      	ldr	r4, [pc, #36]	@ (8002764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f006 fc93 	bl	8009074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7ff f991 	bl	8001a74 <main>
  bx lr
 8002752:	4770      	bx	lr
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800275c:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 8002760:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002764:	200019cc 	.word	0x200019cc

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800276c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800276e:	2301      	movs	r3, #1
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002778:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 800277c:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	2178      	movs	r1, #120	@ 0x78
 8002784:	2200      	movs	r2, #0
 8002786:	4803      	ldr	r0, [pc, #12]	@ (8002794 <ssd1306_WriteCommand+0x28>)
 8002788:	f000 ff0a 	bl	80035a0 <HAL_I2C_Mem_Write>
}
 800278c:	b007      	add	sp, #28
 800278e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002792:	bf00      	nop
 8002794:	2000034c 	.word	0x2000034c

08002798 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	b289      	uxth	r1, r1
 80027a0:	e9cd 0100 	strd	r0, r1, [sp]
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2240      	movs	r2, #64	@ 0x40
 80027a8:	2301      	movs	r3, #1
 80027aa:	2178      	movs	r1, #120	@ 0x78
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <ssd1306_WriteData+0x20>)
 80027ae:	f000 fef7 	bl	80035a0 <HAL_I2C_Mem_Write>
}
 80027b2:	b005      	add	sp, #20
 80027b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b8:	2000034c 	.word	0x2000034c

080027bc <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80027bc:	2800      	cmp	r0, #0
 80027be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c2:	bf14      	ite	ne
 80027c4:	21ff      	movne	r1, #255	@ 0xff
 80027c6:	2100      	moveq	r1, #0
 80027c8:	4801      	ldr	r0, [pc, #4]	@ (80027d0 <ssd1306_Fill+0x14>)
 80027ca:	f006 bc0d 	b.w	8008fe8 <memset>
 80027ce:	bf00      	nop
 80027d0:	20000436 	.word	0x20000436

080027d4 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	24b0      	movs	r4, #176	@ 0xb0
 80027d8:	4d0a      	ldr	r5, [pc, #40]	@ (8002804 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ffc6 	bl	800276c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff ffc3 	bl	800276c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027e6:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80027e8:	2010      	movs	r0, #16
 80027ea:	f7ff ffbf 	bl	800276c <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027ee:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80027f0:	4628      	mov	r0, r5
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	f7ff ffd0 	bl	8002798 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80027f8:	2cb4      	cmp	r4, #180	@ 0xb4
 80027fa:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 80027fe:	d1ec      	bne.n	80027da <ssd1306_UpdateScreen+0x6>
    }
}
 8002800:	bd38      	pop	{r3, r4, r5, pc}
 8002802:	bf00      	nop
 8002804:	20000436 	.word	0x20000436

08002808 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002808:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800280a:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800280c:	d410      	bmi.n	8002830 <ssd1306_DrawPixel+0x28>
 800280e:	291f      	cmp	r1, #31
 8002810:	d80e      	bhi.n	8002830 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002812:	2401      	movs	r4, #1
 8002814:	08cb      	lsrs	r3, r1, #3
 8002816:	4d07      	ldr	r5, [pc, #28]	@ (8002834 <ssd1306_DrawPixel+0x2c>)
 8002818:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800281c:	5c2b      	ldrb	r3, [r5, r0]
 800281e:	f001 0107 	and.w	r1, r1, #7
 8002822:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 8002826:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002828:	bf0c      	ite	eq
 800282a:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800282c:	438b      	bicne	r3, r1
 800282e:	542b      	strb	r3, [r5, r0]
    }
}
 8002830:	bd30      	pop	{r4, r5, pc}
 8002832:	bf00      	nop
 8002834:	20000436 	.word	0x20000436

08002838 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	b089      	sub	sp, #36	@ 0x24
 8002840:	a808      	add	r0, sp, #32
 8002842:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8002846:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800284a:	f1a4 0520 	sub.w	r5, r4, #32
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800284e:	9302      	str	r3, [sp, #8]
    if (ch < 32 || ch > 126)
 8002850:	b2eb      	uxtb	r3, r5
 8002852:	2b5e      	cmp	r3, #94	@ 0x5e
 8002854:	d848      	bhi.n	80028e8 <ssd1306_WriteChar+0xb0>
 8002856:	9b07      	ldr	r3, [sp, #28]
        return 0;
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002858:	b30b      	cbz	r3, 800289e <ssd1306_WriteChar+0x66>
 800285a:	4423      	add	r3, r4
 800285c:	f813 6c20 	ldrb.w	r6, [r3, #-32]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002860:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80028ec <ssd1306_WriteChar+0xb4>
 8002864:	f8b9 a000 	ldrh.w	sl, [r9]
 8002868:	eb0a 0306 	add.w	r3, sl, r6
 800286c:	2b80      	cmp	r3, #128	@ 0x80
 800286e:	dc3b      	bgt.n	80028e8 <ssd1306_WriteChar+0xb0>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002870:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8002874:	f89d b015 	ldrb.w	fp, [sp, #21]
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800287e:	2a20      	cmp	r2, #32
 8002880:	dc32      	bgt.n	80028e8 <ssd1306_WriteChar+0xb0>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002882:	f04f 0800 	mov.w	r8, #0
 8002886:	fb0b f505 	mul.w	r5, fp, r5
 800288a:	006d      	lsls	r5, r5, #1
 800288c:	45c3      	cmp	fp, r8
 800288e:	d809      	bhi.n	80028a4 <ssd1306_WriteChar+0x6c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002890:	4456      	add	r6, sl
 8002892:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8002896:	4620      	mov	r0, r4
 8002898:	b009      	add	sp, #36	@ 0x24
 800289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800289e:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80028a2:	e7dd      	b.n	8002860 <ssd1306_WriteChar+0x28>
        for(j = 0; j < char_width; j++) {
 80028a4:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.height + i];
 80028a6:	9a06      	ldr	r2, [sp, #24]
 80028a8:	5b53      	ldrh	r3, [r2, r5]
 80028aa:	9304      	str	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028ac:	9b01      	ldr	r3, [sp, #4]
 80028ae:	eb08 0203 	add.w	r2, r8, r3
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	9303      	str	r3, [sp, #12]
        for(j = 0; j < char_width; j++) {
 80028b6:	42be      	cmp	r6, r7
 80028b8:	d803      	bhi.n	80028c2 <ssd1306_WriteChar+0x8a>
    for(i = 0; i < Font.height; i++) {
 80028ba:	f108 0801 	add.w	r8, r8, #1
 80028be:	3502      	adds	r5, #2
 80028c0:	e7e4      	b.n	800288c <ssd1306_WriteChar+0x54>
            if((b << j) & 0x8000)  {
 80028c2:	9b04      	ldr	r3, [sp, #16]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028c4:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 80028c8:	fa03 f207 	lsl.w	r2, r3, r7
 80028cc:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028ce:	bf56      	itet	pl
 80028d0:	9b02      	ldrpl	r3, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028d2:	9a02      	ldrmi	r2, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028d4:	fab3 f283 	clzpl	r2, r3
 80028d8:	9903      	ldr	r1, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028da:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028dc:	bf58      	it	pl
 80028de:	0952      	lsrpl	r2, r2, #5
 80028e0:	f7ff ff92 	bl	8002808 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80028e4:	3701      	adds	r7, #1
 80028e6:	e7e6      	b.n	80028b6 <ssd1306_WriteChar+0x7e>
        return 0;
 80028e8:	2400      	movs	r4, #0
 80028ea:	e7d4      	b.n	8002896 <ssd1306_WriteChar+0x5e>
 80028ec:	20000430 	.word	0x20000430

080028f0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	ac03      	add	r4, sp, #12
 80028f6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80028fa:	f89d 6028 	ldrb.w	r6, [sp, #40]	@ 0x28
 80028fe:	1e45      	subs	r5, r0, #1
    while (*str) {
 8002900:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002904:	b140      	cbz	r0, 8002918 <ssd1306_WriteString+0x28>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002906:	9600      	str	r6, [sp, #0]
 8002908:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800290c:	f7ff ff94 	bl	8002838 <ssd1306_WriteChar>
 8002910:	4603      	mov	r3, r0
 8002912:	7828      	ldrb	r0, [r5, #0]
 8002914:	4283      	cmp	r3, r0
 8002916:	d0f3      	beq.n	8002900 <ssd1306_WriteString+0x10>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002918:	b006      	add	sp, #24
 800291a:	bd70      	pop	{r4, r5, r6, pc}

0800291c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 800291c:	4b01      	ldr	r3, [pc, #4]	@ (8002924 <ssd1306_SetCursor+0x8>)
 800291e:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002920:	8059      	strh	r1, [r3, #2]
}
 8002922:	4770      	bx	lr
 8002924:	20000430 	.word	0x20000430

08002928 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800292c:	2081      	movs	r0, #129	@ 0x81
 800292e:	f7ff ff1d 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002932:	4620      	mov	r0, r4
}
 8002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8002938:	f7ff bf18 	b.w	800276c <ssd1306_WriteCommand>

0800293c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 800293c:	2800      	cmp	r0, #0
    if (on) {
 800293e:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8002940:	bf0c      	ite	eq
 8002942:	4603      	moveq	r3, r0
 8002944:	2301      	movne	r3, #1
 8002946:	4a03      	ldr	r2, [pc, #12]	@ (8002954 <ssd1306_SetDisplayOn+0x18>)
 8002948:	bf0c      	ite	eq
 800294a:	20ae      	moveq	r0, #174	@ 0xae
 800294c:	20af      	movne	r0, #175	@ 0xaf
 800294e:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8002950:	f7ff bf0c 	b.w	800276c <ssd1306_WriteCommand>
 8002954:	20000430 	.word	0x20000430

08002958 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002958:	b508      	push	{r3, lr}
    HAL_Delay(100);
 800295a:	2064      	movs	r0, #100	@ 0x64
 800295c:	f000 f8a8 	bl	8002ab0 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff ffeb 	bl	800293c <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002966:	2020      	movs	r0, #32
 8002968:	f7ff ff00 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fefd 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002972:	20b0      	movs	r0, #176	@ 0xb0
 8002974:	f7ff fefa 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002978:	20c8      	movs	r0, #200	@ 0xc8
 800297a:	f7ff fef7 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fef4 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002984:	2010      	movs	r0, #16
 8002986:	f7ff fef1 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800298a:	2040      	movs	r0, #64	@ 0x40
 800298c:	f7ff feee 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8002990:	20ff      	movs	r0, #255	@ 0xff
 8002992:	f7ff ffc9 	bl	8002928 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002996:	20a1      	movs	r0, #161	@ 0xa1
 8002998:	f7ff fee8 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800299c:	20a6      	movs	r0, #166	@ 0xa6
 800299e:	f7ff fee5 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80029a2:	20a8      	movs	r0, #168	@ 0xa8
 80029a4:	f7ff fee2 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x1F); //
 80029a8:	201f      	movs	r0, #31
 80029aa:	f7ff fedf 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029ae:	20a4      	movs	r0, #164	@ 0xa4
 80029b0:	f7ff fedc 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80029b4:	20d3      	movs	r0, #211	@ 0xd3
 80029b6:	f7ff fed9 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff fed6 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80029c0:	20d5      	movs	r0, #213	@ 0xd5
 80029c2:	f7ff fed3 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80029c6:	20f0      	movs	r0, #240	@ 0xf0
 80029c8:	f7ff fed0 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80029cc:	20d9      	movs	r0, #217	@ 0xd9
 80029ce:	f7ff fecd 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80029d2:	2022      	movs	r0, #34	@ 0x22
 80029d4:	f7ff feca 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80029d8:	20da      	movs	r0, #218	@ 0xda
 80029da:	f7ff fec7 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x02);
 80029de:	2002      	movs	r0, #2
 80029e0:	f7ff fec4 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80029e4:	20db      	movs	r0, #219	@ 0xdb
 80029e6:	f7ff fec1 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80029ea:	2020      	movs	r0, #32
 80029ec:	f7ff febe 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80029f0:	208d      	movs	r0, #141	@ 0x8d
 80029f2:	f7ff febb 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80029f6:	2014      	movs	r0, #20
 80029f8:	f7ff feb8 	bl	800276c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80029fc:	2001      	movs	r0, #1
 80029fe:	f7ff ff9d 	bl	800293c <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff feda 	bl	80027bc <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002a08:	f7ff fee4 	bl	80027d4 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <ssd1306_Init+0xc4>)
 8002a10:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a12:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002a14:	2201      	movs	r2, #1
 8002a16:	711a      	strb	r2, [r3, #4]
}
 8002a18:	bd08      	pop	{r3, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000430 	.word	0x20000430

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a22:	4b0e      	ldr	r3, [pc, #56]	@ (8002a5c <HAL_InitTick+0x3c>)
{
 8002a24:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a30:	4a0b      	ldr	r2, [pc, #44]	@ (8002a60 <HAL_InitTick+0x40>)
 8002a32:	6810      	ldr	r0, [r2, #0]
 8002a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a38:	f000 f89c 	bl	8002b74 <HAL_SYSTICK_Config>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	b958      	cbnz	r0, 8002a58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a40:	2d0f      	cmp	r5, #15
 8002a42:	d809      	bhi.n	8002a58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a44:	4602      	mov	r2, r0
 8002a46:	4629      	mov	r1, r5
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f000 f854 	bl	8002af8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a50:	4620      	mov	r0, r4
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <HAL_InitTick+0x44>)
 8002a54:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e7fc      	b.n	8002a56 <HAL_InitTick+0x36>
 8002a5c:	2000001c 	.word	0x2000001c
 8002a60:	20000018 	.word	0x20000018
 8002a64:	20000020 	.word	0x20000020

08002a68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a68:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_Init+0x20>)
{
 8002a6a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	f043 0310 	orr.w	r3, r3, #16
 8002a74:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a76:	f000 f82d 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7a:	200f      	movs	r0, #15
 8002a7c:	f7ff ffd0 	bl	8002a20 <HAL_InitTick>
  HAL_MspInit();
 8002a80:	f7ff fc6c 	bl	800235c <HAL_MspInit>
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	bd08      	pop	{r3, pc}
 8002a88:	40022000 	.word	0x40022000

08002a8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a8c:	4a03      	ldr	r2, [pc, #12]	@ (8002a9c <HAL_IncTick+0x10>)
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <HAL_IncTick+0x14>)
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	440b      	add	r3, r1
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000638 	.word	0x20000638
 8002aa0:	2000001c 	.word	0x2000001c

08002aa4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002aa4:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <HAL_GetTick+0x8>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000638 	.word	0x20000638

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff fff6 	bl	8002aa4 <HAL_GetTick>
 8002ab8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002abc:	bf1e      	ittt	ne
 8002abe:	4b04      	ldrne	r3, [pc, #16]	@ (8002ad0 <HAL_Delay+0x20>)
 8002ac0:	781b      	ldrbne	r3, [r3, #0]
 8002ac2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	1b43      	subs	r3, r0, r5
 8002aca:	42a3      	cmp	r3, r4
 8002acc:	d3fa      	bcc.n	8002ac4 <HAL_Delay+0x14>
  {
  }
}
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	2000001c 	.word	0x2000001c

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4907      	ldr	r1, [pc, #28]	@ (8002af4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ad6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ada:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ae2:	0412      	lsls	r2, r2, #16
 8002ae4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002af0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afa:	b530      	push	{r4, r5, lr}
 8002afc:	68dc      	ldr	r4, [r3, #12]
 8002afe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	bf28      	it	cs
 8002b0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b14:	bf94      	ite	ls
 8002b16:	2400      	movls	r4, #0
 8002b18:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1a:	fa05 f303 	lsl.w	r3, r5, r3
 8002b1e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b22:	40a5      	lsls	r5, r4
 8002b24:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	bfac      	ite	ge
 8002b32:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	4a07      	ldrlt	r2, [pc, #28]	@ (8002b54 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	bfab      	itete	ge
 8002b40:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b4e:	bd30      	pop	{r4, r5, pc}
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	e000ed14 	.word	0xe000ed14

08002b58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	db07      	blt.n	8002b6c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	0941      	lsrs	r1, r0, #5
 8002b60:	4a03      	ldr	r2, [pc, #12]	@ (8002b70 <HAL_NVIC_EnableIRQ+0x18>)
 8002b62:	f000 001f 	and.w	r0, r0, #31
 8002b66:	4083      	lsls	r3, r0
 8002b68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	3801      	subs	r0, #1
 8002b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002b7a:	d20b      	bcs.n	8002b94 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	21f0      	movs	r1, #240	@ 0xf0
 8002b82:	4a05      	ldr	r2, [pc, #20]	@ (8002b98 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b84:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b90:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b92:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b94:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b9e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002bac:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bae:	6803      	ldr	r3, [r0, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f022 020e 	bic.w	r2, r2, #14
 8002bb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bc0:	4a17      	ldr	r2, [pc, #92]	@ (8002c20 <HAL_DMA_Abort_IT+0x84>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x6a>
 8002bc6:	3214      	adds	r2, #20
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d01e      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x6e>
 8002bcc:	3214      	adds	r2, #20
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x72>
 8002bd2:	3214      	adds	r2, #20
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01d      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x78>
 8002bd8:	3214      	adds	r2, #20
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x7e>
 8002bde:	3214      	adds	r2, #20
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bf14      	ite	ne
 8002be4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8002be8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_DMA_Abort_IT+0x88>)
 8002bee:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002bfc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002bfe:	b103      	cbz	r3, 8002c02 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8002c00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2000      	movs	r0, #0
 8002c04:	e7d2      	b.n	8002bac <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c06:	2301      	movs	r3, #1
 8002c08:	e7f0      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	e7ee      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c12:	e7eb      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c18:	e7e8      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c1e:	e7e5      	b.n	8002bec <HAL_DMA_Abort_IT+0x50>
 8002c20:	40020008 	.word	0x40020008
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8002c28:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8002c2c:	4770      	bx	lr
	...

08002c30 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002c30:	4a11      	ldr	r2, [pc, #68]	@ (8002c78 <FLASH_SetErrorCode+0x48>)
 8002c32:	68d3      	ldr	r3, [r2, #12]
 8002c34:	f013 0310 	ands.w	r3, r3, #16
 8002c38:	d005      	beq.n	8002c46 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c3a:	4910      	ldr	r1, [pc, #64]	@ (8002c7c <FLASH_SetErrorCode+0x4c>)
 8002c3c:	69cb      	ldr	r3, [r1, #28]
 8002c3e:	f043 0302 	orr.w	r3, r3, #2
 8002c42:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002c44:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002c46:	68d2      	ldr	r2, [r2, #12]
 8002c48:	0750      	lsls	r0, r2, #29
 8002c4a:	d506      	bpl.n	8002c5a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002c4c:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002c52:	69ca      	ldr	r2, [r1, #28]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <FLASH_SetErrorCode+0x48>)
 8002c5c:	69d1      	ldr	r1, [r2, #28]
 8002c5e:	07c9      	lsls	r1, r1, #31
 8002c60:	d508      	bpl.n	8002c74 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002c62:	4806      	ldr	r0, [pc, #24]	@ (8002c7c <FLASH_SetErrorCode+0x4c>)
 8002c64:	69c1      	ldr	r1, [r0, #28]
 8002c66:	f041 0104 	orr.w	r1, r1, #4
 8002c6a:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002c6c:	69d1      	ldr	r1, [r2, #28]
 8002c6e:	f021 0101 	bic.w	r1, r1, #1
 8002c72:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002c74:	60d3      	str	r3, [r2, #12]
}  
 8002c76:	4770      	bx	lr
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	20000640 	.word	0x20000640

08002c80 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_FLASH_Unlock+0x1c>)
 8002c82:	6918      	ldr	r0, [r3, #16]
 8002c84:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8002c88:	d007      	beq.n	8002c9a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <HAL_FLASH_Unlock+0x20>)
 8002c8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c8e:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8002c92:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c94:	6918      	ldr	r0, [r3, #16]
 8002c96:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8002c9a:	4770      	bx	lr
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	45670123 	.word	0x45670123

08002ca4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ca4:	4a03      	ldr	r2, [pc, #12]	@ (8002cb4 <HAL_FLASH_Lock+0x10>)
}
 8002ca6:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ca8:	6913      	ldr	r3, [r2, #16]
 8002caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cae:	6113      	str	r3, [r2, #16]
}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <FLASH_WaitForLastOperation>:
{
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fef2 	bl	8002aa4 <HAL_GetTick>
 8002cc0:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cc2:	4c11      	ldr	r4, [pc, #68]	@ (8002d08 <FLASH_WaitForLastOperation+0x50>)
 8002cc4:	68e3      	ldr	r3, [r4, #12]
 8002cc6:	07d8      	lsls	r0, r3, #31
 8002cc8:	d412      	bmi.n	8002cf0 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cca:	68e3      	ldr	r3, [r4, #12]
 8002ccc:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002cce:	bf44      	itt	mi
 8002cd0:	2320      	movmi	r3, #32
 8002cd2:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cd4:	68e3      	ldr	r3, [r4, #12]
 8002cd6:	06da      	lsls	r2, r3, #27
 8002cd8:	d406      	bmi.n	8002ce8 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002cda:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cdc:	07db      	lsls	r3, r3, #31
 8002cde:	d403      	bmi.n	8002ce8 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ce0:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ce2:	f010 0004 	ands.w	r0, r0, #4
 8002ce6:	d007      	beq.n	8002cf8 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8002ce8:	f7ff ffa2 	bl	8002c30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002cec:	2001      	movs	r0, #1
 8002cee:	e003      	b.n	8002cf8 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002cf0:	1c6b      	adds	r3, r5, #1
 8002cf2:	d0e7      	beq.n	8002cc4 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cf4:	b90d      	cbnz	r5, 8002cfa <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 8002cf6:	2003      	movs	r0, #3
}
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cfa:	f7ff fed3 	bl	8002aa4 <HAL_GetTick>
 8002cfe:	1b80      	subs	r0, r0, r6
 8002d00:	42a8      	cmp	r0, r5
 8002d02:	d9df      	bls.n	8002cc4 <FLASH_WaitForLastOperation+0xc>
 8002d04:	e7f7      	b.n	8002cf6 <FLASH_WaitForLastOperation+0x3e>
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_FLASH_Program>:
{
 8002d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002d10:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8002da8 <HAL_FLASH_Program+0x9c>
{
 8002d14:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8002d16:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 8002d1a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002d1c:	2b01      	cmp	r3, #1
{
 8002d1e:	4688      	mov	r8, r1
 8002d20:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8002d22:	d03f      	beq.n	8002da4 <HAL_FLASH_Program+0x98>
 8002d24:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d26:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 8002d2a:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d2e:	f7ff ffc3 	bl	8002cb8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002d32:	bb90      	cbnz	r0, 8002d9a <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d34:	2d01      	cmp	r5, #1
 8002d36:	d003      	beq.n	8002d40 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 8002d38:	2d02      	cmp	r5, #2
 8002d3a:	bf14      	ite	ne
 8002d3c:	2504      	movne	r5, #4
 8002d3e:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8002d40:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d42:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d44:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8002dac <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d48:	0134      	lsls	r4, r6, #4
 8002d4a:	f1c4 0120 	rsb	r1, r4, #32
 8002d4e:	f1a4 0220 	sub.w	r2, r4, #32
 8002d52:	fa07 f101 	lsl.w	r1, r7, r1
 8002d56:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d5a:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d5e:	430c      	orrs	r4, r1
 8002d60:	fa27 f202 	lsr.w	r2, r7, r2
 8002d64:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d66:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d6a:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d74:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8002d78:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d7c:	f7ff ff9c 	bl	8002cb8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d80:	f8db 2010 	ldr.w	r2, [fp, #16]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8002d8c:	b928      	cbnz	r0, 8002d9a <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8002d8e:	3601      	adds	r6, #1
 8002d90:	b2f2      	uxtb	r2, r6
 8002d92:	4295      	cmp	r5, r2
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	d8d6      	bhi.n	8002d48 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8002da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002da4:	2002      	movs	r0, #2
 8002da6:	e7fb      	b.n	8002da0 <HAL_FLASH_Program+0x94>
 8002da8:	20000640 	.word	0x20000640
 8002dac:	40022000 	.word	0x40022000

08002db0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002db0:	2200      	movs	r2, #0
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <FLASH_PageErase+0x1c>)
 8002db4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <FLASH_PageErase+0x20>)
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	f042 0202 	orr.w	r2, r2, #2
 8002dbe:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002dc0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc8:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002dca:	4770      	bx	lr
 8002dcc:	20000640 	.word	0x20000640
 8002dd0:	40022000 	.word	0x40022000

08002dd4 <HAL_FLASHEx_Erase>:
{
 8002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8002dd8:	4f26      	ldr	r7, [pc, #152]	@ (8002e74 <HAL_FLASHEx_Erase+0xa0>)
{
 8002dda:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002ddc:	7e3b      	ldrb	r3, [r7, #24]
{
 8002dde:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d044      	beq.n	8002e6e <HAL_FLASHEx_Erase+0x9a>
 8002de4:	2401      	movs	r4, #1
 8002de6:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002de8:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002dea:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d11a      	bne.n	8002e28 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002df2:	f7ff ff61 	bl	8002cb8 <FLASH_WaitForLastOperation>
 8002df6:	b120      	cbz	r0, 8002e02 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	763b      	strb	r3, [r7, #24]
}
 8002dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e02:	4c1d      	ldr	r4, [pc, #116]	@ (8002e78 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e04:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e06:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e08:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e18:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e1a:	f7ff ff4d 	bl	8002cb8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6123      	str	r3, [r4, #16]
 8002e26:	e7e8      	b.n	8002dfa <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e28:	f7ff ff46 	bl	8002cb8 <FLASH_WaitForLastOperation>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d1e3      	bne.n	8002df8 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e38:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8002e3a:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e3c:	4c0e      	ldr	r4, [pc, #56]	@ (8002e78 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e3e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002e42:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8002e46:	42b3      	cmp	r3, r6
 8002e48:	d9d7      	bls.n	8002dfa <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffb0 	bl	8002db0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e54:	f7ff ff30 	bl	8002cb8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e58:	6923      	ldr	r3, [r4, #16]
 8002e5a:	f023 0302 	bic.w	r3, r3, #2
 8002e5e:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8002e60:	b110      	cbz	r0, 8002e68 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8002e62:	f8c8 6000 	str.w	r6, [r8]
            break;
 8002e66:	e7c8      	b.n	8002dfa <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002e68:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002e6c:	e7e7      	b.n	8002e3e <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	e7c5      	b.n	8002dfe <HAL_FLASHEx_Erase+0x2a>
 8002e72:	bf00      	nop
 8002e74:	20000640 	.word	0x20000640
 8002e78:	40022000 	.word	0x40022000

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e80:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e82:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8002e86:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8003010 <HAL_GPIO_Init+0x194>
 8002e8c:	4b61      	ldr	r3, [pc, #388]	@ (8003014 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e8e:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	680a      	ldr	r2, [r1, #0]
 8002e94:	fa32 f506 	lsrs.w	r5, r2, r6
 8002e98:	d102      	bne.n	8002ea0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ea0:	2501      	movs	r5, #1
 8002ea2:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8002eaa:	ea37 0202 	bics.w	r2, r7, r2
 8002eae:	d176      	bne.n	8002f9e <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8002eb0:	684a      	ldr	r2, [r1, #4]
 8002eb2:	2a03      	cmp	r2, #3
 8002eb4:	d807      	bhi.n	8002ec6 <HAL_GPIO_Init+0x4a>
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	2a02      	cmp	r2, #2
 8002eba:	f200 8083 	bhi.w	8002fc4 <HAL_GPIO_Init+0x148>
 8002ebe:	e8df f002 	tbb	[pc, r2]
 8002ec2:	9691      	.short	0x9691
 8002ec4:	9c          	.byte	0x9c
 8002ec5:	00          	.byte	0x00
 8002ec6:	2a12      	cmp	r2, #18
 8002ec8:	f000 8094 	beq.w	8002ff4 <HAL_GPIO_Init+0x178>
 8002ecc:	d869      	bhi.n	8002fa2 <HAL_GPIO_Init+0x126>
 8002ece:	2a11      	cmp	r2, #17
 8002ed0:	f000 808a 	beq.w	8002fe8 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ed4:	2dff      	cmp	r5, #255	@ 0xff
 8002ed6:	bf94      	ite	ls
 8002ed8:	4681      	movls	r9, r0
 8002eda:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002edc:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee0:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee4:	bf88      	it	hi
 8002ee6:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee8:	fa0e fa02 	lsl.w	sl, lr, r2
 8002eec:	ea27 070a 	bic.w	r7, r7, sl
 8002ef0:	fa04 f202 	lsl.w	r2, r4, r2
 8002ef4:	4317      	orrs	r7, r2
 8002ef6:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efa:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002efe:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002f02:	d04c      	beq.n	8002f9e <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f04:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002f08:	f026 0703 	bic.w	r7, r6, #3
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	f8cc 2018 	str.w	r2, [ip, #24]
 8002f14:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002f18:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002f1c:	f002 0201 	and.w	r2, r2, #1
 8002f20:	9201      	str	r2, [sp, #4]
 8002f22:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f26:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f2a:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f2c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002f30:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f32:	fa0e fb0a 	lsl.w	fp, lr, sl
 8002f36:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f3a:	4a37      	ldr	r2, [pc, #220]	@ (8003018 <HAL_GPIO_Init+0x19c>)
 8002f3c:	4290      	cmp	r0, r2
 8002f3e:	d060      	beq.n	8003002 <HAL_GPIO_Init+0x186>
 8002f40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f44:	4290      	cmp	r0, r2
 8002f46:	d05e      	beq.n	8003006 <HAL_GPIO_Init+0x18a>
 8002f48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f4c:	4290      	cmp	r0, r2
 8002f4e:	d05c      	beq.n	800300a <HAL_GPIO_Init+0x18e>
 8002f50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f54:	4290      	cmp	r0, r2
 8002f56:	bf14      	ite	ne
 8002f58:	2204      	movne	r2, #4
 8002f5a:	2203      	moveq	r2, #3
 8002f5c:	fa02 f20a 	lsl.w	r2, r2, sl
 8002f60:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002f64:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f66:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f68:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f6c:	bf14      	ite	ne
 8002f6e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f70:	43aa      	biceq	r2, r5
 8002f72:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f74:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f76:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f7a:	bf14      	ite	ne
 8002f7c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f7e:	43aa      	biceq	r2, r5
 8002f80:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002f82:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f84:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002f88:	bf14      	ite	ne
 8002f8a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f8c:	43aa      	biceq	r2, r5
 8002f8e:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002f90:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f92:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002f96:	bf14      	ite	ne
 8002f98:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f9a:	43aa      	biceq	r2, r5
 8002f9c:	601a      	str	r2, [r3, #0]
	position++;
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e777      	b.n	8002e92 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002fa2:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800301c <HAL_GPIO_Init+0x1a0>
 8002fa6:	454a      	cmp	r2, r9
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_GPIO_Init+0x148>
 8002faa:	d814      	bhi.n	8002fd6 <HAL_GPIO_Init+0x15a>
 8002fac:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002fb0:	454a      	cmp	r2, r9
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x148>
 8002fb4:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8002fb8:	454a      	cmp	r2, r9
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x148>
 8002fbc:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002fc0:	454a      	cmp	r2, r9
 8002fc2:	d187      	bne.n	8002ed4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fc4:	688a      	ldr	r2, [r1, #8]
 8002fc6:	b1d2      	cbz	r2, 8002ffe <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc8:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fca:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8002fce:	bf0c      	ite	eq
 8002fd0:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8002fd2:	6147      	strne	r7, [r0, #20]
 8002fd4:	e77e      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002fd6:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8003020 <HAL_GPIO_Init+0x1a4>
 8002fda:	454a      	cmp	r2, r9
 8002fdc:	d0f2      	beq.n	8002fc4 <HAL_GPIO_Init+0x148>
 8002fde:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8002fe2:	e7ed      	b.n	8002fc0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fe4:	68cc      	ldr	r4, [r1, #12]
          break;
 8002fe6:	e775      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe8:	68cc      	ldr	r4, [r1, #12]
 8002fea:	3404      	adds	r4, #4
          break;
 8002fec:	e772      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fee:	68cc      	ldr	r4, [r1, #12]
 8002ff0:	3408      	adds	r4, #8
          break;
 8002ff2:	e76f      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff4:	68cc      	ldr	r4, [r1, #12]
 8002ff6:	340c      	adds	r4, #12
          break;
 8002ff8:	e76c      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002ffa:	2400      	movs	r4, #0
 8002ffc:	e76a      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ffe:	2404      	movs	r4, #4
 8003000:	e768      	b.n	8002ed4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003002:	2200      	movs	r2, #0
 8003004:	e7aa      	b.n	8002f5c <HAL_GPIO_Init+0xe0>
 8003006:	2201      	movs	r2, #1
 8003008:	e7a8      	b.n	8002f5c <HAL_GPIO_Init+0xe0>
 800300a:	2202      	movs	r2, #2
 800300c:	e7a6      	b.n	8002f5c <HAL_GPIO_Init+0xe0>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40010400 	.word	0x40010400
 8003018:	40010800 	.word	0x40010800
 800301c:	10220000 	.word	0x10220000
 8003020:	10310000 	.word	0x10310000

08003024 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003024:	6883      	ldr	r3, [r0, #8]
 8003026:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003028:	bf14      	ite	ne
 800302a:	2001      	movne	r0, #1
 800302c:	2000      	moveq	r0, #0
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003030:	b10a      	cbz	r2, 8003036 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003032:	6101      	str	r1, [r0, #16]
  }
}
 8003034:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003036:	0409      	lsls	r1, r1, #16
 8003038:	e7fb      	b.n	8003032 <HAL_GPIO_WritePin+0x2>

0800303a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800303a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800303c:	ea01 0203 	and.w	r2, r1, r3
 8003040:	ea21 0103 	bic.w	r1, r1, r3
 8003044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003048:	6101      	str	r1, [r0, #16]
}
 800304a:	4770      	bx	lr

0800304c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304c:	6801      	ldr	r1, [r0, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	694b      	ldr	r3, [r1, #20]
 8003052:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8003056:	d010      	beq.n	800307a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003058:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800305c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306a:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
 8003078:	4770      	bx	lr
  }
  return HAL_OK;
 800307a:	4618      	mov	r0, r3
}
 800307c:	4770      	bx	lr

0800307e <I2C_WaitOnFlagUntilTimeout>:
{
 800307e:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003082:	4606      	mov	r6, r0
 8003084:	460f      	mov	r7, r1
 8003086:	4691      	mov	r9, r2
 8003088:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800308e:	6833      	ldr	r3, [r6, #0]
 8003090:	f1ba 0f01 	cmp.w	sl, #1
 8003094:	bf0c      	ite	eq
 8003096:	695c      	ldreq	r4, [r3, #20]
 8003098:	699c      	ldrne	r4, [r3, #24]
 800309a:	ea27 0404 	bic.w	r4, r7, r4
 800309e:	b2a4      	uxth	r4, r4
 80030a0:	fab4 f484 	clz	r4, r4
 80030a4:	0964      	lsrs	r4, r4, #5
 80030a6:	45a1      	cmp	r9, r4
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80030aa:	2000      	movs	r0, #0
 80030ac:	e025      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	1c6a      	adds	r2, r5, #1
 80030b0:	d0ee      	beq.n	8003090 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7ff fcf7 	bl	8002aa4 <HAL_GetTick>
 80030b6:	9b08      	ldr	r3, [sp, #32]
 80030b8:	1ac0      	subs	r0, r0, r3
 80030ba:	42a8      	cmp	r0, r5
 80030bc:	d801      	bhi.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030be:	2d00      	cmp	r5, #0
 80030c0:	d1e5      	bne.n	800308e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030c2:	6833      	ldr	r3, [r6, #0]
 80030c4:	f1ba 0f01 	cmp.w	sl, #1
 80030c8:	bf0c      	ite	eq
 80030ca:	695b      	ldreq	r3, [r3, #20]
 80030cc:	699b      	ldrne	r3, [r3, #24]
 80030ce:	ea27 0303 	bic.w	r3, r7, r3
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	4599      	cmp	r9, r3
 80030dc:	d1d7      	bne.n	800308e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030de:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80030e0:	2220      	movs	r2, #32
          return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030e4:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030e6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ea:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80030f0:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80030fa:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80030fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003102:	4604      	mov	r4, r0
 8003104:	460f      	mov	r7, r1
 8003106:	4616      	mov	r6, r2
 8003108:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	6968      	ldr	r0, [r5, #20]
 800310e:	ea27 0000 	bic.w	r0, r7, r0
 8003112:	b280      	uxth	r0, r0
 8003114:	b1c0      	cbz	r0, 8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003116:	696b      	ldr	r3, [r5, #20]
 8003118:	055a      	lsls	r2, r3, #21
 800311a:	d517      	bpl.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003124:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800312a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	2300      	movs	r3, #0
 800312e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003130:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800313a:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313e:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003140:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003142:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8003144:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800314c:	1c73      	adds	r3, r6, #1
 800314e:	d0dd      	beq.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7ff fca8 	bl	8002aa4 <HAL_GetTick>
 8003154:	eba0 0008 	sub.w	r0, r0, r8
 8003158:	42b0      	cmp	r0, r6
 800315a:	d801      	bhi.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 800315c:	2e00      	cmp	r6, #0
 800315e:	d1d4      	bne.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	ea27 0202 	bic.w	r2, r7, r2
 8003168:	b292      	uxth	r2, r2
 800316a:	2a00      	cmp	r2, #0
 800316c:	d0cd      	beq.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800317e:	4313      	orrs	r3, r2
 8003180:	e7dd      	b.n	800313e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003182 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	4604      	mov	r4, r0
 8003186:	460d      	mov	r5, r1
 8003188:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	d501      	bpl.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003192:	2000      	movs	r0, #0
 8003194:	e01e      	b.n	80031d4 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ff58 	bl	800304c <I2C_IsAcknowledgeFailed>
 800319c:	b9c8      	cbnz	r0, 80031d2 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800319e:	1c6a      	adds	r2, r5, #1
 80031a0:	d0f3      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7ff fc7f 	bl	8002aa4 <HAL_GetTick>
 80031a6:	1b80      	subs	r0, r0, r6
 80031a8:	42a8      	cmp	r0, r5
 80031aa:	d801      	bhi.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80031ac:	2d00      	cmp	r5, #0
 80031ae:	d1ec      	bne.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80031b8:	d1e7      	bne.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80031c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80031d2:	2001      	movs	r0, #1
}
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080031d8 <I2C_RequestMemoryWrite>:
{
 80031d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031dc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031de:	6802      	ldr	r2, [r0, #0]
{
 80031e0:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e2:	6813      	ldr	r3, [r2, #0]
{
 80031e4:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ea:	6013      	str	r3, [r2, #0]
{
 80031ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80031f0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	2200      	movs	r2, #0
 80031f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031fa:	f8cd 8000 	str.w	r8, [sp]
{
 80031fe:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003200:	f7ff ff3d 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	b138      	cbz	r0, 8003218 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	05db      	lsls	r3, r3, #23
 800320c:	d502      	bpl.n	8003214 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800320e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003212:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003214:	2603      	movs	r6, #3
 8003216:	e020      	b.n	800325a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003218:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800321c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321e:	463a      	mov	r2, r7
 8003220:	4643      	mov	r3, r8
 8003222:	4620      	mov	r0, r4
 8003224:	4918      	ldr	r1, [pc, #96]	@ (8003288 <I2C_RequestMemoryWrite+0xb0>)
 8003226:	f7ff ff6a 	bl	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800322a:	b9a8      	cbnz	r0, 8003258 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	9003      	str	r0, [sp, #12]
 8003230:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	9203      	str	r2, [sp, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003240:	f7ff ff9f 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4606      	mov	r6, r0
 8003246:	b160      	cbz	r0, 8003262 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800324a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	bf01      	itttt	eq
 800324e:	6822      	ldreq	r2, [r4, #0]
 8003250:	6813      	ldreq	r3, [r2, #0]
 8003252:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003256:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003258:	2601      	movs	r6, #1
}
 800325a:	4630      	mov	r0, r6
 800325c:	b005      	add	sp, #20
 800325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003262:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003268:	d102      	bne.n	8003270 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326a:	b2ed      	uxtb	r5, r5
 800326c:	611d      	str	r5, [r3, #16]
 800326e:	e7f4      	b.n	800325a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003270:	0a2a      	lsrs	r2, r5, #8
 8003272:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003274:	4639      	mov	r1, r7
 8003276:	4642      	mov	r2, r8
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff ff82 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 800327e:	2800      	cmp	r0, #0
 8003280:	d1e2      	bne.n	8003248 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	e7f1      	b.n	800326a <I2C_RequestMemoryWrite+0x92>
 8003286:	bf00      	nop
 8003288:	00010002 	.word	0x00010002

0800328c <I2C_RequestMemoryRead>:
{
 800328c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003290:	469a      	mov	sl, r3
 8003292:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003296:	6803      	ldr	r3, [r0, #0]
{
 8003298:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	681a      	ldr	r2, [r3, #0]
{
 800329c:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a2:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a4:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ae:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	463b      	mov	r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8cd 8000 	str.w	r8, [sp]
{
 80032b8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ba:	f7ff fee0 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	b148      	cbz	r0, 80032d6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c6:	bf48      	it	mi
 80032c8:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 80032cc:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d0:	bf48      	it	mi
 80032d2:	6423      	strmi	r3, [r4, #64]	@ 0x40
 80032d4:	e021      	b.n	800331a <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	fa5f f986 	uxtb.w	r9, r6
 80032da:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80032de:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e0:	463a      	mov	r2, r7
 80032e2:	4643      	mov	r3, r8
 80032e4:	4620      	mov	r0, r4
 80032e6:	492a      	ldr	r1, [pc, #168]	@ (8003390 <I2C_RequestMemoryRead+0x104>)
 80032e8:	f7ff ff09 	bl	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ec:	b9a0      	cbnz	r0, 8003318 <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	9003      	str	r0, [sp, #12]
 80032f2:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f4:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f6:	9203      	str	r2, [sp, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fa:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	f7ff ff3e 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 8003306:	b158      	cbz	r0, 8003320 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800330a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	bf01      	itttt	eq
 800330e:	6822      	ldreq	r2, [r4, #0]
 8003310:	6813      	ldreq	r3, [r2, #0]
 8003312:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003316:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003318:	2001      	movs	r0, #1
}
 800331a:	b004      	add	sp, #16
 800331c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003320:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003326:	d11a      	bne.n	800335e <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003328:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	4642      	mov	r2, r8
 800332c:	4639      	mov	r1, r7
 800332e:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003330:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	f7ff ff26 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 8003336:	4602      	mov	r2, r0
 8003338:	2800      	cmp	r0, #0
 800333a:	d1e5      	bne.n	8003308 <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333c:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333e:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003346:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	463b      	mov	r3, r7
 800334a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800334e:	f8cd 8000 	str.w	r8, [sp]
 8003352:	f7ff fe94 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	b160      	cbz	r0, 8003374 <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	e7b2      	b.n	80032c4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800335e:	0a2a      	lsrs	r2, r5, #8
 8003360:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	4639      	mov	r1, r7
 8003364:	4642      	mov	r2, r8
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff ff0b 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	2800      	cmp	r0, #0
 800336e:	d1cb      	bne.n	8003308 <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	e7d9      	b.n	8003328 <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003374:	f049 0301 	orr.w	r3, r9, #1
 8003378:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337a:	4620      	mov	r0, r4
 800337c:	4643      	mov	r3, r8
 800337e:	463a      	mov	r2, r7
 8003380:	4903      	ldr	r1, [pc, #12]	@ (8003390 <I2C_RequestMemoryRead+0x104>)
 8003382:	f7ff febc 	bl	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003386:	3800      	subs	r0, #0
 8003388:	bf18      	it	ne
 800338a:	2001      	movne	r0, #1
 800338c:	e7c5      	b.n	800331a <I2C_RequestMemoryRead+0x8e>
 800338e:	bf00      	nop
 8003390:	00010002 	.word	0x00010002

08003394 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	460d      	mov	r5, r1
 800339a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	075b      	lsls	r3, r3, #29
 80033a2:	d501      	bpl.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80033a4:	2000      	movs	r0, #0
 80033a6:	e01e      	b.n	80033e6 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff fe4f 	bl	800304c <I2C_IsAcknowledgeFailed>
 80033ae:	b9c8      	cbnz	r0, 80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	1c6a      	adds	r2, r5, #1
 80033b2:	d0f3      	beq.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7ff fb76 	bl	8002aa4 <HAL_GetTick>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	42a8      	cmp	r0, r5
 80033bc:	d801      	bhi.n	80033c2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80033be:	2d00      	cmp	r5, #0
 80033c0:	d1ec      	bne.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f013 0304 	ands.w	r3, r3, #4
 80033ca:	d1e7      	bne.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80033da:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80033e4:	2001      	movs	r0, #1
}
 80033e6:	bd70      	pop	{r4, r5, r6, pc}

080033e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f0:	6821      	ldr	r1, [r4, #0]
 80033f2:	694b      	ldr	r3, [r1, #20]
 80033f4:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80033f8:	d001      	beq.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80033fa:	2000      	movs	r0, #0
 80033fc:	e011      	b.n	8003422 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033fe:	694a      	ldr	r2, [r1, #20]
 8003400:	06d2      	lsls	r2, r2, #27
 8003402:	d50f      	bpl.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800341a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800341e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003422:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7ff fb3e 	bl	8002aa4 <HAL_GetTick>
 8003428:	1b80      	subs	r0, r0, r6
 800342a:	42a8      	cmp	r0, r5
 800342c:	d801      	bhi.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800342e:	2d00      	cmp	r5, #0
 8003430:	d1de      	bne.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800343a:	d1d9      	bne.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800344a:	4313      	orrs	r3, r2
 800344c:	e7e4      	b.n	8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08003450 <HAL_I2C_Init>:
{
 8003450:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003452:	4604      	mov	r4, r0
 8003454:	b908      	cbnz	r0, 800345a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003456:	2001      	movs	r0, #1
}
 8003458:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800345a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800345e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003462:	b91b      	cbnz	r3, 800346c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003464:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8003468:	f7fe ffa2 	bl	80023b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	2324      	movs	r3, #36	@ 0x24
 800346e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800348a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800348c:	f002 fa74 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003490:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <HAL_I2C_Init+0x140>)
 8003492:	6865      	ldr	r5, [r4, #4]
 8003494:	429d      	cmp	r5, r3
 8003496:	bf94      	ite	ls
 8003498:	4b3e      	ldrls	r3, [pc, #248]	@ (8003594 <HAL_I2C_Init+0x144>)
 800349a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8003598 <HAL_I2C_Init+0x148>)
 800349c:	4298      	cmp	r0, r3
 800349e:	bf8c      	ite	hi
 80034a0:	2300      	movhi	r3, #0
 80034a2:	2301      	movls	r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1d6      	bne.n	8003456 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a8:	4e39      	ldr	r6, [pc, #228]	@ (8003590 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80034aa:	4b3c      	ldr	r3, [pc, #240]	@ (800359c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ac:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034b2:	bf88      	it	hi
 80034b4:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	6851      	ldr	r1, [r2, #4]
 80034bc:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80034c0:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c4:	bf82      	ittt	hi
 80034c6:	4373      	mulhi	r3, r6
 80034c8:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80034cc:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034d0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034d2:	6a11      	ldr	r1, [r2, #32]
 80034d4:	3301      	adds	r3, #1
 80034d6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80034da:	430b      	orrs	r3, r1
 80034dc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034de:	69d1      	ldr	r1, [r2, #28]
 80034e0:	1e43      	subs	r3, r0, #1
 80034e2:	482b      	ldr	r0, [pc, #172]	@ (8003590 <HAL_I2C_Init+0x140>)
 80034e4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80034e8:	4285      	cmp	r5, r0
 80034ea:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80034ee:	d832      	bhi.n	8003556 <HAL_I2C_Init+0x106>
 80034f0:	006d      	lsls	r5, r5, #1
 80034f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80034f6:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80034fa:	3301      	adds	r3, #1
 80034fc:	4203      	tst	r3, r0
 80034fe:	d042      	beq.n	8003586 <HAL_I2C_Init+0x136>
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	4319      	orrs	r1, r3
 8003506:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800350e:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8003512:	4303      	orrs	r3, r0
 8003514:	430b      	orrs	r3, r1
 8003516:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	6891      	ldr	r1, [r2, #8]
 800351a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800351e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8003522:	4303      	orrs	r3, r0
 8003524:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	68d1      	ldr	r1, [r2, #12]
 800352e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003532:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003536:	4303      	orrs	r3, r0
 8003538:	430b      	orrs	r3, r1
 800353a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800353c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003546:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003548:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800354e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003554:	e780      	b.n	8003458 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003556:	68a0      	ldr	r0, [r4, #8]
 8003558:	b950      	cbnz	r0, 8003570 <HAL_I2C_Init+0x120>
 800355a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800355e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	b17b      	cbz	r3, 800358a <HAL_I2C_Init+0x13a>
 800356a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800356e:	e7c9      	b.n	8003504 <HAL_I2C_Init+0xb4>
 8003570:	2019      	movs	r0, #25
 8003572:	4368      	muls	r0, r5
 8003574:	fbb3 f3f0 	udiv	r3, r3, r0
 8003578:	3301      	adds	r3, #1
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	b123      	cbz	r3, 800358a <HAL_I2C_Init+0x13a>
 8003580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003584:	e7be      	b.n	8003504 <HAL_I2C_Init+0xb4>
 8003586:	2304      	movs	r3, #4
 8003588:	e7bc      	b.n	8003504 <HAL_I2C_Init+0xb4>
 800358a:	2301      	movs	r3, #1
 800358c:	e7ba      	b.n	8003504 <HAL_I2C_Init+0xb4>
 800358e:	bf00      	nop
 8003590:	000186a0 	.word	0x000186a0
 8003594:	001e847f 	.word	0x001e847f
 8003598:	003d08ff 	.word	0x003d08ff
 800359c:	000f4240 	.word	0x000f4240

080035a0 <HAL_I2C_Mem_Write>:
{
 80035a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035a4:	4604      	mov	r4, r0
 80035a6:	4699      	mov	r9, r3
 80035a8:	460f      	mov	r7, r1
 80035aa:	4690      	mov	r8, r2
 80035ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80035ae:	f7ff fa79 	bl	8002aa4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80035b6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d003      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80035bc:	2002      	movs	r0, #2
}
 80035be:	b003      	add	sp, #12
 80035c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c4:	9000      	str	r0, [sp, #0]
 80035c6:	2319      	movs	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	4620      	mov	r0, r4
 80035cc:	493a      	ldr	r1, [pc, #232]	@ (80036b8 <HAL_I2C_Mem_Write+0x118>)
 80035ce:	f7ff fd56 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d1f2      	bne.n	80035bc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80035d6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d0ee      	beq.n	80035bc <HAL_I2C_Mem_Write+0x1c>
 80035de:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e0:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80035e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e6:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e8:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ea:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80035ec:	bf58      	it	pl
 80035ee:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035f0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80035f2:	bf5c      	itt	pl
 80035f4:	f043 0301 	orrpl.w	r3, r3, #1
 80035f8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003600:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003602:	2321      	movs	r3, #33	@ 0x21
 8003604:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003608:	2340      	movs	r3, #64	@ 0x40
 800360a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	2300      	movs	r3, #0
 8003610:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003614:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003616:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003618:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800361c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800361e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003620:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	4b26      	ldr	r3, [pc, #152]	@ (80036bc <HAL_I2C_Mem_Write+0x11c>)
 8003624:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	464b      	mov	r3, r9
 8003628:	e9cd 6500 	strd	r6, r5, [sp]
 800362c:	f7ff fdd4 	bl	80031d8 <I2C_RequestMemoryWrite>
 8003630:	2800      	cmp	r0, #0
 8003632:	d02a      	beq.n	800368a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
 8003636:	e7c2      	b.n	80035be <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003638:	f7ff fda3 	bl	8003182 <I2C_WaitOnTXEFlagUntilTimeout>
 800363c:	b140      	cbz	r0, 8003650 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003640:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	bf01      	itttt	eq
 8003644:	6822      	ldreq	r2, [r4, #0]
 8003646:	6813      	ldreq	r3, [r2, #0]
 8003648:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800364c:	6013      	streq	r3, [r2, #0]
 800364e:	e7f1      	b.n	8003634 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003650:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003652:	6827      	ldr	r7, [r4, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	f812 1b01 	ldrb.w	r1, [r2], #1
 800365a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800365c:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800365e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003660:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003662:	3a01      	subs	r2, #1
 8003664:	b292      	uxth	r2, r2
 8003666:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003668:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800366a:	1e48      	subs	r0, r1, #1
 800366c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800366e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003670:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003672:	d50a      	bpl.n	800368a <HAL_I2C_Mem_Write+0xea>
 8003674:	b148      	cbz	r0, 800368a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003676:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003678:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800367c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800367e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003680:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003682:	3b01      	subs	r3, #1
 8003684:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003686:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003688:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800368a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	462a      	mov	r2, r5
 800368e:	4631      	mov	r1, r6
 8003690:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d0      	bne.n	8003638 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003696:	f7ff fe7d 	bl	8003394 <I2C_WaitOnBTFFlagUntilTimeout>
 800369a:	2800      	cmp	r0, #0
 800369c:	d1cf      	bne.n	800363e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80036aa:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80036b6:	e782      	b.n	80035be <HAL_I2C_Mem_Write+0x1e>
 80036b8:	00100002 	.word	0x00100002
 80036bc:	ffff0000 	.word	0xffff0000

080036c0 <HAL_I2C_Mem_Read>:
{
 80036c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036c4:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80036c6:	2300      	movs	r3, #0
{
 80036c8:	4604      	mov	r4, r0
 80036ca:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 80036cc:	9303      	str	r3, [sp, #12]
{
 80036ce:	460d      	mov	r5, r1
 80036d0:	4690      	mov	r8, r2
 80036d2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff f9e6 	bl	8002aa4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80036dc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d004      	beq.n	80036ec <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 80036e2:	2502      	movs	r5, #2
}
 80036e4:	4628      	mov	r0, r5
 80036e6:	b009      	add	sp, #36	@ 0x24
 80036e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ec:	9000      	str	r0, [sp, #0]
 80036ee:	2319      	movs	r3, #25
 80036f0:	2201      	movs	r2, #1
 80036f2:	4620      	mov	r0, r4
 80036f4:	4990      	ldr	r1, [pc, #576]	@ (8003938 <HAL_I2C_Mem_Read+0x278>)
 80036f6:	f7ff fcc2 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d1f1      	bne.n	80036e2 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80036fe:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d0ed      	beq.n	80036e2 <HAL_I2C_Mem_Read+0x22>
 8003706:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003708:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800370a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003710:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003712:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003714:	bf58      	it	pl
 8003716:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003718:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 800371a:	bf5c      	itt	pl
 800371c:	f043 0301 	orrpl.w	r3, r3, #1
 8003720:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003728:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800372a:	2322      	movs	r3, #34	@ 0x22
 800372c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003730:	2340      	movs	r3, #64	@ 0x40
 8003732:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
 8003738:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800373a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800373c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800373e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003740:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8003744:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003746:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003748:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800374a:	4b7c      	ldr	r3, [pc, #496]	@ (800393c <HAL_I2C_Mem_Read+0x27c>)
 800374c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374e:	464b      	mov	r3, r9
 8003750:	e9cd 7600 	strd	r7, r6, [sp]
 8003754:	f7ff fd9a 	bl	800328c <I2C_RequestMemoryRead>
 8003758:	4605      	mov	r5, r0
 800375a:	2800      	cmp	r0, #0
 800375c:	f040 80ba 	bne.w	80038d4 <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 8003760:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003762:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003764:	b9c2      	cbnz	r2, 8003798 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	9004      	str	r0, [sp, #16]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	9204      	str	r2, [sp, #16]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	9204      	str	r2, [sp, #16]
 8003770:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003778:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8003940 <HAL_I2C_Mem_Read+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800377e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8003944 <HAL_I2C_Mem_Read+0x284>
    while (hi2c->XferSize > 0U)
 8003782:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d137      	bne.n	80037f8 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800378a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003796:	e7a5      	b.n	80036e4 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8003798:	2a01      	cmp	r2, #1
 800379a:	d111      	bne.n	80037c0 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	9005      	str	r0, [sp, #20]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	9205      	str	r2, [sp, #20]
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	9205      	str	r2, [sp, #20]
 80037b2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037bc:	b662      	cpsie	i
}
 80037be:	e7dc      	b.n	800377a <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80037c0:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c2:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80037c4:	d10e      	bne.n	80037e4 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037cc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	9006      	str	r0, [sp, #24]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	9206      	str	r2, [sp, #24]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	9206      	str	r2, [sp, #24]
 80037da:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e2:	e7ea      	b.n	80037ba <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	9007      	str	r0, [sp, #28]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	9207      	str	r2, [sp, #28]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	9307      	str	r3, [sp, #28]
 80037f4:	9b07      	ldr	r3, [sp, #28]
 80037f6:	e7c0      	b.n	800377a <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d878      	bhi.n	80038ee <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d115      	bne.n	800382c <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	4632      	mov	r2, r6
 8003802:	4639      	mov	r1, r7
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff fdef 	bl	80033e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800380a:	2800      	cmp	r0, #0
 800380c:	d162      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003814:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003816:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003818:	3301      	adds	r3, #1
 800381a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800381c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003824:	3b01      	subs	r3, #1
 8003826:	b29b      	uxth	r3, r3
 8003828:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800382a:	e7aa      	b.n	8003782 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 800382c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	463b      	mov	r3, r7
 8003834:	4641      	mov	r1, r8
 8003836:	4620      	mov	r0, r4
 8003838:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 800383a:	d118      	bne.n	800386e <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800383c:	f7ff fc1f 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003840:	2800      	cmp	r0, #0
 8003842:	d147      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x214>
 8003844:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003854:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003856:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003858:	3301      	adds	r3, #1
 800385a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800385c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003862:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003864:	3b01      	subs	r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800386a:	b662      	cpsie	i
 800386c:	e7cf      	b.n	800380e <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	f7ff fc06 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003872:	2800      	cmp	r0, #0
 8003874:	d12e      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800387e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003882:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800388c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800388e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003890:	1c53      	adds	r3, r2, #1
 8003892:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003894:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800389a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800389c:	3b01      	subs	r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a2:	f8d9 3000 	ldr.w	r3, [r9]
 80038a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038aa:	2123      	movs	r1, #35	@ 0x23
 80038ac:	434b      	muls	r3, r1
 80038ae:	9303      	str	r3, [sp, #12]
            count--;
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	b973      	cbnz	r3, 80038d8 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80038ba:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038bc:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038ce:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80038d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80038d4:	2501      	movs	r5, #1
 80038d6:	e705      	b.n	80036e4 <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	6959      	ldr	r1, [r3, #20]
 80038dc:	0749      	lsls	r1, r1, #29
 80038de:	d5e7      	bpl.n	80038b0 <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80038e6:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	7053      	strb	r3, [r2, #1]
 80038ec:	e7b3      	b.n	8003856 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ee:	4632      	mov	r2, r6
 80038f0:	4639      	mov	r1, r7
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff fd78 	bl	80033e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1eb      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003902:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003904:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8003906:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003908:	3a01      	subs	r2, #1
 800390a:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800390c:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 800390e:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003910:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 8003912:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003914:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003916:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8003918:	3b01      	subs	r3, #1
 800391a:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800391c:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800391e:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003920:	f57f af2f 	bpl.w	8003782 <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 8003924:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	bf02      	ittt	eq
 8003928:	6813      	ldreq	r3, [r2, #0]
 800392a:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 800392e:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	6913      	ldr	r3, [r2, #16]
 8003932:	704b      	strb	r3, [r1, #1]
 8003934:	e76f      	b.n	8003816 <HAL_I2C_Mem_Read+0x156>
 8003936:	bf00      	nop
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000
 8003940:	00010004 	.word	0x00010004
 8003944:	20000018 	.word	0x20000018

08003948 <HAL_I2C_IsDeviceReady>:
{
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	b085      	sub	sp, #20
 8003950:	461f      	mov	r7, r3
 8003952:	4688      	mov	r8, r1
 8003954:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8003956:	f7ff f8a5 	bl	8002aa4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800395a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 800395e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003960:	2b20      	cmp	r3, #32
 8003962:	d003      	beq.n	800396c <HAL_I2C_IsDeviceReady+0x24>
      return HAL_BUSY;
 8003964:	2002      	movs	r0, #2
}
 8003966:	b005      	add	sp, #20
 8003968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396c:	9000      	str	r0, [sp, #0]
 800396e:	2319      	movs	r3, #25
 8003970:	2201      	movs	r2, #1
 8003972:	4620      	mov	r0, r4
 8003974:	494c      	ldr	r1, [pc, #304]	@ (8003aa8 <HAL_I2C_IsDeviceReady+0x160>)
 8003976:	f7ff fb82 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 800397a:	2800      	cmp	r0, #0
 800397c:	d1f2      	bne.n	8003964 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 800397e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d0ee      	beq.n	8003964 <HAL_I2C_IsDeviceReady+0x1c>
 8003986:	2301      	movs	r3, #1
 8003988:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398e:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003990:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003992:	f8df b114 	ldr.w	fp, [pc, #276]	@ 8003aa8 <HAL_I2C_IsDeviceReady+0x160>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003996:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003998:	bf58      	it	pl
 800399a:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399c:	f008 08fe 	and.w	r8, r8, #254	@ 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80039a0:	bf5c      	itt	pl
 80039a2:	f042 0201 	orrpl.w	r2, r2, #1
 80039a6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ae:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	2324      	movs	r3, #36	@ 0x24
 80039b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_I2C_IsDeviceReady+0x164>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	6426      	str	r6, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039bc:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c2:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ca:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	463b      	mov	r3, r7
 80039ce:	2200      	movs	r2, #0
 80039d0:	9500      	str	r5, [sp, #0]
 80039d2:	f7ff fb54 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	b138      	cbz	r0, 80039ea <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039da:	681b      	ldr	r3, [r3, #0]
        return HAL_TIMEOUT;
 80039dc:	2003      	movs	r0, #3
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039de:	05d9      	lsls	r1, r3, #23
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e0:	bf44      	itt	mi
 80039e2:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 80039e6:	6423      	strmi	r3, [r4, #64]	@ 0x40
 80039e8:	e7bd      	b.n	8003966 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ea:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 80039ee:	f7ff f859 	bl	8002aa4 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039f2:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
      tickstart = HAL_GetTick();
 80039f6:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039fc:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039fe:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a06:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003a0a:	29a0      	cmp	r1, #160	@ 0xa0
 8003a0c:	d11c      	bne.n	8003a48 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a12:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	f884 903d 	strb.w	r9, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	0792      	lsls	r2, r2, #30
 8003a1c:	d52b      	bpl.n	8003a76 <HAL_I2C_IsDeviceReady+0x12e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a20:	4620      	mov	r0, r4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	9203      	str	r2, [sp, #12]
 8003a2c:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a2e:	491e      	ldr	r1, [pc, #120]	@ (8003aa8 <HAL_I2C_IsDeviceReady+0x160>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	9203      	str	r2, [sp, #12]
 8003a32:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a34:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3a:	9500      	str	r5, [sp, #0]
 8003a3c:	2319      	movs	r3, #25
 8003a3e:	f7ff fb1e 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003a42:	b198      	cbz	r0, 8003a6c <HAL_I2C_IsDeviceReady+0x124>
          return HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
 8003a46:	e78e      	b.n	8003966 <HAL_I2C_IsDeviceReady+0x1e>
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d1e0      	bne.n	8003a0e <HAL_I2C_IsDeviceReady+0xc6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7ff f82a 	bl	8002aa4 <HAL_GetTick>
 8003a50:	1b40      	subs	r0, r0, r5
 8003a52:	42b8      	cmp	r0, r7
 8003a54:	d800      	bhi.n	8003a58 <HAL_I2C_IsDeviceReady+0x110>
 8003a56:	b90f      	cbnz	r7, 8003a5c <HAL_I2C_IsDeviceReady+0x114>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a58:	f884 903d 	strb.w	r9, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a62:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003a6a:	e7cc      	b.n	8003a06 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	f884 903d 	strb.w	r9, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8003a70:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
        return HAL_OK;
 8003a74:	e777      	b.n	8003966 <HAL_I2C_IsDeviceReady+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a78:	4659      	mov	r1, fp
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a84:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a86:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a88:	2319      	movs	r3, #25
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	9500      	str	r5, [sp, #0]
 8003a8e:	f7ff faf6 	bl	800307e <I2C_WaitOnFlagUntilTimeout>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d1d6      	bne.n	8003a44 <HAL_I2C_IsDeviceReady+0xfc>
      I2C_Trials++;
 8003a96:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 8003a98:	4556      	cmp	r6, sl
 8003a9a:	d38f      	bcc.n	80039bc <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	f884 903d 	strb.w	r9, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8003aa0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8003aa4:	e7ce      	b.n	8003a44 <HAL_I2C_IsDeviceReady+0xfc>
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_I2C_AddrCallback>:
}
 8003ab8:	4770      	bx	lr

08003aba <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8003aba:	4770      	bx	lr

08003abc <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003abc:	4770      	bx	lr

08003abe <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003abe:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8003ac2:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8003ac4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac6:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8003ac8:	b983      	cbnz	r3, 8003aec <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003aca:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003acc:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ace:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ad0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad2:	d105      	bne.n	8003ae0 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003ad8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003ada:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8003adc:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003ade:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ae0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003ae4:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003ae6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e7f7      	b.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8003aec:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d103      	bne.n	8003afa <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003af2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003af4:	6802      	ldr	r2, [r0, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e7f4      	b.n	8003ae4 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8003afa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d12f      	bne.n	8003b60 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b00:	2a22      	cmp	r2, #34	@ 0x22
 8003b02:	d105      	bne.n	8003b10 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b04:	6802      	ldr	r2, [r0, #0]
 8003b06:	6813      	ldr	r3, [r2, #0]
 8003b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8003b0e:	e7ea      	b.n	8003ae6 <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b10:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b163      	cbz	r3, 8003b30 <I2C_MemoryTransmit_TXE_BTF+0x72>
 8003b16:	2a21      	cmp	r2, #33	@ 0x21
 8003b18:	d10a      	bne.n	8003b30 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003b1c:	6802      	ldr	r2, [r0, #0]
 8003b1e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003b22:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8003b24:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8003b26:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8003b2e:	e7d6      	b.n	8003ade <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b30:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1d2      	bne.n	8003ade <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003b38:	2a21      	cmp	r2, #33	@ 0x21
 8003b3a:	d1d0      	bne.n	8003ade <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b3c:	6802      	ldr	r2, [r0, #0]
 8003b3e:	6851      	ldr	r1, [r2, #4]
 8003b40:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003b44:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	6811      	ldr	r1, [r2, #0]
 8003b48:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003b4c:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b5a:	f7ff ffaf 	bl	8003abc <HAL_I2C_MemTxCpltCallback>
 8003b5e:	e7be      	b.n	8003ade <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8003b66:	bf44      	itt	mi
 8003b68:	2200      	movmi	r2, #0
 8003b6a:	611a      	strmi	r2, [r3, #16]
}
 8003b6c:	e7b7      	b.n	8003ade <I2C_MemoryTransmit_TXE_BTF+0x20>

08003b6e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b6e:	4770      	bx	lr

08003b70 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8003b70:	4770      	bx	lr

08003b72 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8003b72:	4770      	bx	lr

08003b74 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003b74:	2300      	movs	r3, #0
{
 8003b76:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b78:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 8003b7c:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b80:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b82:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b84:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b88:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8c:	2123      	movs	r1, #35	@ 0x23
 8003b8e:	434b      	muls	r3, r1
 8003b90:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b92:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b94:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 8003b96:	9901      	ldr	r1, [sp, #4]
 8003b98:	bb41      	cbnz	r1, 8003bec <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003b9c:	f041 0120 	orr.w	r1, r1, #32
 8003ba0:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8003ba2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003ba4:	b10c      	cbz	r4, 8003baa <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 8003baa:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003bac:	b109      	cbz	r1, 8003bb2 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bae:	2500      	movs	r5, #0
 8003bb0:	628d      	str	r5, [r1, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb2:	681d      	ldr	r5, [r3, #0]
 8003bb4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8003bb8:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 8003bba:	2500      	movs	r5, #0
 8003bbc:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8003bbe:	b104      	cbz	r4, 8003bc2 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bc0:	6365      	str	r5, [r4, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8003bc2:	b101      	cbz	r1, 8003bc6 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bc4:	634d      	str	r5, [r1, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	f021 0101 	bic.w	r1, r1, #1
 8003bcc:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bce:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003bd2:	2960      	cmp	r1, #96	@ 0x60
 8003bd4:	d111      	bne.n	8003bfa <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003be2:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003be4:	f7ff ffc5 	bl	8003b72 <HAL_I2C_AbortCpltCallback>
}
 8003be8:	b003      	add	sp, #12
 8003bea:	bd30      	pop	{r4, r5, pc}
    count--;
 8003bec:	9901      	ldr	r1, [sp, #4]
 8003bee:	3901      	subs	r1, #1
 8003bf0:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	0589      	lsls	r1, r1, #22
 8003bf6:	d4ce      	bmi.n	8003b96 <I2C_DMAAbort+0x22>
 8003bf8:	e7d3      	b.n	8003ba2 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bfa:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8003bfe:	2a28      	cmp	r2, #40	@ 0x28
 8003c00:	d10e      	bne.n	8003c20 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	f041 0101 	orr.w	r1, r1, #1
 8003c08:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	6819      	ldr	r1, [r3, #0]
 8003c0c:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003c10:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c16:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8003c1a:	f7ff ffa9 	bl	8003b70 <HAL_I2C_ErrorCallback>
}
 8003c1e:	e7e3      	b.n	8003be8 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	2320      	movs	r3, #32
 8003c22:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8003c2c:	e7f5      	b.n	8003c1a <I2C_DMAAbort+0xa6>
 8003c2e:	bf00      	nop
 8003c30:	20000018 	.word	0x20000018

08003c34 <I2C_ITError>:
{
 8003c34:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c36:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c3a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 8003c3e:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c40:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c42:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c44:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c46:	6803      	ldr	r3, [r0, #0]
 8003c48:	d001      	beq.n	8003c4e <I2C_ITError+0x1a>
 8003c4a:	2940      	cmp	r1, #64	@ 0x40
 8003c4c:	d113      	bne.n	8003c76 <I2C_ITError+0x42>
 8003c4e:	2a22      	cmp	r2, #34	@ 0x22
 8003c50:	d111      	bne.n	8003c76 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8003c58:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 8003c60:	d106      	bne.n	8003c70 <I2C_ITError+0x3c>
 8003c62:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	bf1e      	ittt	ne
 8003c66:	2220      	movne	r2, #32
 8003c68:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6c:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c70:	2200      	movs	r2, #0
 8003c72:	6322      	str	r2, [r4, #48]	@ 0x30
 8003c74:	e007      	b.n	8003c86 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c76:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 8003c7a:	2928      	cmp	r1, #40	@ 0x28
 8003c7c:	d1ed      	bne.n	8003c5a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	2200      	movs	r2, #0
 8003c80:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c82:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003c8c:	d04f      	beq.n	8003d2e <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c8e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c90:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c96:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c98:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <I2C_ITError+0x148>)
 8003ca0:	d02b      	beq.n	8003cfa <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ca2:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ca4:	f7fe ff7a 	bl	8002b9c <HAL_DMA_Abort_IT>
 8003ca8:	b150      	cbz	r0, 8003cc0 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8003caa:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003cbe:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8003cc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cc2:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc4:	bf1f      	itttt	ne
 8003cc6:	6822      	ldrne	r2, [r4, #0]
 8003cc8:	6853      	ldrne	r3, [r2, #4]
 8003cca:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 8003cce:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003cd0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003cd4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 8003cd6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003cd8:	0752      	lsls	r2, r2, #29
 8003cda:	d50d      	bpl.n	8003cf8 <I2C_ITError+0xc4>
 8003cdc:	2b28      	cmp	r3, #40	@ 0x28
 8003cde:	d10b      	bne.n	8003cf8 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ce0:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ce2:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ce8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cec:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cf0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cf4:	f7ff fee1 	bl	8003aba <HAL_I2C_ListenCpltCallback>
}
 8003cf8:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cfa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003cfc:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cfe:	f7fe ff4d 	bl	8002b9c <HAL_DMA_Abort_IT>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0dc      	beq.n	8003cc0 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	0651      	lsls	r1, r2, #25
 8003d0c:	d505      	bpl.n	8003d1a <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d12:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003d14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d16:	3301      	adds	r3, #1
 8003d18:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003d1a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	2320      	movs	r3, #32
 8003d28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d2c:	e7c6      	b.n	8003cbc <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d2e:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003d32:	2960      	cmp	r1, #96	@ 0x60
 8003d34:	d115      	bne.n	8003d62 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	2120      	movs	r1, #32
 8003d38:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	0652      	lsls	r2, r2, #25
 8003d42:	d505      	bpl.n	8003d50 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d48:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003d50:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d52:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d5c:	f7ff ff09 	bl	8003b72 <HAL_I2C_AbortCpltCallback>
 8003d60:	e7ae      	b.n	8003cc0 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	0650      	lsls	r0, r2, #25
 8003d66:	d505      	bpl.n	8003d74 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d6c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d70:	3301      	adds	r3, #1
 8003d72:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003d74:	4620      	mov	r0, r4
 8003d76:	f7ff fefb 	bl	8003b70 <HAL_I2C_ErrorCallback>
 8003d7a:	e7a1      	b.n	8003cc0 <I2C_ITError+0x8c>
 8003d7c:	08003b75 	.word	0x08003b75
 8003d80:	ffff0000 	.word	0xffff0000

08003d84 <HAL_I2C_EV_IRQHandler>:
{
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d86:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d88:	6803      	ldr	r3, [r0, #0]
{
 8003d8a:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d8c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d8e:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d90:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d94:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d98:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d9a:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d9c:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2C_EV_IRQHandler+0x22>
 8003da0:	2d40      	cmp	r5, #64	@ 0x40
 8003da2:	f040 82e5 	bne.w	8004370 <HAL_I2C_EV_IRQHandler+0x5ec>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003da6:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003da8:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003daa:	f010 0f01 	tst.w	r0, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x3c>
 8003db0:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003db4:	d002      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 8003db6:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003dba:	d151      	bne.n	8003e60 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8003dbc:	b00f      	add	sp, #60	@ 0x3c
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc0:	0596      	lsls	r6, r2, #22
 8003dc2:	d54d      	bpl.n	8003e60 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003dc4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003dc6:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8003dca:	d10c      	bne.n	8003de6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dcc:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dce:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd0:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003dd4:	2a40      	cmp	r2, #64	@ 0x40
 8003dd6:	d111      	bne.n	8003dfc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003dd8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003dda:	b952      	cbnz	r2, 8003df2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ddc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003dde:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003de2:	611a      	str	r2, [r3, #16]
 8003de4:	e7ea      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003de6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003de8:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dee:	2208      	movs	r2, #8
 8003df0:	e7ed      	b.n	8003dce <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	e7f2      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dfc:	6922      	ldr	r2, [r4, #16]
 8003dfe:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003e02:	d11a      	bne.n	8003e3a <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e04:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003e08:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e0a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e0c:	d111      	bne.n	8003e32 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e0e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e12:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e14:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e16:	b10a      	cbz	r2, 8003e1c <HAL_I2C_EV_IRQHandler+0x98>
 8003e18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e1a:	b92a      	cbnz	r2, 8003e28 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d0cc      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 8003e22:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e24:	2a00      	cmp	r2, #0
 8003e26:	d0c9      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	e7c4      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	e7eb      	b.n	8003e12 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8003e3a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003e3c:	b932      	cbnz	r2, 8003e4c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e3e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e40:	11d2      	asrs	r2, r2, #7
 8003e42:	f002 0206 	and.w	r2, r2, #6
 8003e46:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8003e4a:	e7ca      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003e4c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003e4e:	2a01      	cmp	r2, #1
 8003e50:	d1b4      	bne.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e52:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e54:	11d2      	asrs	r2, r2, #7
 8003e56:	f002 0206 	and.w	r2, r2, #6
 8003e5a:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8003e5e:	e7c0      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e60:	0706      	lsls	r6, r0, #28
 8003e62:	d503      	bpl.n	8003e6c <HAL_I2C_EV_IRQHandler+0xe8>
 8003e64:	0596      	lsls	r6, r2, #22
 8003e66:	d501      	bpl.n	8003e6c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e68:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003e6a:	e7e4      	b.n	8003e36 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6c:	0786      	lsls	r6, r0, #30
 8003e6e:	f140 80f0 	bpl.w	8004052 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003e72:	0596      	lsls	r6, r2, #22
 8003e74:	f140 80ed 	bpl.w	8004052 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e78:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e7e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e80:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e84:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e86:	2822      	cmp	r0, #34	@ 0x22
 8003e88:	f040 80db 	bne.w	8004042 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e8c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003e8e:	b940      	cbnz	r0, 8003ea2 <HAL_I2C_EV_IRQHandler+0x11e>
 8003e90:	2940      	cmp	r1, #64	@ 0x40
 8003e92:	d106      	bne.n	8003ea2 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	9000      	str	r0, [sp, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	9200      	str	r2, [sp, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	9b00      	ldr	r3, [sp, #0]
 8003ea0:	e78c      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ea2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003ea4:	b989      	cbnz	r1, 8003eca <HAL_I2C_EV_IRQHandler+0x146>
 8003ea6:	6920      	ldr	r0, [r4, #16]
 8003ea8:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8003eac:	d10d      	bne.n	8003eca <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	9101      	str	r1, [sp, #4]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	9201      	str	r2, [sp, #4]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	9201      	str	r2, [sp, #4]
 8003eb8:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ec2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003ec4:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8003ec6:	6523      	str	r3, [r4, #80]	@ 0x50
 8003ec8:	e778      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8003eca:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003ecc:	b289      	uxth	r1, r1
 8003ece:	b951      	cbnz	r1, 8003ee6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed0:	9102      	str	r1, [sp, #8]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	9202      	str	r2, [sp, #8]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	9202      	str	r2, [sp, #8]
 8003eda:	9a02      	ldr	r2, [sp, #8]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e019      	b.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8003ee6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003ee8:	b289      	uxth	r1, r1
 8003eea:	2901      	cmp	r1, #1
 8003eec:	d149      	bne.n	8003f82 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003eee:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003ef2:	d11b      	bne.n	8003f2c <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efa:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003f02:	d00c      	beq.n	8003f1e <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	9203      	str	r2, [sp, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	9303      	str	r3, [sp, #12]
 8003f18:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e7d3      	b.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	9204      	str	r2, [sp, #16]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	9204      	str	r2, [sp, #16]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	9204      	str	r2, [sp, #16]
 8003f28:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	e7d7      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f2c:	2a08      	cmp	r2, #8
 8003f2e:	d01c      	beq.n	8003f6a <HAL_I2C_EV_IRQHandler+0x1e6>
 8003f30:	2a20      	cmp	r2, #32
 8003f32:	d01a      	beq.n	8003f6a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f34:	2d12      	cmp	r5, #18
 8003f36:	d10d      	bne.n	8003f54 <HAL_I2C_EV_IRQHandler+0x1d0>
 8003f38:	2a01      	cmp	r2, #1
 8003f3a:	d116      	bne.n	8003f6a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f44:	2200      	movs	r2, #0
 8003f46:	9205      	str	r2, [sp, #20]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	9205      	str	r2, [sp, #20]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	9305      	str	r3, [sp, #20]
 8003f50:	9b05      	ldr	r3, [sp, #20]
 8003f52:	e7e2      	b.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f54:	2a10      	cmp	r2, #16
 8003f56:	d8f1      	bhi.n	8003f3c <HAL_I2C_EV_IRQHandler+0x1b8>
 8003f58:	4986      	ldr	r1, [pc, #536]	@ (8004174 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8003f5a:	fa41 f202 	asr.w	r2, r1, r2
 8003f5e:	07d7      	lsls	r7, r2, #31
 8003f60:	d4ec      	bmi.n	8003f3c <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f68:	e7eb      	b.n	8003f42 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2200      	movs	r2, #0
 8003f74:	9206      	str	r2, [sp, #24]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	9206      	str	r2, [sp, #24]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	9206      	str	r2, [sp, #24]
 8003f7e:	9a06      	ldr	r2, [sp, #24]
 8003f80:	e7ac      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8003f82:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003f84:	b289      	uxth	r1, r1
 8003f86:	2902      	cmp	r1, #2
 8003f88:	d138      	bne.n	8003ffc <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f8a:	2a10      	cmp	r2, #16
 8003f8c:	d803      	bhi.n	8003f96 <HAL_I2C_EV_IRQHandler+0x212>
 8003f8e:	497a      	ldr	r1, [pc, #488]	@ (8004178 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8003f90:	40d1      	lsrs	r1, r2
 8003f92:	07ce      	lsls	r6, r1, #31
 8003f94:	d418      	bmi.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f96:	6819      	ldr	r1, [r3, #0]
 8003f98:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003f9c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	9107      	str	r1, [sp, #28]
 8003fa2:	6959      	ldr	r1, [r3, #20]
 8003fa4:	9107      	str	r1, [sp, #28]
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	9107      	str	r1, [sp, #28]
 8003faa:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003fb2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	050d      	lsls	r5, r1, #20
 8003fb8:	d5af      	bpl.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
 8003fba:	2a20      	cmp	r2, #32
 8003fbc:	d81b      	bhi.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x272>
 8003fbe:	2a07      	cmp	r2, #7
 8003fc0:	d80e      	bhi.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x25c>
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	d1a9      	bne.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
 8003fc6:	e011      	b.n	8003fec <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003fce:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	9108      	str	r1, [sp, #32]
 8003fd4:	6959      	ldr	r1, [r3, #20]
 8003fd6:	9108      	str	r1, [sp, #32]
 8003fd8:	6999      	ldr	r1, [r3, #24]
 8003fda:	9108      	str	r1, [sp, #32]
 8003fdc:	9908      	ldr	r1, [sp, #32]
 8003fde:	e7e9      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x230>
 8003fe0:	f1a2 0108 	sub.w	r1, r2, #8
 8003fe4:	4a65      	ldr	r2, [pc, #404]	@ (800417c <HAL_I2C_EV_IRQHandler+0x3f8>)
 8003fe6:	40ca      	lsrs	r2, r1
 8003fe8:	07d0      	lsls	r0, r2, #31
 8003fea:	d596      	bpl.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e791      	b.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
 8003ff6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003ffa:	e7e3      	b.n	8003fc4 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8004002:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	0509      	lsls	r1, r1, #20
 8004008:	d510      	bpl.n	800402c <HAL_I2C_EV_IRQHandler+0x2a8>
 800400a:	2a20      	cmp	r2, #32
 800400c:	d816      	bhi.n	800403c <HAL_I2C_EV_IRQHandler+0x2b8>
 800400e:	2a07      	cmp	r2, #7
 8004010:	d806      	bhi.n	8004020 <HAL_I2C_EV_IRQHandler+0x29c>
 8004012:	2a01      	cmp	r2, #1
 8004014:	d10a      	bne.n	800402c <HAL_I2C_EV_IRQHandler+0x2a8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	e005      	b.n	800402c <HAL_I2C_EV_IRQHandler+0x2a8>
 8004020:	f1a2 0108 	sub.w	r1, r2, #8
 8004024:	4a55      	ldr	r2, [pc, #340]	@ (800417c <HAL_I2C_EV_IRQHandler+0x3f8>)
 8004026:	40ca      	lsrs	r2, r1
 8004028:	07d2      	lsls	r2, r2, #31
 800402a:	d4f4      	bmi.n	8004016 <HAL_I2C_EV_IRQHandler+0x292>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402c:	2200      	movs	r2, #0
 800402e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	9209      	str	r2, [sp, #36]	@ 0x24
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	9309      	str	r3, [sp, #36]	@ 0x24
 8004038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800403a:	e76e      	b.n	8003f1a <HAL_I2C_EV_IRQHandler+0x196>
 800403c:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8004040:	e7e8      	b.n	8004014 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2200      	movs	r2, #0
 8004044:	920a      	str	r2, [sp, #40]	@ 0x28
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	920a      	str	r2, [sp, #40]	@ 0x28
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	930a      	str	r3, [sp, #40]	@ 0x28
 800404e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004050:	e6b4      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004052:	077f      	lsls	r7, r7, #29
 8004054:	f140 8094 	bpl.w	8004180 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004058:	685e      	ldr	r6, [r3, #4]
 800405a:	0536      	lsls	r6, r6, #20
 800405c:	f53f aeae 	bmi.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004060:	0607      	lsls	r7, r0, #24
 8004062:	f000 0604 	and.w	r6, r0, #4
 8004066:	d53e      	bpl.n	80040e6 <HAL_I2C_EV_IRQHandler+0x362>
 8004068:	0550      	lsls	r0, r2, #21
 800406a:	d53c      	bpl.n	80040e6 <HAL_I2C_EV_IRQHandler+0x362>
 800406c:	2e00      	cmp	r6, #0
 800406e:	d13d      	bne.n	80040ec <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004070:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004074:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004076:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800407a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800407c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800407e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004080:	b9c5      	cbnz	r5, 80040b4 <HAL_I2C_EV_IRQHandler+0x330>
 8004082:	2a21      	cmp	r2, #33	@ 0x21
 8004084:	d118      	bne.n	80040b8 <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004086:	2808      	cmp	r0, #8
 8004088:	d058      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
 800408a:	2820      	cmp	r0, #32
 800408c:	d056      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
 800408e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8004092:	d053      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800409a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800409c:	2311      	movs	r3, #17
 800409e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040a8:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040ae:	f7ff fcff 	bl	8003ab0 <HAL_I2C_MasterTxCpltCallback>
 80040b2:	e683      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040b4:	2a21      	cmp	r2, #33	@ 0x21
 80040b6:	d005      	beq.n	80040c4 <HAL_I2C_EV_IRQHandler+0x340>
 80040b8:	2940      	cmp	r1, #64	@ 0x40
 80040ba:	f47f ae7f 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040be:	2a22      	cmp	r2, #34	@ 0x22
 80040c0:	f47f ae7c 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 80040c4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80040c6:	b292      	uxth	r2, r2
 80040c8:	b91a      	cbnz	r2, 80040d2 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d0:	e6ad      	b.n	8003e2e <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d2:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80040d6:	2a40      	cmp	r2, #64	@ 0x40
 80040d8:	d116      	bne.n	8004108 <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040da:	4620      	mov	r0, r4
}
 80040dc:	b00f      	add	sp, #60	@ 0x3c
 80040de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040e2:	f7ff bcec 	b.w	8003abe <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	f43f ae68 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80040ec:	0597      	lsls	r7, r2, #22
 80040ee:	f57f ae65 	bpl.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040f2:	2921      	cmp	r1, #33	@ 0x21
 80040f4:	d139      	bne.n	800416a <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80040fc:	2a21      	cmp	r2, #33	@ 0x21
 80040fe:	f47f ae5d 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8004102:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004104:	b292      	uxth	r2, r2
 8004106:	b14a      	cbz	r2, 800411c <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004108:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800410a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800410e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8004110:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004112:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004114:	3b01      	subs	r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 800411a:	e64f      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411c:	2908      	cmp	r1, #8
 800411e:	d00d      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
 8004120:	2920      	cmp	r1, #32
 8004122:	d00b      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
 8004124:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8004128:	d008      	beq.n	800413c <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004130:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004132:	2311      	movs	r3, #17
 8004134:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800413a:	e7b4      	b.n	80040a6 <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800413c:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 800413e:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004140:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004144:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800414e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004150:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004152:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004154:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004158:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004160:	2a40      	cmp	r2, #64	@ 0x40
 8004162:	d1a4      	bne.n	80040ae <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004164:	f7ff fcaa 	bl	8003abc <HAL_I2C_MemTxCpltCallback>
 8004168:	e628      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800416a:	2d40      	cmp	r5, #64	@ 0x40
 800416c:	f47f ae26 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 8004170:	e7b3      	b.n	80040da <HAL_I2C_EV_IRQHandler+0x356>
 8004172:	bf00      	nop
 8004174:	fffeffeb 	.word	0xfffeffeb
 8004178:	00010014 	.word	0x00010014
 800417c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	050e      	lsls	r6, r1, #20
 8004184:	f53f ae1a 	bmi.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004188:	0645      	lsls	r5, r0, #25
 800418a:	f000 0104 	and.w	r1, r0, #4
 800418e:	f140 8086 	bpl.w	800429e <HAL_I2C_EV_IRQHandler+0x51a>
 8004192:	0550      	lsls	r0, r2, #21
 8004194:	f140 8083 	bpl.w	800429e <HAL_I2C_EV_IRQHandler+0x51a>
 8004198:	2900      	cmp	r1, #0
 800419a:	f040 8083 	bne.w	80042a4 <HAL_I2C_EV_IRQHandler+0x520>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800419e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80041a2:	2a22      	cmp	r2, #34	@ 0x22
 80041a4:	f47f ae0a 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 80041a8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 80041aa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80041ac:	b292      	uxth	r2, r2
    if (tmp > 3U)
 80041ae:	2a03      	cmp	r2, #3
 80041b0:	d914      	bls.n	80041dc <HAL_I2C_EV_IRQHandler+0x458>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041b6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041ba:	3301      	adds	r3, #1
 80041bc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80041be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80041c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f47f adf6 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	6853      	ldr	r3, [r2, #4]
 80041d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d8:	6053      	str	r3, [r2, #4]
 80041da:	e5ef      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041dc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80041de:	2d02      	cmp	r5, #2
 80041e0:	f43f af73 	beq.w	80040ca <HAL_I2C_EV_IRQHandler+0x346>
 80041e4:	2a01      	cmp	r2, #1
 80041e6:	f63f af70 	bhi.w	80040ca <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 80041ea:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ec:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80041f0:	4a78      	ldr	r2, [pc, #480]	@ (80043d4 <HAL_I2C_EV_IRQHandler+0x650>)
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	fbb2 f2f1 	udiv	r2, r2, r1
 80041f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041fc:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 80041fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004200:	3a01      	subs	r2, #1
 8004202:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8004204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004206:	b9d1      	cbnz	r1, 800423e <HAL_I2C_EV_IRQHandler+0x4ba>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 800420a:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420c:	f042 0220 	orr.w	r2, r2, #32
 8004210:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004218:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800421e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004220:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004222:	3301      	adds	r3, #1
 8004224:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004226:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004228:	3b01      	subs	r3, #1
 800422a:	b29b      	uxth	r3, r3
 800422c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800422e:	2320      	movs	r3, #32
 8004230:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004238:	f7ff fc9a 	bl	8003b70 <HAL_I2C_ErrorCallback>
 800423c:	e5be      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8004244:	d1db      	bne.n	80041fe <HAL_I2C_EV_IRQHandler+0x47a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800424c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004254:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	6919      	ldr	r1, [r3, #16]
 8004258:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800425a:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 800425c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800425e:	3301      	adds	r3, #1
 8004260:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004262:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800426a:	2320      	movs	r3, #32
 800426c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004270:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	d104      	bne.n	8004286 <HAL_I2C_EV_IRQHandler+0x502>
          hi2c->PreviousState = I2C_STATE_NONE;
 800427c:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800427e:	4620      	mov	r0, r4
 8004280:	f7ff fc75 	bl	8003b6e <HAL_I2C_MemRxCpltCallback>
 8004284:	e59a      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004286:	2808      	cmp	r0, #8
 8004288:	d001      	beq.n	800428e <HAL_I2C_EV_IRQHandler+0x50a>
 800428a:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800428c:	d101      	bne.n	8004292 <HAL_I2C_EV_IRQHandler+0x50e>
        hi2c->PreviousState = I2C_STATE_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_I2C_EV_IRQHandler+0x510>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004292:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004294:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004296:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004298:	f7ff fc0b 	bl	8003ab2 <HAL_I2C_MasterRxCpltCallback>
 800429c:	e58e      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800429e:	2900      	cmp	r1, #0
 80042a0:	f43f ad8c 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80042a4:	0592      	lsls	r2, r2, #22
 80042a6:	f57f ad89 	bpl.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 80042ac:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 80042b0:	b280      	uxth	r0, r0
 80042b2:	2804      	cmp	r0, #4
 80042b4:	d109      	bne.n	80042ca <HAL_I2C_EV_IRQHandler+0x546>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042bc:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80042c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042c4:	3301      	adds	r3, #1
 80042c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80042c8:	e723      	b.n	8004112 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 80042ca:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80042cc:	b280      	uxth	r0, r0
 80042ce:	2803      	cmp	r0, #3
 80042d0:	d10c      	bne.n	80042ec <HAL_I2C_EV_IRQHandler+0x568>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d2:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042d4:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 80042da:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042dc:	d0ef      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x53a>
 80042de:	2a02      	cmp	r2, #2
 80042e0:	d0ed      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x53a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ea:	e7e8      	b.n	80042be <HAL_I2C_EV_IRQHandler+0x53a>
  else if (hi2c->XferCount == 2U)
 80042ec:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80042ee:	b280      	uxth	r0, r0
 80042f0:	2802      	cmp	r0, #2
 80042f2:	d1e4      	bne.n	80042be <HAL_I2C_EV_IRQHandler+0x53a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042f4:	2a04      	cmp	r2, #4
 80042f6:	d033      	beq.n	8004360 <HAL_I2C_EV_IRQHandler+0x5dc>
 80042f8:	d807      	bhi.n	800430a <HAL_I2C_EV_IRQHandler+0x586>
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	d007      	beq.n	800430e <HAL_I2C_EV_IRQHandler+0x58a>
 80042fe:	2a02      	cmp	r2, #2
 8004300:	d02e      	beq.n	8004360 <HAL_I2C_EV_IRQHandler+0x5dc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8004308:	e004      	b.n	8004314 <HAL_I2C_EV_IRQHandler+0x590>
 800430a:	2a10      	cmp	r2, #16
 800430c:	d1f9      	bne.n	8004302 <HAL_I2C_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800431a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800431c:	1c4b      	adds	r3, r1, #1
 800431e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004320:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 800432e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004330:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8004332:	3301      	adds	r3, #1
 8004334:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004336:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004338:	3b01      	subs	r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800433e:	684b      	ldr	r3, [r1, #4]
 8004340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004344:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	2320      	movs	r3, #32
 8004348:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800434c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435a:	d105      	bne.n	8004368 <HAL_I2C_EV_IRQHandler+0x5e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 800435c:	6323      	str	r3, [r4, #48]	@ 0x30
 800435e:	e78e      	b.n	800427e <HAL_I2C_EV_IRQHandler+0x4fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8004366:	e7d5      	b.n	8004314 <HAL_I2C_EV_IRQHandler+0x590>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004368:	2a08      	cmp	r2, #8
 800436a:	d090      	beq.n	800428e <HAL_I2C_EV_IRQHandler+0x50a>
 800436c:	2a20      	cmp	r2, #32
 800436e:	e78d      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x508>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004370:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004372:	b310      	cbz	r0, 80043ba <HAL_I2C_EV_IRQHandler+0x636>
  uint32_t sr2itflags               = 0U;
 8004374:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004376:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004378:	0787      	lsls	r7, r0, #30
 800437a:	d52d      	bpl.n	80043d8 <HAL_I2C_EV_IRQHandler+0x654>
 800437c:	0596      	lsls	r6, r2, #22
 800437e:	d52b      	bpl.n	80043d8 <HAL_I2C_EV_IRQHandler+0x654>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004380:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004382:	b102      	cbz	r2, 8004386 <HAL_I2C_EV_IRQHandler+0x602>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004384:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004386:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800438a:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800438e:	2a28      	cmp	r2, #40	@ 0x28
 8004390:	d116      	bne.n	80043c0 <HAL_I2C_EV_IRQHandler+0x63c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004392:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004394:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 800439c:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043a0:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043a4:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043a6:	bf54      	ite	pl
 80043a8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043aa:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043ac:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 80043b0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043b4:	f7ff fb80 	bl	8003ab8 <HAL_I2C_AddrCallback>
 80043b8:	e500      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043ba:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043bc:	6958      	ldr	r0, [r3, #20]
 80043be:	e7db      	b.n	8004378 <HAL_I2C_EV_IRQHandler+0x5f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c0:	2200      	movs	r2, #0
 80043c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	910c      	str	r1, [sp, #48]	@ 0x30
 80043c8:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 80043ca:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80043d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80043d2:	e4f3      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80043d4:	20000018 	.word	0x20000018
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d8:	06c6      	lsls	r6, r0, #27
 80043da:	f140 80b1 	bpl.w	8004540 <HAL_I2C_EV_IRQHandler+0x7bc>
 80043de:	0595      	lsls	r5, r2, #22
 80043e0:	f140 80ae 	bpl.w	8004540 <HAL_I2C_EV_IRQHandler+0x7bc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e4:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ea:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043f0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043f2:	2200      	movs	r2, #0
 80043f4:	920d      	str	r2, [sp, #52]	@ 0x34
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	0510      	lsls	r0, r2, #20
 8004410:	d520      	bpl.n	8004454 <HAL_I2C_EV_IRQHandler+0x6d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004412:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 8004416:	2a22      	cmp	r2, #34	@ 0x22
 8004418:	d14a      	bne.n	80044b0 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800441a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800441c:	6802      	ldr	r2, [r0, #0]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	b292      	uxth	r2, r2
 8004422:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8004424:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004426:	b292      	uxth	r2, r2
 8004428:	b11a      	cbz	r2, 8004432 <HAL_I2C_EV_IRQHandler+0x6ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800442c:	f042 0204 	orr.w	r2, r2, #4
 8004430:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004438:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800443a:	f7fe fbf5 	bl	8002c28 <HAL_DMA_GetState>
 800443e:	2801      	cmp	r0, #1
 8004440:	d008      	beq.n	8004454 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004442:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004444:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_I2C_EV_IRQHandler+0x8a8>)
 8004446:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004448:	f7fe fba8 	bl	8002b9c <HAL_DMA_Abort_IT>
 800444c:	b110      	cbz	r0, 8004454 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800444e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004450:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004452:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004454:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	b313      	cbz	r3, 80044a0 <HAL_I2C_EV_IRQHandler+0x71c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	0751      	lsls	r1, r2, #29
 8004460:	d509      	bpl.n	8004476 <HAL_I2C_EV_IRQHandler+0x6f2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004466:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004468:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800446a:	3301      	adds	r3, #1
 800446c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800446e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004470:	3b01      	subs	r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	0652      	lsls	r2, r2, #25
 800447c:	d509      	bpl.n	8004492 <HAL_I2C_EV_IRQHandler+0x70e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004482:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004484:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004486:	3301      	adds	r3, #1
 8004488:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800448a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800448c:	3b01      	subs	r3, #1
 800448e:	b29b      	uxth	r3, r3
 8004490:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004492:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	b11b      	cbz	r3, 80044a0 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044a2:	b313      	cbz	r3, 80044ea <HAL_I2C_EV_IRQHandler+0x766>
    I2C_ITError(hi2c);
 80044a4:	4620      	mov	r0, r4
}
 80044a6:	b00f      	add	sp, #60	@ 0x3c
 80044a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80044ac:	f7ff bbc2 	b.w	8003c34 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80044b0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80044b2:	6802      	ldr	r2, [r0, #0]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	b292      	uxth	r2, r2
 80044b8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80044ba:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80044bc:	b292      	uxth	r2, r2
 80044be:	b11a      	cbz	r2, 80044c8 <HAL_I2C_EV_IRQHandler+0x744>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80044c2:	f042 0204 	orr.w	r2, r2, #4
 80044c6:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ce:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044d0:	f7fe fbaa 	bl	8002c28 <HAL_DMA_GetState>
 80044d4:	2801      	cmp	r0, #1
 80044d6:	d0bd      	beq.n	8004454 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044d8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80044da:	4b54      	ldr	r3, [pc, #336]	@ (800462c <HAL_I2C_EV_IRQHandler+0x8a8>)
 80044dc:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044de:	f7fe fb5d 	bl	8002b9c <HAL_DMA_Abort_IT>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0b6      	beq.n	8004454 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044e6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80044e8:	e7b2      	b.n	8004450 <HAL_I2C_EV_IRQHandler+0x6cc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044ea:	2d2a      	cmp	r5, #42	@ 0x2a
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_EV_IRQHandler+0x778>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f0:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f8:	f7ff fadd 	bl	8003ab6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044fc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004500:	2b28      	cmp	r3, #40	@ 0x28
 8004502:	d10c      	bne.n	800451e <HAL_I2C_EV_IRQHandler+0x79a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004504:	4b4a      	ldr	r3, [pc, #296]	@ (8004630 <HAL_I2C_EV_IRQHandler+0x8ac>)
      hi2c->State = HAL_I2C_STATE_READY;
 8004506:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004508:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800450a:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 800450c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004510:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004518:	f7ff facf 	bl	8003aba <HAL_I2C_ListenCpltCallback>
 800451c:	e44e      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800451e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004520:	2b22      	cmp	r3, #34	@ 0x22
 8004522:	d002      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x7a6>
 8004524:	2d22      	cmp	r5, #34	@ 0x22
 8004526:	f47f ac49 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 800452a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800452c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004530:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fabc 	bl	8003ab6 <HAL_I2C_SlaveRxCpltCallback>
 800453e:	e43d      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004540:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8004544:	2921      	cmp	r1, #33	@ 0x21
 8004546:	f000 0504 	and.w	r5, r0, #4
 800454a:	d135      	bne.n	80045b8 <HAL_I2C_EV_IRQHandler+0x834>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800454c:	0607      	lsls	r7, r0, #24
 800454e:	d527      	bpl.n	80045a0 <HAL_I2C_EV_IRQHandler+0x81c>
 8004550:	0556      	lsls	r6, r2, #21
 8004552:	d525      	bpl.n	80045a0 <HAL_I2C_EV_IRQHandler+0x81c>
 8004554:	bb3d      	cbnz	r5, 80045a6 <HAL_I2C_EV_IRQHandler+0x822>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004556:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800455a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800455c:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800455e:	b292      	uxth	r2, r2
 8004560:	2a00      	cmp	r2, #0
 8004562:	f43f ac2b 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004566:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004568:	f812 5b01 	ldrb.w	r5, [r2], #1
 800456c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800456e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004570:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004572:	3a01      	subs	r2, #1
 8004574:	b292      	uxth	r2, r2
 8004576:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004578:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800457a:	b292      	uxth	r2, r2
 800457c:	2a00      	cmp	r2, #0
 800457e:	f47f ac1d 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 8004582:	2829      	cmp	r0, #41	@ 0x29
 8004584:	f47f ac1a 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004588:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800458a:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800458c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004590:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004592:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004594:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004596:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800459a:	f7ff fa8b 	bl	8003ab4 <HAL_I2C_SlaveTxCpltCallback>
 800459e:	e40d      	b.n	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	f43f ac0b 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80045a6:	0595      	lsls	r5, r2, #22
 80045a8:	f57f ac08 	bpl.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80045ac:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80045ae:	b292      	uxth	r2, r2
 80045b0:	2a00      	cmp	r2, #0
 80045b2:	f43f ac03 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80045b6:	e5a7      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045b8:	0640      	lsls	r0, r0, #25
 80045ba:	d527      	bpl.n	800460c <HAL_I2C_EV_IRQHandler+0x888>
 80045bc:	0551      	lsls	r1, r2, #21
 80045be:	d525      	bpl.n	800460c <HAL_I2C_EV_IRQHandler+0x888>
 80045c0:	bb3d      	cbnz	r5, 8004612 <HAL_I2C_EV_IRQHandler+0x88e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80045c6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c8:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80045ca:	b289      	uxth	r1, r1
 80045cc:	2900      	cmp	r1, #0
 80045ce:	f43f abf5 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d2:	6919      	ldr	r1, [r3, #16]
 80045d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045d6:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80045d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80045de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f47f abe6 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 80045f0:	2a2a      	cmp	r2, #42	@ 0x2a
 80045f2:	f47f abe3 	bne.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	6853      	ldr	r3, [r2, #4]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045fe:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004600:	2322      	movs	r3, #34	@ 0x22
 8004602:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004604:	2328      	movs	r3, #40	@ 0x28
 8004606:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 800460a:	e795      	b.n	8004538 <HAL_I2C_EV_IRQHandler+0x7b4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460c:	2d00      	cmp	r5, #0
 800460e:	f43f abd5 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
 8004612:	0592      	lsls	r2, r2, #22
 8004614:	f57f abd2 	bpl.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004618:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800461a:	b292      	uxth	r2, r2
 800461c:	2a00      	cmp	r2, #0
 800461e:	f43f abcd 	beq.w	8003dbc <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e64b      	b.n	80042c2 <HAL_I2C_EV_IRQHandler+0x53e>
 800462a:	bf00      	nop
 800462c:	08003b75 	.word	0x08003b75
 8004630:	ffff0000 	.word	0xffff0000

08004634 <HAL_I2C_ER_IRQHandler>:
{
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004636:	6803      	ldr	r3, [r0, #0]
{
 8004638:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800463a:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800463c:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800463e:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004642:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004646:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004648:	d00a      	beq.n	8004660 <HAL_I2C_ER_IRQHandler+0x2c>
 800464a:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 800464e:	d007      	beq.n	8004660 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004650:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 8004654:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004656:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800465e:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004660:	05b8      	lsls	r0, r7, #22
 8004662:	d506      	bpl.n	8004672 <HAL_I2C_ER_IRQHandler+0x3e>
 8004664:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004666:	bf42      	ittt	mi
 8004668:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
    error |= HAL_I2C_ERROR_ARLO;
 800466c:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004670:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004672:	0578      	lsls	r0, r7, #21
 8004674:	d536      	bpl.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
 8004676:	05f1      	lsls	r1, r6, #23
 8004678:	d534      	bpl.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 800467a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 800467c:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004680:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8004682:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
    tmp2 = hi2c->XferCount;
 8004686:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8004688:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800468a:	d15f      	bne.n	800474c <HAL_I2C_ER_IRQHandler+0x118>
 800468c:	2800      	cmp	r0, #0
 800468e:	d15d      	bne.n	800474c <HAL_I2C_ER_IRQHandler+0x118>
 8004690:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 8004694:	2821      	cmp	r0, #33	@ 0x21
 8004696:	d004      	beq.n	80046a2 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004698:	2928      	cmp	r1, #40	@ 0x28
 800469a:	d157      	bne.n	800474c <HAL_I2C_ER_IRQHandler+0x118>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800469c:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 80046a0:	d154      	bne.n	800474c <HAL_I2C_ER_IRQHandler+0x118>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a8:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046aa:	2908      	cmp	r1, #8
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_ER_IRQHandler+0x7e>
 80046ae:	2920      	cmp	r1, #32
 80046b0:	d12a      	bne.n	8004708 <HAL_I2C_ER_IRQHandler+0xd4>
 80046b2:	2a28      	cmp	r2, #40	@ 0x28
 80046b4:	d128      	bne.n	8004708 <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004770 <HAL_I2C_ER_IRQHandler+0x13c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 80046b8:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ba:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d0:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80046d6:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80046e0:	f7ff f9eb 	bl	8003aba <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e4:	053a      	lsls	r2, r7, #20
 80046e6:	d53f      	bpl.n	8004768 <HAL_I2C_ER_IRQHandler+0x134>
 80046e8:	05f3      	lsls	r3, r6, #23
 80046ea:	d53d      	bpl.n	8004768 <HAL_I2C_ER_IRQHandler+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046ec:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80046f0:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 80046f2:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046f6:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80046f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 80046fa:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80046fc:	432b      	orrs	r3, r5
 80046fe:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004704:	f7ff ba96 	b.w	8003c34 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004708:	2a21      	cmp	r2, #33	@ 0x21
 800470a:	d11b      	bne.n	8004744 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800470c:	4918      	ldr	r1, [pc, #96]	@ (8004770 <HAL_I2C_ER_IRQHandler+0x13c>)
 800470e:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004710:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004712:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004714:	2220      	movs	r2, #32
 8004716:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471a:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004724:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800472a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004732:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 8004738:	bf48      	it	mi
 800473a:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff f9b9 	bl	8003ab4 <HAL_I2C_SlaveTxCpltCallback>
 8004742:	e7cf      	b.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004748:	615a      	str	r2, [r3, #20]
 800474a:	e7cb      	b.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004750:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004754:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004758:	d001      	beq.n	800475e <HAL_I2C_ER_IRQHandler+0x12a>
 800475a:	2a40      	cmp	r2, #64	@ 0x40
 800475c:	d1c2      	bne.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e7bd      	b.n	80046e4 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 8004768:	2d00      	cmp	r5, #0
 800476a:	d1c5      	bne.n	80046f8 <HAL_I2C_ER_IRQHandler+0xc4>
}
 800476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476e:	bf00      	nop
 8004770:	ffff0000 	.word	0xffff0000

08004774 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004776:	4604      	mov	r4, r0
 8004778:	b1e0      	cbz	r0, 80047b4 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800477a:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800477e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004782:	b91b      	cbnz	r3, 800478c <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004784:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004788:	f004 f9b2 	bl	8008af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800478c:	2303      	movs	r3, #3
 800478e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004792:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004794:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8004796:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8004798:	f855 0b04 	ldr.w	r0, [r5], #4
 800479c:	f002 f844 	bl	8006828 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047a0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	f002 f82f 	bl	8006808 <USB_CoreInit>
 80047aa:	4601      	mov	r1, r0
 80047ac:	b128      	cbz	r0, 80047ba <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ae:	2302      	movs	r3, #2
 80047b0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80047b4:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80047b6:	4628      	mov	r0, r5
 80047b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	f002 f83e 	bl	800683c <USB_SetCurrentMode>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1f4      	bne.n	80047ae <HAL_PCD_Init+0x3a>
 80047c4:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 80047c6:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c8:	7926      	ldrb	r6, [r4, #4]
 80047ca:	f104 0310 	add.w	r3, r4, #16
 80047ce:	b2c1      	uxtb	r1, r0
 80047d0:	428e      	cmp	r6, r1
 80047d2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80047d6:	d818      	bhi.n	800480a <HAL_PCD_Init+0x96>
 80047d8:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80047da:	460a      	mov	r2, r1
 80047dc:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80047e0:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e2:	4286      	cmp	r6, r0
 80047e4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80047e8:	d81b      	bhi.n	8004822 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047ea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	f002 f826 	bl	8006840 <USB_DevInit>
 80047f4:	4605      	mov	r5, r0
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d1d9      	bne.n	80047ae <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 80047fa:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80047fc:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80047fe:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004800:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004804:	f002 fad2 	bl	8006dac <USB_DevDisconnect>
  return HAL_OK;
 8004808:	e7d5      	b.n	80047b6 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 800480a:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 800480e:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8004812:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004816:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 800481a:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481e:	3001      	adds	r0, #1
 8004820:	e7d5      	b.n	80047ce <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004822:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8004826:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 800482a:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800482e:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004832:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004836:	3101      	adds	r1, #1
 8004838:	e7d2      	b.n	80047e0 <HAL_PCD_Init+0x6c>

0800483a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800483a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800483c:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8004840:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004842:	2b01      	cmp	r3, #1
 8004844:	d010      	beq.n	8004868 <HAL_PCD_Start+0x2e>
 8004846:	2501      	movs	r5, #1
 8004848:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f001 ffe2 	bl	8006816 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004852:	4629      	mov	r1, r5
 8004854:	4620      	mov	r0, r4
 8004856:	f004 fa5a 	bl	8008d0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800485a:	6820      	ldr	r0, [r4, #0]
 800485c:	f002 faa4 	bl	8006da8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004860:	2000      	movs	r0, #0
 8004862:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8004866:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004868:	2002      	movs	r0, #2
 800486a:	e7fc      	b.n	8004866 <HAL_PCD_Start+0x2c>

0800486c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800486c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800486e:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8004872:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004874:	2a01      	cmp	r2, #1
 8004876:	d00a      	beq.n	800488e <HAL_PCD_SetAddress+0x22>
 8004878:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800487a:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 800487c:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	f002 fa8b 	bl	8006d9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004886:	2000      	movs	r0, #0
 8004888:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 800488c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800488e:	2002      	movs	r0, #2
 8004890:	e7fc      	b.n	800488c <HAL_PCD_SetAddress+0x20>
	...

08004894 <HAL_PCD_IRQHandler>:
{
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800489c:	6800      	ldr	r0, [r0, #0]
 800489e:	f002 fa87 	bl	8006db0 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80048a2:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 80048a6:	f000 844f 	beq.w	8005148 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 80048aa:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048ac:	4ec6      	ldr	r6, [pc, #792]	@ (8004bc8 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048ae:	6820      	ldr	r0, [r4, #0]
 80048b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80048b4:	041f      	lsls	r7, r3, #16
 80048b6:	d402      	bmi.n	80048be <HAL_PCD_IRQHandler+0x2a>
}
 80048b8:	b005      	add	sp, #20
 80048ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80048be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 80048c2:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 80048c6:	b299      	uxth	r1, r3
    if (epindex == 0U)
 80048c8:	f040 80c0 	bne.w	8004a4c <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048cc:	f011 0110 	ands.w	r1, r1, #16
 80048d0:	d126      	bne.n	8004920 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048d2:	8803      	ldrh	r3, [r0, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4033      	ands	r3, r6
 80048d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048dc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80048e2:	7c22      	ldrb	r2, [r4, #16]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80048ee:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 80048f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80048f8:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80048fc:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 80048fe:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004900:	f004 f92d 	bl	8008b5e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004904:	7b63      	ldrb	r3, [r4, #13]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0d1      	beq.n	80048ae <HAL_PCD_IRQHandler+0x1a>
 800490a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800490c:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800490e:	2a00      	cmp	r2, #0
 8004910:	d1cd      	bne.n	80048ae <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004912:	7b63      	ldrb	r3, [r4, #13]
 8004914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004918:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800491c:	7362      	strb	r2, [r4, #13]
 800491e:	e7c6      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004920:	8807      	ldrh	r7, [r0, #0]
 8004922:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004924:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8004928:	d021      	beq.n	800496e <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800492a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800492e:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8004932:	b29b      	uxth	r3, r3
 8004934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004938:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800493c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004940:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8004944:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004948:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800494c:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8004950:	f002 fc79 	bl	8007246 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004954:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004956:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004958:	8813      	ldrh	r3, [r2, #0]
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	051b      	lsls	r3, r3, #20
 8004960:	0d1b      	lsrs	r3, r3, #20
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004968:	f004 f8ea 	bl	8008b40 <HAL_PCD_SetupStageCallback>
 800496c:	e79f      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800496e:	0419      	lsls	r1, r3, #16
 8004970:	d59d      	bpl.n	80048ae <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004972:	8803      	ldrh	r3, [r0, #0]
 8004974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004978:	051b      	lsls	r3, r3, #20
 800497a:	0d1b      	lsrs	r3, r3, #20
 800497c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004980:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004982:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004986:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800498a:	b29b      	uxth	r3, r3
 800498c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004990:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004994:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8004998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800499c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80049a0:	b18b      	cbz	r3, 80049c6 <HAL_PCD_IRQHandler+0x132>
 80049a2:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 80049a6:	b171      	cbz	r1, 80049c6 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049a8:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80049ac:	f002 fc4b 	bl	8007246 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80049b0:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80049b4:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049b8:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 80049ba:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049bc:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80049be:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049c2:	f004 f8c3 	bl	8008b4c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	880a      	ldrh	r2, [r1, #0]
 80049ca:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80049cc:	0512      	lsls	r2, r2, #20
 80049ce:	f53f af6e 	bmi.w	80048ae <HAL_PCD_IRQHandler+0x1a>
 80049d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049da:	f43f af68 	beq.w	80048ae <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049de:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80049e2:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 80049e6:	b292      	uxth	r2, r2
 80049e8:	5a83      	ldrh	r3, [r0, r2]
 80049ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ee:	5283      	strh	r3, [r0, r2]
 80049f0:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 80049f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80049f6:	d91d      	bls.n	8004a34 <HAL_PCD_IRQHandler+0x1a0>
 80049f8:	095f      	lsrs	r7, r3, #5
 80049fa:	06db      	lsls	r3, r3, #27
 80049fc:	5a83      	ldrh	r3, [r0, r2]
 80049fe:	bf08      	it	eq
 8004a00:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8004a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a16:	880b      	ldrh	r3, [r1, #0]
 8004a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a30:	800b      	strh	r3, [r1, #0]
 8004a32:	e73c      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a34:	b90b      	cbnz	r3, 8004a3a <HAL_PCD_IRQHandler+0x1a6>
 8004a36:	5a83      	ldrh	r3, [r0, r2]
 8004a38:	e7e7      	b.n	8004a0a <HAL_PCD_IRQHandler+0x176>
 8004a3a:	085f      	lsrs	r7, r3, #1
 8004a3c:	07db      	lsls	r3, r3, #31
 8004a3e:	5a83      	ldrh	r3, [r0, r2]
 8004a40:	bf48      	it	mi
 8004a42:	3701      	addmi	r7, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8004a4a:	e7e2      	b.n	8004a12 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a4c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a50:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a52:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a56:	f140 80f6 	bpl.w	8004c46 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a5a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8004a5e:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	051b      	lsls	r3, r3, #20
 8004a68:	0d1b      	lsrs	r3, r3, #20
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6e:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8004a72:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8004a76:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8004a7a:	b9bb      	cbnz	r3, 8004aac <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004a80:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3306      	adds	r3, #6
 8004a88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a8c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004a90:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8004a94:	f1b9 0f00 	cmp.w	r9, #0
 8004a98:	f000 80ba 	beq.w	8004c10 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004aa2:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004aa6:	f002 fbce 	bl	8007246 <USB_ReadPMA>
 8004aaa:	e0b1      	b.n	8004c10 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8004aac:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ab0:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f040 8089 	bne.w	8004bcc <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004aba:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8004abe:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8004ac2:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ac6:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8004aca:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ace:	44d9      	add	r9, fp
 8004ad0:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad4:	d03c      	beq.n	8004b50 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ad6:	f109 0902 	add.w	r9, r9, #2
 8004ada:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8004ade:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8004ae2:	4599      	cmp	r9, r3
 8004ae4:	d913      	bls.n	8004b0e <HAL_PCD_IRQHandler+0x27a>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004af0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004af4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b08:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b0c:	e005      	b.n	8004b1a <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8004b0e:	eba3 0309 	sub.w	r3, r3, r9
 8004b12:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0e8      	beq.n	8004aec <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b1a:	f1bc 0f00 	cmp.w	ip, #0
 8004b1e:	d00d      	beq.n	8004b3c <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004b3c:	f1b9 0f00 	cmp.w	r9, #0
 8004b40:	d066      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b42:	2128      	movs	r1, #40	@ 0x28
 8004b44:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b48:	464b      	mov	r3, r9
 8004b4a:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8004b4e:	e7a8      	b.n	8004aa2 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b50:	f109 0906 	add.w	r9, r9, #6
 8004b54:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8004b58:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8004b5c:	4599      	cmp	r9, r3
 8004b5e:	d912      	bls.n	8004b86 <HAL_PCD_IRQHandler+0x2f2>
 8004b60:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b84:	e005      	b.n	8004b92 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8004b86:	eba3 0309 	sub.w	r3, r3, r9
 8004b8a:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0e8      	beq.n	8004b64 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b92:	f1bc 0f00 	cmp.w	ip, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004bb4:	f1b9 0f00 	cmp.w	r9, #0
 8004bb8:	d02a      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bba:	2128      	movs	r1, #40	@ 0x28
 8004bbc:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004bc6:	e76c      	b.n	8004aa2 <HAL_PCD_IRQHandler+0x20e>
 8004bc8:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004be4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004be8:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8004bec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bf6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004bfa:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004bfc:	d054      	beq.n	8004ca8 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bfe:	3202      	adds	r2, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004c06:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8004c0a:	f1b9 0f00 	cmp.w	r9, #0
 8004c0e:	d19b      	bne.n	8004b48 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8004c10:	fb05 f107 	mul.w	r1, r5, r7
 8004c14:	1863      	adds	r3, r4, r1
 8004c16:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004c1a:	444a      	add	r2, r9
 8004c1c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8004c20:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8004c24:	444a      	add	r2, r9
 8004c26:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c2a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8004c2e:	b11a      	cbz	r2, 8004c38 <HAL_PCD_IRQHandler+0x3a4>
 8004c30:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004c34:	4599      	cmp	r9, r3
 8004c36:	d241      	bcs.n	8004cbc <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c38:	fb05 4307 	mla	r3, r5, r7, r4
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8004c42:	f003 ff83 	bl	8008b4c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c46:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c4a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c4c:	f43f ae2f 	beq.w	80048ae <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c50:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004c54:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4033      	ands	r3, r6
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c60:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004c64:	eb04 030c 	add.w	r3, r4, ip
 8004c68:	7cda      	ldrb	r2, [r3, #19]
 8004c6a:	2a01      	cmp	r2, #1
 8004c6c:	d156      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8004c6e:	2100      	movs	r1, #0
 8004c70:	fb07 5205 	mla	r2, r7, r5, r5
 8004c74:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8004c76:	7f1a      	ldrb	r2, [r3, #28]
 8004c78:	b392      	cbz	r2, 8004ce0 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c7a:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c7e:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c80:	d036      	beq.n	8004cf0 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c82:	bb12      	cbnz	r2, 8004cca <HAL_PCD_IRQHandler+0x436>
 8004c84:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004c88:	7c1b      	ldrb	r3, [r3, #16]
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c92:	4410      	add	r0, r2
 8004c94:	5a1a      	ldrh	r2, [r3, r0]
 8004c96:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c9a:	521a      	strh	r2, [r3, r0]
 8004c9c:	5a1a      	ldrh	r2, [r3, r0]
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ca4:	521a      	strh	r2, [r3, r0]
 8004ca6:	e01b      	b.n	8004ce0 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ca8:	3206      	adds	r2, #6
 8004caa:	4413      	add	r3, r2
 8004cac:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004cb0:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8004cb4:	f1b9 0f00 	cmp.w	r9, #0
 8004cb8:	d0aa      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x37c>
 8004cba:	e781      	b.n	8004bc0 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8004cbc:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	4421      	add	r1, r4
 8004cc4:	f002 f88a 	bl	8006ddc <USB_EPStartXfer>
 8004cc8:	e7bd      	b.n	8004c46 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cca:	2a01      	cmp	r2, #1
 8004ccc:	d108      	bne.n	8004ce0 <HAL_PCD_IRQHandler+0x44c>
 8004cce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004cd2:	7c1b      	ldrb	r3, [r3, #16]
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	4410      	add	r0, r2
 8004cde:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ce0:	2328      	movs	r3, #40	@ 0x28
 8004ce2:	fb03 4307 	mla	r3, r3, r7, r4
 8004ce6:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f003 ff38 	bl	8008b5e <HAL_PCD_DataInStageCallback>
 8004cee:	e5de      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cf0:	b93a      	cbnz	r2, 8004d02 <HAL_PCD_IRQHandler+0x46e>
 8004cf2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004cf6:	7c1b      	ldrb	r3, [r3, #16]
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004d00:	e7c7      	b.n	8004c92 <HAL_PCD_IRQHandler+0x3fe>
 8004d02:	2a01      	cmp	r2, #1
 8004d04:	d1ec      	bne.n	8004ce0 <HAL_PCD_IRQHandler+0x44c>
 8004d06:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004d0a:	7c1b      	ldrb	r3, [r3, #16]
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4410      	add	r0, r2
 8004d16:	f823 8000 	strh.w	r8, [r3, r0]
 8004d1a:	e7e1      	b.n	8004ce0 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d1c:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004d1e:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8004d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d24:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004d28:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004d2c:	d11b      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d2e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8004d32:	b2bf      	uxth	r7, r7
 8004d34:	4457      	add	r7, sl
 8004d36:	3702      	adds	r7, #2
 8004d38:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8004d3c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004d40:	4297      	cmp	r7, r2
 8004d42:	d302      	bcc.n	8004d4a <HAL_PCD_IRQHandler+0x4b6>
 8004d44:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8004d48:	e7ce      	b.n	8004ce8 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8004d4a:	1bd2      	subs	r2, r2, r7
 8004d4c:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8004d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8004d50:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8004d54:	443a      	add	r2, r7
 8004d56:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d5a:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8004d5c:	443a      	add	r2, r7
 8004d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d60:	f002 f83c 	bl	8006ddc <USB_EPStartXfer>
 8004d64:	e5a3      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d66:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d6a:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d6e:	fa1f fc8c 	uxth.w	ip, ip
 8004d72:	44d4      	add	ip, sl
 8004d74:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d78:	f000 80f4 	beq.w	8004f64 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d7c:	f10c 0c02 	add.w	ip, ip, #2
 8004d80:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8004d84:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8004d88:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004d8c:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8004d8e:	bf2c      	ite	cs
 8004d90:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8004d92:	eba2 020c 	subcc.w	r2, r2, ip
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	d15b      	bne.n	8004e54 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d9c:	2328      	movs	r3, #40	@ 0x28
 8004d9e:	fb03 4307 	mla	r3, r3, r7, r4
 8004da2:	7c5b      	ldrb	r3, [r3, #17]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d141      	bne.n	8004e2c <HAL_PCD_IRQHandler+0x598>
 8004da8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004dac:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004db0:	b292      	uxth	r2, r2
 8004db2:	010b      	lsls	r3, r1, #4
 8004db4:	4494      	add	ip, r2
 8004db6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004dba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004dbe:	f82c 2003 	strh.w	r2, [ip, r3]
 8004dc2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004dc6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004dca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dd4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004dd8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004ddc:	b292      	uxth	r2, r2
 8004dde:	4410      	add	r0, r2
 8004de0:	5ac2      	ldrh	r2, [r0, r3]
 8004de2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004de6:	52c2      	strh	r2, [r0, r3]
 8004de8:	5ac2      	ldrh	r2, [r0, r3]
 8004dea:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004dee:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004df2:	b292      	uxth	r2, r2
 8004df4:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f003 feb1 	bl	8008b5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004dfc:	f1b8 0f00 	cmp.w	r8, #0
 8004e00:	f000 80f4 	beq.w	8004fec <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e04:	2328      	movs	r3, #40	@ 0x28
 8004e06:	fb03 4307 	mla	r3, r3, r7, r4
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	7c19      	ldrb	r1, [r3, #16]
 8004e0e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e26:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004e2a:	e0df      	b.n	8004fec <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d1e2      	bne.n	8004df6 <HAL_PCD_IRQHandler+0x562>
 8004e30:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004e34:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004e38:	fa1f fe8e 	uxth.w	lr, lr
 8004e3c:	44f4      	add	ip, lr
 8004e3e:	010b      	lsls	r3, r1, #4
 8004e40:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e44:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004e48:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004e4c:	fa1f fc8c 	uxth.w	ip, ip
 8004e50:	4460      	add	r0, ip
 8004e52:	e7cf      	b.n	8004df4 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e54:	f1b8 0f00 	cmp.w	r8, #0
 8004e58:	d00d      	beq.n	8004e76 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e5a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004e5e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004e62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004e66:	0412      	lsls	r2, r2, #16
 8004e68:	0c12      	lsrs	r2, r2, #16
 8004e6a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004e6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e72:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004e76:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8004e7a:	fb08 4807 	mla	r8, r8, r7, r4
 8004e7e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8004e82:	2a01      	cmp	r2, #1
 8004e84:	f040 80b2 	bne.w	8004fec <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8004e88:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8004e8c:	eb02 0e0c 	add.w	lr, r2, ip
 8004e90:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8004e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e96:	4462      	add	r2, ip
 8004e98:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e9a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8004e9e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d335      	bcc.n	8004f12 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004eac:	2328      	movs	r3, #40	@ 0x28
 8004eae:	fb03 4307 	mla	r3, r3, r7, r4
 8004eb2:	f893 c011 	ldrb.w	ip, [r3, #17]
 8004eb6:	b293      	uxth	r3, r2
 8004eb8:	f1bc 0f00 	cmp.w	ip, #0
 8004ebc:	d145      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x6b6>
 8004ebe:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8004ec2:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004ec6:	fa1f f888 	uxth.w	r8, r8
 8004eca:	44c4      	add	ip, r8
 8004ecc:	0109      	lsls	r1, r1, #4
 8004ece:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004ed2:	2a3e      	cmp	r2, #62	@ 0x3e
 8004ed4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004ed8:	f82c 8001 	strh.w	r8, [ip, r1]
 8004edc:	d925      	bls.n	8004f2a <HAL_PCD_IRQHandler+0x696>
 8004ede:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004ee2:	06d2      	lsls	r2, r2, #27
 8004ee4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004ee8:	bf08      	it	eq
 8004eea:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004ef4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004ef8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004efc:	b292      	uxth	r2, r2
 8004efe:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f02:	2228      	movs	r2, #40	@ 0x28
 8004f04:	fb02 4207 	mla	r2, r2, r7, r4
 8004f08:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f0a:	4671      	mov	r1, lr
 8004f0c:	f001 ff56 	bl	8006dbc <USB_WritePMA>
 8004f10:	e06c      	b.n	8004fec <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8004f12:	b91b      	cbnz	r3, 8004f1c <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8004f14:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8004f16:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8004f1a:	e7c7      	b.n	8004eac <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8004f22:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8004f26:	461a      	mov	r2, r3
 8004f28:	e7c0      	b.n	8004eac <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f2a:	b912      	cbnz	r2, 8004f32 <HAL_PCD_IRQHandler+0x69e>
 8004f2c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004f30:	e7e0      	b.n	8004ef4 <HAL_PCD_IRQHandler+0x660>
 8004f32:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8004f36:	07d2      	lsls	r2, r2, #31
 8004f38:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004f3c:	bf48      	it	mi
 8004f3e:	f108 0801 	addmi.w	r8, r8, #1
 8004f42:	b292      	uxth	r2, r2
 8004f44:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004f48:	e7d8      	b.n	8004efc <HAL_PCD_IRQHandler+0x668>
 8004f4a:	f1bc 0f01 	cmp.w	ip, #1
 8004f4e:	d1d8      	bne.n	8004f02 <HAL_PCD_IRQHandler+0x66e>
 8004f50:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004f54:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8004f58:	fa1f fc8c 	uxth.w	ip, ip
 8004f5c:	4462      	add	r2, ip
 8004f5e:	0109      	lsls	r1, r1, #4
 8004f60:	5253      	strh	r3, [r2, r1]
 8004f62:	e7ce      	b.n	8004f02 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f64:	f10c 0c06 	add.w	ip, ip, #6
 8004f68:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8004f6c:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8004f70:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004f74:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8004f76:	bf8c      	ite	hi
 8004f78:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8004f7a:	eba2 020c 	subls.w	r2, r2, ip
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	d15d      	bne.n	8005040 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f84:	2328      	movs	r3, #40	@ 0x28
 8004f86:	fb03 4307 	mla	r3, r3, r7, r4
 8004f8a:	7c5b      	ldrb	r3, [r3, #17]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d143      	bne.n	8005018 <HAL_PCD_IRQHandler+0x784>
 8004f90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004f94:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	010b      	lsls	r3, r1, #4
 8004f9c:	4494      	add	ip, r2
 8004f9e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004fa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fa6:	f82c 2003 	strh.w	r2, [ip, r3]
 8004faa:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004fae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fb2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fbc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004fc0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004fc4:	b292      	uxth	r2, r2
 8004fc6:	4410      	add	r0, r2
 8004fc8:	5ac2      	ldrh	r2, [r0, r3]
 8004fca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fce:	52c2      	strh	r2, [r0, r3]
 8004fd0:	5ac2      	ldrh	r2, [r0, r3]
 8004fd2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fd6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f003 fdbd 	bl	8008b5e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fe4:	f1b8 0f00 	cmp.w	r8, #0
 8004fe8:	f43f af0c 	beq.w	8004e04 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004fec:	2328      	movs	r3, #40	@ 0x28
 8004fee:	fb03 4307 	mla	r3, r3, r7, r4
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	7c19      	ldrb	r1, [r3, #16]
 8004ff6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800500a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800500e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005012:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8005016:	e44a      	b.n	80048ae <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005018:	2b01      	cmp	r3, #1
 800501a:	d1e0      	bne.n	8004fde <HAL_PCD_IRQHandler+0x74a>
 800501c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8005020:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005024:	fa1f fe8e 	uxth.w	lr, lr
 8005028:	44f4      	add	ip, lr
 800502a:	010b      	lsls	r3, r1, #4
 800502c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005030:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005034:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005038:	fa1f fc8c 	uxth.w	ip, ip
 800503c:	4460      	add	r0, ip
 800503e:	e7cd      	b.n	8004fdc <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005040:	f1b8 0f00 	cmp.w	r8, #0
 8005044:	d10d      	bne.n	8005062 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005046:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800504a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800504e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005052:	0412      	lsls	r2, r2, #16
 8005054:	0c12      	lsrs	r2, r2, #16
 8005056:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800505a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800505e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005062:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8005066:	fb08 4807 	mla	r8, r8, r7, r4
 800506a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800506e:	2a01      	cmp	r2, #1
 8005070:	d1bc      	bne.n	8004fec <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8005072:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8005076:	eb02 0e0c 	add.w	lr, r2, ip
 800507a:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	4462      	add	r2, ip
 8005082:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005084:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8005088:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800508c:	4293      	cmp	r3, r2
 800508e:	d332      	bcc.n	80050f6 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005096:	2328      	movs	r3, #40	@ 0x28
 8005098:	fb03 4307 	mla	r3, r3, r7, r4
 800509c:	f893 c011 	ldrb.w	ip, [r3, #17]
 80050a0:	b293      	uxth	r3, r2
 80050a2:	f1bc 0f00 	cmp.w	ip, #0
 80050a6:	d142      	bne.n	800512e <HAL_PCD_IRQHandler+0x89a>
 80050a8:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80050ac:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80050b0:	fa1f f888 	uxth.w	r8, r8
 80050b4:	44c4      	add	ip, r8
 80050b6:	0109      	lsls	r1, r1, #4
 80050b8:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80050bc:	2a3e      	cmp	r2, #62	@ 0x3e
 80050be:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80050c2:	f82c 8001 	strh.w	r8, [ip, r1]
 80050c6:	d922      	bls.n	800510e <HAL_PCD_IRQHandler+0x87a>
 80050c8:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80050cc:	06d2      	lsls	r2, r2, #27
 80050ce:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80050d2:	bf08      	it	eq
 80050d4:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80050d8:	b292      	uxth	r2, r2
 80050da:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80050de:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80050e2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80050e6:	b292      	uxth	r2, r2
 80050e8:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050ec:	2228      	movs	r2, #40	@ 0x28
 80050ee:	fb02 4207 	mla	r2, r2, r7, r4
 80050f2:	8b52      	ldrh	r2, [r2, #26]
 80050f4:	e709      	b.n	8004f0a <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80050f6:	b91b      	cbnz	r3, 8005100 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 80050f8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80050fa:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80050fe:	e7ca      	b.n	8005096 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8005100:	2200      	movs	r2, #0
 8005102:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8005106:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 800510a:	461a      	mov	r2, r3
 800510c:	e7c3      	b.n	8005096 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800510e:	b912      	cbnz	r2, 8005116 <HAL_PCD_IRQHandler+0x882>
 8005110:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005114:	e7e3      	b.n	80050de <HAL_PCD_IRQHandler+0x84a>
 8005116:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800511a:	07d2      	lsls	r2, r2, #31
 800511c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005120:	bf48      	it	mi
 8005122:	f108 0801 	addmi.w	r8, r8, #1
 8005126:	b292      	uxth	r2, r2
 8005128:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800512c:	e7db      	b.n	80050e6 <HAL_PCD_IRQHandler+0x852>
 800512e:	f1bc 0f01 	cmp.w	ip, #1
 8005132:	d1db      	bne.n	80050ec <HAL_PCD_IRQHandler+0x858>
 8005134:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005138:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 800513c:	b292      	uxth	r2, r2
 800513e:	4494      	add	ip, r2
 8005140:	010a      	lsls	r2, r1, #4
 8005142:	f82c 3002 	strh.w	r3, [ip, r2]
 8005146:	e7d1      	b.n	80050ec <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005148:	0546      	lsls	r6, r0, #21
 800514a:	d512      	bpl.n	8005172 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800514c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800514e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005150:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005154:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	0c1b      	lsrs	r3, r3, #16
 800515c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005160:	f003 fd09 	bl	8008b76 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005164:	4629      	mov	r1, r5
 8005166:	4620      	mov	r0, r4
}
 8005168:	b005      	add	sp, #20
 800516a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800516e:	f7ff bb7d 	b.w	800486c <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005172:	0441      	lsls	r1, r0, #17
 8005174:	d50a      	bpl.n	800518c <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800517c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005188:	f7ff bb96 	b.w	80048b8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800518c:	0482      	lsls	r2, r0, #18
 800518e:	d505      	bpl.n	800519c <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800519a:	e7f1      	b.n	8005180 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800519c:	04c3      	lsls	r3, r0, #19
 800519e:	d519      	bpl.n	80051d4 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80051a0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80051a2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80051a4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80051b4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80051b8:	f023 0308 	bic.w	r3, r3, #8
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	0c1b      	lsrs	r3, r3, #16
 80051c0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80051c4:	f003 fcfa 	bl	8008bbc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80051ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051d2:	e7d5      	b.n	8005180 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80051d4:	0507      	lsls	r7, r0, #20
 80051d6:	d548      	bpl.n	800526a <HAL_PCD_IRQHandler+0x9d6>
 80051d8:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	4606      	mov	r6, r0
 80051de:	4619      	mov	r1, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	f103 0520 	add.w	r5, r3, #32
 80051e6:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80051ea:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80051ec:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80051f0:	d1f9      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80051f2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80051f6:	b292      	uxth	r2, r2
 80051f8:	f042 0201 	orr.w	r2, r2, #1
 80051fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005200:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	0412      	lsls	r2, r2, #16
 800520a:	0c12      	lsrs	r2, r2, #16
 800520c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005210:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005214:	0556      	lsls	r6, r2, #21
 8005216:	d5fb      	bpl.n	8005210 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005218:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800521c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005220:	0412      	lsls	r2, r2, #16
 8005222:	0c12      	lsrs	r2, r2, #16
 8005224:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005228:	f830 2b02 	ldrh.w	r2, [r0], #2
 800522c:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8005230:	428d      	cmp	r5, r1
 8005232:	d1f9      	bne.n	8005228 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005234:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005238:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800523a:	b292      	uxth	r2, r2
 800523c:	f042 0208 	orr.w	r2, r2, #8
 8005240:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005244:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800524c:	0412      	lsls	r2, r2, #16
 800524e:	0c12      	lsrs	r2, r2, #16
 8005250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005254:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005258:	b292      	uxth	r2, r2
 800525a:	f042 0204 	orr.w	r2, r2, #4
 800525e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005262:	f003 fc9b 	bl	8008b9c <HAL_PCD_SuspendCallback>
    return;
 8005266:	f7ff bb27 	b.w	80048b8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800526a:	0582      	lsls	r2, r0, #22
 800526c:	d50d      	bpl.n	800528a <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800526e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005270:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005272:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005276:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005282:	f003 fc74 	bl	8008b6e <HAL_PCD_SOFCallback>
    return;
 8005286:	f7ff bb17 	b.w	80048b8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800528a:	05c3      	lsls	r3, r0, #23
 800528c:	f57f ab14 	bpl.w	80048b8 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005290:	6822      	ldr	r2, [r4, #0]
 8005292:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529a:	e771      	b.n	8005180 <HAL_PCD_IRQHandler+0x8ec>

0800529c <HAL_PCD_EP_Open>:
{
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	2428      	movs	r4, #40	@ 0x28
 80052a0:	4605      	mov	r5, r0
 80052a2:	f001 0007 	and.w	r0, r1, #7
 80052a6:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80052a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ac:	bf14      	ite	ne
 80052ae:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b2:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80052b6:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80052ba:	bf15      	itete	ne
 80052bc:	2401      	movne	r4, #1
    ep->is_in = 0U;
 80052be:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 80052c0:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 80052c2:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c6:	bf14      	ite	ne
 80052c8:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ca:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 80052cc:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80052ce:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80052d0:	bf08      	it	eq
 80052d2:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d4:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80052d6:	bf08      	it	eq
 80052d8:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80052da:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80052dc:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d009      	beq.n	80052f8 <HAL_PCD_EP_Open+0x5c>
 80052e4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052e6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80052e8:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052ec:	f001 faba 	bl	8006864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052f0:	2000      	movs	r0, #0
 80052f2:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80052f8:	2002      	movs	r0, #2
 80052fa:	e7fc      	b.n	80052f6 <HAL_PCD_EP_Open+0x5a>

080052fc <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80052fc:	2328      	movs	r3, #40	@ 0x28
 80052fe:	f001 0207 	and.w	r2, r1, #7
 8005302:	4353      	muls	r3, r2
 8005304:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800530c:	bf18      	it	ne
 800530e:	f103 0110 	addne.w	r1, r3, #16
 8005312:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005314:	bf0b      	itete	eq
 8005316:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 800531a:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800531c:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800531e:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005320:	bf0a      	itet	eq
 8005322:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8005324:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8005326:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800532a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800532c:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8005330:	2b01      	cmp	r3, #1
 8005332:	d009      	beq.n	8005348 <HAL_PCD_EP_Close+0x4c>
 8005334:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005336:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005338:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800533c:	f001 fbf2 	bl	8006b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005340:	2000      	movs	r0, #0
 8005342:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8005346:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005348:	2002      	movs	r0, #2
 800534a:	e7fc      	b.n	8005346 <HAL_PCD_EP_Close+0x4a>

0800534c <HAL_PCD_EP_Receive>:
{
 800534c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800534e:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8005350:	2600      	movs	r6, #0
 8005352:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8005356:	434c      	muls	r4, r1
 8005358:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800535a:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535e:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005362:	4401      	add	r1, r0
  ep->xfer_len = len;
 8005364:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8005368:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 800536c:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005370:	6800      	ldr	r0, [r0, #0]
 8005372:	f001 fd33 	bl	8006ddc <USB_EPStartXfer>
}
 8005376:	4630      	mov	r0, r6
 8005378:	bd70      	pop	{r4, r5, r6, pc}

0800537a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800537a:	2328      	movs	r3, #40	@ 0x28
 800537c:	f001 0107 	and.w	r1, r1, #7
 8005380:	fb03 0001 	mla	r0, r3, r1, r0
}
 8005384:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8005388:	4770      	bx	lr

0800538a <HAL_PCD_EP_Transmit>:
{
 800538a:	b570      	push	{r4, r5, r6, lr}
 800538c:	2528      	movs	r5, #40	@ 0x28
 800538e:	f001 0107 	and.w	r1, r1, #7
 8005392:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8005394:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8005396:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8005398:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 800539c:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800539e:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a0:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053a4:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80053a6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80053aa:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80053ac:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80053ae:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f001 fd13 	bl	8006ddc <USB_EPStartXfer>
}
 80053b6:	4630      	mov	r0, r6
 80053b8:	bd70      	pop	{r4, r5, r6, pc}

080053ba <HAL_PCD_EP_SetStall>:
{
 80053ba:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053bc:	7903      	ldrb	r3, [r0, #4]
 80053be:	f001 0507 	and.w	r5, r1, #7
 80053c2:	42ab      	cmp	r3, r5
{
 80053c4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053c6:	d32a      	bcc.n	800541e <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80053c8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80053cc:	f04f 0328 	mov.w	r3, #40	@ 0x28
 80053d0:	d01c      	beq.n	800540c <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 80053d2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053d4:	436b      	muls	r3, r5
 80053d6:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 80053da:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	4401      	add	r1, r0
    ep->is_in = 1U;
 80053de:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 80053e0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80053e4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80053e6:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d019      	beq.n	8005422 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80053f0:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053f4:	f001 fc69 	bl	8006cca <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053f8:	b925      	cbnz	r5, 8005404 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8005400:	f001 fcda 	bl	8006db8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8005404:	2000      	movs	r0, #0
 8005406:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800540a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800540c:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800540e:	434b      	muls	r3, r1
 8005410:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8005414:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005416:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005418:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 800541c:	e7e0      	b.n	80053e0 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 800541e:	2001      	movs	r0, #1
 8005420:	e7f3      	b.n	800540a <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8005422:	2002      	movs	r0, #2
 8005424:	e7f1      	b.n	800540a <HAL_PCD_EP_SetStall+0x50>

08005426 <HAL_PCD_EP_ClrStall>:
{
 8005426:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005428:	7902      	ldrb	r2, [r0, #4]
 800542a:	f001 030f 	and.w	r3, r1, #15
 800542e:	429a      	cmp	r2, r3
{
 8005430:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005432:	d326      	bcc.n	8005482 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8005434:	2328      	movs	r3, #40	@ 0x28
 8005436:	f001 0207 	and.w	r2, r1, #7
 800543a:	4353      	muls	r3, r2
 800543c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005440:	bf14      	ite	ne
 8005442:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005446:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800544a:	4418      	add	r0, r3
  ep->is_stall = 0U;
 800544c:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8005450:	bf15      	itete	ne
 8005452:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8005454:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005456:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005458:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800545a:	bf14      	ite	ne
 800545c:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800545e:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8005462:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005464:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005466:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800546a:	2b01      	cmp	r3, #1
 800546c:	d00b      	beq.n	8005486 <HAL_PCD_EP_ClrStall+0x60>
 800546e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005470:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005472:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005476:	f001 fc48 	bl	8006d0a <USB_EPClearStall>
  return HAL_OK;
 800547a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800547c:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8005480:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005482:	2001      	movs	r0, #1
 8005484:	e7fc      	b.n	8005480 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8005486:	2002      	movs	r0, #2
 8005488:	e7fa      	b.n	8005480 <HAL_PCD_EP_ClrStall+0x5a>

0800548a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800548a:	b510      	push	{r4, lr}
 800548c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800548e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005492:	bf1b      	ittet	ne
 8005494:	f001 0107 	andne.w	r1, r1, #7
 8005498:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800549c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a0:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80054a2:	bf08      	it	eq
 80054a4:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80054a8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80054aa:	b91a      	cbnz	r2, 80054b4 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80054ac:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80054ae:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80054b0:	2000      	movs	r0, #0
 80054b2:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80054b4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80054b6:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80054b8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80054ba:	e7f9      	b.n	80054b0 <HAL_PCDEx_PMAConfig+0x26>

080054bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054c0:	4605      	mov	r5, r0
 80054c2:	b338      	cbz	r0, 8005514 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c4:	6803      	ldr	r3, [r0, #0]
 80054c6:	07db      	lsls	r3, r3, #31
 80054c8:	d410      	bmi.n	80054ec <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	079f      	lsls	r7, r3, #30
 80054ce:	d45e      	bmi.n	800558e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	0719      	lsls	r1, r3, #28
 80054d4:	f100 8095 	bmi.w	8005602 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	075a      	lsls	r2, r3, #29
 80054dc:	f100 80c1 	bmi.w	8005662 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e0:	69eb      	ldr	r3, [r5, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f040 812c 	bne.w	8005740 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80054e8:	2000      	movs	r0, #0
 80054ea:	e029      	b.n	8005540 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054ec:	4c90      	ldr	r4, [pc, #576]	@ (8005730 <HAL_RCC_OscConfig+0x274>)
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d007      	beq.n	8005508 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d10a      	bne.n	8005518 <HAL_RCC_OscConfig+0x5c>
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	03de      	lsls	r6, r3, #15
 8005506:	d507      	bpl.n	8005518 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	039c      	lsls	r4, r3, #14
 800550c:	d5dd      	bpl.n	80054ca <HAL_RCC_OscConfig+0xe>
 800550e:	686b      	ldr	r3, [r5, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1da      	bne.n	80054ca <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005514:	2001      	movs	r0, #1
 8005516:	e013      	b.n	8005540 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005518:	686b      	ldr	r3, [r5, #4]
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551e:	d112      	bne.n	8005546 <HAL_RCC_OscConfig+0x8a>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005528:	f7fd fabc 	bl	8002aa4 <HAL_GetTick>
 800552c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	0398      	lsls	r0, r3, #14
 8005532:	d4ca      	bmi.n	80054ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fd fab6 	bl	8002aa4 <HAL_GetTick>
 8005538:	1b80      	subs	r0, r0, r6
 800553a:	2864      	cmp	r0, #100	@ 0x64
 800553c:	d9f7      	bls.n	800552e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800553e:	2003      	movs	r0, #3
}
 8005540:	b002      	add	sp, #8
 8005542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005546:	b99b      	cbnz	r3, 8005570 <HAL_RCC_OscConfig+0xb4>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005556:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005558:	f7fd faa4 	bl	8002aa4 <HAL_GetTick>
 800555c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	0399      	lsls	r1, r3, #14
 8005562:	d5b2      	bpl.n	80054ca <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005564:	f7fd fa9e 	bl	8002aa4 <HAL_GetTick>
 8005568:	1b80      	subs	r0, r0, r6
 800556a:	2864      	cmp	r0, #100	@ 0x64
 800556c:	d9f7      	bls.n	800555e <HAL_RCC_OscConfig+0xa2>
 800556e:	e7e6      	b.n	800553e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	d103      	bne.n	8005580 <HAL_RCC_OscConfig+0xc4>
 8005578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	e7cf      	b.n	8005520 <HAL_RCC_OscConfig+0x64>
 8005580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800558c:	e7cb      	b.n	8005526 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558e:	4c68      	ldr	r4, [pc, #416]	@ (8005730 <HAL_RCC_OscConfig+0x274>)
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	f013 0f0c 	tst.w	r3, #12
 8005596:	d007      	beq.n	80055a8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d110      	bne.n	80055c4 <HAL_RCC_OscConfig+0x108>
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	03da      	lsls	r2, r3, #15
 80055a6:	d40d      	bmi.n	80055c4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	079b      	lsls	r3, r3, #30
 80055ac:	d502      	bpl.n	80055b4 <HAL_RCC_OscConfig+0xf8>
 80055ae:	692b      	ldr	r3, [r5, #16]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d1af      	bne.n	8005514 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	696a      	ldr	r2, [r5, #20]
 80055b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80055bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	e785      	b.n	80054d0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055c4:	692a      	ldr	r2, [r5, #16]
 80055c6:	4b5b      	ldr	r3, [pc, #364]	@ (8005734 <HAL_RCC_OscConfig+0x278>)
 80055c8:	b16a      	cbz	r2, 80055e6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80055ce:	f7fd fa69 	bl	8002aa4 <HAL_GetTick>
 80055d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	079f      	lsls	r7, r3, #30
 80055d8:	d4ec      	bmi.n	80055b4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055da:	f7fd fa63 	bl	8002aa4 <HAL_GetTick>
 80055de:	1b80      	subs	r0, r0, r6
 80055e0:	2802      	cmp	r0, #2
 80055e2:	d9f7      	bls.n	80055d4 <HAL_RCC_OscConfig+0x118>
 80055e4:	e7ab      	b.n	800553e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80055e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80055e8:	f7fd fa5c 	bl	8002aa4 <HAL_GetTick>
 80055ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0798      	lsls	r0, r3, #30
 80055f2:	f57f af6d 	bpl.w	80054d0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f6:	f7fd fa55 	bl	8002aa4 <HAL_GetTick>
 80055fa:	1b80      	subs	r0, r0, r6
 80055fc:	2802      	cmp	r0, #2
 80055fe:	d9f6      	bls.n	80055ee <HAL_RCC_OscConfig+0x132>
 8005600:	e79d      	b.n	800553e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005602:	69aa      	ldr	r2, [r5, #24]
 8005604:	4e4a      	ldr	r6, [pc, #296]	@ (8005730 <HAL_RCC_OscConfig+0x274>)
 8005606:	4b4b      	ldr	r3, [pc, #300]	@ (8005734 <HAL_RCC_OscConfig+0x278>)
 8005608:	b1e2      	cbz	r2, 8005644 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800560a:	2201      	movs	r2, #1
 800560c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005610:	f7fd fa48 	bl	8002aa4 <HAL_GetTick>
 8005614:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005616:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	d50d      	bpl.n	8005638 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800561c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8005620:	4b45      	ldr	r3, [pc, #276]	@ (8005738 <HAL_RCC_OscConfig+0x27c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	fbb3 f3f2 	udiv	r3, r3, r2
 8005628:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800562a:	bf00      	nop
  }
  while (Delay --);
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	9201      	str	r2, [sp, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f9      	bne.n	800562a <HAL_RCC_OscConfig+0x16e>
 8005636:	e74f      	b.n	80054d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005638:	f7fd fa34 	bl	8002aa4 <HAL_GetTick>
 800563c:	1b00      	subs	r0, r0, r4
 800563e:	2802      	cmp	r0, #2
 8005640:	d9e9      	bls.n	8005616 <HAL_RCC_OscConfig+0x15a>
 8005642:	e77c      	b.n	800553e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005644:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005648:	f7fd fa2c 	bl	8002aa4 <HAL_GetTick>
 800564c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005650:	079f      	lsls	r7, r3, #30
 8005652:	f57f af41 	bpl.w	80054d8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005656:	f7fd fa25 	bl	8002aa4 <HAL_GetTick>
 800565a:	1b00      	subs	r0, r0, r4
 800565c:	2802      	cmp	r0, #2
 800565e:	d9f6      	bls.n	800564e <HAL_RCC_OscConfig+0x192>
 8005660:	e76d      	b.n	800553e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005662:	4c33      	ldr	r4, [pc, #204]	@ (8005730 <HAL_RCC_OscConfig+0x274>)
 8005664:	69e3      	ldr	r3, [r4, #28]
 8005666:	00d8      	lsls	r0, r3, #3
 8005668:	d424      	bmi.n	80056b4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800566a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800566c:	69e3      	ldr	r3, [r4, #28]
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005672:	61e3      	str	r3, [r4, #28]
 8005674:	69e3      	ldr	r3, [r4, #28]
 8005676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4e2f      	ldr	r6, [pc, #188]	@ (800573c <HAL_RCC_OscConfig+0x280>)
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	05d9      	lsls	r1, r3, #23
 8005684:	d518      	bpl.n	80056b8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005686:	68eb      	ldr	r3, [r5, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d126      	bne.n	80056da <HAL_RCC_OscConfig+0x21e>
 800568c:	6a23      	ldr	r3, [r4, #32]
 800568e:	f043 0301 	orr.w	r3, r3, #1
 8005692:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005694:	f7fd fa06 	bl	8002aa4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800569c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	6a23      	ldr	r3, [r4, #32]
 80056a0:	079b      	lsls	r3, r3, #30
 80056a2:	d53f      	bpl.n	8005724 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f43f af1b 	beq.w	80054e0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	69e3      	ldr	r3, [r4, #28]
 80056ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	61e3      	str	r3, [r4, #28]
 80056b2:	e715      	b.n	80054e0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80056b4:	2700      	movs	r7, #0
 80056b6:	e7e2      	b.n	800567e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056be:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80056c0:	f7fd f9f0 	bl	8002aa4 <HAL_GetTick>
 80056c4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c6:	6833      	ldr	r3, [r6, #0]
 80056c8:	05da      	lsls	r2, r3, #23
 80056ca:	d4dc      	bmi.n	8005686 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fd f9ea 	bl	8002aa4 <HAL_GetTick>
 80056d0:	eba0 0008 	sub.w	r0, r0, r8
 80056d4:	2864      	cmp	r0, #100	@ 0x64
 80056d6:	d9f6      	bls.n	80056c6 <HAL_RCC_OscConfig+0x20a>
 80056d8:	e731      	b.n	800553e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056da:	b9ab      	cbnz	r3, 8005708 <HAL_RCC_OscConfig+0x24c>
 80056dc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	6223      	str	r3, [r4, #32]
 80056e8:	6a23      	ldr	r3, [r4, #32]
 80056ea:	f023 0304 	bic.w	r3, r3, #4
 80056ee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80056f0:	f7fd f9d8 	bl	8002aa4 <HAL_GetTick>
 80056f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	6a23      	ldr	r3, [r4, #32]
 80056f8:	0798      	lsls	r0, r3, #30
 80056fa:	d5d3      	bpl.n	80056a4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fd f9d2 	bl	8002aa4 <HAL_GetTick>
 8005700:	1b80      	subs	r0, r0, r6
 8005702:	4540      	cmp	r0, r8
 8005704:	d9f7      	bls.n	80056f6 <HAL_RCC_OscConfig+0x23a>
 8005706:	e71a      	b.n	800553e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005708:	2b05      	cmp	r3, #5
 800570a:	6a23      	ldr	r3, [r4, #32]
 800570c:	d103      	bne.n	8005716 <HAL_RCC_OscConfig+0x25a>
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	6223      	str	r3, [r4, #32]
 8005714:	e7ba      	b.n	800568c <HAL_RCC_OscConfig+0x1d0>
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6223      	str	r3, [r4, #32]
 800571c:	6a23      	ldr	r3, [r4, #32]
 800571e:	f023 0304 	bic.w	r3, r3, #4
 8005722:	e7b6      	b.n	8005692 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fd f9be 	bl	8002aa4 <HAL_GetTick>
 8005728:	1b80      	subs	r0, r0, r6
 800572a:	4540      	cmp	r0, r8
 800572c:	d9b7      	bls.n	800569e <HAL_RCC_OscConfig+0x1e2>
 800572e:	e706      	b.n	800553e <HAL_RCC_OscConfig+0x82>
 8005730:	40021000 	.word	0x40021000
 8005734:	42420000 	.word	0x42420000
 8005738:	20000018 	.word	0x20000018
 800573c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005740:	4c2a      	ldr	r4, [pc, #168]	@ (80057ec <HAL_RCC_OscConfig+0x330>)
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	f002 020c 	and.w	r2, r2, #12
 8005748:	2a08      	cmp	r2, #8
 800574a:	d03e      	beq.n	80057ca <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574c:	2200      	movs	r2, #0
 800574e:	2b02      	cmp	r3, #2
 8005750:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8005752:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005754:	d12c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8005756:	f7fd f9a5 	bl	8002aa4 <HAL_GetTick>
 800575a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	0199      	lsls	r1, r3, #6
 8005760:	d420      	bmi.n	80057a4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005762:	6a2b      	ldr	r3, [r5, #32]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005768:	d105      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	68a9      	ldr	r1, [r5, #8]
 800576e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005772:	430a      	orrs	r2, r1
 8005774:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005776:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	430b      	orrs	r3, r1
 800577c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005780:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8005782:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005784:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8005786:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <HAL_RCC_OscConfig+0x334>)
 8005788:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800578a:	f7fd f98b 	bl	8002aa4 <HAL_GetTick>
 800578e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	019a      	lsls	r2, r3, #6
 8005794:	f53f aea8 	bmi.w	80054e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fd f984 	bl	8002aa4 <HAL_GetTick>
 800579c:	1b40      	subs	r0, r0, r5
 800579e:	2802      	cmp	r0, #2
 80057a0:	d9f6      	bls.n	8005790 <HAL_RCC_OscConfig+0x2d4>
 80057a2:	e6cc      	b.n	800553e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fd f97e 	bl	8002aa4 <HAL_GetTick>
 80057a8:	1b80      	subs	r0, r0, r6
 80057aa:	2802      	cmp	r0, #2
 80057ac:	d9d6      	bls.n	800575c <HAL_RCC_OscConfig+0x2a0>
 80057ae:	e6c6      	b.n	800553e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80057b0:	f7fd f978 	bl	8002aa4 <HAL_GetTick>
 80057b4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	f57f ae95 	bpl.w	80054e8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fd f971 	bl	8002aa4 <HAL_GetTick>
 80057c2:	1b40      	subs	r0, r0, r5
 80057c4:	2802      	cmp	r0, #2
 80057c6:	d9f6      	bls.n	80057b6 <HAL_RCC_OscConfig+0x2fa>
 80057c8:	e6b9      	b.n	800553e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	f43f aea2 	beq.w	8005514 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80057d0:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d2:	6a2b      	ldr	r3, [r5, #32]
 80057d4:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80057d8:	429a      	cmp	r2, r3
 80057da:	f47f ae9b 	bne.w	8005514 <HAL_RCC_OscConfig+0x58>
 80057de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057e0:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	bf18      	it	ne
 80057e8:	2001      	movne	r0, #1
 80057ea:	e6a9      	b.n	8005540 <HAL_RCC_OscConfig+0x84>
 80057ec:	40021000 	.word	0x40021000
 80057f0:	42420000 	.word	0x42420000

080057f4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80057f4:	4a0d      	ldr	r2, [pc, #52]	@ (800582c <HAL_RCC_GetSysClockFreq+0x38>)
 80057f6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80057f8:	f003 010c 	and.w	r1, r3, #12
 80057fc:	2908      	cmp	r1, #8
 80057fe:	d112      	bne.n	8005826 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005800:	480b      	ldr	r0, [pc, #44]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005802:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005806:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005808:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800580a:	d509      	bpl.n	8005820 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800580c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800580e:	4a09      	ldr	r2, [pc, #36]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005810:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005814:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005816:	4a08      	ldr	r2, [pc, #32]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x44>)
 8005818:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800581a:	fbb0 f0f3 	udiv	r0, r0, r3
 800581e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005820:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_GetSysClockFreq+0x48>)
 8005822:	4358      	muls	r0, r3
 8005824:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005826:	4803      	ldr	r0, [pc, #12]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000
 8005830:	0800bee2 	.word	0x0800bee2
 8005834:	007a1200 	.word	0x007a1200
 8005838:	0800bee0 	.word	0x0800bee0
 800583c:	003d0900 	.word	0x003d0900

08005840 <HAL_RCC_ClockConfig>:
{
 8005840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005844:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005846:	4604      	mov	r4, r0
 8005848:	b910      	cbnz	r0, 8005850 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800584a:	2001      	movs	r0, #1
}
 800584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4a44      	ldr	r2, [pc, #272]	@ (8005964 <HAL_RCC_ClockConfig+0x124>)
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	428b      	cmp	r3, r1
 800585a:	d328      	bcc.n	80058ae <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800585c:	6821      	ldr	r1, [r4, #0]
 800585e:	078e      	lsls	r6, r1, #30
 8005860:	d430      	bmi.n	80058c4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005862:	07ca      	lsls	r2, r1, #31
 8005864:	d443      	bmi.n	80058ee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005866:	4a3f      	ldr	r2, [pc, #252]	@ (8005964 <HAL_RCC_ClockConfig+0x124>)
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	42ab      	cmp	r3, r5
 8005870:	d865      	bhi.n	800593e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	4d3c      	ldr	r5, [pc, #240]	@ (8005968 <HAL_RCC_ClockConfig+0x128>)
 8005876:	f012 0f04 	tst.w	r2, #4
 800587a:	d16c      	bne.n	8005956 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587c:	0713      	lsls	r3, r2, #28
 800587e:	d506      	bpl.n	800588e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005880:	686b      	ldr	r3, [r5, #4]
 8005882:	6922      	ldr	r2, [r4, #16]
 8005884:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005888:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800588c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800588e:	f7ff ffb1 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 8005892:	686b      	ldr	r3, [r5, #4]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <HAL_RCC_ClockConfig+0x12c>)
 8005896:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800589a:	5cd3      	ldrb	r3, [r2, r3]
 800589c:	40d8      	lsrs	r0, r3
 800589e:	4b34      	ldr	r3, [pc, #208]	@ (8005970 <HAL_RCC_ClockConfig+0x130>)
 80058a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80058a2:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <HAL_RCC_ClockConfig+0x134>)
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	f7fd f8bb 	bl	8002a20 <HAL_InitTick>
  return HAL_OK;
 80058aa:	2000      	movs	r0, #0
 80058ac:	e7ce      	b.n	800584c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b8:	6813      	ldr	r3, [r2, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	428b      	cmp	r3, r1
 80058c0:	d1c3      	bne.n	800584a <HAL_RCC_ClockConfig+0xa>
 80058c2:	e7cb      	b.n	800585c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <HAL_RCC_ClockConfig+0x128>)
 80058c6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ca:	bf1e      	ittt	ne
 80058cc:	685a      	ldrne	r2, [r3, #4]
 80058ce:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80058d2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d6:	bf42      	ittt	mi
 80058d8:	685a      	ldrmi	r2, [r3, #4]
 80058da:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80058de:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68a0      	ldr	r0, [r4, #8]
 80058e4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80058e8:	4302      	orrs	r2, r0
 80058ea:	605a      	str	r2, [r3, #4]
 80058ec:	e7b9      	b.n	8005862 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	4e1d      	ldr	r6, [pc, #116]	@ (8005968 <HAL_RCC_ClockConfig+0x128>)
 80058f2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	d11a      	bne.n	800592e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	d0a5      	beq.n	800584a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005900:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005904:	f023 0303 	bic.w	r3, r3, #3
 8005908:	4313      	orrs	r3, r2
 800590a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800590c:	f7fd f8ca 	bl	8002aa4 <HAL_GetTick>
 8005910:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	6873      	ldr	r3, [r6, #4]
 8005914:	6862      	ldr	r2, [r4, #4]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800591e:	d0a2      	beq.n	8005866 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fd f8c0 	bl	8002aa4 <HAL_GetTick>
 8005924:	1bc0      	subs	r0, r0, r7
 8005926:	4540      	cmp	r0, r8
 8005928:	d9f3      	bls.n	8005912 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800592a:	2003      	movs	r0, #3
 800592c:	e78e      	b.n	800584c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592e:	2a02      	cmp	r2, #2
 8005930:	d102      	bne.n	8005938 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005936:	e7e1      	b.n	80058fc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005938:	f013 0f02 	tst.w	r3, #2
 800593c:	e7de      	b.n	80058fc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	432b      	orrs	r3, r5
 8005946:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	42ab      	cmp	r3, r5
 8005950:	f47f af7b 	bne.w	800584a <HAL_RCC_ClockConfig+0xa>
 8005954:	e78d      	b.n	8005872 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005956:	686b      	ldr	r3, [r5, #4]
 8005958:	68e1      	ldr	r1, [r4, #12]
 800595a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800595e:	430b      	orrs	r3, r1
 8005960:	606b      	str	r3, [r5, #4]
 8005962:	e78b      	b.n	800587c <HAL_RCC_ClockConfig+0x3c>
 8005964:	40022000 	.word	0x40022000
 8005968:	40021000 	.word	0x40021000
 800596c:	0800a9f0 	.word	0x0800a9f0
 8005970:	20000018 	.word	0x20000018
 8005974:	20000020 	.word	0x20000020

08005978 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005978:	4b04      	ldr	r3, [pc, #16]	@ (800598c <HAL_RCC_GetPCLK1Freq+0x14>)
 800597a:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <HAL_RCC_GetPCLK1Freq+0x18>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005982:	5cd3      	ldrb	r3, [r2, r3]
 8005984:	4a03      	ldr	r2, [pc, #12]	@ (8005994 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005986:	6810      	ldr	r0, [r2, #0]
}
 8005988:	40d8      	lsrs	r0, r3
 800598a:	4770      	bx	lr
 800598c:	40021000 	.word	0x40021000
 8005990:	0800a9e8 	.word	0x0800a9e8
 8005994:	20000018 	.word	0x20000018

08005998 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005998:	6803      	ldr	r3, [r0, #0]
{
 800599a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800599e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059a0:	07d8      	lsls	r0, r3, #31
 80059a2:	d521      	bpl.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a4:	4c36      	ldr	r4, [pc, #216]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059a6:	69e3      	ldr	r3, [r4, #28]
 80059a8:	00d9      	lsls	r1, r3, #3
 80059aa:	d42b      	bmi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80059ac:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ae:	69e3      	ldr	r3, [r4, #28]
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b4:	61e3      	str	r3, [r4, #28]
 80059b6:	69e3      	ldr	r3, [r4, #28]
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c0:	4f30      	ldr	r7, [pc, #192]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	05da      	lsls	r2, r3, #23
 80059c6:	d51f      	bpl.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059c8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ca:	686a      	ldr	r2, [r5, #4]
 80059cc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80059d0:	d12e      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d2:	6a23      	ldr	r3, [r4, #32]
 80059d4:	686a      	ldr	r2, [r5, #4]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059da:	4313      	orrs	r3, r2
 80059dc:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059de:	b11e      	cbz	r6, 80059e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	69e3      	ldr	r3, [r4, #28]
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059e8:	682a      	ldr	r2, [r5, #0]
 80059ea:	0791      	lsls	r1, r2, #30
 80059ec:	d506      	bpl.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ee:	4924      	ldr	r1, [pc, #144]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059f0:	68a8      	ldr	r0, [r5, #8]
 80059f2:	684b      	ldr	r3, [r1, #4]
 80059f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80059f8:	4303      	orrs	r3, r0
 80059fa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059fc:	06d3      	lsls	r3, r2, #27
 80059fe:	d436      	bmi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a00:	2000      	movs	r0, #0
 8005a02:	e012      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8005a04:	2600      	movs	r6, #0
 8005a06:	e7db      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005a10:	f7fd f848 	bl	8002aa4 <HAL_GetTick>
 8005a14:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	05db      	lsls	r3, r3, #23
 8005a1a:	d4d5      	bmi.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1c:	f7fd f842 	bl	8002aa4 <HAL_GetTick>
 8005a20:	eba0 0008 	sub.w	r0, r0, r8
 8005a24:	2864      	cmp	r0, #100	@ 0x64
 8005a26:	d9f6      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8005a28:	2003      	movs	r0, #3
}
 8005a2a:	b002      	add	sp, #8
 8005a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a30:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d0cc      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a38:	2001      	movs	r0, #1
 8005a3a:	4a13      	ldr	r2, [pc, #76]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a3c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a3e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a42:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a48:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a4a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8005a4e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a50:	d5bf      	bpl.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8005a52:	f7fd f827 	bl	8002aa4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005a5a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5c:	6a23      	ldr	r3, [r4, #32]
 8005a5e:	0798      	lsls	r0, r3, #30
 8005a60:	d4b7      	bmi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fd f81f 	bl	8002aa4 <HAL_GetTick>
 8005a66:	1bc0      	subs	r0, r0, r7
 8005a68:	4540      	cmp	r0, r8
 8005a6a:	d9f7      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8005a6c:	e7dc      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a6e:	4a04      	ldr	r2, [pc, #16]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a70:	68e9      	ldr	r1, [r5, #12]
 8005a72:	6853      	ldr	r3, [r2, #4]
 8005a74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6053      	str	r3, [r2, #4]
 8005a7c:	e7c0      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40007000 	.word	0x40007000
 8005a88:	42420000 	.word	0x42420000

08005a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	461f      	mov	r7, r3
 8005a92:	4689      	mov	r9, r1
 8005a94:	4690      	mov	r8, r2
 8005a96:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a98:	f7fd f804 	bl	8002aa4 <HAL_GetTick>
 8005a9c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005a9e:	443d      	add	r5, r7
 8005aa0:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005aa2:	f7fc ffff 	bl	8002aa4 <HAL_GetTick>
 8005aa6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa8:	4b25      	ldr	r3, [pc, #148]	@ (8005b40 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8005aaa:	681e      	ldr	r6, [r3, #0]
 8005aac:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8005ab0:	436e      	muls	r6, r5
 8005ab2:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	6893      	ldr	r3, [r2, #8]
 8005ab8:	ea39 0303 	bics.w	r3, r9, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	4543      	cmp	r3, r8
 8005ac4:	d101      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e02e      	b.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	1c7b      	adds	r3, r7, #1
 8005acc:	d0f3      	beq.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ace:	f7fc ffe9 	bl	8002aa4 <HAL_GetTick>
 8005ad2:	eba0 000a 	sub.w	r0, r0, sl
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	d329      	bcc.n	8005b2e <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ae2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae4:	6862      	ldr	r2, [r4, #4]
 8005ae6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005aea:	d10a      	bne.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0x76>
 8005aec:	68a2      	ldr	r2, [r4, #8]
 8005aee:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005af2:	d002      	beq.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005af8:	d103      	bne.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b00:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005b04:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005b08:	d107      	bne.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b18:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b20:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005b22:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005b24:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005b28:	b002      	add	sp, #8
 8005b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8005b2e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005b30:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005b32:	2a00      	cmp	r2, #0
      count--;
 8005b34:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b38:	bf08      	it	eq
 8005b3a:	4615      	moveq	r5, r2
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	e7b9      	b.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x28>
 8005b40:	20000018 	.word	0x20000018

08005b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b46:	460b      	mov	r3, r1
 8005b48:	9200      	str	r2, [sp, #0]
{
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b4e:	2102      	movs	r1, #2
 8005b50:	2201      	movs	r2, #1
{
 8005b52:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b54:	f7ff ff9a 	bl	8005a8c <SPI_WaitFlagStateUntilTimeout>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	b128      	cbz	r0, 8005b68 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b5e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b60:	f043 0320 	orr.w	r3, r3, #32
 8005b64:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b66:	e007      	b.n	8005b78 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b68:	462b      	mov	r3, r5
 8005b6a:	2180      	movs	r1, #128	@ 0x80
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	9600      	str	r6, [sp, #0]
 8005b70:	f7ff ff8c 	bl	8005a8c <SPI_WaitFlagStateUntilTimeout>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1f1      	bne.n	8005b5c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}

08005b7c <SPI_EndRxTransaction>:
{
 8005b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b7e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b80:	6841      	ldr	r1, [r0, #4]
{
 8005b82:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b84:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8005b88:	d118      	bne.n	8005bbc <SPI_EndRxTransaction+0x40>
 8005b8a:	6881      	ldr	r1, [r0, #8]
 8005b8c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8005b90:	d002      	beq.n	8005b98 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b92:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b96:	d111      	bne.n	8005bbc <SPI_EndRxTransaction+0x40>
    __HAL_SPI_DISABLE(hspi);
 8005b98:	6825      	ldr	r5, [r4, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b9a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8005b9e:	6828      	ldr	r0, [r5, #0]
 8005ba0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005ba4:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005ba6:	d109      	bne.n	8005bbc <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba8:	9200      	str	r2, [sp, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	2200      	movs	r2, #0
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7ff ff6c 	bl	8005a8c <SPI_WaitFlagStateUntilTimeout>
 8005bb4:	b930      	cbnz	r0, 8005bc4 <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 8005bb6:	2000      	movs	r0, #0
}
 8005bb8:	b003      	add	sp, #12
 8005bba:	bd30      	pop	{r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbc:	9200      	str	r2, [sp, #0]
 8005bbe:	2180      	movs	r1, #128	@ 0x80
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	e7f4      	b.n	8005bae <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005bc6:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc8:	f043 0320 	orr.w	r3, r3, #32
 8005bcc:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005bce:	e7f3      	b.n	8005bb8 <SPI_EndRxTransaction+0x3c>

08005bd0 <HAL_SPI_Init>:
{
 8005bd0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d051      	beq.n	8005c7c <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bd8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d14a      	bne.n	8005c74 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bde:	6842      	ldr	r2, [r0, #4]
 8005be0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005be4:	d000      	beq.n	8005be8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005be6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bec:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005bf0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bf4:	b923      	cbnz	r3, 8005c00 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8005bf6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005bf8:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8005bfc:	f7fc fc4c 	bl	8002498 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c00:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005c02:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c04:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005c08:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c0a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c10:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8005c18:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005c1c:	4303      	orrs	r3, r0
 8005c1e:	68e0      	ldr	r0, [r4, #12]
 8005c20:	69a1      	ldr	r1, [r4, #24]
 8005c22:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8005c26:	4303      	orrs	r3, r0
 8005c28:	6920      	ldr	r0, [r4, #16]
 8005c2a:	f000 0002 	and.w	r0, r0, #2
 8005c2e:	4303      	orrs	r3, r0
 8005c30:	6960      	ldr	r0, [r4, #20]
 8005c32:	f000 0001 	and.w	r0, r0, #1
 8005c36:	4303      	orrs	r3, r0
 8005c38:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8005c3c:	4303      	orrs	r3, r0
 8005c3e:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c40:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c42:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8005c46:	4303      	orrs	r3, r0
 8005c48:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c4a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c4e:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8005c52:	4303      	orrs	r3, r0
 8005c54:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005c56:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8005c5a:	4303      	orrs	r3, r0
 8005c5c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005c5e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c60:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c62:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c68:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005c6a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c6c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c6e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8005c72:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c74:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c7a:	e7b5      	b.n	8005be8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	e7f8      	b.n	8005c72 <HAL_SPI_Init+0xa2>

08005c80 <HAL_SPI_Transmit>:
{
 8005c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4604      	mov	r4, r0
 8005c86:	461f      	mov	r7, r3
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8005c8c:	f7fc ff0a 	bl	8002aa4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005c90:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8005c94:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	b2d8      	uxtb	r0, r3
 8005c9a:	f040 809f 	bne.w	8005ddc <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	d074      	beq.n	8005d8c <HAL_SPI_Transmit+0x10c>
 8005ca2:	f1b8 0f00 	cmp.w	r8, #0
 8005ca6:	d071      	beq.n	8005d8c <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8005ca8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	f000 8095 	beq.w	8005ddc <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005cbc:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8005cc0:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cc4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005cc6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005cc8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cca:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005ccc:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 8005cd2:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005cd6:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cd8:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	d107      	bne.n	8005cee <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8005cde:	6833      	ldr	r3, [r6, #0]
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce4:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005ce6:	6833      	ldr	r3, [r6, #0]
 8005ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cec:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cee:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cf0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005cf4:	bf5e      	ittt	pl
 8005cf6:	6833      	ldrpl	r3, [r6, #0]
 8005cf8:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8005cfc:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cfe:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d02:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d04:	d145      	bne.n	8005d92 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d06:	b113      	cbz	r3, 8005d0e <HAL_SPI_Transmit+0x8e>
 8005d08:	f1b8 0f01 	cmp.w	r8, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d0e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005d12:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d14:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d16:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005d1e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b9d3      	cbnz	r3, 8005d5a <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d24:	464a      	mov	r2, r9
 8005d26:	4639      	mov	r1, r7
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7ff ff0b 	bl	8005b44 <SPI_EndRxTxTransaction>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d151      	bne.n	8005dd6 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d32:	68a3      	ldr	r3, [r4, #8]
 8005d34:	b933      	cbnz	r3, 8005d44 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d36:	9301      	str	r3, [sp, #4]
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005d4a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d4c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8005d4e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d52:	1ac0      	subs	r0, r0, r3
 8005d54:	bf18      	it	ne
 8005d56:	2001      	movne	r0, #1
 8005d58:	e018      	b.n	8005d8c <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	6893      	ldr	r3, [r2, #8]
 8005d5e:	0798      	lsls	r0, r3, #30
 8005d60:	d505      	bpl.n	8005d6e <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d64:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005d68:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d6c:	e7d3      	b.n	8005d16 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6e:	f7fc fe99 	bl	8002aa4 <HAL_GetTick>
 8005d72:	eba0 0009 	sub.w	r0, r0, r9
 8005d76:	42b8      	cmp	r0, r7
 8005d78:	d3d1      	bcc.n	8005d1e <HAL_SPI_Transmit+0x9e>
 8005d7a:	1c79      	adds	r1, r7, #1
 8005d7c:	d0cf      	beq.n	8005d1e <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d84:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005d86:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8005d88:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005d8c:	b003      	add	sp, #12
 8005d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d92:	b113      	cbz	r3, 8005d9a <HAL_SPI_Transmit+0x11a>
 8005d94:	f1b8 0f01 	cmp.w	r8, #1
 8005d98:	d108      	bne.n	8005dac <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d9a:	782b      	ldrb	r3, [r5, #0]
 8005d9c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005da0:	3301      	adds	r3, #1
 8005da2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005da4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005dac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0b7      	beq.n	8005d24 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	0792      	lsls	r2, r2, #30
 8005dba:	d503      	bpl.n	8005dc4 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	731a      	strb	r2, [r3, #12]
 8005dc2:	e7ec      	b.n	8005d9e <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc4:	f7fc fe6e 	bl	8002aa4 <HAL_GetTick>
 8005dc8:	eba0 0009 	sub.w	r0, r0, r9
 8005dcc:	42b8      	cmp	r0, r7
 8005dce:	d3ed      	bcc.n	8005dac <HAL_SPI_Transmit+0x12c>
 8005dd0:	1c7b      	adds	r3, r7, #1
 8005dd2:	d0eb      	beq.n	8005dac <HAL_SPI_Transmit+0x12c>
 8005dd4:	e7d3      	b.n	8005d7e <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005dda:	e7aa      	b.n	8005d32 <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 8005ddc:	2002      	movs	r0, #2
 8005dde:	e7d5      	b.n	8005d8c <HAL_SPI_Transmit+0x10c>

08005de0 <HAL_SPI_TransmitReceive>:
{
 8005de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	4691      	mov	r9, r2
 8005dea:	461e      	mov	r6, r3
 8005dec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8005df0:	f7fc fe58 	bl	8002aa4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005df4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8005df8:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dfa:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8005dfc:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8005dfe:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e00:	d00a      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x38>
 8005e02:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005e06:	f040 80e5 	bne.w	8005fd4 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 80e1 	bne.w	8005fd4 <HAL_SPI_TransmitReceive+0x1f4>
 8005e12:	2904      	cmp	r1, #4
 8005e14:	f040 80de 	bne.w	8005fd4 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	d04b      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0xd4>
 8005e1c:	f1b9 0f00 	cmp.w	r9, #0
 8005e20:	d048      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0xd4>
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d046      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8005e26:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f000 80d2 	beq.w	8005fd4 <HAL_SPI_TransmitReceive+0x1f4>
 8005e30:	2301      	movs	r3, #1
 8005e32:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e36:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e3a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e3e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e40:	bf1c      	itt	ne
 8005e42:	2305      	movne	r3, #5
 8005e44:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8005e4c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e50:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005e52:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005e54:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e56:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8005e58:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5a:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005e5c:	bf58      	it	pl
 8005e5e:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e60:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8005e62:	bf58      	it	pl
 8005e64:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8005e68:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8005e6a:	bf58      	it	pl
 8005e6c:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e6e:	68e1      	ldr	r1, [r4, #12]
 8005e70:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005e74:	d155      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e76:	b10a      	cbz	r2, 8005e7c <HAL_SPI_TransmitReceive+0x9c>
 8005e78:	2e01      	cmp	r6, #1
 8005e7a:	d107      	bne.n	8005e8c <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e7c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005e80:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005e82:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e84:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005e8c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	b98b      	cbnz	r3, 8005eb8 <HAL_SPI_TransmitReceive+0xd8>
 8005e94:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	b973      	cbnz	r3, 8005eb8 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e9a:	463a      	mov	r2, r7
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff fe50 	bl	8005b44 <SPI_EndRxTxTransaction>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f000 8081 	beq.w	8005fac <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eaa:	2320      	movs	r3, #32
 8005eac:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e031      	b.n	8005f1c <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eb8:	6821      	ldr	r1, [r4, #0]
 8005eba:	688b      	ldr	r3, [r1, #8]
 8005ebc:	079a      	lsls	r2, r3, #30
 8005ebe:	d50d      	bpl.n	8005edc <HAL_SPI_TransmitReceive+0xfc>
 8005ec0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	b153      	cbz	r3, 8005edc <HAL_SPI_TransmitReceive+0xfc>
 8005ec6:	b145      	cbz	r5, 8005eda <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005eca:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005ece:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ed2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005eda:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005edc:	688a      	ldr	r2, [r1, #8]
 8005ede:	f012 0201 	ands.w	r2, r2, #1
 8005ee2:	d00c      	beq.n	8005efe <HAL_SPI_TransmitReceive+0x11e>
 8005ee4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b14b      	cbz	r3, 8005efe <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8005eea:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eec:	68c9      	ldr	r1, [r1, #12]
 8005eee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005ef0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ef6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005efe:	f7fc fdd1 	bl	8002aa4 <HAL_GetTick>
 8005f02:	1bc0      	subs	r0, r0, r7
 8005f04:	4540      	cmp	r0, r8
 8005f06:	d3c2      	bcc.n	8005e8e <HAL_SPI_TransmitReceive+0xae>
 8005f08:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f0c:	d0bf      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f14:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005f16:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005f18:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005f1c:	b003      	add	sp, #12
 8005f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f22:	b10a      	cbz	r2, 8005f28 <HAL_SPI_TransmitReceive+0x148>
 8005f24:	2e01      	cmp	r6, #1
 8005f26:	d108      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f28:	782a      	ldrb	r2, [r5, #0]
 8005f2a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f2e:	3301      	adds	r3, #1
 8005f30:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005f3a:	2501      	movs	r5, #1
 8005f3c:	e02d      	b.n	8005f9a <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	079b      	lsls	r3, r3, #30
 8005f44:	d50e      	bpl.n	8005f64 <HAL_SPI_TransmitReceive+0x184>
 8005f46:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	b15b      	cbz	r3, 8005f64 <HAL_SPI_TransmitReceive+0x184>
 8005f4c:	b14d      	cbz	r5, 8005f62 <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005f54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f56:	3301      	adds	r3, #1
 8005f58:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f5a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005f62:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	6891      	ldr	r1, [r2, #8]
 8005f68:	f011 0101 	ands.w	r1, r1, #1
 8005f6c:	d00d      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x1aa>
 8005f6e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b153      	cbz	r3, 8005f8a <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8005f74:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f76:	68d2      	ldr	r2, [r2, #12]
 8005f78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005f7e:	3301      	adds	r3, #1
 8005f80:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f8a:	f7fc fd8b 	bl	8002aa4 <HAL_GetTick>
 8005f8e:	1bc0      	subs	r0, r0, r7
 8005f90:	4540      	cmp	r0, r8
 8005f92:	d302      	bcc.n	8005f9a <HAL_SPI_TransmitReceive+0x1ba>
 8005f94:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f98:	d1b9      	bne.n	8005f0e <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f9a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1cd      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x15e>
 8005fa2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1c9      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x15e>
 8005faa:	e776      	b.n	8005e9a <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fac:	68a3      	ldr	r3, [r4, #8]
 8005fae:	b933      	cbnz	r3, 8005fbe <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	9201      	str	r2, [sp, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005fc4:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8005fc8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fcc:	1ac0      	subs	r0, r0, r3
 8005fce:	bf18      	it	ne
 8005fd0:	2001      	movne	r0, #1
 8005fd2:	e7a3      	b.n	8005f1c <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8005fd4:	2002      	movs	r0, #2
 8005fd6:	e7a1      	b.n	8005f1c <HAL_SPI_TransmitReceive+0x13c>

08005fd8 <HAL_SPI_Receive>:
{
 8005fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fdc:	461e      	mov	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8005fde:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 8005fe2:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe4:	2b01      	cmp	r3, #1
{
 8005fe6:	4689      	mov	r9, r1
 8005fe8:	4617      	mov	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8005fea:	b2dd      	uxtb	r5, r3
 8005fec:	d004      	beq.n	8005ff8 <HAL_SPI_Receive+0x20>
    return HAL_BUSY;
 8005fee:	2502      	movs	r5, #2
}
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	b003      	add	sp, #12
 8005ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ff8:	6843      	ldr	r3, [r0, #4]
 8005ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffe:	d10b      	bne.n	8006018 <HAL_SPI_Receive+0x40>
 8006000:	6883      	ldr	r3, [r0, #8]
 8006002:	b94b      	cbnz	r3, 8006018 <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006004:	2304      	movs	r3, #4
 8006006:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800600a:	4613      	mov	r3, r2
 800600c:	9600      	str	r6, [sp, #0]
 800600e:	460a      	mov	r2, r1
 8006010:	f7ff fee6 	bl	8005de0 <HAL_SPI_TransmitReceive>
 8006014:	4605      	mov	r5, r0
 8006016:	e7eb      	b.n	8005ff0 <HAL_SPI_Receive+0x18>
  tickstart = HAL_GetTick();
 8006018:	f7fc fd44 	bl	8002aa4 <HAL_GetTick>
 800601c:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0U))
 800601e:	f1b9 0f00 	cmp.w	r9, #0
 8006022:	d0e5      	beq.n	8005ff0 <HAL_SPI_Receive+0x18>
 8006024:	2f00      	cmp	r7, #0
 8006026:	d0e3      	beq.n	8005ff0 <HAL_SPI_Receive+0x18>
  __HAL_LOCK(hspi);
 8006028:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800602c:	2b01      	cmp	r3, #1
 800602e:	d0de      	beq.n	8005fee <HAL_SPI_Receive+0x16>
 8006030:	2301      	movs	r3, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006032:	2500      	movs	r5, #0
  __HAL_LOCK(hspi);
 8006034:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006038:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603a:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800603c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006040:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006044:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006046:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800604a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 800604c:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800604e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006052:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006054:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006056:	86a5      	strh	r5, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006058:	86e5      	strh	r5, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800605a:	d107      	bne.n	800606c <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800606a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	0655      	lsls	r5, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006070:	bf5e      	ittt	pl
 8006072:	681a      	ldrpl	r2, [r3, #0]
 8006074:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006078:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	b1f3      	cbz	r3, 80060bc <HAL_SPI_Receive+0xe4>
    while (hspi->RxXferCount > 0U)
 800607e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006080:	b29b      	uxth	r3, r3
 8006082:	b1fb      	cbz	r3, 80060c4 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	07d2      	lsls	r2, r2, #31
 800608a:	d53c      	bpl.n	8006106 <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006090:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006094:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006096:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006098:	3b01      	subs	r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800609e:	e7ee      	b.n	800607e <HAL_SPI_Receive+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	07d0      	lsls	r0, r2, #31
 80060a6:	d51e      	bpl.n	80060e6 <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a8:	7b1b      	ldrb	r3, [r3, #12]
 80060aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80060ac:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80060b0:	3301      	adds	r3, #1
 80060b2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80060b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80060bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1ed      	bne.n	80060a0 <HAL_SPI_Receive+0xc8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c4:	4642      	mov	r2, r8
 80060c6:	4631      	mov	r1, r6
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff fd57 	bl	8005b7c <SPI_EndRxTransaction>
 80060ce:	bb18      	cbnz	r0, 8006118 <HAL_SPI_Receive+0x140>
  hspi->State = HAL_SPI_STATE_READY;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80060d6:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060d8:	6d65      	ldr	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80060da:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060de:	1aed      	subs	r5, r5, r3
 80060e0:	bf18      	it	ne
 80060e2:	2501      	movne	r5, #1
 80060e4:	e784      	b.n	8005ff0 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e6:	f7fc fcdd 	bl	8002aa4 <HAL_GetTick>
 80060ea:	eba0 0008 	sub.w	r0, r0, r8
 80060ee:	42b0      	cmp	r0, r6
 80060f0:	d3e4      	bcc.n	80060bc <HAL_SPI_Receive+0xe4>
 80060f2:	1c71      	adds	r1, r6, #1
 80060f4:	d0e2      	beq.n	80060bc <HAL_SPI_Receive+0xe4>
          hspi->State = HAL_SPI_STATE_READY;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060fc:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80060fe:	2503      	movs	r5, #3
          __HAL_UNLOCK(hspi);
 8006100:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8006104:	e774      	b.n	8005ff0 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006106:	f7fc fccd 	bl	8002aa4 <HAL_GetTick>
 800610a:	eba0 0008 	sub.w	r0, r0, r8
 800610e:	42b0      	cmp	r0, r6
 8006110:	d3b5      	bcc.n	800607e <HAL_SPI_Receive+0xa6>
 8006112:	1c73      	adds	r3, r6, #1
 8006114:	d0b3      	beq.n	800607e <HAL_SPI_Receive+0xa6>
 8006116:	e7ee      	b.n	80060f6 <HAL_SPI_Receive+0x11e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006118:	2320      	movs	r3, #32
 800611a:	6563      	str	r3, [r4, #84]	@ 0x54
 800611c:	e7d8      	b.n	80060d0 <HAL_SPI_Receive+0xf8>

0800611e <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 800611e:	4770      	bx	lr

08006120 <HAL_SPI_IRQHandler>:
{
 8006120:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8006122:	6803      	ldr	r3, [r0, #0]
{
 8006124:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8006126:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8006128:	689a      	ldr	r2, [r3, #8]
{
 800612a:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800612c:	0656      	lsls	r6, r2, #25
 800612e:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8006132:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8006136:	d408      	bmi.n	800614a <HAL_SPI_IRQHandler+0x2a>
 8006138:	07d6      	lsls	r6, r2, #31
 800613a:	d506      	bpl.n	800614a <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800613c:	064e      	lsls	r6, r1, #25
 800613e:	d504      	bpl.n	800614a <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8006140:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 8006142:	b005      	add	sp, #20
 8006144:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8006148:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800614a:	0796      	lsls	r6, r2, #30
 800614c:	d504      	bpl.n	8006158 <HAL_SPI_IRQHandler+0x38>
 800614e:	0608      	lsls	r0, r1, #24
 8006150:	d502      	bpl.n	8006158 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8006152:	4620      	mov	r0, r4
 8006154:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006156:	e7f4      	b.n	8006142 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006158:	ea45 1552 	orr.w	r5, r5, r2, lsr #5
 800615c:	0956      	lsrs	r6, r2, #5
 800615e:	07ea      	lsls	r2, r5, #31
 8006160:	d54c      	bpl.n	80061fc <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006162:	068d      	lsls	r5, r1, #26
 8006164:	d54a      	bpl.n	80061fc <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006166:	b177      	cbz	r7, 8006186 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006168:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 800616c:	2000      	movs	r0, #0
 800616e:	2a03      	cmp	r2, #3
 8006170:	d03e      	beq.n	80061f0 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006172:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006174:	f042 0204 	orr.w	r2, r2, #4
 8006178:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800617a:	9001      	str	r0, [sp, #4]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	9201      	str	r2, [sp, #4]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	9201      	str	r2, [sp, #4]
 8006184:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006186:	07f0      	lsls	r0, r6, #31
 8006188:	d50c      	bpl.n	80061a4 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800618a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006192:	2200      	movs	r2, #0
 8006194:	9203      	str	r2, [sp, #12]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	9203      	str	r2, [sp, #12]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061a6:	b34a      	cbz	r2, 80061fc <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061ae:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80061b0:	2201      	movs	r2, #1
 80061b2:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061b6:	078a      	lsls	r2, r1, #30
 80061b8:	d022      	beq.n	8006200 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061ba:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80061bc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061be:	f022 0203 	bic.w	r2, r2, #3
 80061c2:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80061c4:	b140      	cbz	r0, 80061d8 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <HAL_SPI_IRQHandler+0xe8>)
 80061c8:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061ca:	f7fc fce7 	bl	8002b9c <HAL_DMA_Abort_IT>
 80061ce:	b118      	cbz	r0, 80061d8 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80061d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061d6:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80061d8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80061da:	b178      	cbz	r0, 80061fc <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <HAL_SPI_IRQHandler+0xe8>)
 80061de:	6343      	str	r3, [r0, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061e0:	f7fc fcdc 	bl	8002b9c <HAL_DMA_Abort_IT>
 80061e4:	b150      	cbz	r0, 80061fc <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80061e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80061ee:	e005      	b.n	80061fc <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	9202      	str	r2, [sp, #8]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	9302      	str	r3, [sp, #8]
 80061fa:	9b02      	ldr	r3, [sp, #8]
}
 80061fc:	b005      	add	sp, #20
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8006200:	4620      	mov	r0, r4
 8006202:	f7ff ff8c 	bl	800611e <HAL_SPI_ErrorCallback>
 8006206:	e7f9      	b.n	80061fc <HAL_SPI_IRQHandler+0xdc>
 8006208:	0800620d 	.word	0x0800620d

0800620c <SPI_DMAAbortOnError>:
{
 800620c:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800620e:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006210:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  hspi->RxXferCount = 0U;
 8006212:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006214:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 8006216:	f7ff ff82 	bl	800611e <HAL_SPI_ErrorCallback>
}
 800621a:	bd08      	pop	{r3, pc}

0800621c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800621e:	6a02      	ldr	r2, [r0, #32]
{
 8006220:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800622c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800622e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006232:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006234:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006236:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800623a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800623c:	4d0a      	ldr	r5, [pc, #40]	@ (8006268 <TIM_OC1_SetConfig+0x4c>)
 800623e:	42a8      	cmp	r0, r5
 8006240:	d10b      	bne.n	800625a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006242:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006248:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800624a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800624e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006252:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006254:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006258:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625e:	684a      	ldr	r2, [r1, #4]
 8006260:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	6203      	str	r3, [r0, #32]
}
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	bf00      	nop
 8006268:	40012c00 	.word	0x40012c00

0800626c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626e:	6a02      	ldr	r2, [r0, #32]
{
 8006270:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006272:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006276:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006282:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006284:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006286:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800628a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800628e:	4d0b      	ldr	r5, [pc, #44]	@ (80062bc <TIM_OC3_SetConfig+0x50>)
 8006290:	42a8      	cmp	r0, r5
 8006292:	d10d      	bne.n	80062b0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006294:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800629a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80062a6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ac:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b4:	684a      	ldr	r2, [r1, #4]
 80062b6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	6203      	str	r3, [r0, #32]
}
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	40012c00 	.word	0x40012c00

080062c0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c2:	6a02      	ldr	r2, [r0, #32]
{
 80062c4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062ca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062da:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80062dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	4d06      	ldr	r5, [pc, #24]	@ (8006300 <TIM_OC4_SetConfig+0x40>)
 80062e6:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e8:	bf02      	ittt	eq
 80062ea:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ec:	f424 4480 	biceq.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f8:	684a      	ldr	r2, [r1, #4]
 80062fa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fc:	6203      	str	r3, [r0, #32]
}
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	40012c00 	.word	0x40012c00

08006304 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006304:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006308:	2b01      	cmp	r3, #1
 800630a:	d120      	bne.n	800634e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	2302      	movs	r3, #2
 800630e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006312:	6803      	ldr	r3, [r0, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631c:	4a0d      	ldr	r2, [pc, #52]	@ (8006354 <HAL_TIM_Base_Start_IT+0x50>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00a      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x34>
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006326:	d007      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x34>
 8006328:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x34>
 8006330:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006334:	4293      	cmp	r3, r2
 8006336:	d104      	bne.n	8006342 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633e:	2a06      	cmp	r2, #6
 8006340:	d003      	beq.n	800634a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f042 0201 	orr.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800634a:	2000      	movs	r0, #0
 800634c:	4770      	bx	lr
    return HAL_ERROR;
 800634e:	2001      	movs	r0, #1
}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00

08006358 <HAL_TIM_Encoder_Start>:
{
 8006358:	4603      	mov	r3, r0
 800635a:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800635c:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006360:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006364:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006368:	f893 4043 	ldrb.w	r4, [r3, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800636c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800636e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006370:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006372:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8006374:	b9c1      	cbnz	r1, 80063a8 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006376:	2801      	cmp	r0, #1
 8006378:	d145      	bne.n	8006406 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800637a:	2d01      	cmp	r5, #1
 800637c:	d113      	bne.n	80063a6 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006388:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800638a:	6a11      	ldr	r1, [r2, #32]
 800638c:	f021 0101 	bic.w	r1, r1, #1
 8006390:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006392:	6a11      	ldr	r1, [r2, #32]
 8006394:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 8006398:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800639a:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	6013      	str	r3, [r2, #0]
}
 80063a6:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80063a8:	2904      	cmp	r1, #4
 80063aa:	d111      	bne.n	80063d0 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ac:	2a01      	cmp	r2, #1
 80063ae:	d12a      	bne.n	8006406 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063b0:	2c01      	cmp	r4, #1
 80063b2:	d128      	bne.n	8006406 <HAL_TIM_Encoder_Start+0xae>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063be:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 80063c0:	6a11      	ldr	r1, [r2, #32]
 80063c2:	f021 0110 	bic.w	r1, r1, #16
 80063c6:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c8:	6a11      	ldr	r1, [r2, #32]
 80063ca:	f041 0110 	orr.w	r1, r1, #16
 80063ce:	e7e3      	b.n	8006398 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d0:	2801      	cmp	r0, #1
 80063d2:	d118      	bne.n	8006406 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d4:	2a01      	cmp	r2, #1
 80063d6:	d1e6      	bne.n	80063a6 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d8:	2d01      	cmp	r5, #1
 80063da:	d1e4      	bne.n	80063a6 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063dc:	2c01      	cmp	r4, #1
 80063de:	d1e2      	bne.n	80063a6 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063f2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 80063f4:	6a11      	ldr	r1, [r2, #32]
 80063f6:	f021 0101 	bic.w	r1, r1, #1
 80063fa:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063fc:	6a11      	ldr	r1, [r2, #32]
 80063fe:	f041 0101 	orr.w	r1, r1, #1
 8006402:	6211      	str	r1, [r2, #32]
 8006404:	e7dc      	b.n	80063c0 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8006406:	2001      	movs	r0, #1
 8006408:	e7cd      	b.n	80063a6 <HAL_TIM_Encoder_Start+0x4e>

0800640a <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800640e:	4770      	bx	lr

08006410 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006412:	6803      	ldr	r3, [r0, #0]
{
 8006414:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006416:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006418:	691e      	ldr	r6, [r3, #16]
{
 800641a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800641c:	07b1      	lsls	r1, r6, #30
 800641e:	d50d      	bpl.n	800643c <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006420:	07aa      	lsls	r2, r5, #30
 8006422:	d50b      	bpl.n	800643c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006424:	f06f 0202 	mvn.w	r2, #2
 8006428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800642a:	2201      	movs	r2, #1
 800642c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	079b      	lsls	r3, r3, #30
 8006432:	d069      	beq.n	8006508 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8006434:	f7ff ffea 	bl	800640c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006438:	2300      	movs	r3, #0
 800643a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800643c:	0771      	lsls	r1, r6, #29
 800643e:	d510      	bpl.n	8006462 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006440:	076a      	lsls	r2, r5, #29
 8006442:	d50e      	bpl.n	8006462 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006444:	f06f 0204 	mvn.w	r2, #4
 8006448:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800644a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644e:	2202      	movs	r2, #2
 8006450:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006458:	d05c      	beq.n	8006514 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	f7ff ffd7 	bl	800640c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645e:	2300      	movs	r3, #0
 8006460:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006462:	0733      	lsls	r3, r6, #28
 8006464:	d50f      	bpl.n	8006486 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006466:	0728      	lsls	r0, r5, #28
 8006468:	d50d      	bpl.n	8006486 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800646a:	f06f 0208 	mvn.w	r2, #8
 800646e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8006470:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006474:	2204      	movs	r2, #4
 8006476:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	0799      	lsls	r1, r3, #30
 800647c:	d050      	beq.n	8006520 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800647e:	f7ff ffc5 	bl	800640c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	2300      	movs	r3, #0
 8006484:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006486:	06f2      	lsls	r2, r6, #27
 8006488:	d510      	bpl.n	80064ac <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800648a:	06eb      	lsls	r3, r5, #27
 800648c:	d50e      	bpl.n	80064ac <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800648e:	f06f 0210 	mvn.w	r2, #16
 8006492:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8006494:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006498:	2208      	movs	r2, #8
 800649a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80064a2:	d043      	beq.n	800652c <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80064a4:	f7ff ffb2 	bl	800640c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	2300      	movs	r3, #0
 80064aa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064ac:	07f0      	lsls	r0, r6, #31
 80064ae:	d508      	bpl.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064b0:	07e9      	lsls	r1, r5, #31
 80064b2:	d506      	bpl.n	80064c2 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064b4:	f06f 0201 	mvn.w	r2, #1
 80064b8:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80064be:	f7fb fa85 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064c2:	0632      	lsls	r2, r6, #24
 80064c4:	d508      	bpl.n	80064d8 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064c6:	062b      	lsls	r3, r5, #24
 80064c8:	d506      	bpl.n	80064d8 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064ca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064ce:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 80064d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80064d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80064d4:	f000 f997 	bl	8006806 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064d8:	0670      	lsls	r0, r6, #25
 80064da:	d508      	bpl.n	80064ee <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064dc:	0669      	lsls	r1, r5, #25
 80064de:	d506      	bpl.n	80064ee <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064e4:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 80064e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80064ea:	f7ff ff91 	bl	8006410 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064ee:	06b2      	lsls	r2, r6, #26
 80064f0:	d522      	bpl.n	8006538 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064f2:	06ab      	lsls	r3, r5, #26
 80064f4:	d520      	bpl.n	8006538 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064f6:	f06f 0220 	mvn.w	r2, #32
 80064fa:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 80064fc:	4620      	mov	r0, r4
}
 80064fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006502:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006504:	f000 b97e 	b.w	8006804 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006508:	f7ff ff7f 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	4620      	mov	r0, r4
 800650e:	f7ff ff7e 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
 8006512:	e791      	b.n	8006438 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	f7ff ff79 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	4620      	mov	r0, r4
 800651a:	f7ff ff78 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
 800651e:	e79e      	b.n	800645e <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006520:	f7ff ff73 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	4620      	mov	r0, r4
 8006526:	f7ff ff72 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
 800652a:	e7aa      	b.n	8006482 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652c:	f7ff ff6d 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff ff6c 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
 8006536:	e7b7      	b.n	80064a8 <HAL_TIM_IRQHandler+0x96>
}
 8006538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800653c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	4a17      	ldr	r2, [pc, #92]	@ (800659c <TIM_Base_SetConfig+0x60>)
  tmpcr1 = TIMx->CR1;
 800653e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006540:	4290      	cmp	r0, r2
 8006542:	d00a      	beq.n	800655a <TIM_Base_SetConfig+0x1e>
 8006544:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006548:	d007      	beq.n	800655a <TIM_Base_SetConfig+0x1e>
 800654a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800654e:	4290      	cmp	r0, r2
 8006550:	d003      	beq.n	800655a <TIM_Base_SetConfig+0x1e>
 8006552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006556:	4290      	cmp	r0, r2
 8006558:	d107      	bne.n	800656a <TIM_Base_SetConfig+0x2e>
    tmpcr1 |= Structure->CounterMode;
 800655a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006560:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006562:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006568:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800656a:	694a      	ldr	r2, [r1, #20]
 800656c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006570:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006572:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006574:	688b      	ldr	r3, [r1, #8]
 8006576:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006578:	680b      	ldr	r3, [r1, #0]
 800657a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <TIM_Base_SetConfig+0x60>)
 800657e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8006580:	bf04      	itt	eq
 8006582:	690b      	ldreq	r3, [r1, #16]
 8006584:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006586:	2301      	movs	r3, #1
 8006588:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800658a:	6903      	ldr	r3, [r0, #16]
 800658c:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800658e:	bf42      	ittt	mi
 8006590:	6903      	ldrmi	r3, [r0, #16]
 8006592:	f023 0301 	bicmi.w	r3, r3, #1
 8006596:	6103      	strmi	r3, [r0, #16]
}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00

080065a0 <HAL_TIM_PWM_Init>:
{
 80065a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80065a2:	4604      	mov	r4, r0
 80065a4:	b330      	cbz	r0, 80065f4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80065a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80065ae:	b91b      	cbnz	r3, 80065b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80065b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80065b4:	f7fc f800 	bl	80025b8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c0:	1d21      	adds	r1, r4, #4
 80065c2:	f7ff ffbb 	bl	800653c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c6:	2301      	movs	r3, #1
  return HAL_OK;
 80065c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80065d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80065d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80065da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80065ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80065f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80065f4:	2001      	movs	r0, #1
 80065f6:	e7fc      	b.n	80065f2 <HAL_TIM_PWM_Init+0x52>

080065f8 <HAL_TIM_Encoder_Init>:
{
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	460d      	mov	r5, r1
  if (htim == NULL)
 80065fc:	4604      	mov	r4, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	d04c      	beq.n	800669c <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006602:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006606:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800660a:	b91b      	cbnz	r3, 8006614 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800660c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006610:	f7fb ff84 	bl	800251c <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006616:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800661c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006620:	6883      	ldr	r3, [r0, #8]
 8006622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662c:	f7ff ff86 	bl	800653c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006630:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8006632:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 8006634:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006636:	69ae      	ldr	r6, [r5, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8006638:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800663a:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800663c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006640:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006644:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8006648:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800664a:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800664c:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8006654:	68ee      	ldr	r6, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006656:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800665a:	4333      	orrs	r3, r6
 800665c:	6a2e      	ldr	r6, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800665e:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006662:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer = htim->Instance->CCER;
 8006666:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006668:	696e      	ldr	r6, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800666a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800666c:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800666e:	f027 0722 	bic.w	r7, r7, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006672:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  htim->Instance->SMCR = tmpsmcr;
 8006676:	6081      	str	r1, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006678:	4317      	orrs	r7, r2
  htim->Instance->CCMR1 = tmpccmr1;
 800667a:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800667e:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8006680:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006682:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8006696:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800669c:	2001      	movs	r0, #1
 800669e:	e7fc      	b.n	800669a <HAL_TIM_Encoder_Init+0xa2>

080066a0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80066a0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	6a02      	ldr	r2, [r0, #32]
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a6:	f022 0210 	bic.w	r2, r2, #16
 80066aa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80066ac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80066ae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80066bc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066c4:	4d0b      	ldr	r5, [pc, #44]	@ (80066f4 <TIM_OC2_SetConfig+0x54>)
 80066c6:	42a8      	cmp	r0, r5
 80066c8:	d10d      	bne.n	80066e6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066ca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80066cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d4:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80066dc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80066de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80066e6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80066e8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80066ea:	684a      	ldr	r2, [r1, #4]
 80066ec:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80066ee:	6203      	str	r3, [r0, #32]
}
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00

080066f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80066f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80066fa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80066fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006700:	2b01      	cmp	r3, #1
 8006702:	d04f      	beq.n	80067a4 <HAL_TIM_PWM_ConfigChannel+0xac>
 8006704:	2001      	movs	r0, #1
  switch (Channel)
 8006706:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006708:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 800670c:	d03a      	beq.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x8c>
 800670e:	d806      	bhi.n	800671e <HAL_TIM_PWM_ConfigChannel+0x26>
 8006710:	b1ba      	cbz	r2, 8006742 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8006712:	2a04      	cmp	r2, #4
 8006714:	d026      	beq.n	8006764 <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_UNLOCK(htim);
 8006716:	2300      	movs	r3, #0
 8006718:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800671c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800671e:	2a0c      	cmp	r2, #12
 8006720:	d1f9      	bne.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	f7ff fdcc 	bl	80062c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006728:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800672a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800672c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006730:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006732:	69c3      	ldr	r3, [r0, #28]
 8006734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006738:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800673a:	69c3      	ldr	r3, [r0, #28]
 800673c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006740:	e02e      	b.n	80067a0 <HAL_TIM_PWM_ConfigChannel+0xa8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	f7ff fd6a 	bl	800621c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006748:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800674a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800674c:	f043 0308 	orr.w	r3, r3, #8
 8006750:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006752:	6983      	ldr	r3, [r0, #24]
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800675a:	6983      	ldr	r3, [r0, #24]
 800675c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800675e:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006760:	2000      	movs	r0, #0
 8006762:	e7d8      	b.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	f7ff ff9b 	bl	80066a0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800676a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800676c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800676e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006772:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006774:	6983      	ldr	r3, [r0, #24]
 8006776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800677c:	6983      	ldr	r3, [r0, #24]
 800677e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006782:	e7ec      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x66>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f7ff fd71 	bl	800626c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800678a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800678c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800678e:	f043 0308 	orr.w	r3, r3, #8
 8006792:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006794:	69c3      	ldr	r3, [r0, #28]
 8006796:	f023 0304 	bic.w	r3, r3, #4
 800679a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679c:	69c3      	ldr	r3, [r0, #28]
 800679e:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067a0:	61c3      	str	r3, [r0, #28]
      break;
 80067a2:	e7dd      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x68>
  __HAL_LOCK(htim);
 80067a4:	2002      	movs	r0, #2
 80067a6:	e7b9      	b.n	800671c <HAL_TIM_PWM_ConfigChannel+0x24>

080067a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067a8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067aa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80067ae:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f04f 0002 	mov.w	r0, #2
 80067b6:	d022      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80067ba:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80067be:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80067c2:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ca:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067cc:	4c0c      	ldr	r4, [pc, #48]	@ (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	d00a      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d6:	d007      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80067d8:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d003      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80067e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d104      	bne.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ea:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ee:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80067f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80067f6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80067fa:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 80067fe:	bd30      	pop	{r4, r5, pc}
 8006800:	40012c00 	.word	0x40012c00

08006804 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006804:	4770      	bx	lr

08006806 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006806:	4770      	bx	lr

08006808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006808:	b084      	sub	sp, #16
 800680a:	a804      	add	r0, sp, #16
 800680c:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006810:	2000      	movs	r0, #0
 8006812:	b004      	add	sp, #16
 8006814:	4770      	bx	lr

08006816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006816:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006818:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 800681c:	2000      	movs	r0, #0
 800681e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006822:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8006826:	4770      	bx	lr

08006828 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006828:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800682c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006830:	045b      	lsls	r3, r3, #17
 8006832:	0c5b      	lsrs	r3, r3, #17
 8006834:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8006838:	2000      	movs	r0, #0
 800683a:	4770      	bx	lr

0800683c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800683c:	2000      	movs	r0, #0
 800683e:	4770      	bx	lr

08006840 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	a804      	add	r0, sp, #16
 8006846:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800684a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800684c:	2301      	movs	r3, #1
 800684e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8006852:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006856:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800685a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 800685e:	b004      	add	sp, #16
 8006860:	bd10      	pop	{r4, pc}
	...

08006864 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006866:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006868:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800686a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800686e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006870:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8006874:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8006878:	0424      	lsls	r4, r4, #16
 800687a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800687c:	2d03      	cmp	r5, #3
 800687e:	d803      	bhi.n	8006888 <USB_ActivateEndpoint+0x24>
 8006880:	e8df f005 	tbb	[pc, r5]
 8006884:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8006888:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800688a:	f248 0680 	movw	r6, #32896	@ 0x8080
 800688e:	4334      	orrs	r4, r6
 8006890:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006894:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006898:	4f9f      	ldr	r7, [pc, #636]	@ (8006b18 <USB_ActivateEndpoint+0x2b4>)
 800689a:	b2a4      	uxth	r4, r4
 800689c:	403c      	ands	r4, r7
 800689e:	4314      	orrs	r4, r2
 80068a0:	4334      	orrs	r4, r6
 80068a2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80068a6:	7b0c      	ldrb	r4, [r1, #12]
 80068a8:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80068ac:	2c00      	cmp	r4, #0
 80068ae:	f040 808d 	bne.w	80069cc <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068b2:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 80068b4:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068b6:	0864      	lsrs	r4, r4, #1
 80068b8:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 80068ba:	b37e      	cbz	r6, 800691c <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068bc:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80068c0:	b289      	uxth	r1, r1
 80068c2:	4461      	add	r1, ip
 80068c4:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80068cc:	0649      	lsls	r1, r1, #25
 80068ce:	d509      	bpl.n	80068e4 <USB_ActivateEndpoint+0x80>
 80068d0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80068d4:	b289      	uxth	r1, r1
 80068d6:	4039      	ands	r1, r7
 80068d8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80068dc:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80068e0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80068e8:	4c8c      	ldr	r4, [pc, #560]	@ (8006b1c <USB_ActivateEndpoint+0x2b8>)
 80068ea:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80068ec:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068ee:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80068f2:	d001      	beq.n	80068f8 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068f4:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068f8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80068fc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006900:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8006904:	e04c      	b.n	80069a0 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8006906:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8006908:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 800690c:	e7bd      	b.n	800688a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 800690e:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8006912:	2000      	movs	r0, #0
 8006914:	e7b9      	b.n	800688a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006916:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 800691a:	e7fa      	b.n	8006912 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800691c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006920:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006922:	b2ad      	uxth	r5, r5
 8006924:	4465      	add	r5, ip
 8006926:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800692a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800692e:	293e      	cmp	r1, #62	@ 0x3e
 8006930:	b2a4      	uxth	r4, r4
 8006932:	4464      	add	r4, ip
 8006934:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8006938:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800693c:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8006940:	d92f      	bls.n	80069a2 <USB_ActivateEndpoint+0x13e>
 8006942:	094d      	lsrs	r5, r1, #5
 8006944:	06ce      	lsls	r6, r1, #27
 8006946:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800694a:	bf08      	it	eq
 800694c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006950:	b289      	uxth	r1, r1
 8006952:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8006956:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800695a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800695e:	b289      	uxth	r1, r1
 8006960:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006964:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006968:	044f      	lsls	r7, r1, #17
 800696a:	d50d      	bpl.n	8006988 <USB_ActivateEndpoint+0x124>
 800696c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006970:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006974:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006978:	0409      	lsls	r1, r1, #16
 800697a:	0c09      	lsrs	r1, r1, #16
 800697c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006980:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006984:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8006988:	4c65      	ldr	r4, [pc, #404]	@ (8006b20 <USB_ActivateEndpoint+0x2bc>)
 800698a:	b9c2      	cbnz	r2, 80069be <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698c:	881a      	ldrh	r2, [r3, #0]
 800698e:	b292      	uxth	r2, r2
 8006990:	4022      	ands	r2, r4
 8006992:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8006996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800699a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800699e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80069a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80069a2:	b911      	cbnz	r1, 80069aa <USB_ActivateEndpoint+0x146>
 80069a4:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80069a8:	e7d5      	b.n	8006956 <USB_ActivateEndpoint+0xf2>
 80069aa:	084d      	lsrs	r5, r1, #1
 80069ac:	07c9      	lsls	r1, r1, #31
 80069ae:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80069b2:	bf48      	it	mi
 80069b4:	3501      	addmi	r5, #1
 80069b6:	b289      	uxth	r1, r1
 80069b8:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80069bc:	e7cf      	b.n	800695e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80069c2:	b289      	uxth	r1, r1
 80069c4:	4021      	ands	r1, r4
 80069c6:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 80069ca:	e795      	b.n	80068f8 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 80069cc:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069ce:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 80069d2:	d15b      	bne.n	8006a8c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069d4:	b2a4      	uxth	r4, r4
 80069d6:	403c      	ands	r4, r7
 80069d8:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 80069dc:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 80069e0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069e4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80069e8:	890e      	ldrh	r6, [r1, #8]
 80069ea:	b2a4      	uxth	r4, r4
 80069ec:	0876      	lsrs	r6, r6, #1
 80069ee:	4464      	add	r4, ip
 80069f0:	0076      	lsls	r6, r6, #1
 80069f2:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 80069f6:	894e      	ldrh	r6, [r1, #10]
 80069f8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80069fc:	0876      	lsrs	r6, r6, #1
 80069fe:	b2a4      	uxth	r4, r4
 8006a00:	4464      	add	r4, ip
 8006a02:	0076      	lsls	r6, r6, #1
 8006a04:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8006a08:	7849      	ldrb	r1, [r1, #1]
 8006a0a:	2900      	cmp	r1, #0
 8006a0c:	d148      	bne.n	8006aa0 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a12:	044e      	lsls	r6, r1, #17
 8006a14:	d50d      	bpl.n	8006a32 <USB_ActivateEndpoint+0x1ce>
 8006a16:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a1a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006a1e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006a22:	0409      	lsls	r1, r1, #16
 8006a24:	0c09      	lsrs	r1, r1, #16
 8006a26:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006a2a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006a2e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a32:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a36:	064d      	lsls	r5, r1, #25
 8006a38:	d50d      	bpl.n	8006a56 <USB_ActivateEndpoint+0x1f2>
 8006a3a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a3e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006a42:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006a46:	0409      	lsls	r1, r1, #16
 8006a48:	0c09      	lsrs	r1, r1, #16
 8006a4a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006a4e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006a52:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a56:	f248 0480 	movw	r4, #32896	@ 0x8080
 8006a5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a5e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8006a62:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006a66:	0409      	lsls	r1, r1, #16
 8006a68:	0c09      	lsrs	r1, r1, #16
 8006a6a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8006a6e:	4321      	orrs	r1, r4
 8006a70:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006a78:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006a7c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006a80:	0409      	lsls	r1, r1, #16
 8006a82:	0c09      	lsrs	r1, r1, #16
 8006a84:	430c      	orrs	r4, r1
 8006a86:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8006a8a:	e789      	b.n	80069a0 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a8c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8006a90:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8006a94:	0424      	lsls	r4, r4, #16
 8006a96:	0c24      	lsrs	r4, r4, #16
 8006a98:	4326      	orrs	r6, r4
 8006a9a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8006a9e:	e7a1      	b.n	80069e4 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006aa4:	044c      	lsls	r4, r1, #17
 8006aa6:	d50d      	bpl.n	8006ac4 <USB_ActivateEndpoint+0x260>
 8006aa8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006aac:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006ab0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006ab4:	0409      	lsls	r1, r1, #16
 8006ab6:	0c09      	lsrs	r1, r1, #16
 8006ab8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006abc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006ac0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006ac8:	0649      	lsls	r1, r1, #25
 8006aca:	d50d      	bpl.n	8006ae8 <USB_ActivateEndpoint+0x284>
 8006acc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006ad0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006ad4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006ad8:	0409      	lsls	r1, r1, #16
 8006ada:	0c09      	lsrs	r1, r1, #16
 8006adc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006ae0:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006ae4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ae8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006aec:	4c0b      	ldr	r4, [pc, #44]	@ (8006b1c <USB_ActivateEndpoint+0x2b8>)
 8006aee:	b289      	uxth	r1, r1
 8006af0:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006af2:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006af4:	bf18      	it	ne
 8006af6:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006afa:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006afe:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006b02:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b06:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b0a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8006b0e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006b12:	0409      	lsls	r1, r1, #16
 8006b14:	0c09      	lsrs	r1, r1, #16
 8006b16:	e6ef      	b.n	80068f8 <USB_ActivateEndpoint+0x94>
 8006b18:	ffff8f8f 	.word	0xffff8f8f
 8006b1c:	ffff8fbf 	.word	0xffff8fbf
 8006b20:	ffffbf8f 	.word	0xffffbf8f

08006b24 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8006b24:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b26:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8006b28:	7b09      	ldrb	r1, [r1, #12]
 8006b2a:	bbd9      	cbnz	r1, 8006ba4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8006b2c:	b30a      	cbz	r2, 8006b72 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b2e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b32:	0651      	lsls	r1, r2, #25
 8006b34:	d50d      	bpl.n	8006b52 <USB_DeactivateEndpoint+0x2e>
 8006b36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b3a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006b3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b42:	0412      	lsls	r2, r2, #16
 8006b44:	0c12      	lsrs	r2, r2, #16
 8006b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b4a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006b4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b56:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b5e:	0412      	lsls	r2, r2, #16
 8006b60:	0c12      	lsrs	r2, r2, #16
 8006b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b6a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006b6e:	2000      	movs	r0, #0
 8006b70:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b72:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b76:	0452      	lsls	r2, r2, #17
 8006b78:	d50d      	bpl.n	8006b96 <USB_DeactivateEndpoint+0x72>
 8006b7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b7e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006b82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b86:	0412      	lsls	r2, r2, #16
 8006b88:	0c12      	lsrs	r2, r2, #16
 8006b8a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006b8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b96:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006b9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006ba2:	e7dc      	b.n	8006b5e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d14a      	bne.n	8006c3e <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006bac:	0451      	lsls	r1, r2, #17
 8006bae:	d50d      	bpl.n	8006bcc <USB_DeactivateEndpoint+0xa8>
 8006bb0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006bb4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006bb8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006bbc:	0412      	lsls	r2, r2, #16
 8006bbe:	0c12      	lsrs	r2, r2, #16
 8006bc0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006bc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bc8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bcc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006bd0:	0652      	lsls	r2, r2, #25
 8006bd2:	d50d      	bpl.n	8006bf0 <USB_DeactivateEndpoint+0xcc>
 8006bd4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006bd8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006bdc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006be0:	0412      	lsls	r2, r2, #16
 8006be2:	0c12      	lsrs	r2, r2, #16
 8006be4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006be8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006bec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bf0:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8006bf4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006bf8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006bfc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c00:	0412      	lsls	r2, r2, #16
 8006c02:	0c12      	lsrs	r2, r2, #16
 8006c04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c08:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006c0c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c1c:	0412      	lsls	r2, r2, #16
 8006c1e:	0c12      	lsrs	r2, r2, #16
 8006c20:	430a      	orrs	r2, r1
 8006c22:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c2a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c32:	0412      	lsls	r2, r2, #16
 8006c34:	0c12      	lsrs	r2, r2, #16
 8006c36:	4311      	orrs	r1, r2
 8006c38:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8006c3c:	e797      	b.n	8006b6e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c42:	0451      	lsls	r1, r2, #17
 8006c44:	d50d      	bpl.n	8006c62 <USB_DeactivateEndpoint+0x13e>
 8006c46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c4a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006c4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c52:	0412      	lsls	r2, r2, #16
 8006c54:	0c12      	lsrs	r2, r2, #16
 8006c56:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006c5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c66:	0652      	lsls	r2, r2, #25
 8006c68:	d50d      	bpl.n	8006c86 <USB_DeactivateEndpoint+0x162>
 8006c6a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c6e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006c72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c76:	0412      	lsls	r2, r2, #16
 8006c78:	0c12      	lsrs	r2, r2, #16
 8006c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c7e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006c82:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c86:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8006c8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006c8e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006c92:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c96:	0412      	lsls	r2, r2, #16
 8006c98:	0c12      	lsrs	r2, r2, #16
 8006c9a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006c9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ca2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006caa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb2:	0412      	lsls	r2, r2, #16
 8006cb4:	0c12      	lsrs	r2, r2, #16
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cbc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006cc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006cc8:	e7b3      	b.n	8006c32 <USB_DeactivateEndpoint+0x10e>

08006cca <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006cca:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ccc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8006cce:	b18b      	cbz	r3, 8006cf4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d08:	e7ec      	b.n	8006ce4 <USB_EPSetStall+0x1a>

08006d0a <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006d0a:	7b0b      	ldrb	r3, [r1, #12]
 8006d0c:	bb3b      	cbnz	r3, 8006d5e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8006d0e:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d10:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8006d12:	b333      	cbz	r3, 8006d62 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d18:	065b      	lsls	r3, r3, #25
 8006d1a:	d50d      	bpl.n	8006d38 <USB_EPClearStall+0x2e>
 8006d1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006d38:	78cb      	ldrb	r3, [r1, #3]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d00f      	beq.n	8006d5e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006d5e:	2000      	movs	r0, #0
 8006d60:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d66:	045b      	lsls	r3, r3, #17
 8006d68:	d50d      	bpl.n	8006d86 <USB_EPClearStall+0x7c>
 8006d6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8006d9a:	e7da      	b.n	8006d52 <USB_EPClearStall+0x48>

08006d9c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006d9c:	b911      	cbnz	r1, 8006da4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d9e:	2380      	movs	r3, #128	@ 0x80
 8006da0:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8006da4:	2000      	movs	r0, #0
 8006da6:	4770      	bx	lr

08006da8 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8006da8:	2000      	movs	r0, #0
 8006daa:	4770      	bx	lr

08006dac <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8006dac:	2000      	movs	r0, #0
 8006dae:	4770      	bx	lr

08006db0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006db0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8006db4:	b280      	uxth	r0, r0
 8006db6:	4770      	bx	lr

08006db8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006db8:	2000      	movs	r0, #0
 8006dba:	4770      	bx	lr

08006dbc <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dbc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dc0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dc2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8006dcc:	4283      	cmp	r3, r0
 8006dce:	d100      	bne.n	8006dd2 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8006dd0:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006dd2:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8006dd6:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8006dda:	e7f7      	b.n	8006dcc <USB_WritePMA+0x10>

08006ddc <USB_EPStartXfer>:
{
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8006de0:	784b      	ldrb	r3, [r1, #1]
{
 8006de2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8006de4:	2b01      	cmp	r3, #1
{
 8006de6:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8006de8:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8006dea:	f040 8118 	bne.w	800701e <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8006dee:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8006df2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006df4:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8006df6:	454f      	cmp	r7, r9
 8006df8:	bf28      	it	cs
 8006dfa:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8006dfc:	bb0a      	cbnz	r2, 8006e42 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006dfe:	b2bf      	uxth	r7, r7
 8006e00:	88ea      	ldrh	r2, [r5, #6]
 8006e02:	463b      	mov	r3, r7
 8006e04:	f7ff ffda 	bl	8006dbc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e08:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8006e0c:	7829      	ldrb	r1, [r5, #0]
 8006e0e:	b280      	uxth	r0, r0
 8006e10:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8006e14:	0109      	lsls	r1, r1, #4
 8006e16:	4402      	add	r2, r0
 8006e18:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e1a:	782a      	ldrb	r2, [r5, #0]
 8006e1c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8006e30:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8006e42:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e44:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8006e48:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8006e4a:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e4c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8006e50:	f040 80d0 	bne.w	8006ff4 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8006e54:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e56:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8006e5a:	f080 80b4 	bcs.w	8006fc6 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e5e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e66:	0412      	lsls	r2, r2, #16
 8006e68:	0c12      	lsrs	r2, r2, #16
 8006e6a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8006e6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e72:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e76:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e7a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8006e7e:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e80:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8006e84:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8006e86:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e8a:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e8c:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e90:	d04e      	beq.n	8006f30 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e92:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8006e96:	4472      	add	r2, lr
 8006e98:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e9c:	896a      	ldrh	r2, [r5, #10]
 8006e9e:	f7ff ff8d 	bl	8006dbc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006ea2:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8006ea4:	bf36      	itet	cc
 8006ea6:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8006ea8:	2300      	movcs	r3, #0
 8006eaa:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eac:	786a      	ldrb	r2, [r5, #1]
 8006eae:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8006eb0:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006eb4:	b2b3      	uxth	r3, r6
 8006eb6:	bb7a      	cbnz	r2, 8006f18 <USB_EPStartXfer+0x13c>
 8006eb8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8006ebc:	7828      	ldrb	r0, [r5, #0]
 8006ebe:	b292      	uxth	r2, r2
 8006ec0:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8006ec4:	0100      	lsls	r0, r0, #4
 8006ec6:	4411      	add	r1, r2
 8006ec8:	5a42      	ldrh	r2, [r0, r1]
 8006eca:	2e3e      	cmp	r6, #62	@ 0x3e
 8006ecc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006ed0:	5242      	strh	r2, [r0, r1]
 8006ed2:	d914      	bls.n	8006efe <USB_EPStartXfer+0x122>
 8006ed4:	5a42      	ldrh	r2, [r0, r1]
 8006ed6:	0977      	lsrs	r7, r6, #5
 8006ed8:	06f6      	lsls	r6, r6, #27
 8006eda:	bf08      	it	eq
 8006edc:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006ee6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006eea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006eee:	b292      	uxth	r2, r2
 8006ef0:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ef2:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ef8:	f7ff ff60 	bl	8006dbc <USB_WritePMA>
 8006efc:	e78d      	b.n	8006e1a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efe:	b90e      	cbnz	r6, 8006f04 <USB_EPStartXfer+0x128>
 8006f00:	5a42      	ldrh	r2, [r0, r1]
 8006f02:	e7f0      	b.n	8006ee6 <USB_EPStartXfer+0x10a>
 8006f04:	07f2      	lsls	r2, r6, #31
 8006f06:	5a42      	ldrh	r2, [r0, r1]
 8006f08:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8006f0c:	bf48      	it	mi
 8006f0e:	3701      	addmi	r7, #1
 8006f10:	b292      	uxth	r2, r2
 8006f12:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006f16:	e7ea      	b.n	8006eee <USB_EPStartXfer+0x112>
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	d1ea      	bne.n	8006ef2 <USB_EPStartXfer+0x116>
 8006f1c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8006f20:	7829      	ldrb	r1, [r5, #0]
 8006f22:	b280      	uxth	r0, r0
 8006f24:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8006f28:	0109      	lsls	r1, r1, #4
 8006f2a:	4402      	add	r2, r0
 8006f2c:	528b      	strh	r3, [r1, r2]
 8006f2e:	e7e0      	b.n	8006ef2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f30:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8006f34:	4472      	add	r2, lr
 8006f36:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f3a:	892a      	ldrh	r2, [r5, #8]
 8006f3c:	f7ff ff3e 	bl	8006dbc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006f40:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8006f42:	bf36      	itet	cc
 8006f44:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8006f46:	4643      	movcs	r3, r8
 8006f48:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f4a:	786a      	ldrb	r2, [r5, #1]
 8006f4c:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8006f4e:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f52:	b2b3      	uxth	r3, r6
 8006f54:	bb5a      	cbnz	r2, 8006fae <USB_EPStartXfer+0x1d2>
 8006f56:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8006f5a:	7828      	ldrb	r0, [r5, #0]
 8006f5c:	b292      	uxth	r2, r2
 8006f5e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8006f62:	0100      	lsls	r0, r0, #4
 8006f64:	4411      	add	r1, r2
 8006f66:	5a42      	ldrh	r2, [r0, r1]
 8006f68:	2e3e      	cmp	r6, #62	@ 0x3e
 8006f6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006f6e:	5242      	strh	r2, [r0, r1]
 8006f70:	d910      	bls.n	8006f94 <USB_EPStartXfer+0x1b8>
 8006f72:	5a42      	ldrh	r2, [r0, r1]
 8006f74:	0977      	lsrs	r7, r6, #5
 8006f76:	06f6      	lsls	r6, r6, #27
 8006f78:	bf08      	it	eq
 8006f7a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006f84:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006f88:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f90:	896a      	ldrh	r2, [r5, #10]
 8006f92:	e7af      	b.n	8006ef4 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f94:	b90e      	cbnz	r6, 8006f9a <USB_EPStartXfer+0x1be>
 8006f96:	5a42      	ldrh	r2, [r0, r1]
 8006f98:	e7f4      	b.n	8006f84 <USB_EPStartXfer+0x1a8>
 8006f9a:	07f2      	lsls	r2, r6, #31
 8006f9c:	5a42      	ldrh	r2, [r0, r1]
 8006f9e:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8006fa2:	bf48      	it	mi
 8006fa4:	3701      	addmi	r7, #1
 8006fa6:	b292      	uxth	r2, r2
 8006fa8:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006fac:	e7ee      	b.n	8006f8c <USB_EPStartXfer+0x1b0>
 8006fae:	2a01      	cmp	r2, #1
 8006fb0:	d1ee      	bne.n	8006f90 <USB_EPStartXfer+0x1b4>
 8006fb2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8006fb6:	7829      	ldrb	r1, [r5, #0]
 8006fb8:	b280      	uxth	r0, r0
 8006fba:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8006fbe:	0109      	lsls	r1, r1, #4
 8006fc0:	4402      	add	r2, r0
 8006fc2:	528b      	strh	r3, [r1, r2]
 8006fc4:	e7e4      	b.n	8006f90 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006fc6:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8006fca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006fce:	0412      	lsls	r2, r2, #16
 8006fd0:	0c12      	lsrs	r2, r2, #16
 8006fd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fda:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fde:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8006fe2:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	441a      	add	r2, r3
 8006fea:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fec:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff0:	892a      	ldrh	r2, [r5, #8]
 8006ff2:	e781      	b.n	8006ef8 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8006ff4:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ff6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 8006ffa:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ffc:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007000:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007002:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007004:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007006:	d506      	bpl.n	8007016 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007008:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800700c:	4432      	add	r2, r6
 800700e:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007012:	896a      	ldrh	r2, [r5, #10]
 8007014:	e770      	b.n	8006ef8 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007016:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800701a:	4432      	add	r2, r6
 800701c:	e7e6      	b.n	8006fec <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 800701e:	2a00      	cmp	r2, #0
 8007020:	d13b      	bne.n	800709a <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8007022:	698b      	ldr	r3, [r1, #24]
 8007024:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007026:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800702a:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800702c:	bf84      	itt	hi
 800702e:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8007030:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007032:	7829      	ldrb	r1, [r5, #0]
 8007034:	61aa      	str	r2, [r5, #24]
 8007036:	b280      	uxth	r0, r0
 8007038:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800703c:	0109      	lsls	r1, r1, #4
 800703e:	4402      	add	r2, r0
 8007040:	5a88      	ldrh	r0, [r1, r2]
 8007042:	2b3e      	cmp	r3, #62	@ 0x3e
 8007044:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007048:	5288      	strh	r0, [r1, r2]
 800704a:	d91a      	bls.n	8007082 <USB_EPStartXfer+0x2a6>
 800704c:	0958      	lsrs	r0, r3, #5
 800704e:	06de      	lsls	r6, r3, #27
 8007050:	5a8b      	ldrh	r3, [r1, r2]
 8007052:	bf08      	it	eq
 8007054:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800705e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007066:	b29b      	uxth	r3, r3
 8007068:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800706a:	782a      	ldrb	r2, [r5, #0]
 800706c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8007070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	0c1b      	lsrs	r3, r3, #16
 800707c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007080:	e6d6      	b.n	8006e30 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007082:	b90b      	cbnz	r3, 8007088 <USB_EPStartXfer+0x2ac>
 8007084:	5a8b      	ldrh	r3, [r1, r2]
 8007086:	e7ea      	b.n	800705e <USB_EPStartXfer+0x282>
 8007088:	0858      	lsrs	r0, r3, #1
 800708a:	07db      	lsls	r3, r3, #31
 800708c:	5a8b      	ldrh	r3, [r1, r2]
 800708e:	bf48      	it	mi
 8007090:	3001      	addmi	r0, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8007098:	e7e5      	b.n	8007066 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800709a:	78ca      	ldrb	r2, [r1, #3]
 800709c:	2a02      	cmp	r2, #2
 800709e:	d170      	bne.n	8007182 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d138      	bne.n	8007116 <USB_EPStartXfer+0x33a>
 80070a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80070a8:	780b      	ldrb	r3, [r1, #0]
 80070aa:	b292      	uxth	r2, r2
 80070ac:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	4410      	add	r0, r2
 80070b4:	5ac2      	ldrh	r2, [r0, r3]
 80070b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80070ba:	52c2      	strh	r2, [r0, r3]
 80070bc:	690a      	ldr	r2, [r1, #16]
 80070be:	2a3e      	cmp	r2, #62	@ 0x3e
 80070c0:	d946      	bls.n	8007150 <USB_EPStartXfer+0x374>
 80070c2:	5ac1      	ldrh	r1, [r0, r3]
 80070c4:	0956      	lsrs	r6, r2, #5
 80070c6:	06d7      	lsls	r7, r2, #27
 80070c8:	bf08      	it	eq
 80070ca:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80070ce:	b289      	uxth	r1, r1
 80070d0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80070d4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80070d8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80070dc:	b289      	uxth	r1, r1
 80070de:	52c1      	strh	r1, [r0, r3]
 80070e0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80070e4:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80070e8:	b280      	uxth	r0, r0
 80070ea:	4401      	add	r1, r0
 80070ec:	5ac8      	ldrh	r0, [r1, r3]
 80070ee:	2a3e      	cmp	r2, #62	@ 0x3e
 80070f0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80070f4:	52c8      	strh	r0, [r1, r3]
 80070f6:	d938      	bls.n	800716a <USB_EPStartXfer+0x38e>
 80070f8:	0950      	lsrs	r0, r2, #5
 80070fa:	06d7      	lsls	r7, r2, #27
 80070fc:	5aca      	ldrh	r2, [r1, r3]
 80070fe:	bf08      	it	eq
 8007100:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8007104:	b292      	uxth	r2, r2
 8007106:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800710a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800710e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007112:	b292      	uxth	r2, r2
 8007114:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8007116:	69eb      	ldr	r3, [r5, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0a6      	beq.n	800706a <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800711c:	f244 0340 	movw	r3, #16448	@ 0x4040
 8007120:	782a      	ldrb	r2, [r5, #0]
 8007122:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007126:	ea03 0001 	and.w	r0, r3, r1
 800712a:	438b      	bics	r3, r1
 800712c:	d001      	beq.n	8007132 <USB_EPStartXfer+0x356>
 800712e:	2800      	cmp	r0, #0
 8007130:	d19b      	bne.n	800706a <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007132:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007146:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800714a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800714e:	e78c      	b.n	800706a <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007150:	b90a      	cbnz	r2, 8007156 <USB_EPStartXfer+0x37a>
 8007152:	5ac1      	ldrh	r1, [r0, r3]
 8007154:	e7be      	b.n	80070d4 <USB_EPStartXfer+0x2f8>
 8007156:	07d1      	lsls	r1, r2, #31
 8007158:	5ac1      	ldrh	r1, [r0, r3]
 800715a:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800715e:	bf48      	it	mi
 8007160:	3601      	addmi	r6, #1
 8007162:	b289      	uxth	r1, r1
 8007164:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007168:	e7b8      	b.n	80070dc <USB_EPStartXfer+0x300>
 800716a:	b90a      	cbnz	r2, 8007170 <USB_EPStartXfer+0x394>
 800716c:	5aca      	ldrh	r2, [r1, r3]
 800716e:	e7cc      	b.n	800710a <USB_EPStartXfer+0x32e>
 8007170:	0850      	lsrs	r0, r2, #1
 8007172:	07d6      	lsls	r6, r2, #31
 8007174:	5aca      	ldrh	r2, [r1, r3]
 8007176:	bf48      	it	mi
 8007178:	3001      	addmi	r0, #1
 800717a:	b292      	uxth	r2, r2
 800717c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007180:	e7c7      	b.n	8007112 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8007182:	2a01      	cmp	r2, #1
 8007184:	d15d      	bne.n	8007242 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8007186:	698a      	ldr	r2, [r1, #24]
 8007188:	6909      	ldr	r1, [r1, #16]
 800718a:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800718c:	bf94      	ite	ls
 800718e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007190:	1a50      	subhi	r0, r2, r1
 8007192:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8007194:	bf88      	it	hi
 8007196:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f af66 	bne.w	800706a <USB_EPStartXfer+0x28e>
 800719e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80071a2:	782b      	ldrb	r3, [r5, #0]
 80071a4:	b289      	uxth	r1, r1
 80071a6:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	4408      	add	r0, r1
 80071ae:	5ac1      	ldrh	r1, [r0, r3]
 80071b0:	2a3e      	cmp	r2, #62	@ 0x3e
 80071b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80071b6:	52c1      	strh	r1, [r0, r3]
 80071b8:	d92b      	bls.n	8007212 <USB_EPStartXfer+0x436>
 80071ba:	06d1      	lsls	r1, r2, #27
 80071bc:	5ac1      	ldrh	r1, [r0, r3]
 80071be:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80071c2:	bf08      	it	eq
 80071c4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80071c8:	b289      	uxth	r1, r1
 80071ca:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80071ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80071d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80071d6:	b289      	uxth	r1, r1
 80071d8:	52c1      	strh	r1, [r0, r3]
 80071da:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80071de:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80071e2:	b280      	uxth	r0, r0
 80071e4:	4401      	add	r1, r0
 80071e6:	5ac8      	ldrh	r0, [r1, r3]
 80071e8:	2a3e      	cmp	r2, #62	@ 0x3e
 80071ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80071ee:	52c8      	strh	r0, [r1, r3]
 80071f0:	d91b      	bls.n	800722a <USB_EPStartXfer+0x44e>
 80071f2:	0950      	lsrs	r0, r2, #5
 80071f4:	06d6      	lsls	r6, r2, #27
 80071f6:	5aca      	ldrh	r2, [r1, r3]
 80071f8:	bf08      	it	eq
 80071fa:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80071fe:	b292      	uxth	r2, r2
 8007200:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007204:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007208:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800720c:	b292      	uxth	r2, r2
 800720e:	52ca      	strh	r2, [r1, r3]
 8007210:	e72b      	b.n	800706a <USB_EPStartXfer+0x28e>
 8007212:	b90a      	cbnz	r2, 8007218 <USB_EPStartXfer+0x43c>
 8007214:	5ac1      	ldrh	r1, [r0, r3]
 8007216:	e7da      	b.n	80071ce <USB_EPStartXfer+0x3f2>
 8007218:	5ac1      	ldrh	r1, [r0, r3]
 800721a:	0856      	lsrs	r6, r2, #1
 800721c:	07d7      	lsls	r7, r2, #31
 800721e:	bf48      	it	mi
 8007220:	3601      	addmi	r6, #1
 8007222:	b289      	uxth	r1, r1
 8007224:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007228:	e7d5      	b.n	80071d6 <USB_EPStartXfer+0x3fa>
 800722a:	b90a      	cbnz	r2, 8007230 <USB_EPStartXfer+0x454>
 800722c:	5aca      	ldrh	r2, [r1, r3]
 800722e:	e7e9      	b.n	8007204 <USB_EPStartXfer+0x428>
 8007230:	0850      	lsrs	r0, r2, #1
 8007232:	07d2      	lsls	r2, r2, #31
 8007234:	5aca      	ldrh	r2, [r1, r3]
 8007236:	bf48      	it	mi
 8007238:	3001      	addmi	r0, #1
 800723a:	b292      	uxth	r2, r2
 800723c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007240:	e7e4      	b.n	800720c <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8007242:	2001      	movs	r0, #1
 8007244:	e5fb      	b.n	8006e3e <USB_EPStartXfer+0x62>

08007246 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007246:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800724a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800724c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007250:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8007252:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007254:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8007256:	462e      	mov	r6, r5
 8007258:	3402      	adds	r4, #2
 800725a:	b936      	cbnz	r6, 800726a <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800725c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800725e:	bf44      	itt	mi
 8007260:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007264:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800726a:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800726e:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8007270:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007272:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007276:	0a12      	lsrs	r2, r2, #8
 8007278:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800727c:	e7ec      	b.n	8007258 <USB_ReadPMA+0x12>
	...

08007280 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007280:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007282:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007284:	4c14      	ldr	r4, [pc, #80]	@ (80072d8 <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007286:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007292:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007294:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007298:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800729a:	b10b      	cbz	r3, 80072a0 <WIZCHIP_READ+0x20>
 800729c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800729e:	b98b      	cbnz	r3, 80072c4 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80072a0:	6a23      	ldr	r3, [r4, #32]
 80072a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80072a4:	4630      	mov	r0, r6
 80072a6:	6a23      	ldr	r3, [r4, #32]
 80072a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80072aa:	4628      	mov	r0, r5
 80072ac:	6a23      	ldr	r3, [r4, #32]
 80072ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80072b0:	69e3      	ldr	r3, [r4, #28]
 80072b2:	4798      	blx	r3
 80072b4:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80072b6:	69a3      	ldr	r3, [r4, #24]
 80072b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	4798      	blx	r3
   return ret;
}
 80072be:	4628      	mov	r0, r5
 80072c0:	b002      	add	sp, #8
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80072c4:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80072c8:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80072ca:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80072ce:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80072d2:	a801      	add	r0, sp, #4
 80072d4:	4798      	blx	r3
 80072d6:	e7eb      	b.n	80072b0 <WIZCHIP_READ+0x30>
 80072d8:	20000028 	.word	0x20000028

080072dc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80072dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072de:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80072e0:	4c16      	ldr	r4, [pc, #88]	@ (800733c <WIZCHIP_WRITE+0x60>)
{
 80072e2:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 80072e4:	68e3      	ldr	r3, [r4, #12]
 80072e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80072ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80072ee:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80072f2:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80072f6:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80072f8:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80072fc:	b983      	cbnz	r3, 8007320 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80072fe:	6a23      	ldr	r3, [r4, #32]
 8007300:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007302:	4628      	mov	r0, r5
 8007304:	6a23      	ldr	r3, [r4, #32]
 8007306:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007308:	4638      	mov	r0, r7
 800730a:	6a23      	ldr	r3, [r4, #32]
 800730c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800730e:	4630      	mov	r0, r6
 8007310:	6a23      	ldr	r3, [r4, #32]
 8007312:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8007314:	69a3      	ldr	r3, [r4, #24]
 8007316:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	4798      	blx	r3
}
 800731c:	b003      	add	sp, #12
 800731e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007320:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007322:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007326:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800732a:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 800732e:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007332:	eb0d 0001 	add.w	r0, sp, r1
 8007336:	4798      	blx	r3
 8007338:	e7ec      	b.n	8007314 <WIZCHIP_WRITE+0x38>
 800733a:	bf00      	nop
 800733c:	20000028 	.word	0x20000028

08007340 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007344:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007346:	4c1a      	ldr	r4, [pc, #104]	@ (80073b0 <WIZCHIP_READ_BUF+0x70>)
{
 8007348:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 800734a:	68e3      	ldr	r3, [r4, #12]
{
 800734c:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 800734e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007350:	6963      	ldr	r3, [r4, #20]
 8007352:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007354:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007356:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800735a:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800735e:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007360:	b10b      	cbz	r3, 8007366 <WIZCHIP_READ_BUF+0x26>
 8007362:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007364:	b9b3      	cbnz	r3, 8007394 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007366:	6a23      	ldr	r3, [r4, #32]
 8007368:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800736a:	4640      	mov	r0, r8
 800736c:	6a23      	ldr	r3, [r4, #32]
 800736e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007370:	4628      	mov	r0, r5
 8007372:	6a23      	ldr	r3, [r4, #32]
 8007374:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007376:	4437      	add	r7, r6
 8007378:	42b7      	cmp	r7, r6
 800737a:	d106      	bne.n	800738a <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 800737c:	69a3      	ldr	r3, [r4, #24]
 800737e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	4798      	blx	r3
}
 8007384:	b002      	add	sp, #8
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800738a:	69e3      	ldr	r3, [r4, #28]
 800738c:	4798      	blx	r3
 800738e:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 8007392:	e7f1      	b.n	8007378 <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007394:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007398:	2103      	movs	r1, #3
 800739a:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800739c:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80073a0:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80073a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80073a6:	4639      	mov	r1, r7
 80073a8:	4630      	mov	r0, r6
 80073aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073ac:	4798      	blx	r3
 80073ae:	e7e5      	b.n	800737c <WIZCHIP_READ_BUF+0x3c>
 80073b0:	20000028 	.word	0x20000028

080073b4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80073b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073b8:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80073ba:	4c1a      	ldr	r4, [pc, #104]	@ (8007424 <WIZCHIP_WRITE_BUF+0x70>)
{
 80073bc:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 80073be:	68e3      	ldr	r3, [r4, #12]
{
 80073c0:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 80073c2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80073c4:	6963      	ldr	r3, [r4, #20]
 80073c6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80073c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80073ca:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80073ce:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80073d2:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80073d4:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80073d8:	b9b3      	cbnz	r3, 8007408 <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80073da:	6a23      	ldr	r3, [r4, #32]
 80073dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80073de:	4628      	mov	r0, r5
 80073e0:	6a23      	ldr	r3, [r4, #32]
 80073e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80073e4:	4630      	mov	r0, r6
 80073e6:	6a23      	ldr	r3, [r4, #32]
 80073e8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80073ea:	44b8      	add	r8, r7
 80073ec:	45b8      	cmp	r8, r7
 80073ee:	d106      	bne.n	80073fe <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 80073f0:	69a3      	ldr	r3, [r4, #24]
 80073f2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	4798      	blx	r3
}
 80073f8:	b002      	add	sp, #8
 80073fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80073fe:	6a23      	ldr	r3, [r4, #32]
 8007400:	f817 0b01 	ldrb.w	r0, [r7], #1
 8007404:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007406:	e7f1      	b.n	80073ec <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007408:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800740c:	2103      	movs	r1, #3
 800740e:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007410:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007414:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007418:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800741a:	4641      	mov	r1, r8
 800741c:	4638      	mov	r0, r7
 800741e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007420:	4798      	blx	r3
 8007422:	e7e5      	b.n	80073f0 <WIZCHIP_WRITE_BUF+0x3c>
 8007424:	20000028 	.word	0x20000028

08007428 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 800742a:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800742c:	0144      	lsls	r4, r0, #5
 800742e:	3408      	adds	r4, #8
 8007430:	f504 5700 	add.w	r7, r4, #8192	@ 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007434:	f504 5404 	add.w	r4, r4, #8448	@ 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ff21 	bl	8007280 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800743e:	0206      	lsls	r6, r0, #8
 8007440:	4620      	mov	r0, r4
 8007442:	f7ff ff1d 	bl	8007280 <WIZCHIP_READ>
 8007446:	b2b6      	uxth	r6, r6
 8007448:	4406      	add	r6, r0
 800744a:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 800744c:	b14e      	cbz	r6, 8007462 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800744e:	4638      	mov	r0, r7
 8007450:	f7ff ff16 	bl	8007280 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007454:	0205      	lsls	r5, r0, #8
 8007456:	4620      	mov	r0, r4
 8007458:	f7ff ff12 	bl	8007280 <WIZCHIP_READ>
 800745c:	b2ad      	uxth	r5, r5
 800745e:	4405      	add	r5, r0
 8007460:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 8007462:	42b5      	cmp	r5, r6
 8007464:	d1e8      	bne.n	8007438 <getSn_TX_FSR+0x10>
   return val;
}
 8007466:	4628      	mov	r0, r5
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800746a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800746a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 800746c:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800746e:	0144      	lsls	r4, r0, #5
 8007470:	3408      	adds	r4, #8
 8007472:	f504 5718 	add.w	r7, r4, #9728	@ 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007476:	f504 541c 	add.w	r4, r4, #9984	@ 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ff00 	bl	8007280 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007480:	0206      	lsls	r6, r0, #8
 8007482:	4620      	mov	r0, r4
 8007484:	f7ff fefc 	bl	8007280 <WIZCHIP_READ>
 8007488:	b2b6      	uxth	r6, r6
 800748a:	4406      	add	r6, r0
 800748c:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 800748e:	b14e      	cbz	r6, 80074a4 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff fef5 	bl	8007280 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007496:	0205      	lsls	r5, r0, #8
 8007498:	4620      	mov	r0, r4
 800749a:	f7ff fef1 	bl	8007280 <WIZCHIP_READ>
 800749e:	b2ad      	uxth	r5, r5
 80074a0:	4405      	add	r5, r0
 80074a2:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 80074a4:	42b5      	cmp	r5, r6
 80074a6:	d1e8      	bne.n	800747a <getSn_RX_RSR+0x10>
   return val;
}
 80074a8:	4628      	mov	r0, r5
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074ac <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80074b2:	4614      	mov	r4, r2
 80074b4:	b32a      	cbz	r2, 8007502 <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 80074b6:	0085      	lsls	r5, r0, #2
 80074b8:	1c6f      	adds	r7, r5, #1
 80074ba:	00ff      	lsls	r7, r7, #3
 80074bc:	f507 5810 	add.w	r8, r7, #9216	@ 0x2400
 80074c0:	4640      	mov	r0, r8
 80074c2:	f7ff fedd 	bl	8007280 <WIZCHIP_READ>
 80074c6:	f507 5714 	add.w	r7, r7, #9472	@ 0x2500
 80074ca:	4606      	mov	r6, r0
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff fed7 	bl	8007280 <WIZCHIP_READ>
 80074d2:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 80074d6:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80074d8:	3502      	adds	r5, #2
 80074da:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80074dc:	4622      	mov	r2, r4
 80074de:	4649      	mov	r1, r9
 80074e0:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 80074e4:	f7ff ff66 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80074e8:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 80074ea:	4640      	mov	r0, r8
   ptr += len;
 80074ec:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 80074ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80074f2:	f7ff fef3 	bl	80072dc <WIZCHIP_WRITE>
 80074f6:	4638      	mov	r0, r7
 80074f8:	b2e1      	uxtb	r1, r4
}
 80074fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 80074fe:	f7ff beed 	b.w	80072dc <WIZCHIP_WRITE>
}
 8007502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007506 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007506:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750a:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 800750c:	4614      	mov	r4, r2
 800750e:	b32a      	cbz	r2, 800755c <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 8007510:	0085      	lsls	r5, r0, #2
 8007512:	1c6f      	adds	r7, r5, #1
 8007514:	00ff      	lsls	r7, r7, #3
 8007516:	f507 5820 	add.w	r8, r7, #10240	@ 0x2800
 800751a:	4640      	mov	r0, r8
 800751c:	f7ff feb0 	bl	8007280 <WIZCHIP_READ>
 8007520:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 8007524:	4606      	mov	r6, r0
 8007526:	4638      	mov	r0, r7
 8007528:	f7ff feaa 	bl	8007280 <WIZCHIP_READ>
 800752c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8007530:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007532:	3503      	adds	r5, #3
 8007534:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007536:	4622      	mov	r2, r4
 8007538:	4649      	mov	r1, r9
 800753a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800753e:	f7ff feff 	bl	8007340 <WIZCHIP_READ_BUF>
   ptr += len;
 8007542:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 8007544:	4640      	mov	r0, r8
   ptr += len;
 8007546:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 8007548:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800754c:	f7ff fec6 	bl	80072dc <WIZCHIP_WRITE>
 8007550:	4638      	mov	r0, r7
 8007552:	b2e1      	uxtb	r1, r4
}
 8007554:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8007558:	f7ff bec0 	b.w	80072dc <WIZCHIP_WRITE>
}
 800755c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007560 <close>:
   return (int8_t)sn;
}  

int8_t close(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007560:	2807      	cmp	r0, #7
{
 8007562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007564:	4604      	mov	r4, r0
   CHECK_SOCKNUM();
 8007566:	d82d      	bhi.n	80075c4 <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8007568:	0147      	lsls	r7, r0, #5
 800756a:	f107 0608 	add.w	r6, r7, #8
 800756e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007572:	2110      	movs	r1, #16
 8007574:	4638      	mov	r0, r7
 8007576:	f7ff feb1 	bl	80072dc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800757a:	4638      	mov	r0, r7
 800757c:	f7ff fe80 	bl	8007280 <WIZCHIP_READ>
 8007580:	4605      	mov	r5, r0
 8007582:	2800      	cmp	r0, #0
 8007584:	d1f9      	bne.n	800757a <close+0x1a>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8007586:	211f      	movs	r1, #31
 8007588:	f506 7000 	add.w	r0, r6, #512	@ 0x200
 800758c:	f7ff fea6 	bl	80072dc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8007590:	2301      	movs	r3, #1
 8007592:	40a3      	lsls	r3, r4
 8007594:	43db      	mvns	r3, r3
 8007596:	490d      	ldr	r1, [pc, #52]	@ (80075cc <close+0x6c>)
 8007598:	b29b      	uxth	r3, r3
 800759a:	880a      	ldrh	r2, [r1, #0]
	//
   sock_is_sending &= ~(1<<sn);
   sock_remained_size[sn] = 0;
   sock_pack_info[sn] = PACK_NONE;
   while(getSn_SR(sn) != SOCK_CLOSED);
 800759c:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_io_mode &= ~(1<<sn); 
 80075a0:	401a      	ands	r2, r3
 80075a2:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 80075a4:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <close+0x70>)
 80075a6:	8811      	ldrh	r1, [r2, #0]
 80075a8:	400b      	ands	r3, r1
 80075aa:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 80075ac:	4b09      	ldr	r3, [pc, #36]	@ (80075d4 <close+0x74>)
 80075ae:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 80075b2:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <close+0x78>)
 80075b4:	551d      	strb	r5, [r3, r4]
   while(getSn_SR(sn) != SOCK_CLOSED);
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff fe62 	bl	8007280 <WIZCHIP_READ>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d1fa      	bne.n	80075b6 <close+0x56>
 80075c0:	2001      	movs	r0, #1
   return SOCK_OK;
}
 80075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e7fb      	b.n	80075c2 <close+0x62>
 80075ca:	bf00      	nop
 80075cc:	2000067a 	.word	0x2000067a
 80075d0:	20000678 	.word	0x20000678
 80075d4:	20000668 	.word	0x20000668
 80075d8:	20000660 	.word	0x20000660

080075dc <socket>:
   CHECK_SOCKNUM(); 
 80075dc:	2807      	cmp	r0, #7
{ 
 80075de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075e2:	4604      	mov	r4, r0
 80075e4:	4688      	mov	r8, r1
 80075e6:	4617      	mov	r7, r2
 80075e8:	461d      	mov	r5, r3
   CHECK_SOCKNUM(); 
 80075ea:	f200 8082 	bhi.w	80076f2 <socket+0x116>
   switch (protocol & 0x0F)
 80075ee:	f001 030f 	and.w	r3, r1, #15
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2b0d      	cmp	r3, #13
 80075f6:	d87f      	bhi.n	80076f8 <socket+0x11c>
 80075f8:	e8df f003 	tbb	[pc, r3]
 80075fc:	15151507 	.word	0x15151507
 8007600:	7e7e7e7e 	.word	0x7e7e7e7e
 8007604:	7e15157e 	.word	0x7e15157e
 8007608:	157e      	.short	0x157e
            getSIPR((uint8_t*)&taddr);
 800760a:	2204      	movs	r2, #4
 800760c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007610:	eb0d 0102 	add.w	r1, sp, r2
 8007614:	f7ff fe94 	bl	8007340 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	b923      	cbnz	r3, 8007626 <socket+0x4a>
 800761c:	f06f 0002 	mvn.w	r0, #2
}  
 8007620:	b002      	add	sp, #8
 8007622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007626:	0768      	lsls	r0, r5, #29
 8007628:	d457      	bmi.n	80076da <socket+0xfe>
   if(flag != 0)
 800762a:	b12d      	cbz	r5, 8007638 <socket+0x5c>
      switch(protocol)
 800762c:	f1b8 0f01 	cmp.w	r8, #1
 8007630:	d050      	beq.n	80076d4 <socket+0xf8>
 8007632:	f1b8 0f02 	cmp.w	r8, #2
 8007636:	d053      	beq.n	80076e0 <socket+0x104>
   close(sn);
 8007638:	4620      	mov	r0, r4
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800763a:	0166      	lsls	r6, r4, #5
   close(sn);
 800763c:	f7ff ff90 	bl	8007560 <close>
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007640:	3608      	adds	r6, #8
 8007642:	f025 010f 	bic.w	r1, r5, #15
 8007646:	4630      	mov	r0, r6
 8007648:	ea48 0101 	orr.w	r1, r8, r1
 800764c:	f7ff fe46 	bl	80072dc <WIZCHIP_WRITE>
   if(!port)
 8007650:	b96f      	cbnz	r7, 800766e <socket+0x92>
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007652:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
      port = sock_any_port++;
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <socket+0x124>)
 8007658:	8817      	ldrh	r7, [r2, #0]
 800765a:	1c7b      	adds	r3, r7, #1
 800765c:	b29b      	uxth	r3, r3
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800765e:	428b      	cmp	r3, r1
 8007660:	bf05      	ittet	eq
 8007662:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
      port = sock_any_port++;
 8007666:	f64f 77ef 	movweq	r7, #65519	@ 0xffef
 800766a:	8013      	strhne	r3, [r2, #0]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800766c:	8013      	strheq	r3, [r2, #0]
   setSn_PORTR(sn,port);
 800766e:	0a39      	lsrs	r1, r7, #8
 8007670:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 8007674:	f7ff fe32 	bl	80072dc <WIZCHIP_WRITE>
 8007678:	b2f9      	uxtb	r1, r7
 800767a:	f506 60a0 	add.w	r0, r6, #1280	@ 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 800767e:	f506 7780 	add.w	r7, r6, #256	@ 0x100
   setSn_PORTR(sn,port);
 8007682:	f7ff fe2b 	bl	80072dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007686:	2101      	movs	r1, #1
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff fe27 	bl	80072dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800768e:	4638      	mov	r0, r7
 8007690:	f7ff fdf6 	bl	8007280 <WIZCHIP_READ>
 8007694:	2800      	cmp	r0, #0
 8007696:	d1fa      	bne.n	800768e <socket+0xb2>
   sock_io_mode &= ~(1 <<sn);
 8007698:	2301      	movs	r3, #1
 800769a:	40a3      	lsls	r3, r4
 800769c:	43db      	mvns	r3, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800769e:	4919      	ldr	r1, [pc, #100]	@ (8007704 <socket+0x128>)
 80076a0:	b29b      	uxth	r3, r3
   sock_io_mode &= ~(1 <<sn);
 80076a2:	880a      	ldrh	r2, [r1, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80076a4:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 80076a8:	401a      	ands	r2, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80076aa:	40a5      	lsls	r5, r4
 80076ac:	432a      	orrs	r2, r5
 80076ae:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 80076b0:	4a15      	ldr	r2, [pc, #84]	@ (8007708 <socket+0x12c>)
   while(getSn_SR(sn) == SOCK_CLOSED);
 80076b2:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_is_sending &= ~(1<<sn);
 80076b6:	8811      	ldrh	r1, [r2, #0]
 80076b8:	400b      	ands	r3, r1
 80076ba:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 80076bc:	4b13      	ldr	r3, [pc, #76]	@ (800770c <socket+0x130>)
 80076be:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 80076c2:	4b13      	ldr	r3, [pc, #76]	@ (8007710 <socket+0x134>)
 80076c4:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff fdda 	bl	8007280 <WIZCHIP_READ>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d0fa      	beq.n	80076c6 <socket+0xea>
   return (int8_t)sn;
 80076d0:	b260      	sxtb	r0, r4
 80076d2:	e7a5      	b.n	8007620 <socket+0x44>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80076d4:	f015 0f21 	tst.w	r5, #33	@ 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80076d8:	d1ae      	bne.n	8007638 <socket+0x5c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80076da:	f06f 0005 	mvn.w	r0, #5
 80076de:	e79f      	b.n	8007620 <socket+0x44>
   	      if(flag & SF_IGMP_VER2)
 80076e0:	06a9      	lsls	r1, r5, #26
 80076e2:	d501      	bpl.n	80076e8 <socket+0x10c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80076e4:	062a      	lsls	r2, r5, #24
 80076e6:	d5f8      	bpl.n	80076da <socket+0xfe>
      	      if(flag & SF_UNI_BLOCK)
 80076e8:	06eb      	lsls	r3, r5, #27
 80076ea:	d5a5      	bpl.n	8007638 <socket+0x5c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80076ec:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80076f0:	e7f2      	b.n	80076d8 <socket+0xfc>
   CHECK_SOCKNUM(); 
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295
 80076f6:	e793      	b.n	8007620 <socket+0x44>
   switch (protocol & 0x0F)
 80076f8:	f06f 0004 	mvn.w	r0, #4
 80076fc:	e790      	b.n	8007620 <socket+0x44>
 80076fe:	bf00      	nop
 8007700:	20000024 	.word	0x20000024
 8007704:	2000067a 	.word	0x2000067a
 8007708:	20000678 	.word	0x20000678
 800770c:	20000668 	.word	0x20000668
 8007710:	20000660 	.word	0x20000660

08007714 <listen>:

int8_t listen(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007714:	2807      	cmp	r0, #7
{
 8007716:	b570      	push	{r4, r5, r6, lr}
 8007718:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 800771a:	d827      	bhi.n	800776c <listen+0x58>
   CHECK_TCPMODE(); 
 800771c:	0144      	lsls	r4, r0, #5
 800771e:	3408      	adds	r4, #8
 8007720:	4620      	mov	r0, r4
 8007722:	f7ff fdad 	bl	8007280 <WIZCHIP_READ>
 8007726:	f000 0003 	and.w	r0, r0, #3
 800772a:	2801      	cmp	r0, #1
 800772c:	d121      	bne.n	8007772 <listen+0x5e>
   CHECK_SOCKINIT();
 800772e:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff fda4 	bl	8007280 <WIZCHIP_READ>
 8007738:	2813      	cmp	r0, #19
 800773a:	d11d      	bne.n	8007778 <listen+0x64>
   setSn_CR(sn,Sn_CR_LISTEN);
 800773c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8007740:	2102      	movs	r1, #2
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff fdca 	bl	80072dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007748:	4620      	mov	r0, r4
 800774a:	f7ff fd99 	bl	8007280 <WIZCHIP_READ>
 800774e:	2800      	cmp	r0, #0
 8007750:	d1fa      	bne.n	8007748 <listen+0x34>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff fd94 	bl	8007280 <WIZCHIP_READ>
 8007758:	2814      	cmp	r0, #20
 800775a:	d101      	bne.n	8007760 <listen+0x4c>
   {
      close(sn);
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 800775c:	2001      	movs	r0, #1
 800775e:	e004      	b.n	800776a <listen+0x56>
      close(sn);
 8007760:	4628      	mov	r0, r5
 8007762:	f7ff fefd 	bl	8007560 <close>
      return SOCKERR_SOCKCLOSED;
 8007766:	f06f 0003 	mvn.w	r0, #3
}
 800776a:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e7fb      	b.n	800776a <listen+0x56>
   CHECK_TCPMODE(); 
 8007772:	f06f 0004 	mvn.w	r0, #4
 8007776:	e7f8      	b.n	800776a <listen+0x56>
   CHECK_SOCKINIT();
 8007778:	f06f 0002 	mvn.w	r0, #2
 800777c:	e7f5      	b.n	800776a <listen+0x56>
	...

08007780 <disconnect>:
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 8007780:	2807      	cmp	r0, #7
{
 8007782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007784:	4605      	mov	r5, r0
   CHECK_SOCKNUM();
 8007786:	d839      	bhi.n	80077fc <disconnect+0x7c>
   CHECK_TCPMODE();
 8007788:	0144      	lsls	r4, r0, #5
 800778a:	3408      	adds	r4, #8
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff fd77 	bl	8007280 <WIZCHIP_READ>
 8007792:	f000 0003 	and.w	r0, r0, #3
 8007796:	2801      	cmp	r0, #1
 8007798:	d133      	bne.n	8007802 <disconnect+0x82>
   if(getSn_SR(sn) != SOCK_CLOSED)
 800779a:	f504 7640 	add.w	r6, r4, #768	@ 0x300
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff fd6e 	bl	8007280 <WIZCHIP_READ>
 80077a4:	b908      	cbnz	r0, 80077aa <disconnect+0x2a>
            close(sn);
            return SOCKERR_TIMEOUT;
         }
      }
   }
   return SOCK_OK;
 80077a6:	2001      	movs	r0, #1
}
 80077a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      setSn_CR(sn,Sn_CR_DISCON);
 80077aa:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 80077ae:	2108      	movs	r1, #8
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff fd93 	bl	80072dc <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff fd62 	bl	8007280 <WIZCHIP_READ>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d1fa      	bne.n	80077b6 <disconnect+0x36>
	   sock_is_sending &= ~(1<<sn);
 80077c0:	2201      	movs	r2, #1
 80077c2:	4911      	ldr	r1, [pc, #68]	@ (8007808 <disconnect+0x88>)
 80077c4:	40aa      	lsls	r2, r5
 80077c6:	880b      	ldrh	r3, [r1, #0]
 80077c8:	ea23 0302 	bic.w	r3, r3, r2
 80077cc:	800b      	strh	r3, [r1, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80077ce:	4b0f      	ldr	r3, [pc, #60]	@ (800780c <disconnect+0x8c>)
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	412b      	asrs	r3, r5
 80077d4:	07da      	lsls	r2, r3, #31
 80077d6:	d4e7      	bmi.n	80077a8 <disconnect+0x28>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80077d8:	f504 7400 	add.w	r4, r4, #512	@ 0x200
      while(getSn_SR(sn) != SOCK_CLOSED)
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff fd4f 	bl	8007280 <WIZCHIP_READ>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d0df      	beq.n	80077a6 <disconnect+0x26>
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff fd4a 	bl	8007280 <WIZCHIP_READ>
 80077ec:	0703      	lsls	r3, r0, #28
 80077ee:	d5f5      	bpl.n	80077dc <disconnect+0x5c>
            close(sn);
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7ff feb5 	bl	8007560 <close>
            return SOCKERR_TIMEOUT;
 80077f6:	f06f 000c 	mvn.w	r0, #12
 80077fa:	e7d5      	b.n	80077a8 <disconnect+0x28>
   CHECK_SOCKNUM();
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	e7d2      	b.n	80077a8 <disconnect+0x28>
   CHECK_TCPMODE();
 8007802:	f06f 0004 	mvn.w	r0, #4
 8007806:	e7cf      	b.n	80077a8 <disconnect+0x28>
 8007808:	20000678 	.word	0x20000678
 800780c:	2000067a 	.word	0x2000067a

08007810 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8007814:	2807      	cmp	r0, #7
{
 8007816:	4605      	mov	r5, r0
 8007818:	4617      	mov	r7, r2
 800781a:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800781c:	f200 80a0 	bhi.w	8007960 <send+0x150>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007820:	0146      	lsls	r6, r0, #5
 8007822:	3608      	adds	r6, #8
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff fd2b 	bl	8007280 <WIZCHIP_READ>
 800782a:	f000 000f 	and.w	r0, r0, #15
 800782e:	2801      	cmp	r0, #1
 8007830:	f040 8099 	bne.w	8007966 <send+0x156>
   CHECK_SOCKDATA();
 8007834:	2f00      	cmp	r7, #0
 8007836:	f000 8099 	beq.w	800796c <send+0x15c>
   tmp = getSn_SR(sn);
 800783a:	f506 7a40 	add.w	sl, r6, #768	@ 0x300
 800783e:	4650      	mov	r0, sl
 8007840:	f7ff fd1e 	bl	8007280 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007844:	2817      	cmp	r0, #23
 8007846:	d001      	beq.n	800784c <send+0x3c>
 8007848:	281c      	cmp	r0, #28
 800784a:	d136      	bne.n	80078ba <send+0xaa>
   if( sock_is_sending & (1<<sn) )
 800784c:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8007974 <send+0x164>
 8007850:	f8b8 3000 	ldrh.w	r3, [r8]
 8007854:	412b      	asrs	r3, r5
 8007856:	07da      	lsls	r2, r3, #31
 8007858:	d512      	bpl.n	8007880 <send+0x70>
   {
      tmp = getSn_IR(sn);
 800785a:	f506 7400 	add.w	r4, r6, #512	@ 0x200
 800785e:	4620      	mov	r0, r4
 8007860:	f7ff fd0e 	bl	8007280 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8007864:	06c3      	lsls	r3, r0, #27
 8007866:	d52b      	bpl.n	80078c0 <send+0xb0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8007868:	2110      	movs	r1, #16
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff fd36 	bl	80072dc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8007870:	2201      	movs	r2, #1
 8007872:	f8b8 3000 	ldrh.w	r3, [r8]
 8007876:	40aa      	lsls	r2, r5
 8007878:	ea23 0302 	bic.w	r3, r3, r2
 800787c:	f8a8 3000 	strh.w	r3, [r8]
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8007880:	f506 50f8 	add.w	r0, r6, #7936	@ 0x1f00
 8007884:	f7ff fcfc 	bl	8007280 <WIZCHIP_READ>
 8007888:	0280      	lsls	r0, r0, #10
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800788a:	b280      	uxth	r0, r0
 800788c:	42b8      	cmp	r0, r7
 800788e:	bf28      	it	cs
 8007890:	4638      	movcs	r0, r7
 8007892:	2701      	movs	r7, #1
 8007894:	4604      	mov	r4, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8007896:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8007978 <send+0x168>
 800789a:	40af      	lsls	r7, r5
      freesize = (uint16_t)getSn_TX_FSR(sn);
 800789c:	4628      	mov	r0, r5
 800789e:	f7ff fdc3 	bl	8007428 <getSn_TX_FSR>
 80078a2:	4681      	mov	r9, r0
      tmp = getSn_SR(sn);
 80078a4:	4650      	mov	r0, sl
 80078a6:	f7ff fceb 	bl	8007280 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80078aa:	2817      	cmp	r0, #23
 80078ac:	d014      	beq.n	80078d8 <send+0xc8>
 80078ae:	281c      	cmp	r0, #28
 80078b0:	d012      	beq.n	80078d8 <send+0xc8>
         if(tmp == SOCK_CLOSED) close(sn);
 80078b2:	b910      	cbnz	r0, 80078ba <send+0xaa>
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fe53 	bl	8007560 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80078ba:	f06f 0006 	mvn.w	r0, #6
 80078be:	e002      	b.n	80078c6 <send+0xb6>
      else if(tmp & Sn_IR_TIMEOUT)
 80078c0:	0700      	lsls	r0, r0, #28
 80078c2:	d403      	bmi.n	80078cc <send+0xbc>
      else return SOCK_BUSY;
 80078c4:	2000      	movs	r0, #0
 
   while(getSn_CR(sn));   // wait to process the command...
   sock_is_sending |= (1<<sn);
 
   return len;
}
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 80078cc:	4628      	mov	r0, r5
 80078ce:	f7ff fe47 	bl	8007560 <close>
         return SOCKERR_TIMEOUT;
 80078d2:	f06f 000c 	mvn.w	r0, #12
 80078d6:	e7f6      	b.n	80078c6 <send+0xb6>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 80078d8:	f8bb 2000 	ldrh.w	r2, [fp]
 80078dc:	423a      	tst	r2, r7
 80078de:	d028      	beq.n	8007932 <send+0x122>
 80078e0:	45a1      	cmp	r9, r4
 80078e2:	d3ef      	bcc.n	80078c4 <send+0xb4>
   wiz_send_data(sn, buf, len);
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	4622      	mov	r2, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f7ff fddf 	bl	80074ac <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 80078ee:	f8b8 3000 	ldrh.w	r3, [r8]
 80078f2:	412b      	asrs	r3, r5
 80078f4:	07d9      	lsls	r1, r3, #31
 80078f6:	d50a      	bpl.n	800790e <send+0xfe>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 80078f8:	f506 7900 	add.w	r9, r6, #512	@ 0x200
 80078fc:	4648      	mov	r0, r9
 80078fe:	f7ff fcbf 	bl	8007280 <WIZCHIP_READ>
 8007902:	06c3      	lsls	r3, r0, #27
 8007904:	d518      	bpl.n	8007938 <send+0x128>
      setSn_IR(sn, Sn_IR_SENDOK);
 8007906:	2110      	movs	r1, #16
 8007908:	4648      	mov	r0, r9
 800790a:	f7ff fce7 	bl	80072dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 800790e:	f506 7680 	add.w	r6, r6, #256	@ 0x100
 8007912:	2120      	movs	r1, #32
 8007914:	4630      	mov	r0, r6
 8007916:	f7ff fce1 	bl	80072dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));   // wait to process the command...
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff fcb0 	bl	8007280 <WIZCHIP_READ>
 8007920:	2800      	cmp	r0, #0
 8007922:	d1fa      	bne.n	800791a <send+0x10a>
   sock_is_sending |= (1<<sn);
 8007924:	f8b8 3000 	ldrh.w	r3, [r8]
   return len;
 8007928:	4620      	mov	r0, r4
   sock_is_sending |= (1<<sn);
 800792a:	431f      	orrs	r7, r3
 800792c:	f8a8 7000 	strh.w	r7, [r8]
   return len;
 8007930:	e7c9      	b.n	80078c6 <send+0xb6>
      if(len <= freesize) break;
 8007932:	45a1      	cmp	r9, r4
 8007934:	d3b2      	bcc.n	800789c <send+0x8c>
 8007936:	e7d5      	b.n	80078e4 <send+0xd4>
         tmp = getSn_SR(sn);
 8007938:	4650      	mov	r0, sl
 800793a:	f7ff fca1 	bl	8007280 <WIZCHIP_READ>
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 800793e:	2817      	cmp	r0, #23
 8007940:	d009      	beq.n	8007956 <send+0x146>
 8007942:	281c      	cmp	r0, #28
 8007944:	d007      	beq.n	8007956 <send+0x146>
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8007946:	2800      	cmp	r0, #0
 8007948:	d0b4      	beq.n	80078b4 <send+0xa4>
 800794a:	4648      	mov	r0, r9
 800794c:	f7ff fc98 	bl	8007280 <WIZCHIP_READ>
 8007950:	0702      	lsls	r2, r0, #28
 8007952:	d4af      	bmi.n	80078b4 <send+0xa4>
 8007954:	e7b1      	b.n	80078ba <send+0xaa>
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007956:	f8bb 3000 	ldrh.w	r3, [fp]
 800795a:	423b      	tst	r3, r7
 800795c:	d0ce      	beq.n	80078fc <send+0xec>
 800795e:	e7b1      	b.n	80078c4 <send+0xb4>
   CHECK_SOCKNUM();
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e7af      	b.n	80078c6 <send+0xb6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007966:	f06f 0004 	mvn.w	r0, #4
 800796a:	e7ac      	b.n	80078c6 <send+0xb6>
   CHECK_SOCKDATA();
 800796c:	f06f 000d 	mvn.w	r0, #13
 8007970:	e7a9      	b.n	80078c6 <send+0xb6>
 8007972:	bf00      	nop
 8007974:	20000678 	.word	0x20000678
 8007978:	2000067a 	.word	0x2000067a

0800797c <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8007980:	2807      	cmp	r0, #7
{
 8007982:	b085      	sub	sp, #20
 8007984:	4606      	mov	r6, r0
 8007986:	4690      	mov	r8, r2
 8007988:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 800798a:	d859      	bhi.n	8007a40 <recv+0xc4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800798c:	0145      	lsls	r5, r0, #5
 800798e:	3508      	adds	r5, #8
 8007990:	4628      	mov	r0, r5
 8007992:	f7ff fc75 	bl	8007280 <WIZCHIP_READ>
 8007996:	f000 070f 	and.w	r7, r0, #15
 800799a:	2f01      	cmp	r7, #1
 800799c:	d153      	bne.n	8007a46 <recv+0xca>
   CHECK_SOCKDATA();
 800799e:	f1b8 0f00 	cmp.w	r8, #0
 80079a2:	d053      	beq.n	8007a4c <recv+0xd0>
   
   recvsize = getSn_RxMAX(sn); 
 80079a4:	f505 50f0 	add.w	r0, r5, #7680	@ 0x1e00
 80079a8:	f7ff fc6a 	bl	8007280 <WIZCHIP_READ>
 80079ac:	4681      	mov	r9, r0
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
      tmp = getSn_SR(sn);
 80079ae:	f505 7340 	add.w	r3, r5, #768	@ 0x300
 80079b2:	9302      	str	r3, [sp, #8]
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80079b4:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8007a58 <recv+0xdc>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80079b8:	f505 53f8 	add.w	r3, r5, #7936	@ 0x1f00
 80079bc:	40b7      	lsls	r7, r6
 80079be:	9303      	str	r3, [sp, #12]
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff fd52 	bl	800746a <getSn_RX_RSR>
 80079c6:	4604      	mov	r4, r0
      tmp = getSn_SR(sn);
 80079c8:	9802      	ldr	r0, [sp, #8]
 80079ca:	f7ff fc59 	bl	8007280 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED)
 80079ce:	2817      	cmp	r0, #23
 80079d0:	d014      	beq.n	80079fc <recv+0x80>
         if(tmp == SOCK_CLOSE_WAIT)
 80079d2:	281c      	cmp	r0, #28
 80079d4:	d10a      	bne.n	80079ec <recv+0x70>
            if(recvsize != 0) break;
 80079d6:	b9bc      	cbnz	r4, 8007a08 <recv+0x8c>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff fd25 	bl	8007428 <getSn_TX_FSR>
 80079de:	4682      	mov	sl, r0
 80079e0:	9803      	ldr	r0, [sp, #12]
 80079e2:	f7ff fc4d 	bl	8007280 <WIZCHIP_READ>
 80079e6:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 80079ea:	d107      	bne.n	80079fc <recv+0x80>
               close(sn);
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff fdb7 	bl	8007560 <close>
               return SOCKERR_SOCKSTATUS;
 80079f2:	f06f 0006 	mvn.w	r0, #6
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 80079f6:	b005      	add	sp, #20
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80079fc:	f8bb 2000 	ldrh.w	r2, [fp]
 8007a00:	423a      	tst	r2, r7
 8007a02:	d126      	bne.n	8007a52 <recv+0xd6>
      if(recvsize != 0) break;
 8007a04:	2c00      	cmp	r4, #0
 8007a06:	d0db      	beq.n	80079c0 <recv+0x44>
   recvsize = getSn_RxMAX(sn); 
 8007a08:	ea4f 2089 	mov.w	r0, r9, lsl #10
   if(recvsize < len) len = recvsize;
 8007a0c:	b280      	uxth	r0, r0
   if(recvsize < len) len = recvsize;
 8007a0e:	4540      	cmp	r0, r8
 8007a10:	bf28      	it	cs
 8007a12:	4640      	movcs	r0, r8
 8007a14:	42a0      	cmp	r0, r4
 8007a16:	bf28      	it	cs
 8007a18:	4620      	movcs	r0, r4
 8007a1a:	b284      	uxth	r4, r0
   wiz_recv_data(sn, buf, len); 
 8007a1c:	9901      	ldr	r1, [sp, #4]
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_RECV); 
 8007a22:	f505 7580 	add.w	r5, r5, #256	@ 0x100
   wiz_recv_data(sn, buf, len); 
 8007a26:	f7ff fd6e 	bl	8007506 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8007a2a:	2140      	movs	r1, #64	@ 0x40
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7ff fc55 	bl	80072dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff fc24 	bl	8007280 <WIZCHIP_READ>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d1fa      	bne.n	8007a32 <recv+0xb6>
   return (int32_t)len;
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	e7da      	b.n	80079f6 <recv+0x7a>
   CHECK_SOCKNUM();
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e7d7      	b.n	80079f6 <recv+0x7a>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007a46:	f06f 0004 	mvn.w	r0, #4
 8007a4a:	e7d4      	b.n	80079f6 <recv+0x7a>
   CHECK_SOCKDATA();
 8007a4c:	f06f 000d 	mvn.w	r0, #13
 8007a50:	e7d1      	b.n	80079f6 <recv+0x7a>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007a52:	2000      	movs	r0, #0
 8007a54:	e7cf      	b.n	80079f6 <recv+0x7a>
 8007a56:	bf00      	nop
 8007a58:	2000067a 	.word	0x2000067a

08007a5c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8007a5c:	4770      	bx	lr

08007a5e <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8007a5e:	7800      	ldrb	r0, [r0, #0]
 8007a60:	4770      	bx	lr

08007a62 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8007a62:	7001      	strb	r1, [r0, #0]
 8007a64:	4770      	bx	lr

08007a66 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8007a66:	2000      	movs	r0, #0
 8007a68:	4770      	bx	lr

08007a6a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8007a6a:	4770      	bx	lr

08007a6c <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8007a70:	4e04      	ldr	r6, [pc, #16]	@ (8007a84 <wizchip_spi_readburst+0x18>)
 8007a72:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8007a74:	42ac      	cmp	r4, r5
 8007a76:	d100      	bne.n	8007a7a <wizchip_spi_readburst+0xe>
	}
}
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 8007a7a:	69f3      	ldr	r3, [r6, #28]
 8007a7c:	4798      	blx	r3
 8007a7e:	f804 0b01 	strb.w	r0, [r4], #1
	for(uint16_t i=0; i<len; i++)
 8007a82:	e7f7      	b.n	8007a74 <wizchip_spi_readburst+0x8>
 8007a84:	20000028 	.word	0x20000028

08007a88 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4604      	mov	r4, r0
	for(uint16_t i=0; i<len; i++)
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8007a8c:	4e04      	ldr	r6, [pc, #16]	@ (8007aa0 <wizchip_spi_writeburst+0x18>)
 8007a8e:	1845      	adds	r5, r0, r1
	for(uint16_t i=0; i<len; i++)
 8007a90:	42ac      	cmp	r4, r5
 8007a92:	d100      	bne.n	8007a96 <wizchip_spi_writeburst+0xe>
	}
}
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8007a96:	6a33      	ldr	r3, [r6, #32]
 8007a98:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a9c:	4798      	blx	r3
	for(uint16_t i=0; i<len; i++)
 8007a9e:	e7f7      	b.n	8007a90 <wizchip_spi_writeburst+0x8>
 8007aa0:	20000028 	.word	0x20000028

08007aa4 <wizchip_cris_exit>:
void 	  wizchip_cris_exit(void)          {}
 8007aa4:	4770      	bx	lr

08007aa6 <wizchip_cs_select>:
void 	wizchip_cs_select(void)            {}
 8007aa6:	4770      	bx	lr

08007aa8 <wizchip_cs_deselect>:
void 	wizchip_cs_deselect(void)          {}
 8007aa8:	4770      	bx	lr
	...

08007aac <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8007aac:	b100      	cbz	r0, 8007ab0 <reg_wizchip_cs_cbfunc+0x4>
 8007aae:	b909      	cbnz	r1, 8007ab4 <reg_wizchip_cs_cbfunc+0x8>
 8007ab0:	4802      	ldr	r0, [pc, #8]	@ (8007abc <reg_wizchip_cs_cbfunc+0x10>)
 8007ab2:	4903      	ldr	r1, [pc, #12]	@ (8007ac0 <reg_wizchip_cs_cbfunc+0x14>)
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8007ab4:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <reg_wizchip_cs_cbfunc+0x18>)
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8007ab6:	e9c3 0105 	strd	r0, r1, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 8007aba:	4770      	bx	lr
 8007abc:	08007aa7 	.word	0x08007aa7
 8007ac0:	08007aa9 	.word	0x08007aa9
 8007ac4:	20000028 	.word	0x20000028

08007ac8 <reg_wizchip_spi_cbfunc>:
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <reg_wizchip_spi_cbfunc+0x18>)
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	0592      	lsls	r2, r2, #22
 8007ace:	d400      	bmi.n	8007ad2 <reg_wizchip_spi_cbfunc+0xa>
 8007ad0:	e7fe      	b.n	8007ad0 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8007ad2:	b100      	cbz	r0, 8007ad6 <reg_wizchip_spi_cbfunc+0xe>
 8007ad4:	b909      	cbnz	r1, 8007ada <reg_wizchip_spi_cbfunc+0x12>
 8007ad6:	4803      	ldr	r0, [pc, #12]	@ (8007ae4 <reg_wizchip_spi_cbfunc+0x1c>)
 8007ad8:	4903      	ldr	r1, [pc, #12]	@ (8007ae8 <reg_wizchip_spi_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8007ada:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 8007ade:	4770      	bx	lr
 8007ae0:	20000028 	.word	0x20000028
 8007ae4:	08007a67 	.word	0x08007a67
 8007ae8:	08007a6b 	.word	0x08007a6b

08007aec <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8007aec:	4b05      	ldr	r3, [pc, #20]	@ (8007b04 <reg_wizchip_spiburst_cbfunc+0x18>)
 8007aee:	881a      	ldrh	r2, [r3, #0]
 8007af0:	0592      	lsls	r2, r2, #22
 8007af2:	d400      	bmi.n	8007af6 <reg_wizchip_spiburst_cbfunc+0xa>
 8007af4:	e7fe      	b.n	8007af4 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 8007af6:	b100      	cbz	r0, 8007afa <reg_wizchip_spiburst_cbfunc+0xe>
 8007af8:	b909      	cbnz	r1, 8007afe <reg_wizchip_spiburst_cbfunc+0x12>
 8007afa:	4803      	ldr	r0, [pc, #12]	@ (8007b08 <reg_wizchip_spiburst_cbfunc+0x1c>)
 8007afc:	4903      	ldr	r1, [pc, #12]	@ (8007b0c <reg_wizchip_spiburst_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8007afe:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
 8007b02:	4770      	bx	lr
 8007b04:	20000028 	.word	0x20000028
 8007b08:	08007a6d 	.word	0x08007a6d
 8007b0c:	08007a89 	.word	0x08007a89

08007b10 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8007b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8007b12:	2206      	movs	r2, #6
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8007b1a:	f7ff fc11 	bl	8007340 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007b1e:	2204      	movs	r2, #4
 8007b20:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007b24:	eb0d 0102 	add.w	r1, sp, r2
 8007b28:	f7ff fc0a 	bl	8007340 <WIZCHIP_READ_BUF>
 8007b2c:	a902      	add	r1, sp, #8
 8007b2e:	2204      	movs	r2, #4
 8007b30:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8007b34:	f7ff fc04 	bl	8007340 <WIZCHIP_READ_BUF>
 8007b38:	2204      	movs	r2, #4
 8007b3a:	a903      	add	r1, sp, #12
 8007b3c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007b40:	f7ff fbfe 	bl	8007340 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8007b44:	2180      	movs	r1, #128	@ 0x80
 8007b46:	2000      	movs	r0, #0
 8007b48:	f7ff fbc8 	bl	80072dc <WIZCHIP_WRITE>
   getMR(); // for delay
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7ff fb97 	bl	8007280 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8007b52:	a904      	add	r1, sp, #16
 8007b54:	2206      	movs	r2, #6
 8007b56:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8007b5a:	f7ff fc2b 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8007b5e:	2204      	movs	r2, #4
 8007b60:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007b64:	eb0d 0102 	add.w	r1, sp, r2
 8007b68:	f7ff fc24 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8007b6c:	a902      	add	r1, sp, #8
 8007b6e:	2204      	movs	r2, #4
 8007b70:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8007b74:	f7ff fc1e 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8007b78:	2204      	movs	r2, #4
 8007b7a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007b7e:	a903      	add	r1, sp, #12
 8007b80:	f7ff fc18 	bl	80073b4 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8007b84:	b007      	add	sp, #28
 8007b86:	f85d fb04 	ldr.w	pc, [sp], #4

08007b8a <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8007b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8007b90:	f7ff ffbe 	bl	8007b10 <wizchip_sw_reset>
   if(txsize)
 8007b94:	b1d5      	cbz	r5, 8007bcc <wizchip_init+0x42>
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8007b96:	f995 3000 	ldrsb.w	r3, [r5]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	dc35      	bgt.n	8007c0a <wizchip_init+0x80>
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	1de9      	adds	r1, r5, #7
			tmp += txsize[i];
 8007ba2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007ba6:	4403      	add	r3, r0
 8007ba8:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8007baa:	2b10      	cmp	r3, #16
 8007bac:	dc2d      	bgt.n	8007c0a <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bae:	428a      	cmp	r2, r1
 8007bb0:	d1f7      	bne.n	8007ba2 <wizchip_init+0x18>
 8007bb2:	f641 7608 	movw	r6, #7944	@ 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bb6:	f242 0708 	movw	r7, #8200	@ 0x2008
 8007bba:	3d01      	subs	r5, #1
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bc2:	3620      	adds	r6, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8007bc4:	f7ff fb8a 	bl	80072dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bc8:	42be      	cmp	r6, r7
 8007bca:	d1f7      	bne.n	8007bbc <wizchip_init+0x32>
#endif
		}	
   }

   if(rxsize)
 8007bcc:	b90c      	cbnz	r4, 8007bd2 <wizchip_init+0x48>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8007bce:	2000      	movs	r0, #0
}
 8007bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tmp += rxsize[i];
 8007bd2:	f994 3000 	ldrsb.w	r3, [r4]
			if(tmp > 16) return -1;
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	dc17      	bgt.n	8007c0a <wizchip_init+0x80>
 8007bda:	4622      	mov	r2, r4
 8007bdc:	1de1      	adds	r1, r4, #7
			tmp += rxsize[i];
 8007bde:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007be2:	4403      	add	r3, r0
 8007be4:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	dc0f      	bgt.n	8007c0a <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bea:	4291      	cmp	r1, r2
 8007bec:	d1f7      	bne.n	8007bde <wizchip_init+0x54>
 8007bee:	f641 6508 	movw	r5, #7688	@ 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bf2:	f641 7608 	movw	r6, #7944	@ 0x1f08
 8007bf6:	3c01      	subs	r4, #1
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007bfe:	3520      	adds	r5, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8007c00:	f7ff fb6c 	bl	80072dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007c04:	42b5      	cmp	r5, r6
 8007c06:	d1f7      	bne.n	8007bf8 <wizchip_init+0x6e>
 8007c08:	e7e1      	b.n	8007bce <wizchip_init+0x44>
			if(tmp > 16) return -1;
 8007c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0e:	e7df      	b.n	8007bd0 <wizchip_init+0x46>

08007c10 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8007c10:	b510      	push	{r4, lr}
 8007c12:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8007c14:	4601      	mov	r1, r0
 8007c16:	2206      	movs	r2, #6
 8007c18:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8007c1c:	f7ff fbca 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8007c20:	2204      	movs	r2, #4
 8007c22:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007c26:	f104 010e 	add.w	r1, r4, #14
 8007c2a:	f7ff fbc3 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8007c2e:	2204      	movs	r2, #4
 8007c30:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8007c34:	f104 010a 	add.w	r1, r4, #10
 8007c38:	f7ff fbbc 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007c42:	1da1      	adds	r1, r4, #6
 8007c44:	f7ff fbb6 	bl	80073b4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8007c48:	4b06      	ldr	r3, [pc, #24]	@ (8007c64 <wizchip_setnetinfo+0x54>)
 8007c4a:	7ca2      	ldrb	r2, [r4, #18]
 8007c4c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8007c4e:	7ce2      	ldrb	r2, [r4, #19]
 8007c50:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8007c52:	7d22      	ldrb	r2, [r4, #20]
 8007c54:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8007c56:	7d62      	ldrb	r2, [r4, #21]
 8007c58:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8007c5a:	7da2      	ldrb	r2, [r4, #22]
 8007c5c:	4b02      	ldr	r3, [pc, #8]	@ (8007c68 <wizchip_setnetinfo+0x58>)
 8007c5e:	701a      	strb	r2, [r3, #0]
}
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	2000067d 	.word	0x2000067d
 8007c68:	2000067c 	.word	0x2000067c

08007c6c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8007c70:	4601      	mov	r1, r0
 8007c72:	2206      	movs	r2, #6
 8007c74:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8007c78:	f7ff fb62 	bl	8007340 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007c82:	f104 010e 	add.w	r1, r4, #14
 8007c86:	f7ff fb5b 	bl	8007340 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8007c90:	f104 010a 	add.w	r1, r4, #10
 8007c94:	f7ff fb54 	bl	8007340 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8007c98:	2204      	movs	r2, #4
 8007c9a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8007c9e:	1da1      	adds	r1, r4, #6
 8007ca0:	f7ff fb4e 	bl	8007340 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <wizchip_getnetinfo+0x54>)
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8007caa:	785a      	ldrb	r2, [r3, #1]
 8007cac:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8007cae:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 8007cb0:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 8007cb2:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8007cb4:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8007cb6:	4b03      	ldr	r3, [pc, #12]	@ (8007cc4 <wizchip_getnetinfo+0x58>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	75a3      	strb	r3, [r4, #22]
}
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000067d 	.word	0x2000067d
 8007cc4:	2000067c 	.word	0x2000067c

08007cc8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8007cc8:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8007cca:	f030 053a 	bics.w	r5, r0, #58	@ 0x3a
{
 8007cce:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8007cd0:	d10a      	bne.n	8007ce8 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7ff fad4 	bl	8007280 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8007cd8:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 8007cdc:	b2c9      	uxtb	r1, r1
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7ff fafc 	bl	80072dc <WIZCHIP_WRITE>
   return 0;
 8007ce4:	4628      	mov	r0, r5
}
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	e7fb      	b.n	8007ce6 <wizchip_setnetmode+0x1e>

08007cee <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 8007cee:	2000      	movs	r0, #0
 8007cf0:	f7ff bac6 	b.w	8007280 <WIZCHIP_READ>

08007cf4 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8007cf8:	7801      	ldrb	r1, [r0, #0]
 8007cfa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8007cfe:	f7ff faed 	bl	80072dc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8007d02:	8861      	ldrh	r1, [r4, #2]
 8007d04:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8007d08:	0a09      	lsrs	r1, r1, #8
 8007d0a:	f7ff fae7 	bl	80072dc <WIZCHIP_WRITE>
 8007d0e:	78a1      	ldrb	r1, [r4, #2]
 8007d10:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
}
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 8007d18:	f7ff bae0 	b.w	80072dc <WIZCHIP_WRITE>

08007d1c <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 8007d20:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8007d24:	f7ff faac 	bl	8007280 <WIZCHIP_READ>
 8007d28:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 8007d2a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8007d2e:	f7ff faa7 	bl	8007280 <WIZCHIP_READ>
 8007d32:	4605      	mov	r5, r0
 8007d34:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8007d38:	f7ff faa2 	bl	8007280 <WIZCHIP_READ>
 8007d3c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8007d40:	8060      	strh	r0, [r4, #2]
}
 8007d42:	bd38      	pop	{r3, r4, r5, pc}

08007d44 <ctlnetwork>:
{
 8007d44:	b510      	push	{r4, lr}
 8007d46:	460c      	mov	r4, r1
   switch(cntype)
 8007d48:	2805      	cmp	r0, #5
 8007d4a:	d81e      	bhi.n	8007d8a <ctlnetwork+0x46>
 8007d4c:	e8df f000 	tbb	[pc, r0]
 8007d50:	110c0803 	.word	0x110c0803
 8007d54:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8007d56:	4608      	mov	r0, r1
 8007d58:	f7ff ff5a 	bl	8007c10 <wizchip_setnetinfo>
   return 0;
 8007d5c:	2000      	movs	r0, #0
}
 8007d5e:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8007d60:	4608      	mov	r0, r1
 8007d62:	f7ff ff83 	bl	8007c6c <wizchip_getnetinfo>
         break;
 8007d66:	e7f9      	b.n	8007d5c <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 8007d68:	7808      	ldrb	r0, [r1, #0]
}
 8007d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 8007d6e:	f7ff bfab 	b.w	8007cc8 <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 8007d72:	f7ff ffbc 	bl	8007cee <wizchip_getnetmode>
 8007d76:	7020      	strb	r0, [r4, #0]
         break;
 8007d78:	e7f0      	b.n	8007d5c <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	f7ff ffba 	bl	8007cf4 <wizchip_settimeout>
         break;
 8007d80:	e7ec      	b.n	8007d5c <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8007d82:	4608      	mov	r0, r1
 8007d84:	f7ff ffca 	bl	8007d1c <wizchip_gettimeout>
         break;
 8007d88:	e7e8      	b.n	8007d5c <ctlnetwork+0x18>
   switch(cntype)
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e7e6      	b.n	8007d5e <ctlnetwork+0x1a>

08007d90 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d90:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8007d94:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d96:	b16b      	cbz	r3, 8007db4 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d98:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d9c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8007da0:	28ff      	cmp	r0, #255	@ 0xff
 8007da2:	d007      	beq.n	8007db4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	4621      	mov	r1, r4
 8007da8:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8007dac:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007dae:	23ff      	movs	r3, #255	@ 0xff
 8007db0:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8007db4:	2000      	movs	r0, #0
 8007db6:	bd10      	pop	{r4, pc}

08007db8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007db8:	2343      	movs	r3, #67	@ 0x43
 8007dba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007dbc:	4800      	ldr	r0, [pc, #0]	@ (8007dc0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007dbe:	4770      	bx	lr
 8007dc0:	20000098 	.word	0x20000098

08007dc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007dc4:	2343      	movs	r3, #67	@ 0x43
 8007dc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007dc8:	4800      	ldr	r0, [pc, #0]	@ (8007dcc <USBD_CDC_GetHSCfgDesc+0x8>)
 8007dca:	4770      	bx	lr
 8007dcc:	200000dc 	.word	0x200000dc

08007dd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dd0:	2343      	movs	r3, #67	@ 0x43
 8007dd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007dd4:	4800      	ldr	r0, [pc, #0]	@ (8007dd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007dd6:	4770      	bx	lr
 8007dd8:	20000054 	.word	0x20000054

08007ddc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ddc:	230a      	movs	r3, #10
 8007dde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007de0:	4800      	ldr	r0, [pc, #0]	@ (8007de4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007de2:	4770      	bx	lr
 8007de4:	20000158 	.word	0x20000158

08007de8 <USBD_CDC_DataOut>:
{
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dec:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df0:	f000 ff84 	bl	8008cfc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8007df4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8007dfc:	b14b      	cbz	r3, 8007e12 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dfe:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8007e02:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8007e0c:	4798      	blx	r3
    return USBD_OK;
 8007e0e:	2000      	movs	r0, #0
}
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8007e12:	2002      	movs	r0, #2
 8007e14:	e7fc      	b.n	8007e10 <USBD_CDC_DataOut+0x28>

08007e16 <USBD_CDC_DataIn>:
{
 8007e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e18:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8007e1c:	b1ce      	cbz	r6, 8007e52 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e1e:	2214      	movs	r2, #20
 8007e20:	fb02 0201 	mla	r2, r2, r1, r0
 8007e24:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e26:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e2a:	b173      	cbz	r3, 8007e4a <USBD_CDC_DataIn+0x34>
 8007e2c:	2728      	movs	r7, #40	@ 0x28
 8007e2e:	fb07 5401 	mla	r4, r7, r1, r5
 8007e32:	6a24      	ldr	r4, [r4, #32]
 8007e34:	fbb3 f5f4 	udiv	r5, r3, r4
 8007e38:	fb04 3315 	mls	r3, r4, r5, r3
 8007e3c:	b92b      	cbnz	r3, 8007e4a <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8007e3e:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e40:	461a      	mov	r2, r3
 8007e42:	f000 ff49 	bl	8008cd8 <USBD_LL_Transmit>
    return USBD_OK;
 8007e46:	2000      	movs	r0, #0
}
 8007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8007e50:	e7f9      	b.n	8007e46 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8007e52:	2002      	movs	r0, #2
 8007e54:	e7f8      	b.n	8007e48 <USBD_CDC_DataIn+0x32>

08007e56 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8007e56:	2300      	movs	r3, #0
{
 8007e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5a:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8007e5c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8007e60:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e64:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e6c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e70:	d022      	beq.n	8007eb8 <USBD_CDC_Setup+0x62>
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d13a      	bne.n	8007eec <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8007e76:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e78:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8007e7a:	b1ba      	cbz	r2, 8007eac <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8007e7c:	0639      	lsls	r1, r7, #24
 8007e7e:	d50b      	bpl.n	8007e98 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e80:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8007e84:	4618      	mov	r0, r3
 8007e86:	688f      	ldr	r7, [r1, #8]
 8007e88:	4631      	mov	r1, r6
 8007e8a:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4620      	mov	r0, r4
 8007e90:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e92:	f000 fc4d 	bl	8008730 <USBD_CtlSendData>
 8007e96:	e006      	b.n	8007ea6 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e98:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8007e9a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e9e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ea2:	f000 fc5a 	bl	800875a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8007ea6:	2000      	movs	r0, #0
}
 8007ea8:	b003      	add	sp, #12
 8007eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eac:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8007eb0:	6884      	ldr	r4, [r0, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	47a0      	blx	r4
 8007eb6:	e7f6      	b.n	8007ea6 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8007eb8:	784b      	ldrb	r3, [r1, #1]
 8007eba:	2b0a      	cmp	r3, #10
 8007ebc:	d00a      	beq.n	8007ed4 <USBD_CDC_Setup+0x7e>
 8007ebe:	2b0b      	cmp	r3, #11
 8007ec0:	d010      	beq.n	8007ee4 <USBD_CDC_Setup+0x8e>
 8007ec2:	b99b      	cbnz	r3, 8007eec <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d10f      	bne.n	8007eec <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f10d 0106 	add.w	r1, sp, #6
 8007ed2:	e7de      	b.n	8007e92 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d107      	bne.n	8007eec <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007edc:	2201      	movs	r2, #1
 8007ede:	f10d 0105 	add.w	r1, sp, #5
 8007ee2:	e7d6      	b.n	8007e92 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ee4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d0dc      	beq.n	8007ea6 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f000 fbf7 	bl	80086e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef4:	2002      	movs	r0, #2
 8007ef6:	e7d7      	b.n	8007ea8 <USBD_CDC_Setup+0x52>

08007ef8 <USBD_CDC_DeInit>:
{
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007efc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007efe:	2181      	movs	r1, #129	@ 0x81
 8007f00:	f000 feb5 	bl	8008c6e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f04:	2101      	movs	r1, #1
 8007f06:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f08:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f0a:	f000 feb0 	bl	8008c6e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f0e:	2182      	movs	r1, #130	@ 0x82
 8007f10:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f12:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f16:	f000 feaa 	bl	8008c6e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8007f1a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f1e:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8007f20:	b14b      	cbz	r3, 8007f36 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f22:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f2a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8007f2e:	f000 feed 	bl	8008d0c <USBD_static_free>
    pdev->pClassData = NULL;
 8007f32:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8007f36:	2000      	movs	r0, #0
 8007f38:	bd38      	pop	{r3, r4, r5, pc}

08007f3a <USBD_CDC_Init>:
{
 8007f3a:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3c:	7c03      	ldrb	r3, [r0, #16]
{
 8007f3e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f40:	bba3      	cbnz	r3, 8007fac <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f46:	2181      	movs	r1, #129	@ 0x81
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f000 fe84 	bl	8008c56 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f4e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f54:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f56:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f58:	2202      	movs	r2, #2
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fe7b 	bl	8008c56 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f60:	2308      	movs	r3, #8
 8007f62:	2203      	movs	r2, #3
 8007f64:	2182      	movs	r1, #130	@ 0x82
 8007f66:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f68:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f6c:	f000 fe73 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f74:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f76:	f000 fec5 	bl	8008d04 <USBD_static_malloc>
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8007f80:	b1f8      	cbz	r0, 8007fc2 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f82:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4798      	blx	r3
    hcdc->TxState = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007f90:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f94:	7c23      	ldrb	r3, [r4, #16]
 8007f96:	b993      	cbnz	r3, 8007fbe <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8007fa4:	f000 fea1 	bl	8008cea <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8007fa8:	2000      	movs	r0, #0
}
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fac:	2340      	movs	r3, #64	@ 0x40
 8007fae:	2181      	movs	r1, #129	@ 0x81
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f000 fe50 	bl	8008c56 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fb6:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fb8:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fba:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fbc:	e7cb      	b.n	8007f56 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fbe:	2340      	movs	r3, #64	@ 0x40
 8007fc0:	e7ec      	b.n	8007f9c <USBD_CDC_Init+0x62>
    ret = 1U;
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e7f1      	b.n	8007faa <USBD_CDC_Init+0x70>

08007fc6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8007fc6:	b119      	cbz	r1, 8007fd0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8007fc8:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007fd0:	2002      	movs	r0, #2
  }

  return ret;
}
 8007fd2:	4770      	bx	lr

08007fd4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8007fd8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8007fda:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8007fe4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8007fe8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8007fea:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8007fee:	4770      	bx	lr

08007ff0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ff0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8007ff4:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8007ff6:	b182      	cbz	r2, 800801a <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8007ff8:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	b974      	cbnz	r4, 800801e <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008000:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008004:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008008:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800800a:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800800c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8008010:	b29b      	uxth	r3, r3
 8008012:	f000 fe61 	bl	8008cd8 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8008016:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008018:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800801a:	2002      	movs	r0, #2
 800801c:	e7fc      	b.n	8008018 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800801e:	4618      	mov	r0, r3
 8008020:	e7fa      	b.n	8008018 <USBD_CDC_TransmitPacket+0x28>

08008022 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008022:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8008026:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008028:	b162      	cbz	r2, 8008044 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800802a:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800802c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008030:	b933      	cbnz	r3, 8008040 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8008032:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008036:	2101      	movs	r1, #1
 8008038:	f000 fe57 	bl	8008cea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800803c:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800803e:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8008040:	2340      	movs	r3, #64	@ 0x40
 8008042:	e7f8      	b.n	8008036 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8008044:	2002      	movs	r0, #2
 8008046:	e7fa      	b.n	800803e <USBD_CDC_ReceivePacket+0x1c>

08008048 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008048:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800804a:	b180      	cbz	r0, 800806e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800804c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008050:	b113      	cbz	r3, 8008058 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008058:	b109      	cbz	r1, 800805e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800805a:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800805e:	2301      	movs	r3, #1
  pdev->id = id;
 8008060:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008062:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008066:	f000 fdad 	bl	8008bc4 <USBD_LL_Init>

  return USBD_OK;
 800806a:	2000      	movs	r0, #0
}
 800806c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800806e:	2002      	movs	r0, #2
 8008070:	e7fc      	b.n	800806c <USBD_Init+0x24>

08008072 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008072:	b119      	cbz	r1, 800807c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008074:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8008078:	2000      	movs	r0, #0
 800807a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800807c:	2002      	movs	r0, #2
  }

  return status;
}
 800807e:	4770      	bx	lr

08008080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008080:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008082:	f000 fddf 	bl	8008c44 <USBD_LL_Start>

  return USBD_OK;
}
 8008086:	2000      	movs	r0, #0
 8008088:	bd08      	pop	{r3, pc}

0800808a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800808a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800808c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008090:	b133      	cbz	r3, 80080a0 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4798      	blx	r3
 8008096:	3800      	subs	r0, #0
 8008098:	bf18      	it	ne
 800809a:	2001      	movne	r0, #1
 800809c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800809e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80080a0:	2002      	movs	r0, #2
 80080a2:	e7fc      	b.n	800809e <USBD_SetClassConfig+0x14>

080080a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080a4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80080a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4798      	blx	r3

  return USBD_OK;
}
 80080ae:	2000      	movs	r0, #0
 80080b0:	bd08      	pop	{r3, pc}

080080b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080b2:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080b4:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 80080b8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 fb06 	bl	80086cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080c0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80080c2:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80080c6:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80080ca:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 80080ce:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80080d2:	f001 031f 	and.w	r3, r1, #31
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d008      	beq.n	80080ec <USBD_LL_SetupStage+0x3a>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d00b      	beq.n	80080f6 <USBD_LL_SetupStage+0x44>
 80080de:	b97b      	cbnz	r3, 8008100 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080e0:	4629      	mov	r1, r5
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 f8fa 	bl	80082dc <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80080e8:	2000      	movs	r0, #0
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80080ec:	4629      	mov	r1, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fa3c 	bl	800856c <USBD_StdItfReq>
      break;
 80080f4:	e7f8      	b.n	80080e8 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80080f6:	4629      	mov	r1, r5
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fa5b 	bl	80085b4 <USBD_StdEPReq>
      break;
 80080fe:	e7f3      	b.n	80080e8 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008100:	4620      	mov	r0, r4
 8008102:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8008106:	f000 fdbb 	bl	8008c80 <USBD_LL_StallEP>
      break;
 800810a:	e7ed      	b.n	80080e8 <USBD_LL_SetupStage+0x36>

0800810c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4604      	mov	r4, r0
 8008110:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008112:	bb39      	cbnz	r1, 8008164 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008114:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008118:	2a03      	cmp	r2, #3
 800811a:	d11c      	bne.n	8008156 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 800811c:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8008120:	4295      	cmp	r5, r2
 8008122:	d90b      	bls.n	800813c <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8008124:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008126:	42aa      	cmp	r2, r5
 8008128:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800812a:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800812e:	bf8c      	ite	hi
 8008130:	b2aa      	uxthhi	r2, r5
 8008132:	b292      	uxthls	r2, r2
 8008134:	f000 fb1e 	bl	8008774 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008138:	2000      	movs	r0, #0
}
 800813a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800813c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	b123      	cbz	r3, 800814e <USBD_LL_DataOutStage+0x42>
 8008144:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008148:	2a03      	cmp	r2, #3
 800814a:	d100      	bne.n	800814e <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800814c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fb18 	bl	8008784 <USBD_CtlSendStatus>
 8008154:	e7f0      	b.n	8008138 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008156:	2a05      	cmp	r2, #5
 8008158:	d1ee      	bne.n	8008138 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800815a:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800815e:	f000 fd8f 	bl	8008c80 <USBD_LL_StallEP>
 8008162:	e7e9      	b.n	8008138 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008164:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	b12b      	cbz	r3, 8008178 <USBD_LL_DataOutStage+0x6c>
 800816c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008170:	2a03      	cmp	r2, #3
 8008172:	d101      	bne.n	8008178 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8008174:	4798      	blx	r3
 8008176:	e7df      	b.n	8008138 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8008178:	2002      	movs	r0, #2
 800817a:	e7de      	b.n	800813a <USBD_LL_DataOutStage+0x2e>

0800817c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	4604      	mov	r4, r0
 8008180:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008182:	460f      	mov	r7, r1
 8008184:	2900      	cmp	r1, #0
 8008186:	d149      	bne.n	800821c <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008188:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800818c:	2a02      	cmp	r2, #2
 800818e:	d13a      	bne.n	8008206 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8008190:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8008194:	42b5      	cmp	r5, r6
 8008196:	d911      	bls.n	80081bc <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8008198:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800819a:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800819c:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800819e:	b2aa      	uxth	r2, r5
 80081a0:	f000 fad3 	bl	800874a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a4:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a6:	461a      	mov	r2, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fd9d 	bl	8008cea <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80081b0:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d02d      	beq.n	8008214 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80081b8:	2000      	movs	r0, #0
}
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081bc:	69c3      	ldr	r3, [r0, #28]
 80081be:	fbb3 f5f6 	udiv	r5, r3, r6
 80081c2:	fb06 3515 	mls	r5, r6, r5, r3
 80081c6:	b965      	cbnz	r5, 80081e2 <USBD_LL_DataInStage+0x66>
 80081c8:	429e      	cmp	r6, r3
 80081ca:	d80a      	bhi.n	80081e2 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 80081cc:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d206      	bcs.n	80081e2 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081d4:	462a      	mov	r2, r5
 80081d6:	f000 fab8 	bl	800874a <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081da:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 80081dc:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e0:	e7e1      	b.n	80081a6 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081e2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	b12b      	cbz	r3, 80081f6 <USBD_LL_DataInStage+0x7a>
 80081ea:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80081ee:	2a03      	cmp	r2, #3
 80081f0:	d101      	bne.n	80081f6 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80081f2:	4620      	mov	r0, r4
 80081f4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80081f6:	2180      	movs	r1, #128	@ 0x80
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fd41 	bl	8008c80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 facb 	bl	800879a <USBD_CtlReceiveStatus>
 8008204:	e7d4      	b.n	80081b0 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008206:	f032 0304 	bics.w	r3, r2, #4
 800820a:	d1d1      	bne.n	80081b0 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800820c:	2180      	movs	r1, #128	@ 0x80
 800820e:	f000 fd37 	bl	8008c80 <USBD_LL_StallEP>
 8008212:	e7cd      	b.n	80081b0 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800821a:	e7cd      	b.n	80081b8 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800821c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	b12b      	cbz	r3, 8008230 <USBD_LL_DataInStage+0xb4>
 8008224:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008228:	2a03      	cmp	r2, #3
 800822a:	d101      	bne.n	8008230 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800822c:	4798      	blx	r3
 800822e:	e7c3      	b.n	80081b8 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8008230:	2002      	movs	r0, #2
 8008232:	e7c2      	b.n	80081ba <USBD_LL_DataInStage+0x3e>

08008234 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008234:	2200      	movs	r2, #0
{
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800823a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800823c:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800823e:	4611      	mov	r1, r2
 8008240:	2340      	movs	r3, #64	@ 0x40
 8008242:	f000 fd08 	bl	8008c56 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008246:	4633      	mov	r3, r6
 8008248:	2180      	movs	r1, #128	@ 0x80
 800824a:	2200      	movs	r2, #0
 800824c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800824e:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008252:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008256:	f000 fcfe 	bl	8008c56 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800825a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800825c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008260:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008262:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008264:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008268:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800826c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800826e:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8008272:	b123      	cbz	r3, 800827e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008274:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8008278:	4620      	mov	r0, r4
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800827e:	2000      	movs	r0, #0
 8008280:	bd70      	pop	{r4, r5, r6, pc}

08008282 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008282:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008284:	2000      	movs	r0, #0
 8008286:	4770      	bx	lr

08008288 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008288:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800828c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008290:	2304      	movs	r3, #4
 8008292:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8008296:	2000      	movs	r0, #0
 8008298:	4770      	bx	lr

0800829a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800829a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800829e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80082a0:	bf04      	itt	eq
 80082a2:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 80082a6:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80082aa:	2000      	movs	r0, #0
 80082ac:	4770      	bx	lr

080082ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ae:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80082b4:	2a03      	cmp	r2, #3
 80082b6:	d104      	bne.n	80082c2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80082b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	b103      	cbz	r3, 80082c2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80082c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80082c2:	2000      	movs	r0, #0
 80082c4:	bd08      	pop	{r3, pc}

080082c6 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80082c6:	b510      	push	{r4, lr}
 80082c8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80082ca:	2180      	movs	r1, #128	@ 0x80
 80082cc:	f000 fcd8 	bl	8008c80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082d0:	4620      	mov	r0, r4
}
 80082d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80082d6:	2100      	movs	r1, #0
 80082d8:	f000 bcd2 	b.w	8008c80 <USBD_LL_StallEP>

080082dc <USBD_StdDevReq>:
{
 80082dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082de:	780b      	ldrb	r3, [r1, #0]
 80082e0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082e6:	2b20      	cmp	r3, #32
{
 80082e8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ea:	d006      	beq.n	80082fa <USBD_StdDevReq+0x1e>
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	d004      	beq.n	80082fa <USBD_StdDevReq+0x1e>
 80082f0:	b163      	cbz	r3, 800830c <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7ff ffe7 	bl	80082c6 <USBD_CtlError.constprop.0>
        break;
 80082f8:	e005      	b.n	8008306 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80082fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80082fe:	4629      	mov	r1, r5
 8008300:	4620      	mov	r0, r4
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	4798      	blx	r3
}
 8008306:	2000      	movs	r0, #0
 8008308:	b003      	add	sp, #12
 800830a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800830c:	784b      	ldrb	r3, [r1, #1]
 800830e:	2b09      	cmp	r3, #9
 8008310:	d8ef      	bhi.n	80082f2 <USBD_StdDevReq+0x16>
 8008312:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <USBD_StdDevReq+0x3c>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800851b 	.word	0x0800851b
 800831c:	08008551 	.word	0x08008551
 8008320:	080082f3 	.word	0x080082f3
 8008324:	08008543 	.word	0x08008543
 8008328:	080082f3 	.word	0x080082f3
 800832c:	08008441 	.word	0x08008441
 8008330:	08008341 	.word	0x08008341
 8008334:	080082f3 	.word	0x080082f3
 8008338:	080084eb 	.word	0x080084eb
 800833c:	08008483 	.word	0x08008483
  uint16_t len = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008346:	884b      	ldrh	r3, [r1, #2]
 8008348:	0a1a      	lsrs	r2, r3, #8
 800834a:	3a01      	subs	r2, #1
 800834c:	2a06      	cmp	r2, #6
 800834e:	d8d0      	bhi.n	80082f2 <USBD_StdDevReq+0x16>
 8008350:	a101      	add	r1, pc, #4	@ (adr r1, 8008358 <USBD_StdDevReq+0x7c>)
 8008352:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008375 	.word	0x08008375
 800835c:	08008399 	.word	0x08008399
 8008360:	080083b3 	.word	0x080083b3
 8008364:	080082f3 	.word	0x080082f3
 8008368:	080082f3 	.word	0x080082f3
 800836c:	080083f7 	.word	0x080083f7
 8008370:	0800840d 	.word	0x0800840d
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008374:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008378:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800837a:	7c20      	ldrb	r0, [r4, #16]
 800837c:	f10d 0106 	add.w	r1, sp, #6
 8008380:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8008382:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008386:	88eb      	ldrh	r3, [r5, #6]
 8008388:	2a00      	cmp	r2, #0
 800838a:	d054      	beq.n	8008436 <USBD_StdDevReq+0x15a>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d149      	bne.n	8008424 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f9f7 	bl	8008784 <USBD_CtlSendStatus>
 8008396:	e7b6      	b.n	8008306 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008398:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800839a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839e:	b932      	cbnz	r2, 80083ae <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083a2:	f10d 0006 	add.w	r0, sp, #6
 80083a6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083a8:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083aa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80083ac:	e7e9      	b.n	8008382 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	e7f7      	b.n	80083a2 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b05      	cmp	r3, #5
 80083b6:	d89c      	bhi.n	80082f2 <USBD_StdDevReq+0x16>
 80083b8:	e8df f003 	tbb	[pc, r3]
 80083bc:	110d0903 	.word	0x110d0903
 80083c0:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083c2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083c6:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1d6      	bne.n	800837a <USBD_StdDevReq+0x9e>
 80083cc:	e791      	b.n	80082f2 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083ce:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	e7f8      	b.n	80083c8 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083d6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	e7f4      	b.n	80083c8 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083de:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	e7f0      	b.n	80083c8 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083e6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	e7ec      	b.n	80083c8 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083ee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	e7e8      	b.n	80083c8 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	7c03      	ldrb	r3, [r0, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f47f af7a 	bne.w	80082f2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008402:	f10d 0006 	add.w	r0, sp, #6
 8008406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008408:	4798      	blx	r3
  if (err != 0U)
 800840a:	e7ba      	b.n	8008382 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800840c:	7c03      	ldrb	r3, [r0, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f47f af6f 	bne.w	80082f2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008414:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008418:	f10d 0006 	add.w	r0, sp, #6
 800841c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008420:	2307      	movs	r3, #7
 8008422:	e7c2      	b.n	80083aa <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8008424:	429a      	cmp	r2, r3
 8008426:	bf28      	it	cs
 8008428:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800842a:	4601      	mov	r1, r0
 800842c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800842e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008432:	f000 f97d 	bl	8008730 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008436:	88eb      	ldrh	r3, [r5, #6]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f47f af64 	bne.w	8008306 <USBD_StdDevReq+0x2a>
 800843e:	e7a7      	b.n	8008390 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008440:	888b      	ldrh	r3, [r1, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f47f af55 	bne.w	80082f2 <USBD_StdDevReq+0x16>
 8008448:	88cb      	ldrh	r3, [r1, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f47f af51 	bne.w	80082f2 <USBD_StdDevReq+0x16>
 8008450:	884d      	ldrh	r5, [r1, #2]
 8008452:	2d7f      	cmp	r5, #127	@ 0x7f
 8008454:	f63f af4d 	bhi.w	80082f2 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800845c:	2b03      	cmp	r3, #3
 800845e:	f43f af48 	beq.w	80082f2 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008462:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008464:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8008466:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800846a:	f000 fc2c 	bl	8008cc6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800846e:	4620      	mov	r0, r4
 8008470:	f000 f988 	bl	8008784 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008474:	b11d      	cbz	r5, 800847e <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008476:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008478:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800847c:	e743      	b.n	8008306 <USBD_StdDevReq+0x2a>
 800847e:	2301      	movs	r3, #1
 8008480:	e7fa      	b.n	8008478 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8008482:	7889      	ldrb	r1, [r1, #2]
 8008484:	4d38      	ldr	r5, [pc, #224]	@ (8008568 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008486:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008488:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800848a:	f63f af32 	bhi.w	80082f2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 800848e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008492:	2b02      	cmp	r3, #2
 8008494:	d008      	beq.n	80084a8 <USBD_StdDevReq+0x1cc>
 8008496:	2b03      	cmp	r3, #3
 8008498:	d015      	beq.n	80084c6 <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 800849a:	f7ff ff14 	bl	80082c6 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800849e:	4620      	mov	r0, r4
 80084a0:	7829      	ldrb	r1, [r5, #0]
 80084a2:	f7ff fdff 	bl	80080a4 <USBD_ClrClassConfig>
        break;
 80084a6:	e72e      	b.n	8008306 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 80084a8:	2900      	cmp	r1, #0
 80084aa:	f43f af71 	beq.w	8008390 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 80084ae:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084b0:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80084b2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084b4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084b8:	4620      	mov	r0, r4
 80084ba:	f7ff fde6 	bl	800808a <USBD_SetClassConfig>
 80084be:	2802      	cmp	r0, #2
 80084c0:	f47f af66 	bne.w	8008390 <USBD_StdDevReq+0xb4>
 80084c4:	e715      	b.n	80082f2 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 80084c6:	b931      	cbnz	r1, 80084d6 <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80084ca:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084cc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80084d0:	f7ff fde8 	bl	80080a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80084d4:	e75c      	b.n	8008390 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 80084d6:	6841      	ldr	r1, [r0, #4]
 80084d8:	2901      	cmp	r1, #1
 80084da:	f43f af59 	beq.w	8008390 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084de:	b2c9      	uxtb	r1, r1
 80084e0:	f7ff fde0 	bl	80080a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80084e4:	7829      	ldrb	r1, [r5, #0]
 80084e6:	6061      	str	r1, [r4, #4]
 80084e8:	e7e6      	b.n	80084b8 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 80084ea:	88ca      	ldrh	r2, [r1, #6]
 80084ec:	2a01      	cmp	r2, #1
 80084ee:	f47f af00 	bne.w	80082f2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 80084f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d80a      	bhi.n	8008510 <USBD_StdDevReq+0x234>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f43f aef9 	beq.w	80082f2 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8008500:	4601      	mov	r1, r0
 8008502:	2300      	movs	r3, #0
 8008504:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008508:	4620      	mov	r0, r4
 800850a:	f000 f911 	bl	8008730 <USBD_CtlSendData>
      break;
 800850e:	e6fa      	b.n	8008306 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8008510:	2b03      	cmp	r3, #3
 8008512:	f47f aeee 	bne.w	80082f2 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008516:	1d01      	adds	r1, r0, #4
 8008518:	e7f6      	b.n	8008508 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 800851a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800851e:	3b01      	subs	r3, #1
 8008520:	2b02      	cmp	r3, #2
 8008522:	f63f aee6 	bhi.w	80082f2 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8008526:	88ca      	ldrh	r2, [r1, #6]
 8008528:	2a02      	cmp	r2, #2
 800852a:	f47f aee2 	bne.w	80082f2 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 800852e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8008532:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008534:	2b00      	cmp	r3, #0
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2303      	movne	r3, #3
 800853c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8008540:	e7e2      	b.n	8008508 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008542:	884b      	ldrh	r3, [r1, #2]
 8008544:	2b01      	cmp	r3, #1
 8008546:	f47f aede 	bne.w	8008306 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800854a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800854e:	e71f      	b.n	8008390 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8008550:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008554:	3b01      	subs	r3, #1
 8008556:	2b02      	cmp	r3, #2
 8008558:	f63f aecb 	bhi.w	80082f2 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800855c:	884b      	ldrh	r3, [r1, #2]
 800855e:	2b01      	cmp	r3, #1
 8008560:	f47f aed1 	bne.w	8008306 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	e7f0      	b.n	800854a <USBD_StdDevReq+0x26e>
 8008568:	20000681 	.word	0x20000681

0800856c <USBD_StdItfReq>:
{
 800856c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800856e:	780b      	ldrb	r3, [r1, #0]
{
 8008570:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008572:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8008576:	065b      	lsls	r3, r3, #25
{
 8008578:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857a:	d501      	bpl.n	8008580 <USBD_StdItfReq+0x14>
 800857c:	2a40      	cmp	r2, #64	@ 0x40
 800857e:	d115      	bne.n	80085ac <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8008580:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008584:	3b01      	subs	r3, #1
 8008586:	2b02      	cmp	r3, #2
 8008588:	d810      	bhi.n	80085ac <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800858a:	792b      	ldrb	r3, [r5, #4]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d80d      	bhi.n	80085ac <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008590:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8008594:	4629      	mov	r1, r5
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	4620      	mov	r0, r4
 800859a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800859c:	88eb      	ldrh	r3, [r5, #6]
 800859e:	b91b      	cbnz	r3, 80085a8 <USBD_StdItfReq+0x3c>
 80085a0:	b910      	cbnz	r0, 80085a8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f8ee 	bl	8008784 <USBD_CtlSendStatus>
}
 80085a8:	2000      	movs	r0, #0
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7ff fe8a 	bl	80082c6 <USBD_CtlError.constprop.0>
          break;
 80085b2:	e7f9      	b.n	80085a8 <USBD_StdItfReq+0x3c>

080085b4 <USBD_StdEPReq>:
{
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	780a      	ldrb	r2, [r1, #0]
 80085b8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80085ba:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085be:	2a20      	cmp	r2, #32
{
 80085c0:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 80085c2:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c4:	d006      	beq.n	80085d4 <USBD_StdEPReq+0x20>
 80085c6:	2a40      	cmp	r2, #64	@ 0x40
 80085c8:	d004      	beq.n	80085d4 <USBD_StdEPReq+0x20>
 80085ca:	b15a      	cbz	r2, 80085e4 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7ff fe7a 	bl	80082c6 <USBD_CtlError.constprop.0>
              break;
 80085d2:	e005      	b.n	80085e0 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 80085d4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 80085d8:	4619      	mov	r1, r3
 80085da:	4620      	mov	r0, r4
 80085dc:	6892      	ldr	r2, [r2, #8]
 80085de:	4790      	blx	r2
}
 80085e0:	2000      	movs	r0, #0
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 80085e4:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80085e6:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80085e8:	2a01      	cmp	r2, #1
 80085ea:	d035      	beq.n	8008658 <USBD_StdEPReq+0xa4>
 80085ec:	2a03      	cmp	r2, #3
 80085ee:	d021      	beq.n	8008634 <USBD_StdEPReq+0x80>
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d1eb      	bne.n	80085cc <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 80085f4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d044      	beq.n	8008686 <USBD_StdEPReq+0xd2>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d1e5      	bne.n	80085cc <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8008600:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008602:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8008606:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800860a:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800860e:	d04b      	beq.n	80086a8 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0da      	beq.n	80085cc <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008616:	2514      	movs	r5, #20
 8008618:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800861c:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008620:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008622:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008624:	d04b      	beq.n	80086be <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008626:	4620      	mov	r0, r4
 8008628:	f000 fb3c 	bl	8008ca4 <USBD_LL_IsStallEP>
 800862c:	2800      	cmp	r0, #0
 800862e:	d04b      	beq.n	80086c8 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8008630:	2301      	movs	r3, #1
 8008632:	e045      	b.n	80086c0 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8008634:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008638:	2a02      	cmp	r2, #2
 800863a:	d01b      	beq.n	8008674 <USBD_StdEPReq+0xc0>
 800863c:	2a03      	cmp	r2, #3
 800863e:	d1c5      	bne.n	80085cc <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008640:	885a      	ldrh	r2, [r3, #2]
 8008642:	b92a      	cbnz	r2, 8008650 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8008644:	064a      	lsls	r2, r1, #25
 8008646:	d003      	beq.n	8008650 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	b90b      	cbnz	r3, 8008650 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 800864c:	f000 fb18 	bl	8008c80 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8008650:	4620      	mov	r0, r4
 8008652:	f000 f897 	bl	8008784 <USBD_CtlSendStatus>
              break;
 8008656:	e7c3      	b.n	80085e0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8008658:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800865c:	2a02      	cmp	r2, #2
 800865e:	d009      	beq.n	8008674 <USBD_StdEPReq+0xc0>
 8008660:	2a03      	cmp	r2, #3
 8008662:	d1b3      	bne.n	80085cc <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008664:	885b      	ldrh	r3, [r3, #2]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1ba      	bne.n	80085e0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800866a:	064d      	lsls	r5, r1, #25
 800866c:	d0f0      	beq.n	8008650 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800866e:	f000 fb10 	bl	8008c92 <USBD_LL_ClearStallEP>
 8008672:	e7ed      	b.n	8008650 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008674:	064b      	lsls	r3, r1, #25
 8008676:	d0a9      	beq.n	80085cc <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8008678:	f000 fb02 	bl	8008c80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800867c:	2180      	movs	r1, #128	@ 0x80
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fafe 	bl	8008c80 <USBD_LL_StallEP>
 8008684:	e7ac      	b.n	80085e0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008686:	064a      	lsls	r2, r1, #25
 8008688:	d1a0      	bne.n	80085cc <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800868c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008690:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008694:	bf4c      	ite	mi
 8008696:	f100 0114 	addmi.w	r1, r0, #20
 800869a:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800869e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 f845 	bl	8008730 <USBD_CtlSendData>
              break;
 80086a6:	e79b      	b.n	80085e0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086a8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d08d      	beq.n	80085cc <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086b0:	2514      	movs	r5, #20
 80086b2:	fb05 0501 	mla	r5, r5, r1, r0
 80086b6:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086ba:	2900      	cmp	r1, #0
 80086bc:	d1b3      	bne.n	8008626 <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 80086be:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 80086c0:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086c2:	2202      	movs	r2, #2
 80086c4:	4629      	mov	r1, r5
 80086c6:	e7eb      	b.n	80086a0 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 80086c8:	6028      	str	r0, [r5, #0]
 80086ca:	e7fa      	b.n	80086c2 <USBD_StdEPReq+0x10e>

080086cc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80086cc:	780b      	ldrb	r3, [r1, #0]
 80086ce:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80086d0:	784b      	ldrb	r3, [r1, #1]
 80086d2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80086d4:	884b      	ldrh	r3, [r1, #2]
 80086d6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086d8:	888b      	ldrh	r3, [r1, #4]
 80086da:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80086dc:	88cb      	ldrh	r3, [r1, #6]
 80086de:	80c3      	strh	r3, [r0, #6]
}
 80086e0:	4770      	bx	lr

080086e2 <USBD_CtlError>:
{
 80086e2:	b510      	push	{r4, lr}
 80086e4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80086e6:	2180      	movs	r1, #128	@ 0x80
 80086e8:	f000 faca 	bl	8008c80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80086ec:	4620      	mov	r0, r4
}
 80086ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80086f2:	2100      	movs	r1, #0
 80086f4:	f000 bac4 	b.w	8008c80 <USBD_LL_StallEP>

080086f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	460d      	mov	r5, r1
 80086fc:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80086fe:	4604      	mov	r4, r0
 8008700:	b170      	cbz	r0, 8008720 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008702:	f7f7 fd25 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008706:	b2c3      	uxtb	r3, r0
 8008708:	3301      	adds	r3, #1
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800870e:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008710:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8008712:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008714:	706b      	strb	r3, [r5, #1]
 8008716:	2302      	movs	r3, #2
 8008718:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800871a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800871e:	b901      	cbnz	r1, 8008722 <USBD_GetString+0x2a>
}
 8008720:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	54e9      	strb	r1, [r5, r3]
 8008726:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8008728:	3302      	adds	r3, #2
 800872a:	b2db      	uxtb	r3, r3
 800872c:	54a8      	strb	r0, [r5, r2]
 800872e:	e7f4      	b.n	800871a <USBD_GetString+0x22>

08008730 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008730:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008732:	2202      	movs	r2, #2
{
 8008734:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8008736:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800873a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800873e:	460a      	mov	r2, r1
 8008740:	2100      	movs	r1, #0
 8008742:	f000 fac9 	bl	8008cd8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008746:	2000      	movs	r0, #0
 8008748:	bd10      	pop	{r4, pc}

0800874a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800874a:	b508      	push	{r3, lr}
 800874c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800874e:	460a      	mov	r2, r1
 8008750:	2100      	movs	r1, #0
 8008752:	f000 fac1 	bl	8008cd8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008756:	2000      	movs	r0, #0
 8008758:	bd08      	pop	{r3, pc}

0800875a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800875a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800875c:	2203      	movs	r2, #3
{
 800875e:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8008760:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008764:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008768:	460a      	mov	r2, r1
 800876a:	2100      	movs	r1, #0
 800876c:	f000 fabd 	bl	8008cea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008770:	2000      	movs	r0, #0
 8008772:	bd10      	pop	{r4, pc}

08008774 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008774:	b508      	push	{r3, lr}
 8008776:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008778:	460a      	mov	r2, r1
 800877a:	2100      	movs	r1, #0
 800877c:	f000 fab5 	bl	8008cea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008780:	2000      	movs	r0, #0
 8008782:	bd08      	pop	{r3, pc}

08008784 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008784:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008786:	2304      	movs	r3, #4
 8008788:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800878c:	2300      	movs	r3, #0
 800878e:	461a      	mov	r2, r3
 8008790:	4619      	mov	r1, r3
 8008792:	f000 faa1 	bl	8008cd8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008796:	2000      	movs	r0, #0
 8008798:	bd08      	pop	{r3, pc}

0800879a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800879a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800879c:	2305      	movs	r3, #5
 800879e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087a2:	2300      	movs	r3, #0
 80087a4:	461a      	mov	r2, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	f000 fa9f 	bl	8008cea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087ac:	2000      	movs	r0, #0
 80087ae:	bd08      	pop	{r3, pc}

080087b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087b2:	2200      	movs	r2, #0
 80087b4:	490e      	ldr	r1, [pc, #56]	@ (80087f0 <MX_USB_DEVICE_Init+0x40>)
 80087b6:	480f      	ldr	r0, [pc, #60]	@ (80087f4 <MX_USB_DEVICE_Init+0x44>)
 80087b8:	f7ff fc46 	bl	8008048 <USBD_Init>
 80087bc:	b108      	cbz	r0, 80087c2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80087be:	f7f9 faef 	bl	8001da0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087c2:	490d      	ldr	r1, [pc, #52]	@ (80087f8 <MX_USB_DEVICE_Init+0x48>)
 80087c4:	480b      	ldr	r0, [pc, #44]	@ (80087f4 <MX_USB_DEVICE_Init+0x44>)
 80087c6:	f7ff fc54 	bl	8008072 <USBD_RegisterClass>
 80087ca:	b108      	cbz	r0, 80087d0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80087cc:	f7f9 fae8 	bl	8001da0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087d0:	490a      	ldr	r1, [pc, #40]	@ (80087fc <MX_USB_DEVICE_Init+0x4c>)
 80087d2:	4808      	ldr	r0, [pc, #32]	@ (80087f4 <MX_USB_DEVICE_Init+0x44>)
 80087d4:	f7ff fbf7 	bl	8007fc6 <USBD_CDC_RegisterInterface>
 80087d8:	b108      	cbz	r0, 80087de <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80087da:	f7f9 fae1 	bl	8001da0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087de:	4805      	ldr	r0, [pc, #20]	@ (80087f4 <MX_USB_DEVICE_Init+0x44>)
 80087e0:	f7ff fc4e 	bl	8008080 <USBD_Start>
 80087e4:	b118      	cbz	r0, 80087ee <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80087ea:	f7f9 bad9 	b.w	8001da0 <Error_Handler>
}
 80087ee:	bd08      	pop	{r3, pc}
 80087f0:	200001a8 	.word	0x200001a8
 80087f4:	20000684 	.word	0x20000684
 80087f8:	20000120 	.word	0x20000120
 80087fc:	20000164 	.word	0x20000164

08008800 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8008800:	2000      	movs	r0, #0
 8008802:	4770      	bx	lr

08008804 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8008804:	2000      	movs	r0, #0
 8008806:	4770      	bx	lr

08008808 <CDC_Init_FS>:
{
 8008808:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800880a:	4c06      	ldr	r4, [pc, #24]	@ (8008824 <CDC_Init_FS+0x1c>)
 800880c:	2200      	movs	r2, #0
 800880e:	4620      	mov	r0, r4
 8008810:	4905      	ldr	r1, [pc, #20]	@ (8008828 <CDC_Init_FS+0x20>)
 8008812:	f7ff fbdf 	bl	8007fd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008816:	4620      	mov	r0, r4
 8008818:	4904      	ldr	r1, [pc, #16]	@ (800882c <CDC_Init_FS+0x24>)
 800881a:	f7ff fbe3 	bl	8007fe4 <USBD_CDC_SetRxBuffer>
}
 800881e:	2000      	movs	r0, #0
 8008820:	bd10      	pop	{r4, pc}
 8008822:	bf00      	nop
 8008824:	20000684 	.word	0x20000684
 8008828:	20000989 	.word	0x20000989
 800882c:	20000d89 	.word	0x20000d89

08008830 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008830:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008832:	4c09      	ldr	r4, [pc, #36]	@ (8008858 <CDC_Transmit_FS+0x28>)
{
 8008834:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008836:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800883a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800883e:	b943      	cbnz	r3, 8008852 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008840:	4601      	mov	r1, r0
 8008842:	4620      	mov	r0, r4
 8008844:	f7ff fbc6 	bl	8007fd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008848:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800884e:	f7ff bbcf 	b.w	8007ff0 <USBD_CDC_TransmitPacket>
}
 8008852:	2001      	movs	r0, #1
 8008854:	bd10      	pop	{r4, pc}
 8008856:	bf00      	nop
 8008858:	20000684 	.word	0x20000684

0800885c <CDC_Receive_FS>:
{
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	4606      	mov	r6, r0
 8008862:	4688      	mov	r8, r1
		    for (uint32_t i = 0; i < *Len; i++) {
 8008864:	2700      	movs	r7, #0
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8008866:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 80089b0 <CDC_Receive_FS+0x154>
 800886a:	4d52      	ldr	r5, [pc, #328]	@ (80089b4 <CDC_Receive_FS+0x158>)
{
 800886c:	b095      	sub	sp, #84	@ 0x54
		    for (uint32_t i = 0; i < *Len; i++) {
 800886e:	f8d8 3000 	ldr.w	r3, [r8]
 8008872:	42bb      	cmp	r3, r7
 8008874:	d80a      	bhi.n	800888c <CDC_Receive_FS+0x30>
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008876:	4631      	mov	r1, r6
 8008878:	484f      	ldr	r0, [pc, #316]	@ (80089b8 <CDC_Receive_FS+0x15c>)
 800887a:	f7ff fbb3 	bl	8007fe4 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800887e:	484e      	ldr	r0, [pc, #312]	@ (80089b8 <CDC_Receive_FS+0x15c>)
 8008880:	f7ff fbcf 	bl	8008022 <USBD_CDC_ReceivePacket>
}
 8008884:	2000      	movs	r0, #0
 8008886:	b015      	add	sp, #84	@ 0x54
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		        char byte = Buf[i]; // Чтение байта
 800888c:	5df2      	ldrb	r2, [r6, r7]
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 800888e:	f899 3000 	ldrb.w	r3, [r9]
 8008892:	2a0a      	cmp	r2, #10
 8008894:	d002      	beq.n	800889c <CDC_Receive_FS+0x40>
 8008896:	2b3e      	cmp	r3, #62	@ 0x3e
 8008898:	f240 8084 	bls.w	80089a4 <CDC_Receive_FS+0x148>
		            rx_buffer[rx_index] = '\0';
 800889c:	2200      	movs	r2, #0
 800889e:	54ea      	strb	r2, [r5, r3]
		                     if (rx_buffer[0] == 'F') {
 80088a0:	782b      	ldrb	r3, [r5, #0]
 80088a2:	2b46      	cmp	r3, #70	@ 0x46
 80088a4:	d146      	bne.n	8008934 <CDC_Receive_FS+0xd8>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 80088a6:	78ab      	ldrb	r3, [r5, #2]
		                         uint8_t ch = rx_buffer[1] - '0';
 80088a8:	786c      	ldrb	r4, [r5, #1]
		                         if (rx_buffer[2] == ':' && ch < 3) {
 80088aa:	2b3a      	cmp	r3, #58	@ 0x3a
 80088ac:	d13f      	bne.n	800892e <CDC_Receive_FS+0xd2>
		                         uint8_t ch = rx_buffer[1] - '0';
 80088ae:	3c30      	subs	r4, #48	@ 0x30
 80088b0:	b2e4      	uxtb	r4, r4
		                         if (rx_buffer[2] == ':' && ch < 3) {
 80088b2:	2c02      	cmp	r4, #2
 80088b4:	d83b      	bhi.n	800892e <CDC_Receive_FS+0xd2>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 80088b6:	4841      	ldr	r0, [pc, #260]	@ (80089bc <CDC_Receive_FS+0x160>)
 80088b8:	f000 fa2a 	bl	8008d10 <atoi>
 80088bc:	4682      	mov	sl, r0
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 80088be:	483f      	ldr	r0, [pc, #252]	@ (80089bc <CDC_Receive_FS+0x160>)
 80088c0:	f000 fa26 	bl	8008d10 <atoi>
		                             if (set_freq > 0 && set_freq < 150000000) {
 80088c4:	4b3e      	ldr	r3, [pc, #248]	@ (80089c0 <CDC_Receive_FS+0x164>)
 80088c6:	1e42      	subs	r2, r0, #1
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d81d      	bhi.n	8008908 <CDC_Receive_FS+0xac>
		                            	 freq[ch] = set_freq / 1000;
 80088cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80088d0:	fbb0 f0f3 	udiv	r0, r0, r3
		                            	 int_to_str(freq[ch], num_string[ch]);
 80088d4:	493b      	ldr	r1, [pc, #236]	@ (80089c4 <CDC_Receive_FS+0x168>)
 80088d6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
		                            	 freq[ch] = set_freq / 1000;
 80088da:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 80089c8 <CDC_Receive_FS+0x16c>
		                            	 int_to_str(freq[ch], num_string[ch]);
 80088de:	4419      	add	r1, r3
		                            	 freq[ch] = set_freq / 1000;
 80088e0:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 80088e4:	f7f8 fc7c 	bl	80011e0 <int_to_str>
		                            	 print_interface_mode0();
 80088e8:	f7f8 fcee 	bl	80012c8 <print_interface_mode0>
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 80088ec:	4623      	mov	r3, r4
 80088ee:	2140      	movs	r1, #64	@ 0x40
 80088f0:	4a36      	ldr	r2, [pc, #216]	@ (80089cc <CDC_Receive_FS+0x170>)
 80088f2:	f8cd a000 	str.w	sl, [sp]
 80088f6:	a804      	add	r0, sp, #16
 80088f8:	f000 fb40 	bl	8008f7c <sniprintf>
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80088fc:	a804      	add	r0, sp, #16
 80088fe:	f7f7 fc27 	bl	8000150 <strlen>
 8008902:	b281      	uxth	r1, r0
 8008904:	a804      	add	r0, sp, #16
 8008906:	e00b      	b.n	8008920 <CDC_Receive_FS+0xc4>
		                             } else if (freq == 0) {
 8008908:	f1ba 0f00 	cmp.w	sl, #0
 800890c:	d106      	bne.n	800891c <CDC_Receive_FS+0xc0>
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 800890e:	4623      	mov	r3, r4
 8008910:	2120      	movs	r1, #32
 8008912:	4a2f      	ldr	r2, [pc, #188]	@ (80089d0 <CDC_Receive_FS+0x174>)
 8008914:	a804      	add	r0, sp, #16
 8008916:	f000 fb31 	bl	8008f7c <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800891a:	e7ef      	b.n	80088fc <CDC_Receive_FS+0xa0>
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 800891c:	2114      	movs	r1, #20
 800891e:	482d      	ldr	r0, [pc, #180]	@ (80089d4 <CDC_Receive_FS+0x178>)
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 8008920:	f7ff ff86 	bl	8008830 <CDC_Transmit_FS>
		            rx_index = 0; // Очищаем буфер
 8008924:	2300      	movs	r3, #0
 8008926:	f889 3000 	strb.w	r3, [r9]
		    for (uint32_t i = 0; i < *Len; i++) {
 800892a:	3701      	adds	r7, #1
 800892c:	e79f      	b.n	800886e <CDC_Receive_FS+0x12>
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 800892e:	2111      	movs	r1, #17
 8008930:	4829      	ldr	r0, [pc, #164]	@ (80089d8 <CDC_Receive_FS+0x17c>)
 8008932:	e7f5      	b.n	8008920 <CDC_Receive_FS+0xc4>
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 8008934:	2204      	movs	r2, #4
 8008936:	4628      	mov	r0, r5
 8008938:	4928      	ldr	r1, [pc, #160]	@ (80089dc <CDC_Receive_FS+0x180>)
 800893a:	f000 fb5d 	bl	8008ff8 <strncmp>
 800893e:	b948      	cbnz	r0, 8008954 <CDC_Receive_FS+0xf8>
		                char msg[] = "Normally\r\n";
 8008940:	4a27      	ldr	r2, [pc, #156]	@ (80089e0 <CDC_Receive_FS+0x184>)
 8008942:	ab04      	add	r3, sp, #16
 8008944:	6851      	ldr	r1, [r2, #4]
 8008946:	6810      	ldr	r0, [r2, #0]
 8008948:	c303      	stmia	r3!, {r0, r1}
 800894a:	8911      	ldrh	r1, [r2, #8]
 800894c:	7a92      	ldrb	r2, [r2, #10]
 800894e:	8019      	strh	r1, [r3, #0]
 8008950:	709a      	strb	r2, [r3, #2]
 8008952:	e7d3      	b.n	80088fc <CDC_Receive_FS+0xa0>
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 8008954:	2206      	movs	r2, #6
 8008956:	4628      	mov	r0, r5
 8008958:	4922      	ldr	r1, [pc, #136]	@ (80089e4 <CDC_Receive_FS+0x188>)
 800895a:	f000 fb4d 	bl	8008ff8 <strncmp>
 800895e:	4603      	mov	r3, r0
 8008960:	2800      	cmp	r0, #0
 8008962:	d1df      	bne.n	8008924 <CDC_Receive_FS+0xc8>
 8008964:	4c18      	ldr	r4, [pc, #96]	@ (80089c8 <CDC_Receive_FS+0x16c>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8008966:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80089e8 <CDC_Receive_FS+0x18c>
 800896a:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80089ec <CDC_Receive_FS+0x190>
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800896e:	4a20      	ldr	r2, [pc, #128]	@ (80089f0 <CDC_Receive_FS+0x194>)
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8008970:	f854 1b04 	ldr.w	r1, [r4], #4
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8008974:	9303      	str	r3, [sp, #12]
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8008976:	2900      	cmp	r1, #0
 8008978:	bfd4      	ite	le
 800897a:	4658      	movle	r0, fp
 800897c:	4650      	movgt	r0, sl
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800897e:	e9cd 0100 	strd	r0, r1, [sp]
 8008982:	2140      	movs	r1, #64	@ 0x40
 8008984:	a804      	add	r0, sp, #16
 8008986:	f000 faf9 	bl	8008f7c <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800898a:	a804      	add	r0, sp, #16
 800898c:	f7f7 fbe0 	bl	8000150 <strlen>
 8008990:	b281      	uxth	r1, r0
 8008992:	a804      	add	r0, sp, #16
 8008994:	f7ff ff4c 	bl	8008830 <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	4a15      	ldr	r2, [pc, #84]	@ (80089f0 <CDC_Receive_FS+0x194>)
 800899c:	3301      	adds	r3, #1
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d1e6      	bne.n	8008970 <CDC_Receive_FS+0x114>
 80089a2:	e7bf      	b.n	8008924 <CDC_Receive_FS+0xc8>
		            rx_buffer[rx_index++] = byte;
 80089a4:	1c59      	adds	r1, r3, #1
 80089a6:	f889 1000 	strb.w	r1, [r9]
 80089aa:	54ea      	strb	r2, [r5, r3]
 80089ac:	e7bd      	b.n	800892a <CDC_Receive_FS+0xce>
 80089ae:	bf00      	nop
 80089b0:	20000988 	.word	0x20000988
 80089b4:	20000948 	.word	0x20000948
 80089b8:	20000684 	.word	0x20000684
 80089bc:	2000094b 	.word	0x2000094b
 80089c0:	08f0d17e 	.word	0x08f0d17e
 80089c4:	2000023d 	.word	0x2000023d
 80089c8:	20000258 	.word	0x20000258
 80089cc:	0800a8f4 	.word	0x0800a8f4
 80089d0:	0800a909 	.word	0x0800a909
 80089d4:	0800a919 	.word	0x0800a919
 80089d8:	0800a92d 	.word	0x0800a92d
 80089dc:	0800a93e 	.word	0x0800a93e
 80089e0:	0800a963 	.word	0x0800a963
 80089e4:	0800a948 	.word	0x0800a948
 80089e8:	0800a8f0 	.word	0x0800a8f0
 80089ec:	0800a8ed 	.word	0x0800a8ed
 80089f0:	0800a94f 	.word	0x0800a94f

080089f4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089f4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80089f6:	4801      	ldr	r0, [pc, #4]	@ (80089fc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80089f8:	800b      	strh	r3, [r1, #0]
}
 80089fa:	4770      	bx	lr
 80089fc:	20000194 	.word	0x20000194

08008a00 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a00:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008a02:	4801      	ldr	r0, [pc, #4]	@ (8008a08 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008a04:	800b      	strh	r3, [r1, #0]
}
 8008a06:	4770      	bx	lr
 8008a08:	20000190 	.word	0x20000190

08008a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8008a10:	461e      	mov	r6, r3
 8008a12:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a14:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8008a16:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a1a:	bf34      	ite	cc
 8008a1c:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a1e:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a20:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8008a24:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8008a28:	3301      	adds	r3, #1
 8008a2a:	b2dc      	uxtb	r4, r3
 8008a2c:	42a2      	cmp	r2, r4
    value = value << 4;
 8008a2e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8008a32:	d8ef      	bhi.n	8008a14 <IntToUnicode+0x8>
  }
}
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a38 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8008a38:	231a      	movs	r3, #26
{
 8008a3a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8008a3c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <USBD_FS_SerialStrDescriptor+0x30>)
 8008a40:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8008a44:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8008a48:	1880      	adds	r0, r0, r2
 8008a4a:	d00a      	beq.n	8008a62 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a4c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a50:	4906      	ldr	r1, [pc, #24]	@ (8008a6c <USBD_FS_SerialStrDescriptor+0x34>)
 8008a52:	2208      	movs	r2, #8
 8008a54:	f7ff ffda 	bl	8008a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a58:	2204      	movs	r2, #4
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	3110      	adds	r1, #16
 8008a5e:	f7ff ffd5 	bl	8008a0c <IntToUnicode>
}
 8008a62:	4803      	ldr	r0, [pc, #12]	@ (8008a70 <USBD_FS_SerialStrDescriptor+0x38>)
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	1ffff000 	.word	0x1ffff000
 8008a6c:	20000176 	.word	0x20000176
 8008a70:	20000174 	.word	0x20000174

08008a74 <USBD_FS_ManufacturerStrDescriptor>:
{
 8008a74:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a76:	4c04      	ldr	r4, [pc, #16]	@ (8008a88 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8008a78:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a7a:	4804      	ldr	r0, [pc, #16]	@ (8008a8c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7ff fe3b 	bl	80086f8 <USBD_GetString>
}
 8008a82:	4620      	mov	r0, r4
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	2000118c 	.word	0x2000118c
 8008a8c:	0800a96e 	.word	0x0800a96e

08008a90 <USBD_FS_ProductStrDescriptor>:
{
 8008a90:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a92:	4c04      	ldr	r4, [pc, #16]	@ (8008aa4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8008a94:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a96:	4804      	ldr	r0, [pc, #16]	@ (8008aa8 <USBD_FS_ProductStrDescriptor+0x18>)
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f7ff fe2d 	bl	80086f8 <USBD_GetString>
}
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	2000118c 	.word	0x2000118c
 8008aa8:	0800a981 	.word	0x0800a981

08008aac <USBD_FS_ConfigStrDescriptor>:
{
 8008aac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aae:	4c04      	ldr	r4, [pc, #16]	@ (8008ac0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8008ab0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ab2:	4804      	ldr	r0, [pc, #16]	@ (8008ac4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7ff fe1f 	bl	80086f8 <USBD_GetString>
}
 8008aba:	4620      	mov	r0, r4
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000118c 	.word	0x2000118c
 8008ac4:	0800a994 	.word	0x0800a994

08008ac8 <USBD_FS_InterfaceStrDescriptor>:
{
 8008ac8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aca:	4c04      	ldr	r4, [pc, #16]	@ (8008adc <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8008acc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ace:	4804      	ldr	r0, [pc, #16]	@ (8008ae0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7ff fe11 	bl	80086f8 <USBD_GetString>
}
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	2000118c 	.word	0x2000118c
 8008ae0:	0800a99f 	.word	0x0800a99f

08008ae4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008ae4:	b118      	cbz	r0, 8008aee <USBD_Get_USB_Status+0xa>
 8008ae6:	2802      	cmp	r0, #2
 8008ae8:	bf0c      	ite	eq
 8008aea:	2001      	moveq	r0, #1
 8008aec:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008aee:	4770      	bx	lr

08008af0 <HAL_PCD_MspInit>:
{
 8008af0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8008af2:	4b12      	ldr	r3, [pc, #72]	@ (8008b3c <HAL_PCD_MspInit+0x4c>)
 8008af4:	6802      	ldr	r2, [r0, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d11d      	bne.n	8008b36 <HAL_PCD_MspInit+0x46>
    __HAL_RCC_USB_CLK_ENABLE();
 8008afa:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 8008afe:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008b00:	2013      	movs	r0, #19
    __HAL_RCC_USB_CLK_ENABLE();
 8008b02:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008b06:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008b08:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8008b0a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008b0c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8008b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008b16:	f7f9 ffef 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008b1a:	2013      	movs	r0, #19
 8008b1c:	f7fa f81c 	bl	8002b58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008b20:	2200      	movs	r2, #0
 8008b22:	2014      	movs	r0, #20
 8008b24:	4611      	mov	r1, r2
 8008b26:	f7f9 ffe7 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b2a:	2014      	movs	r0, #20
}
 8008b2c:	b003      	add	sp, #12
 8008b2e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b32:	f7fa b811 	b.w	8002b58 <HAL_NVIC_EnableIRQ>
}
 8008b36:	b003      	add	sp, #12
 8008b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b3c:	40005c00 	.word	0x40005c00

08008b40 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b40:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8008b44:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008b48:	f7ff bab3 	b.w	80080b2 <USBD_LL_SetupStage>

08008b4c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b4c:	2328      	movs	r3, #40	@ 0x28
 8008b4e:	fb03 0301 	mla	r3, r3, r1, r0
 8008b52:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008b56:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8008b5a:	f7ff bad7 	b.w	800810c <USBD_LL_DataOutStage>

08008b5e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b5e:	2328      	movs	r3, #40	@ 0x28
 8008b60:	fb03 0301 	mla	r3, r3, r1, r0
 8008b64:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b6a:	f7ff bb07 	b.w	800817c <USBD_LL_DataInStage>

08008b6e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b6e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008b72:	f7ff bb9c 	b.w	80082ae <USBD_LL_SOF>

08008b76 <HAL_PCD_ResetCallback>:
{
 8008b76:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b78:	7983      	ldrb	r3, [r0, #6]
{
 8008b7a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d001      	beq.n	8008b84 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8008b80:	f7f9 f90e 	bl	8001da0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b84:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8008b88:	2101      	movs	r1, #1
 8008b8a:	f7ff fb7a 	bl	8008282 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b8e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8008b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b96:	f7ff bb4d 	b.w	8008234 <USBD_LL_Reset>
	...

08008b9c <HAL_PCD_SuspendCallback>:
{
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ba0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008ba4:	f7ff fb70 	bl	8008288 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8008ba8:	7aa3      	ldrb	r3, [r4, #10]
 8008baa:	b123      	cbz	r3, 8008bb6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bac:	4a02      	ldr	r2, [pc, #8]	@ (8008bb8 <HAL_PCD_SuspendCallback+0x1c>)
 8008bae:	6913      	ldr	r3, [r2, #16]
 8008bb0:	f043 0306 	orr.w	r3, r3, #6
 8008bb4:	6113      	str	r3, [r2, #16]
}
 8008bb6:	bd10      	pop	{r4, pc}
 8008bb8:	e000ed00 	.word	0xe000ed00

08008bbc <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008bc0:	f7ff bb6b 	b.w	800829a <USBD_LL_Resume>

08008bc4 <USBD_LL_Init>:
{
 8008bc4:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8008bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c3c <USBD_LL_Init+0x78>)
{
 8008bc8:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8008bca:	481d      	ldr	r0, [pc, #116]	@ (8008c40 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8008bcc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008bce:	2308      	movs	r3, #8
 8008bd0:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008bd6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8008bd8:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008bdc:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008be0:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008be2:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008be4:	f7fb fdc6 	bl	8004774 <HAL_PCD_Init>
 8008be8:	b108      	cbz	r0, 8008bee <USBD_LL_Init+0x2a>
    Error_Handler( );
 8008bea:	f7f9 f8d9 	bl	8001da0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2318      	movs	r3, #24
 8008bf2:	4611      	mov	r1, r2
 8008bf4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8008bf8:	f7fc fc47 	bl	800548a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008bfc:	2358      	movs	r3, #88	@ 0x58
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2180      	movs	r1, #128	@ 0x80
 8008c02:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8008c06:	f7fc fc40 	bl	800548a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008c0a:	23c0      	movs	r3, #192	@ 0xc0
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2181      	movs	r1, #129	@ 0x81
 8008c10:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8008c14:	f7fc fc39 	bl	800548a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008c18:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2101      	movs	r1, #1
 8008c20:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8008c24:	f7fc fc31 	bl	800548a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2182      	movs	r1, #130	@ 0x82
 8008c30:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8008c34:	f7fc fc29 	bl	800548a <HAL_PCDEx_PMAConfig>
}
 8008c38:	2000      	movs	r0, #0
 8008c3a:	bd10      	pop	{r4, pc}
 8008c3c:	40005c00 	.word	0x40005c00
 8008c40:	200015ac 	.word	0x200015ac

08008c44 <USBD_LL_Start>:
{
 8008c44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008c46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008c4a:	f7fb fdf6 	bl	800483a <HAL_PCD_Start>
}
 8008c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c52:	f7ff bf47 	b.w	8008ae4 <USBD_Get_USB_Status>

08008c56 <USBD_LL_OpenEP>:
{
 8008c56:	b510      	push	{r4, lr}
 8008c58:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8008c5e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c60:	4623      	mov	r3, r4
 8008c62:	f7fc fb1b 	bl	800529c <HAL_PCD_EP_Open>
}
 8008c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6a:	f7ff bf3b 	b.w	8008ae4 <USBD_Get_USB_Status>

08008c6e <USBD_LL_CloseEP>:
{
 8008c6e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008c74:	f7fc fb42 	bl	80052fc <HAL_PCD_EP_Close>
}
 8008c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	f7ff bf32 	b.w	8008ae4 <USBD_Get_USB_Status>

08008c80 <USBD_LL_StallEP>:
{
 8008c80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008c86:	f7fc fb98 	bl	80053ba <HAL_PCD_EP_SetStall>
}
 8008c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8e:	f7ff bf29 	b.w	8008ae4 <USBD_Get_USB_Status>

08008c92 <USBD_LL_ClearStallEP>:
{
 8008c92:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008c98:	f7fc fbc5 	bl	8005426 <HAL_PCD_EP_ClrStall>
}
 8008c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca0:	f7ff bf20 	b.w	8008ae4 <USBD_Get_USB_Status>

08008ca4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca4:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8008ca6:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008caa:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cae:	bf1b      	ittet	ne
 8008cb0:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8008cb4:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cb8:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cbc:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cbe:	bf08      	it	eq
 8008cc0:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8008cc4:	4770      	bx	lr

08008cc6 <USBD_LL_SetUSBAddress>:
{
 8008cc6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cc8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008ccc:	f7fb fdce 	bl	800486c <HAL_PCD_SetAddress>
}
 8008cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd4:	f7ff bf06 	b.w	8008ae4 <USBD_Get_USB_Status>

08008cd8 <USBD_LL_Transmit>:
{
 8008cd8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cda:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008cde:	f7fc fb54 	bl	800538a <HAL_PCD_EP_Transmit>
}
 8008ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce6:	f7ff befd 	b.w	8008ae4 <USBD_Get_USB_Status>

08008cea <USBD_LL_PrepareReceive>:
{
 8008cea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008cf0:	f7fc fb2c 	bl	800534c <HAL_PCD_EP_Receive>
}
 8008cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf8:	f7ff bef4 	b.w	8008ae4 <USBD_Get_USB_Status>

08008cfc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cfc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008d00:	f7fc bb3b 	b.w	800537a <HAL_PCD_EP_GetRxCount>

08008d04 <USBD_static_malloc>:
}
 8008d04:	4800      	ldr	r0, [pc, #0]	@ (8008d08 <USBD_static_malloc+0x4>)
 8008d06:	4770      	bx	lr
 8008d08:	2000138c 	.word	0x2000138c

08008d0c <USBD_static_free>:
}
 8008d0c:	4770      	bx	lr

08008d0e <HAL_PCDEx_SetConnectionState>:
}
 8008d0e:	4770      	bx	lr

08008d10 <atoi>:
 8008d10:	220a      	movs	r2, #10
 8008d12:	2100      	movs	r1, #0
 8008d14:	f000 b928 	b.w	8008f68 <strtol>

08008d18 <sbrk_aligned>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8008d58 <sbrk_aligned+0x40>)
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	6831      	ldr	r1, [r6, #0]
 8008d20:	4605      	mov	r5, r0
 8008d22:	b911      	cbnz	r1, 8008d2a <sbrk_aligned+0x12>
 8008d24:	f000 f990 	bl	8009048 <_sbrk_r>
 8008d28:	6030      	str	r0, [r6, #0]
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	f000 f98b 	bl	8009048 <_sbrk_r>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d103      	bne.n	8008d3e <sbrk_aligned+0x26>
 8008d36:	f04f 34ff 	mov.w	r4, #4294967295
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d0f8      	beq.n	8008d3a <sbrk_aligned+0x22>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f97c 	bl	8009048 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d1f2      	bne.n	8008d3a <sbrk_aligned+0x22>
 8008d54:	e7ef      	b.n	8008d36 <sbrk_aligned+0x1e>
 8008d56:	bf00      	nop
 8008d58:	20001884 	.word	0x20001884

08008d5c <_malloc_r>:
 8008d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d60:	1ccd      	adds	r5, r1, #3
 8008d62:	f025 0503 	bic.w	r5, r5, #3
 8008d66:	3508      	adds	r5, #8
 8008d68:	2d0c      	cmp	r5, #12
 8008d6a:	bf38      	it	cc
 8008d6c:	250c      	movcc	r5, #12
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	4606      	mov	r6, r0
 8008d72:	db01      	blt.n	8008d78 <_malloc_r+0x1c>
 8008d74:	42a9      	cmp	r1, r5
 8008d76:	d904      	bls.n	8008d82 <_malloc_r+0x26>
 8008d78:	230c      	movs	r3, #12
 8008d7a:	6033      	str	r3, [r6, #0]
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e58 <_malloc_r+0xfc>
 8008d86:	f000 f869 	bl	8008e5c <__malloc_lock>
 8008d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d8e:	461c      	mov	r4, r3
 8008d90:	bb44      	cbnz	r4, 8008de4 <_malloc_r+0x88>
 8008d92:	4629      	mov	r1, r5
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff ffbf 	bl	8008d18 <sbrk_aligned>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	d158      	bne.n	8008e52 <_malloc_r+0xf6>
 8008da0:	f8d8 4000 	ldr.w	r4, [r8]
 8008da4:	4627      	mov	r7, r4
 8008da6:	2f00      	cmp	r7, #0
 8008da8:	d143      	bne.n	8008e32 <_malloc_r+0xd6>
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d04b      	beq.n	8008e46 <_malloc_r+0xea>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	4639      	mov	r1, r7
 8008db2:	4630      	mov	r0, r6
 8008db4:	eb04 0903 	add.w	r9, r4, r3
 8008db8:	f000 f946 	bl	8009048 <_sbrk_r>
 8008dbc:	4581      	cmp	r9, r0
 8008dbe:	d142      	bne.n	8008e46 <_malloc_r+0xea>
 8008dc0:	6821      	ldr	r1, [r4, #0]
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	1a6d      	subs	r5, r5, r1
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7ff ffa6 	bl	8008d18 <sbrk_aligned>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d03a      	beq.n	8008e46 <_malloc_r+0xea>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	442b      	add	r3, r5
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	bb62      	cbnz	r2, 8008e38 <_malloc_r+0xdc>
 8008dde:	f8c8 7000 	str.w	r7, [r8]
 8008de2:	e00f      	b.n	8008e04 <_malloc_r+0xa8>
 8008de4:	6822      	ldr	r2, [r4, #0]
 8008de6:	1b52      	subs	r2, r2, r5
 8008de8:	d420      	bmi.n	8008e2c <_malloc_r+0xd0>
 8008dea:	2a0b      	cmp	r2, #11
 8008dec:	d917      	bls.n	8008e1e <_malloc_r+0xc2>
 8008dee:	1961      	adds	r1, r4, r5
 8008df0:	42a3      	cmp	r3, r4
 8008df2:	6025      	str	r5, [r4, #0]
 8008df4:	bf18      	it	ne
 8008df6:	6059      	strne	r1, [r3, #4]
 8008df8:	6863      	ldr	r3, [r4, #4]
 8008dfa:	bf08      	it	eq
 8008dfc:	f8c8 1000 	streq.w	r1, [r8]
 8008e00:	5162      	str	r2, [r4, r5]
 8008e02:	604b      	str	r3, [r1, #4]
 8008e04:	4630      	mov	r0, r6
 8008e06:	f000 f82f 	bl	8008e68 <__malloc_unlock>
 8008e0a:	f104 000b 	add.w	r0, r4, #11
 8008e0e:	1d23      	adds	r3, r4, #4
 8008e10:	f020 0007 	bic.w	r0, r0, #7
 8008e14:	1ac2      	subs	r2, r0, r3
 8008e16:	bf1c      	itt	ne
 8008e18:	1a1b      	subne	r3, r3, r0
 8008e1a:	50a3      	strne	r3, [r4, r2]
 8008e1c:	e7af      	b.n	8008d7e <_malloc_r+0x22>
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	bf0c      	ite	eq
 8008e24:	f8c8 2000 	streq.w	r2, [r8]
 8008e28:	605a      	strne	r2, [r3, #4]
 8008e2a:	e7eb      	b.n	8008e04 <_malloc_r+0xa8>
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	6864      	ldr	r4, [r4, #4]
 8008e30:	e7ae      	b.n	8008d90 <_malloc_r+0x34>
 8008e32:	463c      	mov	r4, r7
 8008e34:	687f      	ldr	r7, [r7, #4]
 8008e36:	e7b6      	b.n	8008da6 <_malloc_r+0x4a>
 8008e38:	461a      	mov	r2, r3
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d1fb      	bne.n	8008e38 <_malloc_r+0xdc>
 8008e40:	2300      	movs	r3, #0
 8008e42:	6053      	str	r3, [r2, #4]
 8008e44:	e7de      	b.n	8008e04 <_malloc_r+0xa8>
 8008e46:	230c      	movs	r3, #12
 8008e48:	4630      	mov	r0, r6
 8008e4a:	6033      	str	r3, [r6, #0]
 8008e4c:	f000 f80c 	bl	8008e68 <__malloc_unlock>
 8008e50:	e794      	b.n	8008d7c <_malloc_r+0x20>
 8008e52:	6005      	str	r5, [r0, #0]
 8008e54:	e7d6      	b.n	8008e04 <_malloc_r+0xa8>
 8008e56:	bf00      	nop
 8008e58:	20001888 	.word	0x20001888

08008e5c <__malloc_lock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	@ (8008e64 <__malloc_lock+0x8>)
 8008e5e:	f000 b92d 	b.w	80090bc <__retarget_lock_acquire_recursive>
 8008e62:	bf00      	nop
 8008e64:	200019c8 	.word	0x200019c8

08008e68 <__malloc_unlock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	@ (8008e70 <__malloc_unlock+0x8>)
 8008e6a:	f000 b928 	b.w	80090be <__retarget_lock_release_recursive>
 8008e6e:	bf00      	nop
 8008e70:	200019c8 	.word	0x200019c8

08008e74 <_strtol_l.isra.0>:
 8008e74:	2b24      	cmp	r3, #36	@ 0x24
 8008e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7a:	4686      	mov	lr, r0
 8008e7c:	4690      	mov	r8, r2
 8008e7e:	d801      	bhi.n	8008e84 <_strtol_l.isra.0+0x10>
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d106      	bne.n	8008e92 <_strtol_l.isra.0+0x1e>
 8008e84:	f000 f8f0 	bl	8009068 <__errno>
 8008e88:	2316      	movs	r3, #22
 8008e8a:	6003      	str	r3, [r0, #0]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	460d      	mov	r5, r1
 8008e94:	4833      	ldr	r0, [pc, #204]	@ (8008f64 <_strtol_l.isra.0+0xf0>)
 8008e96:	462a      	mov	r2, r5
 8008e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e9c:	5d06      	ldrb	r6, [r0, r4]
 8008e9e:	f016 0608 	ands.w	r6, r6, #8
 8008ea2:	d1f8      	bne.n	8008e96 <_strtol_l.isra.0+0x22>
 8008ea4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ea6:	d110      	bne.n	8008eca <_strtol_l.isra.0+0x56>
 8008ea8:	2601      	movs	r6, #1
 8008eaa:	782c      	ldrb	r4, [r5, #0]
 8008eac:	1c95      	adds	r5, r2, #2
 8008eae:	f033 0210 	bics.w	r2, r3, #16
 8008eb2:	d115      	bne.n	8008ee0 <_strtol_l.isra.0+0x6c>
 8008eb4:	2c30      	cmp	r4, #48	@ 0x30
 8008eb6:	d10d      	bne.n	8008ed4 <_strtol_l.isra.0+0x60>
 8008eb8:	782a      	ldrb	r2, [r5, #0]
 8008eba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ebe:	2a58      	cmp	r2, #88	@ 0x58
 8008ec0:	d108      	bne.n	8008ed4 <_strtol_l.isra.0+0x60>
 8008ec2:	786c      	ldrb	r4, [r5, #1]
 8008ec4:	3502      	adds	r5, #2
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	e00a      	b.n	8008ee0 <_strtol_l.isra.0+0x6c>
 8008eca:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ecc:	bf04      	itt	eq
 8008ece:	782c      	ldrbeq	r4, [r5, #0]
 8008ed0:	1c95      	addeq	r5, r2, #2
 8008ed2:	e7ec      	b.n	8008eae <_strtol_l.isra.0+0x3a>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f6      	bne.n	8008ec6 <_strtol_l.isra.0+0x52>
 8008ed8:	2c30      	cmp	r4, #48	@ 0x30
 8008eda:	bf14      	ite	ne
 8008edc:	230a      	movne	r3, #10
 8008ede:	2308      	moveq	r3, #8
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ee6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008eea:	fbbc f9f3 	udiv	r9, ip, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ef4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ef8:	2f09      	cmp	r7, #9
 8008efa:	d80f      	bhi.n	8008f1c <_strtol_l.isra.0+0xa8>
 8008efc:	463c      	mov	r4, r7
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	dd1b      	ble.n	8008f3a <_strtol_l.isra.0+0xc6>
 8008f02:	1c57      	adds	r7, r2, #1
 8008f04:	d007      	beq.n	8008f16 <_strtol_l.isra.0+0xa2>
 8008f06:	4581      	cmp	r9, r0
 8008f08:	d314      	bcc.n	8008f34 <_strtol_l.isra.0+0xc0>
 8008f0a:	d101      	bne.n	8008f10 <_strtol_l.isra.0+0x9c>
 8008f0c:	45a2      	cmp	sl, r4
 8008f0e:	db11      	blt.n	8008f34 <_strtol_l.isra.0+0xc0>
 8008f10:	2201      	movs	r2, #1
 8008f12:	fb00 4003 	mla	r0, r0, r3, r4
 8008f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f1a:	e7eb      	b.n	8008ef4 <_strtol_l.isra.0+0x80>
 8008f1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f20:	2f19      	cmp	r7, #25
 8008f22:	d801      	bhi.n	8008f28 <_strtol_l.isra.0+0xb4>
 8008f24:	3c37      	subs	r4, #55	@ 0x37
 8008f26:	e7ea      	b.n	8008efe <_strtol_l.isra.0+0x8a>
 8008f28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f2c:	2f19      	cmp	r7, #25
 8008f2e:	d804      	bhi.n	8008f3a <_strtol_l.isra.0+0xc6>
 8008f30:	3c57      	subs	r4, #87	@ 0x57
 8008f32:	e7e4      	b.n	8008efe <_strtol_l.isra.0+0x8a>
 8008f34:	f04f 32ff 	mov.w	r2, #4294967295
 8008f38:	e7ed      	b.n	8008f16 <_strtol_l.isra.0+0xa2>
 8008f3a:	1c53      	adds	r3, r2, #1
 8008f3c:	d108      	bne.n	8008f50 <_strtol_l.isra.0+0xdc>
 8008f3e:	2322      	movs	r3, #34	@ 0x22
 8008f40:	4660      	mov	r0, ip
 8008f42:	f8ce 3000 	str.w	r3, [lr]
 8008f46:	f1b8 0f00 	cmp.w	r8, #0
 8008f4a:	d0a0      	beq.n	8008e8e <_strtol_l.isra.0+0x1a>
 8008f4c:	1e69      	subs	r1, r5, #1
 8008f4e:	e006      	b.n	8008f5e <_strtol_l.isra.0+0xea>
 8008f50:	b106      	cbz	r6, 8008f54 <_strtol_l.isra.0+0xe0>
 8008f52:	4240      	negs	r0, r0
 8008f54:	f1b8 0f00 	cmp.w	r8, #0
 8008f58:	d099      	beq.n	8008e8e <_strtol_l.isra.0+0x1a>
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1f6      	bne.n	8008f4c <_strtol_l.isra.0+0xd8>
 8008f5e:	f8c8 1000 	str.w	r1, [r8]
 8008f62:	e794      	b.n	8008e8e <_strtol_l.isra.0+0x1a>
 8008f64:	0800bef3 	.word	0x0800bef3

08008f68 <strtol>:
 8008f68:	4613      	mov	r3, r2
 8008f6a:	460a      	mov	r2, r1
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	4802      	ldr	r0, [pc, #8]	@ (8008f78 <strtol+0x10>)
 8008f70:	6800      	ldr	r0, [r0, #0]
 8008f72:	f7ff bf7f 	b.w	8008e74 <_strtol_l.isra.0>
 8008f76:	bf00      	nop
 8008f78:	200001c4 	.word	0x200001c4

08008f7c <sniprintf>:
 8008f7c:	b40c      	push	{r2, r3}
 8008f7e:	b530      	push	{r4, r5, lr}
 8008f80:	4b18      	ldr	r3, [pc, #96]	@ (8008fe4 <sniprintf+0x68>)
 8008f82:	1e0c      	subs	r4, r1, #0
 8008f84:	681d      	ldr	r5, [r3, #0]
 8008f86:	b09d      	sub	sp, #116	@ 0x74
 8008f88:	da08      	bge.n	8008f9c <sniprintf+0x20>
 8008f8a:	238b      	movs	r3, #139	@ 0x8b
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	b01d      	add	sp, #116	@ 0x74
 8008f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f98:	b002      	add	sp, #8
 8008f9a:	4770      	bx	lr
 8008f9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008faa:	bf0c      	ite	eq
 8008fac:	4623      	moveq	r3, r4
 8008fae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fba:	9002      	str	r0, [sp, #8]
 8008fbc:	9006      	str	r0, [sp, #24]
 8008fbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	ab21      	add	r3, sp, #132	@ 0x84
 8008fc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008fc8:	a902      	add	r1, sp, #8
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	f000 f92a 	bl	8009224 <_svfiprintf_r>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	bfbc      	itt	lt
 8008fd4:	238b      	movlt	r3, #139	@ 0x8b
 8008fd6:	602b      	strlt	r3, [r5, #0]
 8008fd8:	2c00      	cmp	r4, #0
 8008fda:	d0da      	beq.n	8008f92 <sniprintf+0x16>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	e7d6      	b.n	8008f92 <sniprintf+0x16>
 8008fe4:	200001c4 	.word	0x200001c4

08008fe8 <memset>:
 8008fe8:	4603      	mov	r3, r0
 8008fea:	4402      	add	r2, r0
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d100      	bne.n	8008ff2 <memset+0xa>
 8008ff0:	4770      	bx	lr
 8008ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff6:	e7f9      	b.n	8008fec <memset+0x4>

08008ff8 <strncmp>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	b16a      	cbz	r2, 8009018 <strncmp+0x20>
 8008ffc:	3901      	subs	r1, #1
 8008ffe:	1884      	adds	r4, r0, r2
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009008:	429a      	cmp	r2, r3
 800900a:	d103      	bne.n	8009014 <strncmp+0x1c>
 800900c:	42a0      	cmp	r0, r4
 800900e:	d001      	beq.n	8009014 <strncmp+0x1c>
 8009010:	2a00      	cmp	r2, #0
 8009012:	d1f5      	bne.n	8009000 <strncmp+0x8>
 8009014:	1ad0      	subs	r0, r2, r3
 8009016:	bd10      	pop	{r4, pc}
 8009018:	4610      	mov	r0, r2
 800901a:	e7fc      	b.n	8009016 <strncmp+0x1e>

0800901c <strstr>:
 800901c:	780a      	ldrb	r2, [r1, #0]
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	b96a      	cbnz	r2, 800903e <strstr+0x22>
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	429a      	cmp	r2, r3
 8009026:	d109      	bne.n	800903c <strstr+0x20>
 8009028:	460c      	mov	r4, r1
 800902a:	4605      	mov	r5, r0
 800902c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f6      	beq.n	8009022 <strstr+0x6>
 8009034:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009038:	429e      	cmp	r6, r3
 800903a:	d0f7      	beq.n	800902c <strstr+0x10>
 800903c:	3001      	adds	r0, #1
 800903e:	7803      	ldrb	r3, [r0, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1ef      	bne.n	8009024 <strstr+0x8>
 8009044:	4618      	mov	r0, r3
 8009046:	e7ec      	b.n	8009022 <strstr+0x6>

08009048 <_sbrk_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	2300      	movs	r3, #0
 800904c:	4d05      	ldr	r5, [pc, #20]	@ (8009064 <_sbrk_r+0x1c>)
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f9 fb42 	bl	80026dc <_sbrk>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_sbrk_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_sbrk_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	200019c4 	.word	0x200019c4

08009068 <__errno>:
 8009068:	4b01      	ldr	r3, [pc, #4]	@ (8009070 <__errno+0x8>)
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	200001c4 	.word	0x200001c4

08009074 <__libc_init_array>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	2600      	movs	r6, #0
 8009078:	4d0c      	ldr	r5, [pc, #48]	@ (80090ac <__libc_init_array+0x38>)
 800907a:	4c0d      	ldr	r4, [pc, #52]	@ (80090b0 <__libc_init_array+0x3c>)
 800907c:	1b64      	subs	r4, r4, r5
 800907e:	10a4      	asrs	r4, r4, #2
 8009080:	42a6      	cmp	r6, r4
 8009082:	d109      	bne.n	8009098 <__libc_init_array+0x24>
 8009084:	f001 fc08 	bl	800a898 <_init>
 8009088:	2600      	movs	r6, #0
 800908a:	4d0a      	ldr	r5, [pc, #40]	@ (80090b4 <__libc_init_array+0x40>)
 800908c:	4c0a      	ldr	r4, [pc, #40]	@ (80090b8 <__libc_init_array+0x44>)
 800908e:	1b64      	subs	r4, r4, r5
 8009090:	10a4      	asrs	r4, r4, #2
 8009092:	42a6      	cmp	r6, r4
 8009094:	d105      	bne.n	80090a2 <__libc_init_array+0x2e>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	f855 3b04 	ldr.w	r3, [r5], #4
 800909c:	4798      	blx	r3
 800909e:	3601      	adds	r6, #1
 80090a0:	e7ee      	b.n	8009080 <__libc_init_array+0xc>
 80090a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a6:	4798      	blx	r3
 80090a8:	3601      	adds	r6, #1
 80090aa:	e7f2      	b.n	8009092 <__libc_init_array+0x1e>
 80090ac:	0800c040 	.word	0x0800c040
 80090b0:	0800c040 	.word	0x0800c040
 80090b4:	0800c040 	.word	0x0800c040
 80090b8:	0800c044 	.word	0x0800c044

080090bc <__retarget_lock_acquire_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_release_recursive>:
 80090be:	4770      	bx	lr

080090c0 <memcpy>:
 80090c0:	440a      	add	r2, r1
 80090c2:	4291      	cmp	r1, r2
 80090c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090c8:	d100      	bne.n	80090cc <memcpy+0xc>
 80090ca:	4770      	bx	lr
 80090cc:	b510      	push	{r4, lr}
 80090ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d2:	4291      	cmp	r1, r2
 80090d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090d8:	d1f9      	bne.n	80090ce <memcpy+0xe>
 80090da:	bd10      	pop	{r4, pc}

080090dc <_free_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4605      	mov	r5, r0
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d040      	beq.n	8009166 <_free_r+0x8a>
 80090e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e8:	1f0c      	subs	r4, r1, #4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bfb8      	it	lt
 80090ee:	18e4      	addlt	r4, r4, r3
 80090f0:	f7ff feb4 	bl	8008e5c <__malloc_lock>
 80090f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009168 <_free_r+0x8c>)
 80090f6:	6813      	ldr	r3, [r2, #0]
 80090f8:	b933      	cbnz	r3, 8009108 <_free_r+0x2c>
 80090fa:	6063      	str	r3, [r4, #4]
 80090fc:	6014      	str	r4, [r2, #0]
 80090fe:	4628      	mov	r0, r5
 8009100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009104:	f7ff beb0 	b.w	8008e68 <__malloc_unlock>
 8009108:	42a3      	cmp	r3, r4
 800910a:	d908      	bls.n	800911e <_free_r+0x42>
 800910c:	6820      	ldr	r0, [r4, #0]
 800910e:	1821      	adds	r1, r4, r0
 8009110:	428b      	cmp	r3, r1
 8009112:	bf01      	itttt	eq
 8009114:	6819      	ldreq	r1, [r3, #0]
 8009116:	685b      	ldreq	r3, [r3, #4]
 8009118:	1809      	addeq	r1, r1, r0
 800911a:	6021      	streq	r1, [r4, #0]
 800911c:	e7ed      	b.n	80090fa <_free_r+0x1e>
 800911e:	461a      	mov	r2, r3
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	b10b      	cbz	r3, 8009128 <_free_r+0x4c>
 8009124:	42a3      	cmp	r3, r4
 8009126:	d9fa      	bls.n	800911e <_free_r+0x42>
 8009128:	6811      	ldr	r1, [r2, #0]
 800912a:	1850      	adds	r0, r2, r1
 800912c:	42a0      	cmp	r0, r4
 800912e:	d10b      	bne.n	8009148 <_free_r+0x6c>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	4401      	add	r1, r0
 8009134:	1850      	adds	r0, r2, r1
 8009136:	4283      	cmp	r3, r0
 8009138:	6011      	str	r1, [r2, #0]
 800913a:	d1e0      	bne.n	80090fe <_free_r+0x22>
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4408      	add	r0, r1
 8009142:	6010      	str	r0, [r2, #0]
 8009144:	6053      	str	r3, [r2, #4]
 8009146:	e7da      	b.n	80090fe <_free_r+0x22>
 8009148:	d902      	bls.n	8009150 <_free_r+0x74>
 800914a:	230c      	movs	r3, #12
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	e7d6      	b.n	80090fe <_free_r+0x22>
 8009150:	6820      	ldr	r0, [r4, #0]
 8009152:	1821      	adds	r1, r4, r0
 8009154:	428b      	cmp	r3, r1
 8009156:	bf01      	itttt	eq
 8009158:	6819      	ldreq	r1, [r3, #0]
 800915a:	685b      	ldreq	r3, [r3, #4]
 800915c:	1809      	addeq	r1, r1, r0
 800915e:	6021      	streq	r1, [r4, #0]
 8009160:	6063      	str	r3, [r4, #4]
 8009162:	6054      	str	r4, [r2, #4]
 8009164:	e7cb      	b.n	80090fe <_free_r+0x22>
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	20001888 	.word	0x20001888

0800916c <__ssputs_r>:
 800916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	461f      	mov	r7, r3
 8009172:	688e      	ldr	r6, [r1, #8]
 8009174:	4682      	mov	sl, r0
 8009176:	42be      	cmp	r6, r7
 8009178:	460c      	mov	r4, r1
 800917a:	4690      	mov	r8, r2
 800917c:	680b      	ldr	r3, [r1, #0]
 800917e:	d82d      	bhi.n	80091dc <__ssputs_r+0x70>
 8009180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009188:	d026      	beq.n	80091d8 <__ssputs_r+0x6c>
 800918a:	6965      	ldr	r5, [r4, #20]
 800918c:	6909      	ldr	r1, [r1, #16]
 800918e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009192:	eba3 0901 	sub.w	r9, r3, r1
 8009196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800919a:	1c7b      	adds	r3, r7, #1
 800919c:	444b      	add	r3, r9
 800919e:	106d      	asrs	r5, r5, #1
 80091a0:	429d      	cmp	r5, r3
 80091a2:	bf38      	it	cc
 80091a4:	461d      	movcc	r5, r3
 80091a6:	0553      	lsls	r3, r2, #21
 80091a8:	d527      	bpl.n	80091fa <__ssputs_r+0x8e>
 80091aa:	4629      	mov	r1, r5
 80091ac:	f7ff fdd6 	bl	8008d5c <_malloc_r>
 80091b0:	4606      	mov	r6, r0
 80091b2:	b360      	cbz	r0, 800920e <__ssputs_r+0xa2>
 80091b4:	464a      	mov	r2, r9
 80091b6:	6921      	ldr	r1, [r4, #16]
 80091b8:	f7ff ff82 	bl	80090c0 <memcpy>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80091c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	6126      	str	r6, [r4, #16]
 80091ca:	444e      	add	r6, r9
 80091cc:	6026      	str	r6, [r4, #0]
 80091ce:	463e      	mov	r6, r7
 80091d0:	6165      	str	r5, [r4, #20]
 80091d2:	eba5 0509 	sub.w	r5, r5, r9
 80091d6:	60a5      	str	r5, [r4, #8]
 80091d8:	42be      	cmp	r6, r7
 80091da:	d900      	bls.n	80091de <__ssputs_r+0x72>
 80091dc:	463e      	mov	r6, r7
 80091de:	4632      	mov	r2, r6
 80091e0:	4641      	mov	r1, r8
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	f000 faaa 	bl	800973c <memmove>
 80091e8:	2000      	movs	r0, #0
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	1b9b      	subs	r3, r3, r6
 80091ee:	60a3      	str	r3, [r4, #8]
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	4433      	add	r3, r6
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fa:	462a      	mov	r2, r5
 80091fc:	f000 fac6 	bl	800978c <_realloc_r>
 8009200:	4606      	mov	r6, r0
 8009202:	2800      	cmp	r0, #0
 8009204:	d1e0      	bne.n	80091c8 <__ssputs_r+0x5c>
 8009206:	4650      	mov	r0, sl
 8009208:	6921      	ldr	r1, [r4, #16]
 800920a:	f7ff ff67 	bl	80090dc <_free_r>
 800920e:	230c      	movs	r3, #12
 8009210:	f8ca 3000 	str.w	r3, [sl]
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f04f 30ff 	mov.w	r0, #4294967295
 800921a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	e7e9      	b.n	80091f6 <__ssputs_r+0x8a>
	...

08009224 <_svfiprintf_r>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	4698      	mov	r8, r3
 800922a:	898b      	ldrh	r3, [r1, #12]
 800922c:	4607      	mov	r7, r0
 800922e:	061b      	lsls	r3, r3, #24
 8009230:	460d      	mov	r5, r1
 8009232:	4614      	mov	r4, r2
 8009234:	b09d      	sub	sp, #116	@ 0x74
 8009236:	d510      	bpl.n	800925a <_svfiprintf_r+0x36>
 8009238:	690b      	ldr	r3, [r1, #16]
 800923a:	b973      	cbnz	r3, 800925a <_svfiprintf_r+0x36>
 800923c:	2140      	movs	r1, #64	@ 0x40
 800923e:	f7ff fd8d 	bl	8008d5c <_malloc_r>
 8009242:	6028      	str	r0, [r5, #0]
 8009244:	6128      	str	r0, [r5, #16]
 8009246:	b930      	cbnz	r0, 8009256 <_svfiprintf_r+0x32>
 8009248:	230c      	movs	r3, #12
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	b01d      	add	sp, #116	@ 0x74
 8009252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009256:	2340      	movs	r3, #64	@ 0x40
 8009258:	616b      	str	r3, [r5, #20]
 800925a:	2300      	movs	r3, #0
 800925c:	9309      	str	r3, [sp, #36]	@ 0x24
 800925e:	2320      	movs	r3, #32
 8009260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009264:	2330      	movs	r3, #48	@ 0x30
 8009266:	f04f 0901 	mov.w	r9, #1
 800926a:	f8cd 800c 	str.w	r8, [sp, #12]
 800926e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009408 <_svfiprintf_r+0x1e4>
 8009272:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009276:	4623      	mov	r3, r4
 8009278:	469a      	mov	sl, r3
 800927a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800927e:	b10a      	cbz	r2, 8009284 <_svfiprintf_r+0x60>
 8009280:	2a25      	cmp	r2, #37	@ 0x25
 8009282:	d1f9      	bne.n	8009278 <_svfiprintf_r+0x54>
 8009284:	ebba 0b04 	subs.w	fp, sl, r4
 8009288:	d00b      	beq.n	80092a2 <_svfiprintf_r+0x7e>
 800928a:	465b      	mov	r3, fp
 800928c:	4622      	mov	r2, r4
 800928e:	4629      	mov	r1, r5
 8009290:	4638      	mov	r0, r7
 8009292:	f7ff ff6b 	bl	800916c <__ssputs_r>
 8009296:	3001      	adds	r0, #1
 8009298:	f000 80a7 	beq.w	80093ea <_svfiprintf_r+0x1c6>
 800929c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929e:	445a      	add	r2, fp
 80092a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80092a2:	f89a 3000 	ldrb.w	r3, [sl]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 809f 	beq.w	80093ea <_svfiprintf_r+0x1c6>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295
 80092b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b6:	f10a 0a01 	add.w	sl, sl, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80092c4:	4654      	mov	r4, sl
 80092c6:	2205      	movs	r2, #5
 80092c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092cc:	484e      	ldr	r0, [pc, #312]	@ (8009408 <_svfiprintf_r+0x1e4>)
 80092ce:	f000 fa4f 	bl	8009770 <memchr>
 80092d2:	9a04      	ldr	r2, [sp, #16]
 80092d4:	b9d8      	cbnz	r0, 800930e <_svfiprintf_r+0xea>
 80092d6:	06d0      	lsls	r0, r2, #27
 80092d8:	bf44      	itt	mi
 80092da:	2320      	movmi	r3, #32
 80092dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e0:	0711      	lsls	r1, r2, #28
 80092e2:	bf44      	itt	mi
 80092e4:	232b      	movmi	r3, #43	@ 0x2b
 80092e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092ea:	f89a 3000 	ldrb.w	r3, [sl]
 80092ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f0:	d015      	beq.n	800931e <_svfiprintf_r+0xfa>
 80092f2:	4654      	mov	r4, sl
 80092f4:	2000      	movs	r0, #0
 80092f6:	f04f 0c0a 	mov.w	ip, #10
 80092fa:	9a07      	ldr	r2, [sp, #28]
 80092fc:	4621      	mov	r1, r4
 80092fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009302:	3b30      	subs	r3, #48	@ 0x30
 8009304:	2b09      	cmp	r3, #9
 8009306:	d94b      	bls.n	80093a0 <_svfiprintf_r+0x17c>
 8009308:	b1b0      	cbz	r0, 8009338 <_svfiprintf_r+0x114>
 800930a:	9207      	str	r2, [sp, #28]
 800930c:	e014      	b.n	8009338 <_svfiprintf_r+0x114>
 800930e:	eba0 0308 	sub.w	r3, r0, r8
 8009312:	fa09 f303 	lsl.w	r3, r9, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	46a2      	mov	sl, r4
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	e7d2      	b.n	80092c4 <_svfiprintf_r+0xa0>
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	1d19      	adds	r1, r3, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	9103      	str	r1, [sp, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfbb      	ittet	lt
 800932a:	425b      	neglt	r3, r3
 800932c:	f042 0202 	orrlt.w	r2, r2, #2
 8009330:	9307      	strge	r3, [sp, #28]
 8009332:	9307      	strlt	r3, [sp, #28]
 8009334:	bfb8      	it	lt
 8009336:	9204      	strlt	r2, [sp, #16]
 8009338:	7823      	ldrb	r3, [r4, #0]
 800933a:	2b2e      	cmp	r3, #46	@ 0x2e
 800933c:	d10a      	bne.n	8009354 <_svfiprintf_r+0x130>
 800933e:	7863      	ldrb	r3, [r4, #1]
 8009340:	2b2a      	cmp	r3, #42	@ 0x2a
 8009342:	d132      	bne.n	80093aa <_svfiprintf_r+0x186>
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	3402      	adds	r4, #2
 8009348:	1d1a      	adds	r2, r3, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	9203      	str	r2, [sp, #12]
 800934e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800940c <_svfiprintf_r+0x1e8>
 8009358:	2203      	movs	r2, #3
 800935a:	4650      	mov	r0, sl
 800935c:	7821      	ldrb	r1, [r4, #0]
 800935e:	f000 fa07 	bl	8009770 <memchr>
 8009362:	b138      	cbz	r0, 8009374 <_svfiprintf_r+0x150>
 8009364:	2240      	movs	r2, #64	@ 0x40
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	eba0 000a 	sub.w	r0, r0, sl
 800936c:	4082      	lsls	r2, r0
 800936e:	4313      	orrs	r3, r2
 8009370:	3401      	adds	r4, #1
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009378:	2206      	movs	r2, #6
 800937a:	4825      	ldr	r0, [pc, #148]	@ (8009410 <_svfiprintf_r+0x1ec>)
 800937c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009380:	f000 f9f6 	bl	8009770 <memchr>
 8009384:	2800      	cmp	r0, #0
 8009386:	d036      	beq.n	80093f6 <_svfiprintf_r+0x1d2>
 8009388:	4b22      	ldr	r3, [pc, #136]	@ (8009414 <_svfiprintf_r+0x1f0>)
 800938a:	bb1b      	cbnz	r3, 80093d4 <_svfiprintf_r+0x1b0>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	3307      	adds	r3, #7
 8009390:	f023 0307 	bic.w	r3, r3, #7
 8009394:	3308      	adds	r3, #8
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939a:	4433      	add	r3, r6
 800939c:	9309      	str	r3, [sp, #36]	@ 0x24
 800939e:	e76a      	b.n	8009276 <_svfiprintf_r+0x52>
 80093a0:	460c      	mov	r4, r1
 80093a2:	2001      	movs	r0, #1
 80093a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a8:	e7a8      	b.n	80092fc <_svfiprintf_r+0xd8>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f04f 0c0a 	mov.w	ip, #10
 80093b0:	4619      	mov	r1, r3
 80093b2:	3401      	adds	r4, #1
 80093b4:	9305      	str	r3, [sp, #20]
 80093b6:	4620      	mov	r0, r4
 80093b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093bc:	3a30      	subs	r2, #48	@ 0x30
 80093be:	2a09      	cmp	r2, #9
 80093c0:	d903      	bls.n	80093ca <_svfiprintf_r+0x1a6>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0c6      	beq.n	8009354 <_svfiprintf_r+0x130>
 80093c6:	9105      	str	r1, [sp, #20]
 80093c8:	e7c4      	b.n	8009354 <_svfiprintf_r+0x130>
 80093ca:	4604      	mov	r4, r0
 80093cc:	2301      	movs	r3, #1
 80093ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d2:	e7f0      	b.n	80093b6 <_svfiprintf_r+0x192>
 80093d4:	ab03      	add	r3, sp, #12
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	462a      	mov	r2, r5
 80093da:	4638      	mov	r0, r7
 80093dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <_svfiprintf_r+0x1f4>)
 80093de:	a904      	add	r1, sp, #16
 80093e0:	f3af 8000 	nop.w
 80093e4:	1c42      	adds	r2, r0, #1
 80093e6:	4606      	mov	r6, r0
 80093e8:	d1d6      	bne.n	8009398 <_svfiprintf_r+0x174>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	065b      	lsls	r3, r3, #25
 80093ee:	f53f af2d 	bmi.w	800924c <_svfiprintf_r+0x28>
 80093f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093f4:	e72c      	b.n	8009250 <_svfiprintf_r+0x2c>
 80093f6:	ab03      	add	r3, sp, #12
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	462a      	mov	r2, r5
 80093fc:	4638      	mov	r0, r7
 80093fe:	4b06      	ldr	r3, [pc, #24]	@ (8009418 <_svfiprintf_r+0x1f4>)
 8009400:	a904      	add	r1, sp, #16
 8009402:	f000 f87d 	bl	8009500 <_printf_i>
 8009406:	e7ed      	b.n	80093e4 <_svfiprintf_r+0x1c0>
 8009408:	0800a9ad 	.word	0x0800a9ad
 800940c:	0800a9b3 	.word	0x0800a9b3
 8009410:	0800a9b7 	.word	0x0800a9b7
 8009414:	00000000 	.word	0x00000000
 8009418:	0800916d 	.word	0x0800916d

0800941c <_printf_common>:
 800941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	4616      	mov	r6, r2
 8009422:	4698      	mov	r8, r3
 8009424:	688a      	ldr	r2, [r1, #8]
 8009426:	690b      	ldr	r3, [r1, #16]
 8009428:	4607      	mov	r7, r0
 800942a:	4293      	cmp	r3, r2
 800942c:	bfb8      	it	lt
 800942e:	4613      	movlt	r3, r2
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009436:	460c      	mov	r4, r1
 8009438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800943c:	b10a      	cbz	r2, 8009442 <_printf_common+0x26>
 800943e:	3301      	adds	r3, #1
 8009440:	6033      	str	r3, [r6, #0]
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	0699      	lsls	r1, r3, #26
 8009446:	bf42      	ittt	mi
 8009448:	6833      	ldrmi	r3, [r6, #0]
 800944a:	3302      	addmi	r3, #2
 800944c:	6033      	strmi	r3, [r6, #0]
 800944e:	6825      	ldr	r5, [r4, #0]
 8009450:	f015 0506 	ands.w	r5, r5, #6
 8009454:	d106      	bne.n	8009464 <_printf_common+0x48>
 8009456:	f104 0a19 	add.w	sl, r4, #25
 800945a:	68e3      	ldr	r3, [r4, #12]
 800945c:	6832      	ldr	r2, [r6, #0]
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	42ab      	cmp	r3, r5
 8009462:	dc2b      	bgt.n	80094bc <_printf_common+0xa0>
 8009464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	3b00      	subs	r3, #0
 800946c:	bf18      	it	ne
 800946e:	2301      	movne	r3, #1
 8009470:	0692      	lsls	r2, r2, #26
 8009472:	d430      	bmi.n	80094d6 <_printf_common+0xba>
 8009474:	4641      	mov	r1, r8
 8009476:	4638      	mov	r0, r7
 8009478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800947c:	47c8      	blx	r9
 800947e:	3001      	adds	r0, #1
 8009480:	d023      	beq.n	80094ca <_printf_common+0xae>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	6922      	ldr	r2, [r4, #16]
 8009486:	f003 0306 	and.w	r3, r3, #6
 800948a:	2b04      	cmp	r3, #4
 800948c:	bf14      	ite	ne
 800948e:	2500      	movne	r5, #0
 8009490:	6833      	ldreq	r3, [r6, #0]
 8009492:	f04f 0600 	mov.w	r6, #0
 8009496:	bf08      	it	eq
 8009498:	68e5      	ldreq	r5, [r4, #12]
 800949a:	f104 041a 	add.w	r4, r4, #26
 800949e:	bf08      	it	eq
 80094a0:	1aed      	subeq	r5, r5, r3
 80094a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80094a6:	bf08      	it	eq
 80094a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094ac:	4293      	cmp	r3, r2
 80094ae:	bfc4      	itt	gt
 80094b0:	1a9b      	subgt	r3, r3, r2
 80094b2:	18ed      	addgt	r5, r5, r3
 80094b4:	42b5      	cmp	r5, r6
 80094b6:	d11a      	bne.n	80094ee <_printf_common+0xd2>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e008      	b.n	80094ce <_printf_common+0xb2>
 80094bc:	2301      	movs	r3, #1
 80094be:	4652      	mov	r2, sl
 80094c0:	4641      	mov	r1, r8
 80094c2:	4638      	mov	r0, r7
 80094c4:	47c8      	blx	r9
 80094c6:	3001      	adds	r0, #1
 80094c8:	d103      	bne.n	80094d2 <_printf_common+0xb6>
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d2:	3501      	adds	r5, #1
 80094d4:	e7c1      	b.n	800945a <_printf_common+0x3e>
 80094d6:	2030      	movs	r0, #48	@ 0x30
 80094d8:	18e1      	adds	r1, r4, r3
 80094da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094e4:	4422      	add	r2, r4
 80094e6:	3302      	adds	r3, #2
 80094e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094ec:	e7c2      	b.n	8009474 <_printf_common+0x58>
 80094ee:	2301      	movs	r3, #1
 80094f0:	4622      	mov	r2, r4
 80094f2:	4641      	mov	r1, r8
 80094f4:	4638      	mov	r0, r7
 80094f6:	47c8      	blx	r9
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0e6      	beq.n	80094ca <_printf_common+0xae>
 80094fc:	3601      	adds	r6, #1
 80094fe:	e7d9      	b.n	80094b4 <_printf_common+0x98>

08009500 <_printf_i>:
 8009500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	7e0f      	ldrb	r7, [r1, #24]
 8009506:	4691      	mov	r9, r2
 8009508:	2f78      	cmp	r7, #120	@ 0x78
 800950a:	4680      	mov	r8, r0
 800950c:	460c      	mov	r4, r1
 800950e:	469a      	mov	sl, r3
 8009510:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009516:	d807      	bhi.n	8009528 <_printf_i+0x28>
 8009518:	2f62      	cmp	r7, #98	@ 0x62
 800951a:	d80a      	bhi.n	8009532 <_printf_i+0x32>
 800951c:	2f00      	cmp	r7, #0
 800951e:	f000 80d1 	beq.w	80096c4 <_printf_i+0x1c4>
 8009522:	2f58      	cmp	r7, #88	@ 0x58
 8009524:	f000 80b8 	beq.w	8009698 <_printf_i+0x198>
 8009528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800952c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009530:	e03a      	b.n	80095a8 <_printf_i+0xa8>
 8009532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009536:	2b15      	cmp	r3, #21
 8009538:	d8f6      	bhi.n	8009528 <_printf_i+0x28>
 800953a:	a101      	add	r1, pc, #4	@ (adr r1, 8009540 <_printf_i+0x40>)
 800953c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009540:	08009599 	.word	0x08009599
 8009544:	080095ad 	.word	0x080095ad
 8009548:	08009529 	.word	0x08009529
 800954c:	08009529 	.word	0x08009529
 8009550:	08009529 	.word	0x08009529
 8009554:	08009529 	.word	0x08009529
 8009558:	080095ad 	.word	0x080095ad
 800955c:	08009529 	.word	0x08009529
 8009560:	08009529 	.word	0x08009529
 8009564:	08009529 	.word	0x08009529
 8009568:	08009529 	.word	0x08009529
 800956c:	080096ab 	.word	0x080096ab
 8009570:	080095d7 	.word	0x080095d7
 8009574:	08009665 	.word	0x08009665
 8009578:	08009529 	.word	0x08009529
 800957c:	08009529 	.word	0x08009529
 8009580:	080096cd 	.word	0x080096cd
 8009584:	08009529 	.word	0x08009529
 8009588:	080095d7 	.word	0x080095d7
 800958c:	08009529 	.word	0x08009529
 8009590:	08009529 	.word	0x08009529
 8009594:	0800966d 	.word	0x0800966d
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6032      	str	r2, [r6, #0]
 80095a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095a8:	2301      	movs	r3, #1
 80095aa:	e09c      	b.n	80096e6 <_printf_i+0x1e6>
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	1d19      	adds	r1, r3, #4
 80095b2:	6031      	str	r1, [r6, #0]
 80095b4:	0606      	lsls	r6, r0, #24
 80095b6:	d501      	bpl.n	80095bc <_printf_i+0xbc>
 80095b8:	681d      	ldr	r5, [r3, #0]
 80095ba:	e003      	b.n	80095c4 <_printf_i+0xc4>
 80095bc:	0645      	lsls	r5, r0, #25
 80095be:	d5fb      	bpl.n	80095b8 <_printf_i+0xb8>
 80095c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095c4:	2d00      	cmp	r5, #0
 80095c6:	da03      	bge.n	80095d0 <_printf_i+0xd0>
 80095c8:	232d      	movs	r3, #45	@ 0x2d
 80095ca:	426d      	negs	r5, r5
 80095cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d0:	230a      	movs	r3, #10
 80095d2:	4858      	ldr	r0, [pc, #352]	@ (8009734 <_printf_i+0x234>)
 80095d4:	e011      	b.n	80095fa <_printf_i+0xfa>
 80095d6:	6821      	ldr	r1, [r4, #0]
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	0608      	lsls	r0, r1, #24
 80095dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80095e0:	d402      	bmi.n	80095e8 <_printf_i+0xe8>
 80095e2:	0649      	lsls	r1, r1, #25
 80095e4:	bf48      	it	mi
 80095e6:	b2ad      	uxthmi	r5, r5
 80095e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	bf14      	ite	ne
 80095ee:	230a      	movne	r3, #10
 80095f0:	2308      	moveq	r3, #8
 80095f2:	4850      	ldr	r0, [pc, #320]	@ (8009734 <_printf_i+0x234>)
 80095f4:	2100      	movs	r1, #0
 80095f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095fa:	6866      	ldr	r6, [r4, #4]
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	60a6      	str	r6, [r4, #8]
 8009600:	db05      	blt.n	800960e <_printf_i+0x10e>
 8009602:	6821      	ldr	r1, [r4, #0]
 8009604:	432e      	orrs	r6, r5
 8009606:	f021 0104 	bic.w	r1, r1, #4
 800960a:	6021      	str	r1, [r4, #0]
 800960c:	d04b      	beq.n	80096a6 <_printf_i+0x1a6>
 800960e:	4616      	mov	r6, r2
 8009610:	fbb5 f1f3 	udiv	r1, r5, r3
 8009614:	fb03 5711 	mls	r7, r3, r1, r5
 8009618:	5dc7      	ldrb	r7, [r0, r7]
 800961a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800961e:	462f      	mov	r7, r5
 8009620:	42bb      	cmp	r3, r7
 8009622:	460d      	mov	r5, r1
 8009624:	d9f4      	bls.n	8009610 <_printf_i+0x110>
 8009626:	2b08      	cmp	r3, #8
 8009628:	d10b      	bne.n	8009642 <_printf_i+0x142>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	07df      	lsls	r7, r3, #31
 800962e:	d508      	bpl.n	8009642 <_printf_i+0x142>
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	6861      	ldr	r1, [r4, #4]
 8009634:	4299      	cmp	r1, r3
 8009636:	bfde      	ittt	le
 8009638:	2330      	movle	r3, #48	@ 0x30
 800963a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800963e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009642:	1b92      	subs	r2, r2, r6
 8009644:	6122      	str	r2, [r4, #16]
 8009646:	464b      	mov	r3, r9
 8009648:	4621      	mov	r1, r4
 800964a:	4640      	mov	r0, r8
 800964c:	f8cd a000 	str.w	sl, [sp]
 8009650:	aa03      	add	r2, sp, #12
 8009652:	f7ff fee3 	bl	800941c <_printf_common>
 8009656:	3001      	adds	r0, #1
 8009658:	d14a      	bne.n	80096f0 <_printf_i+0x1f0>
 800965a:	f04f 30ff 	mov.w	r0, #4294967295
 800965e:	b004      	add	sp, #16
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	f043 0320 	orr.w	r3, r3, #32
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	2778      	movs	r7, #120	@ 0x78
 800966e:	4832      	ldr	r0, [pc, #200]	@ (8009738 <_printf_i+0x238>)
 8009670:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	6831      	ldr	r1, [r6, #0]
 8009678:	061f      	lsls	r7, r3, #24
 800967a:	f851 5b04 	ldr.w	r5, [r1], #4
 800967e:	d402      	bmi.n	8009686 <_printf_i+0x186>
 8009680:	065f      	lsls	r7, r3, #25
 8009682:	bf48      	it	mi
 8009684:	b2ad      	uxthmi	r5, r5
 8009686:	6031      	str	r1, [r6, #0]
 8009688:	07d9      	lsls	r1, r3, #31
 800968a:	bf44      	itt	mi
 800968c:	f043 0320 	orrmi.w	r3, r3, #32
 8009690:	6023      	strmi	r3, [r4, #0]
 8009692:	b11d      	cbz	r5, 800969c <_printf_i+0x19c>
 8009694:	2310      	movs	r3, #16
 8009696:	e7ad      	b.n	80095f4 <_printf_i+0xf4>
 8009698:	4826      	ldr	r0, [pc, #152]	@ (8009734 <_printf_i+0x234>)
 800969a:	e7e9      	b.n	8009670 <_printf_i+0x170>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	f023 0320 	bic.w	r3, r3, #32
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	e7f6      	b.n	8009694 <_printf_i+0x194>
 80096a6:	4616      	mov	r6, r2
 80096a8:	e7bd      	b.n	8009626 <_printf_i+0x126>
 80096aa:	6833      	ldr	r3, [r6, #0]
 80096ac:	6825      	ldr	r5, [r4, #0]
 80096ae:	1d18      	adds	r0, r3, #4
 80096b0:	6961      	ldr	r1, [r4, #20]
 80096b2:	6030      	str	r0, [r6, #0]
 80096b4:	062e      	lsls	r6, r5, #24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	d501      	bpl.n	80096be <_printf_i+0x1be>
 80096ba:	6019      	str	r1, [r3, #0]
 80096bc:	e002      	b.n	80096c4 <_printf_i+0x1c4>
 80096be:	0668      	lsls	r0, r5, #25
 80096c0:	d5fb      	bpl.n	80096ba <_printf_i+0x1ba>
 80096c2:	8019      	strh	r1, [r3, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	4616      	mov	r6, r2
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	e7bc      	b.n	8009646 <_printf_i+0x146>
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	2100      	movs	r1, #0
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	6032      	str	r2, [r6, #0]
 80096d4:	681e      	ldr	r6, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	4630      	mov	r0, r6
 80096da:	f000 f849 	bl	8009770 <memchr>
 80096de:	b108      	cbz	r0, 80096e4 <_printf_i+0x1e4>
 80096e0:	1b80      	subs	r0, r0, r6
 80096e2:	6060      	str	r0, [r4, #4]
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	6123      	str	r3, [r4, #16]
 80096e8:	2300      	movs	r3, #0
 80096ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ee:	e7aa      	b.n	8009646 <_printf_i+0x146>
 80096f0:	4632      	mov	r2, r6
 80096f2:	4649      	mov	r1, r9
 80096f4:	4640      	mov	r0, r8
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	47d0      	blx	sl
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0ad      	beq.n	800965a <_printf_i+0x15a>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	079b      	lsls	r3, r3, #30
 8009702:	d413      	bmi.n	800972c <_printf_i+0x22c>
 8009704:	68e0      	ldr	r0, [r4, #12]
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	4298      	cmp	r0, r3
 800970a:	bfb8      	it	lt
 800970c:	4618      	movlt	r0, r3
 800970e:	e7a6      	b.n	800965e <_printf_i+0x15e>
 8009710:	2301      	movs	r3, #1
 8009712:	4632      	mov	r2, r6
 8009714:	4649      	mov	r1, r9
 8009716:	4640      	mov	r0, r8
 8009718:	47d0      	blx	sl
 800971a:	3001      	adds	r0, #1
 800971c:	d09d      	beq.n	800965a <_printf_i+0x15a>
 800971e:	3501      	adds	r5, #1
 8009720:	68e3      	ldr	r3, [r4, #12]
 8009722:	9903      	ldr	r1, [sp, #12]
 8009724:	1a5b      	subs	r3, r3, r1
 8009726:	42ab      	cmp	r3, r5
 8009728:	dcf2      	bgt.n	8009710 <_printf_i+0x210>
 800972a:	e7eb      	b.n	8009704 <_printf_i+0x204>
 800972c:	2500      	movs	r5, #0
 800972e:	f104 0619 	add.w	r6, r4, #25
 8009732:	e7f5      	b.n	8009720 <_printf_i+0x220>
 8009734:	0800a9be 	.word	0x0800a9be
 8009738:	0800a9cf 	.word	0x0800a9cf

0800973c <memmove>:
 800973c:	4288      	cmp	r0, r1
 800973e:	b510      	push	{r4, lr}
 8009740:	eb01 0402 	add.w	r4, r1, r2
 8009744:	d902      	bls.n	800974c <memmove+0x10>
 8009746:	4284      	cmp	r4, r0
 8009748:	4623      	mov	r3, r4
 800974a:	d807      	bhi.n	800975c <memmove+0x20>
 800974c:	1e43      	subs	r3, r0, #1
 800974e:	42a1      	cmp	r1, r4
 8009750:	d008      	beq.n	8009764 <memmove+0x28>
 8009752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800975a:	e7f8      	b.n	800974e <memmove+0x12>
 800975c:	4601      	mov	r1, r0
 800975e:	4402      	add	r2, r0
 8009760:	428a      	cmp	r2, r1
 8009762:	d100      	bne.n	8009766 <memmove+0x2a>
 8009764:	bd10      	pop	{r4, pc}
 8009766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800976a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800976e:	e7f7      	b.n	8009760 <memmove+0x24>

08009770 <memchr>:
 8009770:	4603      	mov	r3, r0
 8009772:	b510      	push	{r4, lr}
 8009774:	b2c9      	uxtb	r1, r1
 8009776:	4402      	add	r2, r0
 8009778:	4293      	cmp	r3, r2
 800977a:	4618      	mov	r0, r3
 800977c:	d101      	bne.n	8009782 <memchr+0x12>
 800977e:	2000      	movs	r0, #0
 8009780:	e003      	b.n	800978a <memchr+0x1a>
 8009782:	7804      	ldrb	r4, [r0, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	428c      	cmp	r4, r1
 8009788:	d1f6      	bne.n	8009778 <memchr+0x8>
 800978a:	bd10      	pop	{r4, pc}

0800978c <_realloc_r>:
 800978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009790:	4607      	mov	r7, r0
 8009792:	4614      	mov	r4, r2
 8009794:	460d      	mov	r5, r1
 8009796:	b921      	cbnz	r1, 80097a2 <_realloc_r+0x16>
 8009798:	4611      	mov	r1, r2
 800979a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	f7ff badd 	b.w	8008d5c <_malloc_r>
 80097a2:	b92a      	cbnz	r2, 80097b0 <_realloc_r+0x24>
 80097a4:	f7ff fc9a 	bl	80090dc <_free_r>
 80097a8:	4625      	mov	r5, r4
 80097aa:	4628      	mov	r0, r5
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b0:	f000 f81a 	bl	80097e8 <_malloc_usable_size_r>
 80097b4:	4284      	cmp	r4, r0
 80097b6:	4606      	mov	r6, r0
 80097b8:	d802      	bhi.n	80097c0 <_realloc_r+0x34>
 80097ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097be:	d8f4      	bhi.n	80097aa <_realloc_r+0x1e>
 80097c0:	4621      	mov	r1, r4
 80097c2:	4638      	mov	r0, r7
 80097c4:	f7ff faca 	bl	8008d5c <_malloc_r>
 80097c8:	4680      	mov	r8, r0
 80097ca:	b908      	cbnz	r0, 80097d0 <_realloc_r+0x44>
 80097cc:	4645      	mov	r5, r8
 80097ce:	e7ec      	b.n	80097aa <_realloc_r+0x1e>
 80097d0:	42b4      	cmp	r4, r6
 80097d2:	4622      	mov	r2, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	bf28      	it	cs
 80097d8:	4632      	movcs	r2, r6
 80097da:	f7ff fc71 	bl	80090c0 <memcpy>
 80097de:	4629      	mov	r1, r5
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff fc7b 	bl	80090dc <_free_r>
 80097e6:	e7f1      	b.n	80097cc <_realloc_r+0x40>

080097e8 <_malloc_usable_size_r>:
 80097e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ec:	1f18      	subs	r0, r3, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfbc      	itt	lt
 80097f2:	580b      	ldrlt	r3, [r1, r0]
 80097f4:	18c0      	addlt	r0, r0, r3
 80097f6:	4770      	bx	lr

080097f8 <pow>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	4614      	mov	r4, r2
 80097fe:	461d      	mov	r5, r3
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	f000 f9ac 	bl	8009b60 <__ieee754_pow>
 8009808:	4622      	mov	r2, r4
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	462b      	mov	r3, r5
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f7 f8fa 	bl	8000a0c <__aeabi_dcmpun>
 8009818:	bbc8      	cbnz	r0, 800988e <pow+0x96>
 800981a:	2200      	movs	r2, #0
 800981c:	2300      	movs	r3, #0
 800981e:	4640      	mov	r0, r8
 8009820:	4649      	mov	r1, r9
 8009822:	f7f7 f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8009826:	b1b8      	cbz	r0, 8009858 <pow+0x60>
 8009828:	2200      	movs	r2, #0
 800982a:	2300      	movs	r3, #0
 800982c:	4620      	mov	r0, r4
 800982e:	4629      	mov	r1, r5
 8009830:	f7f7 f8ba 	bl	80009a8 <__aeabi_dcmpeq>
 8009834:	2800      	cmp	r0, #0
 8009836:	d141      	bne.n	80098bc <pow+0xc4>
 8009838:	4620      	mov	r0, r4
 800983a:	4629      	mov	r1, r5
 800983c:	f000 f844 	bl	80098c8 <finite>
 8009840:	b328      	cbz	r0, 800988e <pow+0x96>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4620      	mov	r0, r4
 8009848:	4629      	mov	r1, r5
 800984a:	f7f7 f8b7 	bl	80009bc <__aeabi_dcmplt>
 800984e:	b1f0      	cbz	r0, 800988e <pow+0x96>
 8009850:	f7ff fc0a 	bl	8009068 <__errno>
 8009854:	2322      	movs	r3, #34	@ 0x22
 8009856:	e019      	b.n	800988c <pow+0x94>
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f000 f834 	bl	80098c8 <finite>
 8009860:	b9c8      	cbnz	r0, 8009896 <pow+0x9e>
 8009862:	4640      	mov	r0, r8
 8009864:	4649      	mov	r1, r9
 8009866:	f000 f82f 	bl	80098c8 <finite>
 800986a:	b1a0      	cbz	r0, 8009896 <pow+0x9e>
 800986c:	4620      	mov	r0, r4
 800986e:	4629      	mov	r1, r5
 8009870:	f000 f82a 	bl	80098c8 <finite>
 8009874:	b178      	cbz	r0, 8009896 <pow+0x9e>
 8009876:	4632      	mov	r2, r6
 8009878:	463b      	mov	r3, r7
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f7 f8c5 	bl	8000a0c <__aeabi_dcmpun>
 8009882:	2800      	cmp	r0, #0
 8009884:	d0e4      	beq.n	8009850 <pow+0x58>
 8009886:	f7ff fbef 	bl	8009068 <__errno>
 800988a:	2321      	movs	r3, #33	@ 0x21
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	4630      	mov	r0, r6
 800989c:	4639      	mov	r1, r7
 800989e:	f7f7 f883 	bl	80009a8 <__aeabi_dcmpeq>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0f3      	beq.n	800988e <pow+0x96>
 80098a6:	4640      	mov	r0, r8
 80098a8:	4649      	mov	r1, r9
 80098aa:	f000 f80d 	bl	80098c8 <finite>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0ed      	beq.n	800988e <pow+0x96>
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f000 f807 	bl	80098c8 <finite>
 80098ba:	e7c8      	b.n	800984e <pow+0x56>
 80098bc:	2600      	movs	r6, #0
 80098be:	4f01      	ldr	r7, [pc, #4]	@ (80098c4 <pow+0xcc>)
 80098c0:	e7e5      	b.n	800988e <pow+0x96>
 80098c2:	bf00      	nop
 80098c4:	3ff00000 	.word	0x3ff00000

080098c8 <finite>:
 80098c8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80098cc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80098d0:	0fc0      	lsrs	r0, r0, #31
 80098d2:	4770      	bx	lr
 80098d4:	0000      	movs	r0, r0
	...

080098d8 <ceil>:
 80098d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80098e0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80098e4:	2e13      	cmp	r6, #19
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	460c      	mov	r4, r1
 80098ec:	4605      	mov	r5, r0
 80098ee:	4680      	mov	r8, r0
 80098f0:	dc2f      	bgt.n	8009952 <ceil+0x7a>
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	da11      	bge.n	800991a <ceil+0x42>
 80098f6:	a332      	add	r3, pc, #200	@ (adr r3, 80099c0 <ceil+0xe8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fc36 	bl	800016c <__adddf3>
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	f7f7 f878 	bl	80009f8 <__aeabi_dcmpgt>
 8009908:	b120      	cbz	r0, 8009914 <ceil+0x3c>
 800990a:	2c00      	cmp	r4, #0
 800990c:	db51      	blt.n	80099b2 <ceil+0xda>
 800990e:	4325      	orrs	r5, r4
 8009910:	d153      	bne.n	80099ba <ceil+0xe2>
 8009912:	462c      	mov	r4, r5
 8009914:	4623      	mov	r3, r4
 8009916:	462a      	mov	r2, r5
 8009918:	e024      	b.n	8009964 <ceil+0x8c>
 800991a:	4f2b      	ldr	r7, [pc, #172]	@ (80099c8 <ceil+0xf0>)
 800991c:	4137      	asrs	r7, r6
 800991e:	ea01 0c07 	and.w	ip, r1, r7
 8009922:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009926:	d01d      	beq.n	8009964 <ceil+0x8c>
 8009928:	a325      	add	r3, pc, #148	@ (adr r3, 80099c0 <ceil+0xe8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fc1d 	bl	800016c <__adddf3>
 8009932:	2200      	movs	r2, #0
 8009934:	2300      	movs	r3, #0
 8009936:	f7f7 f85f 	bl	80009f8 <__aeabi_dcmpgt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d0ea      	beq.n	8009914 <ceil+0x3c>
 800993e:	2c00      	cmp	r4, #0
 8009940:	bfc2      	ittt	gt
 8009942:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8009946:	4133      	asrgt	r3, r6
 8009948:	18e4      	addgt	r4, r4, r3
 800994a:	2500      	movs	r5, #0
 800994c:	ea24 0407 	bic.w	r4, r4, r7
 8009950:	e7e0      	b.n	8009914 <ceil+0x3c>
 8009952:	2e33      	cmp	r6, #51	@ 0x33
 8009954:	dd0a      	ble.n	800996c <ceil+0x94>
 8009956:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800995a:	d103      	bne.n	8009964 <ceil+0x8c>
 800995c:	f7f6 fc06 	bl	800016c <__adddf3>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4610      	mov	r0, r2
 8009966:	4619      	mov	r1, r3
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	f04f 3cff 	mov.w	ip, #4294967295
 8009970:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009974:	fa2c f707 	lsr.w	r7, ip, r7
 8009978:	4238      	tst	r0, r7
 800997a:	d0f3      	beq.n	8009964 <ceil+0x8c>
 800997c:	a310      	add	r3, pc, #64	@ (adr r3, 80099c0 <ceil+0xe8>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fbf3 	bl	800016c <__adddf3>
 8009986:	2200      	movs	r2, #0
 8009988:	2300      	movs	r3, #0
 800998a:	f7f7 f835 	bl	80009f8 <__aeabi_dcmpgt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d0c0      	beq.n	8009914 <ceil+0x3c>
 8009992:	2c00      	cmp	r4, #0
 8009994:	dd0a      	ble.n	80099ac <ceil+0xd4>
 8009996:	2e14      	cmp	r6, #20
 8009998:	d101      	bne.n	800999e <ceil+0xc6>
 800999a:	3401      	adds	r4, #1
 800999c:	e006      	b.n	80099ac <ceil+0xd4>
 800999e:	2301      	movs	r3, #1
 80099a0:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099a4:	40b3      	lsls	r3, r6
 80099a6:	441d      	add	r5, r3
 80099a8:	45a8      	cmp	r8, r5
 80099aa:	d8f6      	bhi.n	800999a <ceil+0xc2>
 80099ac:	ea25 0507 	bic.w	r5, r5, r7
 80099b0:	e7b0      	b.n	8009914 <ceil+0x3c>
 80099b2:	2500      	movs	r5, #0
 80099b4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80099b8:	e7ac      	b.n	8009914 <ceil+0x3c>
 80099ba:	2500      	movs	r5, #0
 80099bc:	4c03      	ldr	r4, [pc, #12]	@ (80099cc <ceil+0xf4>)
 80099be:	e7a9      	b.n	8009914 <ceil+0x3c>
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	000fffff 	.word	0x000fffff
 80099cc:	3ff00000 	.word	0x3ff00000

080099d0 <floor>:
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80099d8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80099dc:	2e13      	cmp	r6, #19
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	460c      	mov	r4, r1
 80099e4:	4605      	mov	r5, r0
 80099e6:	4680      	mov	r8, r0
 80099e8:	dc35      	bgt.n	8009a56 <floor+0x86>
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	da17      	bge.n	8009a1e <floor+0x4e>
 80099ee:	a334      	add	r3, pc, #208	@ (adr r3, 8009ac0 <floor+0xf0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fbba 	bl	800016c <__adddf3>
 80099f8:	2200      	movs	r2, #0
 80099fa:	2300      	movs	r3, #0
 80099fc:	f7f6 fffc 	bl	80009f8 <__aeabi_dcmpgt>
 8009a00:	b150      	cbz	r0, 8009a18 <floor+0x48>
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	da57      	bge.n	8009ab6 <floor+0xe6>
 8009a06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009a0a:	432c      	orrs	r4, r5
 8009a0c:	2500      	movs	r5, #0
 8009a0e:	42ac      	cmp	r4, r5
 8009a10:	4c2d      	ldr	r4, [pc, #180]	@ (8009ac8 <floor+0xf8>)
 8009a12:	bf08      	it	eq
 8009a14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009a18:	4623      	mov	r3, r4
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	e024      	b.n	8009a68 <floor+0x98>
 8009a1e:	4f2b      	ldr	r7, [pc, #172]	@ (8009acc <floor+0xfc>)
 8009a20:	4137      	asrs	r7, r6
 8009a22:	ea01 0c07 	and.w	ip, r1, r7
 8009a26:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009a2a:	d01d      	beq.n	8009a68 <floor+0x98>
 8009a2c:	a324      	add	r3, pc, #144	@ (adr r3, 8009ac0 <floor+0xf0>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fb9b 	bl	800016c <__adddf3>
 8009a36:	2200      	movs	r2, #0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f7f6 ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d0ea      	beq.n	8009a18 <floor+0x48>
 8009a42:	2c00      	cmp	r4, #0
 8009a44:	bfbe      	ittt	lt
 8009a46:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009a4a:	4133      	asrlt	r3, r6
 8009a4c:	18e4      	addlt	r4, r4, r3
 8009a4e:	2500      	movs	r5, #0
 8009a50:	ea24 0407 	bic.w	r4, r4, r7
 8009a54:	e7e0      	b.n	8009a18 <floor+0x48>
 8009a56:	2e33      	cmp	r6, #51	@ 0x33
 8009a58:	dd0a      	ble.n	8009a70 <floor+0xa0>
 8009a5a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009a5e:	d103      	bne.n	8009a68 <floor+0x98>
 8009a60:	f7f6 fb84 	bl	800016c <__adddf3>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a70:	f04f 3cff 	mov.w	ip, #4294967295
 8009a74:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009a78:	fa2c f707 	lsr.w	r7, ip, r7
 8009a7c:	4207      	tst	r7, r0
 8009a7e:	d0f3      	beq.n	8009a68 <floor+0x98>
 8009a80:	a30f      	add	r3, pc, #60	@ (adr r3, 8009ac0 <floor+0xf0>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fb71 	bl	800016c <__adddf3>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f7f6 ffb3 	bl	80009f8 <__aeabi_dcmpgt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0c0      	beq.n	8009a18 <floor+0x48>
 8009a96:	2c00      	cmp	r4, #0
 8009a98:	da0a      	bge.n	8009ab0 <floor+0xe0>
 8009a9a:	2e14      	cmp	r6, #20
 8009a9c:	d101      	bne.n	8009aa2 <floor+0xd2>
 8009a9e:	3401      	adds	r4, #1
 8009aa0:	e006      	b.n	8009ab0 <floor+0xe0>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009aa8:	40b3      	lsls	r3, r6
 8009aaa:	441d      	add	r5, r3
 8009aac:	4545      	cmp	r5, r8
 8009aae:	d3f6      	bcc.n	8009a9e <floor+0xce>
 8009ab0:	ea25 0507 	bic.w	r5, r5, r7
 8009ab4:	e7b0      	b.n	8009a18 <floor+0x48>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	462c      	mov	r4, r5
 8009aba:	e7ad      	b.n	8009a18 <floor+0x48>
 8009abc:	f3af 8000 	nop.w
 8009ac0:	8800759c 	.word	0x8800759c
 8009ac4:	7e37e43c 	.word	0x7e37e43c
 8009ac8:	bff00000 	.word	0xbff00000
 8009acc:	000fffff 	.word	0x000fffff

08009ad0 <round>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009ad6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8009ada:	2a13      	cmp	r2, #19
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	dc1a      	bgt.n	8009b1a <round+0x4a>
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	da0b      	bge.n	8009b00 <round+0x30>
 8009ae8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009aec:	3201      	adds	r2, #1
 8009aee:	bf04      	itt	eq
 8009af0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009af4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009af8:	2200      	movs	r2, #0
 8009afa:	461d      	mov	r5, r3
 8009afc:	4614      	mov	r4, r2
 8009afe:	e016      	b.n	8009b2e <round+0x5e>
 8009b00:	4815      	ldr	r0, [pc, #84]	@ (8009b58 <round+0x88>)
 8009b02:	4110      	asrs	r0, r2
 8009b04:	4001      	ands	r1, r0
 8009b06:	4321      	orrs	r1, r4
 8009b08:	d011      	beq.n	8009b2e <round+0x5e>
 8009b0a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8009b0e:	fa41 f202 	asr.w	r2, r1, r2
 8009b12:	4413      	add	r3, r2
 8009b14:	ea23 0300 	bic.w	r3, r3, r0
 8009b18:	e7ee      	b.n	8009af8 <round+0x28>
 8009b1a:	2a33      	cmp	r2, #51	@ 0x33
 8009b1c:	dd0a      	ble.n	8009b34 <round+0x64>
 8009b1e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009b22:	d104      	bne.n	8009b2e <round+0x5e>
 8009b24:	4602      	mov	r2, r0
 8009b26:	f7f6 fb21 	bl	800016c <__adddf3>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009b3c:	40f8      	lsrs	r0, r7
 8009b3e:	4220      	tst	r0, r4
 8009b40:	d0f5      	beq.n	8009b2e <round+0x5e>
 8009b42:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8009b46:	2201      	movs	r2, #1
 8009b48:	408a      	lsls	r2, r1
 8009b4a:	1912      	adds	r2, r2, r4
 8009b4c:	bf28      	it	cs
 8009b4e:	3301      	addcs	r3, #1
 8009b50:	ea22 0200 	bic.w	r2, r2, r0
 8009b54:	e7d1      	b.n	8009afa <round+0x2a>
 8009b56:	bf00      	nop
 8009b58:	000fffff 	.word	0x000fffff
 8009b5c:	00000000 	.word	0x00000000

08009b60 <__ieee754_pow>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	b091      	sub	sp, #68	@ 0x44
 8009b66:	e9cd 2300 	strd	r2, r3, [sp]
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009b70:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009b74:	4682      	mov	sl, r0
 8009b76:	ea57 0001 	orrs.w	r0, r7, r1
 8009b7a:	d112      	bne.n	8009ba2 <__ieee754_pow+0x42>
 8009b7c:	4653      	mov	r3, sl
 8009b7e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009b82:	18db      	adds	r3, r3, r3
 8009b84:	4152      	adcs	r2, r2
 8009b86:	4298      	cmp	r0, r3
 8009b88:	4b93      	ldr	r3, [pc, #588]	@ (8009dd8 <__ieee754_pow+0x278>)
 8009b8a:	4193      	sbcs	r3, r2
 8009b8c:	f080 84cd 	bcs.w	800a52a <__ieee754_pow+0x9ca>
 8009b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b94:	4650      	mov	r0, sl
 8009b96:	4659      	mov	r1, fp
 8009b98:	f7f6 fae8 	bl	800016c <__adddf3>
 8009b9c:	b011      	add	sp, #68	@ 0x44
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	4b8e      	ldr	r3, [pc, #568]	@ (8009ddc <__ieee754_pow+0x27c>)
 8009ba4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	465e      	mov	r6, fp
 8009bac:	46d1      	mov	r9, sl
 8009bae:	d80b      	bhi.n	8009bc8 <__ieee754_pow+0x68>
 8009bb0:	d105      	bne.n	8009bbe <__ieee754_pow+0x5e>
 8009bb2:	f1ba 0f00 	cmp.w	sl, #0
 8009bb6:	d1eb      	bne.n	8009b90 <__ieee754_pow+0x30>
 8009bb8:	42af      	cmp	r7, r5
 8009bba:	d8e9      	bhi.n	8009b90 <__ieee754_pow+0x30>
 8009bbc:	e001      	b.n	8009bc2 <__ieee754_pow+0x62>
 8009bbe:	429f      	cmp	r7, r3
 8009bc0:	d802      	bhi.n	8009bc8 <__ieee754_pow+0x68>
 8009bc2:	429f      	cmp	r7, r3
 8009bc4:	d10f      	bne.n	8009be6 <__ieee754_pow+0x86>
 8009bc6:	b171      	cbz	r1, 8009be6 <__ieee754_pow+0x86>
 8009bc8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009bcc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009bd0:	ea56 0609 	orrs.w	r6, r6, r9
 8009bd4:	d1dc      	bne.n	8009b90 <__ieee754_pow+0x30>
 8009bd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009bda:	18db      	adds	r3, r3, r3
 8009bdc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009be0:	4152      	adcs	r2, r2
 8009be2:	429e      	cmp	r6, r3
 8009be4:	e7d0      	b.n	8009b88 <__ieee754_pow+0x28>
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	462b      	mov	r3, r5
 8009bea:	da42      	bge.n	8009c72 <__ieee754_pow+0x112>
 8009bec:	4a7c      	ldr	r2, [pc, #496]	@ (8009de0 <__ieee754_pow+0x280>)
 8009bee:	4297      	cmp	r7, r2
 8009bf0:	d856      	bhi.n	8009ca0 <__ieee754_pow+0x140>
 8009bf2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009bf6:	4297      	cmp	r7, r2
 8009bf8:	f240 84a6 	bls.w	800a548 <__ieee754_pow+0x9e8>
 8009bfc:	153a      	asrs	r2, r7, #20
 8009bfe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009c02:	2a14      	cmp	r2, #20
 8009c04:	dd18      	ble.n	8009c38 <__ieee754_pow+0xd8>
 8009c06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009c0a:	fa21 f402 	lsr.w	r4, r1, r2
 8009c0e:	fa04 f202 	lsl.w	r2, r4, r2
 8009c12:	428a      	cmp	r2, r1
 8009c14:	f040 8498 	bne.w	800a548 <__ieee754_pow+0x9e8>
 8009c18:	f004 0401 	and.w	r4, r4, #1
 8009c1c:	f1c4 0402 	rsb	r4, r4, #2
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d159      	bne.n	8009cd8 <__ieee754_pow+0x178>
 8009c24:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009c28:	d149      	bne.n	8009cbe <__ieee754_pow+0x15e>
 8009c2a:	4652      	mov	r2, sl
 8009c2c:	465b      	mov	r3, fp
 8009c2e:	4650      	mov	r0, sl
 8009c30:	4659      	mov	r1, fp
 8009c32:	f7f6 fc51 	bl	80004d8 <__aeabi_dmul>
 8009c36:	e7b1      	b.n	8009b9c <__ieee754_pow+0x3c>
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	d14c      	bne.n	8009cd6 <__ieee754_pow+0x176>
 8009c3c:	f1c2 0214 	rsb	r2, r2, #20
 8009c40:	fa47 f402 	asr.w	r4, r7, r2
 8009c44:	fa04 f202 	lsl.w	r2, r4, r2
 8009c48:	42ba      	cmp	r2, r7
 8009c4a:	f040 847a 	bne.w	800a542 <__ieee754_pow+0x9e2>
 8009c4e:	f004 0401 	and.w	r4, r4, #1
 8009c52:	f1c4 0402 	rsb	r4, r4, #2
 8009c56:	4a63      	ldr	r2, [pc, #396]	@ (8009de4 <__ieee754_pow+0x284>)
 8009c58:	4297      	cmp	r7, r2
 8009c5a:	d1e3      	bne.n	8009c24 <__ieee754_pow+0xc4>
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	f280 846b 	bge.w	800a53a <__ieee754_pow+0x9da>
 8009c64:	4652      	mov	r2, sl
 8009c66:	465b      	mov	r3, fp
 8009c68:	2000      	movs	r0, #0
 8009c6a:	495e      	ldr	r1, [pc, #376]	@ (8009de4 <__ieee754_pow+0x284>)
 8009c6c:	f7f6 fd5e 	bl	800072c <__aeabi_ddiv>
 8009c70:	e794      	b.n	8009b9c <__ieee754_pow+0x3c>
 8009c72:	2400      	movs	r4, #0
 8009c74:	bb81      	cbnz	r1, 8009cd8 <__ieee754_pow+0x178>
 8009c76:	4a59      	ldr	r2, [pc, #356]	@ (8009ddc <__ieee754_pow+0x27c>)
 8009c78:	4297      	cmp	r7, r2
 8009c7a:	d1ec      	bne.n	8009c56 <__ieee754_pow+0xf6>
 8009c7c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8009c80:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009c84:	ea53 0309 	orrs.w	r3, r3, r9
 8009c88:	f000 844f 	beq.w	800a52a <__ieee754_pow+0x9ca>
 8009c8c:	4b56      	ldr	r3, [pc, #344]	@ (8009de8 <__ieee754_pow+0x288>)
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	d908      	bls.n	8009ca4 <__ieee754_pow+0x144>
 8009c92:	f1b8 0f00 	cmp.w	r8, #0
 8009c96:	f280 844c 	bge.w	800a532 <__ieee754_pow+0x9d2>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	e77d      	b.n	8009b9c <__ieee754_pow+0x3c>
 8009ca0:	2402      	movs	r4, #2
 8009ca2:	e7e7      	b.n	8009c74 <__ieee754_pow+0x114>
 8009ca4:	f1b8 0f00 	cmp.w	r8, #0
 8009ca8:	f04f 0000 	mov.w	r0, #0
 8009cac:	f04f 0100 	mov.w	r1, #0
 8009cb0:	f6bf af74 	bge.w	8009b9c <__ieee754_pow+0x3c>
 8009cb4:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009cb8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009cbc:	e76e      	b.n	8009b9c <__ieee754_pow+0x3c>
 8009cbe:	4a4b      	ldr	r2, [pc, #300]	@ (8009dec <__ieee754_pow+0x28c>)
 8009cc0:	4590      	cmp	r8, r2
 8009cc2:	d109      	bne.n	8009cd8 <__ieee754_pow+0x178>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	db07      	blt.n	8009cd8 <__ieee754_pow+0x178>
 8009cc8:	4650      	mov	r0, sl
 8009cca:	4659      	mov	r1, fp
 8009ccc:	b011      	add	sp, #68	@ 0x44
 8009cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd2:	f000 bd0f 	b.w	800a6f4 <__ieee754_sqrt>
 8009cd6:	2400      	movs	r4, #0
 8009cd8:	4650      	mov	r0, sl
 8009cda:	4659      	mov	r1, fp
 8009cdc:	9302      	str	r3, [sp, #8]
 8009cde:	f000 fc69 	bl	800a5b4 <fabs>
 8009ce2:	9b02      	ldr	r3, [sp, #8]
 8009ce4:	f1b9 0f00 	cmp.w	r9, #0
 8009ce8:	d127      	bne.n	8009d3a <__ieee754_pow+0x1da>
 8009cea:	4a3e      	ldr	r2, [pc, #248]	@ (8009de4 <__ieee754_pow+0x284>)
 8009cec:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8009cf0:	4594      	cmp	ip, r2
 8009cf2:	d000      	beq.n	8009cf6 <__ieee754_pow+0x196>
 8009cf4:	bb0d      	cbnz	r5, 8009d3a <__ieee754_pow+0x1da>
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	da05      	bge.n	8009d08 <__ieee754_pow+0x1a8>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	2000      	movs	r0, #0
 8009d02:	4938      	ldr	r1, [pc, #224]	@ (8009de4 <__ieee754_pow+0x284>)
 8009d04:	f7f6 fd12 	bl	800072c <__aeabi_ddiv>
 8009d08:	2e00      	cmp	r6, #0
 8009d0a:	f6bf af47 	bge.w	8009b9c <__ieee754_pow+0x3c>
 8009d0e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009d12:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009d16:	4325      	orrs	r5, r4
 8009d18:	d108      	bne.n	8009d2c <__ieee754_pow+0x1cc>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7f6 fa21 	bl	8000168 <__aeabi_dsub>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	e79f      	b.n	8009c6c <__ieee754_pow+0x10c>
 8009d2c:	2c01      	cmp	r4, #1
 8009d2e:	f47f af35 	bne.w	8009b9c <__ieee754_pow+0x3c>
 8009d32:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d36:	4619      	mov	r1, r3
 8009d38:	e730      	b.n	8009b9c <__ieee754_pow+0x3c>
 8009d3a:	0ff2      	lsrs	r2, r6, #31
 8009d3c:	3a01      	subs	r2, #1
 8009d3e:	ea52 0c04 	orrs.w	ip, r2, r4
 8009d42:	d102      	bne.n	8009d4a <__ieee754_pow+0x1ea>
 8009d44:	4652      	mov	r2, sl
 8009d46:	465b      	mov	r3, fp
 8009d48:	e7e9      	b.n	8009d1e <__ieee754_pow+0x1be>
 8009d4a:	f04f 0900 	mov.w	r9, #0
 8009d4e:	3c01      	subs	r4, #1
 8009d50:	4314      	orrs	r4, r2
 8009d52:	bf14      	ite	ne
 8009d54:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009de4 <__ieee754_pow+0x284>
 8009d58:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009df0 <__ieee754_pow+0x290>
 8009d5c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009d60:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009d64:	f240 8104 	bls.w	8009f70 <__ieee754_pow+0x410>
 8009d68:	4b22      	ldr	r3, [pc, #136]	@ (8009df4 <__ieee754_pow+0x294>)
 8009d6a:	429f      	cmp	r7, r3
 8009d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8009de8 <__ieee754_pow+0x288>)
 8009d6e:	d913      	bls.n	8009d98 <__ieee754_pow+0x238>
 8009d70:	429d      	cmp	r5, r3
 8009d72:	d808      	bhi.n	8009d86 <__ieee754_pow+0x226>
 8009d74:	f1b8 0f00 	cmp.w	r8, #0
 8009d78:	da08      	bge.n	8009d8c <__ieee754_pow+0x22c>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	b011      	add	sp, #68	@ 0x44
 8009d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d82:	f000 bcb1 	b.w	800a6e8 <__math_oflow>
 8009d86:	f1b8 0f00 	cmp.w	r8, #0
 8009d8a:	dcf6      	bgt.n	8009d7a <__ieee754_pow+0x21a>
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	b011      	add	sp, #68	@ 0x44
 8009d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	f000 bca3 	b.w	800a6de <__math_uflow>
 8009d98:	429d      	cmp	r5, r3
 8009d9a:	d20c      	bcs.n	8009db6 <__ieee754_pow+0x256>
 8009d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	2300      	movs	r3, #0
 8009da4:	f7f6 fe0a 	bl	80009bc <__aeabi_dcmplt>
 8009da8:	3800      	subs	r0, #0
 8009daa:	bf18      	it	ne
 8009dac:	2001      	movne	r0, #1
 8009dae:	f1b8 0f00 	cmp.w	r8, #0
 8009db2:	daec      	bge.n	8009d8e <__ieee754_pow+0x22e>
 8009db4:	e7e2      	b.n	8009d7c <__ieee754_pow+0x21c>
 8009db6:	4b0b      	ldr	r3, [pc, #44]	@ (8009de4 <__ieee754_pow+0x284>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	429d      	cmp	r5, r3
 8009dbc:	d91c      	bls.n	8009df8 <__ieee754_pow+0x298>
 8009dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f7f6 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8009dc8:	3800      	subs	r0, #0
 8009dca:	bf18      	it	ne
 8009dcc:	2001      	movne	r0, #1
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	dcd3      	bgt.n	8009d7c <__ieee754_pow+0x21c>
 8009dd4:	e7db      	b.n	8009d8e <__ieee754_pow+0x22e>
 8009dd6:	bf00      	nop
 8009dd8:	fff00000 	.word	0xfff00000
 8009ddc:	7ff00000 	.word	0x7ff00000
 8009de0:	433fffff 	.word	0x433fffff
 8009de4:	3ff00000 	.word	0x3ff00000
 8009de8:	3fefffff 	.word	0x3fefffff
 8009dec:	3fe00000 	.word	0x3fe00000
 8009df0:	bff00000 	.word	0xbff00000
 8009df4:	43f00000 	.word	0x43f00000
 8009df8:	4b59      	ldr	r3, [pc, #356]	@ (8009f60 <__ieee754_pow+0x400>)
 8009dfa:	f7f6 f9b5 	bl	8000168 <__aeabi_dsub>
 8009dfe:	a350      	add	r3, pc, #320	@ (adr r3, 8009f40 <__ieee754_pow+0x3e0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	f7f6 fb66 	bl	80004d8 <__aeabi_dmul>
 8009e0c:	a34e      	add	r3, pc, #312	@ (adr r3, 8009f48 <__ieee754_pow+0x3e8>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fb5d 	bl	80004d8 <__aeabi_dmul>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4682      	mov	sl, r0
 8009e22:	468b      	mov	fp, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	4b4e      	ldr	r3, [pc, #312]	@ (8009f64 <__ieee754_pow+0x404>)
 8009e2a:	f7f6 fb55 	bl	80004d8 <__aeabi_dmul>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	a147      	add	r1, pc, #284	@ (adr r1, 8009f50 <__ieee754_pow+0x3f0>)
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	f7f6 f996 	bl	8000168 <__aeabi_dsub>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	462b      	mov	r3, r5
 8009e40:	f7f6 fb4a 	bl	80004d8 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4947      	ldr	r1, [pc, #284]	@ (8009f68 <__ieee754_pow+0x408>)
 8009e4c:	f7f6 f98c 	bl	8000168 <__aeabi_dsub>
 8009e50:	4622      	mov	r2, r4
 8009e52:	4680      	mov	r8, r0
 8009e54:	4689      	mov	r9, r1
 8009e56:	462b      	mov	r3, r5
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fb3c 	bl	80004d8 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4640      	mov	r0, r8
 8009e66:	4649      	mov	r1, r9
 8009e68:	f7f6 fb36 	bl	80004d8 <__aeabi_dmul>
 8009e6c:	a33a      	add	r3, pc, #232	@ (adr r3, 8009f58 <__ieee754_pow+0x3f8>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 fb31 	bl	80004d8 <__aeabi_dmul>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	f7f6 f973 	bl	8000168 <__aeabi_dsub>
 8009e82:	2400      	movs	r4, #0
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4680      	mov	r8, r0
 8009e8a:	4689      	mov	r9, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 f96c 	bl	800016c <__adddf3>
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	4620      	mov	r0, r4
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	f7f6 f964 	bl	8000168 <__aeabi_dsub>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 f95e 	bl	8000168 <__aeabi_dsub>
 8009eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9304      	str	r3, [sp, #16]
 8009eb8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ec4:	465b      	mov	r3, fp
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	f7f6 f94e 	bl	8000168 <__aeabi_dsub>
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	f7f6 fb02 	bl	80004d8 <__aeabi_dmul>
 8009ed4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4689      	mov	r9, r1
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fafa 	bl	80004d8 <__aeabi_dmul>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 f93e 	bl	800016c <__adddf3>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	4652      	mov	r2, sl
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 faec 	bl	80004d8 <__aeabi_dmul>
 8009f00:	460b      	mov	r3, r1
 8009f02:	4602      	mov	r2, r0
 8009f04:	4680      	mov	r8, r0
 8009f06:	4689      	mov	r9, r1
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 f92e 	bl	800016c <__adddf3>
 8009f10:	4b16      	ldr	r3, [pc, #88]	@ (8009f6c <__ieee754_pow+0x40c>)
 8009f12:	4604      	mov	r4, r0
 8009f14:	4299      	cmp	r1, r3
 8009f16:	460d      	mov	r5, r1
 8009f18:	468b      	mov	fp, r1
 8009f1a:	f340 81fd 	ble.w	800a318 <__ieee754_pow+0x7b8>
 8009f1e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009f22:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009f26:	4303      	orrs	r3, r0
 8009f28:	f000 81dc 	beq.w	800a2e4 <__ieee754_pow+0x784>
 8009f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	f7f6 fd42 	bl	80009bc <__aeabi_dcmplt>
 8009f38:	3800      	subs	r0, #0
 8009f3a:	bf18      	it	ne
 8009f3c:	2001      	movne	r0, #1
 8009f3e:	e71d      	b.n	8009d7c <__ieee754_pow+0x21c>
 8009f40:	60000000 	.word	0x60000000
 8009f44:	3ff71547 	.word	0x3ff71547
 8009f48:	f85ddf44 	.word	0xf85ddf44
 8009f4c:	3e54ae0b 	.word	0x3e54ae0b
 8009f50:	55555555 	.word	0x55555555
 8009f54:	3fd55555 	.word	0x3fd55555
 8009f58:	652b82fe 	.word	0x652b82fe
 8009f5c:	3ff71547 	.word	0x3ff71547
 8009f60:	3ff00000 	.word	0x3ff00000
 8009f64:	3fd00000 	.word	0x3fd00000
 8009f68:	3fe00000 	.word	0x3fe00000
 8009f6c:	408fffff 	.word	0x408fffff
 8009f70:	4ad3      	ldr	r2, [pc, #844]	@ (800a2c0 <__ieee754_pow+0x760>)
 8009f72:	4032      	ands	r2, r6
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f040 817a 	bne.w	800a26e <__ieee754_pow+0x70e>
 8009f7a:	4bd2      	ldr	r3, [pc, #840]	@ (800a2c4 <__ieee754_pow+0x764>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f7f6 faab 	bl	80004d8 <__aeabi_dmul>
 8009f82:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009f86:	460b      	mov	r3, r1
 8009f88:	151a      	asrs	r2, r3, #20
 8009f8a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009f8e:	4422      	add	r2, r4
 8009f90:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f92:	4acd      	ldr	r2, [pc, #820]	@ (800a2c8 <__ieee754_pow+0x768>)
 8009f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f98:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fa2:	dd08      	ble.n	8009fb6 <__ieee754_pow+0x456>
 8009fa4:	4ac9      	ldr	r2, [pc, #804]	@ (800a2cc <__ieee754_pow+0x76c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f340 8163 	ble.w	800a272 <__ieee754_pow+0x712>
 8009fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	00f3      	lsls	r3, r6, #3
 8009fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fbc:	4bc4      	ldr	r3, [pc, #784]	@ (800a2d0 <__ieee754_pow+0x770>)
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009fc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009fce:	4623      	mov	r3, r4
 8009fd0:	4682      	mov	sl, r0
 8009fd2:	f7f6 f8c9 	bl	8000168 <__aeabi_dsub>
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	462b      	mov	r3, r5
 8009fda:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009fde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fe2:	f7f6 f8c3 	bl	800016c <__adddf3>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	2000      	movs	r0, #0
 8009fec:	49b9      	ldr	r1, [pc, #740]	@ (800a2d4 <__ieee754_pow+0x774>)
 8009fee:	f7f6 fb9d 	bl	800072c <__aeabi_ddiv>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ffe:	f7f6 fa6b 	bl	80004d8 <__aeabi_dmul>
 800a002:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a006:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a00a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a00e:	2300      	movs	r3, #0
 800a010:	2200      	movs	r2, #0
 800a012:	46ab      	mov	fp, r5
 800a014:	106d      	asrs	r5, r5, #1
 800a016:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a020:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a024:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	4614      	mov	r4, r2
 800a02e:	461d      	mov	r5, r3
 800a030:	f7f6 fa52 	bl	80004d8 <__aeabi_dmul>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a03c:	f7f6 f894 	bl	8000168 <__aeabi_dsub>
 800a040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	4620      	mov	r0, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 f88c 	bl	8000168 <__aeabi_dsub>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4650      	mov	r0, sl
 800a056:	4659      	mov	r1, fp
 800a058:	f7f6 f886 	bl	8000168 <__aeabi_dsub>
 800a05c:	4642      	mov	r2, r8
 800a05e:	464b      	mov	r3, r9
 800a060:	f7f6 fa3a 	bl	80004d8 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 f87c 	bl	8000168 <__aeabi_dsub>
 800a070:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a074:	f7f6 fa30 	bl	80004d8 <__aeabi_dmul>
 800a078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a07c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	f7f6 fa28 	bl	80004d8 <__aeabi_dmul>
 800a088:	a37b      	add	r3, pc, #492	@ (adr r3, 800a278 <__ieee754_pow+0x718>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	f7f6 fa21 	bl	80004d8 <__aeabi_dmul>
 800a096:	a37a      	add	r3, pc, #488	@ (adr r3, 800a280 <__ieee754_pow+0x720>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 f866 	bl	800016c <__adddf3>
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	f7f6 fa18 	bl	80004d8 <__aeabi_dmul>
 800a0a8:	a377      	add	r3, pc, #476	@ (adr r3, 800a288 <__ieee754_pow+0x728>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f85d 	bl	800016c <__adddf3>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 fa0f 	bl	80004d8 <__aeabi_dmul>
 800a0ba:	a375      	add	r3, pc, #468	@ (adr r3, 800a290 <__ieee754_pow+0x730>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 f854 	bl	800016c <__adddf3>
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	f7f6 fa06 	bl	80004d8 <__aeabi_dmul>
 800a0cc:	a372      	add	r3, pc, #456	@ (adr r3, 800a298 <__ieee754_pow+0x738>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 f84b 	bl	800016c <__adddf3>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f7f6 f9fd 	bl	80004d8 <__aeabi_dmul>
 800a0de:	a370      	add	r3, pc, #448	@ (adr r3, 800a2a0 <__ieee754_pow+0x740>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f842 	bl	800016c <__adddf3>
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	f7f6 f9f0 	bl	80004d8 <__aeabi_dmul>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4639      	mov	r1, r7
 800a100:	f7f6 f9ea 	bl	80004d8 <__aeabi_dmul>
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10c:	4642      	mov	r2, r8
 800a10e:	464b      	mov	r3, r9
 800a110:	f7f6 f82c 	bl	800016c <__adddf3>
 800a114:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a118:	f7f6 f9de 	bl	80004d8 <__aeabi_dmul>
 800a11c:	4622      	mov	r2, r4
 800a11e:	462b      	mov	r3, r5
 800a120:	f7f6 f824 	bl	800016c <__adddf3>
 800a124:	4642      	mov	r2, r8
 800a126:	4682      	mov	sl, r0
 800a128:	468b      	mov	fp, r1
 800a12a:	464b      	mov	r3, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 f9d2 	bl	80004d8 <__aeabi_dmul>
 800a134:	2200      	movs	r2, #0
 800a136:	4b68      	ldr	r3, [pc, #416]	@ (800a2d8 <__ieee754_pow+0x778>)
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	f7f6 f816 	bl	800016c <__adddf3>
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	f7f6 f812 	bl	800016c <__adddf3>
 800a148:	2400      	movs	r4, #0
 800a14a:	460d      	mov	r5, r1
 800a14c:	4622      	mov	r2, r4
 800a14e:	460b      	mov	r3, r1
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 f9c0 	bl	80004d8 <__aeabi_dmul>
 800a158:	2200      	movs	r2, #0
 800a15a:	4680      	mov	r8, r0
 800a15c:	4689      	mov	r9, r1
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	4b5d      	ldr	r3, [pc, #372]	@ (800a2d8 <__ieee754_pow+0x778>)
 800a164:	f7f6 f800 	bl	8000168 <__aeabi_dsub>
 800a168:	4632      	mov	r2, r6
 800a16a:	463b      	mov	r3, r7
 800a16c:	f7f5 fffc 	bl	8000168 <__aeabi_dsub>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4650      	mov	r0, sl
 800a176:	4659      	mov	r1, fp
 800a178:	f7f5 fff6 	bl	8000168 <__aeabi_dsub>
 800a17c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a180:	f7f6 f9aa 	bl	80004d8 <__aeabi_dmul>
 800a184:	4622      	mov	r2, r4
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a18e:	462b      	mov	r3, r5
 800a190:	f7f6 f9a2 	bl	80004d8 <__aeabi_dmul>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f5 ffe6 	bl	800016c <__adddf3>
 800a1a0:	2400      	movs	r4, #0
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460f      	mov	r7, r1
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f5 ffdd 	bl	800016c <__adddf3>
 800a1b2:	a33d      	add	r3, pc, #244	@ (adr r3, 800a2a8 <__ieee754_pow+0x748>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	f7f6 f98c 	bl	80004d8 <__aeabi_dmul>
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f7f5 ffcc 	bl	8000168 <__aeabi_dsub>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f7f5 ffc6 	bl	8000168 <__aeabi_dsub>
 800a1dc:	a334      	add	r3, pc, #208	@ (adr r3, 800a2b0 <__ieee754_pow+0x750>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	a334      	add	r3, pc, #208	@ (adr r3, 800a2b8 <__ieee754_pow+0x758>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	f7f6 f970 	bl	80004d8 <__aeabi_dmul>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f5 ffb4 	bl	800016c <__adddf3>
 800a204:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a206:	4b35      	ldr	r3, [pc, #212]	@ (800a2dc <__ieee754_pow+0x77c>)
 800a208:	2400      	movs	r4, #0
 800a20a:	4413      	add	r3, r2
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f5 ffac 	bl	800016c <__adddf3>
 800a214:	4682      	mov	sl, r0
 800a216:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a218:	468b      	mov	fp, r1
 800a21a:	f7f6 f8f3 	bl	8000404 <__aeabi_i2d>
 800a21e:	4606      	mov	r6, r0
 800a220:	460f      	mov	r7, r1
 800a222:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a224:	4b2e      	ldr	r3, [pc, #184]	@ (800a2e0 <__ieee754_pow+0x780>)
 800a226:	4413      	add	r3, r2
 800a228:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a22c:	4652      	mov	r2, sl
 800a22e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a232:	465b      	mov	r3, fp
 800a234:	f7f5 ff9a 	bl	800016c <__adddf3>
 800a238:	4642      	mov	r2, r8
 800a23a:	464b      	mov	r3, r9
 800a23c:	f7f5 ff96 	bl	800016c <__adddf3>
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	f7f5 ff92 	bl	800016c <__adddf3>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	4620      	mov	r0, r4
 800a24e:	460d      	mov	r5, r1
 800a250:	f7f5 ff8a 	bl	8000168 <__aeabi_dsub>
 800a254:	4642      	mov	r2, r8
 800a256:	464b      	mov	r3, r9
 800a258:	f7f5 ff86 	bl	8000168 <__aeabi_dsub>
 800a25c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a260:	f7f5 ff82 	bl	8000168 <__aeabi_dsub>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4650      	mov	r0, sl
 800a26a:	4659      	mov	r1, fp
 800a26c:	e61c      	b.n	8009ea8 <__ieee754_pow+0x348>
 800a26e:	2400      	movs	r4, #0
 800a270:	e68a      	b.n	8009f88 <__ieee754_pow+0x428>
 800a272:	2601      	movs	r6, #1
 800a274:	e6a0      	b.n	8009fb8 <__ieee754_pow+0x458>
 800a276:	bf00      	nop
 800a278:	4a454eef 	.word	0x4a454eef
 800a27c:	3fca7e28 	.word	0x3fca7e28
 800a280:	93c9db65 	.word	0x93c9db65
 800a284:	3fcd864a 	.word	0x3fcd864a
 800a288:	a91d4101 	.word	0xa91d4101
 800a28c:	3fd17460 	.word	0x3fd17460
 800a290:	518f264d 	.word	0x518f264d
 800a294:	3fd55555 	.word	0x3fd55555
 800a298:	db6fabff 	.word	0xdb6fabff
 800a29c:	3fdb6db6 	.word	0x3fdb6db6
 800a2a0:	33333303 	.word	0x33333303
 800a2a4:	3fe33333 	.word	0x3fe33333
 800a2a8:	e0000000 	.word	0xe0000000
 800a2ac:	3feec709 	.word	0x3feec709
 800a2b0:	dc3a03fd 	.word	0xdc3a03fd
 800a2b4:	3feec709 	.word	0x3feec709
 800a2b8:	145b01f5 	.word	0x145b01f5
 800a2bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a2c0:	7ff00000 	.word	0x7ff00000
 800a2c4:	43400000 	.word	0x43400000
 800a2c8:	0003988e 	.word	0x0003988e
 800a2cc:	000bb679 	.word	0x000bb679
 800a2d0:	0800c018 	.word	0x0800c018
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	40080000 	.word	0x40080000
 800a2dc:	0800bff8 	.word	0x0800bff8
 800a2e0:	0800c008 	.word	0x0800c008
 800a2e4:	a39a      	add	r3, pc, #616	@ (adr r3, 800a550 <__ieee754_pow+0x9f0>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7f5 ff3d 	bl	800016c <__adddf3>
 800a2f2:	4642      	mov	r2, r8
 800a2f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7f5 ff33 	bl	8000168 <__aeabi_dsub>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a30a:	f7f6 fb75 	bl	80009f8 <__aeabi_dcmpgt>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f47f ae0c 	bne.w	8009f2c <__ieee754_pow+0x3cc>
 800a314:	4ba0      	ldr	r3, [pc, #640]	@ (800a598 <__ieee754_pow+0xa38>)
 800a316:	e022      	b.n	800a35e <__ieee754_pow+0x7fe>
 800a318:	4ca0      	ldr	r4, [pc, #640]	@ (800a59c <__ieee754_pow+0xa3c>)
 800a31a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a31e:	42a3      	cmp	r3, r4
 800a320:	d919      	bls.n	800a356 <__ieee754_pow+0x7f6>
 800a322:	4b9f      	ldr	r3, [pc, #636]	@ (800a5a0 <__ieee754_pow+0xa40>)
 800a324:	440b      	add	r3, r1
 800a326:	4303      	orrs	r3, r0
 800a328:	d009      	beq.n	800a33e <__ieee754_pow+0x7de>
 800a32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	2300      	movs	r3, #0
 800a332:	f7f6 fb43 	bl	80009bc <__aeabi_dcmplt>
 800a336:	3800      	subs	r0, #0
 800a338:	bf18      	it	ne
 800a33a:	2001      	movne	r0, #1
 800a33c:	e527      	b.n	8009d8e <__ieee754_pow+0x22e>
 800a33e:	4642      	mov	r2, r8
 800a340:	464b      	mov	r3, r9
 800a342:	f7f5 ff11 	bl	8000168 <__aeabi_dsub>
 800a346:	4632      	mov	r2, r6
 800a348:	463b      	mov	r3, r7
 800a34a:	f7f6 fb4b 	bl	80009e4 <__aeabi_dcmpge>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d1eb      	bne.n	800a32a <__ieee754_pow+0x7ca>
 800a352:	4b94      	ldr	r3, [pc, #592]	@ (800a5a4 <__ieee754_pow+0xa44>)
 800a354:	e003      	b.n	800a35e <__ieee754_pow+0x7fe>
 800a356:	4a94      	ldr	r2, [pc, #592]	@ (800a5a8 <__ieee754_pow+0xa48>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	f240 80e1 	bls.w	800a520 <__ieee754_pow+0x9c0>
 800a35e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a362:	151b      	asrs	r3, r3, #20
 800a364:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a368:	fa4a fa03 	asr.w	sl, sl, r3
 800a36c:	44da      	add	sl, fp
 800a36e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a372:	488e      	ldr	r0, [pc, #568]	@ (800a5ac <__ieee754_pow+0xa4c>)
 800a374:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a378:	4108      	asrs	r0, r1
 800a37a:	ea00 030a 	and.w	r3, r0, sl
 800a37e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a382:	f1c1 0114 	rsb	r1, r1, #20
 800a386:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a38a:	4640      	mov	r0, r8
 800a38c:	fa4a fa01 	asr.w	sl, sl, r1
 800a390:	f1bb 0f00 	cmp.w	fp, #0
 800a394:	4649      	mov	r1, r9
 800a396:	f04f 0200 	mov.w	r2, #0
 800a39a:	bfb8      	it	lt
 800a39c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3a0:	f7f5 fee2 	bl	8000168 <__aeabi_dsub>
 800a3a4:	4680      	mov	r8, r0
 800a3a6:	4689      	mov	r9, r1
 800a3a8:	2400      	movs	r4, #0
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f5 fedb 	bl	800016c <__adddf3>
 800a3b6:	a368      	add	r3, pc, #416	@ (adr r3, 800a558 <__ieee754_pow+0x9f8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	4620      	mov	r0, r4
 800a3be:	460d      	mov	r5, r1
 800a3c0:	f7f6 f88a 	bl	80004d8 <__aeabi_dmul>
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f5 feca 	bl	8000168 <__aeabi_dsub>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 fec4 	bl	8000168 <__aeabi_dsub>
 800a3e0:	a35f      	add	r3, pc, #380	@ (adr r3, 800a560 <__ieee754_pow+0xa00>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f7f6 f877 	bl	80004d8 <__aeabi_dmul>
 800a3ea:	a35f      	add	r3, pc, #380	@ (adr r3, 800a568 <__ieee754_pow+0xa08>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f6 f86e 	bl	80004d8 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4640      	mov	r0, r8
 800a402:	4649      	mov	r1, r9
 800a404:	f7f5 feb2 	bl	800016c <__adddf3>
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a414:	f7f5 feaa 	bl	800016c <__adddf3>
 800a418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	f7f5 fea2 	bl	8000168 <__aeabi_dsub>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4620      	mov	r0, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	f7f5 fe9c 	bl	8000168 <__aeabi_dsub>
 800a430:	4642      	mov	r2, r8
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	464b      	mov	r3, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7f6 f84c 	bl	80004d8 <__aeabi_dmul>
 800a440:	a34b      	add	r3, pc, #300	@ (adr r3, 800a570 <__ieee754_pow+0xa10>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	4604      	mov	r4, r0
 800a448:	460d      	mov	r5, r1
 800a44a:	f7f6 f845 	bl	80004d8 <__aeabi_dmul>
 800a44e:	a34a      	add	r3, pc, #296	@ (adr r3, 800a578 <__ieee754_pow+0xa18>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f5 fe88 	bl	8000168 <__aeabi_dsub>
 800a458:	4622      	mov	r2, r4
 800a45a:	462b      	mov	r3, r5
 800a45c:	f7f6 f83c 	bl	80004d8 <__aeabi_dmul>
 800a460:	a347      	add	r3, pc, #284	@ (adr r3, 800a580 <__ieee754_pow+0xa20>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f5 fe81 	bl	800016c <__adddf3>
 800a46a:	4622      	mov	r2, r4
 800a46c:	462b      	mov	r3, r5
 800a46e:	f7f6 f833 	bl	80004d8 <__aeabi_dmul>
 800a472:	a345      	add	r3, pc, #276	@ (adr r3, 800a588 <__ieee754_pow+0xa28>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f7f5 fe76 	bl	8000168 <__aeabi_dsub>
 800a47c:	4622      	mov	r2, r4
 800a47e:	462b      	mov	r3, r5
 800a480:	f7f6 f82a 	bl	80004d8 <__aeabi_dmul>
 800a484:	a342      	add	r3, pc, #264	@ (adr r3, 800a590 <__ieee754_pow+0xa30>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f7f5 fe6f 	bl	800016c <__adddf3>
 800a48e:	4622      	mov	r2, r4
 800a490:	462b      	mov	r3, r5
 800a492:	f7f6 f821 	bl	80004d8 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	f7f5 fe63 	bl	8000168 <__aeabi_dsub>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	f7f6 f813 	bl	80004d8 <__aeabi_dmul>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a4b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fe52 	bl	8000168 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4cc:	f7f6 f92e 	bl	800072c <__aeabi_ddiv>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f5 fffc 	bl	80004d8 <__aeabi_dmul>
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	f7f5 fe42 	bl	800016c <__adddf3>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	f7f5 fe3a 	bl	8000168 <__aeabi_dsub>
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	f7f5 fe36 	bl	8000168 <__aeabi_dsub>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	2000      	movs	r0, #0
 800a502:	492b      	ldr	r1, [pc, #172]	@ (800a5b0 <__ieee754_pow+0xa50>)
 800a504:	f7f5 fe30 	bl	8000168 <__aeabi_dsub>
 800a508:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a50c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a510:	da09      	bge.n	800a526 <__ieee754_pow+0x9c6>
 800a512:	4652      	mov	r2, sl
 800a514:	f000 f854 	bl	800a5c0 <scalbn>
 800a518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a51c:	f7ff bb89 	b.w	8009c32 <__ieee754_pow+0xd2>
 800a520:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a524:	e740      	b.n	800a3a8 <__ieee754_pow+0x848>
 800a526:	4621      	mov	r1, r4
 800a528:	e7f6      	b.n	800a518 <__ieee754_pow+0x9b8>
 800a52a:	2000      	movs	r0, #0
 800a52c:	4920      	ldr	r1, [pc, #128]	@ (800a5b0 <__ieee754_pow+0xa50>)
 800a52e:	f7ff bb35 	b.w	8009b9c <__ieee754_pow+0x3c>
 800a532:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a536:	f7ff bb31 	b.w	8009b9c <__ieee754_pow+0x3c>
 800a53a:	4650      	mov	r0, sl
 800a53c:	4659      	mov	r1, fp
 800a53e:	f7ff bb2d 	b.w	8009b9c <__ieee754_pow+0x3c>
 800a542:	460c      	mov	r4, r1
 800a544:	f7ff bb87 	b.w	8009c56 <__ieee754_pow+0xf6>
 800a548:	2400      	movs	r4, #0
 800a54a:	f7ff bb69 	b.w	8009c20 <__ieee754_pow+0xc0>
 800a54e:	bf00      	nop
 800a550:	652b82fe 	.word	0x652b82fe
 800a554:	3c971547 	.word	0x3c971547
 800a558:	00000000 	.word	0x00000000
 800a55c:	3fe62e43 	.word	0x3fe62e43
 800a560:	fefa39ef 	.word	0xfefa39ef
 800a564:	3fe62e42 	.word	0x3fe62e42
 800a568:	0ca86c39 	.word	0x0ca86c39
 800a56c:	be205c61 	.word	0xbe205c61
 800a570:	72bea4d0 	.word	0x72bea4d0
 800a574:	3e663769 	.word	0x3e663769
 800a578:	c5d26bf1 	.word	0xc5d26bf1
 800a57c:	3ebbbd41 	.word	0x3ebbbd41
 800a580:	af25de2c 	.word	0xaf25de2c
 800a584:	3f11566a 	.word	0x3f11566a
 800a588:	16bebd93 	.word	0x16bebd93
 800a58c:	3f66c16c 	.word	0x3f66c16c
 800a590:	5555553e 	.word	0x5555553e
 800a594:	3fc55555 	.word	0x3fc55555
 800a598:	40900000 	.word	0x40900000
 800a59c:	4090cbff 	.word	0x4090cbff
 800a5a0:	3f6f3400 	.word	0x3f6f3400
 800a5a4:	4090cc00 	.word	0x4090cc00
 800a5a8:	3fe00000 	.word	0x3fe00000
 800a5ac:	fff00000 	.word	0xfff00000
 800a5b0:	3ff00000 	.word	0x3ff00000

0800a5b4 <fabs>:
 800a5b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4770      	bx	lr
 800a5bc:	0000      	movs	r0, r0
	...

0800a5c0 <scalbn>:
 800a5c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5ca:	4683      	mov	fp, r0
 800a5cc:	468c      	mov	ip, r1
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	b982      	cbnz	r2, 800a5f4 <scalbn+0x34>
 800a5d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5d6:	4303      	orrs	r3, r0
 800a5d8:	d035      	beq.n	800a646 <scalbn+0x86>
 800a5da:	4b2d      	ldr	r3, [pc, #180]	@ (800a690 <scalbn+0xd0>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f7f5 ff7b 	bl	80004d8 <__aeabi_dmul>
 800a5e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a694 <scalbn+0xd4>)
 800a5e4:	4683      	mov	fp, r0
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	468c      	mov	ip, r1
 800a5ea:	da0d      	bge.n	800a608 <scalbn+0x48>
 800a5ec:	a324      	add	r3, pc, #144	@ (adr r3, 800a680 <scalbn+0xc0>)
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	e019      	b.n	800a628 <scalbn+0x68>
 800a5f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a5f8:	42ba      	cmp	r2, r7
 800a5fa:	d109      	bne.n	800a610 <scalbn+0x50>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f7f5 fdb5 	bl	800016c <__adddf3>
 800a602:	4683      	mov	fp, r0
 800a604:	468c      	mov	ip, r1
 800a606:	e01e      	b.n	800a646 <scalbn+0x86>
 800a608:	460b      	mov	r3, r1
 800a60a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a60e:	3a36      	subs	r2, #54	@ 0x36
 800a610:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a614:	428e      	cmp	r6, r1
 800a616:	dd0a      	ble.n	800a62e <scalbn+0x6e>
 800a618:	a31b      	add	r3, pc, #108	@ (adr r3, 800a688 <scalbn+0xc8>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	4665      	mov	r5, ip
 800a620:	f363 051e 	bfi	r5, r3, #0, #31
 800a624:	4629      	mov	r1, r5
 800a626:	481c      	ldr	r0, [pc, #112]	@ (800a698 <scalbn+0xd8>)
 800a628:	f7f5 ff56 	bl	80004d8 <__aeabi_dmul>
 800a62c:	e7e9      	b.n	800a602 <scalbn+0x42>
 800a62e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a632:	4432      	add	r2, r6
 800a634:	428a      	cmp	r2, r1
 800a636:	dcef      	bgt.n	800a618 <scalbn+0x58>
 800a638:	2a00      	cmp	r2, #0
 800a63a:	dd08      	ble.n	800a64e <scalbn+0x8e>
 800a63c:	f36f 531e 	bfc	r3, #20, #11
 800a640:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a644:	46ac      	mov	ip, r5
 800a646:	4658      	mov	r0, fp
 800a648:	4661      	mov	r1, ip
 800a64a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a64e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a652:	da09      	bge.n	800a668 <scalbn+0xa8>
 800a654:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a658:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a65c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a660:	480e      	ldr	r0, [pc, #56]	@ (800a69c <scalbn+0xdc>)
 800a662:	f041 011f 	orr.w	r1, r1, #31
 800a666:	e7c1      	b.n	800a5ec <scalbn+0x2c>
 800a668:	3236      	adds	r2, #54	@ 0x36
 800a66a:	f36f 531e 	bfc	r3, #20, #11
 800a66e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a672:	4658      	mov	r0, fp
 800a674:	4629      	mov	r1, r5
 800a676:	2200      	movs	r2, #0
 800a678:	4b09      	ldr	r3, [pc, #36]	@ (800a6a0 <scalbn+0xe0>)
 800a67a:	e7d5      	b.n	800a628 <scalbn+0x68>
 800a67c:	f3af 8000 	nop.w
 800a680:	c2f8f359 	.word	0xc2f8f359
 800a684:	01a56e1f 	.word	0x01a56e1f
 800a688:	8800759c 	.word	0x8800759c
 800a68c:	7e37e43c 	.word	0x7e37e43c
 800a690:	43500000 	.word	0x43500000
 800a694:	ffff3cb0 	.word	0xffff3cb0
 800a698:	8800759c 	.word	0x8800759c
 800a69c:	c2f8f359 	.word	0xc2f8f359
 800a6a0:	3c900000 	.word	0x3c900000

0800a6a4 <with_errno>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	4616      	mov	r6, r2
 800a6ac:	f7fe fcdc 	bl	8009068 <__errno>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	6006      	str	r6, [r0, #0]
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}

0800a6b8 <xflow>:
 800a6b8:	b513      	push	{r0, r1, r4, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4610      	mov	r0, r2
 800a6c0:	b10c      	cbz	r4, 800a6c6 <xflow+0xe>
 800a6c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a6c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	2222      	movs	r2, #34	@ 0x22
 800a6d4:	b002      	add	sp, #8
 800a6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6da:	f7ff bfe3 	b.w	800a6a4 <with_errno>

0800a6de <__math_uflow>:
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a6e4:	f7ff bfe8 	b.w	800a6b8 <xflow>

0800a6e8 <__math_oflow>:
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a6ee:	f7ff bfe3 	b.w	800a6b8 <xflow>
	...

0800a6f4 <__ieee754_sqrt>:
 800a6f4:	4a65      	ldr	r2, [pc, #404]	@ (800a88c <__ieee754_sqrt+0x198>)
 800a6f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fa:	438a      	bics	r2, r1
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	460f      	mov	r7, r1
 800a700:	460b      	mov	r3, r1
 800a702:	4604      	mov	r4, r0
 800a704:	d10e      	bne.n	800a724 <__ieee754_sqrt+0x30>
 800a706:	4602      	mov	r2, r0
 800a708:	f7f5 fee6 	bl	80004d8 <__aeabi_dmul>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f5 fd2a 	bl	800016c <__adddf3>
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	2900      	cmp	r1, #0
 800a726:	dc0c      	bgt.n	800a742 <__ieee754_sqrt+0x4e>
 800a728:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a72c:	4302      	orrs	r2, r0
 800a72e:	d0f5      	beq.n	800a71c <__ieee754_sqrt+0x28>
 800a730:	b189      	cbz	r1, 800a756 <__ieee754_sqrt+0x62>
 800a732:	4602      	mov	r2, r0
 800a734:	f7f5 fd18 	bl	8000168 <__aeabi_dsub>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	f7f5 fff6 	bl	800072c <__aeabi_ddiv>
 800a740:	e7ea      	b.n	800a718 <__ieee754_sqrt+0x24>
 800a742:	150a      	asrs	r2, r1, #20
 800a744:	d115      	bne.n	800a772 <__ieee754_sqrt+0x7e>
 800a746:	2100      	movs	r1, #0
 800a748:	e009      	b.n	800a75e <__ieee754_sqrt+0x6a>
 800a74a:	0ae3      	lsrs	r3, r4, #11
 800a74c:	3a15      	subs	r2, #21
 800a74e:	0564      	lsls	r4, r4, #21
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0fa      	beq.n	800a74a <__ieee754_sqrt+0x56>
 800a754:	e7f7      	b.n	800a746 <__ieee754_sqrt+0x52>
 800a756:	460a      	mov	r2, r1
 800a758:	e7fa      	b.n	800a750 <__ieee754_sqrt+0x5c>
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	3101      	adds	r1, #1
 800a75e:	02d8      	lsls	r0, r3, #11
 800a760:	d5fb      	bpl.n	800a75a <__ieee754_sqrt+0x66>
 800a762:	1e48      	subs	r0, r1, #1
 800a764:	1a12      	subs	r2, r2, r0
 800a766:	f1c1 0020 	rsb	r0, r1, #32
 800a76a:	fa24 f000 	lsr.w	r0, r4, r0
 800a76e:	4303      	orrs	r3, r0
 800a770:	408c      	lsls	r4, r1
 800a772:	2700      	movs	r7, #0
 800a774:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800a778:	2116      	movs	r1, #22
 800a77a:	07d2      	lsls	r2, r2, #31
 800a77c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a780:	463a      	mov	r2, r7
 800a782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a78a:	bf5c      	itt	pl
 800a78c:	005b      	lslpl	r3, r3, #1
 800a78e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a796:	bf58      	it	pl
 800a798:	0064      	lslpl	r4, r4, #1
 800a79a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a79e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7a2:	0064      	lsls	r4, r4, #1
 800a7a4:	1815      	adds	r5, r2, r0
 800a7a6:	429d      	cmp	r5, r3
 800a7a8:	bfde      	ittt	le
 800a7aa:	182a      	addle	r2, r5, r0
 800a7ac:	1b5b      	suble	r3, r3, r5
 800a7ae:	183f      	addle	r7, r7, r0
 800a7b0:	0fe5      	lsrs	r5, r4, #31
 800a7b2:	3901      	subs	r1, #1
 800a7b4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a7b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a7bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a7c0:	d1f0      	bne.n	800a7a4 <__ieee754_sqrt+0xb0>
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	2620      	movs	r6, #32
 800a7c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	eb00 0c01 	add.w	ip, r0, r1
 800a7d0:	dc02      	bgt.n	800a7d8 <__ieee754_sqrt+0xe4>
 800a7d2:	d113      	bne.n	800a7fc <__ieee754_sqrt+0x108>
 800a7d4:	45a4      	cmp	ip, r4
 800a7d6:	d811      	bhi.n	800a7fc <__ieee754_sqrt+0x108>
 800a7d8:	f1bc 0f00 	cmp.w	ip, #0
 800a7dc:	eb0c 0100 	add.w	r1, ip, r0
 800a7e0:	da3e      	bge.n	800a860 <__ieee754_sqrt+0x16c>
 800a7e2:	2900      	cmp	r1, #0
 800a7e4:	db3c      	blt.n	800a860 <__ieee754_sqrt+0x16c>
 800a7e6:	f102 0e01 	add.w	lr, r2, #1
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	4672      	mov	r2, lr
 800a7ee:	45a4      	cmp	ip, r4
 800a7f0:	bf88      	it	hi
 800a7f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a7f6:	eba4 040c 	sub.w	r4, r4, ip
 800a7fa:	4405      	add	r5, r0
 800a7fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a800:	3e01      	subs	r6, #1
 800a802:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a806:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a80a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a80e:	d1dc      	bne.n	800a7ca <__ieee754_sqrt+0xd6>
 800a810:	431c      	orrs	r4, r3
 800a812:	d01a      	beq.n	800a84a <__ieee754_sqrt+0x156>
 800a814:	4c1e      	ldr	r4, [pc, #120]	@ (800a890 <__ieee754_sqrt+0x19c>)
 800a816:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800a894 <__ieee754_sqrt+0x1a0>
 800a81a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a81e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a822:	f7f5 fca1 	bl	8000168 <__aeabi_dsub>
 800a826:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4650      	mov	r0, sl
 800a830:	4659      	mov	r1, fp
 800a832:	f7f6 f8cd 	bl	80009d0 <__aeabi_dcmple>
 800a836:	b140      	cbz	r0, 800a84a <__ieee754_sqrt+0x156>
 800a838:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a83c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a840:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a844:	d10e      	bne.n	800a864 <__ieee754_sqrt+0x170>
 800a846:	4635      	mov	r5, r6
 800a848:	3701      	adds	r7, #1
 800a84a:	107b      	asrs	r3, r7, #1
 800a84c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a850:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a854:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800a858:	086b      	lsrs	r3, r5, #1
 800a85a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800a85e:	e75b      	b.n	800a718 <__ieee754_sqrt+0x24>
 800a860:	4696      	mov	lr, r2
 800a862:	e7c2      	b.n	800a7ea <__ieee754_sqrt+0xf6>
 800a864:	f7f5 fc82 	bl	800016c <__adddf3>
 800a868:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4650      	mov	r0, sl
 800a872:	4659      	mov	r1, fp
 800a874:	f7f6 f8a2 	bl	80009bc <__aeabi_dcmplt>
 800a878:	b120      	cbz	r0, 800a884 <__ieee754_sqrt+0x190>
 800a87a:	1cab      	adds	r3, r5, #2
 800a87c:	bf08      	it	eq
 800a87e:	3701      	addeq	r7, #1
 800a880:	3502      	adds	r5, #2
 800a882:	e7e2      	b.n	800a84a <__ieee754_sqrt+0x156>
 800a884:	1c6b      	adds	r3, r5, #1
 800a886:	f023 0501 	bic.w	r5, r3, #1
 800a88a:	e7de      	b.n	800a84a <__ieee754_sqrt+0x156>
 800a88c:	7ff00000 	.word	0x7ff00000
 800a890:	0800c030 	.word	0x0800c030
 800a894:	0800c028 	.word	0x0800c028

0800a898 <_init>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr

0800a8a4 <_fini>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr
