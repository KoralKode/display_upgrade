
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001778  0800c7b0  0800c7b0  0000d7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df28  0800df28  0000f1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df28  0800df28  0000ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df30  0800df30  0000f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df30  0800df30  0000ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df34  0800df34  0000ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800df38  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  200001d0  0800e104  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018cc  0800e104  0000f8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d82  00000000  00000000  0000f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eac  00000000  00000000  00025f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00029e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001079  00000000  00000000  0002b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b31c  00000000  00000000  0002c409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b25e  00000000  00000000  00047725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009137d  00000000  00000000  00062983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000f3d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fa078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c798 	.word	0x0800c798

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c798 	.word	0x0800c798

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <int_to_str>:

    return ERROR_NONE;
}


void int_to_str(int num, char *str) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <int_to_str+0x60>
        str[0] = '0';
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2230      	movs	r2, #48	@ 0x30
 8000aa0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e039      	b.n	8000b20 <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <int_to_str+0xa0>)
 8000ab0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab4:	1099      	asrs	r1, r3, #2
 8000ab6:	17d3      	asrs	r3, r2, #31
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad1      	subs	r1, r2, r3
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	1c59      	adds	r1, r3, #1
 8000aca:	61f9      	str	r1, [r7, #28]
 8000acc:	3230      	adds	r2, #48	@ 0x30
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <int_to_str+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1092      	asrs	r2, r2, #2
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dcde      	bgt.n	8000aac <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 8000af2:	e00b      	b.n	8000b0c <int_to_str+0x84>
        str[j++] = tmp[i];
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	61ba      	str	r2, [r7, #24]
 8000afa:	461a      	mov	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dcee      	bgt.n	8000af4 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	66666667 	.word	0x66666667

08000b2c <Is_Flash_Valid>:

char Is_Flash_Valid() {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
    // Чтение метки из Flash
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <Is_Flash_Valid+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	607b      	str	r3, [r7, #4]
    if(magic == FLASH_MAGIC_NUMBER){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <Is_Flash_Valid+0x28>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <Is_Flash_Valid+0x18>
    	return 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <Is_Flash_Valid+0x1a>
    }else{
    	return 0;
 8000b44:	2300      	movs	r3, #0
    }
    //return (magic == FLASH_MAGIC_NUMBER);
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	0801fc00 	.word	0x0801fc00
 8000b54:	deadbeef 	.word	0xdeadbeef

08000b58 <Read_Flash_Array>:

void Read_Flash_Array(int32_t *output) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    if (!Is_Flash_Valid()) {
 8000b60:	f7ff ffe4 	bl	8000b2c <Is_Flash_Valid>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <Read_Flash_Array+0x1e>
        // Данные не валидны (первый запуск)
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f00a fa68 	bl	800b044 <memset>
        return;
 8000b74:	e008      	b.n	8000b88 <Read_Flash_Array+0x30>
    }

    // Чтение данных (пропускаем метку)
    FlashData *flash_data = (FlashData*)FLASH_USER_START_ADDR;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <Read_Flash_Array+0x38>)
 8000b78:	60fb      	str	r3, [r7, #12]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f00a faa4 	bl	800b0d0 <memcpy>
}
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	0801fc00 	.word	0x0801fc00

08000b94 <Write_Flash_Array>:

void Write_Flash_Array(int32_t *data) {
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b090      	sub	sp, #64	@ 0x40
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000b9e:	f001 fc8f 	bl	80024c0 <HAL_FLASH_Unlock>

    // Стирание страницы
    FLASH_EraseInitTypeDef erase;
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    erase.PageAddress = FLASH_USER_START_ADDR;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    erase.NbPages = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000bae:	f107 0218 	add.w	r2, r7, #24
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd69 	bl	8002690 <HAL_FLASHEx_Erase>

    // Запись структуры (метка + данные)
    FlashData flash_data;
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <Write_Flash_Array+0xb8>)
 8000bc0:	60bb      	str	r3, [r7, #8]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	220c      	movs	r2, #12
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a fa7f 	bl	800b0d0 <memcpy>

    // Запись по 16-битным полусловам
    uint32_t addr = FLASH_USER_START_ADDR;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t *ptr = (uint32_t*)&flash_data;
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t size = sizeof(FlashData) / 2; // Количество 16-битных слов
 8000bdc:	2308      	movs	r3, #8
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < size; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000be4:	e024      	b.n	8000c30 <Write_Flash_Array+0x9c>
        uint32_t value = ptr[i];
 8000be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4693      	mov	fp, r2
 8000bfa:	fa1f f48a 	uxth.w	r4, sl
 8000bfe:	2500      	movs	r5, #0
 8000c00:	4622      	mov	r2, r4
 8000c02:	462b      	mov	r3, r5
 8000c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000c06:	2001      	movs	r0, #1
 8000c08:	f001 fbea 	bl	80023e0 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c0e:	1c99      	adds	r1, r3, #2
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	0c1b      	lsrs	r3, r3, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	4698      	mov	r8, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fbde 	bl	80023e0 <HAL_FLASH_Program>
        addr += 4;
 8000c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c26:	3304      	adds	r3, #4
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint32_t i = 0; i < size; i++) {
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3d6      	bcc.n	8000be6 <Write_Flash_Array+0x52>
    }

    HAL_FLASH_Lock();
 8000c38:	f001 fc68 	bl	800250c <HAL_FLASH_Lock>
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	@ 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c46:	bf00      	nop
 8000c48:	0801fc00 	.word	0x0801fc00
 8000c4c:	deadbeef 	.word	0xdeadbeef

08000c50 <get_encoder>:


int get_encoder(){
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <get_encoder+0x18>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <get_encoder+0xe>
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	109b      	asrs	r3, r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <set_encoder>:

void set_encoder(int e){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	009a      	lsls	r2, r3, #2
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <set_encoder+0x1c>)
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <print_interface_mode0>:


void print_interface_mode0(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 f9c5 	bl	8002024 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 f878 	bl	8001d90 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <print_interface_mode0+0xb0>)
 8000caa:	f001 f995 	bl	8001fd8 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	9200      	str	r2, [sp, #0]
 8000cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb6:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cb8:	f001 f98e 	bl	8001fd8 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	9200      	str	r2, [sp, #0]
 8000cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc4:	481f      	ldr	r0, [pc, #124]	@ (8000d44 <print_interface_mode0+0xb8>)
 8000cc6:	f001 f987 	bl	8001fd8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000cca:	210a      	movs	r1, #10
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 f9a9 	bl	8002024 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cda:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <print_interface_mode0+0xbc>)
 8000cdc:	f001 f97c 	bl	8001fd8 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cea:	f001 f975 	bl	8001fd8 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <print_interface_mode0+0xc4>)
 8000d00:	f001 f96a 	bl	8001fd8 <ssd1306_WriteString>
 8000d04:	e012      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d107      	bne.n	8000d1e <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d16:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <print_interface_mode0+0xc8>)
 8000d18:	f001 f95e 	bl	8001fd8 <ssd1306_WriteString>
 8000d1c:	e006      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d26:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <print_interface_mode0+0xcc>)
 8000d28:	f001 f956 	bl	8001fd8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000d2c:	f001 f848 	bl	8001dc0 <ssd1306_UpdateScreen>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800dd88 	.word	0x0800dd88
 8000d3c:	20000338 	.word	0x20000338
 8000d40:	0800c7b0 	.word	0x0800c7b0
 8000d44:	2000033f 	.word	0x2000033f
 8000d48:	20000346 	.word	0x20000346
 8000d4c:	2000034e 	.word	0x2000034e
 8000d50:	0800c7b4 	.word	0x0800c7b4
 8000d54:	0800c7b8 	.word	0x0800c7b8
 8000d58:	0800c7bc 	.word	0x0800c7bc

08000d5c <print_interface_mode1>:

void print_interface_mode1(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 f95d 	bl	8002024 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 f810 	bl	8001d90 <ssd1306_Fill>
	if(choiced_num==0){
 8000d70:	4b7d      	ldr	r3, [pc, #500]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d139      	bne.n	8000dec <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000d78:	4b7c      	ldr	r3, [pc, #496]	@ (8000f6c <print_interface_mode1+0x210>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	4a7a      	ldr	r2, [pc, #488]	@ (8000f70 <print_interface_mode1+0x214>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9e1 	bl	8000150 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 8000d98:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <print_interface_mode1+0x218>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	4875      	ldr	r0, [pc, #468]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000da2:	f001 f919 	bl	8001fd8 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	ddf2      	ble.n	8000d98 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000db2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f6c <print_interface_mode1+0x210>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	4a6c      	ldr	r2, [pc, #432]	@ (8000f70 <print_interface_mode1+0x214>)
 8000dc0:	1898      	adds	r0, r3, r2
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f74 <print_interface_mode1+0x218>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dca:	f001 f905 	bl	8001fd8 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 8000dce:	4b69      	ldr	r3, [pc, #420]	@ (8000f74 <print_interface_mode1+0x218>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd6:	4869      	ldr	r0, [pc, #420]	@ (8000f7c <print_interface_mode1+0x220>)
 8000dd8:	f001 f8fe 	bl	8001fd8 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000ddc:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <print_interface_mode1+0x224>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	9200      	str	r2, [sp, #0]
 8000de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de4:	4867      	ldr	r0, [pc, #412]	@ (8000f84 <print_interface_mode1+0x228>)
 8000de6:	f001 f8f7 	bl	8001fd8 <ssd1306_WriteString>
 8000dea:	e08f      	b.n	8000f0c <print_interface_mode1+0x1b0>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8000dec:	4b5f      	ldr	r3, [pc, #380]	@ (8000f6c <print_interface_mode1+0x210>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	4a5d      	ldr	r2, [pc, #372]	@ (8000f70 <print_interface_mode1+0x214>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8000e06:	2305      	movs	r3, #5
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e017      	b.n	8000e3c <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8000e0c:	4b56      	ldr	r3, [pc, #344]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d107      	bne.n	8000e28 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8000e18:	4b59      	ldr	r3, [pc, #356]	@ (8000f80 <print_interface_mode1+0x224>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	4855      	ldr	r0, [pc, #340]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000e22:	f001 f8d9 	bl	8001fd8 <ssd1306_WriteString>
 8000e26:	e006      	b.n	8000e36 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8000e28:	4b52      	ldr	r3, [pc, #328]	@ (8000f74 <print_interface_mode1+0x218>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	9200      	str	r2, [sp, #0]
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	4851      	ldr	r0, [pc, #324]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000e32:	f001 f8d1 	bl	8001fd8 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dae3      	bge.n	8000e0c <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e034      	b.n	8000eb4 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	4a46      	ldr	r2, [pc, #280]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d115      	bne.n	8000e84 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e58:	4b44      	ldr	r3, [pc, #272]	@ (8000f6c <print_interface_mode1+0x210>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a44      	ldr	r2, [pc, #272]	@ (8000f70 <print_interface_mode1+0x214>)
 8000e60:	460b      	mov	r3, r1
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	441a      	add	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	713b      	strb	r3, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 8000e74:	4b42      	ldr	r3, [pc, #264]	@ (8000f80 <print_interface_mode1+0x224>)
 8000e76:	1d38      	adds	r0, r7, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7e:	f001 f8ab 	bl	8001fd8 <ssd1306_WriteString>
 8000e82:	e014      	b.n	8000eae <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <print_interface_mode1+0x210>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4a39      	ldr	r2, [pc, #228]	@ (8000f70 <print_interface_mode1+0x214>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	441a      	add	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	703b      	strb	r3, [r7, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eaa:	f001 f895 	bl	8001fd8 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	897b      	ldrh	r3, [r7, #10]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbc6      	blt.n	8000e4a <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec4:	482d      	ldr	r0, [pc, #180]	@ (8000f7c <print_interface_mode1+0x220>)
 8000ec6:	f001 f887 	bl	8001fd8 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed2:	482c      	ldr	r0, [pc, #176]	@ (8000f84 <print_interface_mode1+0x228>)
 8000ed4:	f001 f880 	bl	8001fd8 <ssd1306_WriteString>
		if(choice==1){
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <print_interface_mode1+0x22c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d115      	bne.n	8000f0c <print_interface_mode1+0x1b0>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f1c3 0306 	rsb	r3, r3, #6
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2112      	movs	r1, #18
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f893 	bl	8002024 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f06:	4821      	ldr	r0, [pc, #132]	@ (8000f8c <print_interface_mode1+0x230>)
 8000f08:	f001 f866 	bl	8001fd8 <ssd1306_WriteString>
		}


	}
	if(freq[choiced_channel]==160000){
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <print_interface_mode1+0x210>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <print_interface_mode1+0x234>)
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <print_interface_mode1+0x238>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <print_interface_mode1+0x1da>
		ssd1306_SetCursor(77, 18);
 8000f1e:	2112      	movs	r1, #18
 8000f20:	204d      	movs	r0, #77	@ 0x4d
 8000f22:	f001 f87f 	bl	8002024 <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	9200      	str	r2, [sp, #0]
 8000f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2e:	481a      	ldr	r0, [pc, #104]	@ (8000f98 <print_interface_mode1+0x23c>)
 8000f30:	f001 f852 	bl	8001fd8 <ssd1306_WriteString>
 8000f34:	e012      	b.n	8000f5c <print_interface_mode1+0x200>
	}else if(freq[choiced_channel]==8){
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <print_interface_mode1+0x210>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <print_interface_mode1+0x234>)
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d10a      	bne.n	8000f5c <print_interface_mode1+0x200>
		ssd1306_SetCursor(77, 18);
 8000f46:	2112      	movs	r1, #18
 8000f48:	204d      	movs	r0, #77	@ 0x4d
 8000f4a:	f001 f86b 	bl	8002024 <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	9200      	str	r2, [sp, #0]
 8000f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <print_interface_mode1+0x240>)
 8000f58:	f001 f83e 	bl	8001fd8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000f5c:	f000 ff30 	bl	8001dc0 <ssd1306_UpdateScreen>
}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000034d 	.word	0x2000034d
 8000f6c:	2000034e 	.word	0x2000034e
 8000f70:	20000338 	.word	0x20000338
 8000f74:	0800dd88 	.word	0x0800dd88
 8000f78:	0800c7c0 	.word	0x0800c7c0
 8000f7c:	0800c7b0 	.word	0x0800c7b0
 8000f80:	0800dd94 	.word	0x0800dd94
 8000f84:	0800c7c4 	.word	0x0800c7c4
 8000f88:	20000334 	.word	0x20000334
 8000f8c:	0800c7cc 	.word	0x0800c7cc
 8000f90:	20000324 	.word	0x20000324
 8000f94:	00027100 	.word	0x00027100
 8000f98:	0800c7d0 	.word	0x0800c7d0
 8000f9c:	0800c7d4 	.word	0x0800c7d4

08000fa0 <int_mode_0>:

void int_mode_0(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	481d      	ldr	r0, [pc, #116]	@ (800101c <int_mode_0+0x7c>)
 8000fa8:	f001 fd9e 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <int_mode_0+0x18>
		choice=1;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <int_mode_0+0x80>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8000fb8:	bf00      	nop
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4817      	ldr	r0, [pc, #92]	@ (800101c <int_mode_0+0x7c>)
 8000fbe:	f001 fd93 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <int_mode_0+0x1a>
	if(choice==0){
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <int_mode_0+0x80>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <int_mode_0+0x54>
		choiced_channel=get_encoder()%3;
 8000fd0:	f7ff fe3e 	bl	8000c50 <get_encoder>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <int_mode_0+0x84>)
 8000fd8:	fb83 3102 	smull	r3, r1, r3, r2
 8000fdc:	17d3      	asrs	r3, r2, #31
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	440b      	add	r3, r1
 8000fe6:	1ad1      	subs	r1, r2, r3
 8000fe8:	b2ca      	uxtb	r2, r1
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <int_mode_0+0x88>)
 8000fec:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 8000fee:	f7ff fe4d 	bl	8000c8c <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 8000ff2:	e011      	b.n	8001018 <int_mode_0+0x78>
	}else if(choice==1){
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <int_mode_0+0x80>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10d      	bne.n	8001018 <int_mode_0+0x78>
		set_encoder(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fe35 	bl	8000c6c <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <int_mode_0+0x8c>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <int_mode_0+0x90>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
		choice=0;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <int_mode_0+0x80>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001014:	f7ff fea2 	bl	8000d5c <print_interface_mode1>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800
 8001020:	20000334 	.word	0x20000334
 8001024:	55555556 	.word	0x55555556
 8001028:	2000034e 	.word	0x2000034e
 800102c:	2000034d 	.word	0x2000034d
 8001030:	2000034f 	.word	0x2000034f

08001034 <min_freq>:



void min_freq(){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <min_freq+0x38>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <min_freq+0x3c>)
 8001040:	460b      	mov	r3, r1
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4413      	add	r3, r2
 8001048:	2238      	movs	r2, #56	@ 0x38
 800104a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <min_freq+0x38>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <min_freq+0x3c>)
 8001054:	460b      	mov	r3, r1
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	4413      	add	r3, r2
 800105c:	3301      	adds	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000034e 	.word	0x2000034e
 8001070:	20000338 	.word	0x20000338

08001074 <max_freq>:

void max_freq(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <max_freq+0xa4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4a27      	ldr	r2, [pc, #156]	@ (800111c <max_freq+0xa8>)
 8001080:	460b      	mov	r3, r1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	4413      	add	r3, r2
 8001088:	2231      	movs	r2, #49	@ 0x31
 800108a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <max_freq+0xa4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <max_freq+0xa8>)
 8001094:	460b      	mov	r3, r1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a5b      	subs	r3, r3, r1
 800109a:	4413      	add	r3, r2
 800109c:	3301      	adds	r3, #1
 800109e:	2236      	movs	r2, #54	@ 0x36
 80010a0:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <max_freq+0xa4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <max_freq+0xa8>)
 80010aa:	460b      	mov	r3, r1
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	1a5b      	subs	r3, r3, r1
 80010b0:	4413      	add	r3, r2
 80010b2:	3302      	adds	r3, #2
 80010b4:	2230      	movs	r2, #48	@ 0x30
 80010b6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <max_freq+0xa4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <max_freq+0xa8>)
 80010c0:	460b      	mov	r3, r1
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4413      	add	r3, r2
 80010c8:	3303      	adds	r3, #3
 80010ca:	2230      	movs	r2, #48	@ 0x30
 80010cc:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <max_freq+0xa4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4a11      	ldr	r2, [pc, #68]	@ (800111c <max_freq+0xa8>)
 80010d6:	460b      	mov	r3, r1
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	2230      	movs	r2, #48	@ 0x30
 80010e2:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <max_freq+0xa4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <max_freq+0xa8>)
 80010ec:	460b      	mov	r3, r1
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	4413      	add	r3, r2
 80010f4:	3305      	adds	r3, #5
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <max_freq+0xa4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <max_freq+0xa8>)
 8001102:	460b      	mov	r3, r1
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a5b      	subs	r3, r3, r1
 8001108:	4413      	add	r3, r2
 800110a:	3306      	adds	r3, #6
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	2000034e 	.word	0x2000034e
 800111c:	20000338 	.word	0x20000338

08001120 <int_mode_1>:

void int_mode_1(){
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001126:	2101      	movs	r1, #1
 8001128:	4896      	ldr	r0, [pc, #600]	@ (8001384 <int_mode_1+0x264>)
 800112a:	f001 fcdd 	bl	8002ae8 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11b      	bne.n	800116c <int_mode_1+0x4c>
		if(choice==0){
 8001134:	4b94      	ldr	r3, [pc, #592]	@ (8001388 <int_mode_1+0x268>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <int_mode_1+0x3c>

			choice=1;
 800113c:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <int_mode_1+0x268>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 8001142:	4b92      	ldr	r3, [pc, #584]	@ (800138c <int_mode_1+0x26c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d010      	beq.n	800116c <int_mode_1+0x4c>
				prev_encoder=1000;
 800114a:	4b91      	ldr	r3, [pc, #580]	@ (8001390 <int_mode_1+0x270>)
 800114c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001150:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f7ff fd89 	bl	8000c6c <set_encoder>
 800115a:	e007      	b.n	800116c <int_mode_1+0x4c>

			}
		}else{
			choice=0;
 800115c:	4b8a      	ldr	r3, [pc, #552]	@ (8001388 <int_mode_1+0x268>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 8001162:	4b8a      	ldr	r3, [pc, #552]	@ (800138c <int_mode_1+0x26c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd80 	bl	8000c6c <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 800116c:	bf00      	nop
 800116e:	2101      	movs	r1, #1
 8001170:	4884      	ldr	r0, [pc, #528]	@ (8001384 <int_mode_1+0x264>)
 8001172:	f001 fcb9 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f8      	beq.n	800116e <int_mode_1+0x4e>
	if(choice==0){
 800117c:	4b82      	ldr	r3, [pc, #520]	@ (8001388 <int_mode_1+0x268>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d113      	bne.n	80011ac <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 8001184:	f7ff fd64 	bl	8000c50 <get_encoder>
 8001188:	4602      	mov	r2, r0
 800118a:	4b82      	ldr	r3, [pc, #520]	@ (8001394 <int_mode_1+0x274>)
 800118c:	fb83 1302 	smull	r1, r3, r3, r2
 8001190:	4413      	add	r3, r2
 8001192:	1099      	asrs	r1, r3, #2
 8001194:	17d3      	asrs	r3, r2, #31
 8001196:	1ac9      	subs	r1, r1, r3
 8001198:	460b      	mov	r3, r1
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a5b      	subs	r3, r3, r1
 800119e:	1ad1      	subs	r1, r2, r3
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	4b7a      	ldr	r3, [pc, #488]	@ (800138c <int_mode_1+0x26c>)
 80011a4:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 80011a6:	f7ff fdd9 	bl	8000d5c <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
			print_interface_mode1();

		}
	}
}
 80011aa:	e0e7      	b.n	800137c <int_mode_1+0x25c>
	}else if(choice==1){
 80011ac:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <int_mode_1+0x268>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 80e3 	bne.w	800137c <int_mode_1+0x25c>
		if(choiced_num==0){
 80011b6:	4b75      	ldr	r3, [pc, #468]	@ (800138c <int_mode_1+0x26c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d110      	bne.n	80011e0 <int_mode_1+0xc0>
			choice=0;
 80011be:	4b72      	ldr	r3, [pc, #456]	@ (8001388 <int_mode_1+0x268>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 80011c4:	4b74      	ldr	r3, [pc, #464]	@ (8001398 <int_mode_1+0x278>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
			Write_Flash_Array(freq);
 80011ca:	4874      	ldr	r0, [pc, #464]	@ (800139c <int_mode_1+0x27c>)
 80011cc:	f7ff fce2 	bl	8000b94 <Write_Flash_Array>
			set_encoder(choiced_channel);
 80011d0:	4b73      	ldr	r3, [pc, #460]	@ (80013a0 <int_mode_1+0x280>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd49 	bl	8000c6c <set_encoder>
			print_interface_mode0();
 80011da:	f7ff fd57 	bl	8000c8c <print_interface_mode0>
}
 80011de:	e0cd      	b.n	800137c <int_mode_1+0x25c>
			int delta = get_encoder();
 80011e0:	f7ff fd36 	bl	8000c50 <get_encoder>
 80011e4:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);
 80011e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <int_mode_1+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f908 	bl	8000404 <__aeabi_i2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	4b64      	ldr	r3, [pc, #400]	@ (800138c <int_mode_1+0x26c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f900 	bl	8000404 <__aeabi_i2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4965      	ldr	r1, [pc, #404]	@ (80013a4 <int_mode_1+0x284>)
 800120e:	f00a fbb9 	bl	800b984 <pow>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f95d 	bl	80004d8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4614      	mov	r4, r2
 8001224:	461d      	mov	r5, r3
 8001226:	4b5e      	ldr	r3, [pc, #376]	@ (80013a0 <int_mode_1+0x280>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b5b      	ldr	r3, [pc, #364]	@ (800139c <int_mode_1+0x27c>)
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8e6 	bl	8000404 <__aeabi_i2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4955      	ldr	r1, [pc, #340]	@ (80013a0 <int_mode_1+0x280>)
 800124a:	7809      	ldrb	r1, [r1, #0]
 800124c:	460c      	mov	r4, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fbf1 	bl	8000a38 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	4a50      	ldr	r2, [pc, #320]	@ (800139c <int_mode_1+0x27c>)
 800125a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 800125e:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <int_mode_1+0x280>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <int_mode_1+0x27c>)
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da10      	bge.n	8001290 <int_mode_1+0x170>
				freq[choiced_channel]=1000000+freq[choiced_channel];
 800126e:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <int_mode_1+0x280>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b49      	ldr	r3, [pc, #292]	@ (800139c <int_mode_1+0x27c>)
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	4a49      	ldr	r2, [pc, #292]	@ (80013a0 <int_mode_1+0x280>)
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
 8001280:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8001284:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001288:	4a44      	ldr	r2, [pc, #272]	@ (800139c <int_mode_1+0x27c>)
 800128a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800128e:	e03a      	b.n	8001306 <int_mode_1+0x1e6>
			}else if(freq[choiced_channel]>999999){
 8001290:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <int_mode_1+0x280>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <int_mode_1+0x27c>)
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	4a42      	ldr	r2, [pc, #264]	@ (80013a8 <int_mode_1+0x288>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	dd31      	ble.n	8001306 <int_mode_1+0x1e6>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <int_mode_1+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8aa 	bl	8000404 <__aeabi_i2d>
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	4b35      	ldr	r3, [pc, #212]	@ (800138c <int_mode_1+0x26c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8a2 	bl	8000404 <__aeabi_i2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	f04f 0000 	mov.w	r0, #0
 80012c8:	4936      	ldr	r1, [pc, #216]	@ (80013a4 <int_mode_1+0x284>)
 80012ca:	f00a fb5b 	bl	800b984 <pow>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f8ff 	bl	80004d8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <int_mode_1+0x28c>)
 80012e8:	f7fe ff40 	bl	800016c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	492b      	ldr	r1, [pc, #172]	@ (80013a0 <int_mode_1+0x280>)
 80012f2:	7809      	ldrb	r1, [r1, #0]
 80012f4:	460c      	mov	r4, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb9d 	bl	8000a38 <__aeabi_d2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a26      	ldr	r2, [pc, #152]	@ (800139c <int_mode_1+0x27c>)
 8001302:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <int_mode_1+0x270>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
			if(freq[choiced_channel]<8){
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <int_mode_1+0x280>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <int_mode_1+0x27c>)
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	2b07      	cmp	r3, #7
 800131a:	dc09      	bgt.n	8001330 <int_mode_1+0x210>
				freq[choiced_channel]=8;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <int_mode_1+0x280>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <int_mode_1+0x27c>)
 8001324:	2208      	movs	r2, #8
 8001326:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 800132a:	f7ff fe83 	bl	8001034 <min_freq>
 800132e:	e011      	b.n	8001354 <int_mode_1+0x234>
			}else if(freq[choiced_channel]>160000){
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <int_mode_1+0x280>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <int_mode_1+0x27c>)
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <int_mode_1+0x290>)
 800133e:	4293      	cmp	r3, r2
 8001340:	dd08      	ble.n	8001354 <int_mode_1+0x234>
				freq[choiced_channel]=160000;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <int_mode_1+0x280>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <int_mode_1+0x27c>)
 800134a:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <int_mode_1+0x290>)
 800134c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 8001350:	f7ff fe90 	bl	8001074 <max_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <int_mode_1+0x280>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <int_mode_1+0x27c>)
 800135c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <int_mode_1+0x280>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	460b      	mov	r3, r1
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	4911      	ldr	r1, [pc, #68]	@ (80013b4 <int_mode_1+0x294>)
 800136e:	440b      	add	r3, r1
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff fb88 	bl	8000a88 <int_to_str>
			print_interface_mode1();
 8001378:	f7ff fcf0 	bl	8000d5c <print_interface_mode1>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	40010800 	.word	0x40010800
 8001388:	20000334 	.word	0x20000334
 800138c:	2000034d 	.word	0x2000034d
 8001390:	20000330 	.word	0x20000330
 8001394:	92492493 	.word	0x92492493
 8001398:	2000034f 	.word	0x2000034f
 800139c:	20000324 	.word	0x20000324
 80013a0:	2000034e 	.word	0x2000034e
 80013a4:	40240000 	.word	0x40240000
 80013a8:	000f423f 	.word	0x000f423f
 80013ac:	401c0000 	.word	0x401c0000
 80013b0:	00027100 	.word	0x00027100
 80013b4:	20000338 	.word	0x20000338

080013b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d108      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	if(interface_mode==0){
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_TIM_PeriodElapsedCallback+0x20>
    		int_mode_0();
 80013d2:	f7ff fde5 	bl	8000fa0 <int_mode_0>
    	}else{
    		int_mode_1();
    	}
    }
}
 80013d6:	e001      	b.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x24>
    		int_mode_1();
 80013d8:	f7ff fea2 	bl	8001120 <int_mode_1>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000034f 	.word	0x2000034f

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 fe64 	bl	80020b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f86e 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 f9d4 	bl	80017a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f8:	f000 f8c4 	bl	8001584 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013fc:	f000 f91e 	bl	800163c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001400:	f000 f8ee 	bl	80015e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001404:	f000 f972 	bl	80016ec <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001408:	f008 ff90 	bl	800a32c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800140c:	213c      	movs	r1, #60	@ 0x3c
 800140e:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <main+0xb8>)
 8001410:	f004 fb9b 	bl	8005b4a <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001414:	f000 fc52 	bl	8001cbc <ssd1306_Init>
  //si5351_Init();
  set_encoder(0);//выставление энкодера в 0
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fc27 	bl	8000c6c <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <main+0xbc>)
 8001420:	2208      	movs	r2, #8
 8001422:	601a      	str	r2, [r3, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <main+0xbc>)
 8001426:	2208      	movs	r2, #8
 8001428:	605a      	str	r2, [r3, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <main+0xbc>)
 800142c:	2208      	movs	r2, #8
 800142e:	609a      	str	r2, [r3, #8]
      if (Is_Flash_Valid()==0) {
 8001430:	f7ff fb7c 	bl	8000b2c <Is_Flash_Valid>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <main+0x5a>
          Write_Flash_Array(freq);
 800143a:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <main+0xbc>)
 800143c:	f7ff fbaa 	bl	8000b94 <Write_Flash_Array>
 8001440:	e002      	b.n	8001448 <main+0x60>
      }else{
    	  Read_Flash_Array(freq);
 8001442:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <main+0xbc>)
 8001444:	f7ff fb88 	bl	8000b58 <Read_Flash_Array>
      }
      choice=0;//переменная для считывания был ли нажат энкодер
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <main+0xc0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
      prev_choice=0;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <main+0xc4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <main+0xbc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4915      	ldr	r1, [pc, #84]	@ (80014b0 <main+0xc8>)
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb14 	bl	8000a88 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <main+0xbc>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4913      	ldr	r1, [pc, #76]	@ (80014b4 <main+0xcc>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fb0e 	bl	8000a88 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <main+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4911      	ldr	r1, [pc, #68]	@ (80014b8 <main+0xd0>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb08 	bl	8000a88 <int_to_str>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <main+0xd4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <main+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <main+0xdc>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
      prev_encoder=8;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <main+0xe0>)
 800148c:	2208      	movs	r2, #8
 800148e:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 8001490:	f7ff fbfc 	bl	8000c8c <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001494:	480d      	ldr	r0, [pc, #52]	@ (80014cc <main+0xe4>)
 8001496:	f004 fa15 	bl	80058c4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	bf00      	nop
 800149c:	e7fd      	b.n	800149a <main+0xb2>
 800149e:	bf00      	nop
 80014a0:	20000294 	.word	0x20000294
 80014a4:	20000324 	.word	0x20000324
 80014a8:	20000334 	.word	0x20000334
 80014ac:	20000335 	.word	0x20000335
 80014b0:	20000346 	.word	0x20000346
 80014b4:	2000033f 	.word	0x2000033f
 80014b8:	20000338 	.word	0x20000338
 80014bc:	2000034d 	.word	0x2000034d
 80014c0:	2000034e 	.word	0x2000034e
 80014c4:	2000034f 	.word	0x2000034f
 80014c8:	20000330 	.word	0x20000330
 80014cc:	200002dc 	.word	0x200002dc

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fdb0 	bl	800b044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800151a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800151c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fd1a 	bl	8004f60 <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001532:	f000 f99b 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800153e:	2390      	movs	r3, #144	@ 0x90
 8001540:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f003 ff87 	bl	8005464 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800155c:	f000 f986 	bl	800186c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001560:	2310      	movs	r3, #16
 8001562:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001564:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001568:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f8f3 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001578:	f000 f978 	bl	800186c <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	@ 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_I2C1_Init+0x50>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <MX_I2C1_Init+0x54>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_I2C1_Init+0x50>)
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x58>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015c2:	f001 fac1 	bl	8002b48 <HAL_I2C_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015cc:	f000 f94e 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001ec 	.word	0x200001ec
 80015d8:	40005400 	.word	0x40005400
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_I2C2_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_I2C2_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2C2_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_I2C2_Init+0x50>)
 800161e:	f001 fa93 	bl	8002b48 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 f920 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000240 	.word	0x20000240
 8001634:	40005800 	.word	0x40005800
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2224      	movs	r2, #36	@ 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f009 fcfa 	bl	800b044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800165a:	4a23      	ldr	r2, [pc, #140]	@ (80016e8 <MX_TIM1_Init+0xac>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800166c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001684:	2303      	movs	r3, #3
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 80016b0:	f004 f9a9 	bl	8005a06 <HAL_TIM_Encoder_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 f8d7 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 80016cc:	f004 febc 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016d6:	f000 f8c9 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	@ 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000294 	.word	0x20000294
 80016e8:	40012c00 	.word	0x40012c00

080016ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800170e:	4b23      	ldr	r3, [pc, #140]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001710:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001714:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 299;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001718:	f240 122b 	movw	r2, #299	@ 0x12b
 800171c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001726:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800172a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_TIM2_Init+0xb0>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001738:	4818      	ldr	r0, [pc, #96]	@ (800179c <MX_TIM2_Init+0xb0>)
 800173a:	f004 f915 	bl	8005968 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 f892 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001758:	f004 fe76 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001762:	f000 f883 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	@ 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_TIM2_Init+0xb0>)
 800177e:	f004 fb63 	bl	8005e48 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001788:	f000 f870 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <MX_TIM2_Init+0xb0>)
 800178e:	f000 f975 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	@ 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002dc 	.word	0x200002dc

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <MX_GPIO_Init+0xc0>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_GPIO_Init+0xc0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181a:	4812      	ldr	r0, [pc, #72]	@ (8001864 <MX_GPIO_Init+0xc4>)
 800181c:	f001 f97b 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	480a      	ldr	r0, [pc, #40]	@ (8001864 <MX_GPIO_Init+0xc4>)
 800183a:	f000 ffd1 	bl	80027e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_GPIO_Init+0xc8>)
 8001852:	f000 ffc5 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40011000 	.word	0x40011000
 8001868:	40010800 	.word	0x40010800

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <Error_Handler+0x8>

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <HAL_MspInit+0x5c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <HAL_MspInit+0x5c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_MspInit+0x60>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_MspInit+0x60>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a2b      	ldr	r2, [pc, #172]	@ (80019a4 <HAL_I2C_MspInit+0xc8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d124      	bne.n	8001946 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001914:	23c0      	movs	r3, #192	@ 0xc0
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4619      	mov	r1, r3
 8001926:	4821      	ldr	r0, [pc, #132]	@ (80019ac <HAL_I2C_MspInit+0xd0>)
 8001928:	f000 ff5a 	bl	80027e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001936:	61d3      	str	r3, [r2, #28]
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001944:	e029      	b.n	800199a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a19      	ldr	r2, [pc, #100]	@ (80019b0 <HAL_I2C_MspInit+0xd4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d124      	bne.n	800199a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001968:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	@ (80019ac <HAL_I2C_MspInit+0xd0>)
 800197e:	f000 ff2f 	bl	80027e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_I2C_MspInit+0xcc>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40005800 	.word	0x40005800

080019b4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x74>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d124      	bne.n	8001a1e <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x78>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a1a:	f000 fee1 	bl	80027e0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800

08001a34 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d113      	bne.n	8001a6e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x44>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x44>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x44>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	201c      	movs	r0, #28
 8001a64:	f000 fc85 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f000 fc9e 	bl	80023aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a9a:	d12a      	bne.n	8001af2 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <HAL_TIM_MspPostInit+0x80>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a16      	ldr	r2, [pc, #88]	@ (8001afc <HAL_TIM_MspPostInit+0x80>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <HAL_TIM_MspPostInit+0x80>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <HAL_TIM_MspPostInit+0x84>)
 8001aca:	f000 fe89 	bl	80027e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_TIM_MspPostInit+0x88>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <HAL_TIM_MspPostInit+0x88>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010000 	.word	0x40010000

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <NMI_Handler+0x4>

08001b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <MemManage_Handler+0x4>

08001b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 faf4 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b66:	f001 fdb7 	bl	80036d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000128c 	.word	0x2000128c

08001b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <TIM2_IRQHandler+0x10>)
 8001b7a:	f004 f874 	bl	8005c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200002dc 	.word	0x200002dc

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f009 fa5e 	bl	800b078 <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20005000 	.word	0x20005000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20000350 	.word	0x20000350
 8001bf0:	200018d0 	.word	0x200018d0

08001bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c00:	f7ff fff8 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c04:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c06:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c08:	4a0c      	ldr	r2, [pc, #48]	@ (8001c3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a09      	ldr	r2, [pc, #36]	@ (8001c40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c1c:	4c09      	ldr	r4, [pc, #36]	@ (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f009 fa2b 	bl	800b084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2e:	f7ff fbdb 	bl	80013e8 <main>
  bx lr
 8001c32:	4770      	bx	lr
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001c3c:	0800df38 	.word	0x0800df38
  ldr r2, =_sbss
 8001c40:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001c44:	200018cc 	.word	0x200018cc

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>

08001c4a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af04      	add	r7, sp, #16
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2301      	movs	r3, #1
 8001c72:	2200      	movs	r2, #0
 8001c74:	2178      	movs	r1, #120	@ 0x78
 8001c76:	4803      	ldr	r0, [pc, #12]	@ (8001c84 <ssd1306_WriteCommand+0x2c>)
 8001c78:	f001 f8aa 	bl	8002dd0 <HAL_I2C_Mem_Write>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000240 	.word	0x20000240

08001c88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9a:	9202      	str	r2, [sp, #8]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2240      	movs	r2, #64	@ 0x40
 8001ca6:	2178      	movs	r1, #120	@ 0x78
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <ssd1306_WriteData+0x30>)
 8001caa:	f001 f891 	bl	8002dd0 <HAL_I2C_Mem_Write>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000240 	.word	0x20000240

08001cbc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001cc0:	f7ff ffc3 	bl	8001c4a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cc4:	2064      	movs	r0, #100	@ 0x64
 8001cc6:	f000 fa59 	bl	800217c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f000 f9d6 	bl	800207c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f7ff ffc1 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff ffbe 	bl	8001c58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001cdc:	20b0      	movs	r0, #176	@ 0xb0
 8001cde:	f7ff ffbb 	bl	8001c58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ce2:	20c8      	movs	r0, #200	@ 0xc8
 8001ce4:	f7ff ffb8 	bl	8001c58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff ffb5 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001cee:	2010      	movs	r0, #16
 8001cf0:	f7ff ffb2 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001cf4:	2040      	movs	r0, #64	@ 0x40
 8001cf6:	f7ff ffaf 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001cfa:	20ff      	movs	r0, #255	@ 0xff
 8001cfc:	f000 f9aa 	bl	8002054 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d00:	20a1      	movs	r0, #161	@ 0xa1
 8001d02:	f7ff ffa9 	bl	8001c58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d06:	20a6      	movs	r0, #166	@ 0xa6
 8001d08:	f7ff ffa6 	bl	8001c58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d0c:	20a8      	movs	r0, #168	@ 0xa8
 8001d0e:	f7ff ffa3 	bl	8001c58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001d12:	201f      	movs	r0, #31
 8001d14:	f7ff ffa0 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d18:	20a4      	movs	r0, #164	@ 0xa4
 8001d1a:	f7ff ff9d 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d1e:	20d3      	movs	r0, #211	@ 0xd3
 8001d20:	f7ff ff9a 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff ff97 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d2a:	20d5      	movs	r0, #213	@ 0xd5
 8001d2c:	f7ff ff94 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d30:	20f0      	movs	r0, #240	@ 0xf0
 8001d32:	f7ff ff91 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d36:	20d9      	movs	r0, #217	@ 0xd9
 8001d38:	f7ff ff8e 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d3c:	2022      	movs	r0, #34	@ 0x22
 8001d3e:	f7ff ff8b 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d42:	20da      	movs	r0, #218	@ 0xda
 8001d44:	f7ff ff88 	bl	8001c58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff ff85 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d4e:	20db      	movs	r0, #219	@ 0xdb
 8001d50:	f7ff ff82 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d54:	2020      	movs	r0, #32
 8001d56:	f7ff ff7f 	bl	8001c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d5a:	208d      	movs	r0, #141	@ 0x8d
 8001d5c:	f7ff ff7c 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d60:	2014      	movs	r0, #20
 8001d62:	f7ff ff79 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 f988 	bl	800207c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f80f 	bl	8001d90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d72:	f000 f825 	bl	8001dc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <ssd1306_Init+0xd0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <ssd1306_Init+0xd0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d82:	4b02      	ldr	r3, [pc, #8]	@ (8001d8c <ssd1306_Init+0xd0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	711a      	strb	r2, [r3, #4]
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000554 	.word	0x20000554

08001d90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <ssd1306_Fill+0x14>
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <ssd1306_Fill+0x16>
 8001da4:	23ff      	movs	r3, #255	@ 0xff
 8001da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001daa:	4619      	mov	r1, r3
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <ssd1306_Fill+0x2c>)
 8001dae:	f009 f949 	bl	800b044 <memset>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000354 	.word	0x20000354

08001dc0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e016      	b.n	8001dfa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	3b50      	subs	r3, #80	@ 0x50
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff40 	bl	8001c58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff ff3d 	bl	8001c58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001dde:	2010      	movs	r0, #16
 8001de0:	f7ff ff3a 	bl	8001c58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	4a08      	ldr	r2, [pc, #32]	@ (8001e0c <ssd1306_UpdateScreen+0x4c>)
 8001dea:	4413      	add	r3, r2
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff4a 	bl	8001c88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	3301      	adds	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d9e5      	bls.n	8001dcc <ssd1306_UpdateScreen+0xc>
    }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000354 	.word	0x20000354

08001e10 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	71bb      	strb	r3, [r7, #6]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db3d      	blt.n	8001ea6 <ssd1306_DrawPixel+0x96>
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	2b1f      	cmp	r3, #31
 8001e2e:	d83a      	bhi.n	8001ea6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d11a      	bne.n	8001e6c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	b2d8      	uxtb	r0, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	4413      	add	r3, r2
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <ssd1306_DrawPixel+0xa0>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	b25a      	sxtb	r2, r3
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b259      	sxtb	r1, r3
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	01db      	lsls	r3, r3, #7
 8001e62:	4413      	add	r3, r2
 8001e64:	b2c9      	uxtb	r1, r1
 8001e66:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <ssd1306_DrawPixel+0xa0>)
 8001e68:	54d1      	strb	r1, [r2, r3]
 8001e6a:	e01d      	b.n	8001ea8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e6c:	79fa      	ldrb	r2, [r7, #7]
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	b2d8      	uxtb	r0, r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	01db      	lsls	r3, r3, #7
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <ssd1306_DrawPixel+0xa0>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	79bb      	ldrb	r3, [r7, #6]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	4013      	ands	r3, r2
 8001e94:	b259      	sxtb	r1, r3
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	01db      	lsls	r3, r3, #7
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2c9      	uxtb	r1, r1
 8001ea0:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <ssd1306_DrawPixel+0xa0>)
 8001ea2:	54d1      	strb	r1, [r2, r3]
 8001ea4:	e000      	b.n	8001ea8 <ssd1306_DrawPixel+0x98>
        return;
 8001ea6:	bf00      	nop
    }
}
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000354 	.word	0x20000354

08001eb4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4604      	mov	r4, r0
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b1f      	cmp	r3, #31
 8001eca:	d902      	bls.n	8001ed2 <ssd1306_WriteChar+0x1e>
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ed0:	d901      	bls.n	8001ed6 <ssd1306_WriteChar+0x22>
        return 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e079      	b.n	8001fca <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <ssd1306_WriteChar+0x34>
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	3b20      	subs	r3, #32
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	e000      	b.n	8001eea <ssd1306_WriteChar+0x36>
 8001ee8:	783b      	ldrb	r3, [r7, #0]
 8001eea:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001eec:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2b80      	cmp	r3, #128	@ 0x80
 8001ef8:	dc06      	bgt.n	8001f08 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001efa:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001efc:	885b      	ldrh	r3, [r3, #2]
 8001efe:	461a      	mov	r2, r3
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	dd01      	ble.n	8001f0c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e05e      	b.n	8001fca <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e04d      	b.n	8001fae <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3b20      	subs	r3, #32
 8001f18:	7879      	ldrb	r1, [r7, #1]
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	440b      	add	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	e036      	b.n	8001fa0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d013      	beq.n	8001f6a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f42:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b2d8      	uxtb	r0, r3
 8001f50:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7ff ff54 	bl	8001e10 <ssd1306_DrawPixel>
 8001f68:	e017      	b.n	8001f9a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	2300      	movne	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	f7ff ff3b 	bl	8001e10 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3c4      	bcc.n	8001f32 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	3301      	adds	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	787b      	ldrb	r3, [r7, #1]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d3ac      	bcc.n	8001f12 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <ssd1306_WriteChar+0x120>)
 8001fc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000554 	.word	0x20000554

08001fd8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4638      	mov	r0, r7
 8001fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001fe6:	e013      	b.n	8002010 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	7818      	ldrb	r0, [r3, #0]
 8001fec:	7e3b      	ldrb	r3, [r7, #24]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff4:	f7ff ff5e 	bl	8001eb4 <ssd1306_WriteChar>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d002      	beq.n	800200a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	e008      	b.n	800201c <ssd1306_WriteString+0x44>
        }
        str++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e7      	bne.n	8001fe8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	781b      	ldrb	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4613      	mov	r3, r2
 8002032:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <ssd1306_SetCursor+0x2c>)
 800203a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800203c:	79bb      	ldrb	r3, [r7, #6]
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <ssd1306_SetCursor+0x2c>)
 8002042:	805a      	strh	r2, [r3, #2]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000554 	.word	0x20000554

08002054 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800205e:	2381      	movs	r3, #129	@ 0x81
 8002060:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fdf7 	bl	8001c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fdf3 	bl	8001c58 <ssd1306_WriteCommand>
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800208c:	23af      	movs	r3, #175	@ 0xaf
 800208e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <ssd1306_SetDisplayOn+0x38>)
 8002092:	2201      	movs	r2, #1
 8002094:	715a      	strb	r2, [r3, #5]
 8002096:	e004      	b.n	80020a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002098:	23ae      	movs	r3, #174	@ 0xae
 800209a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <ssd1306_SetDisplayOn+0x38>)
 800209e:	2200      	movs	r2, #0
 80020a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fdd7 	bl	8001c58 <ssd1306_WriteCommand>
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000554 	.word	0x20000554

080020b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_Init+0x28>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_Init+0x28>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f947 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fbd0 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f95f 	bl	80023c6 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 f927 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_IncTick+0x1c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_IncTick+0x20>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a03      	ldr	r2, [pc, #12]	@ (8002164 <HAL_IncTick+0x20>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000008 	.word	0x20000008
 8002164:	2000055c 	.word	0x2000055c

08002168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b02      	ldr	r3, [pc, #8]	@ (8002178 <HAL_GetTick+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	2000055c 	.word	0x2000055c

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff fff0 	bl	8002168 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffe0 	bl	8002168 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4906      	ldr	r1, [pc, #24]	@ (800225c <__NVIC_EnableIRQ+0x34>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f7ff ff90 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff2d 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff42 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff90 	bl	80022b4 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5f 	bl	8002260 <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff35 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa2 	bl	8002318 <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023fa:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <HAL_FLASH_Program+0xd8>)
 80023fc:	7e1b      	ldrb	r3, [r3, #24]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_FLASH_Program+0x26>
 8002402:	2302      	movs	r3, #2
 8002404:	e054      	b.n	80024b0 <HAL_FLASH_Program+0xd0>
 8002406:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <HAL_FLASH_Program+0xd8>)
 8002408:	2201      	movs	r2, #1
 800240a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800240c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002410:	f000 f8a8 	bl	8002564 <FLASH_WaitForLastOperation>
 8002414:	4603      	mov	r3, r0
 8002416:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d144      	bne.n	80024a8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d102      	bne.n	800242a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002424:	2301      	movs	r3, #1
 8002426:	757b      	strb	r3, [r7, #21]
 8002428:	e007      	b.n	800243a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d102      	bne.n	8002436 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002430:	2302      	movs	r3, #2
 8002432:	757b      	strb	r3, [r7, #21]
 8002434:	e001      	b.n	800243a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002436:	2304      	movs	r3, #4
 8002438:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800243a:	2300      	movs	r3, #0
 800243c:	75bb      	strb	r3, [r7, #22]
 800243e:	e02d      	b.n	800249c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002440:	7dbb      	ldrb	r3, [r7, #22]
 8002442:	005a      	lsls	r2, r3, #1
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	eb02 0c03 	add.w	ip, r2, r3
 800244a:	7dbb      	ldrb	r3, [r7, #22]
 800244c:	0119      	lsls	r1, r3, #4
 800244e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002452:	f1c1 0620 	rsb	r6, r1, #32
 8002456:	f1a1 0020 	sub.w	r0, r1, #32
 800245a:	fa22 f401 	lsr.w	r4, r2, r1
 800245e:	fa03 f606 	lsl.w	r6, r3, r6
 8002462:	4334      	orrs	r4, r6
 8002464:	fa23 f000 	lsr.w	r0, r3, r0
 8002468:	4304      	orrs	r4, r0
 800246a:	fa23 f501 	lsr.w	r5, r3, r1
 800246e:	b2a3      	uxth	r3, r4
 8002470:	4619      	mov	r1, r3
 8002472:	4660      	mov	r0, ip
 8002474:	f000 f85a 	bl	800252c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002478:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800247c:	f000 f872 	bl	8002564 <FLASH_WaitForLastOperation>
 8002480:	4603      	mov	r3, r0
 8002482:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_FLASH_Program+0xdc>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <HAL_FLASH_Program+0xdc>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d107      	bne.n	80024a6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002496:	7dbb      	ldrb	r3, [r7, #22]
 8002498:	3301      	adds	r3, #1
 800249a:	75bb      	strb	r3, [r7, #22]
 800249c:	7dba      	ldrb	r2, [r7, #22]
 800249e:	7d7b      	ldrb	r3, [r7, #21]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3cd      	bcc.n	8002440 <HAL_FLASH_Program+0x60>
 80024a4:	e000      	b.n	80024a8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80024a6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_FLASH_Program+0xd8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	761a      	strb	r2, [r3, #24]

  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	20000560 	.word	0x20000560
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <HAL_FLASH_Unlock+0x40>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_FLASH_Unlock+0x40>)
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_FLASH_Unlock+0x44>)
 80024da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_FLASH_Unlock+0x40>)
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <HAL_FLASH_Unlock+0x48>)
 80024e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_FLASH_Unlock+0x40>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80024f2:	79fb      	ldrb	r3, [r7, #7]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	45670123 	.word	0x45670123
 8002508:	cdef89ab 	.word	0xcdef89ab

0800250c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_FLASH_Lock+0x1c>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_FLASH_Lock+0x1c>)
 8002516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40022000 	.word	0x40022000

0800252c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <FLASH_Program_HalfWord+0x30>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <FLASH_Program_HalfWord+0x34>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	4a07      	ldr	r2, [pc, #28]	@ (8002560 <FLASH_Program_HalfWord+0x34>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	801a      	strh	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000560 	.word	0x20000560
 8002560:	40022000 	.word	0x40022000

08002564 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fdfc 	bl	8002168 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002572:	e010      	b.n	8002596 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d00c      	beq.n	8002596 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <FLASH_WaitForLastOperation+0x2e>
 8002582:	f7ff fdf1 	bl	8002168 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	429a      	cmp	r2, r3
 8002590:	d201      	bcs.n	8002596 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e025      	b.n	80025e2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e8      	bne.n	8002574 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025a2:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025ae:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 80025b0:	2220      	movs	r2, #32
 80025b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025c0:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <FLASH_WaitForLastOperation+0x88>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025d8:	f000 f80a 	bl	80025f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000

080025f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025fa:	4b23      	ldr	r3, [pc, #140]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002606:	4b21      	ldr	r3, [pc, #132]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	4a1f      	ldr	r2, [pc, #124]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002610:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f043 0310 	orr.w	r3, r3, #16
 8002618:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	4a17      	ldr	r2, [pc, #92]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002630:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800263a:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <FLASH_SetErrorCode+0x9c>)
 8002650:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a0c      	ldr	r2, [pc, #48]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f240 1201 	movw	r2, #257	@ 0x101
 8002664:	4293      	cmp	r3, r2
 8002666:	d106      	bne.n	8002676 <FLASH_SetErrorCode+0x86>
 8002668:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a06      	ldr	r2, [pc, #24]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	61d3      	str	r3, [r2, #28]
}  
 8002674:	e002      	b.n	800267c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <FLASH_SetErrorCode+0x98>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	60d3      	str	r3, [r2, #12]
}  
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000
 800268c:	20000560 	.word	0x20000560

08002690 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <HAL_FLASHEx_Erase+0xd0>)
 80026a4:	7e1b      	ldrb	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_FLASHEx_Erase+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e053      	b.n	8002756 <HAL_FLASHEx_Erase+0xc6>
 80026ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_FLASHEx_Erase+0xd0>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d116      	bne.n	80026ea <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026c0:	f7ff ff50 	bl	8002564 <FLASH_WaitForLastOperation>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d141      	bne.n	800274e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f000 f84c 	bl	8002768 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026d4:	f7ff ff46 	bl	8002564 <FLASH_WaitForLastOperation>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026dc:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <HAL_FLASHEx_Erase+0xd4>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <HAL_FLASHEx_Erase+0xd4>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6113      	str	r3, [r2, #16]
 80026e8:	e031      	b.n	800274e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026ee:	f7ff ff39 	bl	8002564 <FLASH_WaitForLastOperation>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d12a      	bne.n	800274e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295
 80026fe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	e019      	b.n	800273c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002708:	68b8      	ldr	r0, [r7, #8]
 800270a:	f000 f849 	bl	80027a0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800270e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002712:	f7ff ff27 	bl	8002564 <FLASH_WaitForLastOperation>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_FLASHEx_Erase+0xd4>)
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	4a11      	ldr	r2, [pc, #68]	@ (8002764 <HAL_FLASHEx_Erase+0xd4>)
 8002720:	f023 0302 	bic.w	r3, r3, #2
 8002724:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	601a      	str	r2, [r3, #0]
            break;
 8002732:	e00c      	b.n	800274e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800273a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	029a      	lsls	r2, r3, #10
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4413      	add	r3, r2
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3dc      	bcc.n	8002708 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <HAL_FLASHEx_Erase+0xd0>)
 8002750:	2200      	movs	r2, #0
 8002752:	761a      	strb	r2, [r3, #24]

  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000560 	.word	0x20000560
 8002764:	40022000 	.word	0x40022000

08002768 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <FLASH_MassErase+0x30>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <FLASH_MassErase+0x34>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <FLASH_MassErase+0x34>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <FLASH_MassErase+0x34>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <FLASH_MassErase+0x34>)
 8002788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800278c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000560 	.word	0x20000560
 800279c:	40022000 	.word	0x40022000

080027a0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <FLASH_PageErase+0x38>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027ae:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <FLASH_PageErase+0x3c>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <FLASH_PageErase+0x3c>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <FLASH_PageErase+0x3c>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <FLASH_PageErase+0x3c>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <FLASH_PageErase+0x3c>)
 80027c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000560 	.word	0x20000560
 80027dc:	40022000 	.word	0x40022000

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b08b      	sub	sp, #44	@ 0x2c
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e169      	b.n	8002ac8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027f4:	2201      	movs	r2, #1
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8158 	bne.w	8002ac2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a9a      	ldr	r2, [pc, #616]	@ (8002a80 <HAL_GPIO_Init+0x2a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d05e      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 800281c:	4a98      	ldr	r2, [pc, #608]	@ (8002a80 <HAL_GPIO_Init+0x2a0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d875      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002822:	4a98      	ldr	r2, [pc, #608]	@ (8002a84 <HAL_GPIO_Init+0x2a4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d058      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002828:	4a96      	ldr	r2, [pc, #600]	@ (8002a84 <HAL_GPIO_Init+0x2a4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d86f      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800282e:	4a96      	ldr	r2, [pc, #600]	@ (8002a88 <HAL_GPIO_Init+0x2a8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d052      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002834:	4a94      	ldr	r2, [pc, #592]	@ (8002a88 <HAL_GPIO_Init+0x2a8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d869      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800283a:	4a94      	ldr	r2, [pc, #592]	@ (8002a8c <HAL_GPIO_Init+0x2ac>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04c      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 8002840:	4a92      	ldr	r2, [pc, #584]	@ (8002a8c <HAL_GPIO_Init+0x2ac>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d863      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002846:	4a92      	ldr	r2, [pc, #584]	@ (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d046      	beq.n	80028da <HAL_GPIO_Init+0xfa>
 800284c:	4a90      	ldr	r2, [pc, #576]	@ (8002a90 <HAL_GPIO_Init+0x2b0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d85d      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 8002852:	2b12      	cmp	r3, #18
 8002854:	d82a      	bhi.n	80028ac <HAL_GPIO_Init+0xcc>
 8002856:	2b12      	cmp	r3, #18
 8002858:	d859      	bhi.n	800290e <HAL_GPIO_Init+0x12e>
 800285a:	a201      	add	r2, pc, #4	@ (adr r2, 8002860 <HAL_GPIO_Init+0x80>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	080028db 	.word	0x080028db
 8002864:	080028b5 	.word	0x080028b5
 8002868:	080028c7 	.word	0x080028c7
 800286c:	08002909 	.word	0x08002909
 8002870:	0800290f 	.word	0x0800290f
 8002874:	0800290f 	.word	0x0800290f
 8002878:	0800290f 	.word	0x0800290f
 800287c:	0800290f 	.word	0x0800290f
 8002880:	0800290f 	.word	0x0800290f
 8002884:	0800290f 	.word	0x0800290f
 8002888:	0800290f 	.word	0x0800290f
 800288c:	0800290f 	.word	0x0800290f
 8002890:	0800290f 	.word	0x0800290f
 8002894:	0800290f 	.word	0x0800290f
 8002898:	0800290f 	.word	0x0800290f
 800289c:	0800290f 	.word	0x0800290f
 80028a0:	0800290f 	.word	0x0800290f
 80028a4:	080028bd 	.word	0x080028bd
 80028a8:	080028d1 	.word	0x080028d1
 80028ac:	4a79      	ldr	r2, [pc, #484]	@ (8002a94 <HAL_GPIO_Init+0x2b4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028b2:	e02c      	b.n	800290e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	623b      	str	r3, [r7, #32]
          break;
 80028ba:	e029      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	3304      	adds	r3, #4
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e024      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	3308      	adds	r3, #8
 80028cc:	623b      	str	r3, [r7, #32]
          break;
 80028ce:	e01f      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	330c      	adds	r3, #12
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e01a      	b.n	8002910 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028e2:	2304      	movs	r3, #4
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e013      	b.n	8002910 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	611a      	str	r2, [r3, #16]
          break;
 80028fa:	e009      	b.n	8002910 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028fc:	2308      	movs	r3, #8
 80028fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	615a      	str	r2, [r3, #20]
          break;
 8002906:	e003      	b.n	8002910 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
          break;
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x130>
          break;
 800290e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	d801      	bhi.n	800291a <HAL_GPIO_Init+0x13a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	e001      	b.n	800291e <HAL_GPIO_Init+0x13e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2bff      	cmp	r3, #255	@ 0xff
 8002924:	d802      	bhi.n	800292c <HAL_GPIO_Init+0x14c>
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	e002      	b.n	8002932 <HAL_GPIO_Init+0x152>
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	3b08      	subs	r3, #8
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	210f      	movs	r1, #15
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	431a      	orrs	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80b1 	beq.w	8002ac2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002960:	4b4d      	ldr	r3, [pc, #308]	@ (8002a98 <HAL_GPIO_Init+0x2b8>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a4c      	ldr	r2, [pc, #304]	@ (8002a98 <HAL_GPIO_Init+0x2b8>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a98 <HAL_GPIO_Init+0x2b8>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002978:	4a48      	ldr	r2, [pc, #288]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a40      	ldr	r2, [pc, #256]	@ (8002aa0 <HAL_GPIO_Init+0x2c0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_GPIO_Init+0x1ec>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3f      	ldr	r2, [pc, #252]	@ (8002aa4 <HAL_GPIO_Init+0x2c4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <HAL_GPIO_Init+0x1e8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa8 <HAL_GPIO_Init+0x2c8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x1e4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3d      	ldr	r2, [pc, #244]	@ (8002aac <HAL_GPIO_Init+0x2cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_Init+0x1e0>
 80029bc:	2303      	movs	r3, #3
 80029be:	e006      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e004      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_GPIO_Init+0x1ee>
 80029cc:	2300      	movs	r3, #0
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	f002 0203 	and.w	r2, r2, #3
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	4093      	lsls	r3, r2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029de:	492f      	ldr	r1, [pc, #188]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3302      	adds	r3, #2
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029f8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	492c      	ldr	r1, [pc, #176]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a06:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4928      	ldr	r1, [pc, #160]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a20:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4922      	ldr	r1, [pc, #136]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a2e:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	491e      	ldr	r1, [pc, #120]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4918      	ldr	r1, [pc, #96]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a56:	4b16      	ldr	r3, [pc, #88]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4914      	ldr	r1, [pc, #80]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d021      	beq.n	8002ab4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a70:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	490e      	ldr	r1, [pc, #56]	@ (8002ab0 <HAL_GPIO_Init+0x2d0>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	e021      	b.n	8002ac2 <HAL_GPIO_Init+0x2e2>
 8002a7e:	bf00      	nop
 8002a80:	10320000 	.word	0x10320000
 8002a84:	10310000 	.word	0x10310000
 8002a88:	10220000 	.word	0x10220000
 8002a8c:	10210000 	.word	0x10210000
 8002a90:	10120000 	.word	0x10120000
 8002a94:	10110000 	.word	0x10110000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40010c00 	.word	0x40010c00
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40011400 	.word	0x40011400
 8002ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_GPIO_Init+0x304>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4909      	ldr	r1, [pc, #36]	@ (8002ae4 <HAL_GPIO_Init+0x304>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f47f ae8e 	bne.w	80027f4 <HAL_GPIO_Init+0x14>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	372c      	adds	r7, #44	@ 0x2c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40010400 	.word	0x40010400

08002ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b26:	787b      	ldrb	r3, [r7, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b32:	e003      	b.n	8002b3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	041a      	lsls	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	611a      	str	r2, [r3, #16]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e12b      	b.n	8002db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe feb4 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	@ 0x24
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bac:	f002 fda2 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a81      	ldr	r2, [pc, #516]	@ (8002dbc <HAL_I2C_Init+0x274>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d807      	bhi.n	8002bcc <HAL_I2C_Init+0x84>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a80      	ldr	r2, [pc, #512]	@ (8002dc0 <HAL_I2C_Init+0x278>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	bf94      	ite	ls
 8002bc4:	2301      	movls	r3, #1
 8002bc6:	2300      	movhi	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e006      	b.n	8002bda <HAL_I2C_Init+0x92>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a7d      	ldr	r2, [pc, #500]	@ (8002dc4 <HAL_I2C_Init+0x27c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bf94      	ite	ls
 8002bd4:	2301      	movls	r3, #1
 8002bd6:	2300      	movhi	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0e7      	b.n	8002db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a78      	ldr	r2, [pc, #480]	@ (8002dc8 <HAL_I2C_Init+0x280>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0c9b      	lsrs	r3, r3, #18
 8002bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a6a      	ldr	r2, [pc, #424]	@ (8002dbc <HAL_I2C_Init+0x274>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d802      	bhi.n	8002c1c <HAL_I2C_Init+0xd4>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	e009      	b.n	8002c30 <HAL_I2C_Init+0xe8>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	4a69      	ldr	r2, [pc, #420]	@ (8002dcc <HAL_I2C_Init+0x284>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	3301      	adds	r3, #1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	495c      	ldr	r1, [pc, #368]	@ (8002dbc <HAL_I2C_Init+0x274>)
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	d819      	bhi.n	8002c84 <HAL_I2C_Init+0x13c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e59      	subs	r1, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c64:	400b      	ands	r3, r1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_I2C_Init+0x138>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1e59      	subs	r1, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7e:	e051      	b.n	8002d24 <HAL_I2C_Init+0x1dc>
 8002c80:	2304      	movs	r3, #4
 8002c82:	e04f      	b.n	8002d24 <HAL_I2C_Init+0x1dc>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d111      	bne.n	8002cb0 <HAL_I2C_Init+0x168>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e012      	b.n	8002cd6 <HAL_I2C_Init+0x18e>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	0099      	lsls	r1, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Init+0x196>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e022      	b.n	8002d24 <HAL_I2C_Init+0x1dc>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10e      	bne.n	8002d04 <HAL_I2C_Init+0x1bc>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e58      	subs	r0, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	440b      	add	r3, r1
 8002cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d02:	e00f      	b.n	8002d24 <HAL_I2C_Init+0x1dc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	0099      	lsls	r1, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	6809      	ldr	r1, [r1, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6911      	ldr	r1, [r2, #16]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68d2      	ldr	r2, [r2, #12]
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	000186a0 	.word	0x000186a0
 8002dc0:	001e847f 	.word	0x001e847f
 8002dc4:	003d08ff 	.word	0x003d08ff
 8002dc8:	431bde83 	.word	0x431bde83
 8002dcc:	10624dd3 	.word	0x10624dd3

08002dd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dea:	f7ff f9bd 	bl	8002168 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	f040 80d9 	bne.w	8002fb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2319      	movs	r3, #25
 8002e04:	2201      	movs	r2, #1
 8002e06:	496d      	ldr	r1, [pc, #436]	@ (8002fbc <HAL_I2C_Mem_Write+0x1ec>)
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f971 	bl	80030f0 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Mem_Write+0x56>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0c5      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d007      	beq.n	8002e4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2221      	movs	r2, #33	@ 0x21
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2240      	movs	r2, #64	@ 0x40
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc0 <HAL_I2C_Mem_Write+0x1f0>)
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e8e:	88f8      	ldrh	r0, [r7, #6]
 8002e90:	893a      	ldrh	r2, [r7, #8]
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f890 	bl	8002fc4 <I2C_RequestMemoryWrite>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d052      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e081      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fa36 	bl	8003324 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Mem_Write+0x180>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1aa      	bne.n	8002eae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fa29 	bl	80033b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d107      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e016      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f878 	bl	80030f0 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003014:	d103      	bne.n	800301e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e05f      	b.n	80030e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	6a3a      	ldr	r2, [r7, #32]
 8003036:	492d      	ldr	r1, [pc, #180]	@ (80030ec <I2C_RequestMemoryWrite+0x128>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f8d3 	bl	80031e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04c      	b.n	80030e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003060:	6a39      	ldr	r1, [r7, #32]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f95e 	bl	8003324 <I2C_WaitOnTXEFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b04      	cmp	r3, #4
 8003074:	d107      	bne.n	8003086 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e02b      	b.n	80030e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003090:	893b      	ldrh	r3, [r7, #8]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	e021      	b.n	80030e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f938 	bl	8003324 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d107      	bne.n	80030d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e005      	b.n	80030e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d6:	893b      	ldrh	r3, [r7, #8]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	00010002 	.word	0x00010002

080030f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003100:	e048      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d044      	beq.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7ff f82d 	bl	8002168 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d139      	bne.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d10d      	bne.n	8003146 <I2C_WaitOnFlagUntilTimeout+0x56>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	e00c      	b.n	8003160 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	429a      	cmp	r2, r3
 8003164:	d116      	bne.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e023      	b.n	80031dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10d      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	e00c      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d093      	beq.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f2:	e071      	b.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003202:	d123      	bne.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800321c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e067      	b.n	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d041      	beq.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe ff88 	bl	8002168 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d136      	bne.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10c      	bne.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e00b      	b.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	43da      	mvns	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4013      	ands	r3, r2
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e021      	b.n	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10c      	bne.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e00b      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f af6d 	bne.w	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003330:	e034      	b.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f886 	bl	8003444 <I2C_IsAcknowledgeFailed>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e034      	b.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d028      	beq.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7fe ff0d 	bl	8002168 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11d      	bne.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b80      	cmp	r3, #128	@ 0x80
 800336c:	d016      	beq.n	800339c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e007      	b.n	80033ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d1c3      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c0:	e034      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f83e 	bl	8003444 <I2C_IsAcknowledgeFailed>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e034      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d028      	beq.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe fec5 	bl	8002168 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11d      	bne.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d016      	beq.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d1c3      	bne.n	80033c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345a:	d11b      	bne.n	8003494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0e8      	b.n	8003684 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f007 fa54 	bl	800a974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 f845 	bl	800656e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ee:	f003 f81b 	bl	8006528 <USB_CoreInit>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0bf      	b.n	8003684 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f003 f849 	bl	80065a2 <USB_SetCurrentMode>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0b0      	b.n	8003684 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e03e      	b.n	80035a6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3311      	adds	r3, #17
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3310      	adds	r3, #16
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3313      	adds	r3, #19
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3320      	adds	r3, #32
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	3324      	adds	r3, #36	@ 0x24
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	3301      	adds	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3bb      	bcc.n	8003528 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e044      	b.n	8003640 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	440b      	add	r3, r1
 80035c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	440b      	add	r3, r1
 8003606:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3301      	adds	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	791b      	ldrb	r3, [r3, #4]
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3b5      	bcc.n	80035b6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003654:	f002 ffb1 	bl	80065ba <USB_DevInit>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00c      	b.n	8003684 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f005 fa30 	bl	8008ae2 <USB_DevDisconnect>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Start+0x16>
 800369e:	2302      	movs	r3, #2
 80036a0:	e016      	b.n	80036d0 <HAL_PCD_Start+0x44>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 ff47 	bl	8006542 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036b4:	2101      	movs	r1, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f007 fbcf 	bl	800ae5a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f005 fa04 	bl	8008ace <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fa06 	bl	8008af6 <USB_ReadInterrupts>
 80036ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb1a 	bl	8003d30 <PCD_EP_ISR_Handler>

    return;
 80036fc:	e119      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f007 f9a2 	bl	800aa6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003726:	2100      	movs	r1, #0
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f905 	bl	8003938 <HAL_PCD_SetAddress>

    return;
 800372e:	e100      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003752:	e0ee      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003770:	b292      	uxth	r2, r2
 8003772:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003776:	e0dc      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d027      	beq.n	80037d2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0204 	bic.w	r2, r2, #4
 8003794:	b292      	uxth	r2, r2
 8003796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	b292      	uxth	r2, r2
 80037ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f007 f992 	bl	800aadc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037ca:	b292      	uxth	r2, r2
 80037cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037d0:	e0af      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8083 	beq.w	80038e4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e010      	b.n	8003806 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	8812      	ldrh	r2, [r2, #0]
 80037f4:	b292      	uxth	r2, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	3320      	adds	r3, #32
 80037fa:	443b      	add	r3, r7
 80037fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003800:	7ffb      	ldrb	r3, [r7, #31]
 8003802:	3301      	adds	r3, #1
 8003804:	77fb      	strb	r3, [r7, #31]
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b07      	cmp	r3, #7
 800380a:	d9eb      	bls.n	80037e4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	b292      	uxth	r2, r2
 8003820:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	b292      	uxth	r2, r2
 8003838:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800383c:	bf00      	nop
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003846:	b29b      	uxth	r3, r3
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f6      	beq.n	800383e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003862:	b292      	uxth	r2, r2
 8003864:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e00f      	b.n	800388e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	4611      	mov	r1, r2
 8003876:	7ffa      	ldrb	r2, [r7, #31]
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	440a      	add	r2, r1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	3320      	adds	r3, #32
 8003880:	443b      	add	r3, r7
 8003882:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003886:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	3301      	adds	r3, #1
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	7ffb      	ldrb	r3, [r7, #31]
 8003890:	2b07      	cmp	r3, #7
 8003892:	d9ec      	bls.n	800386e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	b292      	uxth	r2, r2
 80038a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	b292      	uxth	r2, r2
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0204 	orr.w	r2, r2, #4
 80038d6:	b292      	uxth	r2, r2
 80038d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f007 f8e3 	bl	800aaa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038e2:	e026      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00f      	beq.n	800390e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003900:	b292      	uxth	r2, r2
 8003902:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f007 f8a1 	bl	800aa4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800390c:	e011      	b.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392a:	b292      	uxth	r2, r2
 800392c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003930:	bf00      	nop
  }
}
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_PCD_SetAddress+0x1a>
 800394e:	2302      	movs	r3, #2
 8003950:	e012      	b.n	8003978 <HAL_PCD_SetAddress+0x40>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f005 f89d 	bl	8008aa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	70fb      	strb	r3, [r7, #3]
 8003992:	460b      	mov	r3, r1
 8003994:	803b      	strh	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800399e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da0e      	bge.n	80039c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0207 	and.w	r2, r3, #7
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3310      	adds	r3, #16
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	705a      	strb	r2, [r3, #1]
 80039c2:	e00e      	b.n	80039e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 0207 	and.w	r2, r3, #7
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ee:	883a      	ldrh	r2, [r7, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	78ba      	ldrb	r2, [r7, #2]
 80039f8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039fa:	78bb      	ldrb	r3, [r7, #2]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_EP_Open+0x94>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_Open+0xb2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 fde6 	bl	80065f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a30:	7afb      	ldrb	r3, [r7, #11]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0e      	bge.n	8003a6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0207 	and.w	r2, r3, #7
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
 8003a6a:	e00e      	b.n	8003a8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_EP_Close+0x6a>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e00e      	b.n	8003ac2 <HAL_PCD_EP_Close+0x88>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68f9      	ldr	r1, [r7, #12]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 f95e 	bl	8006d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	f003 0207 	and.w	r2, r3, #7
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f003 fb15 	bl	800714c <USB_EPStartXfer>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	460b      	mov	r3, r1
 8003b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	f003 0207 	and.w	r2, r3, #7
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	3310      	adds	r3, #16
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fac7 	bl	800714c <USB_EPStartXfer>

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	7912      	ldrb	r2, [r2, #4]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e04c      	b.n	8003c80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da0e      	bge.n	8003c0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 0207 	and.w	r2, r3, #7
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	705a      	strb	r2, [r3, #1]
 8003c0a:	e00c      	b.n	8003c26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_PCD_EP_SetStall+0x7e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e01c      	b.n	8003c80 <HAL_PCD_EP_SetStall+0xb8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 fe2a 	bl	80088ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f004 ff4f 	bl	8008b14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	7912      	ldrb	r2, [r2, #4]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e040      	b.n	8003d28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0e      	bge.n	8003ccc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 0207 	and.w	r2, r3, #7
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	705a      	strb	r2, [r3, #1]
 8003cca:	e00e      	b.n	8003cea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_EP_ClrStall+0x82>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e00e      	b.n	8003d28 <HAL_PCD_EP_ClrStall+0xa0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f004 fe18 	bl	800894e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b096      	sub	sp, #88	@ 0x58
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d38:	e3bb      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d54:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 8175 	bne.w	8004048 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d14e      	bne.n	8003e08 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	81fb      	strh	r3, [r7, #14]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3310      	adds	r3, #16
 8003d92:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	3302      	adds	r3, #2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	441a      	add	r2, r3
 8003dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f006 fe22 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7b5b      	ldrb	r3, [r3, #13]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8368 	beq.w	80044b2 <PCD_EP_ISR_Handler+0x782>
 8003de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 8363 	bne.w	80044b2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7b5b      	ldrb	r3, [r3, #13]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	735a      	strb	r2, [r3, #13]
 8003e06:	e354      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e0e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d034      	beq.n	8003e90 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3306      	adds	r3, #6
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f004 fea6 	bl	8008bb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e76:	4013      	ands	r3, r2
 8003e78:	823b      	strh	r3, [r7, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	8a3a      	ldrh	r2, [r7, #16]
 8003e80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e84:	b292      	uxth	r2, r2
 8003e86:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f006 fd99 	bl	800a9c0 <HAL_PCD_SetupStageCallback>
 8003e8e:	e310      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e90:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f280 830c 	bge.w	80044b2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	83fb      	strh	r3, [r7, #30]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8bfa      	ldrh	r2, [r7, #30]
 8003eb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3306      	adds	r3, #6
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <PCD_EP_ISR_Handler+0x1f0>
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efa:	6959      	ldr	r1, [r3, #20]
 8003efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f004 fe56 	bl	8008bb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	441a      	add	r2, r3
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f18:	2100      	movs	r1, #0
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f006 fd62 	bl	800a9e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 82bd 	bne.w	80044b2 <PCD_EP_ISR_Handler+0x782>
 8003f38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f3c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f44:	f000 82b5 	beq.w	80044b2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f7e:	d91d      	bls.n	8003fbc <PCD_EP_ISR_Handler+0x28c>
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <PCD_EP_ISR_Handler+0x26a>
 8003f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f96:	3b01      	subs	r3, #1
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e026      	b.n	800400a <PCD_EP_ISR_Handler+0x2da>
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <PCD_EP_ISR_Handler+0x2aa>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e017      	b.n	800400a <PCD_EP_ISR_Handler+0x2da>
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <PCD_EP_ISR_Handler+0x2c4>
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	029b      	lsls	r3, r3, #10
 8004000:	b29b      	uxth	r3, r3
 8004002:	4313      	orrs	r3, r2
 8004004:	b29a      	uxth	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	827b      	strh	r3, [r7, #18]
 800401c:	8a7b      	ldrh	r3, [r7, #18]
 800401e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004022:	827b      	strh	r3, [r7, #18]
 8004024:	8a7b      	ldrh	r3, [r7, #18]
 8004026:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800402a:	827b      	strh	r3, [r7, #18]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	8a7b      	ldrh	r3, [r7, #18]
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800403e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
 8004046:	e234      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800405c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004060:	2b00      	cmp	r3, #0
 8004062:	f280 80fc 	bge.w	800425e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800407c:	4013      	ands	r3, r2
 800407e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004094:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004098:	b292      	uxth	r2, r2
 800409a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800409c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	7b1b      	ldrb	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d125      	bne.n	8004106 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	3306      	adds	r3, #6
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80040e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8092 	beq.w	8004214 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f6:	6959      	ldr	r1, [r3, #20]
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	88da      	ldrh	r2, [r3, #6]
 80040fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004100:	f004 fd59 	bl	8008bb6 <USB_ReadPMA>
 8004104:	e086      	b.n	8004214 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	78db      	ldrb	r3, [r3, #3]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d10a      	bne.n	8004124 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800410e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004112:	461a      	mov	r2, r3
 8004114:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9d9 	bl	80044ce <HAL_PCD_EP_DB_Receive>
 800411c:	4603      	mov	r3, r0
 800411e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004122:	e077      	b.n	8004214 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800413a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800415c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004160:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	3302      	adds	r3, #2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02e      	beq.n	8004214 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	6959      	ldr	r1, [r3, #20]
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	891a      	ldrh	r2, [r3, #8]
 80041c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041c6:	f004 fcf6 	bl	8008bb6 <USB_ReadPMA>
 80041ca:	e023      	b.n	8004214 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	3306      	adds	r3, #6
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004206:	6959      	ldr	r1, [r3, #20]
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	895a      	ldrh	r2, [r3, #10]
 800420c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004210:	f004 fcd1 	bl	8008bb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800421c:	441a      	add	r2, r3
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800422a:	441a      	add	r2, r3
 800422c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <PCD_EP_ISR_Handler+0x514>
 8004238:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d206      	bcs.n	8004252 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 fbca 	bl	800a9e4 <HAL_PCD_DataOutStageCallback>
 8004250:	e005      	b.n	800425e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004258:	4618      	mov	r0, r3
 800425a:	f002 ff77 	bl	800714c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800425e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8123 	beq.w	80044b2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800426c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3310      	adds	r3, #16
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80042b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80042bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042be:	78db      	ldrb	r3, [r3, #3]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80a2 	bne.w	800440a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	7b1b      	ldrb	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8093 	beq.w	80043fc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d046      	beq.n	8004370 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d126      	bne.n	8004338 <PCD_EP_ISR_Handler+0x608>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	4413      	add	r3, r2
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	011a      	lsls	r2, r3, #4
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	4413      	add	r3, r2
 800430c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431c:	b29a      	uxth	r2, r3
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004330:	b29a      	uxth	r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e061      	b.n	80043fc <PCD_EP_ISR_Handler+0x6cc>
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d15d      	bne.n	80043fc <PCD_EP_ISR_Handler+0x6cc>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004354:	4413      	add	r3, r2
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	4413      	add	r3, r2
 8004362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	2200      	movs	r2, #0
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e045      	b.n	80043fc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	785b      	ldrb	r3, [r3, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d126      	bne.n	80043cc <PCD_EP_ISR_Handler+0x69c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	4413      	add	r3, r2
 8004394:	637b      	str	r3, [r7, #52]	@ 0x34
 8004396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	011a      	lsls	r2, r3, #4
 800439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439e:	4413      	add	r3, r2
 80043a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	e017      	b.n	80043fc <PCD_EP_ISR_Handler+0x6cc>
 80043cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d113      	bne.n	80043fc <PCD_EP_ISR_Handler+0x6cc>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e2:	4413      	add	r3, r2
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	011a      	lsls	r2, r3, #4
 80043ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ee:	4413      	add	r3, r2
 80043f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	2200      	movs	r2, #0
 80043fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f006 fb09 	bl	800aa1a <HAL_PCD_DataInStageCallback>
 8004408:	e053      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800440a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d146      	bne.n	80044a4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	3302      	adds	r3, #2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800444a:	429a      	cmp	r2, r3
 800444c:	d907      	bls.n	800445e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445a:	619a      	str	r2, [r3, #24]
 800445c:	e002      	b.n	8004464 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800445e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004460:	2200      	movs	r2, #0
 8004462:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800446c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f006 fad1 	bl	800aa1a <HAL_PCD_DataInStageCallback>
 8004478:	e01b      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004482:	441a      	add	r2, r3
 8004484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004486:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004490:	441a      	add	r2, r3
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800449c:	4618      	mov	r0, r3
 800449e:	f002 fe55 	bl	800714c <USB_EPStartXfer>
 80044a2:	e006      	b.n	80044b2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044a8:	461a      	mov	r2, r3
 80044aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f91b 	bl	80046e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	b21b      	sxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f6ff ac3b 	blt.w	8003d3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3758      	adds	r7, #88	@ 0x58
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d07e      	beq.n	80045e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	3302      	adds	r3, #2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	8b7b      	ldrh	r3, [r7, #26]
 8004516:	429a      	cmp	r2, r3
 8004518:	d306      	bcc.n	8004528 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	8b7b      	ldrh	r3, [r7, #26]
 8004520:	1ad2      	subs	r2, r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	619a      	str	r2, [r3, #24]
 8004526:	e002      	b.n	800452e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d123      	bne.n	800457e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004550:	833b      	strh	r3, [r7, #24]
 8004552:	8b3b      	ldrh	r3, [r7, #24]
 8004554:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004558:	833b      	strh	r3, [r7, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8b3b      	ldrh	r3, [r7, #24]
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01f      	beq.n	80045c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800459e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a2:	82fb      	strh	r3, [r7, #22]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	8afb      	ldrh	r3, [r7, #22]
 80045b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8087 	beq.w	80046de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6959      	ldr	r1, [r3, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	891a      	ldrh	r2, [r3, #8]
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	f004 faea 	bl	8008bb6 <USB_ReadPMA>
 80045e2:	e07c      	b.n	80046de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	3306      	adds	r3, #6
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800460c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	429a      	cmp	r2, r3
 8004616:	d306      	bcc.n	8004626 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	8b7b      	ldrh	r3, [r7, #26]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	619a      	str	r2, [r3, #24]
 8004624:	e002      	b.n	800462c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d123      	bne.n	800467c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	83fb      	strh	r3, [r7, #30]
 8004650:	8bfb      	ldrh	r3, [r7, #30]
 8004652:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004656:	83fb      	strh	r3, [r7, #30]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	8bfb      	ldrh	r3, [r7, #30]
 8004668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800466c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004678:	b29b      	uxth	r3, r3
 800467a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11f      	bne.n	80046c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800469c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a0:	83bb      	strh	r3, [r7, #28]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	441a      	add	r2, r3
 80046b0:	8bbb      	ldrh	r3, [r7, #28]
 80046b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046c6:	8b7b      	ldrh	r3, [r7, #26]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6959      	ldr	r1, [r3, #20]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	895a      	ldrh	r2, [r3, #10]
 80046d8:	8b7b      	ldrh	r3, [r7, #26]
 80046da:	f004 fa6c 	bl	8008bb6 <USB_ReadPMA>
    }
  }

  return count;
 80046de:	8b7b      	ldrh	r3, [r7, #26]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0a4      	sub	sp, #144	@ 0x90
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 81dd 	beq.w	8004abc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	3302      	adds	r3, #2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004736:	429a      	cmp	r2, r3
 8004738:	d907      	bls.n	800474a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	619a      	str	r2, [r3, #24]
 8004748:	e002      	b.n	8004750 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 80b9 	bne.w	80048cc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d126      	bne.n	80047b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	4413      	add	r3, r2
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004782:	4413      	add	r3, r2
 8004784:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004794:	b29a      	uxth	r2, r3
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e01a      	b.n	80047e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d116      	bne.n	80047e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	4413      	add	r3, r2
 80047ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d8:	4413      	add	r3, r2
 80047da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047de:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d126      	bne.n	8004842 <HAL_PCD_EP_DB_Transmit+0x15a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	011a      	lsls	r2, r3, #4
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004826:	b29a      	uxth	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e017      	b.n	8004872 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d113      	bne.n	8004872 <HAL_PCD_EP_DB_Transmit+0x18a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004852:	b29b      	uxth	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	4413      	add	r3, r2
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	011a      	lsls	r2, r3, #4
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	4413      	add	r3, r2
 8004866:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	2200      	movs	r2, #0
 8004870:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	4619      	mov	r1, r3
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f006 f8ce 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 82fc 	beq.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a4:	82fb      	strh	r3, [r7, #22]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	8afb      	ldrh	r3, [r7, #22]
 80048b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
 80048ca:	e2da      	b.n	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d021      	beq.n	800491a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004920:	2b01      	cmp	r3, #1
 8004922:	f040 82ae 	bne.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800492e:	441a      	add	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800493c:	441a      	add	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d30b      	bcc.n	8004966 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	621a      	str	r2, [r3, #32]
 8004964:	e017      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800496e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800497e:	e00a      	b.n	8004996 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	785b      	ldrb	r3, [r3, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d165      	bne.n	8004a6a <HAL_PCD_EP_DB_Transmit+0x382>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b2:	4413      	add	r3, r2
 80049b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	011a      	lsls	r2, r3, #4
 80049bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049be:	4413      	add	r3, r2
 80049c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049da:	2b3e      	cmp	r3, #62	@ 0x3e
 80049dc:	d91d      	bls.n	8004a1a <HAL_PCD_EP_DB_Transmit+0x332>
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_PCD_EP_DB_Transmit+0x310>
 80049f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f4:	3b01      	subs	r3, #1
 80049f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	e044      	b.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <HAL_PCD_EP_DB_Transmit+0x350>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e035      	b.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4e:	3301      	adds	r3, #1
 8004a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	e01c      	b.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d118      	bne.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a86:	4413      	add	r3, r2
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	011a      	lsls	r2, r3, #4
 8004a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6959      	ldr	r1, [r3, #20]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	891a      	ldrh	r2, [r3, #8]
 8004ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f004 f838 	bl	8008b2a <USB_WritePMA>
 8004aba:	e1e2      	b.n	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3306      	adds	r3, #6
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d307      	bcc.n	8004b04 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	619a      	str	r2, [r3, #24]
 8004b02:	e002      	b.n	8004b0a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 80c0 	bne.w	8004c94 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d126      	bne.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x482>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b30:	4413      	add	r3, r2
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	011a      	lsls	r2, r3, #4
 8004b3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e01a      	b.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d116      	bne.n	8004ba0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b86:	4413      	add	r3, r2
 8004b88:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	011a      	lsls	r2, r3, #4
 8004b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b92:	4413      	add	r3, r2
 8004b94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b98:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d12b      	bne.n	8004c06 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc2:	4413      	add	r3, r2
 8004bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bce:	4413      	add	r3, r2
 8004bd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	e017      	b.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d113      	bne.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c1c:	4413      	add	r3, r2
 8004c1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c28:	4413      	add	r3, r2
 8004c2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c32:	2200      	movs	r2, #0
 8004c34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f005 feec 	bl	800aa1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 811a 	bne.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c68:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
 8004c92:	e0f6      	b.n	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d121      	bne.n	8004ce2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	f040 80ca 	bne.w	8004e82 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cf6:	441a      	add	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d04:	441a      	add	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d30b      	bcc.n	8004d2e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	621a      	str	r2, [r3, #32]
 8004d2c:	e017      	b.n	8004d5e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d108      	bne.n	8004d48 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004d36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d46:	e00a      	b.n	8004d5e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2200      	movs	r2, #0
 8004d54:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d165      	bne.n	8004e38 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d80:	4413      	add	r3, r2
 8004d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	011a      	lsls	r2, r3, #4
 8004d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004daa:	d91d      	bls.n	8004de8 <HAL_PCD_EP_DB_Transmit+0x700>
 8004dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e041      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x784>
 8004de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e032      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_PCD_EP_DB_Transmit+0x738>
 8004e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	029b      	lsls	r3, r3, #10
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e34:	801a      	strh	r2, [r3, #0]
 8004e36:	e019      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d115      	bne.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4e:	4413      	add	r3, r2
 8004e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e60:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e6a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6959      	ldr	r1, [r3, #20]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	895a      	ldrh	r2, [r3, #10]
 8004e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f003 fe54 	bl	8008b2a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e9c:	82bb      	strh	r3, [r7, #20]
 8004e9e:	8abb      	ldrh	r3, [r7, #20]
 8004ea0:	f083 0310 	eor.w	r3, r3, #16
 8004ea4:	82bb      	strh	r3, [r7, #20]
 8004ea6:	8abb      	ldrh	r3, [r7, #20]
 8004ea8:	f083 0320 	eor.w	r3, r3, #32
 8004eac:	82bb      	strh	r3, [r7, #20]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8abb      	ldrh	r3, [r7, #20]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3790      	adds	r7, #144	@ 0x90
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	817b      	strh	r3, [r7, #10]
 8004eea:	4613      	mov	r3, r2
 8004eec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004eee:	897b      	ldrh	r3, [r7, #10]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	f003 0207 	and.w	r2, r3, #7
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	3310      	adds	r3, #16
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e009      	b.n	8004f26 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f12:	897a      	ldrh	r2, [r7, #10]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	80da      	strh	r2, [r3, #6]
 8004f3a:	e00b      	b.n	8004f54 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e272      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8087 	beq.w	800508e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f80:	4b92      	ldr	r3, [pc, #584]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d112      	bne.n	8004fbe <HAL_RCC_OscConfig+0x5e>
 8004f98:	4b8c      	ldr	r3, [pc, #560]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa4:	d10b      	bne.n	8004fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa6:	4b89      	ldr	r3, [pc, #548]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d06c      	beq.n	800508c <HAL_RCC_OscConfig+0x12c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d168      	bne.n	800508c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e24c      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x76>
 8004fc8:	4b80      	ldr	r3, [pc, #512]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a7f      	ldr	r2, [pc, #508]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e02e      	b.n	8005034 <HAL_RCC_OscConfig+0xd4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x98>
 8004fde:	4b7b      	ldr	r3, [pc, #492]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a7a      	ldr	r2, [pc, #488]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b78      	ldr	r3, [pc, #480]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a77      	ldr	r2, [pc, #476]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e01d      	b.n	8005034 <HAL_RCC_OscConfig+0xd4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0xbc>
 8005002:	4b72      	ldr	r3, [pc, #456]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a71      	ldr	r2, [pc, #452]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b6f      	ldr	r3, [pc, #444]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a6e      	ldr	r2, [pc, #440]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0xd4>
 800501c:	4b6b      	ldr	r3, [pc, #428]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6a      	ldr	r2, [pc, #424]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b68      	ldr	r3, [pc, #416]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a67      	ldr	r2, [pc, #412]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d013      	beq.n	8005064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503c:	f7fd f894 	bl	8002168 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005044:	f7fd f890 	bl	8002168 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e200      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b5d      	ldr	r3, [pc, #372]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0xe4>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd f880 	bl	8002168 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fd f87c 	bl	8002168 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1ec      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507e:	4b53      	ldr	r3, [pc, #332]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x10c>
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d063      	beq.n	8005162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800509a:	4b4c      	ldr	r3, [pc, #304]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050a6:	4b49      	ldr	r3, [pc, #292]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d11c      	bne.n	80050ec <HAL_RCC_OscConfig+0x18c>
 80050b2:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d116      	bne.n	80050ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050be:	4b43      	ldr	r3, [pc, #268]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_RCC_OscConfig+0x176>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e1c0      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	4b3d      	ldr	r3, [pc, #244]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4939      	ldr	r1, [pc, #228]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ea:	e03a      	b.n	8005162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f4:	4b36      	ldr	r3, [pc, #216]	@ (80051d0 <HAL_RCC_OscConfig+0x270>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fd f835 	bl	8002168 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fd f831 	bl	8002168 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e1a1      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005114:	4b2d      	ldr	r3, [pc, #180]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b2a      	ldr	r3, [pc, #168]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4927      	ldr	r1, [pc, #156]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b26      	ldr	r3, [pc, #152]	@ (80051d0 <HAL_RCC_OscConfig+0x270>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fd f814 	bl	8002168 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005144:	f7fd f810 	bl	8002168 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e180      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03a      	beq.n	80051e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d019      	beq.n	80051aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005176:	4b17      	ldr	r3, [pc, #92]	@ (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517c:	f7fc fff4 	bl	8002168 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005184:	f7fc fff0 	bl	8002168 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e160      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <HAL_RCC_OscConfig+0x26c>)
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f000 faba 	bl	800571c <RCC_Delay>
 80051a8:	e01c      	b.n	80051e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051aa:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <HAL_RCC_OscConfig+0x274>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b0:	f7fc ffda 	bl	8002168 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b6:	e00f      	b.n	80051d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b8:	f7fc ffd6 	bl	8002168 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d908      	bls.n	80051d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e146      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	42420000 	.word	0x42420000
 80051d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	4b92      	ldr	r3, [pc, #584]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e9      	bne.n	80051b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a6 	beq.w	800533e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b8b      	ldr	r3, [pc, #556]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10d      	bne.n	800521e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	4b88      	ldr	r3, [pc, #544]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4a87      	ldr	r2, [pc, #540]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800520c:	61d3      	str	r3, [r2, #28]
 800520e:	4b85      	ldr	r3, [pc, #532]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521e:	4b82      	ldr	r3, [pc, #520]	@ (8005428 <HAL_RCC_OscConfig+0x4c8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522a:	4b7f      	ldr	r3, [pc, #508]	@ (8005428 <HAL_RCC_OscConfig+0x4c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7e      	ldr	r2, [pc, #504]	@ (8005428 <HAL_RCC_OscConfig+0x4c8>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005236:	f7fc ff97 	bl	8002168 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523e:	f7fc ff93 	bl	8002168 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b64      	cmp	r3, #100	@ 0x64
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e103      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	4b75      	ldr	r3, [pc, #468]	@ (8005428 <HAL_RCC_OscConfig+0x4c8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x312>
 8005264:	4b6f      	ldr	r3, [pc, #444]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	4a6e      	ldr	r2, [pc, #440]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	6213      	str	r3, [r2, #32]
 8005270:	e02d      	b.n	80052ce <HAL_RCC_OscConfig+0x36e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x334>
 800527a:	4b6a      	ldr	r3, [pc, #424]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4a69      	ldr	r2, [pc, #420]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6213      	str	r3, [r2, #32]
 8005286:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4a66      	ldr	r2, [pc, #408]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	f023 0304 	bic.w	r3, r3, #4
 8005290:	6213      	str	r3, [r2, #32]
 8005292:	e01c      	b.n	80052ce <HAL_RCC_OscConfig+0x36e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b05      	cmp	r3, #5
 800529a:	d10c      	bne.n	80052b6 <HAL_RCC_OscConfig+0x356>
 800529c:	4b61      	ldr	r3, [pc, #388]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	4a60      	ldr	r2, [pc, #384]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	6213      	str	r3, [r2, #32]
 80052a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6213      	str	r3, [r2, #32]
 80052b4:	e00b      	b.n	80052ce <HAL_RCC_OscConfig+0x36e>
 80052b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6213      	str	r3, [r2, #32]
 80052c2:	4b58      	ldr	r3, [pc, #352]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	4a57      	ldr	r2, [pc, #348]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d015      	beq.n	8005302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d6:	f7fc ff47 	bl	8002168 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fc ff43 	bl	8002168 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0b1      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ee      	beq.n	80052de <HAL_RCC_OscConfig+0x37e>
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005302:	f7fc ff31 	bl	8002168 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	e00a      	b.n	8005320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc ff2d 	bl	8002168 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e09b      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005320:	4b40      	ldr	r3, [pc, #256]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ee      	bne.n	800530a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005332:	4b3c      	ldr	r3, [pc, #240]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4a3b      	ldr	r2, [pc, #236]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8087 	beq.w	8005456 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005348:	4b36      	ldr	r3, [pc, #216]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b08      	cmp	r3, #8
 8005352:	d061      	beq.n	8005418 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d146      	bne.n	80053ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535c:	4b33      	ldr	r3, [pc, #204]	@ (800542c <HAL_RCC_OscConfig+0x4cc>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005362:	f7fc ff01 	bl	8002168 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536a:	f7fc fefd 	bl	8002168 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e06d      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800537c:	4b29      	ldr	r3, [pc, #164]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f0      	bne.n	800536a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005390:	d108      	bne.n	80053a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005392:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4921      	ldr	r1, [pc, #132]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a19      	ldr	r1, [r3, #32]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	430b      	orrs	r3, r1
 80053b6:	491b      	ldr	r1, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053bc:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fc fed1 	bl	8002168 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ca:	f7fc fecd 	bl	8002168 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e03d      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053dc:	4b11      	ldr	r3, [pc, #68]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x46a>
 80053e8:	e035      	b.n	8005456 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ea:	4b10      	ldr	r3, [pc, #64]	@ (800542c <HAL_RCC_OscConfig+0x4cc>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc feba 	bl	8002168 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f8:	f7fc feb6 	bl	8002168 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e026      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x498>
 8005416:	e01e      	b.n	8005456 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d107      	bne.n	8005430 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e019      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
 8005424:	40021000 	.word	0x40021000
 8005428:	40007000 	.word	0x40007000
 800542c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_OscConfig+0x500>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	429a      	cmp	r2, r3
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000

08005464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0d0      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b6a      	ldr	r3, [pc, #424]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d910      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b67      	ldr	r3, [pc, #412]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 0207 	bic.w	r2, r3, #7
 800548e:	4965      	ldr	r1, [pc, #404]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b63      	ldr	r3, [pc, #396]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0b8      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c0:	4b59      	ldr	r3, [pc, #356]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a58      	ldr	r2, [pc, #352]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d8:	4b53      	ldr	r3, [pc, #332]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a52      	ldr	r2, [pc, #328]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e4:	4b50      	ldr	r3, [pc, #320]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	494d      	ldr	r1, [pc, #308]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d040      	beq.n	8005584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	4b47      	ldr	r3, [pc, #284]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d115      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07f      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d107      	bne.n	8005532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005522:	4b41      	ldr	r3, [pc, #260]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e073      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005532:	4b3d      	ldr	r3, [pc, #244]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e06b      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005542:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f023 0203 	bic.w	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4936      	ldr	r1, [pc, #216]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005554:	f7fc fe08 	bl	8002168 <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	e00a      	b.n	8005572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555c:	f7fc fe04 	bl	8002168 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e053      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	4b2d      	ldr	r3, [pc, #180]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 020c 	and.w	r2, r3, #12
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	429a      	cmp	r2, r3
 8005582:	d1eb      	bne.n	800555c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005584:	4b27      	ldr	r3, [pc, #156]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d210      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 0207 	bic.w	r2, r3, #7
 800559a:	4922      	ldr	r1, [pc, #136]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e032      	b.n	800561a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c0:	4b19      	ldr	r3, [pc, #100]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4916      	ldr	r1, [pc, #88]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055de:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	490e      	ldr	r1, [pc, #56]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055f2:	f000 f821 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <HAL_RCC_ClockConfig+0x1c4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	490a      	ldr	r1, [pc, #40]	@ (800562c <HAL_RCC_ClockConfig+0x1c8>)
 8005604:	5ccb      	ldrb	r3, [r1, r3]
 8005606:	fa22 f303 	lsr.w	r3, r2, r3
 800560a:	4a09      	ldr	r2, [pc, #36]	@ (8005630 <HAL_RCC_ClockConfig+0x1cc>)
 800560c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800560e:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <HAL_RCC_ClockConfig+0x1d0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7fc fd66 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40022000 	.word	0x40022000
 8005628:	40021000 	.word	0x40021000
 800562c:	0800c8a8 	.word	0x0800c8a8
 8005630:	20000000 	.word	0x20000000
 8005634:	20000004 	.word	0x20000004

08005638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005652:	4b1e      	ldr	r3, [pc, #120]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b04      	cmp	r3, #4
 8005660:	d002      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x30>
 8005662:	2b08      	cmp	r3, #8
 8005664:	d003      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x36>
 8005666:	e027      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005668:	4b19      	ldr	r3, [pc, #100]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800566a:	613b      	str	r3, [r7, #16]
      break;
 800566c:	e027      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	0c9b      	lsrs	r3, r3, #18
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	4a17      	ldr	r2, [pc, #92]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005678:	5cd3      	ldrb	r3, [r2, r3]
 800567a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005686:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	0c5b      	lsrs	r3, r3, #17
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	4a11      	ldr	r2, [pc, #68]	@ (80056d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005692:	5cd3      	ldrb	r3, [r2, r3]
 8005694:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a0d      	ldr	r2, [pc, #52]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800569a:	fb03 f202 	mul.w	r2, r3, r2
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e004      	b.n	80056b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0c      	ldr	r2, [pc, #48]	@ (80056dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	613b      	str	r3, [r7, #16]
      break;
 80056b6:	e002      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ba:	613b      	str	r3, [r7, #16]
      break;
 80056bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056be:	693b      	ldr	r3, [r7, #16]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	007a1200 	.word	0x007a1200
 80056d4:	0800dda0 	.word	0x0800dda0
 80056d8:	0800ddb0 	.word	0x0800ddb0
 80056dc:	003d0900 	.word	0x003d0900

080056e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e4:	4b02      	ldr	r3, [pc, #8]	@ (80056f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	20000000 	.word	0x20000000

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f8:	f7ff fff2 	bl	80056e0 <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4903      	ldr	r1, [pc, #12]	@ (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000
 8005718:	0800c8b8 	.word	0x0800c8b8

0800571c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005724:	4b0a      	ldr	r3, [pc, #40]	@ (8005750 <RCC_Delay+0x34>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0a      	ldr	r2, [pc, #40]	@ (8005754 <RCC_Delay+0x38>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	0a5b      	lsrs	r3, r3, #9
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005738:	bf00      	nop
  }
  while (Delay --);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1e5a      	subs	r2, r3, #1
 800573e:	60fa      	str	r2, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f9      	bne.n	8005738 <RCC_Delay+0x1c>
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	20000000 	.word	0x20000000
 8005754:	10624dd3 	.word	0x10624dd3

08005758 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d07d      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005774:	2300      	movs	r3, #0
 8005776:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005778:	4b4f      	ldr	r3, [pc, #316]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10d      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005784:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	4a4b      	ldr	r2, [pc, #300]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578e:	61d3      	str	r3, [r2, #28]
 8005790:	4b49      	ldr	r3, [pc, #292]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800579c:	2301      	movs	r3, #1
 800579e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a0:	4b46      	ldr	r3, [pc, #280]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d118      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ac:	4b43      	ldr	r3, [pc, #268]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b8:	f7fc fcd6 	bl	8002168 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057be:	e008      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c0:	f7fc fcd2 	bl	8002168 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	@ 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e06d      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d2:	4b3a      	ldr	r3, [pc, #232]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057de:	4b36      	ldr	r3, [pc, #216]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02e      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d027      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057fc:	4b2e      	ldr	r3, [pc, #184]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005806:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800580c:	4b2c      	ldr	r3, [pc, #176]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005812:	4a29      	ldr	r2, [pc, #164]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d014      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fc fca1 	bl	8002168 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc fc9d 	bl	8002168 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e036      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005840:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ee      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800584c:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4917      	ldr	r1, [pc, #92]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585a:	4313      	orrs	r3, r2
 800585c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d105      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005864:	4b14      	ldr	r3, [pc, #80]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	4a13      	ldr	r2, [pc, #76]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800586e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800587c:	4b0e      	ldr	r3, [pc, #56]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	490b      	ldr	r1, [pc, #44]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	4313      	orrs	r3, r2
 800588c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800589a:	4b07      	ldr	r3, [pc, #28]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	4904      	ldr	r1, [pc, #16]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40007000 	.word	0x40007000
 80058c0:	42420440 	.word	0x42420440

080058c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d001      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e03a      	b.n	8005952 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a18      	ldr	r2, [pc, #96]	@ (800595c <HAL_TIM_Base_Start_IT+0x98>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x58>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d009      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x58>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a14      	ldr	r2, [pc, #80]	@ (8005960 <HAL_TIM_Base_Start_IT+0x9c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x58>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <HAL_TIM_Base_Start_IT+0xa0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d111      	bne.n	8005940 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b06      	cmp	r3, #6
 800592c:	d010      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	e007      	b.n	8005950 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800

08005968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e041      	b.n	80059fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc f850 	bl	8001a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f000 fb34 	bl	8006014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e093      	b.n	8005b42 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb ffc0 	bl	80019b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a4a:	f023 0307 	bic.w	r3, r3, #7
 8005a4e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f000 fada 	bl	8006014 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a88:	f023 0303 	bic.w	r3, r3, #3
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005aa6:	f023 030c 	bic.w	r3, r3, #12
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	011a      	lsls	r2, r3, #4
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ae4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	4313      	orrs	r3, r2
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b5a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b6a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b72:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d102      	bne.n	8005b86 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b80:	7b7b      	ldrb	r3, [r7, #13]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d001      	beq.n	8005b8a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e069      	b.n	8005c5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b9a:	e031      	b.n	8005c00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d110      	bne.n	8005bc4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d102      	bne.n	8005bae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ba8:	7b3b      	ldrb	r3, [r7, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e055      	b.n	8005c5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bc2:	e01d      	b.n	8005c00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d108      	bne.n	8005bdc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd0:	7b7b      	ldrb	r3, [r7, #13]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd6:	7b3b      	ldrb	r3, [r7, #12]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e03e      	b.n	8005c5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_Encoder_Start+0xc4>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d008      	beq.n	8005c1e <HAL_TIM_Encoder_Start+0xd4>
 8005c0c:	e00f      	b.n	8005c2e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fbf2 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005c1c:	e016      	b.n	8005c4c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	2104      	movs	r1, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fbea 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005c2c:	e00e      	b.n	8005c4c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fbe2 	bl	8006400 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2104      	movs	r1, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fbdb 	bl	8006400 <TIM_CCxChannelCmd>
      break;
 8005c4a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d020      	beq.n	8005cca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0202 	mvn.w	r2, #2
 8005c9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f994 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005cb6:	e005      	b.n	8005cc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f987 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f996 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0204 	mvn.w	r2, #4
 8005ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f96e 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005d02:	e005      	b.n	8005d10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f961 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f970 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0208 	mvn.w	r2, #8
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2204      	movs	r2, #4
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f948 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f93b 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f94a 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0210 	mvn.w	r2, #16
 8005d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2208      	movs	r2, #8
 8005d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f922 	bl	8005fde <HAL_TIM_IC_CaptureCallback>
 8005d9a:	e005      	b.n	8005da8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f915 	bl	8005fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f924 	bl	8005ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00c      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f06f 0201 	mvn.w	r2, #1
 8005dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb faf3 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb90 	bl	8006516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8f4 	bl	8006002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f06f 0220 	mvn.w	r2, #32
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb63 	bl	8006504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e0ae      	b.n	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b0c      	cmp	r3, #12
 8005e72:	f200 809f 	bhi.w	8005fb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e76:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005eb1 	.word	0x08005eb1
 8005e80:	08005fb5 	.word	0x08005fb5
 8005e84:	08005fb5 	.word	0x08005fb5
 8005e88:	08005fb5 	.word	0x08005fb5
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005fb5 	.word	0x08005fb5
 8005e94:	08005fb5 	.word	0x08005fb5
 8005e98:	08005fb5 	.word	0x08005fb5
 8005e9c:	08005f33 	.word	0x08005f33
 8005ea0:	08005fb5 	.word	0x08005fb5
 8005ea4:	08005fb5 	.word	0x08005fb5
 8005ea8:	08005fb5 	.word	0x08005fb5
 8005eac:	08005f73 	.word	0x08005f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f91a 	bl	80060f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0208 	orr.w	r2, r2, #8
 8005eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6999      	ldr	r1, [r3, #24]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	619a      	str	r2, [r3, #24]
      break;
 8005eee:	e064      	b.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 f960 	bl	80061bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	021a      	lsls	r2, r3, #8
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	619a      	str	r2, [r3, #24]
      break;
 8005f30:	e043      	b.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f9a9 	bl	8006290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0208 	orr.w	r2, r2, #8
 8005f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0204 	bic.w	r2, r2, #4
 8005f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69d9      	ldr	r1, [r3, #28]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	61da      	str	r2, [r3, #28]
      break;
 8005f70:	e023      	b.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f9f3 	bl	8006364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	021a      	lsls	r2, r3, #8
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	61da      	str	r2, [r3, #28]
      break;
 8005fb2:	e002      	b.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2f      	ldr	r2, [pc, #188]	@ (80060e4 <TIM_Base_SetConfig+0xd0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00b      	beq.n	8006044 <TIM_Base_SetConfig+0x30>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d007      	beq.n	8006044 <TIM_Base_SetConfig+0x30>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <TIM_Base_SetConfig+0xd4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_Base_SetConfig+0x30>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a2b      	ldr	r2, [pc, #172]	@ (80060ec <TIM_Base_SetConfig+0xd8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d108      	bne.n	8006056 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a22      	ldr	r2, [pc, #136]	@ (80060e4 <TIM_Base_SetConfig+0xd0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0x62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0x62>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1f      	ldr	r2, [pc, #124]	@ (80060e8 <TIM_Base_SetConfig+0xd4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0x62>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1e      	ldr	r2, [pc, #120]	@ (80060ec <TIM_Base_SetConfig+0xd8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0d      	ldr	r2, [pc, #52]	@ (80060e4 <TIM_Base_SetConfig+0xd0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	611a      	str	r2, [r3, #16]
  }
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800

080060f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f023 0201 	bic.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 0302 	bic.w	r3, r3, #2
 8006138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <TIM_OC1_SetConfig+0xc8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0308 	bic.w	r3, r3, #8
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a13      	ldr	r2, [pc, #76]	@ (80061b8 <TIM_OC1_SetConfig+0xc8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00

080061bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f023 0210 	bic.w	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0320 	bic.w	r3, r3, #32
 8006206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1d      	ldr	r2, [pc, #116]	@ (800628c <TIM_OC2_SetConfig+0xd0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10d      	bne.n	8006238 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006236:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a14      	ldr	r2, [pc, #80]	@ (800628c <TIM_OC2_SetConfig+0xd0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d113      	bne.n	8006268 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006246:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	40012c00 	.word	0x40012c00

08006290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <TIM_OC3_SetConfig+0xd0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10d      	bne.n	800630a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <TIM_OC3_SetConfig+0xd0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d113      	bne.n	800633a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00

08006364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	031b      	lsls	r3, r3, #12
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a0f      	ldr	r2, [pc, #60]	@ (80063fc <TIM_OC4_SetConfig+0x98>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d109      	bne.n	80063d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	40012c00 	.word	0x40012c00

08006400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	43db      	mvns	r3, r3
 8006422:	401a      	ands	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e046      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ac:	d009      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a12      	ldr	r2, [pc, #72]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a10      	ldr	r2, [pc, #64]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800

08006504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	4638      	mov	r0, r7
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006552:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006556:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr

0800656e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006576:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800657a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	b29b      	uxth	r3, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	b29b      	uxth	r3, r3
 800658c:	4013      	ands	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	4638      	mov	r0, r7
 80065c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b09d      	sub	sp, #116	@ 0x74
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d81f      	bhi.n	8006666 <USB_ActivateEndpoint+0x72>
 8006626:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <USB_ActivateEndpoint+0x38>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800663d 	.word	0x0800663d
 8006630:	08006659 	.word	0x08006659
 8006634:	0800666f 	.word	0x0800666f
 8006638:	0800664b 	.word	0x0800664b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800663c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006640:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006648:	e012      	b.n	8006670 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800664a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800664e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006652:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006656:	e00b      	b.n	8006670 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006658:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800665c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006660:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006664:	e004      	b.n	8006670 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800666c:	e000      	b.n	8006670 <USB_ActivateEndpoint+0x7c>
      break;
 800666e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800668a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	7b1b      	ldrb	r3, [r3, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 8178 	bne.w	80069d0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8084 	beq.w	80067f2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	4413      	add	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	011a      	lsls	r2, r3, #4
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	88db      	ldrh	r3, [r3, #6]
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	827b      	strh	r3, [r7, #18]
 800672c:	8a7b      	ldrh	r3, [r7, #18]
 800672e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01b      	beq.n	800676e <USB_ActivateEndpoint+0x17a>
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674c:	823b      	strh	r3, [r7, #16]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8a3b      	ldrh	r3, [r7, #16]
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006766:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	78db      	ldrb	r3, [r3, #3]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d020      	beq.n	80067b8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678c:	81bb      	strh	r3, [r7, #12]
 800678e:	89bb      	ldrh	r3, [r7, #12]
 8006790:	f083 0320 	eor.w	r3, r3, #32
 8006794:	81bb      	strh	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	89bb      	ldrh	r3, [r7, #12]
 80067a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	8013      	strh	r3, [r2, #0]
 80067b6:	e2d5      	b.n	8006d64 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	81fb      	strh	r3, [r7, #14]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	89fb      	ldrh	r3, [r7, #14]
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
 80067f0:	e2b8      	b.n	8006d64 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	4413      	add	r3, r2
 8006804:	633b      	str	r3, [r7, #48]	@ 0x30
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	011a      	lsls	r2, r3, #4
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	4413      	add	r3, r2
 8006810:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	b29b      	uxth	r3, r3
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	4413      	add	r3, r2
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	011a      	lsls	r2, r3, #4
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	4413      	add	r3, r2
 8006844:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006854:	b29a      	uxth	r2, r3
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006860:	d91d      	bls.n	800689e <USB_ActivateEndpoint+0x2aa>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <USB_ActivateEndpoint+0x288>
 8006876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006878:	3b01      	subs	r3, #1
 800687a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006884:	b29b      	uxth	r3, r3
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	b29b      	uxth	r3, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	e026      	b.n	80068ec <USB_ActivateEndpoint+0x2f8>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <USB_ActivateEndpoint+0x2c8>
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	e017      	b.n	80068ec <USB_ActivateEndpoint+0x2f8>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <USB_ActivateEndpoint+0x2e2>
 80068d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068d2:	3301      	adds	r3, #1
 80068d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068de:	b29b      	uxth	r3, r3
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4313      	orrs	r3, r2
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80068fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <USB_ActivateEndpoint+0x348>
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	843b      	strh	r3, [r7, #32]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8c3b      	ldrh	r3, [r7, #32]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d124      	bne.n	800698e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695a:	83bb      	strh	r3, [r7, #28]
 800695c:	8bbb      	ldrh	r3, [r7, #28]
 800695e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006962:	83bb      	strh	r3, [r7, #28]
 8006964:	8bbb      	ldrh	r3, [r7, #28]
 8006966:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800696a:	83bb      	strh	r3, [r7, #28]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	8bbb      	ldrh	r3, [r7, #28]
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
 800698c:	e1ea      	b.n	8006d64 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a4:	83fb      	strh	r3, [r7, #30]
 80069a6:	8bfb      	ldrh	r3, [r7, #30]
 80069a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069ac:	83fb      	strh	r3, [r7, #30]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	8bfb      	ldrh	r3, [r7, #30]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]
 80069ce:	e1c9      	b.n	8006d64 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d11e      	bne.n	8006a16 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a08:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]
 8006a14:	e01d      	b.n	8006a52 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a62:	4413      	add	r3, r2
 8006a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	011a      	lsls	r2, r3, #4
 8006a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	891b      	ldrh	r3, [r3, #8]
 8006a7a:	085b      	lsrs	r3, r3, #1
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a96:	4413      	add	r3, r2
 8006a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	011a      	lsls	r2, r3, #4
 8006aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006aa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	895b      	ldrh	r3, [r3, #10]
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 8093 	bne.w	8006bea <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <USB_ActivateEndpoint+0x524>
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <USB_ActivateEndpoint+0x574>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b46:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b86:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b88:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b8e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	8013      	strh	r3, [r2, #0]
 8006be8:	e0bc      	b.n	8006d64 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01d      	beq.n	8006c42 <USB_ActivateEndpoint+0x64e>
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01d      	beq.n	8006c9a <USB_ActivateEndpoint+0x6a6>
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c74:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d024      	beq.n	8006cec <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006cbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006cc0:	f083 0320 	eor.w	r3, r3, #32
 8006cc4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
 8006cea:	e01d      	b.n	8006d28 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	441a      	add	r2, r3
 8006d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	441a      	add	r2, r3
 8006d4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d64:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3774      	adds	r7, #116	@ 0x74
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b08d      	sub	sp, #52	@ 0x34
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	7b1b      	ldrb	r3, [r3, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f040 808e 	bne.w	8006ea4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d044      	beq.n	8006e1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	81bb      	strh	r3, [r7, #12]
 8006d9e:	89bb      	ldrh	r3, [r7, #12]
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01b      	beq.n	8006de0 <USB_DeactivateEndpoint+0x6c>
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbe:	817b      	strh	r3, [r7, #10]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	897b      	ldrh	r3, [r7, #10]
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df6:	813b      	strh	r3, [r7, #8]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	893b      	ldrh	r3, [r7, #8]
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]
 8006e18:	e192      	b.n	8007140 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	827b      	strh	r3, [r7, #18]
 8006e28:	8a7b      	ldrh	r3, [r7, #18]
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01b      	beq.n	8006e6a <USB_DeactivateEndpoint+0xf6>
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e48:	823b      	strh	r3, [r7, #16]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	8a3b      	ldrh	r3, [r7, #16]
 8006e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	81fb      	strh	r3, [r7, #14]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	441a      	add	r2, r3
 8006e8c:	89fb      	ldrh	r3, [r7, #14]
 8006e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	8013      	strh	r3, [r2, #0]
 8006ea2:	e14d      	b.n	8007140 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 80a5 	bne.w	8006ff8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	843b      	strh	r3, [r7, #32]
 8006ebc:	8c3b      	ldrh	r3, [r7, #32]
 8006ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01b      	beq.n	8006efe <USB_DeactivateEndpoint+0x18a>
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	83fb      	strh	r3, [r7, #30]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	8bfb      	ldrh	r3, [r7, #30]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	83bb      	strh	r3, [r7, #28]
 8006f0c:	8bbb      	ldrh	r3, [r7, #28]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01b      	beq.n	8006f4e <USB_DeactivateEndpoint+0x1da>
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2c:	837b      	strh	r3, [r7, #26]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	441a      	add	r2, r3
 8006f38:	8b7b      	ldrh	r3, [r7, #26]
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f64:	833b      	strh	r3, [r7, #24]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	8b3b      	ldrh	r3, [r7, #24]
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9c:	82fb      	strh	r3, [r7, #22]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8afb      	ldrh	r3, [r7, #22]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd4:	82bb      	strh	r3, [r7, #20]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	8abb      	ldrh	r3, [r7, #20]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
 8006ff6:	e0a3      	b.n	8007140 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007006:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01b      	beq.n	8007048 <USB_DeactivateEndpoint+0x2d4>
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800703c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007056:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01b      	beq.n	8007098 <USB_DeactivateEndpoint+0x324>
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007076:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800708c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007090:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007094:	b29b      	uxth	r3, r3
 8007096:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007104:	b29b      	uxth	r3, r3
 8007106:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3734      	adds	r7, #52	@ 0x34
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b0c2      	sub	sp, #264	@ 0x108
 8007150:	af00      	add	r7, sp, #0
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800715a:	6018      	str	r0, [r3, #0]
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007164:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b01      	cmp	r3, #1
 8007174:	f040 86b7 	bne.w	8007ee6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d908      	bls.n	80071a6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071a4:	e007      	b.n	80071b6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	7b1b      	ldrb	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d13a      	bne.n	800723c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6959      	ldr	r1, [r3, #20]
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	88da      	ldrh	r2, [r3, #6]
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f001 fc9c 	bl	8008b2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800720c:	b29b      	uxth	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	f000 be1f 	b.w	8007e7a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	78db      	ldrb	r3, [r3, #3]
 8007248:	2b02      	cmp	r3, #2
 800724a:	f040 8462 	bne.w	8007b12 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6a1a      	ldr	r2, [r3, #32]
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	f240 83df 	bls.w	8007a2a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80072b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072bc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 81c7 	beq.w	800769c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800730e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	633b      	str	r3, [r7, #48]	@ 0x30
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d177      	bne.n	800741a <USB_EPStartXfer+0x2ce>
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007344:	b29b      	uxth	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	4413      	add	r3, r2
 800734c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800734e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	011a      	lsls	r2, r3, #4
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	4413      	add	r3, r2
 8007360:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007370:	b29a      	uxth	r2, r3
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	2b3e      	cmp	r3, #62	@ 0x3e
 800737c:	d921      	bls.n	80073c2 <USB_EPStartXfer+0x276>
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <USB_EPStartXfer+0x252>
 8007394:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007398:	3b01      	subs	r3, #1
 800739a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e050      	b.n	8007464 <USB_EPStartXfer+0x318>
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <USB_EPStartXfer+0x294>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d8:	b29a      	uxth	r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	e041      	b.n	8007464 <USB_EPStartXfer+0x318>
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	085b      	lsrs	r3, r3, #1
 80073e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <USB_EPStartXfer+0x2b4>
 80073f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073fa:	3301      	adds	r3, #1
 80073fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800740a:	b29b      	uxth	r3, r3
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	b29b      	uxth	r3, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	e024      	b.n	8007464 <USB_EPStartXfer+0x318>
 800741a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d11c      	bne.n	8007464 <USB_EPStartXfer+0x318>
 800742a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007438:	b29b      	uxth	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	4413      	add	r3, r2
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	011a      	lsls	r2, r3, #4
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	4413      	add	r3, r2
 8007454:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	b29a      	uxth	r2, r3
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6959      	ldr	r1, [r3, #20]
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007484:	b29b      	uxth	r3, r3
 8007486:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800748a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800748e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007492:	6800      	ldr	r0, [r0, #0]
 8007494:	f001 fb49 	bl	8008b2a <USB_WritePMA>
            ep->xfer_buff += len;
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a8:	441a      	add	r2, r3
 80074aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d90f      	bls.n	80074f2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80074d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	621a      	str	r2, [r3, #32]
 80074f0:	e00e      	b.n	8007510 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2200      	movs	r2, #0
 800750e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d177      	bne.n	8007610 <USB_EPStartXfer+0x4c4>
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800753a:	b29b      	uxth	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	4413      	add	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	4413      	add	r3, r2
 8007556:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007566:	b29a      	uxth	r2, r3
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	2b3e      	cmp	r3, #62	@ 0x3e
 8007572:	d921      	bls.n	80075b8 <USB_EPStartXfer+0x46c>
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800757e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <USB_EPStartXfer+0x448>
 800758a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758e:	3b01      	subs	r3, #1
 8007590:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29a      	uxth	r2, r3
 800759a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800759e:	b29b      	uxth	r3, r3
 80075a0:	029b      	lsls	r3, r3, #10
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e056      	b.n	8007666 <USB_EPStartXfer+0x51a>
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <USB_EPStartXfer+0x48a>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e047      	b.n	8007666 <USB_EPStartXfer+0x51a>
 80075d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <USB_EPStartXfer+0x4aa>
 80075ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f0:	3301      	adds	r3, #1
 80075f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007600:	b29b      	uxth	r3, r3
 8007602:	029b      	lsls	r3, r3, #10
 8007604:	b29b      	uxth	r3, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	e02a      	b.n	8007666 <USB_EPStartXfer+0x51a>
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d122      	bne.n	8007666 <USB_EPStartXfer+0x51a>
 8007620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	623b      	str	r3, [r7, #32]
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800763a:	b29b      	uxth	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	4413      	add	r3, r2
 8007642:	623b      	str	r3, [r7, #32]
 8007644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4413      	add	r3, r2
 8007656:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007660:	b29a      	uxth	r2, r3
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	891b      	ldrh	r3, [r3, #8]
 8007672:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6959      	ldr	r1, [r3, #20]
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	b29b      	uxth	r3, r3
 8007688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800768c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007690:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007694:	6800      	ldr	r0, [r0, #0]
 8007696:	f001 fa48 	bl	8008b2a <USB_WritePMA>
 800769a:	e3ee      	b.n	8007e7a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d177      	bne.n	800779c <USB_EPStartXfer+0x650>
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076cc:	4413      	add	r3, r2
 80076ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	011a      	lsls	r2, r3, #4
 80076de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e0:	4413      	add	r3, r2
 80076e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80076fe:	d921      	bls.n	8007744 <USB_EPStartXfer+0x5f8>
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <USB_EPStartXfer+0x5d4>
 8007716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800771a:	3b01      	subs	r3, #1
 800771c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800772a:	b29b      	uxth	r3, r3
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	b29b      	uxth	r3, r3
 8007730:	4313      	orrs	r3, r2
 8007732:	b29b      	uxth	r3, r3
 8007734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773c:	b29a      	uxth	r2, r3
 800773e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e056      	b.n	80077f2 <USB_EPStartXfer+0x6a6>
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <USB_EPStartXfer+0x616>
 800774c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775a:	b29a      	uxth	r2, r3
 800775c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e047      	b.n	80077f2 <USB_EPStartXfer+0x6a6>
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	085b      	lsrs	r3, r3, #1
 8007768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800776c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <USB_EPStartXfer+0x636>
 8007778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800777c:	3301      	adds	r3, #1
 800777e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29a      	uxth	r2, r3
 8007788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800778c:	b29b      	uxth	r3, r3
 800778e:	029b      	lsls	r3, r3, #10
 8007790:	b29b      	uxth	r3, r3
 8007792:	4313      	orrs	r3, r2
 8007794:	b29a      	uxth	r2, r3
 8007796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e02a      	b.n	80077f2 <USB_EPStartXfer+0x6a6>
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d122      	bne.n	80077f2 <USB_EPStartXfer+0x6a6>
 80077ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077cc:	4413      	add	r3, r2
 80077ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	011a      	lsls	r2, r3, #4
 80077de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e0:	4413      	add	r3, r2
 80077e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	891b      	ldrh	r3, [r3, #8]
 80077fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6959      	ldr	r1, [r3, #20]
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	b29b      	uxth	r3, r3
 8007814:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007818:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800781c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	f001 f982 	bl	8008b2a <USB_WritePMA>
            ep->xfer_buff += len;
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007836:	441a      	add	r2, r3
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	429a      	cmp	r2, r3
 800785e:	d90f      	bls.n	8007880 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	621a      	str	r2, [r3, #32]
 800787e:	e00e      	b.n	800789e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d177      	bne.n	80079aa <USB_EPStartXfer+0x85e>
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078da:	4413      	add	r3, r2
 80078dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	011a      	lsls	r2, r3, #4
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007900:	b29a      	uxth	r2, r3
 8007902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	2b3e      	cmp	r3, #62	@ 0x3e
 800790c:	d921      	bls.n	8007952 <USB_EPStartXfer+0x806>
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <USB_EPStartXfer+0x7e2>
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	3b01      	subs	r3, #1
 800792a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	b29b      	uxth	r3, r3
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29a      	uxth	r2, r3
 800794c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e050      	b.n	80079f4 <USB_EPStartXfer+0x8a8>
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <USB_EPStartXfer+0x824>
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e041      	b.n	80079f4 <USB_EPStartXfer+0x8a8>
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USB_EPStartXfer+0x844>
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798a:	3301      	adds	r3, #1
 800798c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e024      	b.n	80079f4 <USB_EPStartXfer+0x8a8>
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d11c      	bne.n	80079f4 <USB_EPStartXfer+0x8a8>
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079ce:	4413      	add	r3, r2
 80079d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	011a      	lsls	r2, r3, #4
 80079e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	895b      	ldrh	r3, [r3, #10]
 8007a00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6959      	ldr	r1, [r3, #20]
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a22:	6800      	ldr	r0, [r0, #0]
 8007a24:	f001 f881 	bl	8008b2a <USB_WritePMA>
 8007a28:	e227      	b.n	8007e7a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a60:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab6:	4413      	add	r3, r2
 8007ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ada:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	891b      	ldrh	r3, [r3, #8]
 8007ae8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6959      	ldr	r1, [r3, #20]
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	f001 f80d 	bl	8008b2a <USB_WritePMA>
 8007b10:	e1b3      	b.n	8007e7a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6a1a      	ldr	r2, [r3, #32]
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80c6 	beq.w	8007ce4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d177      	bne.n	8007c64 <USB_EPStartXfer+0xb18>
 8007b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b94:	4413      	add	r3, r2
 8007b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	011a      	lsls	r2, r3, #4
 8007ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ba8:	4413      	add	r3, r2
 8007baa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bae:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bc6:	d921      	bls.n	8007c0c <USB_EPStartXfer+0xac0>
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bcc:	095b      	lsrs	r3, r3, #5
 8007bce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <USB_EPStartXfer+0xa9c>
 8007bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007be2:	3b01      	subs	r3, #1
 8007be4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	e050      	b.n	8007cae <USB_EPStartXfer+0xb62>
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <USB_EPStartXfer+0xade>
 8007c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	e041      	b.n	8007cae <USB_EPStartXfer+0xb62>
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <USB_EPStartXfer+0xafe>
 8007c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c44:	3301      	adds	r3, #1
 8007c46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	029b      	lsls	r3, r3, #10
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	e024      	b.n	8007cae <USB_EPStartXfer+0xb62>
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d11c      	bne.n	8007cae <USB_EPStartXfer+0xb62>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c88:	4413      	add	r3, r2
 8007c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	011a      	lsls	r2, r3, #4
 8007c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	895b      	ldrh	r3, [r3, #10]
 8007cba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6959      	ldr	r1, [r3, #20]
 8007cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007cd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007cdc:	6800      	ldr	r0, [r0, #0]
 8007cde:	f000 ff24 	bl	8008b2a <USB_WritePMA>
 8007ce2:	e0ca      	b.n	8007e7a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d177      	bne.n	8007de4 <USB_EPStartXfer+0xc98>
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d14:	4413      	add	r3, r2
 8007d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d46:	d921      	bls.n	8007d8c <USB_EPStartXfer+0xc40>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <USB_EPStartXfer+0xc1c>
 8007d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d62:	3b01      	subs	r3, #1
 8007d64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	029b      	lsls	r3, r3, #10
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d88:	801a      	strh	r2, [r3, #0]
 8007d8a:	e05c      	b.n	8007e46 <USB_EPStartXfer+0xcfa>
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <USB_EPStartXfer+0xc5e>
 8007d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	e04d      	b.n	8007e46 <USB_EPStartXfer+0xcfa>
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <USB_EPStartXfer+0xc7e>
 8007dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	029b      	lsls	r3, r3, #10
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e030      	b.n	8007e46 <USB_EPStartXfer+0xcfa>
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	785b      	ldrb	r3, [r3, #1]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d128      	bne.n	8007e46 <USB_EPStartXfer+0xcfa>
 8007df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	011a      	lsls	r2, r3, #4
 8007e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e30:	4413      	add	r3, r2
 8007e32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	891b      	ldrh	r3, [r3, #8]
 8007e52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e6c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e70:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e74:	6800      	ldr	r0, [r0, #0]
 8007e76:	f000 fe58 	bl	8008b2a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea0:	817b      	strh	r3, [r7, #10]
 8007ea2:	897b      	ldrh	r3, [r7, #10]
 8007ea4:	f083 0310 	eor.w	r3, r3, #16
 8007ea8:	817b      	strh	r3, [r7, #10]
 8007eaa:	897b      	ldrh	r3, [r7, #10]
 8007eac:	f083 0320 	eor.w	r3, r3, #32
 8007eb0:	817b      	strh	r3, [r7, #10]
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	441a      	add	r2, r3
 8007ecc:	897b      	ldrh	r3, [r7, #10]
 8007ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	8013      	strh	r3, [r2, #0]
 8007ee2:	f000 bcde 	b.w	80088a2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	7b1b      	ldrb	r3, [r3, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 80bb 	bne.w	800806e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d917      	bls.n	8007f44 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	1ad2      	subs	r2, r2, r3
 8007f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	619a      	str	r2, [r3, #24]
 8007f42:	e00e      	b.n	8007f62 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f86:	4413      	add	r3, r2
 8007f88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	011a      	lsls	r2, r3, #4
 8007f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc2:	d924      	bls.n	800800e <USB_EPStartXfer+0xec2>
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d104      	bne.n	8007fe4 <USB_EPStartXfer+0xe98>
 8007fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008002:	b29a      	uxth	r2, r3
 8008004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	f000 bc10 	b.w	800882e <USB_EPStartXfer+0x16e2>
 800800e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10c      	bne.n	8008030 <USB_EPStartXfer+0xee4>
 8008016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	b29b      	uxth	r3, r3
 800801e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008026:	b29a      	uxth	r2, r3
 8008028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800802c:	801a      	strh	r2, [r3, #0]
 800802e:	e3fe      	b.n	800882e <USB_EPStartXfer+0x16e2>
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0xf04>
 8008046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800804a:	3301      	adds	r3, #1
 800804c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29b      	uxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b29a      	uxth	r2, r3
 8008066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	e3df      	b.n	800882e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800806e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	78db      	ldrb	r3, [r3, #3]
 800807a:	2b02      	cmp	r3, #2
 800807c:	f040 8218 	bne.w	80084b0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f040 809d 	bne.w	80081cc <USB_EPStartXfer+0x1080>
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b6:	4413      	add	r3, r2
 80080b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	011a      	lsls	r2, r3, #4
 80080ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80080fa:	d92b      	bls.n	8008154 <USB_EPStartXfer+0x1008>
 80080fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800810e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2b00      	cmp	r3, #0
 8008120:	d104      	bne.n	800812c <USB_EPStartXfer+0xfe0>
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008126:	3b01      	subs	r3, #1
 8008128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800812c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008138:	b29b      	uxth	r3, r3
 800813a:	029b      	lsls	r3, r3, #10
 800813c:	b29b      	uxth	r3, r3
 800813e:	4313      	orrs	r3, r2
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e070      	b.n	8008236 <USB_EPStartXfer+0x10ea>
 8008154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10c      	bne.n	800817e <USB_EPStartXfer+0x1032>
 8008164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008174:	b29a      	uxth	r2, r3
 8008176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800817a:	801a      	strh	r2, [r3, #0]
 800817c:	e05b      	b.n	8008236 <USB_EPStartXfer+0x10ea>
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	085b      	lsrs	r3, r3, #1
 800818c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <USB_EPStartXfer+0x1062>
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	3301      	adds	r3, #1
 80081aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4313      	orrs	r3, r2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	e034      	b.n	8008236 <USB_EPStartXfer+0x10ea>
 80081cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d12c      	bne.n	8008236 <USB_EPStartXfer+0x10ea>
 80081dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008200:	4413      	add	r3, r2
 8008202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	011a      	lsls	r2, r3, #4
 8008214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008218:	4413      	add	r3, r2
 800821a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800821e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 809d 	bne.w	8008390 <USB_EPStartXfer+0x1244>
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008272:	b29b      	uxth	r3, r3
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800827a:	4413      	add	r3, r2
 800827c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	011a      	lsls	r2, r3, #4
 800828e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008292:	4413      	add	r3, r2
 8008294:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800829c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80082be:	d92b      	bls.n	8008318 <USB_EPStartXfer+0x11cc>
 80082c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 031f 	and.w	r3, r3, #31
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <USB_EPStartXfer+0x11a4>
 80082e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ea:	3b01      	subs	r3, #1
 80082ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	b29b      	uxth	r3, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	e069      	b.n	80083ec <USB_EPStartXfer+0x12a0>
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10c      	bne.n	8008342 <USB_EPStartXfer+0x11f6>
 8008328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008338:	b29a      	uxth	r2, r3
 800833a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e054      	b.n	80083ec <USB_EPStartXfer+0x12a0>
 8008342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <USB_EPStartXfer+0x1226>
 8008368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836c:	3301      	adds	r3, #1
 800836e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29a      	uxth	r2, r3
 800837a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800837e:	b29b      	uxth	r3, r3
 8008380:	029b      	lsls	r3, r3, #10
 8008382:	b29b      	uxth	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e02d      	b.n	80083ec <USB_EPStartXfer+0x12a0>
 8008390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d125      	bne.n	80083ec <USB_EPStartXfer+0x12a0>
 80083a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083b6:	4413      	add	r3, r2
 80083b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	011a      	lsls	r2, r3, #4
 80083ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083ce:	4413      	add	r3, r2
 80083d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083ea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8218 	beq.w	800882e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800841e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <USB_EPStartXfer+0x12ea>
 800842a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800842e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10d      	bne.n	8008452 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008436:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800843a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800843e:	2b00      	cmp	r3, #0
 8008440:	f040 81f5 	bne.w	800882e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 81ee 	bne.w	800882e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008478:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800847c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]
 80084ae:	e1be      	b.n	800882e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	78db      	ldrb	r3, [r3, #3]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 81b4 	bne.w	800882a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d917      	bls.n	800850e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80084ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	619a      	str	r2, [r3, #24]
 800850c:	e00e      	b.n	800852c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800851e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2200      	movs	r2, #0
 800852a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800852c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	785b      	ldrb	r3, [r3, #1]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 8085 	bne.w	8008648 <USB_EPStartXfer+0x14fc>
 800853e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800854c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800855a:	b29b      	uxth	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008562:	4413      	add	r3, r2
 8008564:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	011a      	lsls	r2, r3, #4
 8008576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800857a:	4413      	add	r3, r2
 800857c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859c:	2b3e      	cmp	r3, #62	@ 0x3e
 800859e:	d923      	bls.n	80085e8 <USB_EPStartXfer+0x149c>
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <USB_EPStartXfer+0x1474>
 80085b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ba:	3b01      	subs	r3, #1
 80085bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	029b      	lsls	r3, r3, #10
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085de:	b29a      	uxth	r2, r3
 80085e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085e4:	801a      	strh	r2, [r3, #0]
 80085e6:	e060      	b.n	80086aa <USB_EPStartXfer+0x155e>
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10c      	bne.n	800860a <USB_EPStartXfer+0x14be>
 80085f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008600:	b29a      	uxth	r2, r3
 8008602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008606:	801a      	strh	r2, [r3, #0]
 8008608:	e04f      	b.n	80086aa <USB_EPStartXfer+0x155e>
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <USB_EPStartXfer+0x14de>
 8008620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008624:	3301      	adds	r3, #1
 8008626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800862a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008636:	b29b      	uxth	r3, r3
 8008638:	029b      	lsls	r3, r3, #10
 800863a:	b29b      	uxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	e030      	b.n	80086aa <USB_EPStartXfer+0x155e>
 8008648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	785b      	ldrb	r3, [r3, #1]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d128      	bne.n	80086aa <USB_EPStartXfer+0x155e>
 8008658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008674:	b29b      	uxth	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800867c:	4413      	add	r3, r2
 800867e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	011a      	lsls	r2, r3, #4
 8008690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008694:	4413      	add	r3, r2
 8008696:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800869a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800869e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 8085 	bne.w	80087d4 <USB_EPStartXfer+0x1688>
 80086ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	461a      	mov	r2, r3
 80086ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80086ee:	4413      	add	r3, r2
 80086f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	011a      	lsls	r2, r3, #4
 8008702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008706:	4413      	add	r3, r2
 8008708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800870c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800871c:	b29a      	uxth	r2, r3
 800871e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008722:	801a      	strh	r2, [r3, #0]
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008728:	2b3e      	cmp	r3, #62	@ 0x3e
 800872a:	d923      	bls.n	8008774 <USB_EPStartXfer+0x1628>
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873a:	f003 031f 	and.w	r3, r3, #31
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <USB_EPStartXfer+0x1600>
 8008742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008746:	3b01      	subs	r3, #1
 8008748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800874c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29a      	uxth	r2, r3
 8008754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008758:	b29b      	uxth	r3, r3
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	b29b      	uxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b29b      	uxth	r3, r3
 8008762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e05c      	b.n	800882e <USB_EPStartXfer+0x16e2>
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10c      	bne.n	8008796 <USB_EPStartXfer+0x164a>
 800877c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800878c:	b29a      	uxth	r2, r3
 800878e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	e04b      	b.n	800882e <USB_EPStartXfer+0x16e2>
 8008796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <USB_EPStartXfer+0x166a>
 80087ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b0:	3301      	adds	r3, #1
 80087b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	029b      	lsls	r3, r3, #10
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4313      	orrs	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087d0:	801a      	strh	r2, [r3, #0]
 80087d2:	e02c      	b.n	800882e <USB_EPStartXfer+0x16e2>
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d124      	bne.n	800882e <USB_EPStartXfer+0x16e2>
 80087e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087fa:	4413      	add	r3, r2
 80087fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	011a      	lsls	r2, r3, #4
 800880e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008812:	4413      	add	r3, r2
 8008814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008820:	b29a      	uxth	r2, r3
 8008822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	e001      	b.n	800882e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e03a      	b.n	80088a4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800882e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008854:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800885c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008860:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008864:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008868:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800886c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800888e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800889a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889e:	b29b      	uxth	r3, r3
 80088a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d020      	beq.n	8008902 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d6:	81bb      	strh	r3, [r7, #12]
 80088d8:	89bb      	ldrh	r3, [r7, #12]
 80088da:	f083 0310 	eor.w	r3, r3, #16
 80088de:	81bb      	strh	r3, [r7, #12]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	441a      	add	r2, r3
 80088ea:	89bb      	ldrh	r3, [r7, #12]
 80088ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	8013      	strh	r3, [r2, #0]
 8008900:	e01f      	b.n	8008942 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008918:	81fb      	strh	r3, [r7, #14]
 800891a:	89fb      	ldrh	r3, [r7, #14]
 800891c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008920:	81fb      	strh	r3, [r7, #14]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	89fb      	ldrh	r3, [r7, #14]
 800892e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr

0800894e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800894e:	b480      	push	{r7}
 8008950:	b087      	sub	sp, #28
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	7b1b      	ldrb	r3, [r3, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 809d 	bne.w	8008a9c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d04c      	beq.n	8008a04 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	823b      	strh	r3, [r7, #16]
 8008978:	8a3b      	ldrh	r3, [r7, #16]
 800897a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01b      	beq.n	80089ba <USB_EPClearStall+0x6c>
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008998:	81fb      	strh	r3, [r7, #14]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	441a      	add	r2, r3
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	78db      	ldrb	r3, [r3, #3]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d06c      	beq.n	8008a9c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089d8:	81bb      	strh	r3, [r7, #12]
 80089da:	89bb      	ldrh	r3, [r7, #12]
 80089dc:	f083 0320 	eor.w	r3, r3, #32
 80089e0:	81bb      	strh	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	441a      	add	r2, r3
 80089ec:	89bb      	ldrh	r3, [r7, #12]
 80089ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	8013      	strh	r3, [r2, #0]
 8008a02:	e04b      	b.n	8008a9c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	82fb      	strh	r3, [r7, #22]
 8008a12:	8afb      	ldrh	r3, [r7, #22]
 8008a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <USB_EPClearStall+0x106>
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a32:	82bb      	strh	r3, [r7, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	8abb      	ldrh	r3, [r7, #20]
 8008a40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6a:	827b      	strh	r3, [r7, #18]
 8008a6c:	8a7b      	ldrh	r3, [r7, #18]
 8008a6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a72:	827b      	strh	r3, [r7, #18]
 8008a74:	8a7b      	ldrh	r3, [r7, #18]
 8008a76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a7a:	827b      	strh	r3, [r7, #18]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	8a7b      	ldrh	r3, [r7, #18]
 8008a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2280      	movs	r2, #128	@ 0x80
 8008abe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr

08008ace <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bc80      	pop	{r7}
 8008ae0:	4770      	bx	lr

08008ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr

08008af6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b08:	68fb      	ldr	r3, [r7, #12]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bc80      	pop	{r7}
 8008b28:	4770      	bx	lr

08008b2a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b08b      	sub	sp, #44	@ 0x2c
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	460b      	mov	r3, r1
 8008b3a:	80fb      	strh	r3, [r7, #6]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b40:	88bb      	ldrh	r3, [r7, #4]
 8008b42:	3301      	adds	r3, #1
 8008b44:	085b      	lsrs	r3, r3, #1
 8008b46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	005a      	lsls	r2, r3, #1
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b62:	e01f      	b.n	8008ba4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b21b      	sxth	r3, r3
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	b21a      	sxth	r2, r3
 8008b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	8a7a      	ldrh	r2, [r7, #18]
 8008b84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	3302      	adds	r3, #2
 8008b8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	3302      	adds	r3, #2
 8008b90:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1dc      	bne.n	8008b64 <USB_WritePMA+0x3a>
  }
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	372c      	adds	r7, #44	@ 0x2c
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b08b      	sub	sp, #44	@ 0x2c
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	80fb      	strh	r3, [r7, #6]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bcc:	88bb      	ldrh	r3, [r7, #4]
 8008bce:	085b      	lsrs	r3, r3, #1
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	005a      	lsls	r2, r3, #1
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bee:	e01b      	b.n	8008c28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	3302      	adds	r3, #2
 8008c20:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c24:	3b01      	subs	r3, #1
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e0      	bne.n	8008bf0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c2e:	88bb      	ldrh	r3, [r7, #4]
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	701a      	strb	r2, [r3, #0]
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	372c      	adds	r7, #44	@ 0x2c
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7c1b      	ldrb	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d115      	bne.n	8008c98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c70:	2202      	movs	r2, #2
 8008c72:	2181      	movs	r1, #129	@ 0x81
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 ffb4 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c84:	2202      	movs	r2, #2
 8008c86:	2101      	movs	r1, #1
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 ffaa 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008c96:	e012      	b.n	8008cbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c98:	2340      	movs	r3, #64	@ 0x40
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	2181      	movs	r1, #129	@ 0x81
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 ff9f 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008caa:	2340      	movs	r3, #64	@ 0x40
 8008cac:	2202      	movs	r2, #2
 8008cae:	2101      	movs	r1, #1
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 ff96 	bl	800abe2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	2182      	movs	r1, #130	@ 0x82
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 ff8c 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008cd4:	f002 f8ac 	bl	800ae30 <USBD_static_malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008cea:	2301      	movs	r3, #1
 8008cec:	73fb      	strb	r3, [r7, #15]
 8008cee:	e026      	b.n	8008d3e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	7c1b      	ldrb	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d109      	bne.n	8008d2e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d24:	2101      	movs	r1, #1
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f002 f84b 	bl	800adc2 <USBD_LL_PrepareReceive>
 8008d2c:	e007      	b.n	8008d3e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d34:	2340      	movs	r3, #64	@ 0x40
 8008d36:	2101      	movs	r1, #1
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f002 f842 	bl	800adc2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d58:	2181      	movs	r1, #129	@ 0x81
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 ff67 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d66:	2101      	movs	r1, #1
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 ff60 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d76:	2182      	movs	r1, #130	@ 0x82
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 ff58 	bl	800ac2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f002 f852 	bl	800ae48 <USBD_static_free>
    pdev->pClassData = NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d039      	beq.n	8008e54 <USBD_CDC_Setup+0x9e>
 8008de0:	2b20      	cmp	r3, #32
 8008de2:	d17f      	bne.n	8008ee4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d029      	beq.n	8008e40 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da11      	bge.n	8008e1a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	88d2      	ldrh	r2, [r2, #6]
 8008e08:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e0a:	6939      	ldr	r1, [r7, #16]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	88db      	ldrh	r3, [r3, #6]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fa06 	bl	800a224 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e18:	e06b      	b.n	8008ef2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	785a      	ldrb	r2, [r3, #1]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	88db      	ldrh	r3, [r3, #6]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e30:	6939      	ldr	r1, [r7, #16]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 fa21 	bl	800a280 <USBD_CtlPrepareRx>
      break;
 8008e3e:	e058      	b.n	8008ef2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	7850      	ldrb	r0, [r2, #1]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	4798      	blx	r3
      break;
 8008e52:	e04e      	b.n	8008ef2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b0b      	cmp	r3, #11
 8008e5a:	d02e      	beq.n	8008eba <USBD_CDC_Setup+0x104>
 8008e5c:	2b0b      	cmp	r3, #11
 8008e5e:	dc38      	bgt.n	8008ed2 <USBD_CDC_Setup+0x11c>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <USBD_CDC_Setup+0xb4>
 8008e64:	2b0a      	cmp	r3, #10
 8008e66:	d014      	beq.n	8008e92 <USBD_CDC_Setup+0xdc>
 8008e68:	e033      	b.n	8008ed2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d107      	bne.n	8008e84 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e74:	f107 030c 	add.w	r3, r7, #12
 8008e78:	2202      	movs	r2, #2
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f9d1 	bl	800a224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e82:	e02e      	b.n	8008ee2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f962 	bl	800a150 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e90:	e027      	b.n	8008ee2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d107      	bne.n	8008eac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e9c:	f107 030f 	add.w	r3, r7, #15
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f9bd 	bl	800a224 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eaa:	e01a      	b.n	8008ee2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f94e 	bl	800a150 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	75fb      	strb	r3, [r7, #23]
          break;
 8008eb8:	e013      	b.n	8008ee2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d00d      	beq.n	8008ee0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f942 	bl	800a150 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ed0:	e006      	b.n	8008ee0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f93b 	bl	800a150 <USBD_CtlError>
          ret = USBD_FAIL;
 8008eda:	2302      	movs	r3, #2
 8008edc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ede:	e000      	b.n	8008ee2 <USBD_CDC_Setup+0x12c>
          break;
 8008ee0:	bf00      	nop
      }
      break;
 8008ee2:	e006      	b.n	8008ef2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f932 	bl	800a150 <USBD_CtlError>
      ret = USBD_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef0:	bf00      	nop
  }

  return ret;
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f16:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d03a      	beq.n	8008f98 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	331c      	adds	r3, #28
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d029      	beq.n	8008f8c <USBD_CDC_DataIn+0x90>
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	331c      	adds	r3, #28
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	78f9      	ldrb	r1, [r7, #3]
 8008f4c:	68b8      	ldr	r0, [r7, #8]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4403      	add	r3, r0
 8008f58:	3320      	adds	r3, #32
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d110      	bne.n	8008f8c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	331c      	adds	r3, #28
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f7e:	78f9      	ldrb	r1, [r7, #3]
 8008f80:	2300      	movs	r3, #0
 8008f82:	2200      	movs	r2, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fef9 	bl	800ad7c <USBD_LL_Transmit>
 8008f8a:	e003      	b.n	8008f94 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e000      	b.n	8008f9a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f98:	2302      	movs	r3, #2
  }
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 ff24 	bl	800ae08 <USBD_LL_GetRxDataSize>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4798      	blx	r3

    return USBD_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009006:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800900e:	2b00      	cmp	r3, #0
 8009010:	d014      	beq.n	800903c <USBD_CDC_EP0_RxReady+0x44>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009018:	2bff      	cmp	r3, #255	@ 0xff
 800901a:	d00f      	beq.n	800903c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800902a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009032:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	22ff      	movs	r2, #255	@ 0xff
 8009038:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2243      	movs	r2, #67	@ 0x43
 8009054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20000094 	.word	0x20000094

08009068 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2243      	movs	r2, #67	@ 0x43
 8009074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009076:	4b03      	ldr	r3, [pc, #12]	@ (8009084 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000050 	.word	0x20000050

08009088 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2243      	movs	r2, #67	@ 0x43
 8009094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009096:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	200000d8 	.word	0x200000d8

080090a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	220a      	movs	r2, #10
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090b6:	4b03      	ldr	r3, [pc, #12]	@ (80090c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	2000000c 	.word	0x2000000c

080090c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009108:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009112:	88fa      	ldrh	r2, [r7, #6]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	371c      	adds	r7, #28
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009136:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800915a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01c      	beq.n	80091a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800916c:	2b00      	cmp	r3, #0
 800916e:	d115      	bne.n	800919c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800918e:	b29b      	uxth	r3, r3
 8009190:	2181      	movs	r1, #129	@ 0x81
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fdf2 	bl	800ad7c <USBD_LL_Transmit>

      return USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e002      	b.n	80091a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091a0:	2302      	movs	r3, #2
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d017      	beq.n	80091f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7c1b      	ldrb	r3, [r3, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d109      	bne.n	80091e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091d6:	2101      	movs	r1, #1
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 fdf2 	bl	800adc2 <USBD_LL_PrepareReceive>
 80091de:	e007      	b.n	80091f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091e6:	2340      	movs	r3, #64	@ 0x40
 80091e8:	2101      	movs	r1, #1
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fde9 	bl	800adc2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	4613      	mov	r3, r2
 800920a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009212:	2302      	movs	r3, #2
 8009214:	e01a      	b.n	800924c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f001 fc57 	bl	800aaf8 <USBD_LL_Init>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
 8009274:	e001      	b.n	800927a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009276:	2302      	movs	r3, #2
 8009278:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr

08009286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 fc8c 	bl	800abac <USBD_LL_Start>

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr

080092b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092be:	2302      	movs	r3, #2
 80092c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	4611      	mov	r1, r2
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fed8 	bl	800a0de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800933c:	461a      	mov	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800934a:	f003 031f 	and.w	r3, r3, #31
 800934e:	2b02      	cmp	r3, #2
 8009350:	d016      	beq.n	8009380 <USBD_LL_SetupStage+0x6a>
 8009352:	2b02      	cmp	r3, #2
 8009354:	d81c      	bhi.n	8009390 <USBD_LL_SetupStage+0x7a>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <USBD_LL_SetupStage+0x4a>
 800935a:	2b01      	cmp	r3, #1
 800935c:	d008      	beq.n	8009370 <USBD_LL_SetupStage+0x5a>
 800935e:	e017      	b.n	8009390 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f9cb 	bl	8009704 <USBD_StdDevReq>
      break;
 800936e:	e01a      	b.n	80093a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fa2d 	bl	80097d8 <USBD_StdItfReq>
      break;
 800937e:	e012      	b.n	80093a6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa6d 	bl	8009868 <USBD_StdEPReq>
      break;
 800938e:	e00a      	b.n	80093a6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009396:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800939a:	b2db      	uxtb	r3, r3
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fc64 	bl	800ac6c <USBD_LL_StallEP>
      break;
 80093a4:	bf00      	nop
  }

  return USBD_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	460b      	mov	r3, r1
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d14b      	bne.n	800945c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d134      	bne.n	8009440 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d919      	bls.n	8009416 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	1ad2      	subs	r2, r2, r3
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d203      	bcs.n	8009404 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009400:	b29b      	uxth	r3, r3
 8009402:	e002      	b.n	800940a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009408:	b29b      	uxth	r3, r3
 800940a:	461a      	mov	r2, r3
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 ff54 	bl	800a2bc <USBD_CtlContinueRx>
 8009414:	e038      	b.n	8009488 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009428:	2b03      	cmp	r3, #3
 800942a:	d105      	bne.n	8009438 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 ff51 	bl	800a2e0 <USBD_CtlSendStatus>
 800943e:	e023      	b.n	8009488 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009446:	2b05      	cmp	r3, #5
 8009448:	d11e      	bne.n	8009488 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009452:	2100      	movs	r1, #0
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f001 fc09 	bl	800ac6c <USBD_LL_StallEP>
 800945a:	e015      	b.n	8009488 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800946e:	2b03      	cmp	r3, #3
 8009470:	d108      	bne.n	8009484 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	7afa      	ldrb	r2, [r7, #11]
 800947c:	4611      	mov	r1, r2
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	4798      	blx	r3
 8009482:	e001      	b.n	8009488 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009484:	2302      	movs	r3, #2
 8009486:	e000      	b.n	800948a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	460b      	mov	r3, r1
 800949c:	607a      	str	r2, [r7, #4]
 800949e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d17f      	bne.n	80095a6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3314      	adds	r3, #20
 80094aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d15c      	bne.n	8009570 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d915      	bls.n	80094ee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	1ad2      	subs	r2, r2, r3
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 febe 	bl	800a25c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094e0:	2300      	movs	r3, #0
 80094e2:	2200      	movs	r2, #0
 80094e4:	2100      	movs	r1, #0
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f001 fc6b 	bl	800adc2 <USBD_LL_PrepareReceive>
 80094ec:	e04e      	b.n	800958c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	6912      	ldr	r2, [r2, #16]
 80094f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80094fa:	fb01 f202 	mul.w	r2, r1, r2
 80094fe:	1a9b      	subs	r3, r3, r2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11c      	bne.n	800953e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800950c:	429a      	cmp	r2, r3
 800950e:	d316      	bcc.n	800953e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800951a:	429a      	cmp	r2, r3
 800951c:	d20f      	bcs.n	800953e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fe9a 	bl	800a25c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009530:	2300      	movs	r3, #0
 8009532:	2200      	movs	r2, #0
 8009534:	2100      	movs	r1, #0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f001 fc43 	bl	800adc2 <USBD_LL_PrepareReceive>
 800953c:	e026      	b.n	800958c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009550:	2b03      	cmp	r3, #3
 8009552:	d105      	bne.n	8009560 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009560:	2180      	movs	r1, #128	@ 0x80
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 fb82 	bl	800ac6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fecc 	bl	800a306 <USBD_CtlReceiveStatus>
 800956e:	e00d      	b.n	800958c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009576:	2b04      	cmp	r3, #4
 8009578:	d004      	beq.n	8009584 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009580:	2b00      	cmp	r3, #0
 8009582:	d103      	bne.n	800958c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009584:	2180      	movs	r1, #128	@ 0x80
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f001 fb70 	bl	800ac6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009592:	2b01      	cmp	r3, #1
 8009594:	d11d      	bne.n	80095d2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7ff fe81 	bl	800929e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095a4:	e015      	b.n	80095d2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d108      	bne.n	80095ce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	7afa      	ldrb	r2, [r7, #11]
 80095c6:	4611      	mov	r1, r2
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	4798      	blx	r3
 80095cc:	e001      	b.n	80095d2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095ce:	2302      	movs	r3, #2
 80095d0:	e000      	b.n	80095d4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e4:	2340      	movs	r3, #64	@ 0x40
 80095e6:	2200      	movs	r2, #0
 80095e8:	2100      	movs	r1, #0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 faf9 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2240      	movs	r2, #64	@ 0x40
 80095fc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009600:	2340      	movs	r3, #64	@ 0x40
 8009602:	2200      	movs	r2, #0
 8009604:	2180      	movs	r1, #128	@ 0x80
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 faeb 	bl	800abe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2240      	movs	r2, #64	@ 0x40
 8009616:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6852      	ldr	r2, [r2, #4]
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	4611      	mov	r1, r2
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
  }

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	78fa      	ldrb	r2, [r7, #3]
 800966e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr

0800967c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2204      	movs	r2, #4
 8009694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	bc80      	pop	{r7}
 80096a2:	4770      	bx	lr

080096a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d105      	bne.n	80096c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr

080096ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d10b      	bne.n	80096f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800971a:	2b40      	cmp	r3, #64	@ 0x40
 800971c:	d005      	beq.n	800972a <USBD_StdDevReq+0x26>
 800971e:	2b40      	cmp	r3, #64	@ 0x40
 8009720:	d84f      	bhi.n	80097c2 <USBD_StdDevReq+0xbe>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <USBD_StdDevReq+0x36>
 8009726:	2b20      	cmp	r3, #32
 8009728:	d14b      	bne.n	80097c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	4798      	blx	r3
      break;
 8009738:	e048      	b.n	80097cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b09      	cmp	r3, #9
 8009740:	d839      	bhi.n	80097b6 <USBD_StdDevReq+0xb2>
 8009742:	a201      	add	r2, pc, #4	@ (adr r2, 8009748 <USBD_StdDevReq+0x44>)
 8009744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009748:	08009799 	.word	0x08009799
 800974c:	080097ad 	.word	0x080097ad
 8009750:	080097b7 	.word	0x080097b7
 8009754:	080097a3 	.word	0x080097a3
 8009758:	080097b7 	.word	0x080097b7
 800975c:	0800977b 	.word	0x0800977b
 8009760:	08009771 	.word	0x08009771
 8009764:	080097b7 	.word	0x080097b7
 8009768:	0800978f 	.word	0x0800978f
 800976c:	08009785 	.word	0x08009785
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9dc 	bl	8009b30 <USBD_GetDescriptor>
          break;
 8009778:	e022      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fb3f 	bl	8009e00 <USBD_SetAddress>
          break;
 8009782:	e01d      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fb7e 	bl	8009e88 <USBD_SetConfig>
          break;
 800978c:	e018      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fc07 	bl	8009fa4 <USBD_GetConfig>
          break;
 8009796:	e013      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fc37 	bl	800a00e <USBD_GetStatus>
          break;
 80097a0:	e00e      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc65 	bl	800a074 <USBD_SetFeature>
          break;
 80097aa:	e009      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc74 	bl	800a09c <USBD_ClrFeature>
          break;
 80097b4:	e004      	b.n	80097c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fcc9 	bl	800a150 <USBD_CtlError>
          break;
 80097be:	bf00      	nop
      }
      break;
 80097c0:	e004      	b.n	80097cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fcc3 	bl	800a150 <USBD_CtlError>
      break;
 80097ca:	bf00      	nop
  }

  return ret;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop

080097d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097ee:	2b40      	cmp	r3, #64	@ 0x40
 80097f0:	d005      	beq.n	80097fe <USBD_StdItfReq+0x26>
 80097f2:	2b40      	cmp	r3, #64	@ 0x40
 80097f4:	d82e      	bhi.n	8009854 <USBD_StdItfReq+0x7c>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <USBD_StdItfReq+0x26>
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	d12a      	bne.n	8009854 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009804:	3b01      	subs	r3, #1
 8009806:	2b02      	cmp	r3, #2
 8009808:	d81d      	bhi.n	8009846 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	889b      	ldrh	r3, [r3, #4]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b01      	cmp	r3, #1
 8009812:	d813      	bhi.n	800983c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d110      	bne.n	8009850 <USBD_StdItfReq+0x78>
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10d      	bne.n	8009850 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fd53 	bl	800a2e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800983a:	e009      	b.n	8009850 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fc86 	bl	800a150 <USBD_CtlError>
          break;
 8009844:	e004      	b.n	8009850 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fc81 	bl	800a150 <USBD_CtlError>
          break;
 800984e:	e000      	b.n	8009852 <USBD_StdItfReq+0x7a>
          break;
 8009850:	bf00      	nop
      }
      break;
 8009852:	e004      	b.n	800985e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fc7a 	bl	800a150 <USBD_CtlError>
      break;
 800985c:	bf00      	nop
  }

  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009884:	2b40      	cmp	r3, #64	@ 0x40
 8009886:	d007      	beq.n	8009898 <USBD_StdEPReq+0x30>
 8009888:	2b40      	cmp	r3, #64	@ 0x40
 800988a:	f200 8146 	bhi.w	8009b1a <USBD_StdEPReq+0x2b2>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <USBD_StdEPReq+0x40>
 8009892:	2b20      	cmp	r3, #32
 8009894:	f040 8141 	bne.w	8009b1a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	6839      	ldr	r1, [r7, #0]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      break;
 80098a6:	e13d      	b.n	8009b24 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d10a      	bne.n	80098ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	e12d      	b.n	8009b26 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d007      	beq.n	80098e2 <USBD_StdEPReq+0x7a>
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	f300 811b 	bgt.w	8009b0e <USBD_StdEPReq+0x2a6>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d072      	beq.n	80099c2 <USBD_StdEPReq+0x15a>
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d03a      	beq.n	8009956 <USBD_StdEPReq+0xee>
 80098e0:	e115      	b.n	8009b0e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d002      	beq.n	80098f2 <USBD_StdEPReq+0x8a>
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d015      	beq.n	800991c <USBD_StdEPReq+0xb4>
 80098f0:	e02b      	b.n	800994a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00c      	beq.n	8009912 <USBD_StdEPReq+0xaa>
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	2b80      	cmp	r3, #128	@ 0x80
 80098fc:	d009      	beq.n	8009912 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 f9b2 	bl	800ac6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009908:	2180      	movs	r1, #128	@ 0x80
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f001 f9ae 	bl	800ac6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009910:	e020      	b.n	8009954 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc1b 	bl	800a150 <USBD_CtlError>
              break;
 800991a:	e01b      	b.n	8009954 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10e      	bne.n	8009942 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <USBD_StdEPReq+0xda>
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b80      	cmp	r3, #128	@ 0x80
 800992e:	d008      	beq.n	8009942 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	88db      	ldrh	r3, [r3, #6]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f995 	bl	800ac6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fccc 	bl	800a2e0 <USBD_CtlSendStatus>

              break;
 8009948:	e004      	b.n	8009954 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fbff 	bl	800a150 <USBD_CtlError>
              break;
 8009952:	bf00      	nop
          }
          break;
 8009954:	e0e0      	b.n	8009b18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800995c:	2b02      	cmp	r3, #2
 800995e:	d002      	beq.n	8009966 <USBD_StdEPReq+0xfe>
 8009960:	2b03      	cmp	r3, #3
 8009962:	d015      	beq.n	8009990 <USBD_StdEPReq+0x128>
 8009964:	e026      	b.n	80099b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00c      	beq.n	8009986 <USBD_StdEPReq+0x11e>
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b80      	cmp	r3, #128	@ 0x80
 8009970:	d009      	beq.n	8009986 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 f978 	bl	800ac6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800997c:	2180      	movs	r1, #128	@ 0x80
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 f974 	bl	800ac6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009984:	e01c      	b.n	80099c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fbe1 	bl	800a150 <USBD_CtlError>
              break;
 800998e:	e017      	b.n	80099c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	885b      	ldrh	r3, [r3, #2]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d112      	bne.n	80099be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 f97f 	bl	800acaa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc97 	bl	800a2e0 <USBD_CtlSendStatus>
              }
              break;
 80099b2:	e004      	b.n	80099be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fbca 	bl	800a150 <USBD_CtlError>
              break;
 80099bc:	e000      	b.n	80099c0 <USBD_StdEPReq+0x158>
              break;
 80099be:	bf00      	nop
          }
          break;
 80099c0:	e0aa      	b.n	8009b18 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d002      	beq.n	80099d2 <USBD_StdEPReq+0x16a>
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d032      	beq.n	8009a36 <USBD_StdEPReq+0x1ce>
 80099d0:	e097      	b.n	8009b02 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d007      	beq.n	80099e8 <USBD_StdEPReq+0x180>
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	2b80      	cmp	r3, #128	@ 0x80
 80099dc:	d004      	beq.n	80099e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fbb5 	bl	800a150 <USBD_CtlError>
                break;
 80099e6:	e091      	b.n	8009b0c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da0b      	bge.n	8009a08 <USBD_StdEPReq+0x1a0>
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	3310      	adds	r3, #16
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	3304      	adds	r3, #4
 8009a06:	e00b      	b.n	8009a20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3304      	adds	r3, #4
 8009a20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fbf8 	bl	800a224 <USBD_CtlSendData>
              break;
 8009a34:	e06a      	b.n	8009b0c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da11      	bge.n	8009a62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	3318      	adds	r3, #24
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d117      	bne.n	8009a88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fb78 	bl	800a150 <USBD_CtlError>
                  break;
 8009a60:	e054      	b.n	8009b0c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	f003 020f 	and.w	r2, r3, #15
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d104      	bne.n	8009a88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fb65 	bl	800a150 <USBD_CtlError>
                  break;
 8009a86:	e041      	b.n	8009b0c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	da0b      	bge.n	8009aa8 <USBD_StdEPReq+0x240>
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	3310      	adds	r3, #16
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	e00b      	b.n	8009ac0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	3304      	adds	r3, #4
 8009ac0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <USBD_StdEPReq+0x266>
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b80      	cmp	r3, #128	@ 0x80
 8009acc:	d103      	bne.n	8009ad6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	e00e      	b.n	8009af4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 f904 	bl	800ace8 <USBD_LL_IsStallEP>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	e002      	b.n	8009af4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2202      	movs	r2, #2
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fb92 	bl	800a224 <USBD_CtlSendData>
              break;
 8009b00:	e004      	b.n	8009b0c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fb23 	bl	800a150 <USBD_CtlError>
              break;
 8009b0a:	bf00      	nop
          }
          break;
 8009b0c:	e004      	b.n	8009b18 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fb1d 	bl	800a150 <USBD_CtlError>
          break;
 8009b16:	bf00      	nop
      }
      break;
 8009b18:	e004      	b.n	8009b24 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fb17 	bl	800a150 <USBD_CtlError>
      break;
 8009b22:	bf00      	nop
  }

  return ret;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	0a1b      	lsrs	r3, r3, #8
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	2b06      	cmp	r3, #6
 8009b52:	f200 8128 	bhi.w	8009da6 <USBD_GetDescriptor+0x276>
 8009b56:	a201      	add	r2, pc, #4	@ (adr r2, 8009b5c <USBD_GetDescriptor+0x2c>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b91 	.word	0x08009b91
 8009b64:	08009bd1 	.word	0x08009bd1
 8009b68:	08009da7 	.word	0x08009da7
 8009b6c:	08009da7 	.word	0x08009da7
 8009b70:	08009d47 	.word	0x08009d47
 8009b74:	08009d73 	.word	0x08009d73
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	f107 0108 	add.w	r1, r7, #8
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
      break;
 8009b8e:	e112      	b.n	8009db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	7c1b      	ldrb	r3, [r3, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10d      	bne.n	8009bb4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba0:	f107 0208 	add.w	r2, r7, #8
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
 8009ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3301      	adds	r3, #1
 8009bae:	2202      	movs	r2, #2
 8009bb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bb2:	e100      	b.n	8009db6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	f107 0208 	add.w	r2, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	2202      	movs	r2, #2
 8009bcc:	701a      	strb	r2, [r3, #0]
      break;
 8009bce:	e0f2      	b.n	8009db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	885b      	ldrh	r3, [r3, #2]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	f200 80ac 	bhi.w	8009d34 <USBD_GetDescriptor+0x204>
 8009bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <USBD_GetDescriptor+0xb4>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009bfd 	.word	0x08009bfd
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c65 	.word	0x08009c65
 8009bf0:	08009c99 	.word	0x08009c99
 8009bf4:	08009ccd 	.word	0x08009ccd
 8009bf8:	08009d01 	.word	0x08009d01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00b      	beq.n	8009c20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7c12      	ldrb	r2, [r2, #16]
 8009c14:	f107 0108 	add.w	r1, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c1e:	e091      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa94 	bl	800a150 <USBD_CtlError>
            err++;
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c2e:	e089      	b.n	8009d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00b      	beq.n	8009c54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	7c12      	ldrb	r2, [r2, #16]
 8009c48:	f107 0108 	add.w	r1, r7, #8
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
 8009c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c52:	e077      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa7a 	bl	800a150 <USBD_CtlError>
            err++;
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	72fb      	strb	r3, [r7, #11]
          break;
 8009c62:	e06f      	b.n	8009d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e05d      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa60 	bl	800a150 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e055      	b.n	8009d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e043      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa46 	bl	800a150 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e03b      	b.n	8009d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e029      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa2c 	bl	800a150 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e021      	b.n	8009d44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e00f      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa12 	bl	800a150 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e007      	b.n	8009d44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa0a 	bl	800a150 <USBD_CtlError>
          err++;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d42:	e038      	b.n	8009db6 <USBD_GetDescriptor+0x286>
 8009d44:	e037      	b.n	8009db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	7c1b      	ldrb	r3, [r3, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d56:	f107 0208 	add.w	r2, r7, #8
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4798      	blx	r3
 8009d5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d60:	e029      	b.n	8009db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f9f3 	bl	800a150 <USBD_CtlError>
        err++;
 8009d6a:	7afb      	ldrb	r3, [r7, #11]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d70:	e021      	b.n	8009db6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7c1b      	ldrb	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10d      	bne.n	8009d96 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d82:	f107 0208 	add.w	r2, r7, #8
 8009d86:	4610      	mov	r0, r2
 8009d88:	4798      	blx	r3
 8009d8a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	2207      	movs	r2, #7
 8009d92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d94:	e00f      	b.n	8009db6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d96:	6839      	ldr	r1, [r7, #0]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9d9 	bl	800a150 <USBD_CtlError>
        err++;
 8009d9e:	7afb      	ldrb	r3, [r7, #11]
 8009da0:	3301      	adds	r3, #1
 8009da2:	72fb      	strb	r3, [r7, #11]
      break;
 8009da4:	e007      	b.n	8009db6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9d1 	bl	800a150 <USBD_CtlError>
      err++;
 8009dae:	7afb      	ldrb	r3, [r7, #11]
 8009db0:	3301      	adds	r3, #1
 8009db2:	72fb      	strb	r3, [r7, #11]
      break;
 8009db4:	bf00      	nop
  }

  if (err != 0U)
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d11c      	bne.n	8009df6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009dbc:	893b      	ldrh	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d011      	beq.n	8009de6 <USBD_GetDescriptor+0x2b6>
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00d      	beq.n	8009de6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	88da      	ldrh	r2, [r3, #6]
 8009dce:	893b      	ldrh	r3, [r7, #8]
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	bf28      	it	cs
 8009dd4:	4613      	movcs	r3, r2
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dda:	893b      	ldrh	r3, [r7, #8]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68f9      	ldr	r1, [r7, #12]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fa1f 	bl	800a224 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	88db      	ldrh	r3, [r3, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d104      	bne.n	8009df8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fa76 	bl	800a2e0 <USBD_CtlSendStatus>
 8009df4:	e000      	b.n	8009df8 <USBD_GetDescriptor+0x2c8>
    return;
 8009df6:	bf00      	nop
    }
  }
}
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop

08009e00 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	889b      	ldrh	r3, [r3, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d130      	bne.n	8009e74 <USBD_SetAddress+0x74>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	88db      	ldrh	r3, [r3, #6]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d12c      	bne.n	8009e74 <USBD_SetAddress+0x74>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e20:	d828      	bhi.n	8009e74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d104      	bne.n	8009e42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f988 	bl	800a150 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e40:	e01d      	b.n	8009e7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	7bfa      	ldrb	r2, [r7, #15]
 8009e46:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 ff75 	bl	800ad3e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa43 	bl	800a2e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2202      	movs	r2, #2
 8009e64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e68:	e009      	b.n	8009e7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	e004      	b.n	8009e7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f96a 	bl	800a150 <USBD_CtlError>
  }
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	4b41      	ldr	r3, [pc, #260]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e9c:	4b40      	ldr	r3, [pc, #256]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d904      	bls.n	8009eae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f952 	bl	800a150 <USBD_CtlError>
 8009eac:	e075      	b.n	8009f9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d002      	beq.n	8009ebe <USBD_SetConfig+0x36>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d023      	beq.n	8009f04 <USBD_SetConfig+0x7c>
 8009ebc:	e062      	b.n	8009f84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ebe:	4b38      	ldr	r3, [pc, #224]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01a      	beq.n	8009efc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ec6:	4b36      	ldr	r3, [pc, #216]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ed8:	4b31      	ldr	r3, [pc, #196]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff f9e7 	bl	80092b2 <USBD_SetClassConfig>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d104      	bne.n	8009ef4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f92f 	bl	800a150 <USBD_CtlError>
            return;
 8009ef2:	e052      	b.n	8009f9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9f3 	bl	800a2e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009efa:	e04e      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9ef 	bl	800a2e0 <USBD_CtlSendStatus>
        break;
 8009f02:	e04a      	b.n	8009f9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f04:	4b26      	ldr	r3, [pc, #152]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d112      	bne.n	8009f32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f14:	4b22      	ldr	r3, [pc, #136]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f1e:	4b20      	ldr	r3, [pc, #128]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff f9e3 	bl	80092f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f9d8 	bl	800a2e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f30:	e033      	b.n	8009f9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f32:	4b1b      	ldr	r3, [pc, #108]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d01d      	beq.n	8009f7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff f9d1 	bl	80092f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f4e:	4b14      	ldr	r3, [pc, #80]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f58:	4b11      	ldr	r3, [pc, #68]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff f9a7 	bl	80092b2 <USBD_SetClassConfig>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d104      	bne.n	8009f74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f8ef 	bl	800a150 <USBD_CtlError>
            return;
 8009f72:	e012      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f9b3 	bl	800a2e0 <USBD_CtlSendStatus>
        break;
 8009f7a:	e00e      	b.n	8009f9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9af 	bl	800a2e0 <USBD_CtlSendStatus>
        break;
 8009f82:	e00a      	b.n	8009f9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f8e2 	bl	800a150 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f8c:	4b04      	ldr	r3, [pc, #16]	@ (8009fa0 <USBD_SetConfig+0x118>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff f9ac 	bl	80092f0 <USBD_ClrClassConfig>
        break;
 8009f98:	bf00      	nop
    }
  }
}
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000580 	.word	0x20000580

08009fa4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	88db      	ldrh	r3, [r3, #6]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d004      	beq.n	8009fc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f8c9 	bl	800a150 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fbe:	e022      	b.n	800a006 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	dc02      	bgt.n	8009fd0 <USBD_GetConfig+0x2c>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	dc03      	bgt.n	8009fd6 <USBD_GetConfig+0x32>
 8009fce:	e015      	b.n	8009ffc <USBD_GetConfig+0x58>
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d00b      	beq.n	8009fec <USBD_GetConfig+0x48>
 8009fd4:	e012      	b.n	8009ffc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3308      	adds	r3, #8
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f91d 	bl	800a224 <USBD_CtlSendData>
        break;
 8009fea:	e00c      	b.n	800a006 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f915 	bl	800a224 <USBD_CtlSendData>
        break;
 8009ffa:	e004      	b.n	800a006 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f8a6 	bl	800a150 <USBD_CtlError>
        break;
 800a004:	bf00      	nop
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a01e:	3b01      	subs	r3, #1
 800a020:	2b02      	cmp	r3, #2
 800a022:	d81e      	bhi.n	800a062 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	88db      	ldrh	r3, [r3, #6]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d004      	beq.n	800a036 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f88e 	bl	800a150 <USBD_CtlError>
        break;
 800a034:	e01a      	b.n	800a06c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f043 0202 	orr.w	r2, r3, #2
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	330c      	adds	r3, #12
 800a056:	2202      	movs	r2, #2
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f8e2 	bl	800a224 <USBD_CtlSendData>
      break;
 800a060:	e004      	b.n	800a06c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f873 	bl	800a150 <USBD_CtlError>
      break;
 800a06a:	bf00      	nop
  }
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	885b      	ldrh	r3, [r3, #2]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d106      	bne.n	800a094 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f926 	bl	800a2e0 <USBD_CtlSendStatus>
  }
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d80b      	bhi.n	800a0ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	885b      	ldrh	r3, [r3, #2]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d10c      	bne.n	800a0d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f90c 	bl	800a2e0 <USBD_CtlSendStatus>
      }
      break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f83f 	bl	800a150 <USBD_CtlError>
      break;
 800a0d2:	e000      	b.n	800a0d6 <USBD_ClrFeature+0x3a>
      break;
 800a0d4:	bf00      	nop
  }
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	785a      	ldrb	r2, [r3, #1]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	3303      	adds	r3, #3
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	b29b      	uxth	r3, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3304      	adds	r3, #4
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	3305      	adds	r3, #5
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	b29b      	uxth	r3, r3
 800a124:	4413      	add	r3, r2
 800a126:	b29a      	uxth	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	3306      	adds	r3, #6
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	3307      	adds	r3, #7
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	4413      	add	r3, r2
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	80da      	strh	r2, [r3, #6]

}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr

0800a150 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a15a:	2180      	movs	r1, #128	@ 0x80
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fd85 	bl	800ac6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a162:	2100      	movs	r1, #0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fd81 	bl	800ac6c <USBD_LL_StallEP>
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d032      	beq.n	800a1ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f000 f834 	bl	800a1f6 <USBD_GetLen>
 800a18e:	4603      	mov	r3, r0
 800a190:	3301      	adds	r3, #1
 800a192:	b29b      	uxth	r3, r3
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	b29a      	uxth	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	75fa      	strb	r2, [r7, #23]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	7812      	ldrb	r2, [r2, #0]
 800a1ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	75fa      	strb	r2, [r7, #23]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1be:	e012      	b.n	800a1e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	60fa      	str	r2, [r7, #12]
 800a1c6:	7dfa      	ldrb	r2, [r7, #23]
 800a1c8:	1c51      	adds	r1, r2, #1
 800a1ca:	75f9      	strb	r1, [r7, #23]
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	75fa      	strb	r2, [r7, #23]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e8      	bne.n	800a1c0 <USBD_GetString+0x4e>
    }
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a202:	e005      	b.n	800a210 <USBD_GetLen+0x1a>
  {
    len++;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	3301      	adds	r3, #1
 800a208:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3301      	adds	r3, #1
 800a20e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1f5      	bne.n	800a204 <USBD_GetLen+0xe>
  }

  return len;
 800a218:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr

0800a224 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2202      	movs	r2, #2
 800a236:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a23a:	88fa      	ldrh	r2, [r7, #6]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a240:	88fa      	ldrh	r2, [r7, #6]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	2100      	movs	r1, #0
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fd95 	bl	800ad7c <USBD_LL_Transmit>

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	2100      	movs	r1, #0
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fd83 	bl	800ad7c <USBD_LL_Transmit>

  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2203      	movs	r2, #3
 800a292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a296:	88fa      	ldrh	r2, [r7, #6]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a29e:	88fa      	ldrh	r2, [r7, #6]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 fd88 	bl	800adc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fd76 	bl	800adc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2204      	movs	r2, #4
 800a2ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fd40 	bl	800ad7c <USBD_LL_Transmit>

  return USBD_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2205      	movs	r2, #5
 800a312:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a316:	2300      	movs	r3, #0
 800a318:	2200      	movs	r2, #0
 800a31a:	2100      	movs	r1, #0
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fd50 	bl	800adc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a330:	2200      	movs	r2, #0
 800a332:	4912      	ldr	r1, [pc, #72]	@ (800a37c <MX_USB_DEVICE_Init+0x50>)
 800a334:	4812      	ldr	r0, [pc, #72]	@ (800a380 <MX_USB_DEVICE_Init+0x54>)
 800a336:	f7fe ff62 	bl	80091fe <USBD_Init>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a340:	f7f7 fa94 	bl	800186c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a344:	490f      	ldr	r1, [pc, #60]	@ (800a384 <MX_USB_DEVICE_Init+0x58>)
 800a346:	480e      	ldr	r0, [pc, #56]	@ (800a380 <MX_USB_DEVICE_Init+0x54>)
 800a348:	f7fe ff84 	bl	8009254 <USBD_RegisterClass>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d001      	beq.n	800a356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a352:	f7f7 fa8b 	bl	800186c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a356:	490c      	ldr	r1, [pc, #48]	@ (800a388 <MX_USB_DEVICE_Init+0x5c>)
 800a358:	4809      	ldr	r0, [pc, #36]	@ (800a380 <MX_USB_DEVICE_Init+0x54>)
 800a35a:	f7fe feb5 	bl	80090c8 <USBD_CDC_RegisterInterface>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a364:	f7f7 fa82 	bl	800186c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a368:	4805      	ldr	r0, [pc, #20]	@ (800a380 <MX_USB_DEVICE_Init+0x54>)
 800a36a:	f7fe ff8c 	bl	8009286 <USBD_Start>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a374:	f7f7 fa7a 	bl	800186c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	2000012c 	.word	0x2000012c
 800a380:	20000584 	.word	0x20000584
 800a384:	20000018 	.word	0x20000018
 800a388:	2000011c 	.word	0x2000011c

0800a38c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a390:	2200      	movs	r2, #0
 800a392:	4905      	ldr	r1, [pc, #20]	@ (800a3a8 <CDC_Init_FS+0x1c>)
 800a394:	4805      	ldr	r0, [pc, #20]	@ (800a3ac <CDC_Init_FS+0x20>)
 800a396:	f7fe fead 	bl	80090f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a39a:	4905      	ldr	r1, [pc, #20]	@ (800a3b0 <CDC_Init_FS+0x24>)
 800a39c:	4803      	ldr	r0, [pc, #12]	@ (800a3ac <CDC_Init_FS+0x20>)
 800a39e:	f7fe fec2 	bl	8009126 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000c48 	.word	0x20000c48
 800a3ac:	20000584 	.word	0x20000584
 800a3b0:	20000848 	.word	0x20000848

0800a3b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	6039      	str	r1, [r7, #0]
 800a3ce:	71fb      	strb	r3, [r7, #7]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b23      	cmp	r3, #35	@ 0x23
 800a3d8:	d84a      	bhi.n	800a470 <CDC_Control_FS+0xac>
 800a3da:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e0 <CDC_Control_FS+0x1c>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a471 	.word	0x0800a471
 800a3e4:	0800a471 	.word	0x0800a471
 800a3e8:	0800a471 	.word	0x0800a471
 800a3ec:	0800a471 	.word	0x0800a471
 800a3f0:	0800a471 	.word	0x0800a471
 800a3f4:	0800a471 	.word	0x0800a471
 800a3f8:	0800a471 	.word	0x0800a471
 800a3fc:	0800a471 	.word	0x0800a471
 800a400:	0800a471 	.word	0x0800a471
 800a404:	0800a471 	.word	0x0800a471
 800a408:	0800a471 	.word	0x0800a471
 800a40c:	0800a471 	.word	0x0800a471
 800a410:	0800a471 	.word	0x0800a471
 800a414:	0800a471 	.word	0x0800a471
 800a418:	0800a471 	.word	0x0800a471
 800a41c:	0800a471 	.word	0x0800a471
 800a420:	0800a471 	.word	0x0800a471
 800a424:	0800a471 	.word	0x0800a471
 800a428:	0800a471 	.word	0x0800a471
 800a42c:	0800a471 	.word	0x0800a471
 800a430:	0800a471 	.word	0x0800a471
 800a434:	0800a471 	.word	0x0800a471
 800a438:	0800a471 	.word	0x0800a471
 800a43c:	0800a471 	.word	0x0800a471
 800a440:	0800a471 	.word	0x0800a471
 800a444:	0800a471 	.word	0x0800a471
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a471 	.word	0x0800a471
 800a460:	0800a471 	.word	0x0800a471
 800a464:	0800a471 	.word	0x0800a471
 800a468:	0800a471 	.word	0x0800a471
 800a46c:	0800a471 	.word	0x0800a471
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a470:	bf00      	nop
  }

  return (USBD_OK);
 800a472:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b09e      	sub	sp, #120	@ 0x78
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static char rx_buffer[64]; // Буфер для сборки команды
		static uint8_t rx_index = 0; // Индекс текуцей позиции
		    // Обработка всех принятых байт
		    for (uint32_t i = 0; i < *Len; i++) {
 800a48a:	2300      	movs	r3, #0
 800a48c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a48e:	e106      	b.n	800a69e <CDC_Receive_FS+0x21e>
		        char byte = Buf[i]; // Чтение байта
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a494:	4413      	add	r3, r2
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		        // Если конец строки или буфер переполен - заканчиваем строку
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 800a49c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a4a0:	2b0a      	cmp	r3, #10
 800a4a2:	d004      	beq.n	800a4ae <CDC_Receive_FS+0x2e>
 800a4a4:	4b87      	ldr	r3, [pc, #540]	@ (800a6c4 <CDC_Receive_FS+0x244>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4aa:	f240 80ea 	bls.w	800a682 <CDC_Receive_FS+0x202>
		            rx_buffer[rx_index] = '\0';
 800a4ae:	4b85      	ldr	r3, [pc, #532]	@ (800a6c4 <CDC_Receive_FS+0x244>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4b84      	ldr	r3, [pc, #528]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	5499      	strb	r1, [r3, r2]
		            // Обработка команды частоты: F<канал>:<частота>
		                     if (rx_buffer[0] == 'F') {
 800a4ba:	4b83      	ldr	r3, [pc, #524]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b46      	cmp	r3, #70	@ 0x46
 800a4c0:	d17e      	bne.n	800a5c0 <CDC_Receive_FS+0x140>
		                         uint8_t ch = rx_buffer[1] - '0';
 800a4c2:	4b81      	ldr	r3, [pc, #516]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	3b30      	subs	r3, #48	@ 0x30
 800a4c8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a4cc:	4b7e      	ldr	r3, [pc, #504]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a4ce:	789b      	ldrb	r3, [r3, #2]
 800a4d0:	2b3a      	cmp	r3, #58	@ 0x3a
 800a4d2:	d170      	bne.n	800a5b6 <CDC_Receive_FS+0x136>
 800a4d4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d86c      	bhi.n	800a5b6 <CDC_Receive_FS+0x136>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 800a4dc:	487b      	ldr	r0, [pc, #492]	@ (800a6cc <CDC_Receive_FS+0x24c>)
 800a4de:	f000 fcf3 	bl	800aec8 <atoi>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 800a4e6:	4879      	ldr	r0, [pc, #484]	@ (800a6cc <CDC_Receive_FS+0x24c>)
 800a4e8:	f000 fcee 	bl	800aec8 <atoi>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	65bb      	str	r3, [r7, #88]	@ 0x58
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a4f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d038      	beq.n	800a568 <CDC_Receive_FS+0xe8>
 800a4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4f8:	4a75      	ldr	r2, [pc, #468]	@ (800a6d0 <CDC_Receive_FS+0x250>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d834      	bhi.n	800a568 <CDC_Receive_FS+0xe8>
		                            	 //si5351_enableOutputs(0xFF);
		                            	 extern int freq[3];
		                            	 extern void print_interface_mode0(void);

		                            	 extern void int_to_str(int num, char *str);
		                            	 freq[ch] = set_freq / 1000;
 800a4fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a500:	4a74      	ldr	r2, [pc, #464]	@ (800a6d4 <CDC_Receive_FS+0x254>)
 800a502:	fba2 2303 	umull	r2, r3, r2, r3
 800a506:	099a      	lsrs	r2, r3, #6
 800a508:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a50c:	4611      	mov	r1, r2
 800a50e:	4a72      	ldr	r2, [pc, #456]	@ (800a6d8 <CDC_Receive_FS+0x258>)
 800a510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 800a514:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a518:	4a6f      	ldr	r2, [pc, #444]	@ (800a6d8 <CDC_Receive_FS+0x258>)
 800a51a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a51e:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	4a6c      	ldr	r2, [pc, #432]	@ (800a6dc <CDC_Receive_FS+0x25c>)
 800a52a:	4413      	add	r3, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	f7f6 faab 	bl	8000a88 <int_to_str>
		                            	 print_interface_mode0();
 800a532:	f7f6 fbab 	bl	8000c8c <print_interface_mode0>
		                            	 char msg[64];
		                            	 // Формируем и отправляем сообщение с установленной частотой
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 800a536:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a53a:	f107 000c 	add.w	r0, r7, #12
 800a53e:	4a66      	ldr	r2, [pc, #408]	@ (800a6d8 <CDC_Receive_FS+0x258>)
 800a540:	9200      	str	r2, [sp, #0]
 800a542:	4a67      	ldr	r2, [pc, #412]	@ (800a6e0 <CDC_Receive_FS+0x260>)
 800a544:	2140      	movs	r1, #64	@ 0x40
 800a546:	f000 fd47 	bl	800afd8 <sniprintf>
		                            	 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a54a:	f107 030c 	add.w	r3, r7, #12
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f5 fdfe 	bl	8000150 <strlen>
 800a554:	4603      	mov	r3, r0
 800a556:	b29a      	uxth	r2, r3
 800a558:	f107 030c 	add.w	r3, r7, #12
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f8d4 	bl	800a70c <CDC_Transmit_FS>
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a564:	bf00      	nop
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a566:	e088      	b.n	800a67a <CDC_Receive_FS+0x1fa>
		                             } else if (freq == 0) {
 800a568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d11e      	bne.n	800a5ac <CDC_Receive_FS+0x12c>
		                            	 // Если частота = 0 - отключение выходного канала
		                                 uint8_t disable_mask = ~(1 << ch);
 800a56e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a572:	2201      	movs	r2, #1
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	43db      	mvns	r3, r3
 800a57c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		                                 //si5351_enableOutputs(disable_mask);
		                                 char msg[32];
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 800a580:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a584:	f107 000c 	add.w	r0, r7, #12
 800a588:	4a56      	ldr	r2, [pc, #344]	@ (800a6e4 <CDC_Receive_FS+0x264>)
 800a58a:	2120      	movs	r1, #32
 800a58c:	f000 fd24 	bl	800afd8 <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a590:	f107 030c 	add.w	r3, r7, #12
 800a594:	4618      	mov	r0, r3
 800a596:	f7f5 fddb 	bl	8000150 <strlen>
 800a59a:	4603      	mov	r3, r0
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	f107 030c 	add.w	r3, r7, #12
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 f8b1 	bl	800a70c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a5aa:	e066      	b.n	800a67a <CDC_Receive_FS+0x1fa>
		                             } else {
		                            	 // Проверка неправильного ввода частоты
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 800a5ac:	2114      	movs	r1, #20
 800a5ae:	484e      	ldr	r0, [pc, #312]	@ (800a6e8 <CDC_Receive_FS+0x268>)
 800a5b0:	f000 f8ac 	bl	800a70c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a5b4:	e061      	b.n	800a67a <CDC_Receive_FS+0x1fa>
		                             }
		                         } else {
		                        	 // Проверка неправильного формата команды
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 800a5b6:	2111      	movs	r1, #17
 800a5b8:	484c      	ldr	r0, [pc, #304]	@ (800a6ec <CDC_Receive_FS+0x26c>)
 800a5ba:	f000 f8a7 	bl	800a70c <CDC_Transmit_FS>
 800a5be:	e05c      	b.n	800a67a <CDC_Receive_FS+0x1fa>
		                         }
		                     }
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	494b      	ldr	r1, [pc, #300]	@ (800a6f0 <CDC_Receive_FS+0x270>)
 800a5c4:	4840      	ldr	r0, [pc, #256]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a5c6:	f000 fd45 	bl	800b054 <strncmp>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d116      	bne.n	800a5fe <CDC_Receive_FS+0x17e>
		                // Команда проверки связи
		                char msg[] = "Normally\r\n";
 800a5d0:	4a48      	ldr	r2, [pc, #288]	@ (800a6f4 <CDC_Receive_FS+0x274>)
 800a5d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a5d8:	c303      	stmia	r3!, {r0, r1}
 800a5da:	801a      	strh	r2, [r3, #0]
 800a5dc:	3302      	adds	r3, #2
 800a5de:	0c12      	lsrs	r2, r2, #16
 800a5e0:	701a      	strb	r2, [r3, #0]
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a5e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f5 fdb2 	bl	8000150 <strlen>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f888 	bl	800a70c <CDC_Transmit_FS>
 800a5fc:	e03d      	b.n	800a67a <CDC_Receive_FS+0x1fa>
		            }
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 800a5fe:	2206      	movs	r2, #6
 800a600:	493d      	ldr	r1, [pc, #244]	@ (800a6f8 <CDC_Receive_FS+0x278>)
 800a602:	4831      	ldr	r0, [pc, #196]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a604:	f000 fd26 	bl	800b054 <strncmp>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d135      	bne.n	800a67a <CDC_Receive_FS+0x1fa>
		                extern int freq[3];  // частоты каналов, кГц
		                char msg[64];
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a60e:	2300      	movs	r3, #0
 800a610:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a614:	e02d      	b.n	800a672 <CDC_Receive_FS+0x1f2>
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800a616:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a61a:	4a2f      	ldr	r2, [pc, #188]	@ (800a6d8 <CDC_Receive_FS+0x258>)
 800a61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a620:	2b00      	cmp	r3, #0
 800a622:	dd01      	ble.n	800a628 <CDC_Receive_FS+0x1a8>
 800a624:	4b35      	ldr	r3, [pc, #212]	@ (800a6fc <CDC_Receive_FS+0x27c>)
 800a626:	e000      	b.n	800a62a <CDC_Receive_FS+0x1aa>
 800a628:	4b35      	ldr	r3, [pc, #212]	@ (800a700 <CDC_Receive_FS+0x280>)
 800a62a:	667b      	str	r3, [r7, #100]	@ 0x64
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800a62c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800a630:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a634:	4928      	ldr	r1, [pc, #160]	@ (800a6d8 <CDC_Receive_FS+0x258>)
 800a636:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a63a:	f107 000c 	add.w	r0, r7, #12
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	4613      	mov	r3, r2
 800a646:	4a2f      	ldr	r2, [pc, #188]	@ (800a704 <CDC_Receive_FS+0x284>)
 800a648:	2140      	movs	r1, #64	@ 0x40
 800a64a:	f000 fcc5 	bl	800afd8 <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	4618      	mov	r0, r3
 800a654:	f7f5 fd7c 	bl	8000150 <strlen>
 800a658:	4603      	mov	r3, r0
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	f107 030c 	add.w	r3, r7, #12
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f852 	bl	800a70c <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a668:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a66c:	3301      	adds	r3, #1
 800a66e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a672:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a676:	2b02      	cmp	r3, #2
 800a678:	d9cd      	bls.n	800a616 <CDC_Receive_FS+0x196>
		                }
		            }
		            rx_index = 0; // Очищаем буфер
 800a67a:	4b12      	ldr	r3, [pc, #72]	@ (800a6c4 <CDC_Receive_FS+0x244>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	e00a      	b.n	800a698 <CDC_Receive_FS+0x218>

		        } else {
		            rx_buffer[rx_index++] = byte;
 800a682:	4b10      	ldr	r3, [pc, #64]	@ (800a6c4 <CDC_Receive_FS+0x244>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	b2d1      	uxtb	r1, r2
 800a68a:	4a0e      	ldr	r2, [pc, #56]	@ (800a6c4 <CDC_Receive_FS+0x244>)
 800a68c:	7011      	strb	r1, [r2, #0]
 800a68e:	4619      	mov	r1, r3
 800a690:	4a0d      	ldr	r2, [pc, #52]	@ (800a6c8 <CDC_Receive_FS+0x248>)
 800a692:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a696:	5453      	strb	r3, [r2, r1]
		    for (uint32_t i = 0; i < *Len; i++) {
 800a698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a69a:	3301      	adds	r3, #1
 800a69c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	f4ff aef3 	bcc.w	800a490 <CDC_Receive_FS+0x10>
		        }
		    }

		    // Запускаем приём следующего пакета
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4816      	ldr	r0, [pc, #88]	@ (800a708 <CDC_Receive_FS+0x288>)
 800a6ae:	f7fe fd3a 	bl	8009126 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6b2:	4815      	ldr	r0, [pc, #84]	@ (800a708 <CDC_Receive_FS+0x288>)
 800a6b4:	f7fe fd79 	bl	80091aa <USBD_CDC_ReceivePacket>
		    return (USBD_OK);
 800a6b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3770      	adds	r7, #112	@ 0x70
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20001048 	.word	0x20001048
 800a6c8:	2000104c 	.word	0x2000104c
 800a6cc:	2000104f 	.word	0x2000104f
 800a6d0:	08f0d17f 	.word	0x08f0d17f
 800a6d4:	10624dd3 	.word	0x10624dd3
 800a6d8:	20000324 	.word	0x20000324
 800a6dc:	20000338 	.word	0x20000338
 800a6e0:	0800c7d8 	.word	0x0800c7d8
 800a6e4:	0800c7f0 	.word	0x0800c7f0
 800a6e8:	0800c800 	.word	0x0800c800
 800a6ec:	0800c814 	.word	0x0800c814
 800a6f0:	0800c828 	.word	0x0800c828
 800a6f4:	0800c858 	.word	0x0800c858
 800a6f8:	0800c834 	.word	0x0800c834
 800a6fc:	0800c83c 	.word	0x0800c83c
 800a700:	0800c840 	.word	0x0800c840
 800a704:	0800c844 	.word	0x0800c844
 800a708:	20000584 	.word	0x20000584

0800a70c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a71c:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <CDC_Transmit_FS+0x48>)
 800a71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a722:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a72e:	2301      	movs	r3, #1
 800a730:	e00b      	b.n	800a74a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a732:	887b      	ldrh	r3, [r7, #2]
 800a734:	461a      	mov	r2, r3
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4806      	ldr	r0, [pc, #24]	@ (800a754 <CDC_Transmit_FS+0x48>)
 800a73a:	f7fe fcdb 	bl	80090f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a73e:	4805      	ldr	r0, [pc, #20]	@ (800a754 <CDC_Transmit_FS+0x48>)
 800a740:	f7fe fd04 	bl	800914c <USBD_CDC_TransmitPacket>
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a748:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20000584 	.word	0x20000584

0800a758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2212      	movs	r2, #18
 800a768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a76a:	4b03      	ldr	r3, [pc, #12]	@ (800a778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000148 	.word	0x20000148

0800a77c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2204      	movs	r2, #4
 800a78c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a78e:	4b03      	ldr	r3, [pc, #12]	@ (800a79c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	bc80      	pop	{r7}
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	2000015c 	.word	0x2000015c

0800a7a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	6039      	str	r1, [r7, #0]
 800a7aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d105      	bne.n	800a7be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	4907      	ldr	r1, [pc, #28]	@ (800a7d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7b6:	4808      	ldr	r0, [pc, #32]	@ (800a7d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7b8:	f7ff fcdb 	bl	800a172 <USBD_GetString>
 800a7bc:	e004      	b.n	800a7c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	4904      	ldr	r1, [pc, #16]	@ (800a7d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7c2:	4805      	ldr	r0, [pc, #20]	@ (800a7d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7c4:	f7ff fcd5 	bl	800a172 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7c8:	4b02      	ldr	r3, [pc, #8]	@ (800a7d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2000108c 	.word	0x2000108c
 800a7d8:	0800c864 	.word	0x0800c864

0800a7dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	6039      	str	r1, [r7, #0]
 800a7e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	4904      	ldr	r1, [pc, #16]	@ (800a7fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7ec:	4804      	ldr	r0, [pc, #16]	@ (800a800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7ee:	f7ff fcc0 	bl	800a172 <USBD_GetString>
  return USBD_StrDesc;
 800a7f2:	4b02      	ldr	r3, [pc, #8]	@ (800a7fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	2000108c 	.word	0x2000108c
 800a800:	0800c878 	.word	0x0800c878

0800a804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	221a      	movs	r2, #26
 800a814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a816:	f000 f843 	bl	800a8a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a81a:	4b02      	ldr	r3, [pc, #8]	@ (800a824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20000160 	.word	0x20000160

0800a828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a834:	79fb      	ldrb	r3, [r7, #7]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d105      	bne.n	800a846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	4907      	ldr	r1, [pc, #28]	@ (800a85c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a83e:	4808      	ldr	r0, [pc, #32]	@ (800a860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a840:	f7ff fc97 	bl	800a172 <USBD_GetString>
 800a844:	e004      	b.n	800a850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4904      	ldr	r1, [pc, #16]	@ (800a85c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a84a:	4805      	ldr	r0, [pc, #20]	@ (800a860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a84c:	f7ff fc91 	bl	800a172 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a850:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	2000108c 	.word	0x2000108c
 800a860:	0800c88c 	.word	0x0800c88c

0800a864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	4603      	mov	r3, r0
 800a86c:	6039      	str	r1, [r7, #0]
 800a86e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a870:	79fb      	ldrb	r3, [r7, #7]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d105      	bne.n	800a882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4907      	ldr	r1, [pc, #28]	@ (800a898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a87a:	4808      	ldr	r0, [pc, #32]	@ (800a89c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a87c:	f7ff fc79 	bl	800a172 <USBD_GetString>
 800a880:	e004      	b.n	800a88c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	4904      	ldr	r1, [pc, #16]	@ (800a898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a886:	4805      	ldr	r0, [pc, #20]	@ (800a89c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a888:	f7ff fc73 	bl	800a172 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a88c:	4b02      	ldr	r3, [pc, #8]	@ (800a898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	2000108c 	.word	0x2000108c
 800a89c:	0800c898 	.word	0x0800c898

0800a8a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e4 <Get_SerialNum+0x44>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e8 <Get_SerialNum+0x48>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a8ec <Get_SerialNum+0x4c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4413      	add	r3, r2
 800a8be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d009      	beq.n	800a8da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8c6:	2208      	movs	r2, #8
 800a8c8:	4909      	ldr	r1, [pc, #36]	@ (800a8f0 <Get_SerialNum+0x50>)
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f814 	bl	800a8f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8d0:	2204      	movs	r2, #4
 800a8d2:	4908      	ldr	r1, [pc, #32]	@ (800a8f4 <Get_SerialNum+0x54>)
 800a8d4:	68b8      	ldr	r0, [r7, #8]
 800a8d6:	f000 f80f 	bl	800a8f8 <IntToUnicode>
  }
}
 800a8da:	bf00      	nop
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	1ffff7e8 	.word	0x1ffff7e8
 800a8e8:	1ffff7ec 	.word	0x1ffff7ec
 800a8ec:	1ffff7f0 	.word	0x1ffff7f0
 800a8f0:	20000162 	.word	0x20000162
 800a8f4:	20000172 	.word	0x20000172

0800a8f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	4613      	mov	r3, r2
 800a904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a90a:	2300      	movs	r3, #0
 800a90c:	75fb      	strb	r3, [r7, #23]
 800a90e:	e027      	b.n	800a960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	0f1b      	lsrs	r3, r3, #28
 800a914:	2b09      	cmp	r3, #9
 800a916:	d80b      	bhi.n	800a930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	0f1b      	lsrs	r3, r3, #28
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	4619      	mov	r1, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	440b      	add	r3, r1
 800a928:	3230      	adds	r2, #48	@ 0x30
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e00a      	b.n	800a946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0f1b      	lsrs	r3, r3, #28
 800a934:	b2da      	uxtb	r2, r3
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4619      	mov	r1, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	440b      	add	r3, r1
 800a940:	3237      	adds	r2, #55	@ 0x37
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	011b      	lsls	r3, r3, #4
 800a94a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	3301      	adds	r3, #1
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	4413      	add	r3, r2
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	3301      	adds	r3, #1
 800a95e:	75fb      	strb	r3, [r7, #23]
 800a960:	7dfa      	ldrb	r2, [r7, #23]
 800a962:	79fb      	ldrb	r3, [r7, #7]
 800a964:	429a      	cmp	r2, r3
 800a966:	d3d3      	bcc.n	800a910 <IntToUnicode+0x18>
  }
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr

0800a974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0d      	ldr	r2, [pc, #52]	@ (800a9b8 <HAL_PCD_MspInit+0x44>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d113      	bne.n	800a9ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a986:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <HAL_PCD_MspInit+0x48>)
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	4a0c      	ldr	r2, [pc, #48]	@ (800a9bc <HAL_PCD_MspInit+0x48>)
 800a98c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a990:	61d3      	str	r3, [r2, #28]
 800a992:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <HAL_PCD_MspInit+0x48>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2014      	movs	r0, #20
 800a9a4:	f7f7 fce5 	bl	8002372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9a8:	2014      	movs	r0, #20
 800a9aa:	f7f7 fcfe 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40005c00 	.word	0x40005c00
 800a9bc:	40021000 	.word	0x40021000

0800a9c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fe fc9d 	bl	8009316 <USBD_LL_SetupStage>
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	440b      	add	r3, r1
 800aa04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	78fb      	ldrb	r3, [r7, #3]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f7fe fccf 	bl	80093b0 <USBD_LL_DataOutStage>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	440b      	add	r3, r1
 800aa3a:	3324      	adds	r3, #36	@ 0x24
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	4619      	mov	r1, r3
 800aa42:	f7fe fd26 	bl	8009492 <USBD_LL_DataInStage>
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe fe36 	bl	80096ce <USBD_LL_SOF>
}
 800aa62:	bf00      	nop
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa72:	2301      	movs	r3, #1
 800aa74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	799b      	ldrb	r3, [r3, #6]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d001      	beq.n	800aa82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa7e:	f7f6 fef5 	bl	800186c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa88:	7bfa      	ldrb	r2, [r7, #15]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fde6 	bl	800965e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fd9f 	bl	80095dc <USBD_LL_Reset>
}
 800aa9e:	bf00      	nop
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fde0 	bl	800967c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	7a9b      	ldrb	r3, [r3, #10]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aac4:	4b04      	ldr	r3, [pc, #16]	@ (800aad8 <HAL_PCD_SuspendCallback+0x30>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4a03      	ldr	r2, [pc, #12]	@ (800aad8 <HAL_PCD_SuspendCallback+0x30>)
 800aaca:	f043 0306 	orr.w	r3, r3, #6
 800aace:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	e000ed00 	.word	0xe000ed00

0800aadc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fdda 	bl	80096a4 <USBD_LL_Resume>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab00:	4a28      	ldr	r2, [pc, #160]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a26      	ldr	r2, [pc, #152]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab0c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab10:	4b24      	ldr	r3, [pc, #144]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab12:	4a25      	ldr	r2, [pc, #148]	@ (800aba8 <USBD_LL_Init+0xb0>)
 800ab14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab16:	4b23      	ldr	r3, [pc, #140]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab18:	2208      	movs	r2, #8
 800ab1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab1c:	4b21      	ldr	r3, [pc, #132]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab1e:	2202      	movs	r2, #2
 800ab20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab22:	4b20      	ldr	r3, [pc, #128]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab28:	4b1e      	ldr	r3, [pc, #120]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab2e:	4b1d      	ldr	r3, [pc, #116]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab34:	481b      	ldr	r0, [pc, #108]	@ (800aba4 <USBD_LL_Init+0xac>)
 800ab36:	f7f8 fcb3 	bl	80034a0 <HAL_PCD_Init>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab40:	f7f6 fe94 	bl	800186c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab4a:	2318      	movs	r3, #24
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	f7fa f9c4 	bl	8004edc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab5a:	2358      	movs	r3, #88	@ 0x58
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2180      	movs	r1, #128	@ 0x80
 800ab60:	f7fa f9bc 	bl	8004edc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab6a:	23c0      	movs	r3, #192	@ 0xc0
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2181      	movs	r1, #129	@ 0x81
 800ab70:	f7fa f9b4 	bl	8004edc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2101      	movs	r1, #1
 800ab82:	f7fa f9ab 	bl	8004edc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab90:	2200      	movs	r2, #0
 800ab92:	2182      	movs	r1, #130	@ 0x82
 800ab94:	f7fa f9a2 	bl	8004edc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	2000128c 	.word	0x2000128c
 800aba8:	40005c00 	.word	0x40005c00

0800abac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f8 fd62 	bl	800368c <HAL_PCD_Start>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f94e 	bl	800ae70 <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	4608      	mov	r0, r1
 800abec:	4611      	mov	r1, r2
 800abee:	461a      	mov	r2, r3
 800abf0:	4603      	mov	r3, r0
 800abf2:	70fb      	strb	r3, [r7, #3]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70bb      	strb	r3, [r7, #2]
 800abf8:	4613      	mov	r3, r2
 800abfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac0a:	78bb      	ldrb	r3, [r7, #2]
 800ac0c:	883a      	ldrh	r2, [r7, #0]
 800ac0e:	78f9      	ldrb	r1, [r7, #3]
 800ac10:	f7f8 feb6 	bl	8003980 <HAL_PCD_EP_Open>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 f928 	bl	800ae70 <USBD_Get_USB_Status>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac48:	78fa      	ldrb	r2, [r7, #3]
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f8 fef4 	bl	8003a3a <HAL_PCD_EP_Close>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 f909 	bl	800ae70 <USBD_Get_USB_Status>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	4611      	mov	r1, r2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 ff9c 	bl	8003bc8 <HAL_PCD_EP_SetStall>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f8ea 	bl	800ae70 <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	4611      	mov	r1, r2
 800acc8:	4618      	mov	r0, r3
 800acca:	f7f8 ffdd 	bl	8003c88 <HAL_PCD_EP_ClrStall>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 f8cb 	bl	800ae70 <USBD_Get_USB_Status>
 800acda:	4603      	mov	r3, r0
 800acdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	da0b      	bge.n	800ad1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	440b      	add	r3, r1
 800ad16:	3312      	adds	r3, #18
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	e00b      	b.n	800ad34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	440b      	add	r3, r1
 800ad2e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ad32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bc80      	pop	{r7}
 800ad3c:	4770      	bx	lr

0800ad3e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad58:	78fa      	ldrb	r2, [r7, #3]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f8 fdeb 	bl	8003938 <HAL_PCD_SetAddress>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f000 f881 	bl	800ae70 <USBD_Get_USB_Status>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	607a      	str	r2, [r7, #4]
 800ad86:	461a      	mov	r2, r3
 800ad88:	460b      	mov	r3, r1
 800ad8a:	72fb      	strb	r3, [r7, #11]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad9e:	893b      	ldrh	r3, [r7, #8]
 800ada0:	7af9      	ldrb	r1, [r7, #11]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	f7f8 fed9 	bl	8003b5a <HAL_PCD_EP_Transmit>
 800ada8:	4603      	mov	r3, r0
 800adaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 f85e 	bl	800ae70 <USBD_Get_USB_Status>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b086      	sub	sp, #24
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	461a      	mov	r2, r3
 800adce:	460b      	mov	r3, r1
 800add0:	72fb      	strb	r3, [r7, #11]
 800add2:	4613      	mov	r3, r2
 800add4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ade4:	893b      	ldrh	r3, [r7, #8]
 800ade6:	7af9      	ldrb	r1, [r7, #11]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	f7f8 fe6e 	bl	8003aca <HAL_PCD_EP_Receive>
 800adee:	4603      	mov	r3, r0
 800adf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 f83b 	bl	800ae70 <USBD_Get_USB_Status>
 800adfa:	4603      	mov	r3, r0
 800adfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae1a:	78fa      	ldrb	r2, [r7, #3]
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f8 fe84 	bl	8003b2c <HAL_PCD_EP_GetRxCount>
 800ae24:	4603      	mov	r3, r0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae38:	4b02      	ldr	r3, [pc, #8]	@ (800ae44 <USBD_static_malloc+0x14>)
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bc80      	pop	{r7}
 800ae42:	4770      	bx	lr
 800ae44:	20001564 	.word	0x20001564

0800ae48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]

}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bc80      	pop	{r7}
 800ae58:	4770      	bx	lr

0800ae5a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b083      	sub	sp, #12
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	2b03      	cmp	r3, #3
 800ae82:	d817      	bhi.n	800aeb4 <USBD_Get_USB_Status+0x44>
 800ae84:	a201      	add	r2, pc, #4	@ (adr r2, 800ae8c <USBD_Get_USB_Status+0x1c>)
 800ae86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8a:	bf00      	nop
 800ae8c:	0800ae9d 	.word	0x0800ae9d
 800ae90:	0800aea3 	.word	0x0800aea3
 800ae94:	0800aea9 	.word	0x0800aea9
 800ae98:	0800aeaf 	.word	0x0800aeaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aea0:	e00b      	b.n	800aeba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aea2:	2302      	movs	r3, #2
 800aea4:	73fb      	strb	r3, [r7, #15]
    break;
 800aea6:	e008      	b.n	800aeba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
    break;
 800aeac:	e005      	b.n	800aeba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb2:	e002      	b.n	800aeba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb8:	bf00      	nop
  }
  return usb_status;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop

0800aec8 <atoi>:
 800aec8:	220a      	movs	r2, #10
 800aeca:	2100      	movs	r1, #0
 800aecc:	f000 b87a 	b.w	800afc4 <strtol>

0800aed0 <_strtol_l.isra.0>:
 800aed0:	2b24      	cmp	r3, #36	@ 0x24
 800aed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed6:	4686      	mov	lr, r0
 800aed8:	4690      	mov	r8, r2
 800aeda:	d801      	bhi.n	800aee0 <_strtol_l.isra.0+0x10>
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d106      	bne.n	800aeee <_strtol_l.isra.0+0x1e>
 800aee0:	f000 f8ca 	bl	800b078 <__errno>
 800aee4:	2316      	movs	r3, #22
 800aee6:	6003      	str	r3, [r0, #0]
 800aee8:	2000      	movs	r0, #0
 800aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeee:	460d      	mov	r5, r1
 800aef0:	4833      	ldr	r0, [pc, #204]	@ (800afc0 <_strtol_l.isra.0+0xf0>)
 800aef2:	462a      	mov	r2, r5
 800aef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aef8:	5d06      	ldrb	r6, [r0, r4]
 800aefa:	f016 0608 	ands.w	r6, r6, #8
 800aefe:	d1f8      	bne.n	800aef2 <_strtol_l.isra.0+0x22>
 800af00:	2c2d      	cmp	r4, #45	@ 0x2d
 800af02:	d110      	bne.n	800af26 <_strtol_l.isra.0+0x56>
 800af04:	2601      	movs	r6, #1
 800af06:	782c      	ldrb	r4, [r5, #0]
 800af08:	1c95      	adds	r5, r2, #2
 800af0a:	f033 0210 	bics.w	r2, r3, #16
 800af0e:	d115      	bne.n	800af3c <_strtol_l.isra.0+0x6c>
 800af10:	2c30      	cmp	r4, #48	@ 0x30
 800af12:	d10d      	bne.n	800af30 <_strtol_l.isra.0+0x60>
 800af14:	782a      	ldrb	r2, [r5, #0]
 800af16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af1a:	2a58      	cmp	r2, #88	@ 0x58
 800af1c:	d108      	bne.n	800af30 <_strtol_l.isra.0+0x60>
 800af1e:	786c      	ldrb	r4, [r5, #1]
 800af20:	3502      	adds	r5, #2
 800af22:	2310      	movs	r3, #16
 800af24:	e00a      	b.n	800af3c <_strtol_l.isra.0+0x6c>
 800af26:	2c2b      	cmp	r4, #43	@ 0x2b
 800af28:	bf04      	itt	eq
 800af2a:	782c      	ldrbeq	r4, [r5, #0]
 800af2c:	1c95      	addeq	r5, r2, #2
 800af2e:	e7ec      	b.n	800af0a <_strtol_l.isra.0+0x3a>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1f6      	bne.n	800af22 <_strtol_l.isra.0+0x52>
 800af34:	2c30      	cmp	r4, #48	@ 0x30
 800af36:	bf14      	ite	ne
 800af38:	230a      	movne	r3, #10
 800af3a:	2308      	moveq	r3, #8
 800af3c:	2200      	movs	r2, #0
 800af3e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af42:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af46:	fbbc f9f3 	udiv	r9, ip, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	fb03 ca19 	mls	sl, r3, r9, ip
 800af50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af54:	2f09      	cmp	r7, #9
 800af56:	d80f      	bhi.n	800af78 <_strtol_l.isra.0+0xa8>
 800af58:	463c      	mov	r4, r7
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	dd1b      	ble.n	800af96 <_strtol_l.isra.0+0xc6>
 800af5e:	1c57      	adds	r7, r2, #1
 800af60:	d007      	beq.n	800af72 <_strtol_l.isra.0+0xa2>
 800af62:	4581      	cmp	r9, r0
 800af64:	d314      	bcc.n	800af90 <_strtol_l.isra.0+0xc0>
 800af66:	d101      	bne.n	800af6c <_strtol_l.isra.0+0x9c>
 800af68:	45a2      	cmp	sl, r4
 800af6a:	db11      	blt.n	800af90 <_strtol_l.isra.0+0xc0>
 800af6c:	2201      	movs	r2, #1
 800af6e:	fb00 4003 	mla	r0, r0, r3, r4
 800af72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af76:	e7eb      	b.n	800af50 <_strtol_l.isra.0+0x80>
 800af78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af7c:	2f19      	cmp	r7, #25
 800af7e:	d801      	bhi.n	800af84 <_strtol_l.isra.0+0xb4>
 800af80:	3c37      	subs	r4, #55	@ 0x37
 800af82:	e7ea      	b.n	800af5a <_strtol_l.isra.0+0x8a>
 800af84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af88:	2f19      	cmp	r7, #25
 800af8a:	d804      	bhi.n	800af96 <_strtol_l.isra.0+0xc6>
 800af8c:	3c57      	subs	r4, #87	@ 0x57
 800af8e:	e7e4      	b.n	800af5a <_strtol_l.isra.0+0x8a>
 800af90:	f04f 32ff 	mov.w	r2, #4294967295
 800af94:	e7ed      	b.n	800af72 <_strtol_l.isra.0+0xa2>
 800af96:	1c53      	adds	r3, r2, #1
 800af98:	d108      	bne.n	800afac <_strtol_l.isra.0+0xdc>
 800af9a:	2322      	movs	r3, #34	@ 0x22
 800af9c:	4660      	mov	r0, ip
 800af9e:	f8ce 3000 	str.w	r3, [lr]
 800afa2:	f1b8 0f00 	cmp.w	r8, #0
 800afa6:	d0a0      	beq.n	800aeea <_strtol_l.isra.0+0x1a>
 800afa8:	1e69      	subs	r1, r5, #1
 800afaa:	e006      	b.n	800afba <_strtol_l.isra.0+0xea>
 800afac:	b106      	cbz	r6, 800afb0 <_strtol_l.isra.0+0xe0>
 800afae:	4240      	negs	r0, r0
 800afb0:	f1b8 0f00 	cmp.w	r8, #0
 800afb4:	d099      	beq.n	800aeea <_strtol_l.isra.0+0x1a>
 800afb6:	2a00      	cmp	r2, #0
 800afb8:	d1f6      	bne.n	800afa8 <_strtol_l.isra.0+0xd8>
 800afba:	f8c8 1000 	str.w	r1, [r8]
 800afbe:	e794      	b.n	800aeea <_strtol_l.isra.0+0x1a>
 800afc0:	0800ddb3 	.word	0x0800ddb3

0800afc4 <strtol>:
 800afc4:	4613      	mov	r3, r2
 800afc6:	460a      	mov	r2, r1
 800afc8:	4601      	mov	r1, r0
 800afca:	4802      	ldr	r0, [pc, #8]	@ (800afd4 <strtol+0x10>)
 800afcc:	6800      	ldr	r0, [r0, #0]
 800afce:	f7ff bf7f 	b.w	800aed0 <_strtol_l.isra.0>
 800afd2:	bf00      	nop
 800afd4:	2000017c 	.word	0x2000017c

0800afd8 <sniprintf>:
 800afd8:	b40c      	push	{r2, r3}
 800afda:	b530      	push	{r4, r5, lr}
 800afdc:	4b18      	ldr	r3, [pc, #96]	@ (800b040 <sniprintf+0x68>)
 800afde:	1e0c      	subs	r4, r1, #0
 800afe0:	681d      	ldr	r5, [r3, #0]
 800afe2:	b09d      	sub	sp, #116	@ 0x74
 800afe4:	da08      	bge.n	800aff8 <sniprintf+0x20>
 800afe6:	238b      	movs	r3, #139	@ 0x8b
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	b01d      	add	sp, #116	@ 0x74
 800aff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aff4:	b002      	add	sp, #8
 800aff6:	4770      	bx	lr
 800aff8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800affc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b006:	bf0c      	ite	eq
 800b008:	4623      	moveq	r3, r4
 800b00a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b00e:	9304      	str	r3, [sp, #16]
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b016:	9002      	str	r0, [sp, #8]
 800b018:	9006      	str	r0, [sp, #24]
 800b01a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b01e:	4628      	mov	r0, r5
 800b020:	ab21      	add	r3, sp, #132	@ 0x84
 800b022:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b024:	a902      	add	r1, sp, #8
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	f000 f9b2 	bl	800b390 <_svfiprintf_r>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	bfbc      	itt	lt
 800b030:	238b      	movlt	r3, #139	@ 0x8b
 800b032:	602b      	strlt	r3, [r5, #0]
 800b034:	2c00      	cmp	r4, #0
 800b036:	d0da      	beq.n	800afee <sniprintf+0x16>
 800b038:	2200      	movs	r2, #0
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e7d6      	b.n	800afee <sniprintf+0x16>
 800b040:	2000017c 	.word	0x2000017c

0800b044 <memset>:
 800b044:	4603      	mov	r3, r0
 800b046:	4402      	add	r2, r0
 800b048:	4293      	cmp	r3, r2
 800b04a:	d100      	bne.n	800b04e <memset+0xa>
 800b04c:	4770      	bx	lr
 800b04e:	f803 1b01 	strb.w	r1, [r3], #1
 800b052:	e7f9      	b.n	800b048 <memset+0x4>

0800b054 <strncmp>:
 800b054:	b510      	push	{r4, lr}
 800b056:	b16a      	cbz	r2, 800b074 <strncmp+0x20>
 800b058:	3901      	subs	r1, #1
 800b05a:	1884      	adds	r4, r0, r2
 800b05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b060:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b064:	429a      	cmp	r2, r3
 800b066:	d103      	bne.n	800b070 <strncmp+0x1c>
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d001      	beq.n	800b070 <strncmp+0x1c>
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d1f5      	bne.n	800b05c <strncmp+0x8>
 800b070:	1ad0      	subs	r0, r2, r3
 800b072:	bd10      	pop	{r4, pc}
 800b074:	4610      	mov	r0, r2
 800b076:	e7fc      	b.n	800b072 <strncmp+0x1e>

0800b078 <__errno>:
 800b078:	4b01      	ldr	r3, [pc, #4]	@ (800b080 <__errno+0x8>)
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	2000017c 	.word	0x2000017c

0800b084 <__libc_init_array>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	2600      	movs	r6, #0
 800b088:	4d0c      	ldr	r5, [pc, #48]	@ (800b0bc <__libc_init_array+0x38>)
 800b08a:	4c0d      	ldr	r4, [pc, #52]	@ (800b0c0 <__libc_init_array+0x3c>)
 800b08c:	1b64      	subs	r4, r4, r5
 800b08e:	10a4      	asrs	r4, r4, #2
 800b090:	42a6      	cmp	r6, r4
 800b092:	d109      	bne.n	800b0a8 <__libc_init_array+0x24>
 800b094:	f001 fb80 	bl	800c798 <_init>
 800b098:	2600      	movs	r6, #0
 800b09a:	4d0a      	ldr	r5, [pc, #40]	@ (800b0c4 <__libc_init_array+0x40>)
 800b09c:	4c0a      	ldr	r4, [pc, #40]	@ (800b0c8 <__libc_init_array+0x44>)
 800b09e:	1b64      	subs	r4, r4, r5
 800b0a0:	10a4      	asrs	r4, r4, #2
 800b0a2:	42a6      	cmp	r6, r4
 800b0a4:	d105      	bne.n	800b0b2 <__libc_init_array+0x2e>
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}
 800b0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ac:	4798      	blx	r3
 800b0ae:	3601      	adds	r6, #1
 800b0b0:	e7ee      	b.n	800b090 <__libc_init_array+0xc>
 800b0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b6:	4798      	blx	r3
 800b0b8:	3601      	adds	r6, #1
 800b0ba:	e7f2      	b.n	800b0a2 <__libc_init_array+0x1e>
 800b0bc:	0800df30 	.word	0x0800df30
 800b0c0:	0800df30 	.word	0x0800df30
 800b0c4:	0800df30 	.word	0x0800df30
 800b0c8:	0800df34 	.word	0x0800df34

0800b0cc <__retarget_lock_acquire_recursive>:
 800b0cc:	4770      	bx	lr

0800b0ce <__retarget_lock_release_recursive>:
 800b0ce:	4770      	bx	lr

0800b0d0 <memcpy>:
 800b0d0:	440a      	add	r2, r1
 800b0d2:	4291      	cmp	r1, r2
 800b0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0d8:	d100      	bne.n	800b0dc <memcpy+0xc>
 800b0da:	4770      	bx	lr
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e2:	4291      	cmp	r1, r2
 800b0e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0e8:	d1f9      	bne.n	800b0de <memcpy+0xe>
 800b0ea:	bd10      	pop	{r4, pc}

0800b0ec <_free_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	d040      	beq.n	800b176 <_free_r+0x8a>
 800b0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f8:	1f0c      	subs	r4, r1, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bfb8      	it	lt
 800b0fe:	18e4      	addlt	r4, r4, r3
 800b100:	f000 f8de 	bl	800b2c0 <__malloc_lock>
 800b104:	4a1c      	ldr	r2, [pc, #112]	@ (800b178 <_free_r+0x8c>)
 800b106:	6813      	ldr	r3, [r2, #0]
 800b108:	b933      	cbnz	r3, 800b118 <_free_r+0x2c>
 800b10a:	6063      	str	r3, [r4, #4]
 800b10c:	6014      	str	r4, [r2, #0]
 800b10e:	4628      	mov	r0, r5
 800b110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b114:	f000 b8da 	b.w	800b2cc <__malloc_unlock>
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d908      	bls.n	800b12e <_free_r+0x42>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	1821      	adds	r1, r4, r0
 800b120:	428b      	cmp	r3, r1
 800b122:	bf01      	itttt	eq
 800b124:	6819      	ldreq	r1, [r3, #0]
 800b126:	685b      	ldreq	r3, [r3, #4]
 800b128:	1809      	addeq	r1, r1, r0
 800b12a:	6021      	streq	r1, [r4, #0]
 800b12c:	e7ed      	b.n	800b10a <_free_r+0x1e>
 800b12e:	461a      	mov	r2, r3
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	b10b      	cbz	r3, 800b138 <_free_r+0x4c>
 800b134:	42a3      	cmp	r3, r4
 800b136:	d9fa      	bls.n	800b12e <_free_r+0x42>
 800b138:	6811      	ldr	r1, [r2, #0]
 800b13a:	1850      	adds	r0, r2, r1
 800b13c:	42a0      	cmp	r0, r4
 800b13e:	d10b      	bne.n	800b158 <_free_r+0x6c>
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	4401      	add	r1, r0
 800b144:	1850      	adds	r0, r2, r1
 800b146:	4283      	cmp	r3, r0
 800b148:	6011      	str	r1, [r2, #0]
 800b14a:	d1e0      	bne.n	800b10e <_free_r+0x22>
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4408      	add	r0, r1
 800b152:	6010      	str	r0, [r2, #0]
 800b154:	6053      	str	r3, [r2, #4]
 800b156:	e7da      	b.n	800b10e <_free_r+0x22>
 800b158:	d902      	bls.n	800b160 <_free_r+0x74>
 800b15a:	230c      	movs	r3, #12
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	e7d6      	b.n	800b10e <_free_r+0x22>
 800b160:	6820      	ldr	r0, [r4, #0]
 800b162:	1821      	adds	r1, r4, r0
 800b164:	428b      	cmp	r3, r1
 800b166:	bf01      	itttt	eq
 800b168:	6819      	ldreq	r1, [r3, #0]
 800b16a:	685b      	ldreq	r3, [r3, #4]
 800b16c:	1809      	addeq	r1, r1, r0
 800b16e:	6021      	streq	r1, [r4, #0]
 800b170:	6063      	str	r3, [r4, #4]
 800b172:	6054      	str	r4, [r2, #4]
 800b174:	e7cb      	b.n	800b10e <_free_r+0x22>
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	200018c8 	.word	0x200018c8

0800b17c <sbrk_aligned>:
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	4e0f      	ldr	r6, [pc, #60]	@ (800b1bc <sbrk_aligned+0x40>)
 800b180:	460c      	mov	r4, r1
 800b182:	6831      	ldr	r1, [r6, #0]
 800b184:	4605      	mov	r5, r0
 800b186:	b911      	cbnz	r1, 800b18e <sbrk_aligned+0x12>
 800b188:	f000 fba8 	bl	800b8dc <_sbrk_r>
 800b18c:	6030      	str	r0, [r6, #0]
 800b18e:	4621      	mov	r1, r4
 800b190:	4628      	mov	r0, r5
 800b192:	f000 fba3 	bl	800b8dc <_sbrk_r>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d103      	bne.n	800b1a2 <sbrk_aligned+0x26>
 800b19a:	f04f 34ff 	mov.w	r4, #4294967295
 800b19e:	4620      	mov	r0, r4
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	1cc4      	adds	r4, r0, #3
 800b1a4:	f024 0403 	bic.w	r4, r4, #3
 800b1a8:	42a0      	cmp	r0, r4
 800b1aa:	d0f8      	beq.n	800b19e <sbrk_aligned+0x22>
 800b1ac:	1a21      	subs	r1, r4, r0
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f000 fb94 	bl	800b8dc <_sbrk_r>
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	d1f2      	bne.n	800b19e <sbrk_aligned+0x22>
 800b1b8:	e7ef      	b.n	800b19a <sbrk_aligned+0x1e>
 800b1ba:	bf00      	nop
 800b1bc:	200018c4 	.word	0x200018c4

0800b1c0 <_malloc_r>:
 800b1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c4:	1ccd      	adds	r5, r1, #3
 800b1c6:	f025 0503 	bic.w	r5, r5, #3
 800b1ca:	3508      	adds	r5, #8
 800b1cc:	2d0c      	cmp	r5, #12
 800b1ce:	bf38      	it	cc
 800b1d0:	250c      	movcc	r5, #12
 800b1d2:	2d00      	cmp	r5, #0
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	db01      	blt.n	800b1dc <_malloc_r+0x1c>
 800b1d8:	42a9      	cmp	r1, r5
 800b1da:	d904      	bls.n	800b1e6 <_malloc_r+0x26>
 800b1dc:	230c      	movs	r3, #12
 800b1de:	6033      	str	r3, [r6, #0]
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2bc <_malloc_r+0xfc>
 800b1ea:	f000 f869 	bl	800b2c0 <__malloc_lock>
 800b1ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f2:	461c      	mov	r4, r3
 800b1f4:	bb44      	cbnz	r4, 800b248 <_malloc_r+0x88>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff ffbf 	bl	800b17c <sbrk_aligned>
 800b1fe:	1c43      	adds	r3, r0, #1
 800b200:	4604      	mov	r4, r0
 800b202:	d158      	bne.n	800b2b6 <_malloc_r+0xf6>
 800b204:	f8d8 4000 	ldr.w	r4, [r8]
 800b208:	4627      	mov	r7, r4
 800b20a:	2f00      	cmp	r7, #0
 800b20c:	d143      	bne.n	800b296 <_malloc_r+0xd6>
 800b20e:	2c00      	cmp	r4, #0
 800b210:	d04b      	beq.n	800b2aa <_malloc_r+0xea>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	4639      	mov	r1, r7
 800b216:	4630      	mov	r0, r6
 800b218:	eb04 0903 	add.w	r9, r4, r3
 800b21c:	f000 fb5e 	bl	800b8dc <_sbrk_r>
 800b220:	4581      	cmp	r9, r0
 800b222:	d142      	bne.n	800b2aa <_malloc_r+0xea>
 800b224:	6821      	ldr	r1, [r4, #0]
 800b226:	4630      	mov	r0, r6
 800b228:	1a6d      	subs	r5, r5, r1
 800b22a:	4629      	mov	r1, r5
 800b22c:	f7ff ffa6 	bl	800b17c <sbrk_aligned>
 800b230:	3001      	adds	r0, #1
 800b232:	d03a      	beq.n	800b2aa <_malloc_r+0xea>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	442b      	add	r3, r5
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	f8d8 3000 	ldr.w	r3, [r8]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	bb62      	cbnz	r2, 800b29c <_malloc_r+0xdc>
 800b242:	f8c8 7000 	str.w	r7, [r8]
 800b246:	e00f      	b.n	800b268 <_malloc_r+0xa8>
 800b248:	6822      	ldr	r2, [r4, #0]
 800b24a:	1b52      	subs	r2, r2, r5
 800b24c:	d420      	bmi.n	800b290 <_malloc_r+0xd0>
 800b24e:	2a0b      	cmp	r2, #11
 800b250:	d917      	bls.n	800b282 <_malloc_r+0xc2>
 800b252:	1961      	adds	r1, r4, r5
 800b254:	42a3      	cmp	r3, r4
 800b256:	6025      	str	r5, [r4, #0]
 800b258:	bf18      	it	ne
 800b25a:	6059      	strne	r1, [r3, #4]
 800b25c:	6863      	ldr	r3, [r4, #4]
 800b25e:	bf08      	it	eq
 800b260:	f8c8 1000 	streq.w	r1, [r8]
 800b264:	5162      	str	r2, [r4, r5]
 800b266:	604b      	str	r3, [r1, #4]
 800b268:	4630      	mov	r0, r6
 800b26a:	f000 f82f 	bl	800b2cc <__malloc_unlock>
 800b26e:	f104 000b 	add.w	r0, r4, #11
 800b272:	1d23      	adds	r3, r4, #4
 800b274:	f020 0007 	bic.w	r0, r0, #7
 800b278:	1ac2      	subs	r2, r0, r3
 800b27a:	bf1c      	itt	ne
 800b27c:	1a1b      	subne	r3, r3, r0
 800b27e:	50a3      	strne	r3, [r4, r2]
 800b280:	e7af      	b.n	800b1e2 <_malloc_r+0x22>
 800b282:	6862      	ldr	r2, [r4, #4]
 800b284:	42a3      	cmp	r3, r4
 800b286:	bf0c      	ite	eq
 800b288:	f8c8 2000 	streq.w	r2, [r8]
 800b28c:	605a      	strne	r2, [r3, #4]
 800b28e:	e7eb      	b.n	800b268 <_malloc_r+0xa8>
 800b290:	4623      	mov	r3, r4
 800b292:	6864      	ldr	r4, [r4, #4]
 800b294:	e7ae      	b.n	800b1f4 <_malloc_r+0x34>
 800b296:	463c      	mov	r4, r7
 800b298:	687f      	ldr	r7, [r7, #4]
 800b29a:	e7b6      	b.n	800b20a <_malloc_r+0x4a>
 800b29c:	461a      	mov	r2, r3
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	d1fb      	bne.n	800b29c <_malloc_r+0xdc>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	6053      	str	r3, [r2, #4]
 800b2a8:	e7de      	b.n	800b268 <_malloc_r+0xa8>
 800b2aa:	230c      	movs	r3, #12
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	6033      	str	r3, [r6, #0]
 800b2b0:	f000 f80c 	bl	800b2cc <__malloc_unlock>
 800b2b4:	e794      	b.n	800b1e0 <_malloc_r+0x20>
 800b2b6:	6005      	str	r5, [r0, #0]
 800b2b8:	e7d6      	b.n	800b268 <_malloc_r+0xa8>
 800b2ba:	bf00      	nop
 800b2bc:	200018c8 	.word	0x200018c8

0800b2c0 <__malloc_lock>:
 800b2c0:	4801      	ldr	r0, [pc, #4]	@ (800b2c8 <__malloc_lock+0x8>)
 800b2c2:	f7ff bf03 	b.w	800b0cc <__retarget_lock_acquire_recursive>
 800b2c6:	bf00      	nop
 800b2c8:	200018c0 	.word	0x200018c0

0800b2cc <__malloc_unlock>:
 800b2cc:	4801      	ldr	r0, [pc, #4]	@ (800b2d4 <__malloc_unlock+0x8>)
 800b2ce:	f7ff befe 	b.w	800b0ce <__retarget_lock_release_recursive>
 800b2d2:	bf00      	nop
 800b2d4:	200018c0 	.word	0x200018c0

0800b2d8 <__ssputs_r>:
 800b2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2dc:	461f      	mov	r7, r3
 800b2de:	688e      	ldr	r6, [r1, #8]
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	42be      	cmp	r6, r7
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	4690      	mov	r8, r2
 800b2e8:	680b      	ldr	r3, [r1, #0]
 800b2ea:	d82d      	bhi.n	800b348 <__ssputs_r+0x70>
 800b2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2f4:	d026      	beq.n	800b344 <__ssputs_r+0x6c>
 800b2f6:	6965      	ldr	r5, [r4, #20]
 800b2f8:	6909      	ldr	r1, [r1, #16]
 800b2fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2fe:	eba3 0901 	sub.w	r9, r3, r1
 800b302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b306:	1c7b      	adds	r3, r7, #1
 800b308:	444b      	add	r3, r9
 800b30a:	106d      	asrs	r5, r5, #1
 800b30c:	429d      	cmp	r5, r3
 800b30e:	bf38      	it	cc
 800b310:	461d      	movcc	r5, r3
 800b312:	0553      	lsls	r3, r2, #21
 800b314:	d527      	bpl.n	800b366 <__ssputs_r+0x8e>
 800b316:	4629      	mov	r1, r5
 800b318:	f7ff ff52 	bl	800b1c0 <_malloc_r>
 800b31c:	4606      	mov	r6, r0
 800b31e:	b360      	cbz	r0, 800b37a <__ssputs_r+0xa2>
 800b320:	464a      	mov	r2, r9
 800b322:	6921      	ldr	r1, [r4, #16]
 800b324:	f7ff fed4 	bl	800b0d0 <memcpy>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	6126      	str	r6, [r4, #16]
 800b336:	444e      	add	r6, r9
 800b338:	6026      	str	r6, [r4, #0]
 800b33a:	463e      	mov	r6, r7
 800b33c:	6165      	str	r5, [r4, #20]
 800b33e:	eba5 0509 	sub.w	r5, r5, r9
 800b342:	60a5      	str	r5, [r4, #8]
 800b344:	42be      	cmp	r6, r7
 800b346:	d900      	bls.n	800b34a <__ssputs_r+0x72>
 800b348:	463e      	mov	r6, r7
 800b34a:	4632      	mov	r2, r6
 800b34c:	4641      	mov	r1, r8
 800b34e:	6820      	ldr	r0, [r4, #0]
 800b350:	f000 faaa 	bl	800b8a8 <memmove>
 800b354:	2000      	movs	r0, #0
 800b356:	68a3      	ldr	r3, [r4, #8]
 800b358:	1b9b      	subs	r3, r3, r6
 800b35a:	60a3      	str	r3, [r4, #8]
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	4433      	add	r3, r6
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	462a      	mov	r2, r5
 800b368:	f000 fad6 	bl	800b918 <_realloc_r>
 800b36c:	4606      	mov	r6, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d1e0      	bne.n	800b334 <__ssputs_r+0x5c>
 800b372:	4650      	mov	r0, sl
 800b374:	6921      	ldr	r1, [r4, #16]
 800b376:	f7ff feb9 	bl	800b0ec <_free_r>
 800b37a:	230c      	movs	r3, #12
 800b37c:	f8ca 3000 	str.w	r3, [sl]
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	e7e9      	b.n	800b362 <__ssputs_r+0x8a>
	...

0800b390 <_svfiprintf_r>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	4698      	mov	r8, r3
 800b396:	898b      	ldrh	r3, [r1, #12]
 800b398:	4607      	mov	r7, r0
 800b39a:	061b      	lsls	r3, r3, #24
 800b39c:	460d      	mov	r5, r1
 800b39e:	4614      	mov	r4, r2
 800b3a0:	b09d      	sub	sp, #116	@ 0x74
 800b3a2:	d510      	bpl.n	800b3c6 <_svfiprintf_r+0x36>
 800b3a4:	690b      	ldr	r3, [r1, #16]
 800b3a6:	b973      	cbnz	r3, 800b3c6 <_svfiprintf_r+0x36>
 800b3a8:	2140      	movs	r1, #64	@ 0x40
 800b3aa:	f7ff ff09 	bl	800b1c0 <_malloc_r>
 800b3ae:	6028      	str	r0, [r5, #0]
 800b3b0:	6128      	str	r0, [r5, #16]
 800b3b2:	b930      	cbnz	r0, 800b3c2 <_svfiprintf_r+0x32>
 800b3b4:	230c      	movs	r3, #12
 800b3b6:	603b      	str	r3, [r7, #0]
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	b01d      	add	sp, #116	@ 0x74
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	2340      	movs	r3, #64	@ 0x40
 800b3c4:	616b      	str	r3, [r5, #20]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ca:	2320      	movs	r3, #32
 800b3cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3d0:	2330      	movs	r3, #48	@ 0x30
 800b3d2:	f04f 0901 	mov.w	r9, #1
 800b3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b574 <_svfiprintf_r+0x1e4>
 800b3de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3e2:	4623      	mov	r3, r4
 800b3e4:	469a      	mov	sl, r3
 800b3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3ea:	b10a      	cbz	r2, 800b3f0 <_svfiprintf_r+0x60>
 800b3ec:	2a25      	cmp	r2, #37	@ 0x25
 800b3ee:	d1f9      	bne.n	800b3e4 <_svfiprintf_r+0x54>
 800b3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f4:	d00b      	beq.n	800b40e <_svfiprintf_r+0x7e>
 800b3f6:	465b      	mov	r3, fp
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff ff6b 	bl	800b2d8 <__ssputs_r>
 800b402:	3001      	adds	r0, #1
 800b404:	f000 80a7 	beq.w	800b556 <_svfiprintf_r+0x1c6>
 800b408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b40a:	445a      	add	r2, fp
 800b40c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b40e:	f89a 3000 	ldrb.w	r3, [sl]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 809f 	beq.w	800b556 <_svfiprintf_r+0x1c6>
 800b418:	2300      	movs	r3, #0
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295
 800b41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b422:	f10a 0a01 	add.w	sl, sl, #1
 800b426:	9304      	str	r3, [sp, #16]
 800b428:	9307      	str	r3, [sp, #28]
 800b42a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b42e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b430:	4654      	mov	r4, sl
 800b432:	2205      	movs	r2, #5
 800b434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b438:	484e      	ldr	r0, [pc, #312]	@ (800b574 <_svfiprintf_r+0x1e4>)
 800b43a:	f000 fa5f 	bl	800b8fc <memchr>
 800b43e:	9a04      	ldr	r2, [sp, #16]
 800b440:	b9d8      	cbnz	r0, 800b47a <_svfiprintf_r+0xea>
 800b442:	06d0      	lsls	r0, r2, #27
 800b444:	bf44      	itt	mi
 800b446:	2320      	movmi	r3, #32
 800b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44c:	0711      	lsls	r1, r2, #28
 800b44e:	bf44      	itt	mi
 800b450:	232b      	movmi	r3, #43	@ 0x2b
 800b452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b456:	f89a 3000 	ldrb.w	r3, [sl]
 800b45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b45c:	d015      	beq.n	800b48a <_svfiprintf_r+0xfa>
 800b45e:	4654      	mov	r4, sl
 800b460:	2000      	movs	r0, #0
 800b462:	f04f 0c0a 	mov.w	ip, #10
 800b466:	9a07      	ldr	r2, [sp, #28]
 800b468:	4621      	mov	r1, r4
 800b46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b46e:	3b30      	subs	r3, #48	@ 0x30
 800b470:	2b09      	cmp	r3, #9
 800b472:	d94b      	bls.n	800b50c <_svfiprintf_r+0x17c>
 800b474:	b1b0      	cbz	r0, 800b4a4 <_svfiprintf_r+0x114>
 800b476:	9207      	str	r2, [sp, #28]
 800b478:	e014      	b.n	800b4a4 <_svfiprintf_r+0x114>
 800b47a:	eba0 0308 	sub.w	r3, r0, r8
 800b47e:	fa09 f303 	lsl.w	r3, r9, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	46a2      	mov	sl, r4
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	e7d2      	b.n	800b430 <_svfiprintf_r+0xa0>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	1d19      	adds	r1, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9103      	str	r1, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfbb      	ittet	lt
 800b496:	425b      	neglt	r3, r3
 800b498:	f042 0202 	orrlt.w	r2, r2, #2
 800b49c:	9307      	strge	r3, [sp, #28]
 800b49e:	9307      	strlt	r3, [sp, #28]
 800b4a0:	bfb8      	it	lt
 800b4a2:	9204      	strlt	r2, [sp, #16]
 800b4a4:	7823      	ldrb	r3, [r4, #0]
 800b4a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4a8:	d10a      	bne.n	800b4c0 <_svfiprintf_r+0x130>
 800b4aa:	7863      	ldrb	r3, [r4, #1]
 800b4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ae:	d132      	bne.n	800b516 <_svfiprintf_r+0x186>
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	9203      	str	r2, [sp, #12]
 800b4ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b578 <_svfiprintf_r+0x1e8>
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	7821      	ldrb	r1, [r4, #0]
 800b4ca:	f000 fa17 	bl	800b8fc <memchr>
 800b4ce:	b138      	cbz	r0, 800b4e0 <_svfiprintf_r+0x150>
 800b4d0:	2240      	movs	r2, #64	@ 0x40
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	eba0 000a 	sub.w	r0, r0, sl
 800b4d8:	4082      	lsls	r2, r0
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	3401      	adds	r4, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e4:	2206      	movs	r2, #6
 800b4e6:	4825      	ldr	r0, [pc, #148]	@ (800b57c <_svfiprintf_r+0x1ec>)
 800b4e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4ec:	f000 fa06 	bl	800b8fc <memchr>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d036      	beq.n	800b562 <_svfiprintf_r+0x1d2>
 800b4f4:	4b22      	ldr	r3, [pc, #136]	@ (800b580 <_svfiprintf_r+0x1f0>)
 800b4f6:	bb1b      	cbnz	r3, 800b540 <_svfiprintf_r+0x1b0>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	3307      	adds	r3, #7
 800b4fc:	f023 0307 	bic.w	r3, r3, #7
 800b500:	3308      	adds	r3, #8
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b506:	4433      	add	r3, r6
 800b508:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50a:	e76a      	b.n	800b3e2 <_svfiprintf_r+0x52>
 800b50c:	460c      	mov	r4, r1
 800b50e:	2001      	movs	r0, #1
 800b510:	fb0c 3202 	mla	r2, ip, r2, r3
 800b514:	e7a8      	b.n	800b468 <_svfiprintf_r+0xd8>
 800b516:	2300      	movs	r3, #0
 800b518:	f04f 0c0a 	mov.w	ip, #10
 800b51c:	4619      	mov	r1, r3
 800b51e:	3401      	adds	r4, #1
 800b520:	9305      	str	r3, [sp, #20]
 800b522:	4620      	mov	r0, r4
 800b524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b528:	3a30      	subs	r2, #48	@ 0x30
 800b52a:	2a09      	cmp	r2, #9
 800b52c:	d903      	bls.n	800b536 <_svfiprintf_r+0x1a6>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0c6      	beq.n	800b4c0 <_svfiprintf_r+0x130>
 800b532:	9105      	str	r1, [sp, #20]
 800b534:	e7c4      	b.n	800b4c0 <_svfiprintf_r+0x130>
 800b536:	4604      	mov	r4, r0
 800b538:	2301      	movs	r3, #1
 800b53a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b53e:	e7f0      	b.n	800b522 <_svfiprintf_r+0x192>
 800b540:	ab03      	add	r3, sp, #12
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	462a      	mov	r2, r5
 800b546:	4638      	mov	r0, r7
 800b548:	4b0e      	ldr	r3, [pc, #56]	@ (800b584 <_svfiprintf_r+0x1f4>)
 800b54a:	a904      	add	r1, sp, #16
 800b54c:	f3af 8000 	nop.w
 800b550:	1c42      	adds	r2, r0, #1
 800b552:	4606      	mov	r6, r0
 800b554:	d1d6      	bne.n	800b504 <_svfiprintf_r+0x174>
 800b556:	89ab      	ldrh	r3, [r5, #12]
 800b558:	065b      	lsls	r3, r3, #25
 800b55a:	f53f af2d 	bmi.w	800b3b8 <_svfiprintf_r+0x28>
 800b55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b560:	e72c      	b.n	800b3bc <_svfiprintf_r+0x2c>
 800b562:	ab03      	add	r3, sp, #12
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	462a      	mov	r2, r5
 800b568:	4638      	mov	r0, r7
 800b56a:	4b06      	ldr	r3, [pc, #24]	@ (800b584 <_svfiprintf_r+0x1f4>)
 800b56c:	a904      	add	r1, sp, #16
 800b56e:	f000 f87d 	bl	800b66c <_printf_i>
 800b572:	e7ed      	b.n	800b550 <_svfiprintf_r+0x1c0>
 800b574:	0800deb3 	.word	0x0800deb3
 800b578:	0800deb9 	.word	0x0800deb9
 800b57c:	0800debd 	.word	0x0800debd
 800b580:	00000000 	.word	0x00000000
 800b584:	0800b2d9 	.word	0x0800b2d9

0800b588 <_printf_common>:
 800b588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b58c:	4616      	mov	r6, r2
 800b58e:	4698      	mov	r8, r3
 800b590:	688a      	ldr	r2, [r1, #8]
 800b592:	690b      	ldr	r3, [r1, #16]
 800b594:	4607      	mov	r7, r0
 800b596:	4293      	cmp	r3, r2
 800b598:	bfb8      	it	lt
 800b59a:	4613      	movlt	r3, r2
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5a8:	b10a      	cbz	r2, 800b5ae <_printf_common+0x26>
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	6033      	str	r3, [r6, #0]
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	0699      	lsls	r1, r3, #26
 800b5b2:	bf42      	ittt	mi
 800b5b4:	6833      	ldrmi	r3, [r6, #0]
 800b5b6:	3302      	addmi	r3, #2
 800b5b8:	6033      	strmi	r3, [r6, #0]
 800b5ba:	6825      	ldr	r5, [r4, #0]
 800b5bc:	f015 0506 	ands.w	r5, r5, #6
 800b5c0:	d106      	bne.n	800b5d0 <_printf_common+0x48>
 800b5c2:	f104 0a19 	add.w	sl, r4, #25
 800b5c6:	68e3      	ldr	r3, [r4, #12]
 800b5c8:	6832      	ldr	r2, [r6, #0]
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	42ab      	cmp	r3, r5
 800b5ce:	dc2b      	bgt.n	800b628 <_printf_common+0xa0>
 800b5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5d4:	6822      	ldr	r2, [r4, #0]
 800b5d6:	3b00      	subs	r3, #0
 800b5d8:	bf18      	it	ne
 800b5da:	2301      	movne	r3, #1
 800b5dc:	0692      	lsls	r2, r2, #26
 800b5de:	d430      	bmi.n	800b642 <_printf_common+0xba>
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5e8:	47c8      	blx	r9
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d023      	beq.n	800b636 <_printf_common+0xae>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	6922      	ldr	r2, [r4, #16]
 800b5f2:	f003 0306 	and.w	r3, r3, #6
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	bf14      	ite	ne
 800b5fa:	2500      	movne	r5, #0
 800b5fc:	6833      	ldreq	r3, [r6, #0]
 800b5fe:	f04f 0600 	mov.w	r6, #0
 800b602:	bf08      	it	eq
 800b604:	68e5      	ldreq	r5, [r4, #12]
 800b606:	f104 041a 	add.w	r4, r4, #26
 800b60a:	bf08      	it	eq
 800b60c:	1aed      	subeq	r5, r5, r3
 800b60e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b612:	bf08      	it	eq
 800b614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b618:	4293      	cmp	r3, r2
 800b61a:	bfc4      	itt	gt
 800b61c:	1a9b      	subgt	r3, r3, r2
 800b61e:	18ed      	addgt	r5, r5, r3
 800b620:	42b5      	cmp	r5, r6
 800b622:	d11a      	bne.n	800b65a <_printf_common+0xd2>
 800b624:	2000      	movs	r0, #0
 800b626:	e008      	b.n	800b63a <_printf_common+0xb2>
 800b628:	2301      	movs	r3, #1
 800b62a:	4652      	mov	r2, sl
 800b62c:	4641      	mov	r1, r8
 800b62e:	4638      	mov	r0, r7
 800b630:	47c8      	blx	r9
 800b632:	3001      	adds	r0, #1
 800b634:	d103      	bne.n	800b63e <_printf_common+0xb6>
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63e:	3501      	adds	r5, #1
 800b640:	e7c1      	b.n	800b5c6 <_printf_common+0x3e>
 800b642:	2030      	movs	r0, #48	@ 0x30
 800b644:	18e1      	adds	r1, r4, r3
 800b646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b650:	4422      	add	r2, r4
 800b652:	3302      	adds	r3, #2
 800b654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b658:	e7c2      	b.n	800b5e0 <_printf_common+0x58>
 800b65a:	2301      	movs	r3, #1
 800b65c:	4622      	mov	r2, r4
 800b65e:	4641      	mov	r1, r8
 800b660:	4638      	mov	r0, r7
 800b662:	47c8      	blx	r9
 800b664:	3001      	adds	r0, #1
 800b666:	d0e6      	beq.n	800b636 <_printf_common+0xae>
 800b668:	3601      	adds	r6, #1
 800b66a:	e7d9      	b.n	800b620 <_printf_common+0x98>

0800b66c <_printf_i>:
 800b66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b670:	7e0f      	ldrb	r7, [r1, #24]
 800b672:	4691      	mov	r9, r2
 800b674:	2f78      	cmp	r7, #120	@ 0x78
 800b676:	4680      	mov	r8, r0
 800b678:	460c      	mov	r4, r1
 800b67a:	469a      	mov	sl, r3
 800b67c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b67e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b682:	d807      	bhi.n	800b694 <_printf_i+0x28>
 800b684:	2f62      	cmp	r7, #98	@ 0x62
 800b686:	d80a      	bhi.n	800b69e <_printf_i+0x32>
 800b688:	2f00      	cmp	r7, #0
 800b68a:	f000 80d1 	beq.w	800b830 <_printf_i+0x1c4>
 800b68e:	2f58      	cmp	r7, #88	@ 0x58
 800b690:	f000 80b8 	beq.w	800b804 <_printf_i+0x198>
 800b694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b69c:	e03a      	b.n	800b714 <_printf_i+0xa8>
 800b69e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6a2:	2b15      	cmp	r3, #21
 800b6a4:	d8f6      	bhi.n	800b694 <_printf_i+0x28>
 800b6a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b6ac <_printf_i+0x40>)
 800b6a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6ac:	0800b705 	.word	0x0800b705
 800b6b0:	0800b719 	.word	0x0800b719
 800b6b4:	0800b695 	.word	0x0800b695
 800b6b8:	0800b695 	.word	0x0800b695
 800b6bc:	0800b695 	.word	0x0800b695
 800b6c0:	0800b695 	.word	0x0800b695
 800b6c4:	0800b719 	.word	0x0800b719
 800b6c8:	0800b695 	.word	0x0800b695
 800b6cc:	0800b695 	.word	0x0800b695
 800b6d0:	0800b695 	.word	0x0800b695
 800b6d4:	0800b695 	.word	0x0800b695
 800b6d8:	0800b817 	.word	0x0800b817
 800b6dc:	0800b743 	.word	0x0800b743
 800b6e0:	0800b7d1 	.word	0x0800b7d1
 800b6e4:	0800b695 	.word	0x0800b695
 800b6e8:	0800b695 	.word	0x0800b695
 800b6ec:	0800b839 	.word	0x0800b839
 800b6f0:	0800b695 	.word	0x0800b695
 800b6f4:	0800b743 	.word	0x0800b743
 800b6f8:	0800b695 	.word	0x0800b695
 800b6fc:	0800b695 	.word	0x0800b695
 800b700:	0800b7d9 	.word	0x0800b7d9
 800b704:	6833      	ldr	r3, [r6, #0]
 800b706:	1d1a      	adds	r2, r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6032      	str	r2, [r6, #0]
 800b70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b714:	2301      	movs	r3, #1
 800b716:	e09c      	b.n	800b852 <_printf_i+0x1e6>
 800b718:	6833      	ldr	r3, [r6, #0]
 800b71a:	6820      	ldr	r0, [r4, #0]
 800b71c:	1d19      	adds	r1, r3, #4
 800b71e:	6031      	str	r1, [r6, #0]
 800b720:	0606      	lsls	r6, r0, #24
 800b722:	d501      	bpl.n	800b728 <_printf_i+0xbc>
 800b724:	681d      	ldr	r5, [r3, #0]
 800b726:	e003      	b.n	800b730 <_printf_i+0xc4>
 800b728:	0645      	lsls	r5, r0, #25
 800b72a:	d5fb      	bpl.n	800b724 <_printf_i+0xb8>
 800b72c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b730:	2d00      	cmp	r5, #0
 800b732:	da03      	bge.n	800b73c <_printf_i+0xd0>
 800b734:	232d      	movs	r3, #45	@ 0x2d
 800b736:	426d      	negs	r5, r5
 800b738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b73c:	230a      	movs	r3, #10
 800b73e:	4858      	ldr	r0, [pc, #352]	@ (800b8a0 <_printf_i+0x234>)
 800b740:	e011      	b.n	800b766 <_printf_i+0xfa>
 800b742:	6821      	ldr	r1, [r4, #0]
 800b744:	6833      	ldr	r3, [r6, #0]
 800b746:	0608      	lsls	r0, r1, #24
 800b748:	f853 5b04 	ldr.w	r5, [r3], #4
 800b74c:	d402      	bmi.n	800b754 <_printf_i+0xe8>
 800b74e:	0649      	lsls	r1, r1, #25
 800b750:	bf48      	it	mi
 800b752:	b2ad      	uxthmi	r5, r5
 800b754:	2f6f      	cmp	r7, #111	@ 0x6f
 800b756:	6033      	str	r3, [r6, #0]
 800b758:	bf14      	ite	ne
 800b75a:	230a      	movne	r3, #10
 800b75c:	2308      	moveq	r3, #8
 800b75e:	4850      	ldr	r0, [pc, #320]	@ (800b8a0 <_printf_i+0x234>)
 800b760:	2100      	movs	r1, #0
 800b762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b766:	6866      	ldr	r6, [r4, #4]
 800b768:	2e00      	cmp	r6, #0
 800b76a:	60a6      	str	r6, [r4, #8]
 800b76c:	db05      	blt.n	800b77a <_printf_i+0x10e>
 800b76e:	6821      	ldr	r1, [r4, #0]
 800b770:	432e      	orrs	r6, r5
 800b772:	f021 0104 	bic.w	r1, r1, #4
 800b776:	6021      	str	r1, [r4, #0]
 800b778:	d04b      	beq.n	800b812 <_printf_i+0x1a6>
 800b77a:	4616      	mov	r6, r2
 800b77c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b780:	fb03 5711 	mls	r7, r3, r1, r5
 800b784:	5dc7      	ldrb	r7, [r0, r7]
 800b786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b78a:	462f      	mov	r7, r5
 800b78c:	42bb      	cmp	r3, r7
 800b78e:	460d      	mov	r5, r1
 800b790:	d9f4      	bls.n	800b77c <_printf_i+0x110>
 800b792:	2b08      	cmp	r3, #8
 800b794:	d10b      	bne.n	800b7ae <_printf_i+0x142>
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	07df      	lsls	r7, r3, #31
 800b79a:	d508      	bpl.n	800b7ae <_printf_i+0x142>
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	6861      	ldr	r1, [r4, #4]
 800b7a0:	4299      	cmp	r1, r3
 800b7a2:	bfde      	ittt	le
 800b7a4:	2330      	movle	r3, #48	@ 0x30
 800b7a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7ae:	1b92      	subs	r2, r2, r6
 800b7b0:	6122      	str	r2, [r4, #16]
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	f8cd a000 	str.w	sl, [sp]
 800b7bc:	aa03      	add	r2, sp, #12
 800b7be:	f7ff fee3 	bl	800b588 <_printf_common>
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d14a      	bne.n	800b85c <_printf_i+0x1f0>
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ca:	b004      	add	sp, #16
 800b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	f043 0320 	orr.w	r3, r3, #32
 800b7d6:	6023      	str	r3, [r4, #0]
 800b7d8:	2778      	movs	r7, #120	@ 0x78
 800b7da:	4832      	ldr	r0, [pc, #200]	@ (800b8a4 <_printf_i+0x238>)
 800b7dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	6831      	ldr	r1, [r6, #0]
 800b7e4:	061f      	lsls	r7, r3, #24
 800b7e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7ea:	d402      	bmi.n	800b7f2 <_printf_i+0x186>
 800b7ec:	065f      	lsls	r7, r3, #25
 800b7ee:	bf48      	it	mi
 800b7f0:	b2ad      	uxthmi	r5, r5
 800b7f2:	6031      	str	r1, [r6, #0]
 800b7f4:	07d9      	lsls	r1, r3, #31
 800b7f6:	bf44      	itt	mi
 800b7f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b7fc:	6023      	strmi	r3, [r4, #0]
 800b7fe:	b11d      	cbz	r5, 800b808 <_printf_i+0x19c>
 800b800:	2310      	movs	r3, #16
 800b802:	e7ad      	b.n	800b760 <_printf_i+0xf4>
 800b804:	4826      	ldr	r0, [pc, #152]	@ (800b8a0 <_printf_i+0x234>)
 800b806:	e7e9      	b.n	800b7dc <_printf_i+0x170>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	f023 0320 	bic.w	r3, r3, #32
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e7f6      	b.n	800b800 <_printf_i+0x194>
 800b812:	4616      	mov	r6, r2
 800b814:	e7bd      	b.n	800b792 <_printf_i+0x126>
 800b816:	6833      	ldr	r3, [r6, #0]
 800b818:	6825      	ldr	r5, [r4, #0]
 800b81a:	1d18      	adds	r0, r3, #4
 800b81c:	6961      	ldr	r1, [r4, #20]
 800b81e:	6030      	str	r0, [r6, #0]
 800b820:	062e      	lsls	r6, r5, #24
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	d501      	bpl.n	800b82a <_printf_i+0x1be>
 800b826:	6019      	str	r1, [r3, #0]
 800b828:	e002      	b.n	800b830 <_printf_i+0x1c4>
 800b82a:	0668      	lsls	r0, r5, #25
 800b82c:	d5fb      	bpl.n	800b826 <_printf_i+0x1ba>
 800b82e:	8019      	strh	r1, [r3, #0]
 800b830:	2300      	movs	r3, #0
 800b832:	4616      	mov	r6, r2
 800b834:	6123      	str	r3, [r4, #16]
 800b836:	e7bc      	b.n	800b7b2 <_printf_i+0x146>
 800b838:	6833      	ldr	r3, [r6, #0]
 800b83a:	2100      	movs	r1, #0
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	6032      	str	r2, [r6, #0]
 800b840:	681e      	ldr	r6, [r3, #0]
 800b842:	6862      	ldr	r2, [r4, #4]
 800b844:	4630      	mov	r0, r6
 800b846:	f000 f859 	bl	800b8fc <memchr>
 800b84a:	b108      	cbz	r0, 800b850 <_printf_i+0x1e4>
 800b84c:	1b80      	subs	r0, r0, r6
 800b84e:	6060      	str	r0, [r4, #4]
 800b850:	6863      	ldr	r3, [r4, #4]
 800b852:	6123      	str	r3, [r4, #16]
 800b854:	2300      	movs	r3, #0
 800b856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b85a:	e7aa      	b.n	800b7b2 <_printf_i+0x146>
 800b85c:	4632      	mov	r2, r6
 800b85e:	4649      	mov	r1, r9
 800b860:	4640      	mov	r0, r8
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	47d0      	blx	sl
 800b866:	3001      	adds	r0, #1
 800b868:	d0ad      	beq.n	800b7c6 <_printf_i+0x15a>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	079b      	lsls	r3, r3, #30
 800b86e:	d413      	bmi.n	800b898 <_printf_i+0x22c>
 800b870:	68e0      	ldr	r0, [r4, #12]
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	4298      	cmp	r0, r3
 800b876:	bfb8      	it	lt
 800b878:	4618      	movlt	r0, r3
 800b87a:	e7a6      	b.n	800b7ca <_printf_i+0x15e>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4632      	mov	r2, r6
 800b880:	4649      	mov	r1, r9
 800b882:	4640      	mov	r0, r8
 800b884:	47d0      	blx	sl
 800b886:	3001      	adds	r0, #1
 800b888:	d09d      	beq.n	800b7c6 <_printf_i+0x15a>
 800b88a:	3501      	adds	r5, #1
 800b88c:	68e3      	ldr	r3, [r4, #12]
 800b88e:	9903      	ldr	r1, [sp, #12]
 800b890:	1a5b      	subs	r3, r3, r1
 800b892:	42ab      	cmp	r3, r5
 800b894:	dcf2      	bgt.n	800b87c <_printf_i+0x210>
 800b896:	e7eb      	b.n	800b870 <_printf_i+0x204>
 800b898:	2500      	movs	r5, #0
 800b89a:	f104 0619 	add.w	r6, r4, #25
 800b89e:	e7f5      	b.n	800b88c <_printf_i+0x220>
 800b8a0:	0800dec4 	.word	0x0800dec4
 800b8a4:	0800ded5 	.word	0x0800ded5

0800b8a8 <memmove>:
 800b8a8:	4288      	cmp	r0, r1
 800b8aa:	b510      	push	{r4, lr}
 800b8ac:	eb01 0402 	add.w	r4, r1, r2
 800b8b0:	d902      	bls.n	800b8b8 <memmove+0x10>
 800b8b2:	4284      	cmp	r4, r0
 800b8b4:	4623      	mov	r3, r4
 800b8b6:	d807      	bhi.n	800b8c8 <memmove+0x20>
 800b8b8:	1e43      	subs	r3, r0, #1
 800b8ba:	42a1      	cmp	r1, r4
 800b8bc:	d008      	beq.n	800b8d0 <memmove+0x28>
 800b8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8c6:	e7f8      	b.n	800b8ba <memmove+0x12>
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	4402      	add	r2, r0
 800b8cc:	428a      	cmp	r2, r1
 800b8ce:	d100      	bne.n	800b8d2 <memmove+0x2a>
 800b8d0:	bd10      	pop	{r4, pc}
 800b8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8da:	e7f7      	b.n	800b8cc <memmove+0x24>

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4d05      	ldr	r5, [pc, #20]	@ (800b8f8 <_sbrk_r+0x1c>)
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f6 f94e 	bl	8001b88 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	200018bc 	.word	0x200018bc

0800b8fc <memchr>:
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	b510      	push	{r4, lr}
 800b900:	b2c9      	uxtb	r1, r1
 800b902:	4402      	add	r2, r0
 800b904:	4293      	cmp	r3, r2
 800b906:	4618      	mov	r0, r3
 800b908:	d101      	bne.n	800b90e <memchr+0x12>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e003      	b.n	800b916 <memchr+0x1a>
 800b90e:	7804      	ldrb	r4, [r0, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	428c      	cmp	r4, r1
 800b914:	d1f6      	bne.n	800b904 <memchr+0x8>
 800b916:	bd10      	pop	{r4, pc}

0800b918 <_realloc_r>:
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	4607      	mov	r7, r0
 800b91e:	4614      	mov	r4, r2
 800b920:	460d      	mov	r5, r1
 800b922:	b921      	cbnz	r1, 800b92e <_realloc_r+0x16>
 800b924:	4611      	mov	r1, r2
 800b926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b92a:	f7ff bc49 	b.w	800b1c0 <_malloc_r>
 800b92e:	b92a      	cbnz	r2, 800b93c <_realloc_r+0x24>
 800b930:	f7ff fbdc 	bl	800b0ec <_free_r>
 800b934:	4625      	mov	r5, r4
 800b936:	4628      	mov	r0, r5
 800b938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93c:	f000 f81a 	bl	800b974 <_malloc_usable_size_r>
 800b940:	4284      	cmp	r4, r0
 800b942:	4606      	mov	r6, r0
 800b944:	d802      	bhi.n	800b94c <_realloc_r+0x34>
 800b946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b94a:	d8f4      	bhi.n	800b936 <_realloc_r+0x1e>
 800b94c:	4621      	mov	r1, r4
 800b94e:	4638      	mov	r0, r7
 800b950:	f7ff fc36 	bl	800b1c0 <_malloc_r>
 800b954:	4680      	mov	r8, r0
 800b956:	b908      	cbnz	r0, 800b95c <_realloc_r+0x44>
 800b958:	4645      	mov	r5, r8
 800b95a:	e7ec      	b.n	800b936 <_realloc_r+0x1e>
 800b95c:	42b4      	cmp	r4, r6
 800b95e:	4622      	mov	r2, r4
 800b960:	4629      	mov	r1, r5
 800b962:	bf28      	it	cs
 800b964:	4632      	movcs	r2, r6
 800b966:	f7ff fbb3 	bl	800b0d0 <memcpy>
 800b96a:	4629      	mov	r1, r5
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff fbbd 	bl	800b0ec <_free_r>
 800b972:	e7f1      	b.n	800b958 <_realloc_r+0x40>

0800b974 <_malloc_usable_size_r>:
 800b974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b978:	1f18      	subs	r0, r3, #4
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bfbc      	itt	lt
 800b97e:	580b      	ldrlt	r3, [r1, r0]
 800b980:	18c0      	addlt	r0, r0, r3
 800b982:	4770      	bx	lr

0800b984 <pow>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	4614      	mov	r4, r2
 800b98a:	461d      	mov	r5, r3
 800b98c:	4680      	mov	r8, r0
 800b98e:	4689      	mov	r9, r1
 800b990:	f000 f866 	bl	800ba60 <__ieee754_pow>
 800b994:	4622      	mov	r2, r4
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	462b      	mov	r3, r5
 800b99c:	4620      	mov	r0, r4
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f5 f834 	bl	8000a0c <__aeabi_dcmpun>
 800b9a4:	bbc8      	cbnz	r0, 800ba1a <pow+0x96>
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fffb 	bl	80009a8 <__aeabi_dcmpeq>
 800b9b2:	b1b8      	cbz	r0, 800b9e4 <pow+0x60>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7f4 fff4 	bl	80009a8 <__aeabi_dcmpeq>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d141      	bne.n	800ba48 <pow+0xc4>
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f000 f844 	bl	800ba54 <finite>
 800b9cc:	b328      	cbz	r0, 800ba1a <pow+0x96>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7f4 fff1 	bl	80009bc <__aeabi_dcmplt>
 800b9da:	b1f0      	cbz	r0, 800ba1a <pow+0x96>
 800b9dc:	f7ff fb4c 	bl	800b078 <__errno>
 800b9e0:	2322      	movs	r3, #34	@ 0x22
 800b9e2:	e019      	b.n	800ba18 <pow+0x94>
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f000 f834 	bl	800ba54 <finite>
 800b9ec:	b9c8      	cbnz	r0, 800ba22 <pow+0x9e>
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	4649      	mov	r1, r9
 800b9f2:	f000 f82f 	bl	800ba54 <finite>
 800b9f6:	b1a0      	cbz	r0, 800ba22 <pow+0x9e>
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f000 f82a 	bl	800ba54 <finite>
 800ba00:	b178      	cbz	r0, 800ba22 <pow+0x9e>
 800ba02:	4632      	mov	r2, r6
 800ba04:	463b      	mov	r3, r7
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f4 ffff 	bl	8000a0c <__aeabi_dcmpun>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0e4      	beq.n	800b9dc <pow+0x58>
 800ba12:	f7ff fb31 	bl	800b078 <__errno>
 800ba16:	2321      	movs	r3, #33	@ 0x21
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba22:	2200      	movs	r2, #0
 800ba24:	2300      	movs	r3, #0
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f4 ffbd 	bl	80009a8 <__aeabi_dcmpeq>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0f3      	beq.n	800ba1a <pow+0x96>
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f000 f80d 	bl	800ba54 <finite>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0ed      	beq.n	800ba1a <pow+0x96>
 800ba3e:	4620      	mov	r0, r4
 800ba40:	4629      	mov	r1, r5
 800ba42:	f000 f807 	bl	800ba54 <finite>
 800ba46:	e7c8      	b.n	800b9da <pow+0x56>
 800ba48:	2600      	movs	r6, #0
 800ba4a:	4f01      	ldr	r7, [pc, #4]	@ (800ba50 <pow+0xcc>)
 800ba4c:	e7e5      	b.n	800ba1a <pow+0x96>
 800ba4e:	bf00      	nop
 800ba50:	3ff00000 	.word	0x3ff00000

0800ba54 <finite>:
 800ba54:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800ba58:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ba5c:	0fc0      	lsrs	r0, r0, #31
 800ba5e:	4770      	bx	lr

0800ba60 <__ieee754_pow>:
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	b091      	sub	sp, #68	@ 0x44
 800ba66:	e9cd 2300 	strd	r2, r3, [sp]
 800ba6a:	468b      	mov	fp, r1
 800ba6c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ba70:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ba74:	4682      	mov	sl, r0
 800ba76:	ea57 0001 	orrs.w	r0, r7, r1
 800ba7a:	d112      	bne.n	800baa2 <__ieee754_pow+0x42>
 800ba7c:	4653      	mov	r3, sl
 800ba7e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ba82:	18db      	adds	r3, r3, r3
 800ba84:	4152      	adcs	r2, r2
 800ba86:	4298      	cmp	r0, r3
 800ba88:	4b93      	ldr	r3, [pc, #588]	@ (800bcd8 <__ieee754_pow+0x278>)
 800ba8a:	4193      	sbcs	r3, r2
 800ba8c:	f080 84cd 	bcs.w	800c42a <__ieee754_pow+0x9ca>
 800ba90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba94:	4650      	mov	r0, sl
 800ba96:	4659      	mov	r1, fp
 800ba98:	f7f4 fb68 	bl	800016c <__adddf3>
 800ba9c:	b011      	add	sp, #68	@ 0x44
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	4b8e      	ldr	r3, [pc, #568]	@ (800bcdc <__ieee754_pow+0x27c>)
 800baa4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 800baa8:	429d      	cmp	r5, r3
 800baaa:	465e      	mov	r6, fp
 800baac:	46d1      	mov	r9, sl
 800baae:	d80b      	bhi.n	800bac8 <__ieee754_pow+0x68>
 800bab0:	d105      	bne.n	800babe <__ieee754_pow+0x5e>
 800bab2:	f1ba 0f00 	cmp.w	sl, #0
 800bab6:	d1eb      	bne.n	800ba90 <__ieee754_pow+0x30>
 800bab8:	42af      	cmp	r7, r5
 800baba:	d8e9      	bhi.n	800ba90 <__ieee754_pow+0x30>
 800babc:	e001      	b.n	800bac2 <__ieee754_pow+0x62>
 800babe:	429f      	cmp	r7, r3
 800bac0:	d802      	bhi.n	800bac8 <__ieee754_pow+0x68>
 800bac2:	429f      	cmp	r7, r3
 800bac4:	d10f      	bne.n	800bae6 <__ieee754_pow+0x86>
 800bac6:	b171      	cbz	r1, 800bae6 <__ieee754_pow+0x86>
 800bac8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bacc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bad0:	ea56 0609 	orrs.w	r6, r6, r9
 800bad4:	d1dc      	bne.n	800ba90 <__ieee754_pow+0x30>
 800bad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bada:	18db      	adds	r3, r3, r3
 800badc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bae0:	4152      	adcs	r2, r2
 800bae2:	429e      	cmp	r6, r3
 800bae4:	e7d0      	b.n	800ba88 <__ieee754_pow+0x28>
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	462b      	mov	r3, r5
 800baea:	da42      	bge.n	800bb72 <__ieee754_pow+0x112>
 800baec:	4a7c      	ldr	r2, [pc, #496]	@ (800bce0 <__ieee754_pow+0x280>)
 800baee:	4297      	cmp	r7, r2
 800baf0:	d856      	bhi.n	800bba0 <__ieee754_pow+0x140>
 800baf2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800baf6:	4297      	cmp	r7, r2
 800baf8:	f240 84a6 	bls.w	800c448 <__ieee754_pow+0x9e8>
 800bafc:	153a      	asrs	r2, r7, #20
 800bafe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb02:	2a14      	cmp	r2, #20
 800bb04:	dd18      	ble.n	800bb38 <__ieee754_pow+0xd8>
 800bb06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bb0a:	fa21 f402 	lsr.w	r4, r1, r2
 800bb0e:	fa04 f202 	lsl.w	r2, r4, r2
 800bb12:	428a      	cmp	r2, r1
 800bb14:	f040 8498 	bne.w	800c448 <__ieee754_pow+0x9e8>
 800bb18:	f004 0401 	and.w	r4, r4, #1
 800bb1c:	f1c4 0402 	rsb	r4, r4, #2
 800bb20:	2900      	cmp	r1, #0
 800bb22:	d159      	bne.n	800bbd8 <__ieee754_pow+0x178>
 800bb24:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bb28:	d149      	bne.n	800bbbe <__ieee754_pow+0x15e>
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	465b      	mov	r3, fp
 800bb2e:	4650      	mov	r0, sl
 800bb30:	4659      	mov	r1, fp
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	e7b1      	b.n	800ba9c <__ieee754_pow+0x3c>
 800bb38:	2900      	cmp	r1, #0
 800bb3a:	d14c      	bne.n	800bbd6 <__ieee754_pow+0x176>
 800bb3c:	f1c2 0214 	rsb	r2, r2, #20
 800bb40:	fa47 f402 	asr.w	r4, r7, r2
 800bb44:	fa04 f202 	lsl.w	r2, r4, r2
 800bb48:	42ba      	cmp	r2, r7
 800bb4a:	f040 847a 	bne.w	800c442 <__ieee754_pow+0x9e2>
 800bb4e:	f004 0401 	and.w	r4, r4, #1
 800bb52:	f1c4 0402 	rsb	r4, r4, #2
 800bb56:	4a63      	ldr	r2, [pc, #396]	@ (800bce4 <__ieee754_pow+0x284>)
 800bb58:	4297      	cmp	r7, r2
 800bb5a:	d1e3      	bne.n	800bb24 <__ieee754_pow+0xc4>
 800bb5c:	f1b8 0f00 	cmp.w	r8, #0
 800bb60:	f280 846b 	bge.w	800c43a <__ieee754_pow+0x9da>
 800bb64:	4652      	mov	r2, sl
 800bb66:	465b      	mov	r3, fp
 800bb68:	2000      	movs	r0, #0
 800bb6a:	495e      	ldr	r1, [pc, #376]	@ (800bce4 <__ieee754_pow+0x284>)
 800bb6c:	f7f4 fdde 	bl	800072c <__aeabi_ddiv>
 800bb70:	e794      	b.n	800ba9c <__ieee754_pow+0x3c>
 800bb72:	2400      	movs	r4, #0
 800bb74:	bb81      	cbnz	r1, 800bbd8 <__ieee754_pow+0x178>
 800bb76:	4a59      	ldr	r2, [pc, #356]	@ (800bcdc <__ieee754_pow+0x27c>)
 800bb78:	4297      	cmp	r7, r2
 800bb7a:	d1ec      	bne.n	800bb56 <__ieee754_pow+0xf6>
 800bb7c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800bb80:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bb84:	ea53 0309 	orrs.w	r3, r3, r9
 800bb88:	f000 844f 	beq.w	800c42a <__ieee754_pow+0x9ca>
 800bb8c:	4b56      	ldr	r3, [pc, #344]	@ (800bce8 <__ieee754_pow+0x288>)
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	d908      	bls.n	800bba4 <__ieee754_pow+0x144>
 800bb92:	f1b8 0f00 	cmp.w	r8, #0
 800bb96:	f280 844c 	bge.w	800c432 <__ieee754_pow+0x9d2>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	e77d      	b.n	800ba9c <__ieee754_pow+0x3c>
 800bba0:	2402      	movs	r4, #2
 800bba2:	e7e7      	b.n	800bb74 <__ieee754_pow+0x114>
 800bba4:	f1b8 0f00 	cmp.w	r8, #0
 800bba8:	f04f 0000 	mov.w	r0, #0
 800bbac:	f04f 0100 	mov.w	r1, #0
 800bbb0:	f6bf af74 	bge.w	800ba9c <__ieee754_pow+0x3c>
 800bbb4:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bbb8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bbbc:	e76e      	b.n	800ba9c <__ieee754_pow+0x3c>
 800bbbe:	4a4b      	ldr	r2, [pc, #300]	@ (800bcec <__ieee754_pow+0x28c>)
 800bbc0:	4590      	cmp	r8, r2
 800bbc2:	d109      	bne.n	800bbd8 <__ieee754_pow+0x178>
 800bbc4:	2e00      	cmp	r6, #0
 800bbc6:	db07      	blt.n	800bbd8 <__ieee754_pow+0x178>
 800bbc8:	4650      	mov	r0, sl
 800bbca:	4659      	mov	r1, fp
 800bbcc:	b011      	add	sp, #68	@ 0x44
 800bbce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd2:	f000 bd0f 	b.w	800c5f4 <__ieee754_sqrt>
 800bbd6:	2400      	movs	r4, #0
 800bbd8:	4650      	mov	r0, sl
 800bbda:	4659      	mov	r1, fp
 800bbdc:	9302      	str	r3, [sp, #8]
 800bbde:	f000 fc69 	bl	800c4b4 <fabs>
 800bbe2:	9b02      	ldr	r3, [sp, #8]
 800bbe4:	f1b9 0f00 	cmp.w	r9, #0
 800bbe8:	d127      	bne.n	800bc3a <__ieee754_pow+0x1da>
 800bbea:	4a3e      	ldr	r2, [pc, #248]	@ (800bce4 <__ieee754_pow+0x284>)
 800bbec:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800bbf0:	4594      	cmp	ip, r2
 800bbf2:	d000      	beq.n	800bbf6 <__ieee754_pow+0x196>
 800bbf4:	bb0d      	cbnz	r5, 800bc3a <__ieee754_pow+0x1da>
 800bbf6:	f1b8 0f00 	cmp.w	r8, #0
 800bbfa:	da05      	bge.n	800bc08 <__ieee754_pow+0x1a8>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	2000      	movs	r0, #0
 800bc02:	4938      	ldr	r1, [pc, #224]	@ (800bce4 <__ieee754_pow+0x284>)
 800bc04:	f7f4 fd92 	bl	800072c <__aeabi_ddiv>
 800bc08:	2e00      	cmp	r6, #0
 800bc0a:	f6bf af47 	bge.w	800ba9c <__ieee754_pow+0x3c>
 800bc0e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bc12:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bc16:	4325      	orrs	r5, r4
 800bc18:	d108      	bne.n	800bc2c <__ieee754_pow+0x1cc>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	4610      	mov	r0, r2
 800bc20:	4619      	mov	r1, r3
 800bc22:	f7f4 faa1 	bl	8000168 <__aeabi_dsub>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	e79f      	b.n	800bb6c <__ieee754_pow+0x10c>
 800bc2c:	2c01      	cmp	r4, #1
 800bc2e:	f47f af35 	bne.w	800ba9c <__ieee754_pow+0x3c>
 800bc32:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc36:	4619      	mov	r1, r3
 800bc38:	e730      	b.n	800ba9c <__ieee754_pow+0x3c>
 800bc3a:	0ff2      	lsrs	r2, r6, #31
 800bc3c:	3a01      	subs	r2, #1
 800bc3e:	ea52 0c04 	orrs.w	ip, r2, r4
 800bc42:	d102      	bne.n	800bc4a <__ieee754_pow+0x1ea>
 800bc44:	4652      	mov	r2, sl
 800bc46:	465b      	mov	r3, fp
 800bc48:	e7e9      	b.n	800bc1e <__ieee754_pow+0x1be>
 800bc4a:	f04f 0900 	mov.w	r9, #0
 800bc4e:	3c01      	subs	r4, #1
 800bc50:	4314      	orrs	r4, r2
 800bc52:	bf14      	ite	ne
 800bc54:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bce4 <__ieee754_pow+0x284>
 800bc58:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bcf0 <__ieee754_pow+0x290>
 800bc5c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bc60:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bc64:	f240 8104 	bls.w	800be70 <__ieee754_pow+0x410>
 800bc68:	4b22      	ldr	r3, [pc, #136]	@ (800bcf4 <__ieee754_pow+0x294>)
 800bc6a:	429f      	cmp	r7, r3
 800bc6c:	4b1e      	ldr	r3, [pc, #120]	@ (800bce8 <__ieee754_pow+0x288>)
 800bc6e:	d913      	bls.n	800bc98 <__ieee754_pow+0x238>
 800bc70:	429d      	cmp	r5, r3
 800bc72:	d808      	bhi.n	800bc86 <__ieee754_pow+0x226>
 800bc74:	f1b8 0f00 	cmp.w	r8, #0
 800bc78:	da08      	bge.n	800bc8c <__ieee754_pow+0x22c>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	b011      	add	sp, #68	@ 0x44
 800bc7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc82:	f000 bcb1 	b.w	800c5e8 <__math_oflow>
 800bc86:	f1b8 0f00 	cmp.w	r8, #0
 800bc8a:	dcf6      	bgt.n	800bc7a <__ieee754_pow+0x21a>
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	b011      	add	sp, #68	@ 0x44
 800bc90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	f000 bca3 	b.w	800c5de <__math_uflow>
 800bc98:	429d      	cmp	r5, r3
 800bc9a:	d20c      	bcs.n	800bcb6 <__ieee754_pow+0x256>
 800bc9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca0:	2200      	movs	r2, #0
 800bca2:	2300      	movs	r3, #0
 800bca4:	f7f4 fe8a 	bl	80009bc <__aeabi_dcmplt>
 800bca8:	3800      	subs	r0, #0
 800bcaa:	bf18      	it	ne
 800bcac:	2001      	movne	r0, #1
 800bcae:	f1b8 0f00 	cmp.w	r8, #0
 800bcb2:	daec      	bge.n	800bc8e <__ieee754_pow+0x22e>
 800bcb4:	e7e2      	b.n	800bc7c <__ieee754_pow+0x21c>
 800bcb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <__ieee754_pow+0x284>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	d91c      	bls.n	800bcf8 <__ieee754_pow+0x298>
 800bcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	f7f4 fe7a 	bl	80009bc <__aeabi_dcmplt>
 800bcc8:	3800      	subs	r0, #0
 800bcca:	bf18      	it	ne
 800bccc:	2001      	movne	r0, #1
 800bcce:	f1b8 0f00 	cmp.w	r8, #0
 800bcd2:	dcd3      	bgt.n	800bc7c <__ieee754_pow+0x21c>
 800bcd4:	e7db      	b.n	800bc8e <__ieee754_pow+0x22e>
 800bcd6:	bf00      	nop
 800bcd8:	fff00000 	.word	0xfff00000
 800bcdc:	7ff00000 	.word	0x7ff00000
 800bce0:	433fffff 	.word	0x433fffff
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	3fefffff 	.word	0x3fefffff
 800bcec:	3fe00000 	.word	0x3fe00000
 800bcf0:	bff00000 	.word	0xbff00000
 800bcf4:	43f00000 	.word	0x43f00000
 800bcf8:	4b59      	ldr	r3, [pc, #356]	@ (800be60 <__ieee754_pow+0x400>)
 800bcfa:	f7f4 fa35 	bl	8000168 <__aeabi_dsub>
 800bcfe:	a350      	add	r3, pc, #320	@ (adr r3, 800be40 <__ieee754_pow+0x3e0>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	f7f4 fbe6 	bl	80004d8 <__aeabi_dmul>
 800bd0c:	a34e      	add	r3, pc, #312	@ (adr r3, 800be48 <__ieee754_pow+0x3e8>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	4620      	mov	r0, r4
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7f4 fbdd 	bl	80004d8 <__aeabi_dmul>
 800bd1e:	2200      	movs	r2, #0
 800bd20:	4682      	mov	sl, r0
 800bd22:	468b      	mov	fp, r1
 800bd24:	4620      	mov	r0, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	4b4e      	ldr	r3, [pc, #312]	@ (800be64 <__ieee754_pow+0x404>)
 800bd2a:	f7f4 fbd5 	bl	80004d8 <__aeabi_dmul>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	a147      	add	r1, pc, #284	@ (adr r1, 800be50 <__ieee754_pow+0x3f0>)
 800bd34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd38:	f7f4 fa16 	bl	8000168 <__aeabi_dsub>
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	462b      	mov	r3, r5
 800bd40:	f7f4 fbca 	bl	80004d8 <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	2000      	movs	r0, #0
 800bd4a:	4947      	ldr	r1, [pc, #284]	@ (800be68 <__ieee754_pow+0x408>)
 800bd4c:	f7f4 fa0c 	bl	8000168 <__aeabi_dsub>
 800bd50:	4622      	mov	r2, r4
 800bd52:	4680      	mov	r8, r0
 800bd54:	4689      	mov	r9, r1
 800bd56:	462b      	mov	r3, r5
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7f4 fbbc 	bl	80004d8 <__aeabi_dmul>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4640      	mov	r0, r8
 800bd66:	4649      	mov	r1, r9
 800bd68:	f7f4 fbb6 	bl	80004d8 <__aeabi_dmul>
 800bd6c:	a33a      	add	r3, pc, #232	@ (adr r3, 800be58 <__ieee754_pow+0x3f8>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	f7f4 fbb1 	bl	80004d8 <__aeabi_dmul>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	4659      	mov	r1, fp
 800bd7e:	f7f4 f9f3 	bl	8000168 <__aeabi_dsub>
 800bd82:	2400      	movs	r4, #0
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4680      	mov	r8, r0
 800bd8a:	4689      	mov	r9, r1
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 f9ec 	bl	800016c <__adddf3>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	4620      	mov	r0, r4
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	f7f4 f9e4 	bl	8000168 <__aeabi_dsub>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 f9de 	bl	8000168 <__aeabi_dsub>
 800bdac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	f7f4 f9ce 	bl	8000168 <__aeabi_dsub>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f7f4 fb82 	bl	80004d8 <__aeabi_dmul>
 800bdd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdd8:	4680      	mov	r8, r0
 800bdda:	4689      	mov	r9, r1
 800bddc:	4630      	mov	r0, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	f7f4 fb7a 	bl	80004d8 <__aeabi_dmul>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 f9be 	bl	800016c <__adddf3>
 800bdf0:	465b      	mov	r3, fp
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	4652      	mov	r2, sl
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7f4 fb6c 	bl	80004d8 <__aeabi_dmul>
 800be00:	460b      	mov	r3, r1
 800be02:	4602      	mov	r2, r0
 800be04:	4680      	mov	r8, r0
 800be06:	4689      	mov	r9, r1
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 f9ae 	bl	800016c <__adddf3>
 800be10:	4b16      	ldr	r3, [pc, #88]	@ (800be6c <__ieee754_pow+0x40c>)
 800be12:	4604      	mov	r4, r0
 800be14:	4299      	cmp	r1, r3
 800be16:	460d      	mov	r5, r1
 800be18:	468b      	mov	fp, r1
 800be1a:	f340 81fd 	ble.w	800c218 <__ieee754_pow+0x7b8>
 800be1e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800be22:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800be26:	4303      	orrs	r3, r0
 800be28:	f000 81dc 	beq.w	800c1e4 <__ieee754_pow+0x784>
 800be2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be30:	2200      	movs	r2, #0
 800be32:	2300      	movs	r3, #0
 800be34:	f7f4 fdc2 	bl	80009bc <__aeabi_dcmplt>
 800be38:	3800      	subs	r0, #0
 800be3a:	bf18      	it	ne
 800be3c:	2001      	movne	r0, #1
 800be3e:	e71d      	b.n	800bc7c <__ieee754_pow+0x21c>
 800be40:	60000000 	.word	0x60000000
 800be44:	3ff71547 	.word	0x3ff71547
 800be48:	f85ddf44 	.word	0xf85ddf44
 800be4c:	3e54ae0b 	.word	0x3e54ae0b
 800be50:	55555555 	.word	0x55555555
 800be54:	3fd55555 	.word	0x3fd55555
 800be58:	652b82fe 	.word	0x652b82fe
 800be5c:	3ff71547 	.word	0x3ff71547
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	3fd00000 	.word	0x3fd00000
 800be68:	3fe00000 	.word	0x3fe00000
 800be6c:	408fffff 	.word	0x408fffff
 800be70:	4ad3      	ldr	r2, [pc, #844]	@ (800c1c0 <__ieee754_pow+0x760>)
 800be72:	4032      	ands	r2, r6
 800be74:	2a00      	cmp	r2, #0
 800be76:	f040 817a 	bne.w	800c16e <__ieee754_pow+0x70e>
 800be7a:	4bd2      	ldr	r3, [pc, #840]	@ (800c1c4 <__ieee754_pow+0x764>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	f7f4 fb2b 	bl	80004d8 <__aeabi_dmul>
 800be82:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800be86:	460b      	mov	r3, r1
 800be88:	151a      	asrs	r2, r3, #20
 800be8a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be8e:	4422      	add	r2, r4
 800be90:	920a      	str	r2, [sp, #40]	@ 0x28
 800be92:	4acd      	ldr	r2, [pc, #820]	@ (800c1c8 <__ieee754_pow+0x768>)
 800be94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be98:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800be9c:	4293      	cmp	r3, r2
 800be9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bea2:	dd08      	ble.n	800beb6 <__ieee754_pow+0x456>
 800bea4:	4ac9      	ldr	r2, [pc, #804]	@ (800c1cc <__ieee754_pow+0x76c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	f340 8163 	ble.w	800c172 <__ieee754_pow+0x712>
 800beac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800beb2:	3301      	adds	r3, #1
 800beb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb6:	2600      	movs	r6, #0
 800beb8:	00f3      	lsls	r3, r6, #3
 800beba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bebc:	4bc4      	ldr	r3, [pc, #784]	@ (800c1d0 <__ieee754_pow+0x770>)
 800bebe:	4629      	mov	r1, r5
 800bec0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bec4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bec8:	461a      	mov	r2, r3
 800beca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bece:	4623      	mov	r3, r4
 800bed0:	4682      	mov	sl, r0
 800bed2:	f7f4 f949 	bl	8000168 <__aeabi_dsub>
 800bed6:	4652      	mov	r2, sl
 800bed8:	462b      	mov	r3, r5
 800beda:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bee2:	f7f4 f943 	bl	800016c <__adddf3>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	2000      	movs	r0, #0
 800beec:	49b9      	ldr	r1, [pc, #740]	@ (800c1d4 <__ieee754_pow+0x774>)
 800beee:	f7f4 fc1d 	bl	800072c <__aeabi_ddiv>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800befa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800befe:	f7f4 faeb 	bl	80004d8 <__aeabi_dmul>
 800bf02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf06:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bf0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf0e:	2300      	movs	r3, #0
 800bf10:	2200      	movs	r2, #0
 800bf12:	46ab      	mov	fp, r5
 800bf14:	106d      	asrs	r5, r5, #1
 800bf16:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bf20:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf24:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	4614      	mov	r4, r2
 800bf2e:	461d      	mov	r5, r3
 800bf30:	f7f4 fad2 	bl	80004d8 <__aeabi_dmul>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3c:	f7f4 f914 	bl	8000168 <__aeabi_dsub>
 800bf40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	4620      	mov	r0, r4
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	f7f4 f90c 	bl	8000168 <__aeabi_dsub>
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	4650      	mov	r0, sl
 800bf56:	4659      	mov	r1, fp
 800bf58:	f7f4 f906 	bl	8000168 <__aeabi_dsub>
 800bf5c:	4642      	mov	r2, r8
 800bf5e:	464b      	mov	r3, r9
 800bf60:	f7f4 faba 	bl	80004d8 <__aeabi_dmul>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 f8fc 	bl	8000168 <__aeabi_dsub>
 800bf70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf74:	f7f4 fab0 	bl	80004d8 <__aeabi_dmul>
 800bf78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf80:	4610      	mov	r0, r2
 800bf82:	4619      	mov	r1, r3
 800bf84:	f7f4 faa8 	bl	80004d8 <__aeabi_dmul>
 800bf88:	a37b      	add	r3, pc, #492	@ (adr r3, 800c178 <__ieee754_pow+0x718>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	4604      	mov	r4, r0
 800bf90:	460d      	mov	r5, r1
 800bf92:	f7f4 faa1 	bl	80004d8 <__aeabi_dmul>
 800bf96:	a37a      	add	r3, pc, #488	@ (adr r3, 800c180 <__ieee754_pow+0x720>)
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 f8e6 	bl	800016c <__adddf3>
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	f7f4 fa98 	bl	80004d8 <__aeabi_dmul>
 800bfa8:	a377      	add	r3, pc, #476	@ (adr r3, 800c188 <__ieee754_pow+0x728>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 f8dd 	bl	800016c <__adddf3>
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	f7f4 fa8f 	bl	80004d8 <__aeabi_dmul>
 800bfba:	a375      	add	r3, pc, #468	@ (adr r3, 800c190 <__ieee754_pow+0x730>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 f8d4 	bl	800016c <__adddf3>
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	f7f4 fa86 	bl	80004d8 <__aeabi_dmul>
 800bfcc:	a372      	add	r3, pc, #456	@ (adr r3, 800c198 <__ieee754_pow+0x738>)
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	f7f4 f8cb 	bl	800016c <__adddf3>
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	462b      	mov	r3, r5
 800bfda:	f7f4 fa7d 	bl	80004d8 <__aeabi_dmul>
 800bfde:	a370      	add	r3, pc, #448	@ (adr r3, 800c1a0 <__ieee754_pow+0x740>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 f8c2 	bl	800016c <__adddf3>
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4606      	mov	r6, r0
 800bfec:	460f      	mov	r7, r1
 800bfee:	462b      	mov	r3, r5
 800bff0:	4620      	mov	r0, r4
 800bff2:	4629      	mov	r1, r5
 800bff4:	f7f4 fa70 	bl	80004d8 <__aeabi_dmul>
 800bff8:	4602      	mov	r2, r0
 800bffa:	460b      	mov	r3, r1
 800bffc:	4630      	mov	r0, r6
 800bffe:	4639      	mov	r1, r7
 800c000:	f7f4 fa6a 	bl	80004d8 <__aeabi_dmul>
 800c004:	4604      	mov	r4, r0
 800c006:	460d      	mov	r5, r1
 800c008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c00c:	4642      	mov	r2, r8
 800c00e:	464b      	mov	r3, r9
 800c010:	f7f4 f8ac 	bl	800016c <__adddf3>
 800c014:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c018:	f7f4 fa5e 	bl	80004d8 <__aeabi_dmul>
 800c01c:	4622      	mov	r2, r4
 800c01e:	462b      	mov	r3, r5
 800c020:	f7f4 f8a4 	bl	800016c <__adddf3>
 800c024:	4642      	mov	r2, r8
 800c026:	4682      	mov	sl, r0
 800c028:	468b      	mov	fp, r1
 800c02a:	464b      	mov	r3, r9
 800c02c:	4640      	mov	r0, r8
 800c02e:	4649      	mov	r1, r9
 800c030:	f7f4 fa52 	bl	80004d8 <__aeabi_dmul>
 800c034:	2200      	movs	r2, #0
 800c036:	4b68      	ldr	r3, [pc, #416]	@ (800c1d8 <__ieee754_pow+0x778>)
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	f7f4 f896 	bl	800016c <__adddf3>
 800c040:	4652      	mov	r2, sl
 800c042:	465b      	mov	r3, fp
 800c044:	f7f4 f892 	bl	800016c <__adddf3>
 800c048:	2400      	movs	r4, #0
 800c04a:	460d      	mov	r5, r1
 800c04c:	4622      	mov	r2, r4
 800c04e:	460b      	mov	r3, r1
 800c050:	4640      	mov	r0, r8
 800c052:	4649      	mov	r1, r9
 800c054:	f7f4 fa40 	bl	80004d8 <__aeabi_dmul>
 800c058:	2200      	movs	r2, #0
 800c05a:	4680      	mov	r8, r0
 800c05c:	4689      	mov	r9, r1
 800c05e:	4620      	mov	r0, r4
 800c060:	4629      	mov	r1, r5
 800c062:	4b5d      	ldr	r3, [pc, #372]	@ (800c1d8 <__ieee754_pow+0x778>)
 800c064:	f7f4 f880 	bl	8000168 <__aeabi_dsub>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	f7f4 f87c 	bl	8000168 <__aeabi_dsub>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4650      	mov	r0, sl
 800c076:	4659      	mov	r1, fp
 800c078:	f7f4 f876 	bl	8000168 <__aeabi_dsub>
 800c07c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c080:	f7f4 fa2a 	bl	80004d8 <__aeabi_dmul>
 800c084:	4622      	mov	r2, r4
 800c086:	4606      	mov	r6, r0
 800c088:	460f      	mov	r7, r1
 800c08a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c08e:	462b      	mov	r3, r5
 800c090:	f7f4 fa22 	bl	80004d8 <__aeabi_dmul>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 f866 	bl	800016c <__adddf3>
 800c0a0:	2400      	movs	r4, #0
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 f85d 	bl	800016c <__adddf3>
 800c0b2:	a33d      	add	r3, pc, #244	@ (adr r3, 800c1a8 <__ieee754_pow+0x748>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	f7f4 fa0c 	bl	80004d8 <__aeabi_dmul>
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 f84c 	bl	8000168 <__aeabi_dsub>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 f846 	bl	8000168 <__aeabi_dsub>
 800c0dc:	a334      	add	r3, pc, #208	@ (adr r3, 800c1b0 <__ieee754_pow+0x750>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f7f4 f9f9 	bl	80004d8 <__aeabi_dmul>
 800c0e6:	a334      	add	r3, pc, #208	@ (adr r3, 800c1b8 <__ieee754_pow+0x758>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f7f4 f9f0 	bl	80004d8 <__aeabi_dmul>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	4639      	mov	r1, r7
 800c100:	f7f4 f834 	bl	800016c <__adddf3>
 800c104:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c106:	4b35      	ldr	r3, [pc, #212]	@ (800c1dc <__ieee754_pow+0x77c>)
 800c108:	2400      	movs	r4, #0
 800c10a:	4413      	add	r3, r2
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	f7f4 f82c 	bl	800016c <__adddf3>
 800c114:	4682      	mov	sl, r0
 800c116:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c118:	468b      	mov	fp, r1
 800c11a:	f7f4 f973 	bl	8000404 <__aeabi_i2d>
 800c11e:	4606      	mov	r6, r0
 800c120:	460f      	mov	r7, r1
 800c122:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c124:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e0 <__ieee754_pow+0x780>)
 800c126:	4413      	add	r3, r2
 800c128:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c12c:	4652      	mov	r2, sl
 800c12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c132:	465b      	mov	r3, fp
 800c134:	f7f4 f81a 	bl	800016c <__adddf3>
 800c138:	4642      	mov	r2, r8
 800c13a:	464b      	mov	r3, r9
 800c13c:	f7f4 f816 	bl	800016c <__adddf3>
 800c140:	4632      	mov	r2, r6
 800c142:	463b      	mov	r3, r7
 800c144:	f7f4 f812 	bl	800016c <__adddf3>
 800c148:	4632      	mov	r2, r6
 800c14a:	463b      	mov	r3, r7
 800c14c:	4620      	mov	r0, r4
 800c14e:	460d      	mov	r5, r1
 800c150:	f7f4 f80a 	bl	8000168 <__aeabi_dsub>
 800c154:	4642      	mov	r2, r8
 800c156:	464b      	mov	r3, r9
 800c158:	f7f4 f806 	bl	8000168 <__aeabi_dsub>
 800c15c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c160:	f7f4 f802 	bl	8000168 <__aeabi_dsub>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4650      	mov	r0, sl
 800c16a:	4659      	mov	r1, fp
 800c16c:	e61c      	b.n	800bda8 <__ieee754_pow+0x348>
 800c16e:	2400      	movs	r4, #0
 800c170:	e68a      	b.n	800be88 <__ieee754_pow+0x428>
 800c172:	2601      	movs	r6, #1
 800c174:	e6a0      	b.n	800beb8 <__ieee754_pow+0x458>
 800c176:	bf00      	nop
 800c178:	4a454eef 	.word	0x4a454eef
 800c17c:	3fca7e28 	.word	0x3fca7e28
 800c180:	93c9db65 	.word	0x93c9db65
 800c184:	3fcd864a 	.word	0x3fcd864a
 800c188:	a91d4101 	.word	0xa91d4101
 800c18c:	3fd17460 	.word	0x3fd17460
 800c190:	518f264d 	.word	0x518f264d
 800c194:	3fd55555 	.word	0x3fd55555
 800c198:	db6fabff 	.word	0xdb6fabff
 800c19c:	3fdb6db6 	.word	0x3fdb6db6
 800c1a0:	33333303 	.word	0x33333303
 800c1a4:	3fe33333 	.word	0x3fe33333
 800c1a8:	e0000000 	.word	0xe0000000
 800c1ac:	3feec709 	.word	0x3feec709
 800c1b0:	dc3a03fd 	.word	0xdc3a03fd
 800c1b4:	3feec709 	.word	0x3feec709
 800c1b8:	145b01f5 	.word	0x145b01f5
 800c1bc:	be3e2fe0 	.word	0xbe3e2fe0
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	43400000 	.word	0x43400000
 800c1c8:	0003988e 	.word	0x0003988e
 800c1cc:	000bb679 	.word	0x000bb679
 800c1d0:	0800df08 	.word	0x0800df08
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	40080000 	.word	0x40080000
 800c1dc:	0800dee8 	.word	0x0800dee8
 800c1e0:	0800def8 	.word	0x0800def8
 800c1e4:	a39a      	add	r3, pc, #616	@ (adr r3, 800c450 <__ieee754_pow+0x9f0>)
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	f7f3 ffbd 	bl	800016c <__adddf3>
 800c1f2:	4642      	mov	r2, r8
 800c1f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c1f8:	464b      	mov	r3, r9
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f7f3 ffb3 	bl	8000168 <__aeabi_dsub>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20a:	f7f4 fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800c20e:	2800      	cmp	r0, #0
 800c210:	f47f ae0c 	bne.w	800be2c <__ieee754_pow+0x3cc>
 800c214:	4ba0      	ldr	r3, [pc, #640]	@ (800c498 <__ieee754_pow+0xa38>)
 800c216:	e022      	b.n	800c25e <__ieee754_pow+0x7fe>
 800c218:	4ca0      	ldr	r4, [pc, #640]	@ (800c49c <__ieee754_pow+0xa3c>)
 800c21a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c21e:	42a3      	cmp	r3, r4
 800c220:	d919      	bls.n	800c256 <__ieee754_pow+0x7f6>
 800c222:	4b9f      	ldr	r3, [pc, #636]	@ (800c4a0 <__ieee754_pow+0xa40>)
 800c224:	440b      	add	r3, r1
 800c226:	4303      	orrs	r3, r0
 800c228:	d009      	beq.n	800c23e <__ieee754_pow+0x7de>
 800c22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c22e:	2200      	movs	r2, #0
 800c230:	2300      	movs	r3, #0
 800c232:	f7f4 fbc3 	bl	80009bc <__aeabi_dcmplt>
 800c236:	3800      	subs	r0, #0
 800c238:	bf18      	it	ne
 800c23a:	2001      	movne	r0, #1
 800c23c:	e527      	b.n	800bc8e <__ieee754_pow+0x22e>
 800c23e:	4642      	mov	r2, r8
 800c240:	464b      	mov	r3, r9
 800c242:	f7f3 ff91 	bl	8000168 <__aeabi_dsub>
 800c246:	4632      	mov	r2, r6
 800c248:	463b      	mov	r3, r7
 800c24a:	f7f4 fbcb 	bl	80009e4 <__aeabi_dcmpge>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d1eb      	bne.n	800c22a <__ieee754_pow+0x7ca>
 800c252:	4b94      	ldr	r3, [pc, #592]	@ (800c4a4 <__ieee754_pow+0xa44>)
 800c254:	e003      	b.n	800c25e <__ieee754_pow+0x7fe>
 800c256:	4a94      	ldr	r2, [pc, #592]	@ (800c4a8 <__ieee754_pow+0xa48>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	f240 80e1 	bls.w	800c420 <__ieee754_pow+0x9c0>
 800c25e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800c262:	151b      	asrs	r3, r3, #20
 800c264:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800c268:	fa4a fa03 	asr.w	sl, sl, r3
 800c26c:	44da      	add	sl, fp
 800c26e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c272:	488e      	ldr	r0, [pc, #568]	@ (800c4ac <__ieee754_pow+0xa4c>)
 800c274:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c278:	4108      	asrs	r0, r1
 800c27a:	ea00 030a 	and.w	r3, r0, sl
 800c27e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c282:	f1c1 0114 	rsb	r1, r1, #20
 800c286:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c28a:	4640      	mov	r0, r8
 800c28c:	fa4a fa01 	asr.w	sl, sl, r1
 800c290:	f1bb 0f00 	cmp.w	fp, #0
 800c294:	4649      	mov	r1, r9
 800c296:	f04f 0200 	mov.w	r2, #0
 800c29a:	bfb8      	it	lt
 800c29c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2a0:	f7f3 ff62 	bl	8000168 <__aeabi_dsub>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	2400      	movs	r4, #0
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	463b      	mov	r3, r7
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f3 ff5b 	bl	800016c <__adddf3>
 800c2b6:	a368      	add	r3, pc, #416	@ (adr r3, 800c458 <__ieee754_pow+0x9f8>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	4620      	mov	r0, r4
 800c2be:	460d      	mov	r5, r1
 800c2c0:	f7f4 f90a 	bl	80004d8 <__aeabi_dmul>
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f7f3 ff4a 	bl	8000168 <__aeabi_dsub>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f3 ff44 	bl	8000168 <__aeabi_dsub>
 800c2e0:	a35f      	add	r3, pc, #380	@ (adr r3, 800c460 <__ieee754_pow+0xa00>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f4 f8f7 	bl	80004d8 <__aeabi_dmul>
 800c2ea:	a35f      	add	r3, pc, #380	@ (adr r3, 800c468 <__ieee754_pow+0xa08>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f4 f8ee 	bl	80004d8 <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4640      	mov	r0, r8
 800c302:	4649      	mov	r1, r9
 800c304:	f7f3 ff32 	bl	800016c <__adddf3>
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c314:	f7f3 ff2a 	bl	800016c <__adddf3>
 800c318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31c:	4680      	mov	r8, r0
 800c31e:	4689      	mov	r9, r1
 800c320:	f7f3 ff22 	bl	8000168 <__aeabi_dsub>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	4620      	mov	r0, r4
 800c32a:	4629      	mov	r1, r5
 800c32c:	f7f3 ff1c 	bl	8000168 <__aeabi_dsub>
 800c330:	4642      	mov	r2, r8
 800c332:	4606      	mov	r6, r0
 800c334:	460f      	mov	r7, r1
 800c336:	464b      	mov	r3, r9
 800c338:	4640      	mov	r0, r8
 800c33a:	4649      	mov	r1, r9
 800c33c:	f7f4 f8cc 	bl	80004d8 <__aeabi_dmul>
 800c340:	a34b      	add	r3, pc, #300	@ (adr r3, 800c470 <__ieee754_pow+0xa10>)
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	4604      	mov	r4, r0
 800c348:	460d      	mov	r5, r1
 800c34a:	f7f4 f8c5 	bl	80004d8 <__aeabi_dmul>
 800c34e:	a34a      	add	r3, pc, #296	@ (adr r3, 800c478 <__ieee754_pow+0xa18>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f3 ff08 	bl	8000168 <__aeabi_dsub>
 800c358:	4622      	mov	r2, r4
 800c35a:	462b      	mov	r3, r5
 800c35c:	f7f4 f8bc 	bl	80004d8 <__aeabi_dmul>
 800c360:	a347      	add	r3, pc, #284	@ (adr r3, 800c480 <__ieee754_pow+0xa20>)
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	f7f3 ff01 	bl	800016c <__adddf3>
 800c36a:	4622      	mov	r2, r4
 800c36c:	462b      	mov	r3, r5
 800c36e:	f7f4 f8b3 	bl	80004d8 <__aeabi_dmul>
 800c372:	a345      	add	r3, pc, #276	@ (adr r3, 800c488 <__ieee754_pow+0xa28>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 fef6 	bl	8000168 <__aeabi_dsub>
 800c37c:	4622      	mov	r2, r4
 800c37e:	462b      	mov	r3, r5
 800c380:	f7f4 f8aa 	bl	80004d8 <__aeabi_dmul>
 800c384:	a342      	add	r3, pc, #264	@ (adr r3, 800c490 <__ieee754_pow+0xa30>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f3 feef 	bl	800016c <__adddf3>
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	f7f4 f8a1 	bl	80004d8 <__aeabi_dmul>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	4640      	mov	r0, r8
 800c39c:	4649      	mov	r1, r9
 800c39e:	f7f3 fee3 	bl	8000168 <__aeabi_dsub>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	460d      	mov	r5, r1
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 f893 	bl	80004d8 <__aeabi_dmul>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	e9cd 0100 	strd	r0, r1, [sp]
 800c3b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f3 fed2 	bl	8000168 <__aeabi_dsub>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3cc:	f7f4 f9ae 	bl	800072c <__aeabi_ddiv>
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4640      	mov	r0, r8
 800c3da:	4649      	mov	r1, r9
 800c3dc:	f7f4 f87c 	bl	80004d8 <__aeabi_dmul>
 800c3e0:	4632      	mov	r2, r6
 800c3e2:	463b      	mov	r3, r7
 800c3e4:	f7f3 fec2 	bl	800016c <__adddf3>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f7f3 feba 	bl	8000168 <__aeabi_dsub>
 800c3f4:	4642      	mov	r2, r8
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	f7f3 feb6 	bl	8000168 <__aeabi_dsub>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	2000      	movs	r0, #0
 800c402:	492b      	ldr	r1, [pc, #172]	@ (800c4b0 <__ieee754_pow+0xa50>)
 800c404:	f7f3 feb0 	bl	8000168 <__aeabi_dsub>
 800c408:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c40c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c410:	da09      	bge.n	800c426 <__ieee754_pow+0x9c6>
 800c412:	4652      	mov	r2, sl
 800c414:	f000 f854 	bl	800c4c0 <scalbn>
 800c418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c41c:	f7ff bb89 	b.w	800bb32 <__ieee754_pow+0xd2>
 800c420:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c424:	e740      	b.n	800c2a8 <__ieee754_pow+0x848>
 800c426:	4621      	mov	r1, r4
 800c428:	e7f6      	b.n	800c418 <__ieee754_pow+0x9b8>
 800c42a:	2000      	movs	r0, #0
 800c42c:	4920      	ldr	r1, [pc, #128]	@ (800c4b0 <__ieee754_pow+0xa50>)
 800c42e:	f7ff bb35 	b.w	800ba9c <__ieee754_pow+0x3c>
 800c432:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c436:	f7ff bb31 	b.w	800ba9c <__ieee754_pow+0x3c>
 800c43a:	4650      	mov	r0, sl
 800c43c:	4659      	mov	r1, fp
 800c43e:	f7ff bb2d 	b.w	800ba9c <__ieee754_pow+0x3c>
 800c442:	460c      	mov	r4, r1
 800c444:	f7ff bb87 	b.w	800bb56 <__ieee754_pow+0xf6>
 800c448:	2400      	movs	r4, #0
 800c44a:	f7ff bb69 	b.w	800bb20 <__ieee754_pow+0xc0>
 800c44e:	bf00      	nop
 800c450:	652b82fe 	.word	0x652b82fe
 800c454:	3c971547 	.word	0x3c971547
 800c458:	00000000 	.word	0x00000000
 800c45c:	3fe62e43 	.word	0x3fe62e43
 800c460:	fefa39ef 	.word	0xfefa39ef
 800c464:	3fe62e42 	.word	0x3fe62e42
 800c468:	0ca86c39 	.word	0x0ca86c39
 800c46c:	be205c61 	.word	0xbe205c61
 800c470:	72bea4d0 	.word	0x72bea4d0
 800c474:	3e663769 	.word	0x3e663769
 800c478:	c5d26bf1 	.word	0xc5d26bf1
 800c47c:	3ebbbd41 	.word	0x3ebbbd41
 800c480:	af25de2c 	.word	0xaf25de2c
 800c484:	3f11566a 	.word	0x3f11566a
 800c488:	16bebd93 	.word	0x16bebd93
 800c48c:	3f66c16c 	.word	0x3f66c16c
 800c490:	5555553e 	.word	0x5555553e
 800c494:	3fc55555 	.word	0x3fc55555
 800c498:	40900000 	.word	0x40900000
 800c49c:	4090cbff 	.word	0x4090cbff
 800c4a0:	3f6f3400 	.word	0x3f6f3400
 800c4a4:	4090cc00 	.word	0x4090cc00
 800c4a8:	3fe00000 	.word	0x3fe00000
 800c4ac:	fff00000 	.word	0xfff00000
 800c4b0:	3ff00000 	.word	0x3ff00000

0800c4b4 <fabs>:
 800c4b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4770      	bx	lr
 800c4bc:	0000      	movs	r0, r0
	...

0800c4c0 <scalbn>:
 800c4c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4ca:	4683      	mov	fp, r0
 800c4cc:	468c      	mov	ip, r1
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	b982      	cbnz	r2, 800c4f4 <scalbn+0x34>
 800c4d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4d6:	4303      	orrs	r3, r0
 800c4d8:	d035      	beq.n	800c546 <scalbn+0x86>
 800c4da:	4b2d      	ldr	r3, [pc, #180]	@ (800c590 <scalbn+0xd0>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f7f3 fffb 	bl	80004d8 <__aeabi_dmul>
 800c4e2:	4b2c      	ldr	r3, [pc, #176]	@ (800c594 <scalbn+0xd4>)
 800c4e4:	4683      	mov	fp, r0
 800c4e6:	429e      	cmp	r6, r3
 800c4e8:	468c      	mov	ip, r1
 800c4ea:	da0d      	bge.n	800c508 <scalbn+0x48>
 800c4ec:	a324      	add	r3, pc, #144	@ (adr r3, 800c580 <scalbn+0xc0>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	e019      	b.n	800c528 <scalbn+0x68>
 800c4f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c4f8:	42ba      	cmp	r2, r7
 800c4fa:	d109      	bne.n	800c510 <scalbn+0x50>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	f7f3 fe35 	bl	800016c <__adddf3>
 800c502:	4683      	mov	fp, r0
 800c504:	468c      	mov	ip, r1
 800c506:	e01e      	b.n	800c546 <scalbn+0x86>
 800c508:	460b      	mov	r3, r1
 800c50a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c50e:	3a36      	subs	r2, #54	@ 0x36
 800c510:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c514:	428e      	cmp	r6, r1
 800c516:	dd0a      	ble.n	800c52e <scalbn+0x6e>
 800c518:	a31b      	add	r3, pc, #108	@ (adr r3, 800c588 <scalbn+0xc8>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	4665      	mov	r5, ip
 800c520:	f363 051e 	bfi	r5, r3, #0, #31
 800c524:	4629      	mov	r1, r5
 800c526:	481c      	ldr	r0, [pc, #112]	@ (800c598 <scalbn+0xd8>)
 800c528:	f7f3 ffd6 	bl	80004d8 <__aeabi_dmul>
 800c52c:	e7e9      	b.n	800c502 <scalbn+0x42>
 800c52e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c532:	4432      	add	r2, r6
 800c534:	428a      	cmp	r2, r1
 800c536:	dcef      	bgt.n	800c518 <scalbn+0x58>
 800c538:	2a00      	cmp	r2, #0
 800c53a:	dd08      	ble.n	800c54e <scalbn+0x8e>
 800c53c:	f36f 531e 	bfc	r3, #20, #11
 800c540:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c544:	46ac      	mov	ip, r5
 800c546:	4658      	mov	r0, fp
 800c548:	4661      	mov	r1, ip
 800c54a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c54e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c552:	da09      	bge.n	800c568 <scalbn+0xa8>
 800c554:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c558:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c55c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c560:	480e      	ldr	r0, [pc, #56]	@ (800c59c <scalbn+0xdc>)
 800c562:	f041 011f 	orr.w	r1, r1, #31
 800c566:	e7c1      	b.n	800c4ec <scalbn+0x2c>
 800c568:	3236      	adds	r2, #54	@ 0x36
 800c56a:	f36f 531e 	bfc	r3, #20, #11
 800c56e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c572:	4658      	mov	r0, fp
 800c574:	4629      	mov	r1, r5
 800c576:	2200      	movs	r2, #0
 800c578:	4b09      	ldr	r3, [pc, #36]	@ (800c5a0 <scalbn+0xe0>)
 800c57a:	e7d5      	b.n	800c528 <scalbn+0x68>
 800c57c:	f3af 8000 	nop.w
 800c580:	c2f8f359 	.word	0xc2f8f359
 800c584:	01a56e1f 	.word	0x01a56e1f
 800c588:	8800759c 	.word	0x8800759c
 800c58c:	7e37e43c 	.word	0x7e37e43c
 800c590:	43500000 	.word	0x43500000
 800c594:	ffff3cb0 	.word	0xffff3cb0
 800c598:	8800759c 	.word	0x8800759c
 800c59c:	c2f8f359 	.word	0xc2f8f359
 800c5a0:	3c900000 	.word	0x3c900000

0800c5a4 <with_errno>:
 800c5a4:	b570      	push	{r4, r5, r6, lr}
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	460d      	mov	r5, r1
 800c5aa:	4616      	mov	r6, r2
 800c5ac:	f7fe fd64 	bl	800b078 <__errno>
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	6006      	str	r6, [r0, #0]
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}

0800c5b8 <xflow>:
 800c5b8:	b513      	push	{r0, r1, r4, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	b10c      	cbz	r4, 800c5c6 <xflow+0xe>
 800c5c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c5c6:	e9cd 2300 	strd	r2, r3, [sp]
 800c5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ce:	f7f3 ff83 	bl	80004d8 <__aeabi_dmul>
 800c5d2:	2222      	movs	r2, #34	@ 0x22
 800c5d4:	b002      	add	sp, #8
 800c5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5da:	f7ff bfe3 	b.w	800c5a4 <with_errno>

0800c5de <__math_uflow>:
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c5e4:	f7ff bfe8 	b.w	800c5b8 <xflow>

0800c5e8 <__math_oflow>:
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c5ee:	f7ff bfe3 	b.w	800c5b8 <xflow>
	...

0800c5f4 <__ieee754_sqrt>:
 800c5f4:	4a65      	ldr	r2, [pc, #404]	@ (800c78c <__ieee754_sqrt+0x198>)
 800c5f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fa:	438a      	bics	r2, r1
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	460f      	mov	r7, r1
 800c600:	460b      	mov	r3, r1
 800c602:	4604      	mov	r4, r0
 800c604:	d10e      	bne.n	800c624 <__ieee754_sqrt+0x30>
 800c606:	4602      	mov	r2, r0
 800c608:	f7f3 ff66 	bl	80004d8 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f3 fdaa 	bl	800016c <__adddf3>
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	4630      	mov	r0, r6
 800c61e:	4639      	mov	r1, r7
 800c620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	2900      	cmp	r1, #0
 800c626:	dc0c      	bgt.n	800c642 <__ieee754_sqrt+0x4e>
 800c628:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c62c:	4302      	orrs	r2, r0
 800c62e:	d0f5      	beq.n	800c61c <__ieee754_sqrt+0x28>
 800c630:	b189      	cbz	r1, 800c656 <__ieee754_sqrt+0x62>
 800c632:	4602      	mov	r2, r0
 800c634:	f7f3 fd98 	bl	8000168 <__aeabi_dsub>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	f7f4 f876 	bl	800072c <__aeabi_ddiv>
 800c640:	e7ea      	b.n	800c618 <__ieee754_sqrt+0x24>
 800c642:	150a      	asrs	r2, r1, #20
 800c644:	d115      	bne.n	800c672 <__ieee754_sqrt+0x7e>
 800c646:	2100      	movs	r1, #0
 800c648:	e009      	b.n	800c65e <__ieee754_sqrt+0x6a>
 800c64a:	0ae3      	lsrs	r3, r4, #11
 800c64c:	3a15      	subs	r2, #21
 800c64e:	0564      	lsls	r4, r4, #21
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0fa      	beq.n	800c64a <__ieee754_sqrt+0x56>
 800c654:	e7f7      	b.n	800c646 <__ieee754_sqrt+0x52>
 800c656:	460a      	mov	r2, r1
 800c658:	e7fa      	b.n	800c650 <__ieee754_sqrt+0x5c>
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	3101      	adds	r1, #1
 800c65e:	02d8      	lsls	r0, r3, #11
 800c660:	d5fb      	bpl.n	800c65a <__ieee754_sqrt+0x66>
 800c662:	1e48      	subs	r0, r1, #1
 800c664:	1a12      	subs	r2, r2, r0
 800c666:	f1c1 0020 	rsb	r0, r1, #32
 800c66a:	fa24 f000 	lsr.w	r0, r4, r0
 800c66e:	4303      	orrs	r3, r0
 800c670:	408c      	lsls	r4, r1
 800c672:	2700      	movs	r7, #0
 800c674:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800c678:	2116      	movs	r1, #22
 800c67a:	07d2      	lsls	r2, r2, #31
 800c67c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c680:	463a      	mov	r2, r7
 800c682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c68a:	bf5c      	itt	pl
 800c68c:	005b      	lslpl	r3, r3, #1
 800c68e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c692:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c696:	bf58      	it	pl
 800c698:	0064      	lslpl	r4, r4, #1
 800c69a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c69e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c6a2:	0064      	lsls	r4, r4, #1
 800c6a4:	1815      	adds	r5, r2, r0
 800c6a6:	429d      	cmp	r5, r3
 800c6a8:	bfde      	ittt	le
 800c6aa:	182a      	addle	r2, r5, r0
 800c6ac:	1b5b      	suble	r3, r3, r5
 800c6ae:	183f      	addle	r7, r7, r0
 800c6b0:	0fe5      	lsrs	r5, r4, #31
 800c6b2:	3901      	subs	r1, #1
 800c6b4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c6b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c6bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c6c0:	d1f0      	bne.n	800c6a4 <__ieee754_sqrt+0xb0>
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	2620      	movs	r6, #32
 800c6c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	eb00 0c01 	add.w	ip, r0, r1
 800c6d0:	dc02      	bgt.n	800c6d8 <__ieee754_sqrt+0xe4>
 800c6d2:	d113      	bne.n	800c6fc <__ieee754_sqrt+0x108>
 800c6d4:	45a4      	cmp	ip, r4
 800c6d6:	d811      	bhi.n	800c6fc <__ieee754_sqrt+0x108>
 800c6d8:	f1bc 0f00 	cmp.w	ip, #0
 800c6dc:	eb0c 0100 	add.w	r1, ip, r0
 800c6e0:	da3e      	bge.n	800c760 <__ieee754_sqrt+0x16c>
 800c6e2:	2900      	cmp	r1, #0
 800c6e4:	db3c      	blt.n	800c760 <__ieee754_sqrt+0x16c>
 800c6e6:	f102 0e01 	add.w	lr, r2, #1
 800c6ea:	1a9b      	subs	r3, r3, r2
 800c6ec:	4672      	mov	r2, lr
 800c6ee:	45a4      	cmp	ip, r4
 800c6f0:	bf88      	it	hi
 800c6f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c6f6:	eba4 040c 	sub.w	r4, r4, ip
 800c6fa:	4405      	add	r5, r0
 800c6fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c700:	3e01      	subs	r6, #1
 800c702:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c706:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c70a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c70e:	d1dc      	bne.n	800c6ca <__ieee754_sqrt+0xd6>
 800c710:	431c      	orrs	r4, r3
 800c712:	d01a      	beq.n	800c74a <__ieee754_sqrt+0x156>
 800c714:	4c1e      	ldr	r4, [pc, #120]	@ (800c790 <__ieee754_sqrt+0x19c>)
 800c716:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c794 <__ieee754_sqrt+0x1a0>
 800c71a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c71e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c722:	f7f3 fd21 	bl	8000168 <__aeabi_dsub>
 800c726:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f4 f94d 	bl	80009d0 <__aeabi_dcmple>
 800c736:	b140      	cbz	r0, 800c74a <__ieee754_sqrt+0x156>
 800c738:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c73c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c740:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c744:	d10e      	bne.n	800c764 <__ieee754_sqrt+0x170>
 800c746:	4635      	mov	r5, r6
 800c748:	3701      	adds	r7, #1
 800c74a:	107b      	asrs	r3, r7, #1
 800c74c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c750:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c754:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800c758:	086b      	lsrs	r3, r5, #1
 800c75a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800c75e:	e75b      	b.n	800c618 <__ieee754_sqrt+0x24>
 800c760:	4696      	mov	lr, r2
 800c762:	e7c2      	b.n	800c6ea <__ieee754_sqrt+0xf6>
 800c764:	f7f3 fd02 	bl	800016c <__adddf3>
 800c768:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	f7f4 f922 	bl	80009bc <__aeabi_dcmplt>
 800c778:	b120      	cbz	r0, 800c784 <__ieee754_sqrt+0x190>
 800c77a:	1cab      	adds	r3, r5, #2
 800c77c:	bf08      	it	eq
 800c77e:	3701      	addeq	r7, #1
 800c780:	3502      	adds	r5, #2
 800c782:	e7e2      	b.n	800c74a <__ieee754_sqrt+0x156>
 800c784:	1c6b      	adds	r3, r5, #1
 800c786:	f023 0501 	bic.w	r5, r3, #1
 800c78a:	e7de      	b.n	800c74a <__ieee754_sqrt+0x156>
 800c78c:	7ff00000 	.word	0x7ff00000
 800c790:	0800df20 	.word	0x0800df20
 800c794:	0800df18 	.word	0x0800df18

0800c798 <_init>:
 800c798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c79a:	bf00      	nop
 800c79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79e:	bc08      	pop	{r3}
 800c7a0:	469e      	mov	lr, r3
 800c7a2:	4770      	bx	lr

0800c7a4 <_fini>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	bf00      	nop
 800c7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7aa:	bc08      	pop	{r3}
 800c7ac:	469e      	mov	lr, r3
 800c7ae:	4770      	bx	lr
