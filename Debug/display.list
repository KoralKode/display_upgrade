
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c640  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001770  0800c750  0800c750  0000d750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec0  0800dec0  0000f1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dec0  0800dec0  0000eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec8  0800dec8  0000f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec8  0800dec8  0000eec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800decc  0800decc  0000eecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800ded0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  200001d0  0800e09c  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018cc  0800e09c  0000f8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d82  00000000  00000000  0000f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eac  00000000  00000000  00025f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00029e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001079  00000000  00000000  0002b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b31c  00000000  00000000  0002c409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b24c  00000000  00000000  00047725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009137d  00000000  00000000  00062971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3cee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000f3d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fa068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c738 	.word	0x0800c738

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c738 	.word	0x0800c738

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <int_to_str>:

    return ERROR_NONE;
}


void int_to_str(int num, char *str) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <int_to_str+0x60>
        str[0] = '0';
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2230      	movs	r2, #48	@ 0x30
 8000aa0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e039      	b.n	8000b20 <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <int_to_str+0xa0>)
 8000ab0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab4:	1099      	asrs	r1, r3, #2
 8000ab6:	17d3      	asrs	r3, r2, #31
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad1      	subs	r1, r2, r3
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	1c59      	adds	r1, r3, #1
 8000aca:	61f9      	str	r1, [r7, #28]
 8000acc:	3230      	adds	r2, #48	@ 0x30
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <int_to_str+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1092      	asrs	r2, r2, #2
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dcde      	bgt.n	8000aac <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 8000af2:	e00b      	b.n	8000b0c <int_to_str+0x84>
        str[j++] = tmp[i];
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	61ba      	str	r2, [r7, #24]
 8000afa:	461a      	mov	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dcee      	bgt.n	8000af4 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	66666667 	.word	0x66666667

08000b2c <Is_Flash_Valid>:

char Is_Flash_Valid() {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
    // Чтение метки из Flash
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <Is_Flash_Valid+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	607b      	str	r3, [r7, #4]
    if(magic == FLASH_MAGIC_NUMBER){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <Is_Flash_Valid+0x28>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <Is_Flash_Valid+0x18>
    	return 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <Is_Flash_Valid+0x1a>
    }else{
    	return 0;
 8000b44:	2300      	movs	r3, #0
    }
    //return (magic == FLASH_MAGIC_NUMBER);
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	0801fc00 	.word	0x0801fc00
 8000b54:	deadbeef 	.word	0xdeadbeef

08000b58 <Read_Flash_Array>:

void Read_Flash_Array(int32_t *output) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    if (!Is_Flash_Valid()) {
 8000b60:	f7ff ffe4 	bl	8000b2c <Is_Flash_Valid>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <Read_Flash_Array+0x1e>
        // Данные не валидны (первый запуск)
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f00a fa38 	bl	800afe4 <memset>
        return;
 8000b74:	e008      	b.n	8000b88 <Read_Flash_Array+0x30>
    }

    // Чтение данных (пропускаем метку)
    FlashData *flash_data = (FlashData*)FLASH_USER_START_ADDR;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <Read_Flash_Array+0x38>)
 8000b78:	60fb      	str	r3, [r7, #12]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f00a fa74 	bl	800b070 <memcpy>
}
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	0801fc00 	.word	0x0801fc00

08000b94 <Write_Flash_Array>:

void Write_Flash_Array(int32_t *data) {
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b090      	sub	sp, #64	@ 0x40
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000b9e:	f001 fc5f 	bl	8002460 <HAL_FLASH_Unlock>

    // Стирание страницы
    FLASH_EraseInitTypeDef erase;
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    erase.PageAddress = FLASH_USER_START_ADDR;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    erase.NbPages = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000bae:	f107 0218 	add.w	r2, r7, #24
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd39 	bl	8002630 <HAL_FLASHEx_Erase>

    // Запись структуры (метка + данные)
    FlashData flash_data;
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <Write_Flash_Array+0xb8>)
 8000bc0:	60bb      	str	r3, [r7, #8]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	220c      	movs	r2, #12
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a fa4f 	bl	800b070 <memcpy>

    // Запись по 16-битным полусловам
    uint32_t addr = FLASH_USER_START_ADDR;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t *ptr = (uint32_t*)&flash_data;
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t size = sizeof(FlashData) / 2; // Количество 16-битных слов
 8000bdc:	2308      	movs	r3, #8
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < size; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000be4:	e024      	b.n	8000c30 <Write_Flash_Array+0x9c>
        uint32_t value = ptr[i];
 8000be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4693      	mov	fp, r2
 8000bfa:	fa1f f48a 	uxth.w	r4, sl
 8000bfe:	2500      	movs	r5, #0
 8000c00:	4622      	mov	r2, r4
 8000c02:	462b      	mov	r3, r5
 8000c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000c06:	2001      	movs	r0, #1
 8000c08:	f001 fbba 	bl	8002380 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c0e:	1c99      	adds	r1, r3, #2
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	0c1b      	lsrs	r3, r3, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	4698      	mov	r8, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fbae 	bl	8002380 <HAL_FLASH_Program>
        addr += 4;
 8000c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c26:	3304      	adds	r3, #4
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint32_t i = 0; i < size; i++) {
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3d6      	bcc.n	8000be6 <Write_Flash_Array+0x52>
    }

    HAL_FLASH_Lock();
 8000c38:	f001 fc38 	bl	80024ac <HAL_FLASH_Lock>
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	@ 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c46:	bf00      	nop
 8000c48:	0801fc00 	.word	0x0801fc00
 8000c4c:	deadbeef 	.word	0xdeadbeef

08000c50 <get_encoder>:


int get_encoder(){
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <get_encoder+0x18>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <get_encoder+0xe>
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	109b      	asrs	r3, r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <set_encoder>:

void set_encoder(int e){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	009a      	lsls	r2, r3, #2
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <set_encoder+0x1c>)
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <print_interface_mode0>:


void print_interface_mode0(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 f995 	bl	8001fc4 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 f848 	bl	8001d30 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <print_interface_mode0+0xb0>)
 8000caa:	f001 f965 	bl	8001f78 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	9200      	str	r2, [sp, #0]
 8000cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb6:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cb8:	f001 f95e 	bl	8001f78 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	9200      	str	r2, [sp, #0]
 8000cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc4:	481f      	ldr	r0, [pc, #124]	@ (8000d44 <print_interface_mode0+0xb8>)
 8000cc6:	f001 f957 	bl	8001f78 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000cca:	210a      	movs	r1, #10
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 f979 	bl	8001fc4 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cda:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <print_interface_mode0+0xbc>)
 8000cdc:	f001 f94c 	bl	8001f78 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cea:	f001 f945 	bl	8001f78 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <print_interface_mode0+0xc4>)
 8000d00:	f001 f93a 	bl	8001f78 <ssd1306_WriteString>
 8000d04:	e012      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d107      	bne.n	8000d1e <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d16:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <print_interface_mode0+0xc8>)
 8000d18:	f001 f92e 	bl	8001f78 <ssd1306_WriteString>
 8000d1c:	e006      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d26:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <print_interface_mode0+0xcc>)
 8000d28:	f001 f926 	bl	8001f78 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000d2c:	f001 f818 	bl	8001d60 <ssd1306_UpdateScreen>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800dd20 	.word	0x0800dd20
 8000d3c:	20000338 	.word	0x20000338
 8000d40:	0800c750 	.word	0x0800c750
 8000d44:	2000033f 	.word	0x2000033f
 8000d48:	20000346 	.word	0x20000346
 8000d4c:	2000034e 	.word	0x2000034e
 8000d50:	0800c754 	.word	0x0800c754
 8000d54:	0800c758 	.word	0x0800c758
 8000d58:	0800c75c 	.word	0x0800c75c

08000d5c <print_interface_mode1>:

void print_interface_mode1(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 f92d 	bl	8001fc4 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 ffe0 	bl	8001d30 <ssd1306_Fill>
	if(choiced_num==0){
 8000d70:	4b69      	ldr	r3, [pc, #420]	@ (8000f18 <print_interface_mode1+0x1bc>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d139      	bne.n	8000dec <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000d78:	4b68      	ldr	r3, [pc, #416]	@ (8000f1c <print_interface_mode1+0x1c0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	4a66      	ldr	r2, [pc, #408]	@ (8000f20 <print_interface_mode1+0x1c4>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9e1 	bl	8000150 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 8000d98:	4b62      	ldr	r3, [pc, #392]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	4861      	ldr	r0, [pc, #388]	@ (8000f28 <print_interface_mode1+0x1cc>)
 8000da2:	f001 f8e9 	bl	8001f78 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	ddf2      	ble.n	8000d98 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <print_interface_mode1+0x1c0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	4a58      	ldr	r2, [pc, #352]	@ (8000f20 <print_interface_mode1+0x1c4>)
 8000dc0:	1898      	adds	r0, r3, r2
 8000dc2:	4b58      	ldr	r3, [pc, #352]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dca:	f001 f8d5 	bl	8001f78 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 8000dce:	4b55      	ldr	r3, [pc, #340]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd6:	4855      	ldr	r0, [pc, #340]	@ (8000f2c <print_interface_mode1+0x1d0>)
 8000dd8:	f001 f8ce 	bl	8001f78 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000ddc:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <print_interface_mode1+0x1d4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	9200      	str	r2, [sp, #0]
 8000de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de4:	4853      	ldr	r0, [pc, #332]	@ (8000f34 <print_interface_mode1+0x1d8>)
 8000de6:	f001 f8c7 	bl	8001f78 <ssd1306_WriteString>
 8000dea:	e08f      	b.n	8000f0c <print_interface_mode1+0x1b0>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8000dec:	4b4b      	ldr	r3, [pc, #300]	@ (8000f1c <print_interface_mode1+0x1c0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	4a49      	ldr	r2, [pc, #292]	@ (8000f20 <print_interface_mode1+0x1c4>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8000e06:	2305      	movs	r3, #5
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e017      	b.n	8000e3c <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8000e0c:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <print_interface_mode1+0x1bc>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d107      	bne.n	8000e28 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8000e18:	4b45      	ldr	r3, [pc, #276]	@ (8000f30 <print_interface_mode1+0x1d4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	4841      	ldr	r0, [pc, #260]	@ (8000f28 <print_interface_mode1+0x1cc>)
 8000e22:	f001 f8a9 	bl	8001f78 <ssd1306_WriteString>
 8000e26:	e006      	b.n	8000e36 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8000e28:	4b3e      	ldr	r3, [pc, #248]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	9200      	str	r2, [sp, #0]
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	483d      	ldr	r0, [pc, #244]	@ (8000f28 <print_interface_mode1+0x1cc>)
 8000e32:	f001 f8a1 	bl	8001f78 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dae3      	bge.n	8000e0c <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e034      	b.n	8000eb4 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	4a32      	ldr	r2, [pc, #200]	@ (8000f18 <print_interface_mode1+0x1bc>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d115      	bne.n	8000e84 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e58:	4b30      	ldr	r3, [pc, #192]	@ (8000f1c <print_interface_mode1+0x1c0>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a30      	ldr	r2, [pc, #192]	@ (8000f20 <print_interface_mode1+0x1c4>)
 8000e60:	460b      	mov	r3, r1
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	441a      	add	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	713b      	strb	r3, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 8000e74:	4b2e      	ldr	r3, [pc, #184]	@ (8000f30 <print_interface_mode1+0x1d4>)
 8000e76:	1d38      	adds	r0, r7, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7e:	f001 f87b 	bl	8001f78 <ssd1306_WriteString>
 8000e82:	e014      	b.n	8000eae <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <print_interface_mode1+0x1c0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4a25      	ldr	r2, [pc, #148]	@ (8000f20 <print_interface_mode1+0x1c4>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	441a      	add	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	703b      	strb	r3, [r7, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 8000ea0:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eaa:	f001 f865 	bl	8001f78 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	897b      	ldrh	r3, [r7, #10]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbc6      	blt.n	8000e4a <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec4:	4819      	ldr	r0, [pc, #100]	@ (8000f2c <print_interface_mode1+0x1d0>)
 8000ec6:	f001 f857 	bl	8001f78 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed2:	4818      	ldr	r0, [pc, #96]	@ (8000f34 <print_interface_mode1+0x1d8>)
 8000ed4:	f001 f850 	bl	8001f78 <ssd1306_WriteString>
		if(choice==1){
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <print_interface_mode1+0x1dc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d115      	bne.n	8000f0c <print_interface_mode1+0x1b0>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <print_interface_mode1+0x1bc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f1c3 0306 	rsb	r3, r3, #6
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2112      	movs	r1, #18
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f863 	bl	8001fc4 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <print_interface_mode1+0x1c8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f06:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <print_interface_mode1+0x1e0>)
 8000f08:	f001 f836 	bl	8001f78 <ssd1306_WriteString>
		}


	}
	ssd1306_UpdateScreen();
 8000f0c:	f000 ff28 	bl	8001d60 <ssd1306_UpdateScreen>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000034d 	.word	0x2000034d
 8000f1c:	2000034e 	.word	0x2000034e
 8000f20:	20000338 	.word	0x20000338
 8000f24:	0800dd20 	.word	0x0800dd20
 8000f28:	0800c760 	.word	0x0800c760
 8000f2c:	0800c750 	.word	0x0800c750
 8000f30:	0800dd2c 	.word	0x0800dd2c
 8000f34:	0800c764 	.word	0x0800c764
 8000f38:	20000334 	.word	0x20000334
 8000f3c:	0800c76c 	.word	0x0800c76c

08000f40 <int_mode_0>:

void int_mode_0(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000f44:	2101      	movs	r1, #1
 8000f46:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <int_mode_0+0x7c>)
 8000f48:	f001 fd9e 	bl	8002a88 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <int_mode_0+0x18>
		choice=1;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <int_mode_0+0x80>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8000f58:	bf00      	nop
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <int_mode_0+0x7c>)
 8000f5e:	f001 fd93 	bl	8002a88 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f8      	beq.n	8000f5a <int_mode_0+0x1a>
	if(choice==0){
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <int_mode_0+0x80>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d111      	bne.n	8000f94 <int_mode_0+0x54>
		choiced_channel=get_encoder()%3;
 8000f70:	f7ff fe6e 	bl	8000c50 <get_encoder>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <int_mode_0+0x84>)
 8000f78:	fb83 3102 	smull	r3, r1, r3, r2
 8000f7c:	17d3      	asrs	r3, r2, #31
 8000f7e:	1ac9      	subs	r1, r1, r3
 8000f80:	460b      	mov	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	440b      	add	r3, r1
 8000f86:	1ad1      	subs	r1, r2, r3
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <int_mode_0+0x88>)
 8000f8c:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 8000f8e:	f7ff fe7d 	bl	8000c8c <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 8000f92:	e011      	b.n	8000fb8 <int_mode_0+0x78>
	}else if(choice==1){
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <int_mode_0+0x80>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10d      	bne.n	8000fb8 <int_mode_0+0x78>
		set_encoder(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fe65 	bl	8000c6c <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <int_mode_0+0x8c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <int_mode_0+0x90>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
		choice=0;
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <int_mode_0+0x80>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8000fb4:	f7ff fed2 	bl	8000d5c <print_interface_mode1>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010800 	.word	0x40010800
 8000fc0:	20000334 	.word	0x20000334
 8000fc4:	55555556 	.word	0x55555556
 8000fc8:	2000034e 	.word	0x2000034e
 8000fcc:	2000034d 	.word	0x2000034d
 8000fd0:	2000034f 	.word	0x2000034f

08000fd4 <min_freq>:



void min_freq(){
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <min_freq+0x38>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <min_freq+0x3c>)
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2238      	movs	r2, #56	@ 0x38
 8000fea:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <min_freq+0x38>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <min_freq+0x3c>)
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000034e 	.word	0x2000034e
 8001010:	20000338 	.word	0x20000338

08001014 <max_freq>:

void max_freq(){
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 8001018:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <max_freq+0xa4>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <max_freq+0xa8>)
 8001020:	460b      	mov	r3, r1
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4413      	add	r3, r2
 8001028:	2231      	movs	r2, #49	@ 0x31
 800102a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <max_freq+0xa4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4a22      	ldr	r2, [pc, #136]	@ (80010bc <max_freq+0xa8>)
 8001034:	460b      	mov	r3, r1
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a5b      	subs	r3, r3, r1
 800103a:	4413      	add	r3, r2
 800103c:	3301      	adds	r3, #1
 800103e:	2236      	movs	r2, #54	@ 0x36
 8001040:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <max_freq+0xa4>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <max_freq+0xa8>)
 800104a:	460b      	mov	r3, r1
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a5b      	subs	r3, r3, r1
 8001050:	4413      	add	r3, r2
 8001052:	3302      	adds	r3, #2
 8001054:	2230      	movs	r2, #48	@ 0x30
 8001056:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <max_freq+0xa4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <max_freq+0xa8>)
 8001060:	460b      	mov	r3, r1
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a5b      	subs	r3, r3, r1
 8001066:	4413      	add	r3, r2
 8001068:	3303      	adds	r3, #3
 800106a:	2230      	movs	r2, #48	@ 0x30
 800106c:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <max_freq+0xa4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <max_freq+0xa8>)
 8001076:	460b      	mov	r3, r1
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	1a5b      	subs	r3, r3, r1
 800107c:	4413      	add	r3, r2
 800107e:	3304      	adds	r3, #4
 8001080:	2230      	movs	r2, #48	@ 0x30
 8001082:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <max_freq+0xa4>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <max_freq+0xa8>)
 800108c:	460b      	mov	r3, r1
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	1a5b      	subs	r3, r3, r1
 8001092:	4413      	add	r3, r2
 8001094:	3305      	adds	r3, #5
 8001096:	2230      	movs	r2, #48	@ 0x30
 8001098:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <max_freq+0xa4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <max_freq+0xa8>)
 80010a2:	460b      	mov	r3, r1
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	4413      	add	r3, r2
 80010aa:	3306      	adds	r3, #6
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]

}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	2000034e 	.word	0x2000034e
 80010bc:	20000338 	.word	0x20000338

080010c0 <int_mode_1>:

void int_mode_1(){
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
		set_encoder(choiced_num);
	}

*/

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 80010c6:	2101      	movs	r1, #1
 80010c8:	4896      	ldr	r0, [pc, #600]	@ (8001324 <int_mode_1+0x264>)
 80010ca:	f001 fcdd 	bl	8002a88 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d11b      	bne.n	800110c <int_mode_1+0x4c>
		if(choice==0){
 80010d4:	4b94      	ldr	r3, [pc, #592]	@ (8001328 <int_mode_1+0x268>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10f      	bne.n	80010fc <int_mode_1+0x3c>

			choice=1;
 80010dc:	4b92      	ldr	r3, [pc, #584]	@ (8001328 <int_mode_1+0x268>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 80010e2:	4b92      	ldr	r3, [pc, #584]	@ (800132c <int_mode_1+0x26c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d010      	beq.n	800110c <int_mode_1+0x4c>
				prev_encoder=1000;
 80010ea:	4b91      	ldr	r3, [pc, #580]	@ (8001330 <int_mode_1+0x270>)
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f6:	f7ff fdb9 	bl	8000c6c <set_encoder>
 80010fa:	e007      	b.n	800110c <int_mode_1+0x4c>

			}
		}else{
			choice=0;
 80010fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001328 <int_mode_1+0x268>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 8001102:	4b8a      	ldr	r3, [pc, #552]	@ (800132c <int_mode_1+0x26c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fdb0 	bl	8000c6c <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 800110c:	bf00      	nop
 800110e:	2101      	movs	r1, #1
 8001110:	4884      	ldr	r0, [pc, #528]	@ (8001324 <int_mode_1+0x264>)
 8001112:	f001 fcb9 	bl	8002a88 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f8      	beq.n	800110e <int_mode_1+0x4e>
	if(choice==0){
 800111c:	4b82      	ldr	r3, [pc, #520]	@ (8001328 <int_mode_1+0x268>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d113      	bne.n	800114c <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 8001124:	f7ff fd94 	bl	8000c50 <get_encoder>
 8001128:	4602      	mov	r2, r0
 800112a:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <int_mode_1+0x274>)
 800112c:	fb83 1302 	smull	r1, r3, r3, r2
 8001130:	4413      	add	r3, r2
 8001132:	1099      	asrs	r1, r3, #2
 8001134:	17d3      	asrs	r3, r2, #31
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	460b      	mov	r3, r1
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a5b      	subs	r3, r3, r1
 800113e:	1ad1      	subs	r1, r2, r3
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	4b7a      	ldr	r3, [pc, #488]	@ (800132c <int_mode_1+0x26c>)
 8001144:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001146:	f7ff fe09 	bl	8000d5c <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
			print_interface_mode1();

		}
	}
}
 800114a:	e0e7      	b.n	800131c <int_mode_1+0x25c>
	}else if(choice==1){
 800114c:	4b76      	ldr	r3, [pc, #472]	@ (8001328 <int_mode_1+0x268>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	f040 80e3 	bne.w	800131c <int_mode_1+0x25c>
		if(choiced_num==0){
 8001156:	4b75      	ldr	r3, [pc, #468]	@ (800132c <int_mode_1+0x26c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d134      	bne.n	80011c8 <int_mode_1+0x108>
			choice=0;
 800115e:	4b72      	ldr	r3, [pc, #456]	@ (8001328 <int_mode_1+0x268>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 8001164:	4b74      	ldr	r3, [pc, #464]	@ (8001338 <int_mode_1+0x278>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			if(freq[choiced_channel]<8){
 800116a:	4b74      	ldr	r3, [pc, #464]	@ (800133c <int_mode_1+0x27c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	4b73      	ldr	r3, [pc, #460]	@ (8001340 <int_mode_1+0x280>)
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	2b07      	cmp	r3, #7
 8001178:	dc09      	bgt.n	800118e <int_mode_1+0xce>
				freq[choiced_channel]=8;
 800117a:	4b70      	ldr	r3, [pc, #448]	@ (800133c <int_mode_1+0x27c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	4b6f      	ldr	r3, [pc, #444]	@ (8001340 <int_mode_1+0x280>)
 8001182:	2208      	movs	r2, #8
 8001184:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 8001188:	f7ff ff24 	bl	8000fd4 <min_freq>
 800118c:	e011      	b.n	80011b2 <int_mode_1+0xf2>
			}else if(freq[choiced_channel]>160000){
 800118e:	4b6b      	ldr	r3, [pc, #428]	@ (800133c <int_mode_1+0x27c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b6a      	ldr	r3, [pc, #424]	@ (8001340 <int_mode_1+0x280>)
 8001196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119a:	4a6a      	ldr	r2, [pc, #424]	@ (8001344 <int_mode_1+0x284>)
 800119c:	4293      	cmp	r3, r2
 800119e:	dd08      	ble.n	80011b2 <int_mode_1+0xf2>
				freq[choiced_channel]=160000;
 80011a0:	4b66      	ldr	r3, [pc, #408]	@ (800133c <int_mode_1+0x27c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4b66      	ldr	r3, [pc, #408]	@ (8001340 <int_mode_1+0x280>)
 80011a8:	4a66      	ldr	r2, [pc, #408]	@ (8001344 <int_mode_1+0x284>)
 80011aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 80011ae:	f7ff ff31 	bl	8001014 <max_freq>
			Write_Flash_Array(freq);
 80011b2:	4863      	ldr	r0, [pc, #396]	@ (8001340 <int_mode_1+0x280>)
 80011b4:	f7ff fcee 	bl	8000b94 <Write_Flash_Array>
			set_encoder(choiced_channel);
 80011b8:	4b60      	ldr	r3, [pc, #384]	@ (800133c <int_mode_1+0x27c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd55 	bl	8000c6c <set_encoder>
			print_interface_mode0();
 80011c2:	f7ff fd63 	bl	8000c8c <print_interface_mode0>
}
 80011c6:	e0a9      	b.n	800131c <int_mode_1+0x25c>
			int delta = get_encoder();
 80011c8:	f7ff fd42 	bl	8000c50 <get_encoder>
 80011cc:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);
 80011ce:	4b58      	ldr	r3, [pc, #352]	@ (8001330 <int_mode_1+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f914 	bl	8000404 <__aeabi_i2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	4b52      	ldr	r3, [pc, #328]	@ (800132c <int_mode_1+0x26c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f90c 	bl	8000404 <__aeabi_i2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4954      	ldr	r1, [pc, #336]	@ (8001348 <int_mode_1+0x288>)
 80011f6:	f00a fb95 	bl	800b924 <pow>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <int_mode_1+0x27c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b4a      	ldr	r3, [pc, #296]	@ (8001340 <int_mode_1+0x280>)
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8f2 	bl	8000404 <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7fe ffa0 	bl	800016c <__adddf3>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4942      	ldr	r1, [pc, #264]	@ (800133c <int_mode_1+0x27c>)
 8001232:	7809      	ldrb	r1, [r1, #0]
 8001234:	460c      	mov	r4, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fbfd 	bl	8000a38 <__aeabi_d2iz>
 800123e:	4603      	mov	r3, r0
 8001240:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <int_mode_1+0x280>)
 8001242:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <int_mode_1+0x27c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <int_mode_1+0x280>)
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	2b00      	cmp	r3, #0
 8001254:	da10      	bge.n	8001278 <int_mode_1+0x1b8>
				freq[choiced_channel]=1000000+freq[choiced_channel];
 8001256:	4b39      	ldr	r3, [pc, #228]	@ (800133c <int_mode_1+0x27c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <int_mode_1+0x280>)
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	4a36      	ldr	r2, [pc, #216]	@ (800133c <int_mode_1+0x27c>)
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	4611      	mov	r1, r2
 8001268:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 800126c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001270:	4a33      	ldr	r2, [pc, #204]	@ (8001340 <int_mode_1+0x280>)
 8001272:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001276:	e03a      	b.n	80012ee <int_mode_1+0x22e>
			}else if(freq[choiced_channel]>999999){
 8001278:	4b30      	ldr	r3, [pc, #192]	@ (800133c <int_mode_1+0x27c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <int_mode_1+0x280>)
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	4a31      	ldr	r2, [pc, #196]	@ (800134c <int_mode_1+0x28c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	dd31      	ble.n	80012ee <int_mode_1+0x22e>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <int_mode_1+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8b6 	bl	8000404 <__aeabi_i2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	4b23      	ldr	r3, [pc, #140]	@ (800132c <int_mode_1+0x26c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8ae 	bl	8000404 <__aeabi_i2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	f04f 0000 	mov.w	r0, #0
 80012b0:	4925      	ldr	r1, [pc, #148]	@ (8001348 <int_mode_1+0x288>)
 80012b2:	f00a fb37 	bl	800b924 <pow>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f90b 	bl	80004d8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <int_mode_1+0x290>)
 80012d0:	f7fe ff4c 	bl	800016c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4918      	ldr	r1, [pc, #96]	@ (800133c <int_mode_1+0x27c>)
 80012da:	7809      	ldrb	r1, [r1, #0]
 80012dc:	460c      	mov	r4, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fba9 	bl	8000a38 <__aeabi_d2iz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <int_mode_1+0x280>)
 80012ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 80012ee:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <int_mode_1+0x270>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <int_mode_1+0x27c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <int_mode_1+0x280>)
 80012fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <int_mode_1+0x27c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	460b      	mov	r3, r1
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	1a5b      	subs	r3, r3, r1
 800130c:	4911      	ldr	r1, [pc, #68]	@ (8001354 <int_mode_1+0x294>)
 800130e:	440b      	add	r3, r1
 8001310:	4619      	mov	r1, r3
 8001312:	4610      	mov	r0, r2
 8001314:	f7ff fbb8 	bl	8000a88 <int_to_str>
			print_interface_mode1();
 8001318:	f7ff fd20 	bl	8000d5c <print_interface_mode1>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bdb0      	pop	{r4, r5, r7, pc}
 8001324:	40010800 	.word	0x40010800
 8001328:	20000334 	.word	0x20000334
 800132c:	2000034d 	.word	0x2000034d
 8001330:	20000330 	.word	0x20000330
 8001334:	92492493 	.word	0x92492493
 8001338:	2000034f 	.word	0x2000034f
 800133c:	2000034e 	.word	0x2000034e
 8001340:	20000324 	.word	0x20000324
 8001344:	00027100 	.word	0x00027100
 8001348:	40240000 	.word	0x40240000
 800134c:	000f423f 	.word	0x000f423f
 8001350:	401c0000 	.word	0x401c0000
 8001354:	20000338 	.word	0x20000338

08001358 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d108      	bne.n	800137c <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	if(interface_mode==0){
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x20>
    		int_mode_0();
 8001372:	f7ff fde5 	bl	8000f40 <int_mode_0>
    	}else{
    		int_mode_1();
    	}
    }
}
 8001376:	e001      	b.n	800137c <HAL_TIM_PeriodElapsedCallback+0x24>
    		int_mode_1();
 8001378:	f7ff fea2 	bl	80010c0 <int_mode_1>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000034f 	.word	0x2000034f

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fe64 	bl	8002058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f86e 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 f9d4 	bl	8001740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001398:	f000 f8c4 	bl	8001524 <MX_I2C1_Init>
  MX_TIM1_Init();
 800139c:	f000 f91e 	bl	80015dc <MX_TIM1_Init>
  MX_I2C2_Init();
 80013a0:	f000 f8ee 	bl	8001580 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013a4:	f000 f972 	bl	800168c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80013a8:	f008 ff90 	bl	800a2cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013ac:	213c      	movs	r1, #60	@ 0x3c
 80013ae:	4824      	ldr	r0, [pc, #144]	@ (8001440 <main+0xb8>)
 80013b0:	f004 fb9b 	bl	8005aea <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 80013b4:	f000 fc52 	bl	8001c5c <ssd1306_Init>
  //si5351_Init();
  set_encoder(0);//выставление энкодера в 0
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fc57 	bl	8000c6c <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <main+0xbc>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 80013c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <main+0xbc>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	605a      	str	r2, [r3, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <main+0xbc>)
 80013cc:	2208      	movs	r2, #8
 80013ce:	609a      	str	r2, [r3, #8]
      if (Is_Flash_Valid()==0) {
 80013d0:	f7ff fbac 	bl	8000b2c <Is_Flash_Valid>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <main+0x5a>
          Write_Flash_Array(freq);
 80013da:	481a      	ldr	r0, [pc, #104]	@ (8001444 <main+0xbc>)
 80013dc:	f7ff fbda 	bl	8000b94 <Write_Flash_Array>
 80013e0:	e002      	b.n	80013e8 <main+0x60>
      }else{
    	  Read_Flash_Array(freq);
 80013e2:	4818      	ldr	r0, [pc, #96]	@ (8001444 <main+0xbc>)
 80013e4:	f7ff fbb8 	bl	8000b58 <Read_Flash_Array>
      }
      choice=0;//переменная для считывания был ли нажат энкодер
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <main+0xc0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
      prev_choice=0;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <main+0xc4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <main+0xbc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4915      	ldr	r1, [pc, #84]	@ (8001450 <main+0xc8>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb44 	bl	8000a88 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001400:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <main+0xbc>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4913      	ldr	r1, [pc, #76]	@ (8001454 <main+0xcc>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb3e 	bl	8000a88 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <main+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4911      	ldr	r1, [pc, #68]	@ (8001458 <main+0xd0>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb38 	bl	8000a88 <int_to_str>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <main+0xd4>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <main+0xd8>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <main+0xdc>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
      prev_encoder=8;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <main+0xe0>)
 800142c:	2208      	movs	r2, #8
 800142e:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 8001430:	f7ff fc2c 	bl	8000c8c <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <main+0xe4>)
 8001436:	f004 fa15 	bl	8005864 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <main+0xb2>
 800143e:	bf00      	nop
 8001440:	20000294 	.word	0x20000294
 8001444:	20000324 	.word	0x20000324
 8001448:	20000334 	.word	0x20000334
 800144c:	20000335 	.word	0x20000335
 8001450:	20000346 	.word	0x20000346
 8001454:	2000033f 	.word	0x2000033f
 8001458:	20000338 	.word	0x20000338
 800145c:	2000034d 	.word	0x2000034d
 8001460:	2000034e 	.word	0x2000034e
 8001464:	2000034f 	.word	0x2000034f
 8001468:	20000330 	.word	0x20000330
 800146c:	200002dc 	.word	0x200002dc

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	@ 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	2228      	movs	r2, #40	@ 0x28
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f009 fdb0 	bl	800afe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fd1a 	bl	8004f00 <HAL_RCC_OscConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014d2:	f000 f99b 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	230f      	movs	r3, #15
 80014d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80014de:	2390      	movs	r3, #144	@ 0x90
 80014e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2101      	movs	r1, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 ff87 	bl	8005404 <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014fc:	f000 f986 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001500:	2310      	movs	r3, #16
 8001502:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001504:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001508:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4618      	mov	r0, r3
 800150e:	f004 f8f3 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001518:	f000 f978 	bl	800180c <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3750      	adds	r7, #80	@ 0x50
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	@ (8001578 <MX_I2C1_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <MX_I2C1_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_I2C1_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_I2C1_Init+0x50>)
 8001562:	f001 fac1 	bl	8002ae8 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 f94e 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001ec 	.word	0x200001ec
 8001578:	40005400 	.word	0x40005400
 800157c:	000186a0 	.word	0x000186a0

08001580 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_I2C2_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <MX_I2C2_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_I2C2_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MX_I2C2_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_I2C2_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_I2C2_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_I2C2_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_I2C2_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_I2C2_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_I2C2_Init+0x50>)
 80015be:	f001 fa93 	bl	8002ae8 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f000 f920 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000240 	.word	0x20000240
 80015d4:	40005800 	.word	0x40005800
 80015d8:	000186a0 	.word	0x000186a0

080015dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	@ 0x30
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	2224      	movs	r2, #36	@ 0x24
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f009 fcfa 	bl	800afe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <MX_TIM1_Init+0xa8>)
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <MX_TIM1_Init+0xac>)
 80015fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <MX_TIM1_Init+0xa8>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <MX_TIM1_Init+0xa8>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800160a:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_TIM1_Init+0xa8>)
 800160c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001610:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <MX_TIM1_Init+0xa8>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_TIM1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <MX_TIM1_Init+0xa8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001624:	2303      	movs	r3, #3
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800162c:	2301      	movs	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <MX_TIM1_Init+0xa8>)
 8001650:	f004 f9a9 	bl	80059a6 <HAL_TIM_Encoder_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800165a:	f000 f8d7 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <MX_TIM1_Init+0xa8>)
 800166c:	f004 febc 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001676:	f000 f8c9 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	@ 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000294 	.word	0x20000294
 8001688:	40012c00 	.word	0x40012c00

0800168c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 299;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016b8:	f240 122b 	movw	r2, #299	@ 0x12b
 80016bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016c6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80016ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d8:	4818      	ldr	r0, [pc, #96]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016da:	f004 f915 	bl	8005908 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 f892 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_TIM2_Init+0xb0>)
 80016f8:	f004 fe76 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001702:	f000 f883 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	@ 0x60
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM2_Init+0xb0>)
 800171e:	f004 fb63 	bl	8005de8 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001728:	f000 f870 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800172c:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM2_Init+0xb0>)
 800172e:	f000 f975 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002dc 	.word	0x200002dc

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <MX_GPIO_Init+0xc0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <MX_GPIO_Init+0xc0>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <MX_GPIO_Init+0xc0>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <MX_GPIO_Init+0xc0>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a23      	ldr	r2, [pc, #140]	@ (8001800 <MX_GPIO_Init+0xc0>)
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <MX_GPIO_Init+0xc0>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <MX_GPIO_Init+0xc0>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <MX_GPIO_Init+0xc0>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_GPIO_Init+0xc0>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <MX_GPIO_Init+0xc0>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <MX_GPIO_Init+0xc0>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_GPIO_Init+0xc0>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017ba:	4812      	ldr	r0, [pc, #72]	@ (8001804 <MX_GPIO_Init+0xc4>)
 80017bc:	f001 f97b 	bl	8002ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	480a      	ldr	r0, [pc, #40]	@ (8001804 <MX_GPIO_Init+0xc4>)
 80017da:	f000 ffd1 	bl	8002780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017de:	2301      	movs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_GPIO_Init+0xc8>)
 80017f2:	f000 ffc5 	bl	8002780 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	40011000 	.word	0x40011000
 8001808:	40010800 	.word	0x40010800

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_MspInit+0x5c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_MspInit+0x5c>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_MspInit+0x5c>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_MspInit+0x5c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_MspInit+0x60>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_MspInit+0x60>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000

0800187c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <HAL_I2C_MspInit+0xc8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d124      	bne.n	80018e6 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b4:	23c0      	movs	r3, #192	@ 0xc0
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b8:	2312      	movs	r3, #18
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4821      	ldr	r0, [pc, #132]	@ (800194c <HAL_I2C_MspInit+0xd0>)
 80018c8:	f000 ff5a 	bl	8002780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d6:	61d3      	str	r3, [r2, #28]
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018e4:	e029      	b.n	800193a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <HAL_I2C_MspInit+0xd4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d124      	bne.n	800193a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001908:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4619      	mov	r1, r3
 800191c:	480b      	ldr	r0, [pc, #44]	@ (800194c <HAL_I2C_MspInit+0xd0>)
 800191e:	f000 ff2f 	bl	8002780 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 8001928:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_I2C_MspInit+0xcc>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	@ 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40005400 	.word	0x40005400
 8001948:	40021000 	.word	0x40021000
 800194c:	40010c00 	.word	0x40010c00
 8001950:	40005800 	.word	0x40005800

08001954 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a16      	ldr	r2, [pc, #88]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d124      	bne.n	80019be <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 800197a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x78>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <HAL_TIM_Encoder_MspInit+0x7c>)
 80019ba:	f000 fee1 	bl	8002780 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010800 	.word	0x40010800

080019d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e4:	d113      	bne.n	8001a0e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_TIM_PWM_MspInit+0x44>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_TIM_PWM_MspInit+0x44>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_TIM_PWM_MspInit+0x44>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	201c      	movs	r0, #28
 8001a04:	f000 fc85 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a08:	201c      	movs	r0, #28
 8001a0a:	f000 fc9e 	bl	800234a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3a:	d12a      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <HAL_TIM_MspPostInit+0x80>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <HAL_TIM_MspPostInit+0x80>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_TIM_MspPostInit+0x80>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <HAL_TIM_MspPostInit+0x84>)
 8001a6a:	f000 fe89 	bl	8002780 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_TIM_MspPostInit+0x88>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <HAL_TIM_MspPostInit+0x88>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 faf4 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b06:	f001 fdb7 	bl	8003678 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000128c 	.word	0x2000128c

08001b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM2_IRQHandler+0x10>)
 8001b1a:	f004 f874 	bl	8005c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200002dc 	.word	0x200002dc

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f009 fa5e 	bl	800b018 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20005000 	.word	0x20005000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	20000350 	.word	0x20000350
 8001b90:	200018d0 	.word	0x200018d0

08001b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff fff8 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480b      	ldr	r0, [pc, #44]	@ (8001bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ba6:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bbc:	4c09      	ldr	r4, [pc, #36]	@ (8001be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f009 fa2b 	bl	800b024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bce:	f7ff fbdb 	bl	8001388 <main>
  bx lr
 8001bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001bdc:	0800ded0 	.word	0x0800ded0
  ldr r2, =_sbss
 8001be0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001be4:	200018cc 	.word	0x200018cc

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>

08001bea <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	2200      	movs	r2, #0
 8001c14:	2178      	movs	r1, #120	@ 0x78
 8001c16:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <ssd1306_WriteCommand+0x2c>)
 8001c18:	f001 f8aa 	bl	8002d70 <HAL_I2C_Mem_Write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000240 	.word	0x20000240

08001c28 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	2240      	movs	r2, #64	@ 0x40
 8001c46:	2178      	movs	r1, #120	@ 0x78
 8001c48:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <ssd1306_WriteData+0x30>)
 8001c4a:	f001 f891 	bl	8002d70 <HAL_I2C_Mem_Write>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000240 	.word	0x20000240

08001c5c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c60:	f7ff ffc3 	bl	8001bea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c64:	2064      	movs	r0, #100	@ 0x64
 8001c66:	f000 fa59 	bl	800211c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f9d6 	bl	800201c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c70:	2020      	movs	r0, #32
 8001c72:	f7ff ffc1 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ffbe 	bl	8001bf8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c7c:	20b0      	movs	r0, #176	@ 0xb0
 8001c7e:	f7ff ffbb 	bl	8001bf8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c82:	20c8      	movs	r0, #200	@ 0xc8
 8001c84:	f7ff ffb8 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ffb5 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c8e:	2010      	movs	r0, #16
 8001c90:	f7ff ffb2 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c94:	2040      	movs	r0, #64	@ 0x40
 8001c96:	f7ff ffaf 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c9a:	20ff      	movs	r0, #255	@ 0xff
 8001c9c:	f000 f9aa 	bl	8001ff4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ca0:	20a1      	movs	r0, #161	@ 0xa1
 8001ca2:	f7ff ffa9 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ca6:	20a6      	movs	r0, #166	@ 0xa6
 8001ca8:	f7ff ffa6 	bl	8001bf8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001cac:	20a8      	movs	r0, #168	@ 0xa8
 8001cae:	f7ff ffa3 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001cb2:	201f      	movs	r0, #31
 8001cb4:	f7ff ffa0 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cb8:	20a4      	movs	r0, #164	@ 0xa4
 8001cba:	f7ff ff9d 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001cbe:	20d3      	movs	r0, #211	@ 0xd3
 8001cc0:	f7ff ff9a 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff ff97 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cca:	20d5      	movs	r0, #213	@ 0xd5
 8001ccc:	f7ff ff94 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cd0:	20f0      	movs	r0, #240	@ 0xf0
 8001cd2:	f7ff ff91 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cd6:	20d9      	movs	r0, #217	@ 0xd9
 8001cd8:	f7ff ff8e 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cdc:	2022      	movs	r0, #34	@ 0x22
 8001cde:	f7ff ff8b 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ce2:	20da      	movs	r0, #218	@ 0xda
 8001ce4:	f7ff ff88 	bl	8001bf8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7ff ff85 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cee:	20db      	movs	r0, #219	@ 0xdb
 8001cf0:	f7ff ff82 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cf4:	2020      	movs	r0, #32
 8001cf6:	f7ff ff7f 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cfa:	208d      	movs	r0, #141	@ 0x8d
 8001cfc:	f7ff ff7c 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d00:	2014      	movs	r0, #20
 8001d02:	f7ff ff79 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 f988 	bl	800201c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f80f 	bl	8001d30 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d12:	f000 f825 	bl	8001d60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <ssd1306_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <ssd1306_Init+0xd0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d22:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <ssd1306_Init+0xd0>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	711a      	strb	r2, [r3, #4]
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000554 	.word	0x20000554

08001d30 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <ssd1306_Fill+0x14>
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <ssd1306_Fill+0x16>
 8001d44:	23ff      	movs	r3, #255	@ 0xff
 8001d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <ssd1306_Fill+0x2c>)
 8001d4e:	f009 f949 	bl	800afe4 <memset>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000354 	.word	0x20000354

08001d60 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e016      	b.n	8001d9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	3b50      	subs	r3, #80	@ 0x50
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff40 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ff3d 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f7ff ff3a 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <ssd1306_UpdateScreen+0x4c>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff4a 	bl	8001c28 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	3301      	adds	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d9e5      	bls.n	8001d6c <ssd1306_UpdateScreen+0xc>
    }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000354 	.word	0x20000354

08001db0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db3d      	blt.n	8001e46 <ssd1306_DrawPixel+0x96>
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	2b1f      	cmp	r3, #31
 8001dce:	d83a      	bhi.n	8001e46 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001dd0:	797b      	ldrb	r3, [r7, #5]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d11a      	bne.n	8001e0c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	b2d8      	uxtb	r0, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	01db      	lsls	r3, r3, #7
 8001de2:	4413      	add	r3, r2
 8001de4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <ssd1306_DrawPixel+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b259      	sxtb	r1, r3
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	4603      	mov	r3, r0
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	4413      	add	r3, r2
 8001e04:	b2c9      	uxtb	r1, r1
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <ssd1306_DrawPixel+0xa0>)
 8001e08:	54d1      	strb	r1, [r2, r3]
 8001e0a:	e01d      	b.n	8001e48 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	b2d8      	uxtb	r0, r3
 8001e14:	4603      	mov	r3, r0
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <ssd1306_DrawPixel+0xa0>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	b25a      	sxtb	r2, r3
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	4013      	ands	r3, r2
 8001e34:	b259      	sxtb	r1, r3
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b2c9      	uxtb	r1, r1
 8001e40:	4a03      	ldr	r2, [pc, #12]	@ (8001e50 <ssd1306_DrawPixel+0xa0>)
 8001e42:	54d1      	strb	r1, [r2, r3]
 8001e44:	e000      	b.n	8001e48 <ssd1306_DrawPixel+0x98>
        return;
 8001e46:	bf00      	nop
    }
}
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000354 	.word	0x20000354

08001e54 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e62:	4623      	mov	r3, r4
 8001e64:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b1f      	cmp	r3, #31
 8001e6a:	d902      	bls.n	8001e72 <ssd1306_WriteChar+0x1e>
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e70:	d901      	bls.n	8001e76 <ssd1306_WriteChar+0x22>
        return 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e079      	b.n	8001f6a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <ssd1306_WriteChar+0x34>
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3b20      	subs	r3, #32
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	e000      	b.n	8001e8a <ssd1306_WriteChar+0x36>
 8001e88:	783b      	ldrb	r3, [r7, #0]
 8001e8a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	4413      	add	r3, r2
 8001e96:	2b80      	cmp	r3, #128	@ 0x80
 8001e98:	dc06      	bgt.n	8001ea8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e9a:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	dd01      	ble.n	8001eac <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e05e      	b.n	8001f6a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e04d      	b.n	8001f4e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3b20      	subs	r3, #32
 8001eb8:	7879      	ldrb	r1, [r7, #1]
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e036      	b.n	8001f40 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b2d8      	uxtb	r0, r3
 8001ef0:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7ff ff54 	bl	8001db0 <ssd1306_DrawPixel>
 8001f08:	e017      	b.n	8001f3a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	b2d9      	uxtb	r1, r3
 8001f26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff ff3b 	bl	8001db0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3c4      	bcc.n	8001ed2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	787b      	ldrb	r3, [r7, #1]
 8001f50:	461a      	mov	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d3ac      	bcc.n	8001eb2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <ssd1306_WriteChar+0x120>)
 8001f66:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000554 	.word	0x20000554

08001f78 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	4638      	mov	r0, r7
 8001f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f86:	e013      	b.n	8001fb0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	7818      	ldrb	r0, [r3, #0]
 8001f8c:	7e3b      	ldrb	r3, [r7, #24]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	463b      	mov	r3, r7
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	f7ff ff5e 	bl	8001e54 <ssd1306_WriteChar>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d002      	beq.n	8001faa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	e008      	b.n	8001fbc <ssd1306_WriteString+0x44>
        }
        str++;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e7      	bne.n	8001f88 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	781b      	ldrb	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460a      	mov	r2, r1
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <ssd1306_SetCursor+0x2c>)
 8001fda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <ssd1306_SetCursor+0x2c>)
 8001fe2:	805a      	strh	r2, [r3, #2]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000554 	.word	0x20000554

08001ff4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ffe:	2381      	movs	r3, #129	@ 0x81
 8002000:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fdf7 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fdf3 	bl	8001bf8 <ssd1306_WriteCommand>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800202c:	23af      	movs	r3, #175	@ 0xaf
 800202e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <ssd1306_SetDisplayOn+0x38>)
 8002032:	2201      	movs	r2, #1
 8002034:	715a      	strb	r2, [r3, #5]
 8002036:	e004      	b.n	8002042 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002038:	23ae      	movs	r3, #174	@ 0xae
 800203a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <ssd1306_SetDisplayOn+0x38>)
 800203e:	2200      	movs	r2, #0
 8002040:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fdd7 	bl	8001bf8 <ssd1306_WriteCommand>
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000554 	.word	0x20000554

08002058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_Init+0x28>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_Init+0x28>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f947 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	200f      	movs	r0, #15
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff fbd0 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f95f 	bl	8002366 <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f000 f927 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_IncTick+0x1c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_IncTick+0x20>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a03      	ldr	r2, [pc, #12]	@ (8002104 <HAL_IncTick+0x20>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000008 	.word	0x20000008
 8002104:	2000055c 	.word	0x2000055c

08002108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b02      	ldr	r3, [pc, #8]	@ (8002118 <HAL_GetTick+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	2000055c 	.word	0x2000055c

0800211c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fff0 	bl	8002108 <HAL_GetTick>
 8002128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d005      	beq.n	8002142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_Delay+0x44>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002142:	bf00      	nop
 8002144:	f7ff ffe0 	bl	8002108 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d8f7      	bhi.n	8002144 <HAL_Delay+0x28>
  {
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000008 	.word	0x20000008

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4906      	ldr	r1, [pc, #24]	@ (80021fc <__NVIC_EnableIRQ+0x34>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	@ (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff90 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff2d 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff42 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff90 	bl	8002254 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5f 	bl	8002200 <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff35 	bl	80021c8 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800239a:	4b2f      	ldr	r3, [pc, #188]	@ (8002458 <HAL_FLASH_Program+0xd8>)
 800239c:	7e1b      	ldrb	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_FLASH_Program+0x26>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e054      	b.n	8002450 <HAL_FLASH_Program+0xd0>
 80023a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HAL_FLASH_Program+0xd8>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80023b0:	f000 f8a8 	bl	8002504 <FLASH_WaitForLastOperation>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d144      	bne.n	8002448 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80023c4:	2301      	movs	r3, #1
 80023c6:	757b      	strb	r3, [r7, #21]
 80023c8:	e007      	b.n	80023da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d102      	bne.n	80023d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023d0:	2302      	movs	r3, #2
 80023d2:	757b      	strb	r3, [r7, #21]
 80023d4:	e001      	b.n	80023da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80023d6:	2304      	movs	r3, #4
 80023d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80023da:	2300      	movs	r3, #0
 80023dc:	75bb      	strb	r3, [r7, #22]
 80023de:	e02d      	b.n	800243c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023e0:	7dbb      	ldrb	r3, [r7, #22]
 80023e2:	005a      	lsls	r2, r3, #1
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	eb02 0c03 	add.w	ip, r2, r3
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
 80023ec:	0119      	lsls	r1, r3, #4
 80023ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f2:	f1c1 0620 	rsb	r6, r1, #32
 80023f6:	f1a1 0020 	sub.w	r0, r1, #32
 80023fa:	fa22 f401 	lsr.w	r4, r2, r1
 80023fe:	fa03 f606 	lsl.w	r6, r3, r6
 8002402:	4334      	orrs	r4, r6
 8002404:	fa23 f000 	lsr.w	r0, r3, r0
 8002408:	4304      	orrs	r4, r0
 800240a:	fa23 f501 	lsr.w	r5, r3, r1
 800240e:	b2a3      	uxth	r3, r4
 8002410:	4619      	mov	r1, r3
 8002412:	4660      	mov	r0, ip
 8002414:	f000 f85a 	bl	80024cc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002418:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800241c:	f000 f872 	bl	8002504 <FLASH_WaitForLastOperation>
 8002420:	4603      	mov	r3, r0
 8002422:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_FLASH_Program+0xdc>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_FLASH_Program+0xdc>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d107      	bne.n	8002446 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002436:	7dbb      	ldrb	r3, [r7, #22]
 8002438:	3301      	adds	r3, #1
 800243a:	75bb      	strb	r3, [r7, #22]
 800243c:	7dba      	ldrb	r2, [r7, #22]
 800243e:	7d7b      	ldrb	r3, [r7, #21]
 8002440:	429a      	cmp	r2, r3
 8002442:	d3cd      	bcc.n	80023e0 <HAL_FLASH_Program+0x60>
 8002444:	e000      	b.n	8002448 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002446:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_FLASH_Program+0xd8>)
 800244a:	2200      	movs	r2, #0
 800244c:	761a      	strb	r2, [r3, #24]

  return status;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002458:	20000560 	.word	0x20000560
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_FLASH_Unlock+0x40>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_FLASH_Unlock+0x40>)
 8002478:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <HAL_FLASH_Unlock+0x44>)
 800247a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_FLASH_Unlock+0x40>)
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <HAL_FLASH_Unlock+0x48>)
 8002480:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_FLASH_Unlock+0x40>)
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002492:	79fb      	ldrb	r3, [r7, #7]
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	45670123 	.word	0x45670123
 80024a8:	cdef89ab 	.word	0xcdef89ab

080024ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_FLASH_Lock+0x1c>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_FLASH_Lock+0x1c>)
 80024b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000

080024cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024d8:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <FLASH_Program_HalfWord+0x30>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <FLASH_Program_HalfWord+0x34>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <FLASH_Program_HalfWord+0x34>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	887a      	ldrh	r2, [r7, #2]
 80024ee:	801a      	strh	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000560 	.word	0x20000560
 8002500:	40022000 	.word	0x40022000

08002504 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fdfc 	bl	8002108 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002512:	e010      	b.n	8002536 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d00c      	beq.n	8002536 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <FLASH_WaitForLastOperation+0x2e>
 8002522:	f7ff fdf1 	bl	8002108 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d201      	bcs.n	8002536 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e025      	b.n	8002582 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e8      	bne.n	8002514 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800254e:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 8002550:	2220      	movs	r2, #32
 8002552:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <FLASH_WaitForLastOperation+0x88>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002578:	f000 f80a 	bl	8002590 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40022000 	.word	0x40022000

08002590 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800259a:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025a6:	4b21      	ldr	r3, [pc, #132]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f043 0310 	orr.w	r3, r3, #16
 80025b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	4a17      	ldr	r2, [pc, #92]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80025da:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	4a0f      	ldr	r2, [pc, #60]	@ (800262c <FLASH_SetErrorCode+0x9c>)
 80025f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f240 1201 	movw	r2, #257	@ 0x101
 8002604:	4293      	cmp	r3, r2
 8002606:	d106      	bne.n	8002616 <FLASH_SetErrorCode+0x86>
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a06      	ldr	r2, [pc, #24]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	61d3      	str	r3, [r2, #28]
}  
 8002614:	e002      	b.n	800261c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002616:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <FLASH_SetErrorCode+0x98>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60d3      	str	r3, [r2, #12]
}  
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	20000560 	.word	0x20000560

08002630 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002642:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <HAL_FLASHEx_Erase+0xd0>)
 8002644:	7e1b      	ldrb	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_FLASHEx_Erase+0x1e>
 800264a:	2302      	movs	r3, #2
 800264c:	e053      	b.n	80026f6 <HAL_FLASHEx_Erase+0xc6>
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_FLASHEx_Erase+0xd0>)
 8002650:	2201      	movs	r2, #1
 8002652:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d116      	bne.n	800268a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800265c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002660:	f7ff ff50 	bl	8002504 <FLASH_WaitForLastOperation>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d141      	bne.n	80026ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800266a:	2001      	movs	r0, #1
 800266c:	f000 f84c 	bl	8002708 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002670:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002674:	f7ff ff46 	bl	8002504 <FLASH_WaitForLastOperation>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800267c:	4b21      	ldr	r3, [pc, #132]	@ (8002704 <HAL_FLASHEx_Erase+0xd4>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a20      	ldr	r2, [pc, #128]	@ (8002704 <HAL_FLASHEx_Erase+0xd4>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6113      	str	r3, [r2, #16]
 8002688:	e031      	b.n	80026ee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800268a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800268e:	f7ff ff39 	bl	8002504 <FLASH_WaitForLastOperation>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12a      	bne.n	80026ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f04f 32ff 	mov.w	r2, #4294967295
 800269e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	e019      	b.n	80026dc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f000 f849 	bl	8002740 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026b2:	f7ff ff27 	bl	8002504 <FLASH_WaitForLastOperation>
 80026b6:	4603      	mov	r3, r0
 80026b8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <HAL_FLASHEx_Erase+0xd4>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_FLASHEx_Erase+0xd4>)
 80026c0:	f023 0302 	bic.w	r3, r3, #2
 80026c4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
            break;
 80026d2:	e00c      	b.n	80026ee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026da:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	029a      	lsls	r2, r3, #10
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4413      	add	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3dc      	bcc.n	80026a8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <HAL_FLASHEx_Erase+0xd0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	761a      	strb	r2, [r3, #24]

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000560 	.word	0x20000560
 8002704:	40022000 	.word	0x40022000

08002708 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002710:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <FLASH_MassErase+0x30>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <FLASH_MassErase+0x34>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4a08      	ldr	r2, [pc, #32]	@ (800273c <FLASH_MassErase+0x34>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <FLASH_MassErase+0x34>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	4a05      	ldr	r2, [pc, #20]	@ (800273c <FLASH_MassErase+0x34>)
 8002728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800272c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000560 	.word	0x20000560
 800273c:	40022000 	.word	0x40022000

08002740 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <FLASH_PageErase+0x38>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <FLASH_PageErase+0x3c>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <FLASH_PageErase+0x3c>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <FLASH_PageErase+0x3c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <FLASH_PageErase+0x3c>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4a05      	ldr	r2, [pc, #20]	@ (800277c <FLASH_PageErase+0x3c>)
 8002766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800276a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000560 	.word	0x20000560
 800277c:	40022000 	.word	0x40022000

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b08b      	sub	sp, #44	@ 0x2c
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002792:	e169      	b.n	8002a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002794:	2201      	movs	r2, #1
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8158 	bne.w	8002a62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002a20 <HAL_GPIO_Init+0x2a0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d05e      	beq.n	800287a <HAL_GPIO_Init+0xfa>
 80027bc:	4a98      	ldr	r2, [pc, #608]	@ (8002a20 <HAL_GPIO_Init+0x2a0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d875      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027c2:	4a98      	ldr	r2, [pc, #608]	@ (8002a24 <HAL_GPIO_Init+0x2a4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d058      	beq.n	800287a <HAL_GPIO_Init+0xfa>
 80027c8:	4a96      	ldr	r2, [pc, #600]	@ (8002a24 <HAL_GPIO_Init+0x2a4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d86f      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027ce:	4a96      	ldr	r2, [pc, #600]	@ (8002a28 <HAL_GPIO_Init+0x2a8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d052      	beq.n	800287a <HAL_GPIO_Init+0xfa>
 80027d4:	4a94      	ldr	r2, [pc, #592]	@ (8002a28 <HAL_GPIO_Init+0x2a8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d869      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027da:	4a94      	ldr	r2, [pc, #592]	@ (8002a2c <HAL_GPIO_Init+0x2ac>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d04c      	beq.n	800287a <HAL_GPIO_Init+0xfa>
 80027e0:	4a92      	ldr	r2, [pc, #584]	@ (8002a2c <HAL_GPIO_Init+0x2ac>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d863      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027e6:	4a92      	ldr	r2, [pc, #584]	@ (8002a30 <HAL_GPIO_Init+0x2b0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d046      	beq.n	800287a <HAL_GPIO_Init+0xfa>
 80027ec:	4a90      	ldr	r2, [pc, #576]	@ (8002a30 <HAL_GPIO_Init+0x2b0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d85d      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d82a      	bhi.n	800284c <HAL_GPIO_Init+0xcc>
 80027f6:	2b12      	cmp	r3, #18
 80027f8:	d859      	bhi.n	80028ae <HAL_GPIO_Init+0x12e>
 80027fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002800 <HAL_GPIO_Init+0x80>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	0800287b 	.word	0x0800287b
 8002804:	08002855 	.word	0x08002855
 8002808:	08002867 	.word	0x08002867
 800280c:	080028a9 	.word	0x080028a9
 8002810:	080028af 	.word	0x080028af
 8002814:	080028af 	.word	0x080028af
 8002818:	080028af 	.word	0x080028af
 800281c:	080028af 	.word	0x080028af
 8002820:	080028af 	.word	0x080028af
 8002824:	080028af 	.word	0x080028af
 8002828:	080028af 	.word	0x080028af
 800282c:	080028af 	.word	0x080028af
 8002830:	080028af 	.word	0x080028af
 8002834:	080028af 	.word	0x080028af
 8002838:	080028af 	.word	0x080028af
 800283c:	080028af 	.word	0x080028af
 8002840:	080028af 	.word	0x080028af
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002871 	.word	0x08002871
 800284c:	4a79      	ldr	r2, [pc, #484]	@ (8002a34 <HAL_GPIO_Init+0x2b4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002852:	e02c      	b.n	80028ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e029      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	3304      	adds	r3, #4
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e024      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	3308      	adds	r3, #8
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e01f      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	330c      	adds	r3, #12
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e01a      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002882:	2304      	movs	r3, #4
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e013      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002890:	2308      	movs	r3, #8
 8002892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	611a      	str	r2, [r3, #16]
          break;
 800289a:	e009      	b.n	80028b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800289c:	2308      	movs	r3, #8
 800289e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	615a      	str	r2, [r3, #20]
          break;
 80028a6:	e003      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
          break;
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_Init+0x130>
          break;
 80028ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2bff      	cmp	r3, #255	@ 0xff
 80028b4:	d801      	bhi.n	80028ba <HAL_GPIO_Init+0x13a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	e001      	b.n	80028be <HAL_GPIO_Init+0x13e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2bff      	cmp	r3, #255	@ 0xff
 80028c4:	d802      	bhi.n	80028cc <HAL_GPIO_Init+0x14c>
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x152>
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	3b08      	subs	r3, #8
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	210f      	movs	r1, #15
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	fa01 f303 	lsl.w	r3, r1, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	401a      	ands	r2, r3
 80028e4:	6a39      	ldr	r1, [r7, #32]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	431a      	orrs	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80b1 	beq.w	8002a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002900:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <HAL_GPIO_Init+0x2b8>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a4c      	ldr	r2, [pc, #304]	@ (8002a38 <HAL_GPIO_Init+0x2b8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_GPIO_Init+0x2b8>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002918:	4a48      	ldr	r2, [pc, #288]	@ (8002a3c <HAL_GPIO_Init+0x2bc>)
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a40      	ldr	r2, [pc, #256]	@ (8002a40 <HAL_GPIO_Init+0x2c0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <HAL_GPIO_Init+0x1ec>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3f      	ldr	r2, [pc, #252]	@ (8002a44 <HAL_GPIO_Init+0x2c4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00d      	beq.n	8002968 <HAL_GPIO_Init+0x1e8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a48 <HAL_GPIO_Init+0x2c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <HAL_GPIO_Init+0x1e4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3d      	ldr	r2, [pc, #244]	@ (8002a4c <HAL_GPIO_Init+0x2cc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_GPIO_Init+0x1e0>
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002960:	2304      	movs	r3, #4
 8002962:	e004      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002964:	2302      	movs	r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_GPIO_Init+0x1ee>
 800296c:	2300      	movs	r3, #0
 800296e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002970:	f002 0203 	and.w	r2, r2, #3
 8002974:	0092      	lsls	r2, r2, #2
 8002976:	4093      	lsls	r3, r2
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800297e:	492f      	ldr	r1, [pc, #188]	@ (8002a3c <HAL_GPIO_Init+0x2bc>)
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	3302      	adds	r3, #2
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002998:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	492c      	ldr	r1, [pc, #176]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	4928      	ldr	r1, [pc, #160]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4922      	ldr	r1, [pc, #136]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	491e      	ldr	r1, [pc, #120]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e8:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4918      	ldr	r1, [pc, #96]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4914      	ldr	r1, [pc, #80]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d021      	beq.n	8002a54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a10:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	490e      	ldr	r1, [pc, #56]	@ (8002a50 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
 8002a1c:	e021      	b.n	8002a62 <HAL_GPIO_Init+0x2e2>
 8002a1e:	bf00      	nop
 8002a20:	10320000 	.word	0x10320000
 8002a24:	10310000 	.word	0x10310000
 8002a28:	10220000 	.word	0x10220000
 8002a2c:	10210000 	.word	0x10210000
 8002a30:	10120000 	.word	0x10120000
 8002a34:	10110000 	.word	0x10110000
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40010800 	.word	0x40010800
 8002a44:	40010c00 	.word	0x40010c00
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40011400 	.word	0x40011400
 8002a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_GPIO_Init+0x304>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4909      	ldr	r1, [pc, #36]	@ (8002a84 <HAL_GPIO_Init+0x304>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	3301      	adds	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f ae8e 	bne.w	8002794 <HAL_GPIO_Init+0x14>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	372c      	adds	r7, #44	@ 0x2c
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e001      	b.n	8002aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	807b      	strh	r3, [r7, #2]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac6:	787b      	ldrb	r3, [r7, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ad2:	e003      	b.n	8002adc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	611a      	str	r2, [r3, #16]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e12b      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe feb4 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f002 fda2 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a81      	ldr	r2, [pc, #516]	@ (8002d5c <HAL_I2C_Init+0x274>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d807      	bhi.n	8002b6c <HAL_I2C_Init+0x84>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a80      	ldr	r2, [pc, #512]	@ (8002d60 <HAL_I2C_Init+0x278>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e006      	b.n	8002b7a <HAL_I2C_Init+0x92>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d64 <HAL_I2C_Init+0x27c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	bf94      	ite	ls
 8002b74:	2301      	movls	r3, #1
 8002b76:	2300      	movhi	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0e7      	b.n	8002d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a78      	ldr	r2, [pc, #480]	@ (8002d68 <HAL_I2C_Init+0x280>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0c9b      	lsrs	r3, r3, #18
 8002b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d5c <HAL_I2C_Init+0x274>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d802      	bhi.n	8002bbc <HAL_I2C_Init+0xd4>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	e009      	b.n	8002bd0 <HAL_I2C_Init+0xe8>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a69      	ldr	r2, [pc, #420]	@ (8002d6c <HAL_I2C_Init+0x284>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	3301      	adds	r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002be2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	495c      	ldr	r1, [pc, #368]	@ (8002d5c <HAL_I2C_Init+0x274>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	d819      	bhi.n	8002c24 <HAL_I2C_Init+0x13c>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e59      	subs	r1, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfe:	1c59      	adds	r1, r3, #1
 8002c00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c04:	400b      	ands	r3, r1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_I2C_Init+0x138>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e59      	subs	r1, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	e051      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c20:	2304      	movs	r3, #4
 8002c22:	e04f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <HAL_I2C_Init+0x168>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e012      	b.n	8002c76 <HAL_I2C_Init+0x18e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	0099      	lsls	r1, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Init+0x196>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e022      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10e      	bne.n	8002ca4 <HAL_I2C_Init+0x1bc>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e58      	subs	r0, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Init+0x1dc>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e58      	subs	r0, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	0099      	lsls	r1, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	6809      	ldr	r1, [r1, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6911      	ldr	r1, [r2, #16]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	4311      	orrs	r1, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	000186a0 	.word	0x000186a0
 8002d60:	001e847f 	.word	0x001e847f
 8002d64:	003d08ff 	.word	0x003d08ff
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	10624dd3 	.word	0x10624dd3

08002d70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d8a:	f7ff f9bd 	bl	8002108 <HAL_GetTick>
 8002d8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	f040 80d9 	bne.w	8002f50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2319      	movs	r3, #25
 8002da4:	2201      	movs	r2, #1
 8002da6:	496d      	ldr	r1, [pc, #436]	@ (8002f5c <HAL_I2C_Mem_Write+0x1ec>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f971 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0cc      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Mem_Write+0x56>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0c5      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d007      	beq.n	8002dec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2221      	movs	r2, #33	@ 0x21
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2240      	movs	r2, #64	@ 0x40
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a3a      	ldr	r2, [r7, #32]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f60 <HAL_I2C_Mem_Write+0x1f0>)
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2e:	88f8      	ldrh	r0, [r7, #6]
 8002e30:	893a      	ldrh	r2, [r7, #8]
 8002e32:	8979      	ldrh	r1, [r7, #10]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f890 	bl	8002f64 <I2C_RequestMemoryWrite>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d052      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e081      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fa36 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d107      	bne.n	8002e76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06b      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_I2C_Mem_Write+0x180>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1aa      	bne.n	8002e4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fa29 	bl	8003354 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d107      	bne.n	8002f20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e016      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	00100002 	.word	0x00100002
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	460b      	mov	r3, r1
 8002f78:	813b      	strh	r3, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f878 	bl	8003090 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d103      	bne.n	8002fbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e05f      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	492d      	ldr	r1, [pc, #180]	@ (800308c <I2C_RequestMemoryWrite+0x128>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8d3 	bl	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e04c      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f95e 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02b      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e021      	b.n	8003080 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f938 	bl	80032c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e005      	b.n	8003082 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00010002 	.word	0x00010002

08003090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a0:	e048      	b.n	8003134 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d044      	beq.n	8003134 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7ff f82d 	bl	8002108 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d139      	bne.n	8003134 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0c1b      	lsrs	r3, r3, #16
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10d      	bne.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	e00c      	b.n	8003100 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d116      	bne.n	8003134 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e023      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10d      	bne.n	800315a <I2C_WaitOnFlagUntilTimeout+0xca>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	e00c      	b.n	8003174 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	429a      	cmp	r2, r3
 8003178:	d093      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003192:	e071      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a2:	d123      	bne.n	80031ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e067      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d041      	beq.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7fe ff88 	bl	8002108 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d136      	bne.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10c      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e00b      	b.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e021      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10c      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e00b      	b.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f47f af6d 	bne.w	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d0:	e034      	b.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f886 	bl	80033e4 <I2C_IsAcknowledgeFailed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e034      	b.n	800334c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d028      	beq.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe ff0d 	bl	8002108 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b80      	cmp	r3, #128	@ 0x80
 800330c:	d016      	beq.n	800333c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e007      	b.n	800334c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003346:	2b80      	cmp	r3, #128	@ 0x80
 8003348:	d1c3      	bne.n	80032d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003360:	e034      	b.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f83e 	bl	80033e4 <I2C_IsAcknowledgeFailed>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e034      	b.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d028      	beq.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe fec5 	bl	8002108 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11d      	bne.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d016      	beq.n	80033cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e007      	b.n	80033dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d1c3      	bne.n	8003362 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fa:	d11b      	bne.n	8003434 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003404:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0e8      	b.n	8003624 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 fa54 	bl	800a914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f003 f845 	bl	800650e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348e:	f003 f81b 	bl	80064c8 <USB_CoreInit>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0bf      	b.n	8003624 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 f849 	bl	8006542 <USB_SetCurrentMode>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0b0      	b.n	8003624 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e03e      	b.n	8003546 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3311      	adds	r3, #17
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3310      	adds	r3, #16
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3313      	adds	r3, #19
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3320      	adds	r3, #32
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	3324      	adds	r3, #36	@ 0x24
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	440b      	add	r3, r1
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	3301      	adds	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	791b      	ldrb	r3, [r3, #4]
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	429a      	cmp	r2, r3
 800354e:	d3bb      	bcc.n	80034c8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e044      	b.n	80035e0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	3301      	adds	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	791b      	ldrb	r3, [r3, #4]
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3b5      	bcc.n	8003556 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	f002 ffb1 	bl	800655a <USB_DevInit>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e00c      	b.n	8003624 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f005 fa30 	bl	8008a82 <USB_DevDisconnect>

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_PCD_Start+0x16>
 800363e:	2302      	movs	r3, #2
 8003640:	e016      	b.n	8003670 <HAL_PCD_Start+0x44>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f002 ff47 	bl	80064e2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003654:	2101      	movs	r1, #1
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f007 fbcf 	bl	800adfa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f005 fa04 	bl	8008a6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f005 fa06 	bl	8008a96 <USB_ReadInterrupts>
 800368a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb1a 	bl	8003cd0 <PCD_EP_ISR_Handler>

    return;
 800369c:	e119      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ba:	b292      	uxth	r2, r2
 80036bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f007 f9a2 	bl	800aa0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036c6:	2100      	movs	r1, #0
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f905 	bl	80038d8 <HAL_PCD_SetAddress>

    return;
 80036ce:	e100      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036ec:	b292      	uxth	r2, r2
 80036ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036f2:	e0ee      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003706:	b29a      	uxth	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003710:	b292      	uxth	r2, r2
 8003712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003716:	e0dc      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d027      	beq.n	8003772 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0204 	bic.w	r2, r2, #4
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0208 	bic.w	r2, r2, #8
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f007 f992 	bl	800aa7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800376a:	b292      	uxth	r2, r2
 800376c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003770:	e0af      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8083 	beq.w	8003884 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e010      	b.n	80037a6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	7ffb      	ldrb	r3, [r7, #31]
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	b292      	uxth	r2, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	3320      	adds	r3, #32
 800379a:	443b      	add	r3, r7
 800379c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	3301      	adds	r3, #1
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	7ffb      	ldrb	r3, [r7, #31]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d9eb      	bls.n	8003784 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	b292      	uxth	r2, r2
 80037c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	b292      	uxth	r2, r2
 80037d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80037dc:	bf00      	nop
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f6      	beq.n	80037de <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003802:	b292      	uxth	r2, r2
 8003804:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e00f      	b.n	800382e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800380e:	7ffb      	ldrb	r3, [r7, #31]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4611      	mov	r1, r2
 8003816:	7ffa      	ldrb	r2, [r7, #31]
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	440a      	add	r2, r1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	3320      	adds	r3, #32
 8003820:	443b      	add	r3, r7
 8003822:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003826:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003828:	7ffb      	ldrb	r3, [r7, #31]
 800382a:	3301      	adds	r3, #1
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	7ffb      	ldrb	r3, [r7, #31]
 8003830:	2b07      	cmp	r3, #7
 8003832:	d9ec      	bls.n	800380e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	b292      	uxth	r2, r2
 8003848:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800385e:	b292      	uxth	r2, r2
 8003860:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0204 	orr.w	r2, r2, #4
 8003876:	b292      	uxth	r2, r2
 8003878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f007 f8e3 	bl	800aa48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003882:	e026      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00f      	beq.n	80038ae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038a0:	b292      	uxth	r2, r2
 80038a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f007 f8a1 	bl	800a9ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038ac:	e011      	b.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ca:	b292      	uxth	r2, r2
 80038cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038d0:	bf00      	nop
  }
}
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_SetAddress+0x1a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e012      	b.n	8003918 <HAL_PCD_SetAddress+0x40>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f005 f89d 	bl	8008a48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	70fb      	strb	r3, [r7, #3]
 8003932:	460b      	mov	r3, r1
 8003934:	803b      	strh	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800393e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003942:	2b00      	cmp	r3, #0
 8003944:	da0e      	bge.n	8003964 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	f003 0207 	and.w	r2, r3, #7
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3310      	adds	r3, #16
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	705a      	strb	r2, [r3, #1]
 8003962:	e00e      	b.n	8003982 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 0207 	and.w	r2, r3, #7
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800398e:	883a      	ldrh	r2, [r7, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	78ba      	ldrb	r2, [r7, #2]
 8003998:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d102      	bne.n	80039a6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_PCD_EP_Open+0x94>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e00e      	b.n	80039d2 <HAL_PCD_EP_Open+0xb2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fde6 	bl	8006594 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039d0:	7afb      	ldrb	r3, [r7, #11]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0e      	bge.n	8003a0c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 0207 	and.w	r2, r3, #7
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	3310      	adds	r3, #16
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	705a      	strb	r2, [r3, #1]
 8003a0a:	e00e      	b.n	8003a2a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_PCD_EP_Close+0x6a>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e00e      	b.n	8003a62 <HAL_PCD_EP_Close+0x88>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 f95e 	bl	8006d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	460b      	mov	r3, r1
 8003a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	f003 0207 	and.w	r2, r3, #7
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fb15 	bl	80070ec <USB_EPStartXfer>

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	f003 0207 	and.w	r2, r3, #7
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	460b      	mov	r3, r1
 8003b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3310      	adds	r3, #16
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2201      	movs	r2, #1
 8003b44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6979      	ldr	r1, [r7, #20]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fac7 	bl	80070ec <USB_EPStartXfer>

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	7912      	ldrb	r2, [r2, #4]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e04c      	b.n	8003c20 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da0e      	bge.n	8003bac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 0207 	and.w	r2, r3, #7
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	705a      	strb	r2, [r3, #1]
 8003baa:	e00c      	b.n	8003bc6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_PCD_EP_SetStall+0x7e>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e01c      	b.n	8003c20 <HAL_PCD_EP_SetStall+0xb8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f004 fe2a 	bl	800884e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f004 ff4f 	bl	8008ab4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	7912      	ldrb	r2, [r2, #4]
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e040      	b.n	8003cc8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da0e      	bge.n	8003c6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 0207 	and.w	r2, r3, #7
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	705a      	strb	r2, [r3, #1]
 8003c6a:	e00e      	b.n	8003c8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_PCD_EP_ClrStall+0x82>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e00e      	b.n	8003cc8 <HAL_PCD_EP_ClrStall+0xa0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f004 fe18 	bl	80088ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b096      	sub	sp, #88	@ 0x58
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cd8:	e3bb      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ce2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003cf4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 8175 	bne.w	8003fe8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d14e      	bne.n	8003da8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	81fb      	strh	r3, [r7, #14]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3310      	adds	r3, #16
 8003d32:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f006 fe22 	bl	800a9ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7b5b      	ldrb	r3, [r3, #13]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8368 	beq.w	8004452 <PCD_EP_ISR_Handler+0x782>
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8363 	bne.w	8004452 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7b5b      	ldrb	r3, [r3, #13]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	735a      	strb	r2, [r3, #13]
 8003da6:	e354      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003dae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d034      	beq.n	8003e30 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	3306      	adds	r3, #6
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f004 fea6 	bl	8008b56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e16:	4013      	ands	r3, r2
 8003e18:	823b      	strh	r3, [r7, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	8a3a      	ldrh	r2, [r7, #16]
 8003e20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e24:	b292      	uxth	r2, r2
 8003e26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f006 fd99 	bl	800a960 <HAL_PCD_SetupStageCallback>
 8003e2e:	e310      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e30:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f280 830c 	bge.w	8004452 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e46:	4013      	ands	r3, r2
 8003e48:	83fb      	strh	r3, [r7, #30]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	8bfa      	ldrh	r2, [r7, #30]
 8003e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e54:	b292      	uxth	r2, r2
 8003e56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3306      	adds	r3, #6
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d019      	beq.n	8003ec0 <PCD_EP_ISR_Handler+0x1f0>
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	6959      	ldr	r1, [r3, #20]
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f004 fe56 	bl	8008b56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003eb8:	2100      	movs	r1, #0
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f006 fd62 	bl	800a984 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003eca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 82bd 	bne.w	8004452 <PCD_EP_ISR_Handler+0x782>
 8003ed8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003edc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ee4:	f000 82b5 	beq.w	8004452 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	801a      	strh	r2, [r3, #0]
 8003f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f1e:	d91d      	bls.n	8003f5c <PCD_EP_ISR_Handler+0x28c>
 8003f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <PCD_EP_ISR_Handler+0x26a>
 8003f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f36:	3b01      	subs	r3, #1
 8003f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e026      	b.n	8003faa <PCD_EP_ISR_Handler+0x2da>
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <PCD_EP_ISR_Handler+0x2aa>
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	e017      	b.n	8003faa <PCD_EP_ISR_Handler+0x2da>
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <PCD_EP_ISR_Handler+0x2c4>
 8003f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f90:	3301      	adds	r3, #1
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	827b      	strh	r3, [r7, #18]
 8003fbc:	8a7b      	ldrh	r3, [r7, #18]
 8003fbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fc2:	827b      	strh	r3, [r7, #18]
 8003fc4:	8a7b      	ldrh	r3, [r7, #18]
 8003fc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fca:	827b      	strh	r3, [r7, #18]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	8a7b      	ldrh	r3, [r7, #18]
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
 8003fe6:	e234      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ffc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004000:	2b00      	cmp	r3, #0
 8004002:	f280 80fc 	bge.w	80041fe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29a      	uxth	r2, r3
 8004018:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800401c:	4013      	ands	r3, r2
 800401e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004034:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004038:	b292      	uxth	r2, r2
 800403a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800403c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d125      	bne.n	80040a6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004062:	b29b      	uxth	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	3306      	adds	r3, #6
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004082:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004086:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8092 	beq.w	80041b4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004096:	6959      	ldr	r1, [r3, #20]
 8004098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409a:	88da      	ldrh	r2, [r3, #6]
 800409c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040a0:	f004 fd59 	bl	8008b56 <USB_ReadPMA>
 80040a4:	e086      	b.n	80041b4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	78db      	ldrb	r3, [r3, #3]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d10a      	bne.n	80040c4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040b2:	461a      	mov	r2, r3
 80040b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f9d9 	bl	800446e <HAL_PCD_EP_DB_Receive>
 80040bc:	4603      	mov	r3, r0
 80040be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80040c2:	e077      	b.n	80041b4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040de:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004100:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004104:	b29b      	uxth	r3, r3
 8004106:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d024      	beq.n	800416c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	3302      	adds	r3, #2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800414e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02e      	beq.n	80041b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415c:	6959      	ldr	r1, [r3, #20]
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	891a      	ldrh	r2, [r3, #8]
 8004162:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004166:	f004 fcf6 	bl	8008b56 <USB_ReadPMA>
 800416a:	e023      	b.n	80041b4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004174:	b29b      	uxth	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	3306      	adds	r3, #6
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004194:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004198:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	6959      	ldr	r1, [r3, #20]
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	895a      	ldrh	r2, [r3, #10]
 80041ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041b0:	f004 fcd1 	bl	8008b56 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041bc:	441a      	add	r2, r3
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041ca:	441a      	add	r2, r3
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <PCD_EP_ISR_Handler+0x514>
 80041d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d206      	bcs.n	80041f2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f006 fbca 	bl	800a984 <HAL_PCD_DataOutStageCallback>
 80041f0:	e005      	b.n	80041fe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f8:	4618      	mov	r0, r3
 80041fa:	f002 ff77 	bl	80070ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8123 	beq.w	8004452 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800420c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3310      	adds	r3, #16
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004258:	b29b      	uxth	r3, r3
 800425a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425e:	78db      	ldrb	r3, [r3, #3]
 8004260:	2b01      	cmp	r3, #1
 8004262:	f040 80a2 	bne.w	80043aa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800426c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426e:	7b1b      	ldrb	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8093 	beq.w	800439c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004276:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800427a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d046      	beq.n	8004310 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d126      	bne.n	80042d8 <PCD_EP_ISR_Handler+0x608>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	4413      	add	r3, r2
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	4413      	add	r3, r2
 80042ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e061      	b.n	800439c <PCD_EP_ISR_Handler+0x6cc>
 80042d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d15d      	bne.n	800439c <PCD_EP_ISR_Handler+0x6cc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f4:	4413      	add	r3, r2
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	011a      	lsls	r2, r3, #4
 80042fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004300:	4413      	add	r3, r2
 8004302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	2200      	movs	r2, #0
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e045      	b.n	800439c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d126      	bne.n	800436c <PCD_EP_ISR_Handler+0x69c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	4413      	add	r3, r2
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
 8004336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	4413      	add	r3, r2
 8004340:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004344:	633b      	str	r3, [r7, #48]	@ 0x30
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004350:	b29a      	uxth	r2, r3
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004364:	b29a      	uxth	r2, r3
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e017      	b.n	800439c <PCD_EP_ISR_Handler+0x6cc>
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d113      	bne.n	800439c <PCD_EP_ISR_Handler+0x6cc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004382:	4413      	add	r3, r2
 8004384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	011a      	lsls	r2, r3, #4
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438e:	4413      	add	r3, r2
 8004390:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004398:	2200      	movs	r2, #0
 800439a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f006 fb09 	bl	800a9ba <HAL_PCD_DataInStageCallback>
 80043a8:	e053      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d146      	bne.n	8004444 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	3302      	adds	r3, #2
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d907      	bls.n	80043fe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80043ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fa:	619a      	str	r2, [r3, #24]
 80043fc:	e002      	b.n	8004404 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f006 fad1 	bl	800a9ba <HAL_PCD_DataInStageCallback>
 8004418:	e01b      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004422:	441a      	add	r2, r3
 8004424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004426:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004430:	441a      	add	r2, r3
 8004432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004434:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800443c:	4618      	mov	r0, r3
 800443e:	f002 fe55 	bl	80070ec <USB_EPStartXfer>
 8004442:	e006      	b.n	8004452 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004444:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004448:	461a      	mov	r2, r3
 800444a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f91b 	bl	8004688 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800445a:	b29b      	uxth	r3, r3
 800445c:	b21b      	sxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	f6ff ac3b 	blt.w	8003cda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3758      	adds	r7, #88	@ 0x58
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d07e      	beq.n	8004584 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448e:	b29b      	uxth	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	3302      	adds	r3, #2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	8b7b      	ldrh	r3, [r7, #26]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d306      	bcc.n	80044c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	8b7b      	ldrh	r3, [r7, #26]
 80044c0:	1ad2      	subs	r2, r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	619a      	str	r2, [r3, #24]
 80044c6:	e002      	b.n	80044ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d123      	bne.n	800451e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f0:	833b      	strh	r3, [r7, #24]
 80044f2:	8b3b      	ldrh	r3, [r7, #24]
 80044f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044f8:	833b      	strh	r3, [r7, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	8b3b      	ldrh	r3, [r7, #24]
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01f      	beq.n	8004568 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	82fb      	strh	r3, [r7, #22]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004560:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6959      	ldr	r1, [r3, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	891a      	ldrh	r2, [r3, #8]
 800457c:	8b7b      	ldrh	r3, [r7, #26]
 800457e:	f004 faea 	bl	8008b56 <USB_ReadPMA>
 8004582:	e07c      	b.n	800467e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458c:	b29b      	uxth	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	3306      	adds	r3, #6
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	8b7b      	ldrh	r3, [r7, #26]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d306      	bcc.n	80045c6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	8b7b      	ldrh	r3, [r7, #26]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	619a      	str	r2, [r3, #24]
 80045c4:	e002      	b.n	80045cc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d123      	bne.n	800461c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	83fb      	strh	r3, [r7, #30]
 80045f0:	8bfb      	ldrh	r3, [r7, #30]
 80045f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f6:	83fb      	strh	r3, [r7, #30]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	8bfb      	ldrh	r3, [r7, #30]
 8004608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800460c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004618:	b29b      	uxth	r3, r3
 800461a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11f      	bne.n	8004666 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004640:	83bb      	strh	r3, [r7, #28]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8bbb      	ldrh	r3, [r7, #28]
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800465e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6959      	ldr	r1, [r3, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	895a      	ldrh	r2, [r3, #10]
 8004678:	8b7b      	ldrh	r3, [r7, #26]
 800467a:	f004 fa6c 	bl	8008b56 <USB_ReadPMA>
    }
  }

  return count;
 800467e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b0a4      	sub	sp, #144	@ 0x90
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 81dd 	beq.w	8004a5c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	3302      	adds	r3, #2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d907      	bls.n	80046ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	619a      	str	r2, [r3, #24]
 80046e8:	e002      	b.n	80046f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 80b9 	bne.w	800486c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d126      	bne.n	8004750 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004710:	b29b      	uxth	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	4413      	add	r3, r2
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	011a      	lsls	r2, r3, #4
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	4413      	add	r3, r2
 8004724:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004734:	b29a      	uxth	r2, r3
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004748:	b29a      	uxth	r2, r3
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	e01a      	b.n	8004786 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d116      	bne.n	8004786 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	4413      	add	r3, r2
 800476e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	011a      	lsls	r2, r3, #4
 8004776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004778:	4413      	add	r3, r2
 800477a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800477e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	2200      	movs	r2, #0
 8004784:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d126      	bne.n	80047e2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	011a      	lsls	r2, r3, #4
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	4413      	add	r3, r2
 80047b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29a      	uxth	r2, r3
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	e017      	b.n	8004812 <HAL_PCD_EP_DB_Transmit+0x18a>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d113      	bne.n	8004812 <HAL_PCD_EP_DB_Transmit+0x18a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	4413      	add	r3, r2
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	011a      	lsls	r2, r3, #4
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	4413      	add	r3, r2
 8004806:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800480a:	623b      	str	r3, [r7, #32]
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2200      	movs	r2, #0
 8004810:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f006 f8ce 	bl	800a9ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 82fc 	beq.w	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004844:	82fb      	strh	r3, [r7, #22]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8afb      	ldrh	r3, [r7, #22]
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800485e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]
 800486a:	e2da      	b.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d021      	beq.n	80048ba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800488c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004890:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 82ae 	bne.w	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ce:	441a      	add	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048dc:	441a      	add	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d30b      	bcc.n	8004906 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a1a      	ldr	r2, [r3, #32]
 80048fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	621a      	str	r2, [r3, #32]
 8004904:	e017      	b.n	8004936 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800490e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800491e:	e00a      	b.n	8004936 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2200      	movs	r2, #0
 8004934:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d165      	bne.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x382>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004952:	4413      	add	r3, r2
 8004954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	011a      	lsls	r2, r3, #4
 800495c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495e:	4413      	add	r3, r2
 8004960:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004970:	b29a      	uxth	r2, r3
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800497a:	2b3e      	cmp	r3, #62	@ 0x3e
 800497c:	d91d      	bls.n	80049ba <HAL_PCD_EP_DB_Transmit+0x332>
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_PCD_EP_DB_Transmit+0x310>
 8004992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004994:	3b01      	subs	r3, #1
 8004996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29a      	uxth	r2, r3
 800499e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	e044      	b.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x350>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e035      	b.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80049ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ee:	3301      	adds	r3, #1
 80049f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4313      	orrs	r3, r2
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e01c      	b.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d118      	bne.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a26:	4413      	add	r3, r2
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	011a      	lsls	r2, r3, #4
 8004a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6959      	ldr	r1, [r3, #20]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	891a      	ldrh	r2, [r3, #8]
 8004a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f004 f838 	bl	8008aca <USB_WritePMA>
 8004a5a:	e1e2      	b.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3306      	adds	r3, #6
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d307      	bcc.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a9c:	1ad2      	subs	r2, r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	619a      	str	r2, [r3, #24]
 8004aa2:	e002      	b.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 80c0 	bne.w	8004c34 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d126      	bne.n	8004b0a <HAL_PCD_EP_DB_Transmit+0x482>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad0:	4413      	add	r3, r2
 8004ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	011a      	lsls	r2, r3, #4
 8004ada:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004adc:	4413      	add	r3, r2
 8004ade:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e01a      	b.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d116      	bne.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b26:	4413      	add	r3, r2
 8004b28:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	011a      	lsls	r2, r3, #4
 8004b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b32:	4413      	add	r3, r2
 8004b34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12b      	bne.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b62:	4413      	add	r3, r2
 8004b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	011a      	lsls	r2, r3, #4
 8004b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e017      	b.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d113      	bne.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bbc:	4413      	add	r3, r2
 8004bbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	011a      	lsls	r2, r3, #4
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bc8:	4413      	add	r3, r2
 8004bca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f005 feec 	bl	800a9ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 811a 	bne.w	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c08:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	8013      	strh	r3, [r2, #0]
 8004c32:	e0f6      	b.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	f040 80ca 	bne.w	8004e22 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c96:	441a      	add	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d30b      	bcc.n	8004cce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	621a      	str	r2, [r3, #32]
 8004ccc:	e017      	b.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d108      	bne.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004cd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004ce6:	e00a      	b.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d165      	bne.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d20:	4413      	add	r3, r2
 8004d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011a      	lsls	r2, r3, #4
 8004d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d48:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d4a:	d91d      	bls.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x700>
 8004d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d62:	3b01      	subs	r3, #1
 8004d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	e041      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x784>
 8004d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e032      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x784>
 8004da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x738>
 8004dba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	029b      	lsls	r3, r3, #10
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e019      	b.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x784>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d115      	bne.n	8004e0c <HAL_PCD_EP_DB_Transmit+0x784>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dee:	4413      	add	r3, r2
 8004df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	011a      	lsls	r2, r3, #4
 8004df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e00:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e0a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6959      	ldr	r1, [r3, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	895a      	ldrh	r2, [r3, #10]
 8004e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f003 fe54 	bl	8008aca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3c:	82bb      	strh	r3, [r7, #20]
 8004e3e:	8abb      	ldrh	r3, [r7, #20]
 8004e40:	f083 0310 	eor.w	r3, r3, #16
 8004e44:	82bb      	strh	r3, [r7, #20]
 8004e46:	8abb      	ldrh	r3, [r7, #20]
 8004e48:	f083 0320 	eor.w	r3, r3, #32
 8004e4c:	82bb      	strh	r3, [r7, #20]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	8abb      	ldrh	r3, [r7, #20]
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3790      	adds	r7, #144	@ 0x90
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	817b      	strh	r3, [r7, #10]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e9a:	897b      	ldrh	r3, [r7, #10]
 8004e9c:	f003 0207 	and.w	r2, r3, #7
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e009      	b.n	8004ec6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004eb2:	897a      	ldrh	r2, [r7, #10]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ec6:	893b      	ldrh	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	80da      	strh	r2, [r3, #6]
 8004eda:	e00b      	b.n	8004ef4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e272      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8087 	beq.w	800502e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f20:	4b92      	ldr	r3, [pc, #584]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d00c      	beq.n	8004f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d112      	bne.n	8004f5e <HAL_RCC_OscConfig+0x5e>
 8004f38:	4b8c      	ldr	r3, [pc, #560]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f44:	d10b      	bne.n	8004f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f46:	4b89      	ldr	r3, [pc, #548]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d06c      	beq.n	800502c <HAL_RCC_OscConfig+0x12c>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d168      	bne.n	800502c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e24c      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x76>
 8004f68:	4b80      	ldr	r3, [pc, #512]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e02e      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x98>
 8004f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a7a      	ldr	r2, [pc, #488]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e01d      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0xbc>
 8004fa2:	4b72      	ldr	r3, [pc, #456]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a71      	ldr	r2, [pc, #452]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b6f      	ldr	r3, [pc, #444]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd4>
 8004fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b68      	ldr	r3, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a67      	ldr	r2, [pc, #412]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fd f894 	bl	8002108 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fd f890 	bl	8002108 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e200      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xe4>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fd f880 	bl	8002108 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500c:	f7fd f87c 	bl	8002108 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	@ 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1ec      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	4b53      	ldr	r3, [pc, #332]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x10c>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d063      	beq.n	8005102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800503a:	4b4c      	ldr	r3, [pc, #304]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005046:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b08      	cmp	r3, #8
 8005050:	d11c      	bne.n	800508c <HAL_RCC_OscConfig+0x18c>
 8005052:	4b46      	ldr	r3, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	4b43      	ldr	r3, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_RCC_OscConfig+0x176>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e1c0      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4939      	ldr	r1, [pc, #228]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508a:	e03a      	b.n	8005102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCC_OscConfig+0x270>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd f835 	bl	8002108 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fd f831 	bl	8002108 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e1a1      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b4:	4b2d      	ldr	r3, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b2a      	ldr	r3, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4927      	ldr	r1, [pc, #156]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
 80050d4:	e015      	b.n	8005102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d6:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <HAL_RCC_OscConfig+0x270>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fd f814 	bl	8002108 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e4:	f7fd f810 	bl	8002108 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e180      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03a      	beq.n	8005184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d019      	beq.n	800514a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005116:	4b17      	ldr	r3, [pc, #92]	@ (8005174 <HAL_RCC_OscConfig+0x274>)
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511c:	f7fc fff4 	bl	8002108 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005124:	f7fc fff0 	bl	8002108 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e160      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	4b0d      	ldr	r3, [pc, #52]	@ (800516c <HAL_RCC_OscConfig+0x26c>)
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005142:	2001      	movs	r0, #1
 8005144:	f000 faba 	bl	80056bc <RCC_Delay>
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514a:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <HAL_RCC_OscConfig+0x274>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005150:	f7fc ffda 	bl	8002108 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005156:	e00f      	b.n	8005178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fc ffd6 	bl	8002108 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d908      	bls.n	8005178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e146      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	42420000 	.word	0x42420000
 8005174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b92      	ldr	r3, [pc, #584]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e9      	bne.n	8005158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80a6 	beq.w	80052de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b8b      	ldr	r3, [pc, #556]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4a87      	ldr	r2, [pc, #540]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	61d3      	str	r3, [r2, #28]
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b7f      	ldr	r3, [pc, #508]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a7e      	ldr	r2, [pc, #504]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fc ff97 	bl	8002108 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fc ff93 	bl	8002108 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	@ 0x64
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e103      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b75      	ldr	r3, [pc, #468]	@ (80053c8 <HAL_RCC_OscConfig+0x4c8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x312>
 8005204:	4b6f      	ldr	r3, [pc, #444]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a6e      	ldr	r2, [pc, #440]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	e02d      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x334>
 800521a:	4b6a      	ldr	r3, [pc, #424]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	4a69      	ldr	r2, [pc, #420]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	6213      	str	r3, [r2, #32]
 8005226:	4b67      	ldr	r3, [pc, #412]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	4a66      	ldr	r2, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	6213      	str	r3, [r2, #32]
 8005232:	e01c      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d10c      	bne.n	8005256 <HAL_RCC_OscConfig+0x356>
 800523c:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	4a60      	ldr	r2, [pc, #384]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6213      	str	r3, [r2, #32]
 8005248:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a5d      	ldr	r2, [pc, #372]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6213      	str	r3, [r2, #32]
 8005254:	e00b      	b.n	800526e <HAL_RCC_OscConfig+0x36e>
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a5a      	ldr	r2, [pc, #360]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6213      	str	r3, [r2, #32]
 8005262:	4b58      	ldr	r3, [pc, #352]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4a57      	ldr	r2, [pc, #348]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fc ff47 	bl	8002108 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc ff43 	bl	8002108 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0b1      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	4b4b      	ldr	r3, [pc, #300]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ee      	beq.n	800527e <HAL_RCC_OscConfig+0x37e>
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a2:	f7fc ff31 	bl	8002108 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fc ff2d 	bl	8002108 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e09b      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c0:	4b40      	ldr	r3, [pc, #256]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ee      	bne.n	80052aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b3c      	ldr	r3, [pc, #240]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8087 	beq.w	80053f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e8:	4b36      	ldr	r3, [pc, #216]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d061      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d146      	bne.n	800538a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc ff01 	bl	8002108 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530a:	f7fc fefd 	bl	8002108 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e06d      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800531c:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d108      	bne.n	8005344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005332:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4921      	ldr	r1, [pc, #132]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005344:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a19      	ldr	r1, [r3, #32]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	430b      	orrs	r3, r1
 8005356:	491b      	ldr	r1, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535c:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005362:	f7fc fed1 	bl	8002108 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536a:	f7fc fecd 	bl	8002108 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e03d      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x46a>
 8005388:	e035      	b.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0x4cc>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fc feba 	bl	8002108 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fc feb6 	bl	8002108 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e026      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <HAL_RCC_OscConfig+0x4c4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x498>
 80053b6:	e01e      	b.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e019      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_RCC_OscConfig+0x500>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d106      	bne.n	80053f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000

08005404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0d0      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b6a      	ldr	r3, [pc, #424]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d910      	bls.n	8005448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b67      	ldr	r3, [pc, #412]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 0207 	bic.w	r2, r3, #7
 800542e:	4965      	ldr	r1, [pc, #404]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b63      	ldr	r3, [pc, #396]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0b8      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d020      	beq.n	8005496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a58      	ldr	r2, [pc, #352]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800546a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005478:	4b53      	ldr	r3, [pc, #332]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a52      	ldr	r2, [pc, #328]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005484:	4b50      	ldr	r3, [pc, #320]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	494d      	ldr	r1, [pc, #308]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d040      	beq.n	8005524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	4b47      	ldr	r3, [pc, #284]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d115      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c2:	4b41      	ldr	r3, [pc, #260]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e073      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	4b3d      	ldr	r3, [pc, #244]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06b      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b39      	ldr	r3, [pc, #228]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4936      	ldr	r1, [pc, #216]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7fc fe08 	bl	8002108 <HAL_GetTick>
 80054f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fc fe04 	bl	8002108 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e053      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d210      	bcs.n	8005554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b24      	ldr	r3, [pc, #144]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	4922      	ldr	r1, [pc, #136]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e032      	b.n	80055ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005560:	4b19      	ldr	r3, [pc, #100]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4916      	ldr	r1, [pc, #88]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	490e      	ldr	r1, [pc, #56]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005592:	f000 f821 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005596:	4602      	mov	r2, r0
 8005598:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	490a      	ldr	r1, [pc, #40]	@ (80055cc <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	5ccb      	ldrb	r3, [r1, r3]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <HAL_RCC_ClockConfig+0x1cc>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <HAL_RCC_ClockConfig+0x1d0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc fd66 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40022000 	.word	0x40022000
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800c840 	.word	0x0800c840
 80055d0:	20000000 	.word	0x20000000
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055f2:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d002      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x30>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d003      	beq.n	800560e <HAL_RCC_GetSysClockFreq+0x36>
 8005606:	e027      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800560a:	613b      	str	r3, [r7, #16]
      break;
 800560c:	e027      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005618:	5cd3      	ldrb	r3, [r2, r3]
 800561a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005626:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0c5b      	lsrs	r3, r3, #17
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a0d      	ldr	r2, [pc, #52]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800563a:	fb03 f202 	mul.w	r2, r3, r2
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e004      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <HAL_RCC_GetSysClockFreq+0xa4>)
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	613b      	str	r3, [r7, #16]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800565a:	613b      	str	r3, [r7, #16]
      break;
 800565c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565e:	693b      	ldr	r3, [r7, #16]
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	007a1200 	.word	0x007a1200
 8005674:	0800dd38 	.word	0x0800dd38
 8005678:	0800dd48 	.word	0x0800dd48
 800567c:	003d0900 	.word	0x003d0900

08005680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005684:	4b02      	ldr	r3, [pc, #8]	@ (8005690 <HAL_RCC_GetHCLKFreq+0x10>)
 8005686:	681b      	ldr	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr
 8005690:	20000000 	.word	0x20000000

08005694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005698:	f7ff fff2 	bl	8005680 <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4903      	ldr	r1, [pc, #12]	@ (80056b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40021000 	.word	0x40021000
 80056b8:	0800c850 	.word	0x0800c850

080056bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <RCC_Delay+0x34>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <RCC_Delay+0x38>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056d8:	bf00      	nop
  }
  while (Delay --);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	60fa      	str	r2, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f9      	bne.n	80056d8 <RCC_Delay+0x1c>
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	20000000 	.word	0x20000000
 80056f4:	10624dd3 	.word	0x10624dd3

080056f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d07d      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005714:	2300      	movs	r3, #0
 8005716:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005718:	4b4f      	ldr	r3, [pc, #316]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10d      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	4b4c      	ldr	r3, [pc, #304]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4a4b      	ldr	r2, [pc, #300]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572e:	61d3      	str	r3, [r2, #28]
 8005730:	4b49      	ldr	r3, [pc, #292]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b46      	ldr	r3, [pc, #280]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d118      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574c:	4b43      	ldr	r3, [pc, #268]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a42      	ldr	r2, [pc, #264]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005758:	f7fc fcd6 	bl	8002108 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575e:	e008      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005760:	f7fc fcd2 	bl	8002108 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	@ 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e06d      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005772:	4b3a      	ldr	r3, [pc, #232]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800577e:	4b36      	ldr	r3, [pc, #216]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d02e      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	429a      	cmp	r2, r3
 800579a:	d027      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800579c:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057b2:	4a29      	ldr	r2, [pc, #164]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d014      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fc fca1 	bl	8002108 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c8:	e00a      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fc fc9d 	bl	8002108 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e036      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ee      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4917      	ldr	r1, [pc, #92]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800580e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800581c:	4b0e      	ldr	r3, [pc, #56]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	490b      	ldr	r1, [pc, #44]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582a:	4313      	orrs	r3, r2
 800582c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800583a:	4b07      	ldr	r3, [pc, #28]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	4904      	ldr	r1, [pc, #16]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	40007000 	.word	0x40007000
 8005860:	42420440 	.word	0x42420440

08005864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d001      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e03a      	b.n	80058f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <HAL_TIM_Base_Start_IT+0x98>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x58>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a6:	d009      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x58>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a14      	ldr	r2, [pc, #80]	@ (8005900 <HAL_TIM_Base_Start_IT+0x9c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x58>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a13      	ldr	r2, [pc, #76]	@ (8005904 <HAL_TIM_Base_Start_IT+0xa0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d111      	bne.n	80058e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b06      	cmp	r3, #6
 80058cc:	d010      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	e007      	b.n	80058f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800

08005908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e041      	b.n	800599e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc f850 	bl	80019d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 fb34 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e093      	b.n	8005ae2 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fb ffc0 	bl	8001954 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f000 fada 	bl	8005fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a28:	f023 0303 	bic.w	r3, r3, #3
 8005a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a46:	f023 030c 	bic.w	r3, r3, #12
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	4313      	orrs	r3, r2
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	031b      	lsls	r3, r3, #12
 8005a76:	4313      	orrs	r3, r2
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a84:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	4313      	orrs	r3, r2
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005afa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b0a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b12:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d110      	bne.n	8005b3c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d102      	bne.n	8005b26 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b20:	7b7b      	ldrb	r3, [r7, #13]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e069      	b.n	8005bfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b3a:	e031      	b.n	8005ba0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d110      	bne.n	8005b64 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d102      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b48:	7b3b      	ldrb	r3, [r7, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e055      	b.n	8005bfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b62:	e01d      	b.n	8005ba0 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d108      	bne.n	8005b7c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d105      	bne.n	8005b7c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b70:	7b7b      	ldrb	r3, [r7, #13]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b76:	7b3b      	ldrb	r3, [r7, #12]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d001      	beq.n	8005b80 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e03e      	b.n	8005bfe <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_Encoder_Start+0xc4>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d008      	beq.n	8005bbe <HAL_TIM_Encoder_Start+0xd4>
 8005bac:	e00f      	b.n	8005bce <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fbf2 	bl	80063a0 <TIM_CCxChannelCmd>
      break;
 8005bbc:	e016      	b.n	8005bec <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fbea 	bl	80063a0 <TIM_CCxChannelCmd>
      break;
 8005bcc:	e00e      	b.n	8005bec <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fbe2 	bl	80063a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	2104      	movs	r1, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fbdb 	bl	80063a0 <TIM_CCxChannelCmd>
      break;
 8005bea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01b      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0202 	mvn.w	r2, #2
 8005c3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f994 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005c56:	e005      	b.n	8005c64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f987 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f996 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f06f 0204 	mvn.w	r2, #4
 8005c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f96e 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005ca2:	e005      	b.n	8005cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f961 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f970 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d020      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01b      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0208 	mvn.w	r2, #8
 8005cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f948 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005cee:	e005      	b.n	8005cfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f93b 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f94a 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01b      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0210 	mvn.w	r2, #16
 8005d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2208      	movs	r2, #8
 8005d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f922 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005d3a:	e005      	b.n	8005d48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f915 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f924 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00c      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0201 	mvn.w	r2, #1
 8005d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fb faf3 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d007      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb90 	bl	80064b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00c      	beq.n	8005dba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8f4 	bl	8005fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f06f 0220 	mvn.w	r2, #32
 8005dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb63 	bl	80064a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e0ae      	b.n	8005f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b0c      	cmp	r3, #12
 8005e12:	f200 809f 	bhi.w	8005f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005f55 	.word	0x08005f55
 8005e24:	08005f55 	.word	0x08005f55
 8005e28:	08005f55 	.word	0x08005f55
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005f55 	.word	0x08005f55
 8005e34:	08005f55 	.word	0x08005f55
 8005e38:	08005f55 	.word	0x08005f55
 8005e3c:	08005ed3 	.word	0x08005ed3
 8005e40:	08005f55 	.word	0x08005f55
 8005e44:	08005f55 	.word	0x08005f55
 8005e48:	08005f55 	.word	0x08005f55
 8005e4c:	08005f13 	.word	0x08005f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f91a 	bl	8006090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0208 	orr.w	r2, r2, #8
 8005e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0204 	bic.w	r2, r2, #4
 8005e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	619a      	str	r2, [r3, #24]
      break;
 8005e8e:	e064      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f960 	bl	800615c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6999      	ldr	r1, [r3, #24]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	619a      	str	r2, [r3, #24]
      break;
 8005ed0:	e043      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f9a9 	bl	8006230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0208 	orr.w	r2, r2, #8
 8005eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0204 	bic.w	r2, r2, #4
 8005efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69d9      	ldr	r1, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	61da      	str	r2, [r3, #28]
      break;
 8005f10:	e023      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f9f3 	bl	8006304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69d9      	ldr	r1, [r3, #28]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	021a      	lsls	r2, r3, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	61da      	str	r2, [r3, #28]
      break;
 8005f52:	e002      	b.n	8005f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
      break;
 8005f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006084 <TIM_Base_SetConfig+0xd0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x30>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x30>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8006088 <TIM_Base_SetConfig+0xd4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x30>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a2b      	ldr	r2, [pc, #172]	@ (800608c <TIM_Base_SetConfig+0xd8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a22      	ldr	r2, [pc, #136]	@ (8006084 <TIM_Base_SetConfig+0xd0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <TIM_Base_SetConfig+0x62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006004:	d007      	beq.n	8006016 <TIM_Base_SetConfig+0x62>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a1f      	ldr	r2, [pc, #124]	@ (8006088 <TIM_Base_SetConfig+0xd4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_Base_SetConfig+0x62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <TIM_Base_SetConfig+0xd8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <TIM_Base_SetConfig+0xd0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d103      	bne.n	800605c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]
  }
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800

08006090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 0201 	bic.w	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0302 	bic.w	r3, r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <TIM_OC1_SetConfig+0xc8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10c      	bne.n	8006106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0308 	bic.w	r3, r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a13      	ldr	r2, [pc, #76]	@ (8006158 <TIM_OC1_SetConfig+0xc8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00

0800615c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0210 	bic.w	r2, r3, #16
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0320 	bic.w	r3, r3, #32
 80061a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <TIM_OC2_SetConfig+0xd0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d10d      	bne.n	80061d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a14      	ldr	r2, [pc, #80]	@ (800622c <TIM_OC2_SetConfig+0xd0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d113      	bne.n	8006208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00

08006230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <TIM_OC3_SetConfig+0xd0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d10d      	bne.n	80062aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <TIM_OC3_SetConfig+0xd0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d113      	bne.n	80062da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	621a      	str	r2, [r3, #32]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00

08006304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800634e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0f      	ldr	r2, [pc, #60]	@ (800639c <TIM_OC4_SetConfig+0x98>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00

080063a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2201      	movs	r2, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e046      	b.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a16      	ldr	r2, [pc, #88]	@ (8006498 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644c:	d009      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a12      	ldr	r2, [pc, #72]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a10      	ldr	r2, [pc, #64]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d10c      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4313      	orrs	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800

080064a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4638      	mov	r0, r7
 80064d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006516:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800651a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	b29b      	uxth	r3, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	b29b      	uxth	r3, r3
 800652c:	4013      	ands	r3, r2
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr

08006542 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	4638      	mov	r0, r7
 8006564:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006594:	b480      	push	{r7}
 8006596:	b09d      	sub	sp, #116	@ 0x74
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	78db      	ldrb	r3, [r3, #3]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d81f      	bhi.n	8006606 <USB_ActivateEndpoint+0x72>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <USB_ActivateEndpoint+0x38>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	0800660f 	.word	0x0800660f
 80065d8:	080065eb 	.word	0x080065eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065e8:	e012      	b.n	8006610 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065ee:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80065f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065f6:	e00b      	b.n	8006610 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006600:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006604:	e004      	b.n	8006610 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800660c:	e000      	b.n	8006610 <USB_ActivateEndpoint+0x7c>
      break;
 800660e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800661e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662e:	b29b      	uxth	r3, r3
 8006630:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006648:	b29b      	uxth	r3, r3
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	7b1b      	ldrb	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 8178 	bne.w	8006970 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8084 	beq.w	8006792 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006694:	b29b      	uxth	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	4413      	add	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	011a      	lsls	r2, r3, #4
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	88db      	ldrh	r3, [r3, #6]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	827b      	strh	r3, [r7, #18]
 80066cc:	8a7b      	ldrh	r3, [r7, #18]
 80066ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01b      	beq.n	800670e <USB_ActivateEndpoint+0x17a>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ec:	823b      	strh	r3, [r7, #16]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	8a3b      	ldrh	r3, [r7, #16]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006706:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	78db      	ldrb	r3, [r3, #3]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d020      	beq.n	8006758 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800672c:	81bb      	strh	r3, [r7, #12]
 800672e:	89bb      	ldrh	r3, [r7, #12]
 8006730:	f083 0320 	eor.w	r3, r3, #32
 8006734:	81bb      	strh	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	89bb      	ldrh	r3, [r7, #12]
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
 8006756:	e2d5      	b.n	8006d04 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676e:	81fb      	strh	r3, [r7, #14]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	89fb      	ldrh	r3, [r7, #14]
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
 8006790:	e2b8      	b.n	8006d04 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	633b      	str	r3, [r7, #48]	@ 0x30
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a2:	4413      	add	r3, r2
 80067a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	88db      	ldrh	r3, [r3, #6]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	b29b      	uxth	r3, r3
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	4413      	add	r3, r2
 80067d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	011a      	lsls	r2, r3, #4
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006800:	d91d      	bls.n	800683e <USB_ActivateEndpoint+0x2aa>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <USB_ActivateEndpoint+0x288>
 8006816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006818:	3b01      	subs	r3, #1
 800681a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29a      	uxth	r2, r3
 8006822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006824:	b29b      	uxth	r3, r3
 8006826:	029b      	lsls	r3, r3, #10
 8006828:	b29b      	uxth	r3, r3
 800682a:	4313      	orrs	r3, r2
 800682c:	b29b      	uxth	r3, r3
 800682e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006836:	b29a      	uxth	r2, r3
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e026      	b.n	800688c <USB_ActivateEndpoint+0x2f8>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <USB_ActivateEndpoint+0x2c8>
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006854:	b29a      	uxth	r2, r3
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e017      	b.n	800688c <USB_ActivateEndpoint+0x2f8>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <USB_ActivateEndpoint+0x2e2>
 8006870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006872:	3301      	adds	r3, #1
 8006874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29a      	uxth	r2, r3
 800687c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800687e:	b29b      	uxth	r3, r3
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	b29b      	uxth	r3, r3
 8006884:	4313      	orrs	r3, r2
 8006886:	b29a      	uxth	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	847b      	strh	r3, [r7, #34]	@ 0x22
 800689a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800689c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01b      	beq.n	80068dc <USB_ActivateEndpoint+0x348>
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	843b      	strh	r3, [r7, #32]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	8c3b      	ldrh	r3, [r7, #32]
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d124      	bne.n	800692e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fa:	83bb      	strh	r3, [r7, #28]
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006902:	83bb      	strh	r3, [r7, #28]
 8006904:	8bbb      	ldrh	r3, [r7, #28]
 8006906:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800690a:	83bb      	strh	r3, [r7, #28]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8bbb      	ldrh	r3, [r7, #28]
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
 800692c:	e1ea      	b.n	8006d04 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006944:	83fb      	strh	r3, [r7, #30]
 8006946:	8bfb      	ldrh	r3, [r7, #30]
 8006948:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800694c:	83fb      	strh	r3, [r7, #30]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	8bfb      	ldrh	r3, [r7, #30]
 800695a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800696a:	b29b      	uxth	r3, r3
 800696c:	8013      	strh	r3, [r2, #0]
 800696e:	e1c9      	b.n	8006d04 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d11e      	bne.n	80069b6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]
 80069b4:	e01d      	b.n	80069f2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80069c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a02:	4413      	add	r3, r2
 8006a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	891b      	ldrh	r3, [r3, #8]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a36:	4413      	add	r3, r2
 8006a38:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	011a      	lsls	r2, r3, #4
 8006a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006a48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	895b      	ldrh	r3, [r3, #10]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a58:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 8093 	bne.w	8006b8a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01b      	beq.n	8006ab8 <USB_ActivateEndpoint+0x524>
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006ac6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <USB_ActivateEndpoint+0x574>
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b20:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b22:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b26:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b2e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	441a      	add	r2, r3
 8006b3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b66:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	441a      	add	r2, r3
 8006b72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	8013      	strh	r3, [r2, #0]
 8006b88:	e0bc      	b.n	8006d04 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01d      	beq.n	8006be2 <USB_ActivateEndpoint+0x64e>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006bf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01d      	beq.n	8006c3a <USB_ActivateEndpoint+0x6a6>
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c14:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	78db      	ldrb	r3, [r3, #3]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d024      	beq.n	8006c8c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c60:	f083 0320 	eor.w	r3, r3, #32
 8006c64:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	8013      	strh	r3, [r2, #0]
 8006c8a:	e01d      	b.n	8006cc8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ca2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	441a      	add	r2, r3
 8006cec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3774      	adds	r7, #116	@ 0x74
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b08d      	sub	sp, #52	@ 0x34
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	7b1b      	ldrb	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 808e 	bne.w	8006e44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d044      	beq.n	8006dba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	81bb      	strh	r3, [r7, #12]
 8006d3e:	89bb      	ldrh	r3, [r7, #12]
 8006d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <USB_DeactivateEndpoint+0x6c>
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5e:	817b      	strh	r3, [r7, #10]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d96:	813b      	strh	r3, [r7, #8]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	893b      	ldrh	r3, [r7, #8]
 8006da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
 8006db8:	e192      	b.n	80070e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	827b      	strh	r3, [r7, #18]
 8006dc8:	8a7b      	ldrh	r3, [r7, #18]
 8006dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <USB_DeactivateEndpoint+0xf6>
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de8:	823b      	strh	r3, [r7, #16]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	8a3b      	ldrh	r3, [r7, #16]
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e20:	81fb      	strh	r3, [r7, #14]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	89fb      	ldrh	r3, [r7, #14]
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]
 8006e42:	e14d      	b.n	80070e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 80a5 	bne.w	8006f98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	843b      	strh	r3, [r7, #32]
 8006e5c:	8c3b      	ldrh	r3, [r7, #32]
 8006e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01b      	beq.n	8006e9e <USB_DeactivateEndpoint+0x18a>
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7c:	83fb      	strh	r3, [r7, #30]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	8bfb      	ldrh	r3, [r7, #30]
 8006e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	83bb      	strh	r3, [r7, #28]
 8006eac:	8bbb      	ldrh	r3, [r7, #28]
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d01b      	beq.n	8006eee <USB_DeactivateEndpoint+0x1da>
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ecc:	837b      	strh	r3, [r7, #26]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	8b7b      	ldrh	r3, [r7, #26]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	833b      	strh	r3, [r7, #24]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	441a      	add	r2, r3
 8006f10:	8b3b      	ldrh	r3, [r7, #24]
 8006f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3c:	82fb      	strh	r3, [r7, #22]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8afb      	ldrh	r3, [r7, #22]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f74:	82bb      	strh	r3, [r7, #20]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	441a      	add	r2, r3
 8006f80:	8abb      	ldrh	r3, [r7, #20]
 8006f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	8013      	strh	r3, [r2, #0]
 8006f96:	e0a3      	b.n	80070e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006fa6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <USB_DeactivateEndpoint+0x2d4>
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006ff6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <USB_DeactivateEndpoint+0x324>
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800702c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007030:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007064:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007086:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800709c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	441a      	add	r2, r3
 80070ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070dc:	b29b      	uxth	r3, r3
 80070de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3734      	adds	r7, #52	@ 0x34
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr

080070ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b0c2      	sub	sp, #264	@ 0x108
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fa:	6018      	str	r0, [r3, #0]
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	f040 86b7 	bne.w	8007e86 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d908      	bls.n	8007146 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007144:	e007      	b.n	8007156 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	7b1b      	ldrb	r3, [r3, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d13a      	bne.n	80071dc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6959      	ldr	r1, [r3, #20]
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	88da      	ldrh	r2, [r3, #6]
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007182:	b29b      	uxth	r3, r3
 8007184:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007188:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800718c:	6800      	ldr	r0, [r0, #0]
 800718e:	f001 fc9c 	bl	8008aca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	4413      	add	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	011a      	lsls	r2, r3, #4
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	f000 be1f 	b.w	8007e1a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	f040 8462 	bne.w	8007ab2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a1a      	ldr	r2, [r3, #32]
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	f240 83df 	bls.w	80079ca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800722e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007232:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007264:	b29b      	uxth	r3, r3
 8007266:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a1a      	ldr	r2, [r3, #32]
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 81c7 	beq.w	800763c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d177      	bne.n	80073ba <USB_EPStartXfer+0x2ce>
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	4413      	add	r3, r2
 80072ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	011a      	lsls	r2, r3, #4
 80072fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fe:	4413      	add	r3, r2
 8007300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007310:	b29a      	uxth	r2, r3
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	2b3e      	cmp	r3, #62	@ 0x3e
 800731c:	d921      	bls.n	8007362 <USB_EPStartXfer+0x276>
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <USB_EPStartXfer+0x252>
 8007334:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007338:	3b01      	subs	r3, #1
 800733a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007348:	b29b      	uxth	r3, r3
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	b29b      	uxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b29b      	uxth	r3, r3
 8007352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735a:	b29a      	uxth	r2, r3
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e050      	b.n	8007404 <USB_EPStartXfer+0x318>
 8007362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <USB_EPStartXfer+0x294>
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007378:	b29a      	uxth	r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e041      	b.n	8007404 <USB_EPStartXfer+0x318>
 8007380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d004      	beq.n	80073a0 <USB_EPStartXfer+0x2b4>
 8007396:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800739a:	3301      	adds	r3, #1
 800739c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	029b      	lsls	r3, r3, #10
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4313      	orrs	r3, r2
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e024      	b.n	8007404 <USB_EPStartXfer+0x318>
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d11c      	bne.n	8007404 <USB_EPStartXfer+0x318>
 80073ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d8:	b29b      	uxth	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	4413      	add	r3, r2
 80073e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	011a      	lsls	r2, r3, #4
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	b29a      	uxth	r2, r3
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	895b      	ldrh	r3, [r3, #10]
 8007410:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6959      	ldr	r1, [r3, #20]
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	b29b      	uxth	r3, r3
 8007426:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800742a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800742e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007432:	6800      	ldr	r0, [r0, #0]
 8007434:	f001 fb49 	bl	8008aca <USB_WritePMA>
            ep->xfer_buff += len;
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695a      	ldr	r2, [r3, #20]
 8007444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007448:	441a      	add	r2, r3
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a1a      	ldr	r2, [r3, #32]
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	429a      	cmp	r2, r3
 8007470:	d90f      	bls.n	8007492 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	1ad2      	subs	r2, r2, r3
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	621a      	str	r2, [r3, #32]
 8007490:	e00e      	b.n	80074b0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d177      	bne.n	80075b0 <USB_EPStartXfer+0x4c4>
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074da:	b29b      	uxth	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4413      	add	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	011a      	lsls	r2, r3, #4
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007506:	b29a      	uxth	r2, r3
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	2b3e      	cmp	r3, #62	@ 0x3e
 8007512:	d921      	bls.n	8007558 <USB_EPStartXfer+0x46c>
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	f003 031f 	and.w	r3, r3, #31
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <USB_EPStartXfer+0x448>
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752e:	3b01      	subs	r3, #1
 8007530:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	b29b      	uxth	r3, r3
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	b29b      	uxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	e056      	b.n	8007606 <USB_EPStartXfer+0x51a>
 8007558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <USB_EPStartXfer+0x48a>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800756e:	b29a      	uxth	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	e047      	b.n	8007606 <USB_EPStartXfer+0x51a>
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	085b      	lsrs	r3, r3, #1
 800757c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <USB_EPStartXfer+0x4aa>
 800758c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	029b      	lsls	r3, r3, #10
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4313      	orrs	r3, r2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	e02a      	b.n	8007606 <USB_EPStartXfer+0x51a>
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d122      	bne.n	8007606 <USB_EPStartXfer+0x51a>
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	623b      	str	r3, [r7, #32]
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	4413      	add	r3, r2
 80075e2:	623b      	str	r3, [r7, #32]
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	011a      	lsls	r2, r3, #4
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	b29a      	uxth	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	891b      	ldrh	r3, [r3, #8]
 8007612:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6959      	ldr	r1, [r3, #20]
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007626:	b29b      	uxth	r3, r3
 8007628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800762c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007630:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007634:	6800      	ldr	r0, [r0, #0]
 8007636:	f001 fa48 	bl	8008aca <USB_WritePMA>
 800763a:	e3ee      	b.n	8007e1a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d177      	bne.n	800773c <USB_EPStartXfer+0x650>
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007666:	b29b      	uxth	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800766c:	4413      	add	r3, r2
 800766e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	011a      	lsls	r2, r3, #4
 800767e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007680:	4413      	add	r3, r2
 8007682:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007686:	647b      	str	r3, [r7, #68]	@ 0x44
 8007688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007692:	b29a      	uxth	r2, r3
 8007694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	2b3e      	cmp	r3, #62	@ 0x3e
 800769e:	d921      	bls.n	80076e4 <USB_EPStartXfer+0x5f8>
 80076a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <USB_EPStartXfer+0x5d4>
 80076b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ba:	3b01      	subs	r3, #1
 80076bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	029b      	lsls	r3, r3, #10
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4313      	orrs	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	e056      	b.n	8007792 <USB_EPStartXfer+0x6a6>
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <USB_EPStartXfer+0x616>
 80076ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	e047      	b.n	8007792 <USB_EPStartXfer+0x6a6>
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <USB_EPStartXfer+0x636>
 8007718:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800771c:	3301      	adds	r3, #1
 800771e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800772c:	b29b      	uxth	r3, r3
 800772e:	029b      	lsls	r3, r3, #10
 8007730:	b29b      	uxth	r3, r3
 8007732:	4313      	orrs	r3, r2
 8007734:	b29a      	uxth	r2, r3
 8007736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007738:	801a      	strh	r2, [r3, #0]
 800773a:	e02a      	b.n	8007792 <USB_EPStartXfer+0x6a6>
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d122      	bne.n	8007792 <USB_EPStartXfer+0x6a6>
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	653b      	str	r3, [r7, #80]	@ 0x50
 8007758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776c:	4413      	add	r3, r2
 800776e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	011a      	lsls	r2, r3, #4
 800777e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007780:	4413      	add	r3, r2
 8007782:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778c:	b29a      	uxth	r2, r3
 800778e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	891b      	ldrh	r3, [r3, #8]
 800779e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6959      	ldr	r1, [r3, #20]
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80077b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80077bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077c0:	6800      	ldr	r0, [r0, #0]
 80077c2:	f001 f982 	bl	8008aca <USB_WritePMA>
            ep->xfer_buff += len;
 80077c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d6:	441a      	add	r2, r3
 80077d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6a1a      	ldr	r2, [r3, #32]
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d90f      	bls.n	8007820 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007810:	1ad2      	subs	r2, r2, r3
 8007812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	621a      	str	r2, [r3, #32]
 800781e:	e00e      	b.n	800783e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	643b      	str	r3, [r7, #64]	@ 0x40
 800784a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d177      	bne.n	800794a <USB_EPStartXfer+0x85e>
 800785a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	4413      	add	r3, r2
 800787c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	011a      	lsls	r2, r3, #4
 800788c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788e:	4413      	add	r3, r2
 8007890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34
 8007896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a4:	801a      	strh	r2, [r3, #0]
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80078ac:	d921      	bls.n	80078f2 <USB_EPStartXfer+0x806>
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_EPStartXfer+0x7e2>
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e050      	b.n	8007994 <USB_EPStartXfer+0x8a8>
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USB_EPStartXfer+0x824>
 80078fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007908:	b29a      	uxth	r2, r3
 800790a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	e041      	b.n	8007994 <USB_EPStartXfer+0x8a8>
 8007910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <USB_EPStartXfer+0x844>
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792a:	3301      	adds	r3, #1
 800792c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	801a      	strh	r2, [r3, #0]
 8007948:	e024      	b.n	8007994 <USB_EPStartXfer+0x8a8>
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d11c      	bne.n	8007994 <USB_EPStartXfer+0x8a8>
 800795a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007968:	b29b      	uxth	r3, r3
 800796a:	461a      	mov	r2, r3
 800796c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800796e:	4413      	add	r3, r2
 8007970:	643b      	str	r3, [r7, #64]	@ 0x40
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	011a      	lsls	r2, r3, #4
 8007980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007982:	4413      	add	r3, r2
 8007984:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	b29a      	uxth	r2, r3
 8007990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	895b      	ldrh	r3, [r3, #10]
 80079a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6959      	ldr	r1, [r3, #20]
 80079b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	f001 f881 	bl	8008aca <USB_WritePMA>
 80079c8:	e227      	b.n	8007e1a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a00:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	441a      	add	r2, r3
 8007a1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a56:	4413      	add	r3, r2
 8007a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	011a      	lsls	r2, r3, #4
 8007a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	891b      	ldrh	r3, [r3, #8]
 8007a88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6959      	ldr	r1, [r3, #20]
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007aa2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007aa6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	f001 f80d 	bl	8008aca <USB_WritePMA>
 8007ab0:	e1b3      	b.n	8007e1a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80c6 	beq.w	8007c84 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d177      	bne.n	8007c04 <USB_EPStartXfer+0xb18>
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b34:	4413      	add	r3, r2
 8007b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	011a      	lsls	r2, r3, #4
 8007b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b66:	d921      	bls.n	8007bac <USB_EPStartXfer+0xac0>
 8007b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b76:	f003 031f 	and.w	r3, r3, #31
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <USB_EPStartXfer+0xa9c>
 8007b7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b82:	3b01      	subs	r3, #1
 8007b84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	029b      	lsls	r3, r3, #10
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	e050      	b.n	8007c4e <USB_EPStartXfer+0xb62>
 8007bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10a      	bne.n	8007bca <USB_EPStartXfer+0xade>
 8007bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bc6:	801a      	strh	r2, [r3, #0]
 8007bc8:	e041      	b.n	8007c4e <USB_EPStartXfer+0xb62>
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <USB_EPStartXfer+0xafe>
 8007be0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007be4:	3301      	adds	r3, #1
 8007be6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	029b      	lsls	r3, r3, #10
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e024      	b.n	8007c4e <USB_EPStartXfer+0xb62>
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11c      	bne.n	8007c4e <USB_EPStartXfer+0xb62>
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c28:	4413      	add	r3, r2
 8007c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	895b      	ldrh	r3, [r3, #10]
 8007c5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6959      	ldr	r1, [r3, #20]
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f000 ff24 	bl	8008aca <USB_WritePMA>
 8007c82:	e0ca      	b.n	8007e1a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d177      	bne.n	8007d84 <USB_EPStartXfer+0xc98>
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007cb4:	4413      	add	r3, r2
 8007cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	011a      	lsls	r2, r3, #4
 8007cc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007cc8:	4413      	add	r3, r2
 8007cca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce6:	d921      	bls.n	8007d2c <USB_EPStartXfer+0xc40>
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <USB_EPStartXfer+0xc1c>
 8007cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e05c      	b.n	8007de6 <USB_EPStartXfer+0xcfa>
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <USB_EPStartXfer+0xc5e>
 8007d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e04d      	b.n	8007de6 <USB_EPStartXfer+0xcfa>
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <USB_EPStartXfer+0xc7e>
 8007d60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e030      	b.n	8007de6 <USB_EPStartXfer+0xcfa>
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d128      	bne.n	8007de6 <USB_EPStartXfer+0xcfa>
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007db8:	4413      	add	r3, r2
 8007dba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	011a      	lsls	r2, r3, #4
 8007dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007de4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	891b      	ldrh	r3, [r3, #8]
 8007df2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6959      	ldr	r1, [r3, #20]
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e14:	6800      	ldr	r0, [r0, #0]
 8007e16:	f000 fe58 	bl	8008aca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e40:	817b      	strh	r3, [r7, #10]
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f083 0310 	eor.w	r3, r3, #16
 8007e48:	817b      	strh	r3, [r7, #10]
 8007e4a:	897b      	ldrh	r3, [r7, #10]
 8007e4c:	f083 0320 	eor.w	r3, r3, #32
 8007e50:	817b      	strh	r3, [r7, #10]
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	441a      	add	r2, r3
 8007e6c:	897b      	ldrh	r3, [r7, #10]
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
 8007e82:	f000 bcde 	b.w	8008842 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	7b1b      	ldrb	r3, [r3, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 80bb 	bne.w	800800e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d917      	bls.n	8007ee4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed4:	1ad2      	subs	r2, r2, r3
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	619a      	str	r2, [r3, #24]
 8007ee2:	e00e      	b.n	8007f02 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2200      	movs	r2, #0
 8007f00:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f26:	4413      	add	r3, r2
 8007f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	011a      	lsls	r2, r3, #4
 8007f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f3e:	4413      	add	r3, r2
 8007f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f62:	d924      	bls.n	8007fae <USB_EPStartXfer+0xec2>
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <USB_EPStartXfer+0xe98>
 8007f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	029b      	lsls	r3, r3, #10
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fa8:	801a      	strh	r2, [r3, #0]
 8007faa:	f000 bc10 	b.w	80087ce <USB_EPStartXfer+0x16e2>
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10c      	bne.n	8007fd0 <USB_EPStartXfer+0xee4>
 8007fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	e3fe      	b.n	80087ce <USB_EPStartXfer+0x16e2>
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <USB_EPStartXfer+0xf04>
 8007fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fea:	3301      	adds	r3, #1
 8007fec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	029b      	lsls	r3, r3, #10
 8008000:	b29b      	uxth	r3, r3
 8008002:	4313      	orrs	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e3df      	b.n	80087ce <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800800e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	78db      	ldrb	r3, [r3, #3]
 800801a:	2b02      	cmp	r3, #2
 800801c:	f040 8218 	bne.w	8008450 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f040 809d 	bne.w	800816c <USB_EPStartXfer+0x1080>
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008044:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800804e:	b29b      	uxth	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008056:	4413      	add	r3, r2
 8008058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800805c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	011a      	lsls	r2, r3, #4
 800806a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800806e:	4413      	add	r3, r2
 8008070:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008084:	b29a      	uxth	r2, r3
 8008086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	2b3e      	cmp	r3, #62	@ 0x3e
 800809a:	d92b      	bls.n	80080f4 <USB_EPStartXfer+0x1008>
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <USB_EPStartXfer+0xfe0>
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c6:	3b01      	subs	r3, #1
 80080c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d8:	b29b      	uxth	r3, r3
 80080da:	029b      	lsls	r3, r3, #10
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4313      	orrs	r3, r2
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	e070      	b.n	80081d6 <USB_EPStartXfer+0x10ea>
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <USB_EPStartXfer+0x1032>
 8008104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e05b      	b.n	80081d6 <USB_EPStartXfer+0x10ea>
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <USB_EPStartXfer+0x1062>
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008148:	3301      	adds	r3, #1
 800814a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800814e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815a:	b29b      	uxth	r3, r3
 800815c:	029b      	lsls	r3, r3, #10
 800815e:	b29b      	uxth	r3, r3
 8008160:	4313      	orrs	r3, r2
 8008162:	b29a      	uxth	r2, r3
 8008164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	e034      	b.n	80081d6 <USB_EPStartXfer+0x10ea>
 800816c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d12c      	bne.n	80081d6 <USB_EPStartXfer+0x10ea>
 800817c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800818a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008198:	b29b      	uxth	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081a0:	4413      	add	r3, r2
 80081a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	011a      	lsls	r2, r3, #4
 80081b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081b8:	4413      	add	r3, r2
 80081ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 809d 	bne.w	8008330 <USB_EPStartXfer+0x1244>
 80081f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008212:	b29b      	uxth	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800821a:	4413      	add	r3, r2
 800821c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	011a      	lsls	r2, r3, #4
 800822e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008232:	4413      	add	r3, r2
 8008234:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800823c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008248:	b29a      	uxth	r2, r3
 800824a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800824e:	801a      	strh	r2, [r3, #0]
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b3e      	cmp	r3, #62	@ 0x3e
 800825e:	d92b      	bls.n	80082b8 <USB_EPStartXfer+0x11cc>
 8008260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	095b      	lsrs	r3, r3, #5
 800826e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 031f 	and.w	r3, r3, #31
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <USB_EPStartXfer+0x11a4>
 8008286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800828a:	3b01      	subs	r3, #1
 800828c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29a      	uxth	r2, r3
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e069      	b.n	800838c <USB_EPStartXfer+0x12a0>
 80082b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <USB_EPStartXfer+0x11f6>
 80082c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e054      	b.n	800838c <USB_EPStartXfer+0x12a0>
 80082e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <USB_EPStartXfer+0x1226>
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800830c:	3301      	adds	r3, #1
 800830e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008312:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b29a      	uxth	r2, r3
 800831a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831e:	b29b      	uxth	r3, r3
 8008320:	029b      	lsls	r3, r3, #10
 8008322:	b29b      	uxth	r3, r3
 8008324:	4313      	orrs	r3, r2
 8008326:	b29a      	uxth	r2, r3
 8008328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e02d      	b.n	800838c <USB_EPStartXfer+0x12a0>
 8008330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d125      	bne.n	800838c <USB_EPStartXfer+0x12a0>
 8008340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800834e:	b29b      	uxth	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008356:	4413      	add	r3, r2
 8008358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	011a      	lsls	r2, r3, #4
 800836a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800836e:	4413      	add	r3, r2
 8008370:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008374:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800838a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800838c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 8218 	beq.w	80087ce <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800839e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d005      	beq.n	80083d6 <USB_EPStartXfer+0x12ea>
 80083ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f040 81f5 	bne.w	80087ce <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 81ee 	bne.w	80087ce <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80083f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008418:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800843a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800843e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008446:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800844a:	b29b      	uxth	r3, r3
 800844c:	8013      	strh	r3, [r2, #0]
 800844e:	e1be      	b.n	80087ce <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	78db      	ldrb	r3, [r3, #3]
 800845c:	2b01      	cmp	r3, #1
 800845e:	f040 81b4 	bne.w	80087ca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d917      	bls.n	80084ae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800847e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	619a      	str	r2, [r3, #24]
 80084ac:	e00e      	b.n	80084cc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80084ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2200      	movs	r2, #0
 80084ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8085 	bne.w	80085e8 <USB_EPStartXfer+0x14fc>
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	461a      	mov	r2, r3
 80084fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008502:	4413      	add	r3, r2
 8008504:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	011a      	lsls	r2, r3, #4
 8008516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800851a:	4413      	add	r3, r2
 800851c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008530:	b29a      	uxth	r2, r3
 8008532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853c:	2b3e      	cmp	r3, #62	@ 0x3e
 800853e:	d923      	bls.n	8008588 <USB_EPStartXfer+0x149c>
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <USB_EPStartXfer+0x1474>
 8008556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855a:	3b01      	subs	r3, #1
 800855c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29a      	uxth	r2, r3
 8008568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856c:	b29b      	uxth	r3, r3
 800856e:	029b      	lsls	r3, r3, #10
 8008570:	b29b      	uxth	r3, r3
 8008572:	4313      	orrs	r3, r2
 8008574:	b29b      	uxth	r3, r3
 8008576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857e:	b29a      	uxth	r2, r3
 8008580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008584:	801a      	strh	r2, [r3, #0]
 8008586:	e060      	b.n	800864a <USB_EPStartXfer+0x155e>
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10c      	bne.n	80085aa <USB_EPStartXfer+0x14be>
 8008590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	e04f      	b.n	800864a <USB_EPStartXfer+0x155e>
 80085aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <USB_EPStartXfer+0x14de>
 80085c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c4:	3301      	adds	r3, #1
 80085c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	029b      	lsls	r3, r3, #10
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4313      	orrs	r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085e4:	801a      	strh	r2, [r3, #0]
 80085e6:	e030      	b.n	800864a <USB_EPStartXfer+0x155e>
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d128      	bne.n	800864a <USB_EPStartXfer+0x155e>
 80085f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800860a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008614:	b29b      	uxth	r3, r3
 8008616:	461a      	mov	r2, r3
 8008618:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800861c:	4413      	add	r3, r2
 800861e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	011a      	lsls	r2, r3, #4
 8008630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008634:	4413      	add	r3, r2
 8008636:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800863a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008642:	b29a      	uxth	r2, r3
 8008644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008648:	801a      	strh	r2, [r3, #0]
 800864a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 8085 	bne.w	8008774 <USB_EPStartXfer+0x1688>
 800866a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800868e:	4413      	add	r3, r2
 8008690:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	011a      	lsls	r2, r3, #4
 80086a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80086a6:	4413      	add	r3, r2
 80086a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80086ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086bc:	b29a      	uxth	r2, r3
 80086be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80086ca:	d923      	bls.n	8008714 <USB_EPStartXfer+0x1628>
 80086cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086da:	f003 031f 	and.w	r3, r3, #31
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <USB_EPStartXfer+0x1600>
 80086e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086e6:	3b01      	subs	r3, #1
 80086e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	4313      	orrs	r3, r2
 8008700:	b29b      	uxth	r3, r3
 8008702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870a:	b29a      	uxth	r2, r3
 800870c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e05c      	b.n	80087ce <USB_EPStartXfer+0x16e2>
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10c      	bne.n	8008736 <USB_EPStartXfer+0x164a>
 800871c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e04b      	b.n	80087ce <USB_EPStartXfer+0x16e2>
 8008736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873a:	085b      	lsrs	r3, r3, #1
 800873c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <USB_EPStartXfer+0x166a>
 800874c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008750:	3301      	adds	r3, #1
 8008752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29a      	uxth	r2, r3
 800875e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008762:	b29b      	uxth	r3, r3
 8008764:	029b      	lsls	r3, r3, #10
 8008766:	b29b      	uxth	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b29a      	uxth	r2, r3
 800876c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e02c      	b.n	80087ce <USB_EPStartXfer+0x16e2>
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	785b      	ldrb	r3, [r3, #1]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d124      	bne.n	80087ce <USB_EPStartXfer+0x16e2>
 8008784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008792:	b29b      	uxth	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800879a:	4413      	add	r3, r2
 800879c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	011a      	lsls	r2, r3, #4
 80087ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087c6:	801a      	strh	r2, [r3, #0]
 80087c8:	e001      	b.n	80087ce <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e03a      	b.n	8008844 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008800:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008804:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008808:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800880c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	441a      	add	r2, r3
 800882a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800882e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800883a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d020      	beq.n	80088a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008876:	81bb      	strh	r3, [r7, #12]
 8008878:	89bb      	ldrh	r3, [r7, #12]
 800887a:	f083 0310 	eor.w	r3, r3, #16
 800887e:	81bb      	strh	r3, [r7, #12]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	89bb      	ldrh	r3, [r7, #12]
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]
 80088a0:	e01f      	b.n	80088e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b8:	81fb      	strh	r3, [r7, #14]
 80088ba:	89fb      	ldrh	r3, [r7, #14]
 80088bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088c0:	81fb      	strh	r3, [r7, #14]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	441a      	add	r2, r3
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088de:	b29b      	uxth	r3, r3
 80088e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr

080088ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	7b1b      	ldrb	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 809d 	bne.w	8008a3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d04c      	beq.n	80089a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	823b      	strh	r3, [r7, #16]
 8008918:	8a3b      	ldrh	r3, [r7, #16]
 800891a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01b      	beq.n	800895a <USB_EPClearStall+0x6c>
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008938:	81fb      	strh	r3, [r7, #14]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	441a      	add	r2, r3
 8008944:	89fb      	ldrh	r3, [r7, #14]
 8008946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800894a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800894e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008952:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008956:	b29b      	uxth	r3, r3
 8008958:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	78db      	ldrb	r3, [r3, #3]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d06c      	beq.n	8008a3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008978:	81bb      	strh	r3, [r7, #12]
 800897a:	89bb      	ldrh	r3, [r7, #12]
 800897c:	f083 0320 	eor.w	r3, r3, #32
 8008980:	81bb      	strh	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	89bb      	ldrh	r3, [r7, #12]
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800899a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]
 80089a2:	e04b      	b.n	8008a3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	82fb      	strh	r3, [r7, #22]
 80089b2:	8afb      	ldrh	r3, [r7, #22]
 80089b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01b      	beq.n	80089f4 <USB_EPClearStall+0x106>
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d2:	82bb      	strh	r3, [r7, #20]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	8abb      	ldrh	r3, [r7, #20]
 80089e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0a:	827b      	strh	r3, [r7, #18]
 8008a0c:	8a7b      	ldrh	r3, [r7, #18]
 8008a0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a12:	827b      	strh	r3, [r7, #18]
 8008a14:	8a7b      	ldrh	r3, [r7, #18]
 8008a16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a1a:	827b      	strh	r3, [r7, #18]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	441a      	add	r2, r3
 8008a26:	8a7b      	ldrh	r3, [r7, #18]
 8008a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d103      	bne.n	8008a62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2280      	movs	r2, #128	@ 0x80
 8008a5e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr

08008a6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr

08008a96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr

08008aca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b08b      	sub	sp, #44	@ 0x2c
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	460b      	mov	r3, r1
 8008ada:	80fb      	strh	r3, [r7, #6]
 8008adc:	4613      	mov	r3, r2
 8008ade:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ae0:	88bb      	ldrh	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	085b      	lsrs	r3, r3, #1
 8008ae6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008af0:	88fb      	ldrh	r3, [r7, #6]
 8008af2:	005a      	lsls	r2, r3, #1
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008afc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b02:	e01f      	b.n	8008b44 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b21b      	sxth	r3, r3
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	b21a      	sxth	r2, r3
 8008b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	b21b      	sxth	r3, r3
 8008b1e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	8a7a      	ldrh	r2, [r7, #18]
 8008b24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	3302      	adds	r3, #2
 8008b2a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	3302      	adds	r3, #2
 8008b30:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	3b01      	subs	r3, #1
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1dc      	bne.n	8008b04 <USB_WritePMA+0x3a>
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	372c      	adds	r7, #44	@ 0x2c
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b08b      	sub	sp, #44	@ 0x2c
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	4611      	mov	r1, r2
 8008b62:	461a      	mov	r2, r3
 8008b64:	460b      	mov	r3, r1
 8008b66:	80fb      	strh	r3, [r7, #6]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b6c:	88bb      	ldrh	r3, [r7, #4]
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	005a      	lsls	r2, r3, #1
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8e:	e01b      	b.n	8008bc8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e0      	bne.n	8008b90 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008bce:	88bb      	ldrh	r3, [r7, #4]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d007      	beq.n	8008bea <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	701a      	strb	r2, [r3, #0]
  }
}
 8008bea:	bf00      	nop
 8008bec:	372c      	adds	r7, #44	@ 0x2c
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7c1b      	ldrb	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d115      	bne.n	8008c38 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c10:	2202      	movs	r2, #2
 8008c12:	2181      	movs	r1, #129	@ 0x81
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 ffb4 	bl	800ab82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c24:	2202      	movs	r2, #2
 8008c26:	2101      	movs	r1, #1
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 ffaa 	bl	800ab82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008c36:	e012      	b.n	8008c5e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c38:	2340      	movs	r3, #64	@ 0x40
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	2181      	movs	r1, #129	@ 0x81
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 ff9f 	bl	800ab82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c4a:	2340      	movs	r3, #64	@ 0x40
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 ff96 	bl	800ab82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c5e:	2308      	movs	r3, #8
 8008c60:	2203      	movs	r2, #3
 8008c62:	2182      	movs	r1, #130	@ 0x82
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 ff8c 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c74:	f002 f8ac 	bl	800add0 <USBD_static_malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
 8008c8e:	e026      	b.n	8008cde <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	7c1b      	ldrb	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f002 f84b 	bl	800ad62 <USBD_LL_PrepareReceive>
 8008ccc:	e007      	b.n	8008cde <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cd4:	2340      	movs	r3, #64	@ 0x40
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f002 f842 	bl	800ad62 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cf8:	2181      	movs	r1, #129	@ 0x81
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 ff67 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d06:	2101      	movs	r1, #1
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 ff60 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d16:	2182      	movs	r1, #130	@ 0x82
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 ff58 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f002 f852 	bl	800ade8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d66:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d039      	beq.n	8008df4 <USBD_CDC_Setup+0x9e>
 8008d80:	2b20      	cmp	r3, #32
 8008d82:	d17f      	bne.n	8008e84 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	88db      	ldrh	r3, [r3, #6]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d029      	beq.n	8008de0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	b25b      	sxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	da11      	bge.n	8008dba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008da2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	88d2      	ldrh	r2, [r2, #6]
 8008da8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008daa:	6939      	ldr	r1, [r7, #16]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	88db      	ldrh	r3, [r3, #6]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fa06 	bl	800a1c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008db8:	e06b      	b.n	8008e92 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	785a      	ldrb	r2, [r3, #1]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	88db      	ldrh	r3, [r3, #6]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dd0:	6939      	ldr	r1, [r7, #16]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fa21 	bl	800a220 <USBD_CtlPrepareRx>
      break;
 8008dde:	e058      	b.n	8008e92 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	7850      	ldrb	r0, [r2, #1]
 8008dec:	2200      	movs	r2, #0
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	4798      	blx	r3
      break;
 8008df2:	e04e      	b.n	8008e92 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b0b      	cmp	r3, #11
 8008dfa:	d02e      	beq.n	8008e5a <USBD_CDC_Setup+0x104>
 8008dfc:	2b0b      	cmp	r3, #11
 8008dfe:	dc38      	bgt.n	8008e72 <USBD_CDC_Setup+0x11c>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <USBD_CDC_Setup+0xb4>
 8008e04:	2b0a      	cmp	r3, #10
 8008e06:	d014      	beq.n	8008e32 <USBD_CDC_Setup+0xdc>
 8008e08:	e033      	b.n	8008e72 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d107      	bne.n	8008e24 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e14:	f107 030c 	add.w	r3, r7, #12
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f9d1 	bl	800a1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e22:	e02e      	b.n	8008e82 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 f962 	bl	800a0f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e30:	e027      	b.n	8008e82 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d107      	bne.n	8008e4c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e3c:	f107 030f 	add.w	r3, r7, #15
 8008e40:	2201      	movs	r2, #1
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 f9bd 	bl	800a1c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e4a:	e01a      	b.n	8008e82 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 f94e 	bl	800a0f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e54:	2302      	movs	r3, #2
 8008e56:	75fb      	strb	r3, [r7, #23]
          break;
 8008e58:	e013      	b.n	8008e82 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d00d      	beq.n	8008e80 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f942 	bl	800a0f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e70:	e006      	b.n	8008e80 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 f93b 	bl	800a0f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e7e:	e000      	b.n	8008e82 <USBD_CDC_Setup+0x12c>
          break;
 8008e80:	bf00      	nop
      }
      break;
 8008e82:	e006      	b.n	8008e92 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f001 f932 	bl	800a0f0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	bf00      	nop
  }

  return ret;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008eb6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d03a      	beq.n	8008f38 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ec2:	78fa      	ldrb	r2, [r7, #3]
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	331c      	adds	r3, #28
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d029      	beq.n	8008f2c <USBD_CDC_DataIn+0x90>
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	331c      	adds	r3, #28
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	78f9      	ldrb	r1, [r7, #3]
 8008eec:	68b8      	ldr	r0, [r7, #8]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	4403      	add	r3, r0
 8008ef8:	3320      	adds	r3, #32
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d110      	bne.n	8008f2c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	331c      	adds	r3, #28
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f1e:	78f9      	ldrb	r1, [r7, #3]
 8008f20:	2300      	movs	r3, #0
 8008f22:	2200      	movs	r2, #0
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 fef9 	bl	800ad1c <USBD_LL_Transmit>
 8008f2a:	e003      	b.n	8008f34 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f38:	2302      	movs	r3, #2
  }
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 ff24 	bl	800ada8 <USBD_LL_GetRxDataSize>
 8008f60:	4602      	mov	r2, r0
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00d      	beq.n	8008f8e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f86:	4611      	mov	r1, r2
 8008f88:	4798      	blx	r3

    return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e000      	b.n	8008f90 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f8e:	2302      	movs	r3, #2
  }
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d014      	beq.n	8008fdc <USBD_CDC_EP0_RxReady+0x44>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fb8:	2bff      	cmp	r3, #255	@ 0xff
 8008fba:	d00f      	beq.n	8008fdc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008fca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	22ff      	movs	r2, #255	@ 0xff
 8008fd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2243      	movs	r2, #67	@ 0x43
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000094 	.word	0x20000094

08009008 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2243      	movs	r2, #67	@ 0x43
 8009014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000050 	.word	0x20000050

08009028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2243      	movs	r2, #67	@ 0x43
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	200000d8 	.word	0x200000d8

08009048 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	220a      	movs	r2, #10
 8009054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	bc80      	pop	{r7}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	2000000c 	.word	0x2000000c

08009068 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009072:	2302      	movs	r3, #2
 8009074:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090b2:	88fa      	ldrh	r2, [r7, #6]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr

080090ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01c      	beq.n	8009140 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800910c:	2b00      	cmp	r3, #0
 800910e:	d115      	bne.n	800913c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2201      	movs	r2, #1
 8009114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800912e:	b29b      	uxth	r3, r3
 8009130:	2181      	movs	r1, #129	@ 0x81
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fdf2 	bl	800ad1c <USBD_LL_Transmit>

      return USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e002      	b.n	8009142 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009140:	2302      	movs	r3, #2
  }
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009158:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d017      	beq.n	8009194 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	7c1b      	ldrb	r3, [r3, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d109      	bne.n	8009180 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009176:	2101      	movs	r1, #1
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fdf2 	bl	800ad62 <USBD_LL_PrepareReceive>
 800917e:	e007      	b.n	8009190 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009186:	2340      	movs	r3, #64	@ 0x40
 8009188:	2101      	movs	r1, #1
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fde9 	bl	800ad62 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	e000      	b.n	8009196 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009194:	2302      	movs	r3, #2
  }
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	4613      	mov	r3, r2
 80091aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e01a      	b.n	80091ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	79fa      	ldrb	r2, [r7, #7]
 80091e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 fc57 	bl	800aa98 <USBD_LL_Init>

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
 8009214:	e001      	b.n	800921a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009216:	2302      	movs	r3, #2
 8009218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr

08009226 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 fc8c 	bl	800ab4c <USBD_LL_Start>

  return USBD_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	460b      	mov	r3, r1
 800925c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800925e:	2302      	movs	r3, #2
 8009260:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00c      	beq.n	8009286 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	4611      	mov	r1, r2
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3

  return USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fed8 	bl	800a07e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d016      	beq.n	8009320 <USBD_LL_SetupStage+0x6a>
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d81c      	bhi.n	8009330 <USBD_LL_SetupStage+0x7a>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <USBD_LL_SetupStage+0x4a>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d008      	beq.n	8009310 <USBD_LL_SetupStage+0x5a>
 80092fe:	e017      	b.n	8009330 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f9cb 	bl	80096a4 <USBD_StdDevReq>
      break;
 800930e:	e01a      	b.n	8009346 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa2d 	bl	8009778 <USBD_StdItfReq>
      break;
 800931e:	e012      	b.n	8009346 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa6d 	bl	8009808 <USBD_StdEPReq>
      break;
 800932e:	e00a      	b.n	8009346 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009336:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800933a:	b2db      	uxtb	r3, r3
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 fc64 	bl	800ac0c <USBD_LL_StallEP>
      break;
 8009344:	bf00      	nop
  }

  return USBD_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	460b      	mov	r3, r1
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d14b      	bne.n	80093fc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800936a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009372:	2b03      	cmp	r3, #3
 8009374:	d134      	bne.n	80093e0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d919      	bls.n	80093b6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	1ad2      	subs	r2, r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009398:	429a      	cmp	r2, r3
 800939a:	d203      	bcs.n	80093a4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	e002      	b.n	80093aa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 ff54 	bl	800a25c <USBD_CtlContinueRx>
 80093b4:	e038      	b.n	8009428 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d105      	bne.n	80093d8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 ff51 	bl	800a280 <USBD_CtlSendStatus>
 80093de:	e023      	b.n	8009428 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	d11e      	bne.n	8009428 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093f2:	2100      	movs	r1, #0
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f001 fc09 	bl	800ac0c <USBD_LL_StallEP>
 80093fa:	e015      	b.n	8009428 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800940e:	2b03      	cmp	r3, #3
 8009410:	d108      	bne.n	8009424 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	7afa      	ldrb	r2, [r7, #11]
 800941c:	4611      	mov	r1, r2
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	4798      	blx	r3
 8009422:	e001      	b.n	8009428 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009424:	2302      	movs	r3, #2
 8009426:	e000      	b.n	800942a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	460b      	mov	r3, r1
 800943c:	607a      	str	r2, [r7, #4]
 800943e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d17f      	bne.n	8009546 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3314      	adds	r3, #20
 800944a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009452:	2b02      	cmp	r3, #2
 8009454:	d15c      	bne.n	8009510 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	68da      	ldr	r2, [r3, #12]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	429a      	cmp	r2, r3
 8009460:	d915      	bls.n	800948e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	b29b      	uxth	r3, r3
 8009476:	461a      	mov	r2, r3
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 febe 	bl	800a1fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 fc6b 	bl	800ad62 <USBD_LL_PrepareReceive>
 800948c:	e04e      	b.n	800952c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	6912      	ldr	r2, [r2, #16]
 8009496:	fbb3 f1f2 	udiv	r1, r3, r2
 800949a:	fb01 f202 	mul.w	r2, r1, r2
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11c      	bne.n	80094de <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d316      	bcc.n	80094de <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d20f      	bcs.n	80094de <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fe9a 	bl	800a1fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094d0:	2300      	movs	r3, #0
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f001 fc43 	bl	800ad62 <USBD_LL_PrepareReceive>
 80094dc:	e026      	b.n	800952c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d105      	bne.n	8009500 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009500:	2180      	movs	r1, #128	@ 0x80
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f001 fb82 	bl	800ac0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 fecc 	bl	800a2a6 <USBD_CtlReceiveStatus>
 800950e:	e00d      	b.n	800952c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009516:	2b04      	cmp	r3, #4
 8009518:	d004      	beq.n	8009524 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d103      	bne.n	800952c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009524:	2180      	movs	r1, #128	@ 0x80
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f001 fb70 	bl	800ac0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009532:	2b01      	cmp	r3, #1
 8009534:	d11d      	bne.n	8009572 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fe81 	bl	800923e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009544:	e015      	b.n	8009572 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00d      	beq.n	800956e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009558:	2b03      	cmp	r3, #3
 800955a:	d108      	bne.n	800956e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	7afa      	ldrb	r2, [r7, #11]
 8009566:	4611      	mov	r1, r2
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	4798      	blx	r3
 800956c:	e001      	b.n	8009572 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800956e:	2302      	movs	r3, #2
 8009570:	e000      	b.n	8009574 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009584:	2340      	movs	r3, #64	@ 0x40
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 faf9 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2240      	movs	r2, #64	@ 0x40
 800959c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095a0:	2340      	movs	r3, #64	@ 0x40
 80095a2:	2200      	movs	r2, #0
 80095a4:	2180      	movs	r1, #128	@ 0x80
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 faeb 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2240      	movs	r2, #64	@ 0x40
 80095b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d009      	beq.n	80095f4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6852      	ldr	r2, [r2, #4]
 80095ec:	b2d2      	uxtb	r2, r2
 80095ee:	4611      	mov	r1, r2
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	4798      	blx	r3
  }

  return USBD_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	78fa      	ldrb	r2, [r7, #3]
 800960e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2204      	movs	r2, #4
 8009634:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr

08009644 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009652:	2b04      	cmp	r3, #4
 8009654:	d105      	bne.n	8009662 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800967c:	2b03      	cmp	r3, #3
 800967e:	d10b      	bne.n	8009698 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096ba:	2b40      	cmp	r3, #64	@ 0x40
 80096bc:	d005      	beq.n	80096ca <USBD_StdDevReq+0x26>
 80096be:	2b40      	cmp	r3, #64	@ 0x40
 80096c0:	d84f      	bhi.n	8009762 <USBD_StdDevReq+0xbe>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <USBD_StdDevReq+0x36>
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d14b      	bne.n	8009762 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
      break;
 80096d8:	e048      	b.n	800976c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	785b      	ldrb	r3, [r3, #1]
 80096de:	2b09      	cmp	r3, #9
 80096e0:	d839      	bhi.n	8009756 <USBD_StdDevReq+0xb2>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <USBD_StdDevReq+0x44>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009739 	.word	0x08009739
 80096ec:	0800974d 	.word	0x0800974d
 80096f0:	08009757 	.word	0x08009757
 80096f4:	08009743 	.word	0x08009743
 80096f8:	08009757 	.word	0x08009757
 80096fc:	0800971b 	.word	0x0800971b
 8009700:	08009711 	.word	0x08009711
 8009704:	08009757 	.word	0x08009757
 8009708:	0800972f 	.word	0x0800972f
 800970c:	08009725 	.word	0x08009725
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f9dc 	bl	8009ad0 <USBD_GetDescriptor>
          break;
 8009718:	e022      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb3f 	bl	8009da0 <USBD_SetAddress>
          break;
 8009722:	e01d      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb7e 	bl	8009e28 <USBD_SetConfig>
          break;
 800972c:	e018      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fc07 	bl	8009f44 <USBD_GetConfig>
          break;
 8009736:	e013      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fc37 	bl	8009fae <USBD_GetStatus>
          break;
 8009740:	e00e      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fc65 	bl	800a014 <USBD_SetFeature>
          break;
 800974a:	e009      	b.n	8009760 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fc74 	bl	800a03c <USBD_ClrFeature>
          break;
 8009754:	e004      	b.n	8009760 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fcc9 	bl	800a0f0 <USBD_CtlError>
          break;
 800975e:	bf00      	nop
      }
      break;
 8009760:	e004      	b.n	800976c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fcc3 	bl	800a0f0 <USBD_CtlError>
      break;
 800976a:	bf00      	nop
  }

  return ret;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop

08009778 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800978e:	2b40      	cmp	r3, #64	@ 0x40
 8009790:	d005      	beq.n	800979e <USBD_StdItfReq+0x26>
 8009792:	2b40      	cmp	r3, #64	@ 0x40
 8009794:	d82e      	bhi.n	80097f4 <USBD_StdItfReq+0x7c>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <USBD_StdItfReq+0x26>
 800979a:	2b20      	cmp	r3, #32
 800979c:	d12a      	bne.n	80097f4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a4:	3b01      	subs	r3, #1
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d81d      	bhi.n	80097e6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	889b      	ldrh	r3, [r3, #4]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d813      	bhi.n	80097dc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d110      	bne.n	80097f0 <USBD_StdItfReq+0x78>
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10d      	bne.n	80097f0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fd53 	bl	800a280 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097da:	e009      	b.n	80097f0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc86 	bl	800a0f0 <USBD_CtlError>
          break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fc81 	bl	800a0f0 <USBD_CtlError>
          break;
 80097ee:	e000      	b.n	80097f2 <USBD_StdItfReq+0x7a>
          break;
 80097f0:	bf00      	nop
      }
      break;
 80097f2:	e004      	b.n	80097fe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fc7a 	bl	800a0f0 <USBD_CtlError>
      break;
 80097fc:	bf00      	nop
  }

  return USBD_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009824:	2b40      	cmp	r3, #64	@ 0x40
 8009826:	d007      	beq.n	8009838 <USBD_StdEPReq+0x30>
 8009828:	2b40      	cmp	r3, #64	@ 0x40
 800982a:	f200 8146 	bhi.w	8009aba <USBD_StdEPReq+0x2b2>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00a      	beq.n	8009848 <USBD_StdEPReq+0x40>
 8009832:	2b20      	cmp	r3, #32
 8009834:	f040 8141 	bne.w	8009aba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
      break;
 8009846:	e13d      	b.n	8009ac4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009850:	2b20      	cmp	r3, #32
 8009852:	d10a      	bne.n	800986a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	e12d      	b.n	8009ac6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b03      	cmp	r3, #3
 8009870:	d007      	beq.n	8009882 <USBD_StdEPReq+0x7a>
 8009872:	2b03      	cmp	r3, #3
 8009874:	f300 811b 	bgt.w	8009aae <USBD_StdEPReq+0x2a6>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d072      	beq.n	8009962 <USBD_StdEPReq+0x15a>
 800987c:	2b01      	cmp	r3, #1
 800987e:	d03a      	beq.n	80098f6 <USBD_StdEPReq+0xee>
 8009880:	e115      	b.n	8009aae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009888:	2b02      	cmp	r3, #2
 800988a:	d002      	beq.n	8009892 <USBD_StdEPReq+0x8a>
 800988c:	2b03      	cmp	r3, #3
 800988e:	d015      	beq.n	80098bc <USBD_StdEPReq+0xb4>
 8009890:	e02b      	b.n	80098ea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00c      	beq.n	80098b2 <USBD_StdEPReq+0xaa>
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b80      	cmp	r3, #128	@ 0x80
 800989c:	d009      	beq.n	80098b2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 f9b2 	bl	800ac0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098a8:	2180      	movs	r1, #128	@ 0x80
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 f9ae 	bl	800ac0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098b0:	e020      	b.n	80098f4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fc1b 	bl	800a0f0 <USBD_CtlError>
              break;
 80098ba:	e01b      	b.n	80098f4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	885b      	ldrh	r3, [r3, #2]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10e      	bne.n	80098e2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <USBD_StdEPReq+0xda>
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	2b80      	cmp	r3, #128	@ 0x80
 80098ce:	d008      	beq.n	80098e2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	88db      	ldrh	r3, [r3, #6]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f995 	bl	800ac0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fccc 	bl	800a280 <USBD_CtlSendStatus>

              break;
 80098e8:	e004      	b.n	80098f4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fbff 	bl	800a0f0 <USBD_CtlError>
              break;
 80098f2:	bf00      	nop
          }
          break;
 80098f4:	e0e0      	b.n	8009ab8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d002      	beq.n	8009906 <USBD_StdEPReq+0xfe>
 8009900:	2b03      	cmp	r3, #3
 8009902:	d015      	beq.n	8009930 <USBD_StdEPReq+0x128>
 8009904:	e026      	b.n	8009954 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00c      	beq.n	8009926 <USBD_StdEPReq+0x11e>
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	2b80      	cmp	r3, #128	@ 0x80
 8009910:	d009      	beq.n	8009926 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f978 	bl	800ac0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800991c:	2180      	movs	r1, #128	@ 0x80
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 f974 	bl	800ac0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009924:	e01c      	b.n	8009960 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fbe1 	bl	800a0f0 <USBD_CtlError>
              break;
 800992e:	e017      	b.n	8009960 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	885b      	ldrh	r3, [r3, #2]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d112      	bne.n	800995e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800993e:	2b00      	cmp	r3, #0
 8009940:	d004      	beq.n	800994c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 f97f 	bl	800ac4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fc97 	bl	800a280 <USBD_CtlSendStatus>
              }
              break;
 8009952:	e004      	b.n	800995e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fbca 	bl	800a0f0 <USBD_CtlError>
              break;
 800995c:	e000      	b.n	8009960 <USBD_StdEPReq+0x158>
              break;
 800995e:	bf00      	nop
          }
          break;
 8009960:	e0aa      	b.n	8009ab8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009968:	2b02      	cmp	r3, #2
 800996a:	d002      	beq.n	8009972 <USBD_StdEPReq+0x16a>
 800996c:	2b03      	cmp	r3, #3
 800996e:	d032      	beq.n	80099d6 <USBD_StdEPReq+0x1ce>
 8009970:	e097      	b.n	8009aa2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <USBD_StdEPReq+0x180>
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b80      	cmp	r3, #128	@ 0x80
 800997c:	d004      	beq.n	8009988 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fbb5 	bl	800a0f0 <USBD_CtlError>
                break;
 8009986:	e091      	b.n	8009aac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	da0b      	bge.n	80099a8 <USBD_StdEPReq+0x1a0>
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	3310      	adds	r3, #16
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	3304      	adds	r3, #4
 80099a6:	e00b      	b.n	80099c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	4413      	add	r3, r2
 80099be:	3304      	adds	r3, #4
 80099c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2202      	movs	r2, #2
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fbf8 	bl	800a1c4 <USBD_CtlSendData>
              break;
 80099d4:	e06a      	b.n	8009aac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	da11      	bge.n	8009a02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	f003 020f 	and.w	r2, r3, #15
 80099e4:	6879      	ldr	r1, [r7, #4]
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	440b      	add	r3, r1
 80099f0:	3318      	adds	r3, #24
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d117      	bne.n	8009a28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb78 	bl	800a0f0 <USBD_CtlError>
                  break;
 8009a00:	e054      	b.n	8009aac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	f003 020f 	and.w	r2, r3, #15
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d104      	bne.n	8009a28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fb65 	bl	800a0f0 <USBD_CtlError>
                  break;
 8009a26:	e041      	b.n	8009aac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	da0b      	bge.n	8009a48 <USBD_StdEPReq+0x240>
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	3310      	adds	r3, #16
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	4413      	add	r3, r2
 8009a44:	3304      	adds	r3, #4
 8009a46:	e00b      	b.n	8009a60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a4e:	4613      	mov	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3304      	adds	r3, #4
 8009a60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <USBD_StdEPReq+0x266>
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b80      	cmp	r3, #128	@ 0x80
 8009a6c:	d103      	bne.n	8009a76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	e00e      	b.n	8009a94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a76:	7bbb      	ldrb	r3, [r7, #14]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 f904 	bl	800ac88 <USBD_LL_IsStallEP>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e002      	b.n	8009a94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2202      	movs	r2, #2
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fb92 	bl	800a1c4 <USBD_CtlSendData>
              break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb23 	bl	800a0f0 <USBD_CtlError>
              break;
 8009aaa:	bf00      	nop
          }
          break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb1d 	bl	800a0f0 <USBD_CtlError>
          break;
 8009ab6:	bf00      	nop
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fb17 	bl	800a0f0 <USBD_CtlError>
      break;
 8009ac2:	bf00      	nop
  }

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	885b      	ldrh	r3, [r3, #2]
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	3b01      	subs	r3, #1
 8009af0:	2b06      	cmp	r3, #6
 8009af2:	f200 8128 	bhi.w	8009d46 <USBD_GetDescriptor+0x276>
 8009af6:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <USBD_GetDescriptor+0x2c>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b19 	.word	0x08009b19
 8009b00:	08009b31 	.word	0x08009b31
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009d47 	.word	0x08009d47
 8009b0c:	08009d47 	.word	0x08009d47
 8009b10:	08009ce7 	.word	0x08009ce7
 8009b14:	08009d13 	.word	0x08009d13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
      break;
 8009b2e:	e112      	b.n	8009d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7c1b      	ldrb	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10d      	bne.n	8009b54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	f107 0208 	add.w	r2, r7, #8
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	2202      	movs	r2, #2
 8009b50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b52:	e100      	b.n	8009d56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5c:	f107 0208 	add.w	r2, r7, #8
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	701a      	strb	r2, [r3, #0]
      break;
 8009b6e:	e0f2      	b.n	8009d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	885b      	ldrh	r3, [r3, #2]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	f200 80ac 	bhi.w	8009cd4 <USBD_GetDescriptor+0x204>
 8009b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <USBD_GetDescriptor+0xb4>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009b9d 	.word	0x08009b9d
 8009b88:	08009bd1 	.word	0x08009bd1
 8009b8c:	08009c05 	.word	0x08009c05
 8009b90:	08009c39 	.word	0x08009c39
 8009b94:	08009c6d 	.word	0x08009c6d
 8009b98:	08009ca1 	.word	0x08009ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bbe:	e091      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa94 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e089      	b.n	8009ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	7c12      	ldrb	r2, [r2, #16]
 8009be8:	f107 0108 	add.w	r1, r7, #8
 8009bec:	4610      	mov	r0, r2
 8009bee:	4798      	blx	r3
 8009bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf2:	e077      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fa7a 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	72fb      	strb	r3, [r7, #11]
          break;
 8009c02:	e06f      	b.n	8009ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00b      	beq.n	8009c28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	7c12      	ldrb	r2, [r2, #16]
 8009c1c:	f107 0108 	add.w	r1, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c26:	e05d      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fa60 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	3301      	adds	r3, #1
 8009c34:	72fb      	strb	r3, [r7, #11]
          break;
 8009c36:	e055      	b.n	8009ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7c12      	ldrb	r2, [r2, #16]
 8009c50:	f107 0108 	add.w	r1, r7, #8
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5a:	e043      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fa46 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009c64:	7afb      	ldrb	r3, [r7, #11]
 8009c66:	3301      	adds	r3, #1
 8009c68:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6a:	e03b      	b.n	8009ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7c12      	ldrb	r2, [r2, #16]
 8009c84:	f107 0108 	add.w	r1, r7, #8
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8e:	e029      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa2c 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9e:	e021      	b.n	8009ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	7c12      	ldrb	r2, [r2, #16]
 8009cb8:	f107 0108 	add.w	r1, r7, #8
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4798      	blx	r3
 8009cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cc2:	e00f      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa12 	bl	800a0f0 <USBD_CtlError>
            err++;
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cd2:	e007      	b.n	8009ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa0a 	bl	800a0f0 <USBD_CtlError>
          err++;
 8009cdc:	7afb      	ldrb	r3, [r7, #11]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ce2:	e038      	b.n	8009d56 <USBD_GetDescriptor+0x286>
 8009ce4:	e037      	b.n	8009d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7c1b      	ldrb	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d109      	bne.n	8009d02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf6:	f107 0208 	add.w	r2, r7, #8
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4798      	blx	r3
 8009cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d00:	e029      	b.n	8009d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f9f3 	bl	800a0f0 <USBD_CtlError>
        err++;
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d10:	e021      	b.n	8009d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7c1b      	ldrb	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10d      	bne.n	8009d36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d22:	f107 0208 	add.w	r2, r7, #8
 8009d26:	4610      	mov	r0, r2
 8009d28:	4798      	blx	r3
 8009d2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	2207      	movs	r2, #7
 8009d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d34:	e00f      	b.n	8009d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d36:	6839      	ldr	r1, [r7, #0]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f9d9 	bl	800a0f0 <USBD_CtlError>
        err++;
 8009d3e:	7afb      	ldrb	r3, [r7, #11]
 8009d40:	3301      	adds	r3, #1
 8009d42:	72fb      	strb	r3, [r7, #11]
      break;
 8009d44:	e007      	b.n	8009d56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9d1 	bl	800a0f0 <USBD_CtlError>
      err++;
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
 8009d50:	3301      	adds	r3, #1
 8009d52:	72fb      	strb	r3, [r7, #11]
      break;
 8009d54:	bf00      	nop
  }

  if (err != 0U)
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d11c      	bne.n	8009d96 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d5c:	893b      	ldrh	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d011      	beq.n	8009d86 <USBD_GetDescriptor+0x2b6>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	88db      	ldrh	r3, [r3, #6]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00d      	beq.n	8009d86 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	88da      	ldrh	r2, [r3, #6]
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bf28      	it	cs
 8009d74:	4613      	movcs	r3, r2
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d7a:	893b      	ldrh	r3, [r7, #8]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fa1f 	bl	800a1c4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	88db      	ldrh	r3, [r3, #6]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa76 	bl	800a280 <USBD_CtlSendStatus>
 8009d94:	e000      	b.n	8009d98 <USBD_GetDescriptor+0x2c8>
    return;
 8009d96:	bf00      	nop
    }
  }
}
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop

08009da0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	889b      	ldrh	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d130      	bne.n	8009e14 <USBD_SetAddress+0x74>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	88db      	ldrh	r3, [r3, #6]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d12c      	bne.n	8009e14 <USBD_SetAddress+0x74>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dc0:	d828      	bhi.n	8009e14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	885b      	ldrh	r3, [r3, #2]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d104      	bne.n	8009de2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f988 	bl	800a0f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de0:	e01d      	b.n	8009e1e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7bfa      	ldrb	r2, [r7, #15]
 8009de6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 ff75 	bl	800acde <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fa43 	bl	800a280 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e08:	e009      	b.n	8009e1e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e12:	e004      	b.n	8009e1e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f96a 	bl	800a0f0 <USBD_CtlError>
  }
}
 8009e1c:	bf00      	nop
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	885b      	ldrh	r3, [r3, #2]
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	4b41      	ldr	r3, [pc, #260]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009e3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e3c:	4b40      	ldr	r3, [pc, #256]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d904      	bls.n	8009e4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f952 	bl	800a0f0 <USBD_CtlError>
 8009e4c:	e075      	b.n	8009f3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d002      	beq.n	8009e5e <USBD_SetConfig+0x36>
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d023      	beq.n	8009ea4 <USBD_SetConfig+0x7c>
 8009e5c:	e062      	b.n	8009f24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e5e:	4b38      	ldr	r3, [pc, #224]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d01a      	beq.n	8009e9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e66:	4b36      	ldr	r3, [pc, #216]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2203      	movs	r2, #3
 8009e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e78:	4b31      	ldr	r3, [pc, #196]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff f9e7 	bl	8009252 <USBD_SetClassConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d104      	bne.n	8009e94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f92f 	bl	800a0f0 <USBD_CtlError>
            return;
 8009e92:	e052      	b.n	8009f3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f9f3 	bl	800a280 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e9a:	e04e      	b.n	8009f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f9ef 	bl	800a280 <USBD_CtlSendStatus>
        break;
 8009ea2:	e04a      	b.n	8009f3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009ea4:	4b26      	ldr	r3, [pc, #152]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d112      	bne.n	8009ed2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009eb4:	4b22      	ldr	r3, [pc, #136]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009ebe:	4b20      	ldr	r3, [pc, #128]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff f9e3 	bl	8009290 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f9d8 	bl	800a280 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ed0:	e033      	b.n	8009f3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d01d      	beq.n	8009f1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff f9d1 	bl	8009290 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009eee:	4b14      	ldr	r3, [pc, #80]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ef8:	4b11      	ldr	r3, [pc, #68]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff f9a7 	bl	8009252 <USBD_SetClassConfig>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d104      	bne.n	8009f14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f8ef 	bl	800a0f0 <USBD_CtlError>
            return;
 8009f12:	e012      	b.n	8009f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9b3 	bl	800a280 <USBD_CtlSendStatus>
        break;
 8009f1a:	e00e      	b.n	8009f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9af 	bl	800a280 <USBD_CtlSendStatus>
        break;
 8009f22:	e00a      	b.n	8009f3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f8e2 	bl	800a0f0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f2c:	4b04      	ldr	r3, [pc, #16]	@ (8009f40 <USBD_SetConfig+0x118>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff f9ac 	bl	8009290 <USBD_ClrClassConfig>
        break;
 8009f38:	bf00      	nop
    }
  }
}
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000580 	.word	0x20000580

08009f44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	88db      	ldrh	r3, [r3, #6]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d004      	beq.n	8009f60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f8c9 	bl	800a0f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f5e:	e022      	b.n	8009fa6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dc02      	bgt.n	8009f70 <USBD_GetConfig+0x2c>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	dc03      	bgt.n	8009f76 <USBD_GetConfig+0x32>
 8009f6e:	e015      	b.n	8009f9c <USBD_GetConfig+0x58>
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetConfig+0x48>
 8009f74:	e012      	b.n	8009f9c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	2201      	movs	r2, #1
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f91d 	bl	800a1c4 <USBD_CtlSendData>
        break;
 8009f8a:	e00c      	b.n	8009fa6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	2201      	movs	r2, #1
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f915 	bl	800a1c4 <USBD_CtlSendData>
        break;
 8009f9a:	e004      	b.n	8009fa6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f8a6 	bl	800a0f0 <USBD_CtlError>
        break;
 8009fa4:	bf00      	nop
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d81e      	bhi.n	800a002 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d004      	beq.n	8009fd6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f88e 	bl	800a0f0 <USBD_CtlError>
        break;
 8009fd4:	e01a      	b.n	800a00c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f043 0202 	orr.w	r2, r3, #2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	330c      	adds	r3, #12
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f8e2 	bl	800a1c4 <USBD_CtlSendData>
      break;
 800a000:	e004      	b.n	800a00c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f873 	bl	800a0f0 <USBD_CtlError>
      break;
 800a00a:	bf00      	nop
  }
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d106      	bne.n	800a034 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f926 	bl	800a280 <USBD_CtlSendStatus>
  }
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a04c:	3b01      	subs	r3, #1
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d80b      	bhi.n	800a06a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	885b      	ldrh	r3, [r3, #2]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d10c      	bne.n	800a074 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f90c 	bl	800a280 <USBD_CtlSendStatus>
      }
      break;
 800a068:	e004      	b.n	800a074 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f83f 	bl	800a0f0 <USBD_CtlError>
      break;
 800a072:	e000      	b.n	800a076 <USBD_ClrFeature+0x3a>
      break;
 800a074:	bf00      	nop
  }
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	785a      	ldrb	r2, [r3, #1]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	3302      	adds	r3, #2
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	3303      	adds	r3, #3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4413      	add	r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	3305      	adds	r3, #5
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4413      	add	r3, r2
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	3306      	adds	r3, #6
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	3307      	adds	r3, #7
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	021b      	lsls	r3, r3, #8
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	80da      	strh	r2, [r3, #6]

}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bc80      	pop	{r7}
 800a0ee:	4770      	bx	lr

0800a0f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0fa:	2180      	movs	r1, #128	@ 0x80
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fd85 	bl	800ac0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a102:	2100      	movs	r1, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fd81 	bl	800ac0c <USBD_LL_StallEP>
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d032      	beq.n	800a18e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f834 	bl	800a196 <USBD_GetLen>
 800a12e:	4603      	mov	r3, r0
 800a130:	3301      	adds	r3, #1
 800a132:	b29b      	uxth	r3, r3
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	75fa      	strb	r2, [r7, #23]
 800a142:	461a      	mov	r2, r3
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4413      	add	r3, r2
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	7812      	ldrb	r2, [r2, #0]
 800a14c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	75fa      	strb	r2, [r7, #23]
 800a154:	461a      	mov	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4413      	add	r3, r2
 800a15a:	2203      	movs	r2, #3
 800a15c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a15e:	e012      	b.n	800a186 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	60fa      	str	r2, [r7, #12]
 800a166:	7dfa      	ldrb	r2, [r7, #23]
 800a168:	1c51      	adds	r1, r2, #1
 800a16a:	75f9      	strb	r1, [r7, #23]
 800a16c:	4611      	mov	r1, r2
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	440a      	add	r2, r1
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	75fa      	strb	r2, [r7, #23]
 800a17c:	461a      	mov	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e8      	bne.n	800a160 <USBD_GetString+0x4e>
    }
  }
}
 800a18e:	bf00      	nop
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a1a2:	e005      	b.n	800a1b0 <USBD_GetLen+0x1a>
  {
    len++;
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f5      	bne.n	800a1a4 <USBD_GetLen+0xe>
  }

  return len;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc80      	pop	{r7}
 800a1c2:	4770      	bx	lr

0800a1c4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1da:	88fa      	ldrh	r2, [r7, #6]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1e0:	88fa      	ldrh	r2, [r7, #6]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fd95 	bl	800ad1c <USBD_LL_Transmit>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	4613      	mov	r3, r2
 800a208:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 fd83 	bl	800ad1c <USBD_LL_Transmit>

  return USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2203      	movs	r2, #3
 800a232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a236:	88fa      	ldrh	r2, [r7, #6]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a23e:	88fa      	ldrh	r2, [r7, #6]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	2100      	movs	r1, #0
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f000 fd88 	bl	800ad62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	2100      	movs	r1, #0
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fd76 	bl	800ad62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2204      	movs	r2, #4
 800a28c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a290:	2300      	movs	r3, #0
 800a292:	2200      	movs	r2, #0
 800a294:	2100      	movs	r1, #0
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fd40 	bl	800ad1c <USBD_LL_Transmit>

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2205      	movs	r2, #5
 800a2b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fd50 	bl	800ad62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4912      	ldr	r1, [pc, #72]	@ (800a31c <MX_USB_DEVICE_Init+0x50>)
 800a2d4:	4812      	ldr	r0, [pc, #72]	@ (800a320 <MX_USB_DEVICE_Init+0x54>)
 800a2d6:	f7fe ff62 	bl	800919e <USBD_Init>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2e0:	f7f7 fa94 	bl	800180c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2e4:	490f      	ldr	r1, [pc, #60]	@ (800a324 <MX_USB_DEVICE_Init+0x58>)
 800a2e6:	480e      	ldr	r0, [pc, #56]	@ (800a320 <MX_USB_DEVICE_Init+0x54>)
 800a2e8:	f7fe ff84 	bl	80091f4 <USBD_RegisterClass>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2f2:	f7f7 fa8b 	bl	800180c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2f6:	490c      	ldr	r1, [pc, #48]	@ (800a328 <MX_USB_DEVICE_Init+0x5c>)
 800a2f8:	4809      	ldr	r0, [pc, #36]	@ (800a320 <MX_USB_DEVICE_Init+0x54>)
 800a2fa:	f7fe feb5 	bl	8009068 <USBD_CDC_RegisterInterface>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a304:	f7f7 fa82 	bl	800180c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a308:	4805      	ldr	r0, [pc, #20]	@ (800a320 <MX_USB_DEVICE_Init+0x54>)
 800a30a:	f7fe ff8c 	bl	8009226 <USBD_Start>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a314:	f7f7 fa7a 	bl	800180c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a318:	bf00      	nop
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	2000012c 	.word	0x2000012c
 800a320:	20000584 	.word	0x20000584
 800a324:	20000018 	.word	0x20000018
 800a328:	2000011c 	.word	0x2000011c

0800a32c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a330:	2200      	movs	r2, #0
 800a332:	4905      	ldr	r1, [pc, #20]	@ (800a348 <CDC_Init_FS+0x1c>)
 800a334:	4805      	ldr	r0, [pc, #20]	@ (800a34c <CDC_Init_FS+0x20>)
 800a336:	f7fe fead 	bl	8009094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a33a:	4905      	ldr	r1, [pc, #20]	@ (800a350 <CDC_Init_FS+0x24>)
 800a33c:	4803      	ldr	r0, [pc, #12]	@ (800a34c <CDC_Init_FS+0x20>)
 800a33e:	f7fe fec2 	bl	80090c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a342:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a344:	4618      	mov	r0, r3
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20000c48 	.word	0x20000c48
 800a34c:	20000584 	.word	0x20000584
 800a350:	20000848 	.word	0x20000848

0800a354 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a358:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr
	...

0800a364 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	6039      	str	r1, [r7, #0]
 800a36e:	71fb      	strb	r3, [r7, #7]
 800a370:	4613      	mov	r3, r2
 800a372:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	2b23      	cmp	r3, #35	@ 0x23
 800a378:	d84a      	bhi.n	800a410 <CDC_Control_FS+0xac>
 800a37a:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <CDC_Control_FS+0x1c>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a411 	.word	0x0800a411
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a411 	.word	0x0800a411
 800a38c:	0800a411 	.word	0x0800a411
 800a390:	0800a411 	.word	0x0800a411
 800a394:	0800a411 	.word	0x0800a411
 800a398:	0800a411 	.word	0x0800a411
 800a39c:	0800a411 	.word	0x0800a411
 800a3a0:	0800a411 	.word	0x0800a411
 800a3a4:	0800a411 	.word	0x0800a411
 800a3a8:	0800a411 	.word	0x0800a411
 800a3ac:	0800a411 	.word	0x0800a411
 800a3b0:	0800a411 	.word	0x0800a411
 800a3b4:	0800a411 	.word	0x0800a411
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a411 	.word	0x0800a411
 800a3c4:	0800a411 	.word	0x0800a411
 800a3c8:	0800a411 	.word	0x0800a411
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a411 	.word	0x0800a411
 800a3d4:	0800a411 	.word	0x0800a411
 800a3d8:	0800a411 	.word	0x0800a411
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a411 	.word	0x0800a411
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a411 	.word	0x0800a411
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a411 	.word	0x0800a411
 800a3fc:	0800a411 	.word	0x0800a411
 800a400:	0800a411 	.word	0x0800a411
 800a404:	0800a411 	.word	0x0800a411
 800a408:	0800a411 	.word	0x0800a411
 800a40c:	0800a411 	.word	0x0800a411
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a410:	bf00      	nop
  }

  return (USBD_OK);
 800a412:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	bc80      	pop	{r7}
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop

0800a420 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b09e      	sub	sp, #120	@ 0x78
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static char rx_buffer[64]; // Буфер для сборки команды
		static uint8_t rx_index = 0; // Индекс текуцей позиции
		    // Обработка всех принятых байт
		    for (uint32_t i = 0; i < *Len; i++) {
 800a42a:	2300      	movs	r3, #0
 800a42c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a42e:	e106      	b.n	800a63e <CDC_Receive_FS+0x21e>
		        char byte = Buf[i]; // Чтение байта
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a434:	4413      	add	r3, r2
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		        // Если конец строки или буфер переполен - заканчиваем строку
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 800a43c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a440:	2b0a      	cmp	r3, #10
 800a442:	d004      	beq.n	800a44e <CDC_Receive_FS+0x2e>
 800a444:	4b87      	ldr	r3, [pc, #540]	@ (800a664 <CDC_Receive_FS+0x244>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b3e      	cmp	r3, #62	@ 0x3e
 800a44a:	f240 80ea 	bls.w	800a622 <CDC_Receive_FS+0x202>
		            rx_buffer[rx_index] = '\0';
 800a44e:	4b85      	ldr	r3, [pc, #532]	@ (800a664 <CDC_Receive_FS+0x244>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	4b84      	ldr	r3, [pc, #528]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a456:	2100      	movs	r1, #0
 800a458:	5499      	strb	r1, [r3, r2]
		            // Обработка команды частоты: F<канал>:<частота>
		                     if (rx_buffer[0] == 'F') {
 800a45a:	4b83      	ldr	r3, [pc, #524]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b46      	cmp	r3, #70	@ 0x46
 800a460:	d17e      	bne.n	800a560 <CDC_Receive_FS+0x140>
		                         uint8_t ch = rx_buffer[1] - '0';
 800a462:	4b81      	ldr	r3, [pc, #516]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	3b30      	subs	r3, #48	@ 0x30
 800a468:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a46c:	4b7e      	ldr	r3, [pc, #504]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a46e:	789b      	ldrb	r3, [r3, #2]
 800a470:	2b3a      	cmp	r3, #58	@ 0x3a
 800a472:	d170      	bne.n	800a556 <CDC_Receive_FS+0x136>
 800a474:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d86c      	bhi.n	800a556 <CDC_Receive_FS+0x136>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 800a47c:	487b      	ldr	r0, [pc, #492]	@ (800a66c <CDC_Receive_FS+0x24c>)
 800a47e:	f000 fcf3 	bl	800ae68 <atoi>
 800a482:	4603      	mov	r3, r0
 800a484:	65fb      	str	r3, [r7, #92]	@ 0x5c
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 800a486:	4879      	ldr	r0, [pc, #484]	@ (800a66c <CDC_Receive_FS+0x24c>)
 800a488:	f000 fcee 	bl	800ae68 <atoi>
 800a48c:	4603      	mov	r3, r0
 800a48e:	65bb      	str	r3, [r7, #88]	@ 0x58
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a492:	2b00      	cmp	r3, #0
 800a494:	d038      	beq.n	800a508 <CDC_Receive_FS+0xe8>
 800a496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a498:	4a75      	ldr	r2, [pc, #468]	@ (800a670 <CDC_Receive_FS+0x250>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d834      	bhi.n	800a508 <CDC_Receive_FS+0xe8>
		                            	 //si5351_enableOutputs(0xFF);
		                            	 extern int freq[3];
		                            	 extern void print_interface_mode0(void);

		                            	 extern void int_to_str(int num, char *str);
		                            	 freq[ch] = set_freq / 1000;
 800a49e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4a0:	4a74      	ldr	r2, [pc, #464]	@ (800a674 <CDC_Receive_FS+0x254>)
 800a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a6:	099a      	lsrs	r2, r3, #6
 800a4a8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4a72      	ldr	r2, [pc, #456]	@ (800a678 <CDC_Receive_FS+0x258>)
 800a4b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 800a4b4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a4b8:	4a6f      	ldr	r2, [pc, #444]	@ (800a678 <CDC_Receive_FS+0x258>)
 800a4ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a4be:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	1a9b      	subs	r3, r3, r2
 800a4c8:	4a6c      	ldr	r2, [pc, #432]	@ (800a67c <CDC_Receive_FS+0x25c>)
 800a4ca:	4413      	add	r3, r2
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	f7f6 fadb 	bl	8000a88 <int_to_str>
		                            	 print_interface_mode0();
 800a4d2:	f7f6 fbdb 	bl	8000c8c <print_interface_mode0>
		                            	 char msg[64];
		                            	 // Формируем и отправляем сообщение с установленной частотой
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 800a4d6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a4da:	f107 000c 	add.w	r0, r7, #12
 800a4de:	4a66      	ldr	r2, [pc, #408]	@ (800a678 <CDC_Receive_FS+0x258>)
 800a4e0:	9200      	str	r2, [sp, #0]
 800a4e2:	4a67      	ldr	r2, [pc, #412]	@ (800a680 <CDC_Receive_FS+0x260>)
 800a4e4:	2140      	movs	r1, #64	@ 0x40
 800a4e6:	f000 fd47 	bl	800af78 <sniprintf>
		                            	 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a4ea:	f107 030c 	add.w	r3, r7, #12
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f5 fe2e 	bl	8000150 <strlen>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	f107 030c 	add.w	r3, r7, #12
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f8d4 	bl	800a6ac <CDC_Transmit_FS>
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a504:	bf00      	nop
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a506:	e088      	b.n	800a61a <CDC_Receive_FS+0x1fa>
		                             } else if (freq == 0) {
 800a508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d11e      	bne.n	800a54c <CDC_Receive_FS+0x12c>
		                            	 // Если частота = 0 - отключение выходного канала
		                                 uint8_t disable_mask = ~(1 << ch);
 800a50e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a512:	2201      	movs	r2, #1
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	43db      	mvns	r3, r3
 800a51c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		                                 //si5351_enableOutputs(disable_mask);
		                                 char msg[32];
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 800a520:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a524:	f107 000c 	add.w	r0, r7, #12
 800a528:	4a56      	ldr	r2, [pc, #344]	@ (800a684 <CDC_Receive_FS+0x264>)
 800a52a:	2120      	movs	r1, #32
 800a52c:	f000 fd24 	bl	800af78 <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a530:	f107 030c 	add.w	r3, r7, #12
 800a534:	4618      	mov	r0, r3
 800a536:	f7f5 fe0b 	bl	8000150 <strlen>
 800a53a:	4603      	mov	r3, r0
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	f107 030c 	add.w	r3, r7, #12
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f8b1 	bl	800a6ac <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a54a:	e066      	b.n	800a61a <CDC_Receive_FS+0x1fa>
		                             } else {
		                            	 // Проверка неправильного ввода частоты
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 800a54c:	2114      	movs	r1, #20
 800a54e:	484e      	ldr	r0, [pc, #312]	@ (800a688 <CDC_Receive_FS+0x268>)
 800a550:	f000 f8ac 	bl	800a6ac <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a554:	e061      	b.n	800a61a <CDC_Receive_FS+0x1fa>
		                             }
		                         } else {
		                        	 // Проверка неправильного формата команды
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 800a556:	2111      	movs	r1, #17
 800a558:	484c      	ldr	r0, [pc, #304]	@ (800a68c <CDC_Receive_FS+0x26c>)
 800a55a:	f000 f8a7 	bl	800a6ac <CDC_Transmit_FS>
 800a55e:	e05c      	b.n	800a61a <CDC_Receive_FS+0x1fa>
		                         }
		                     }
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 800a560:	2204      	movs	r2, #4
 800a562:	494b      	ldr	r1, [pc, #300]	@ (800a690 <CDC_Receive_FS+0x270>)
 800a564:	4840      	ldr	r0, [pc, #256]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a566:	f000 fd45 	bl	800aff4 <strncmp>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d116      	bne.n	800a59e <CDC_Receive_FS+0x17e>
		                // Команда проверки связи
		                char msg[] = "Normally\r\n";
 800a570:	4a48      	ldr	r2, [pc, #288]	@ (800a694 <CDC_Receive_FS+0x274>)
 800a572:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a576:	ca07      	ldmia	r2, {r0, r1, r2}
 800a578:	c303      	stmia	r3!, {r0, r1}
 800a57a:	801a      	strh	r2, [r3, #0]
 800a57c:	3302      	adds	r3, #2
 800a57e:	0c12      	lsrs	r2, r2, #16
 800a580:	701a      	strb	r2, [r3, #0]
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a582:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a586:	4618      	mov	r0, r3
 800a588:	f7f5 fde2 	bl	8000150 <strlen>
 800a58c:	4603      	mov	r3, r0
 800a58e:	b29a      	uxth	r2, r3
 800a590:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f888 	bl	800a6ac <CDC_Transmit_FS>
 800a59c:	e03d      	b.n	800a61a <CDC_Receive_FS+0x1fa>
		            }
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 800a59e:	2206      	movs	r2, #6
 800a5a0:	493d      	ldr	r1, [pc, #244]	@ (800a698 <CDC_Receive_FS+0x278>)
 800a5a2:	4831      	ldr	r0, [pc, #196]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a5a4:	f000 fd26 	bl	800aff4 <strncmp>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d135      	bne.n	800a61a <CDC_Receive_FS+0x1fa>
		                extern int freq[3];  // частоты каналов, кГц
		                char msg[64];
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a5b4:	e02d      	b.n	800a612 <CDC_Receive_FS+0x1f2>
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800a5b6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a5ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a678 <CDC_Receive_FS+0x258>)
 800a5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dd01      	ble.n	800a5c8 <CDC_Receive_FS+0x1a8>
 800a5c4:	4b35      	ldr	r3, [pc, #212]	@ (800a69c <CDC_Receive_FS+0x27c>)
 800a5c6:	e000      	b.n	800a5ca <CDC_Receive_FS+0x1aa>
 800a5c8:	4b35      	ldr	r3, [pc, #212]	@ (800a6a0 <CDC_Receive_FS+0x280>)
 800a5ca:	667b      	str	r3, [r7, #100]	@ 0x64
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800a5cc:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800a5d0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a5d4:	4928      	ldr	r1, [pc, #160]	@ (800a678 <CDC_Receive_FS+0x258>)
 800a5d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a5da:	f107 000c 	add.w	r0, r7, #12
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	4a2f      	ldr	r2, [pc, #188]	@ (800a6a4 <CDC_Receive_FS+0x284>)
 800a5e8:	2140      	movs	r1, #64	@ 0x40
 800a5ea:	f000 fcc5 	bl	800af78 <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a5ee:	f107 030c 	add.w	r3, r7, #12
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f5 fdac 	bl	8000150 <strlen>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f107 030c 	add.w	r3, r7, #12
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f000 f852 	bl	800a6ac <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a608:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a60c:	3301      	adds	r3, #1
 800a60e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a612:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a616:	2b02      	cmp	r3, #2
 800a618:	d9cd      	bls.n	800a5b6 <CDC_Receive_FS+0x196>
		                }
		            }
		            rx_index = 0; // Очищаем буфер
 800a61a:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <CDC_Receive_FS+0x244>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]
 800a620:	e00a      	b.n	800a638 <CDC_Receive_FS+0x218>

		        } else {
		            rx_buffer[rx_index++] = byte;
 800a622:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <CDC_Receive_FS+0x244>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	b2d1      	uxtb	r1, r2
 800a62a:	4a0e      	ldr	r2, [pc, #56]	@ (800a664 <CDC_Receive_FS+0x244>)
 800a62c:	7011      	strb	r1, [r2, #0]
 800a62e:	4619      	mov	r1, r3
 800a630:	4a0d      	ldr	r2, [pc, #52]	@ (800a668 <CDC_Receive_FS+0x248>)
 800a632:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a636:	5453      	strb	r3, [r2, r1]
		    for (uint32_t i = 0; i < *Len; i++) {
 800a638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a63a:	3301      	adds	r3, #1
 800a63c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a644:	429a      	cmp	r2, r3
 800a646:	f4ff aef3 	bcc.w	800a430 <CDC_Receive_FS+0x10>
		        }
		    }

		    // Запускаем приём следующего пакета
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	4816      	ldr	r0, [pc, #88]	@ (800a6a8 <CDC_Receive_FS+0x288>)
 800a64e:	f7fe fd3a 	bl	80090c6 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a652:	4815      	ldr	r0, [pc, #84]	@ (800a6a8 <CDC_Receive_FS+0x288>)
 800a654:	f7fe fd79 	bl	800914a <USBD_CDC_ReceivePacket>
		    return (USBD_OK);
 800a658:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3770      	adds	r7, #112	@ 0x70
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20001048 	.word	0x20001048
 800a668:	2000104c 	.word	0x2000104c
 800a66c:	2000104f 	.word	0x2000104f
 800a670:	08f0d17f 	.word	0x08f0d17f
 800a674:	10624dd3 	.word	0x10624dd3
 800a678:	20000324 	.word	0x20000324
 800a67c:	20000338 	.word	0x20000338
 800a680:	0800c770 	.word	0x0800c770
 800a684:	0800c788 	.word	0x0800c788
 800a688:	0800c798 	.word	0x0800c798
 800a68c:	0800c7ac 	.word	0x0800c7ac
 800a690:	0800c7c0 	.word	0x0800c7c0
 800a694:	0800c7f0 	.word	0x0800c7f0
 800a698:	0800c7cc 	.word	0x0800c7cc
 800a69c:	0800c7d4 	.word	0x0800c7d4
 800a6a0:	0800c7d8 	.word	0x0800c7d8
 800a6a4:	0800c7dc 	.word	0x0800c7dc
 800a6a8:	20000584 	.word	0x20000584

0800a6ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e00b      	b.n	800a6ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6d2:	887b      	ldrh	r3, [r7, #2]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4806      	ldr	r0, [pc, #24]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6da:	f7fe fcdb 	bl	8009094 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6de:	4805      	ldr	r0, [pc, #20]	@ (800a6f4 <CDC_Transmit_FS+0x48>)
 800a6e0:	f7fe fd04 	bl	80090ec <USBD_CDC_TransmitPacket>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000584 	.word	0x20000584

0800a6f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2212      	movs	r2, #18
 800a708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a70a:	4b03      	ldr	r3, [pc, #12]	@ (800a718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	bc80      	pop	{r7}
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	20000148 	.word	0x20000148

0800a71c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2204      	movs	r2, #4
 800a72c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a72e:	4b03      	ldr	r3, [pc, #12]	@ (800a73c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	bc80      	pop	{r7}
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	2000015c 	.word	0x2000015c

0800a740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4907      	ldr	r1, [pc, #28]	@ (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
 800a756:	4808      	ldr	r0, [pc, #32]	@ (800a778 <USBD_FS_ProductStrDescriptor+0x38>)
 800a758:	f7ff fcdb 	bl	800a112 <USBD_GetString>
 800a75c:	e004      	b.n	800a768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	4904      	ldr	r1, [pc, #16]	@ (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
 800a762:	4805      	ldr	r0, [pc, #20]	@ (800a778 <USBD_FS_ProductStrDescriptor+0x38>)
 800a764:	f7ff fcd5 	bl	800a112 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a768:	4b02      	ldr	r3, [pc, #8]	@ (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	2000108c 	.word	0x2000108c
 800a778:	0800c7fc 	.word	0x0800c7fc

0800a77c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	4904      	ldr	r1, [pc, #16]	@ (800a79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a78c:	4804      	ldr	r0, [pc, #16]	@ (800a7a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a78e:	f7ff fcc0 	bl	800a112 <USBD_GetString>
  return USBD_StrDesc;
 800a792:	4b02      	ldr	r3, [pc, #8]	@ (800a79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	2000108c 	.word	0x2000108c
 800a7a0:	0800c810 	.word	0x0800c810

0800a7a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	221a      	movs	r2, #26
 800a7b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7b6:	f000 f843 	bl	800a840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7ba:	4b02      	ldr	r3, [pc, #8]	@ (800a7c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000160 	.word	0x20000160

0800a7c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4907      	ldr	r1, [pc, #28]	@ (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7de:	4808      	ldr	r0, [pc, #32]	@ (800a800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7e0:	f7ff fc97 	bl	800a112 <USBD_GetString>
 800a7e4:	e004      	b.n	800a7f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4904      	ldr	r1, [pc, #16]	@ (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ea:	4805      	ldr	r0, [pc, #20]	@ (800a800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7ec:	f7ff fc91 	bl	800a112 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f0:	4b02      	ldr	r3, [pc, #8]	@ (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	2000108c 	.word	0x2000108c
 800a800:	0800c824 	.word	0x0800c824

0800a804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d105      	bne.n	800a822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4907      	ldr	r1, [pc, #28]	@ (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a81a:	4808      	ldr	r0, [pc, #32]	@ (800a83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a81c:	f7ff fc79 	bl	800a112 <USBD_GetString>
 800a820:	e004      	b.n	800a82c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4904      	ldr	r1, [pc, #16]	@ (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a826:	4805      	ldr	r0, [pc, #20]	@ (800a83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a828:	f7ff fc73 	bl	800a112 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a82c:	4b02      	ldr	r3, [pc, #8]	@ (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2000108c 	.word	0x2000108c
 800a83c:	0800c830 	.word	0x0800c830

0800a840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a846:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <Get_SerialNum+0x44>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a84c:	4b0e      	ldr	r3, [pc, #56]	@ (800a888 <Get_SerialNum+0x48>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a852:	4b0e      	ldr	r3, [pc, #56]	@ (800a88c <Get_SerialNum+0x4c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a866:	2208      	movs	r2, #8
 800a868:	4909      	ldr	r1, [pc, #36]	@ (800a890 <Get_SerialNum+0x50>)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f814 	bl	800a898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a870:	2204      	movs	r2, #4
 800a872:	4908      	ldr	r1, [pc, #32]	@ (800a894 <Get_SerialNum+0x54>)
 800a874:	68b8      	ldr	r0, [r7, #8]
 800a876:	f000 f80f 	bl	800a898 <IntToUnicode>
  }
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	1ffff7e8 	.word	0x1ffff7e8
 800a888:	1ffff7ec 	.word	0x1ffff7ec
 800a88c:	1ffff7f0 	.word	0x1ffff7f0
 800a890:	20000162 	.word	0x20000162
 800a894:	20000172 	.word	0x20000172

0800a898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]
 800a8ae:	e027      	b.n	800a900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	0f1b      	lsrs	r3, r3, #28
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d80b      	bhi.n	800a8d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	0f1b      	lsrs	r3, r3, #28
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	7dfb      	ldrb	r3, [r7, #23]
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3230      	adds	r2, #48	@ 0x30
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e00a      	b.n	800a8e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	0f1b      	lsrs	r3, r3, #28
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	440b      	add	r3, r1
 800a8e0:	3237      	adds	r2, #55	@ 0x37
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	011b      	lsls	r3, r3, #4
 800a8ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
 800a900:	7dfa      	ldrb	r2, [r7, #23]
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	429a      	cmp	r2, r3
 800a906:	d3d3      	bcc.n	800a8b0 <IntToUnicode+0x18>
  }
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc80      	pop	{r7}
 800a912:	4770      	bx	lr

0800a914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0d      	ldr	r2, [pc, #52]	@ (800a958 <HAL_PCD_MspInit+0x44>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d113      	bne.n	800a94e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a926:	4b0d      	ldr	r3, [pc, #52]	@ (800a95c <HAL_PCD_MspInit+0x48>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	4a0c      	ldr	r2, [pc, #48]	@ (800a95c <HAL_PCD_MspInit+0x48>)
 800a92c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a930:	61d3      	str	r3, [r2, #28]
 800a932:	4b0a      	ldr	r3, [pc, #40]	@ (800a95c <HAL_PCD_MspInit+0x48>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a93e:	2200      	movs	r2, #0
 800a940:	2100      	movs	r1, #0
 800a942:	2014      	movs	r0, #20
 800a944:	f7f7 fce5 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a948:	2014      	movs	r0, #20
 800a94a:	f7f7 fcfe 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a94e:	bf00      	nop
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	40005c00 	.word	0x40005c00
 800a95c:	40021000 	.word	0x40021000

0800a960 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a974:	4619      	mov	r1, r3
 800a976:	4610      	mov	r0, r2
 800a978:	f7fe fc9d 	bl	80092b6 <USBD_LL_SetupStage>
}
 800a97c:	bf00      	nop
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a996:	78fa      	ldrb	r2, [r7, #3]
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	440b      	add	r3, r1
 800a9a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f7fe fccf 	bl	8009350 <USBD_LL_DataOutStage>
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a9cc:	78fa      	ldrb	r2, [r7, #3]
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	440b      	add	r3, r1
 800a9da:	3324      	adds	r3, #36	@ 0x24
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f7fe fd26 	bl	8009432 <USBD_LL_DataInStage>
}
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fe36 	bl	800966e <USBD_LL_SOF>
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa12:	2301      	movs	r3, #1
 800aa14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	799b      	ldrb	r3, [r3, #6]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d001      	beq.n	800aa22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa1e:	f7f6 fef5 	bl	800180c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa28:	7bfa      	ldrb	r2, [r7, #15]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fe fde6 	bl	80095fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7fe fd9f 	bl	800957c <USBD_LL_Reset>
}
 800aa3e:	bf00      	nop
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fde0 	bl	800961c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7a9b      	ldrb	r3, [r3, #10]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa64:	4b04      	ldr	r3, [pc, #16]	@ (800aa78 <HAL_PCD_SuspendCallback+0x30>)
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	4a03      	ldr	r2, [pc, #12]	@ (800aa78 <HAL_PCD_SuspendCallback+0x30>)
 800aa6a:	f043 0306 	orr.w	r3, r3, #6
 800aa6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed00 	.word	0xe000ed00

0800aa7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fdda 	bl	8009644 <USBD_LL_Resume>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aaa0:	4a28      	ldr	r2, [pc, #160]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a26      	ldr	r2, [pc, #152]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aaac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aab0:	4b24      	ldr	r3, [pc, #144]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aab2:	4a25      	ldr	r2, [pc, #148]	@ (800ab48 <USBD_LL_Init+0xb0>)
 800aab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aab6:	4b23      	ldr	r3, [pc, #140]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aab8:	2208      	movs	r2, #8
 800aaba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aabc:	4b21      	ldr	r3, [pc, #132]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aabe:	2202      	movs	r2, #2
 800aac0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aac2:	4b20      	ldr	r3, [pc, #128]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aac8:	4b1e      	ldr	r3, [pc, #120]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aace:	4b1d      	ldr	r3, [pc, #116]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aad4:	481b      	ldr	r0, [pc, #108]	@ (800ab44 <USBD_LL_Init+0xac>)
 800aad6:	f7f8 fcb3 	bl	8003440 <HAL_PCD_Init>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aae0:	f7f6 fe94 	bl	800180c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aaea:	2318      	movs	r3, #24
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f7fa f9c4 	bl	8004e7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aafa:	2358      	movs	r3, #88	@ 0x58
 800aafc:	2200      	movs	r2, #0
 800aafe:	2180      	movs	r1, #128	@ 0x80
 800ab00:	f7fa f9bc 	bl	8004e7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab0a:	23c0      	movs	r3, #192	@ 0xc0
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2181      	movs	r1, #129	@ 0x81
 800ab10:	f7fa f9b4 	bl	8004e7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab1a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2101      	movs	r1, #1
 800ab22:	f7fa f9ab 	bl	8004e7c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab30:	2200      	movs	r2, #0
 800ab32:	2182      	movs	r1, #130	@ 0x82
 800ab34:	f7fa f9a2 	bl	8004e7c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	2000128c 	.word	0x2000128c
 800ab48:	40005c00 	.word	0x40005c00

0800ab4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f8 fd62 	bl	800362c <HAL_PCD_Start>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f94e 	bl	800ae10 <USBD_Get_USB_Status>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4603      	mov	r3, r0
 800ab92:	70fb      	strb	r3, [r7, #3]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70bb      	strb	r3, [r7, #2]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abaa:	78bb      	ldrb	r3, [r7, #2]
 800abac:	883a      	ldrh	r2, [r7, #0]
 800abae:	78f9      	ldrb	r1, [r7, #3]
 800abb0:	f7f8 feb6 	bl	8003920 <HAL_PCD_EP_Open>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f928 	bl	800ae10 <USBD_Get_USB_Status>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7f8 fef4 	bl	80039da <HAL_PCD_EP_Close>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f909 	bl	800ae10 <USBD_Get_USB_Status>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7f8 ff9c 	bl	8003b68 <HAL_PCD_EP_SetStall>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 f8ea 	bl	800ae10 <USBD_Get_USB_Status>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	460b      	mov	r3, r1
 800ac54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f8 ffdd 	bl	8003c28 <HAL_PCD_EP_ClrStall>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f8cb 	bl	800ae10 <USBD_Get_USB_Status>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	da0b      	bge.n	800acbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acaa:	68f9      	ldr	r1, [r7, #12]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	440b      	add	r3, r1
 800acb6:	3312      	adds	r3, #18
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	e00b      	b.n	800acd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	440b      	add	r3, r1
 800acce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800acd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	bc80      	pop	{r7}
 800acdc:	4770      	bx	lr

0800acde <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f8 fdeb 	bl	80038d8 <HAL_PCD_SetAddress>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f881 	bl	800ae10 <USBD_Get_USB_Status>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	607a      	str	r2, [r7, #4]
 800ad26:	461a      	mov	r2, r3
 800ad28:	460b      	mov	r3, r1
 800ad2a:	72fb      	strb	r3, [r7, #11]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad3e:	893b      	ldrh	r3, [r7, #8]
 800ad40:	7af9      	ldrb	r1, [r7, #11]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	f7f8 fed9 	bl	8003afa <HAL_PCD_EP_Transmit>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 f85e 	bl	800ae10 <USBD_Get_USB_Status>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad58:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	460b      	mov	r3, r1
 800ad70:	72fb      	strb	r3, [r7, #11]
 800ad72:	4613      	mov	r3, r2
 800ad74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad84:	893b      	ldrh	r3, [r7, #8]
 800ad86:	7af9      	ldrb	r1, [r7, #11]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f7f8 fe6e 	bl	8003a6a <HAL_PCD_EP_Receive>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f83b 	bl	800ae10 <USBD_Get_USB_Status>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800adba:	78fa      	ldrb	r2, [r7, #3]
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f8 fe84 	bl	8003acc <HAL_PCD_EP_GetRxCount>
 800adc4:	4603      	mov	r3, r0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800add8:	4b02      	ldr	r3, [pc, #8]	@ (800ade4 <USBD_static_malloc+0x14>)
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	bc80      	pop	{r7}
 800ade2:	4770      	bx	lr
 800ade4:	20001564 	.word	0x20001564

0800ade8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]

}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bc80      	pop	{r7}
 800ae0e:	4770      	bx	lr

0800ae10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d817      	bhi.n	800ae54 <USBD_Get_USB_Status+0x44>
 800ae24:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <USBD_Get_USB_Status+0x1c>)
 800ae26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800ae3d 	.word	0x0800ae3d
 800ae30:	0800ae43 	.word	0x0800ae43
 800ae34:	0800ae49 	.word	0x0800ae49
 800ae38:	0800ae4f 	.word	0x0800ae4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae40:	e00b      	b.n	800ae5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae42:	2302      	movs	r3, #2
 800ae44:	73fb      	strb	r3, [r7, #15]
    break;
 800ae46:	e008      	b.n	800ae5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4c:	e005      	b.n	800ae5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	73fb      	strb	r3, [r7, #15]
    break;
 800ae52:	e002      	b.n	800ae5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae54:	2302      	movs	r3, #2
 800ae56:	73fb      	strb	r3, [r7, #15]
    break;
 800ae58:	bf00      	nop
  }
  return usb_status;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop

0800ae68 <atoi>:
 800ae68:	220a      	movs	r2, #10
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	f000 b87a 	b.w	800af64 <strtol>

0800ae70 <_strtol_l.isra.0>:
 800ae70:	2b24      	cmp	r3, #36	@ 0x24
 800ae72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae76:	4686      	mov	lr, r0
 800ae78:	4690      	mov	r8, r2
 800ae7a:	d801      	bhi.n	800ae80 <_strtol_l.isra.0+0x10>
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d106      	bne.n	800ae8e <_strtol_l.isra.0+0x1e>
 800ae80:	f000 f8ca 	bl	800b018 <__errno>
 800ae84:	2316      	movs	r3, #22
 800ae86:	6003      	str	r3, [r0, #0]
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4833      	ldr	r0, [pc, #204]	@ (800af60 <_strtol_l.isra.0+0xf0>)
 800ae92:	462a      	mov	r2, r5
 800ae94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae98:	5d06      	ldrb	r6, [r0, r4]
 800ae9a:	f016 0608 	ands.w	r6, r6, #8
 800ae9e:	d1f8      	bne.n	800ae92 <_strtol_l.isra.0+0x22>
 800aea0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aea2:	d110      	bne.n	800aec6 <_strtol_l.isra.0+0x56>
 800aea4:	2601      	movs	r6, #1
 800aea6:	782c      	ldrb	r4, [r5, #0]
 800aea8:	1c95      	adds	r5, r2, #2
 800aeaa:	f033 0210 	bics.w	r2, r3, #16
 800aeae:	d115      	bne.n	800aedc <_strtol_l.isra.0+0x6c>
 800aeb0:	2c30      	cmp	r4, #48	@ 0x30
 800aeb2:	d10d      	bne.n	800aed0 <_strtol_l.isra.0+0x60>
 800aeb4:	782a      	ldrb	r2, [r5, #0]
 800aeb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aeba:	2a58      	cmp	r2, #88	@ 0x58
 800aebc:	d108      	bne.n	800aed0 <_strtol_l.isra.0+0x60>
 800aebe:	786c      	ldrb	r4, [r5, #1]
 800aec0:	3502      	adds	r5, #2
 800aec2:	2310      	movs	r3, #16
 800aec4:	e00a      	b.n	800aedc <_strtol_l.isra.0+0x6c>
 800aec6:	2c2b      	cmp	r4, #43	@ 0x2b
 800aec8:	bf04      	itt	eq
 800aeca:	782c      	ldrbeq	r4, [r5, #0]
 800aecc:	1c95      	addeq	r5, r2, #2
 800aece:	e7ec      	b.n	800aeaa <_strtol_l.isra.0+0x3a>
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1f6      	bne.n	800aec2 <_strtol_l.isra.0+0x52>
 800aed4:	2c30      	cmp	r4, #48	@ 0x30
 800aed6:	bf14      	ite	ne
 800aed8:	230a      	movne	r3, #10
 800aeda:	2308      	moveq	r3, #8
 800aedc:	2200      	movs	r2, #0
 800aede:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aee2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aee6:	fbbc f9f3 	udiv	r9, ip, r3
 800aeea:	4610      	mov	r0, r2
 800aeec:	fb03 ca19 	mls	sl, r3, r9, ip
 800aef0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aef4:	2f09      	cmp	r7, #9
 800aef6:	d80f      	bhi.n	800af18 <_strtol_l.isra.0+0xa8>
 800aef8:	463c      	mov	r4, r7
 800aefa:	42a3      	cmp	r3, r4
 800aefc:	dd1b      	ble.n	800af36 <_strtol_l.isra.0+0xc6>
 800aefe:	1c57      	adds	r7, r2, #1
 800af00:	d007      	beq.n	800af12 <_strtol_l.isra.0+0xa2>
 800af02:	4581      	cmp	r9, r0
 800af04:	d314      	bcc.n	800af30 <_strtol_l.isra.0+0xc0>
 800af06:	d101      	bne.n	800af0c <_strtol_l.isra.0+0x9c>
 800af08:	45a2      	cmp	sl, r4
 800af0a:	db11      	blt.n	800af30 <_strtol_l.isra.0+0xc0>
 800af0c:	2201      	movs	r2, #1
 800af0e:	fb00 4003 	mla	r0, r0, r3, r4
 800af12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af16:	e7eb      	b.n	800aef0 <_strtol_l.isra.0+0x80>
 800af18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af1c:	2f19      	cmp	r7, #25
 800af1e:	d801      	bhi.n	800af24 <_strtol_l.isra.0+0xb4>
 800af20:	3c37      	subs	r4, #55	@ 0x37
 800af22:	e7ea      	b.n	800aefa <_strtol_l.isra.0+0x8a>
 800af24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af28:	2f19      	cmp	r7, #25
 800af2a:	d804      	bhi.n	800af36 <_strtol_l.isra.0+0xc6>
 800af2c:	3c57      	subs	r4, #87	@ 0x57
 800af2e:	e7e4      	b.n	800aefa <_strtol_l.isra.0+0x8a>
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	e7ed      	b.n	800af12 <_strtol_l.isra.0+0xa2>
 800af36:	1c53      	adds	r3, r2, #1
 800af38:	d108      	bne.n	800af4c <_strtol_l.isra.0+0xdc>
 800af3a:	2322      	movs	r3, #34	@ 0x22
 800af3c:	4660      	mov	r0, ip
 800af3e:	f8ce 3000 	str.w	r3, [lr]
 800af42:	f1b8 0f00 	cmp.w	r8, #0
 800af46:	d0a0      	beq.n	800ae8a <_strtol_l.isra.0+0x1a>
 800af48:	1e69      	subs	r1, r5, #1
 800af4a:	e006      	b.n	800af5a <_strtol_l.isra.0+0xea>
 800af4c:	b106      	cbz	r6, 800af50 <_strtol_l.isra.0+0xe0>
 800af4e:	4240      	negs	r0, r0
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	d099      	beq.n	800ae8a <_strtol_l.isra.0+0x1a>
 800af56:	2a00      	cmp	r2, #0
 800af58:	d1f6      	bne.n	800af48 <_strtol_l.isra.0+0xd8>
 800af5a:	f8c8 1000 	str.w	r1, [r8]
 800af5e:	e794      	b.n	800ae8a <_strtol_l.isra.0+0x1a>
 800af60:	0800dd4b 	.word	0x0800dd4b

0800af64 <strtol>:
 800af64:	4613      	mov	r3, r2
 800af66:	460a      	mov	r2, r1
 800af68:	4601      	mov	r1, r0
 800af6a:	4802      	ldr	r0, [pc, #8]	@ (800af74 <strtol+0x10>)
 800af6c:	6800      	ldr	r0, [r0, #0]
 800af6e:	f7ff bf7f 	b.w	800ae70 <_strtol_l.isra.0>
 800af72:	bf00      	nop
 800af74:	2000017c 	.word	0x2000017c

0800af78 <sniprintf>:
 800af78:	b40c      	push	{r2, r3}
 800af7a:	b530      	push	{r4, r5, lr}
 800af7c:	4b18      	ldr	r3, [pc, #96]	@ (800afe0 <sniprintf+0x68>)
 800af7e:	1e0c      	subs	r4, r1, #0
 800af80:	681d      	ldr	r5, [r3, #0]
 800af82:	b09d      	sub	sp, #116	@ 0x74
 800af84:	da08      	bge.n	800af98 <sniprintf+0x20>
 800af86:	238b      	movs	r3, #139	@ 0x8b
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	b01d      	add	sp, #116	@ 0x74
 800af90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af94:	b002      	add	sp, #8
 800af96:	4770      	bx	lr
 800af98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800af9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800afa6:	bf0c      	ite	eq
 800afa8:	4623      	moveq	r3, r4
 800afaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	9307      	str	r3, [sp, #28]
 800afb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afb6:	9002      	str	r0, [sp, #8]
 800afb8:	9006      	str	r0, [sp, #24]
 800afba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800afbe:	4628      	mov	r0, r5
 800afc0:	ab21      	add	r3, sp, #132	@ 0x84
 800afc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800afc4:	a902      	add	r1, sp, #8
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	f000 f9b2 	bl	800b330 <_svfiprintf_r>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	bfbc      	itt	lt
 800afd0:	238b      	movlt	r3, #139	@ 0x8b
 800afd2:	602b      	strlt	r3, [r5, #0]
 800afd4:	2c00      	cmp	r4, #0
 800afd6:	d0da      	beq.n	800af8e <sniprintf+0x16>
 800afd8:	2200      	movs	r2, #0
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	e7d6      	b.n	800af8e <sniprintf+0x16>
 800afe0:	2000017c 	.word	0x2000017c

0800afe4 <memset>:
 800afe4:	4603      	mov	r3, r0
 800afe6:	4402      	add	r2, r0
 800afe8:	4293      	cmp	r3, r2
 800afea:	d100      	bne.n	800afee <memset+0xa>
 800afec:	4770      	bx	lr
 800afee:	f803 1b01 	strb.w	r1, [r3], #1
 800aff2:	e7f9      	b.n	800afe8 <memset+0x4>

0800aff4 <strncmp>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	b16a      	cbz	r2, 800b014 <strncmp+0x20>
 800aff8:	3901      	subs	r1, #1
 800affa:	1884      	adds	r4, r0, r2
 800affc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b000:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b004:	429a      	cmp	r2, r3
 800b006:	d103      	bne.n	800b010 <strncmp+0x1c>
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d001      	beq.n	800b010 <strncmp+0x1c>
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	d1f5      	bne.n	800affc <strncmp+0x8>
 800b010:	1ad0      	subs	r0, r2, r3
 800b012:	bd10      	pop	{r4, pc}
 800b014:	4610      	mov	r0, r2
 800b016:	e7fc      	b.n	800b012 <strncmp+0x1e>

0800b018 <__errno>:
 800b018:	4b01      	ldr	r3, [pc, #4]	@ (800b020 <__errno+0x8>)
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	2000017c 	.word	0x2000017c

0800b024 <__libc_init_array>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	2600      	movs	r6, #0
 800b028:	4d0c      	ldr	r5, [pc, #48]	@ (800b05c <__libc_init_array+0x38>)
 800b02a:	4c0d      	ldr	r4, [pc, #52]	@ (800b060 <__libc_init_array+0x3c>)
 800b02c:	1b64      	subs	r4, r4, r5
 800b02e:	10a4      	asrs	r4, r4, #2
 800b030:	42a6      	cmp	r6, r4
 800b032:	d109      	bne.n	800b048 <__libc_init_array+0x24>
 800b034:	f001 fb80 	bl	800c738 <_init>
 800b038:	2600      	movs	r6, #0
 800b03a:	4d0a      	ldr	r5, [pc, #40]	@ (800b064 <__libc_init_array+0x40>)
 800b03c:	4c0a      	ldr	r4, [pc, #40]	@ (800b068 <__libc_init_array+0x44>)
 800b03e:	1b64      	subs	r4, r4, r5
 800b040:	10a4      	asrs	r4, r4, #2
 800b042:	42a6      	cmp	r6, r4
 800b044:	d105      	bne.n	800b052 <__libc_init_array+0x2e>
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04c:	4798      	blx	r3
 800b04e:	3601      	adds	r6, #1
 800b050:	e7ee      	b.n	800b030 <__libc_init_array+0xc>
 800b052:	f855 3b04 	ldr.w	r3, [r5], #4
 800b056:	4798      	blx	r3
 800b058:	3601      	adds	r6, #1
 800b05a:	e7f2      	b.n	800b042 <__libc_init_array+0x1e>
 800b05c:	0800dec8 	.word	0x0800dec8
 800b060:	0800dec8 	.word	0x0800dec8
 800b064:	0800dec8 	.word	0x0800dec8
 800b068:	0800decc 	.word	0x0800decc

0800b06c <__retarget_lock_acquire_recursive>:
 800b06c:	4770      	bx	lr

0800b06e <__retarget_lock_release_recursive>:
 800b06e:	4770      	bx	lr

0800b070 <memcpy>:
 800b070:	440a      	add	r2, r1
 800b072:	4291      	cmp	r1, r2
 800b074:	f100 33ff 	add.w	r3, r0, #4294967295
 800b078:	d100      	bne.n	800b07c <memcpy+0xc>
 800b07a:	4770      	bx	lr
 800b07c:	b510      	push	{r4, lr}
 800b07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b082:	4291      	cmp	r1, r2
 800b084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b088:	d1f9      	bne.n	800b07e <memcpy+0xe>
 800b08a:	bd10      	pop	{r4, pc}

0800b08c <_free_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4605      	mov	r5, r0
 800b090:	2900      	cmp	r1, #0
 800b092:	d040      	beq.n	800b116 <_free_r+0x8a>
 800b094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b098:	1f0c      	subs	r4, r1, #4
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bfb8      	it	lt
 800b09e:	18e4      	addlt	r4, r4, r3
 800b0a0:	f000 f8de 	bl	800b260 <__malloc_lock>
 800b0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b118 <_free_r+0x8c>)
 800b0a6:	6813      	ldr	r3, [r2, #0]
 800b0a8:	b933      	cbnz	r3, 800b0b8 <_free_r+0x2c>
 800b0aa:	6063      	str	r3, [r4, #4]
 800b0ac:	6014      	str	r4, [r2, #0]
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0b4:	f000 b8da 	b.w	800b26c <__malloc_unlock>
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d908      	bls.n	800b0ce <_free_r+0x42>
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	1821      	adds	r1, r4, r0
 800b0c0:	428b      	cmp	r3, r1
 800b0c2:	bf01      	itttt	eq
 800b0c4:	6819      	ldreq	r1, [r3, #0]
 800b0c6:	685b      	ldreq	r3, [r3, #4]
 800b0c8:	1809      	addeq	r1, r1, r0
 800b0ca:	6021      	streq	r1, [r4, #0]
 800b0cc:	e7ed      	b.n	800b0aa <_free_r+0x1e>
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	b10b      	cbz	r3, 800b0d8 <_free_r+0x4c>
 800b0d4:	42a3      	cmp	r3, r4
 800b0d6:	d9fa      	bls.n	800b0ce <_free_r+0x42>
 800b0d8:	6811      	ldr	r1, [r2, #0]
 800b0da:	1850      	adds	r0, r2, r1
 800b0dc:	42a0      	cmp	r0, r4
 800b0de:	d10b      	bne.n	800b0f8 <_free_r+0x6c>
 800b0e0:	6820      	ldr	r0, [r4, #0]
 800b0e2:	4401      	add	r1, r0
 800b0e4:	1850      	adds	r0, r2, r1
 800b0e6:	4283      	cmp	r3, r0
 800b0e8:	6011      	str	r1, [r2, #0]
 800b0ea:	d1e0      	bne.n	800b0ae <_free_r+0x22>
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4408      	add	r0, r1
 800b0f2:	6010      	str	r0, [r2, #0]
 800b0f4:	6053      	str	r3, [r2, #4]
 800b0f6:	e7da      	b.n	800b0ae <_free_r+0x22>
 800b0f8:	d902      	bls.n	800b100 <_free_r+0x74>
 800b0fa:	230c      	movs	r3, #12
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	e7d6      	b.n	800b0ae <_free_r+0x22>
 800b100:	6820      	ldr	r0, [r4, #0]
 800b102:	1821      	adds	r1, r4, r0
 800b104:	428b      	cmp	r3, r1
 800b106:	bf01      	itttt	eq
 800b108:	6819      	ldreq	r1, [r3, #0]
 800b10a:	685b      	ldreq	r3, [r3, #4]
 800b10c:	1809      	addeq	r1, r1, r0
 800b10e:	6021      	streq	r1, [r4, #0]
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	6054      	str	r4, [r2, #4]
 800b114:	e7cb      	b.n	800b0ae <_free_r+0x22>
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	200018c8 	.word	0x200018c8

0800b11c <sbrk_aligned>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4e0f      	ldr	r6, [pc, #60]	@ (800b15c <sbrk_aligned+0x40>)
 800b120:	460c      	mov	r4, r1
 800b122:	6831      	ldr	r1, [r6, #0]
 800b124:	4605      	mov	r5, r0
 800b126:	b911      	cbnz	r1, 800b12e <sbrk_aligned+0x12>
 800b128:	f000 fba8 	bl	800b87c <_sbrk_r>
 800b12c:	6030      	str	r0, [r6, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 fba3 	bl	800b87c <_sbrk_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d103      	bne.n	800b142 <sbrk_aligned+0x26>
 800b13a:	f04f 34ff 	mov.w	r4, #4294967295
 800b13e:	4620      	mov	r0, r4
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	1cc4      	adds	r4, r0, #3
 800b144:	f024 0403 	bic.w	r4, r4, #3
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d0f8      	beq.n	800b13e <sbrk_aligned+0x22>
 800b14c:	1a21      	subs	r1, r4, r0
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 fb94 	bl	800b87c <_sbrk_r>
 800b154:	3001      	adds	r0, #1
 800b156:	d1f2      	bne.n	800b13e <sbrk_aligned+0x22>
 800b158:	e7ef      	b.n	800b13a <sbrk_aligned+0x1e>
 800b15a:	bf00      	nop
 800b15c:	200018c4 	.word	0x200018c4

0800b160 <_malloc_r>:
 800b160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b164:	1ccd      	adds	r5, r1, #3
 800b166:	f025 0503 	bic.w	r5, r5, #3
 800b16a:	3508      	adds	r5, #8
 800b16c:	2d0c      	cmp	r5, #12
 800b16e:	bf38      	it	cc
 800b170:	250c      	movcc	r5, #12
 800b172:	2d00      	cmp	r5, #0
 800b174:	4606      	mov	r6, r0
 800b176:	db01      	blt.n	800b17c <_malloc_r+0x1c>
 800b178:	42a9      	cmp	r1, r5
 800b17a:	d904      	bls.n	800b186 <_malloc_r+0x26>
 800b17c:	230c      	movs	r3, #12
 800b17e:	6033      	str	r3, [r6, #0]
 800b180:	2000      	movs	r0, #0
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b25c <_malloc_r+0xfc>
 800b18a:	f000 f869 	bl	800b260 <__malloc_lock>
 800b18e:	f8d8 3000 	ldr.w	r3, [r8]
 800b192:	461c      	mov	r4, r3
 800b194:	bb44      	cbnz	r4, 800b1e8 <_malloc_r+0x88>
 800b196:	4629      	mov	r1, r5
 800b198:	4630      	mov	r0, r6
 800b19a:	f7ff ffbf 	bl	800b11c <sbrk_aligned>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	d158      	bne.n	800b256 <_malloc_r+0xf6>
 800b1a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b1a8:	4627      	mov	r7, r4
 800b1aa:	2f00      	cmp	r7, #0
 800b1ac:	d143      	bne.n	800b236 <_malloc_r+0xd6>
 800b1ae:	2c00      	cmp	r4, #0
 800b1b0:	d04b      	beq.n	800b24a <_malloc_r+0xea>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	eb04 0903 	add.w	r9, r4, r3
 800b1bc:	f000 fb5e 	bl	800b87c <_sbrk_r>
 800b1c0:	4581      	cmp	r9, r0
 800b1c2:	d142      	bne.n	800b24a <_malloc_r+0xea>
 800b1c4:	6821      	ldr	r1, [r4, #0]
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	1a6d      	subs	r5, r5, r1
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f7ff ffa6 	bl	800b11c <sbrk_aligned>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d03a      	beq.n	800b24a <_malloc_r+0xea>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	442b      	add	r3, r5
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	f8d8 3000 	ldr.w	r3, [r8]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	bb62      	cbnz	r2, 800b23c <_malloc_r+0xdc>
 800b1e2:	f8c8 7000 	str.w	r7, [r8]
 800b1e6:	e00f      	b.n	800b208 <_malloc_r+0xa8>
 800b1e8:	6822      	ldr	r2, [r4, #0]
 800b1ea:	1b52      	subs	r2, r2, r5
 800b1ec:	d420      	bmi.n	800b230 <_malloc_r+0xd0>
 800b1ee:	2a0b      	cmp	r2, #11
 800b1f0:	d917      	bls.n	800b222 <_malloc_r+0xc2>
 800b1f2:	1961      	adds	r1, r4, r5
 800b1f4:	42a3      	cmp	r3, r4
 800b1f6:	6025      	str	r5, [r4, #0]
 800b1f8:	bf18      	it	ne
 800b1fa:	6059      	strne	r1, [r3, #4]
 800b1fc:	6863      	ldr	r3, [r4, #4]
 800b1fe:	bf08      	it	eq
 800b200:	f8c8 1000 	streq.w	r1, [r8]
 800b204:	5162      	str	r2, [r4, r5]
 800b206:	604b      	str	r3, [r1, #4]
 800b208:	4630      	mov	r0, r6
 800b20a:	f000 f82f 	bl	800b26c <__malloc_unlock>
 800b20e:	f104 000b 	add.w	r0, r4, #11
 800b212:	1d23      	adds	r3, r4, #4
 800b214:	f020 0007 	bic.w	r0, r0, #7
 800b218:	1ac2      	subs	r2, r0, r3
 800b21a:	bf1c      	itt	ne
 800b21c:	1a1b      	subne	r3, r3, r0
 800b21e:	50a3      	strne	r3, [r4, r2]
 800b220:	e7af      	b.n	800b182 <_malloc_r+0x22>
 800b222:	6862      	ldr	r2, [r4, #4]
 800b224:	42a3      	cmp	r3, r4
 800b226:	bf0c      	ite	eq
 800b228:	f8c8 2000 	streq.w	r2, [r8]
 800b22c:	605a      	strne	r2, [r3, #4]
 800b22e:	e7eb      	b.n	800b208 <_malloc_r+0xa8>
 800b230:	4623      	mov	r3, r4
 800b232:	6864      	ldr	r4, [r4, #4]
 800b234:	e7ae      	b.n	800b194 <_malloc_r+0x34>
 800b236:	463c      	mov	r4, r7
 800b238:	687f      	ldr	r7, [r7, #4]
 800b23a:	e7b6      	b.n	800b1aa <_malloc_r+0x4a>
 800b23c:	461a      	mov	r2, r3
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	42a3      	cmp	r3, r4
 800b242:	d1fb      	bne.n	800b23c <_malloc_r+0xdc>
 800b244:	2300      	movs	r3, #0
 800b246:	6053      	str	r3, [r2, #4]
 800b248:	e7de      	b.n	800b208 <_malloc_r+0xa8>
 800b24a:	230c      	movs	r3, #12
 800b24c:	4630      	mov	r0, r6
 800b24e:	6033      	str	r3, [r6, #0]
 800b250:	f000 f80c 	bl	800b26c <__malloc_unlock>
 800b254:	e794      	b.n	800b180 <_malloc_r+0x20>
 800b256:	6005      	str	r5, [r0, #0]
 800b258:	e7d6      	b.n	800b208 <_malloc_r+0xa8>
 800b25a:	bf00      	nop
 800b25c:	200018c8 	.word	0x200018c8

0800b260 <__malloc_lock>:
 800b260:	4801      	ldr	r0, [pc, #4]	@ (800b268 <__malloc_lock+0x8>)
 800b262:	f7ff bf03 	b.w	800b06c <__retarget_lock_acquire_recursive>
 800b266:	bf00      	nop
 800b268:	200018c0 	.word	0x200018c0

0800b26c <__malloc_unlock>:
 800b26c:	4801      	ldr	r0, [pc, #4]	@ (800b274 <__malloc_unlock+0x8>)
 800b26e:	f7ff befe 	b.w	800b06e <__retarget_lock_release_recursive>
 800b272:	bf00      	nop
 800b274:	200018c0 	.word	0x200018c0

0800b278 <__ssputs_r>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	461f      	mov	r7, r3
 800b27e:	688e      	ldr	r6, [r1, #8]
 800b280:	4682      	mov	sl, r0
 800b282:	42be      	cmp	r6, r7
 800b284:	460c      	mov	r4, r1
 800b286:	4690      	mov	r8, r2
 800b288:	680b      	ldr	r3, [r1, #0]
 800b28a:	d82d      	bhi.n	800b2e8 <__ssputs_r+0x70>
 800b28c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b290:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b294:	d026      	beq.n	800b2e4 <__ssputs_r+0x6c>
 800b296:	6965      	ldr	r5, [r4, #20]
 800b298:	6909      	ldr	r1, [r1, #16]
 800b29a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b29e:	eba3 0901 	sub.w	r9, r3, r1
 800b2a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2a6:	1c7b      	adds	r3, r7, #1
 800b2a8:	444b      	add	r3, r9
 800b2aa:	106d      	asrs	r5, r5, #1
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	bf38      	it	cc
 800b2b0:	461d      	movcc	r5, r3
 800b2b2:	0553      	lsls	r3, r2, #21
 800b2b4:	d527      	bpl.n	800b306 <__ssputs_r+0x8e>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7ff ff52 	bl	800b160 <_malloc_r>
 800b2bc:	4606      	mov	r6, r0
 800b2be:	b360      	cbz	r0, 800b31a <__ssputs_r+0xa2>
 800b2c0:	464a      	mov	r2, r9
 800b2c2:	6921      	ldr	r1, [r4, #16]
 800b2c4:	f7ff fed4 	bl	800b070 <memcpy>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	6126      	str	r6, [r4, #16]
 800b2d6:	444e      	add	r6, r9
 800b2d8:	6026      	str	r6, [r4, #0]
 800b2da:	463e      	mov	r6, r7
 800b2dc:	6165      	str	r5, [r4, #20]
 800b2de:	eba5 0509 	sub.w	r5, r5, r9
 800b2e2:	60a5      	str	r5, [r4, #8]
 800b2e4:	42be      	cmp	r6, r7
 800b2e6:	d900      	bls.n	800b2ea <__ssputs_r+0x72>
 800b2e8:	463e      	mov	r6, r7
 800b2ea:	4632      	mov	r2, r6
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	f000 faaa 	bl	800b848 <memmove>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	68a3      	ldr	r3, [r4, #8]
 800b2f8:	1b9b      	subs	r3, r3, r6
 800b2fa:	60a3      	str	r3, [r4, #8]
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	4433      	add	r3, r6
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b306:	462a      	mov	r2, r5
 800b308:	f000 fad6 	bl	800b8b8 <_realloc_r>
 800b30c:	4606      	mov	r6, r0
 800b30e:	2800      	cmp	r0, #0
 800b310:	d1e0      	bne.n	800b2d4 <__ssputs_r+0x5c>
 800b312:	4650      	mov	r0, sl
 800b314:	6921      	ldr	r1, [r4, #16]
 800b316:	f7ff feb9 	bl	800b08c <_free_r>
 800b31a:	230c      	movs	r3, #12
 800b31c:	f8ca 3000 	str.w	r3, [sl]
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f04f 30ff 	mov.w	r0, #4294967295
 800b326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	e7e9      	b.n	800b302 <__ssputs_r+0x8a>
	...

0800b330 <_svfiprintf_r>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	4698      	mov	r8, r3
 800b336:	898b      	ldrh	r3, [r1, #12]
 800b338:	4607      	mov	r7, r0
 800b33a:	061b      	lsls	r3, r3, #24
 800b33c:	460d      	mov	r5, r1
 800b33e:	4614      	mov	r4, r2
 800b340:	b09d      	sub	sp, #116	@ 0x74
 800b342:	d510      	bpl.n	800b366 <_svfiprintf_r+0x36>
 800b344:	690b      	ldr	r3, [r1, #16]
 800b346:	b973      	cbnz	r3, 800b366 <_svfiprintf_r+0x36>
 800b348:	2140      	movs	r1, #64	@ 0x40
 800b34a:	f7ff ff09 	bl	800b160 <_malloc_r>
 800b34e:	6028      	str	r0, [r5, #0]
 800b350:	6128      	str	r0, [r5, #16]
 800b352:	b930      	cbnz	r0, 800b362 <_svfiprintf_r+0x32>
 800b354:	230c      	movs	r3, #12
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	f04f 30ff 	mov.w	r0, #4294967295
 800b35c:	b01d      	add	sp, #116	@ 0x74
 800b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b362:	2340      	movs	r3, #64	@ 0x40
 800b364:	616b      	str	r3, [r5, #20]
 800b366:	2300      	movs	r3, #0
 800b368:	9309      	str	r3, [sp, #36]	@ 0x24
 800b36a:	2320      	movs	r3, #32
 800b36c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b370:	2330      	movs	r3, #48	@ 0x30
 800b372:	f04f 0901 	mov.w	r9, #1
 800b376:	f8cd 800c 	str.w	r8, [sp, #12]
 800b37a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b514 <_svfiprintf_r+0x1e4>
 800b37e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b382:	4623      	mov	r3, r4
 800b384:	469a      	mov	sl, r3
 800b386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b38a:	b10a      	cbz	r2, 800b390 <_svfiprintf_r+0x60>
 800b38c:	2a25      	cmp	r2, #37	@ 0x25
 800b38e:	d1f9      	bne.n	800b384 <_svfiprintf_r+0x54>
 800b390:	ebba 0b04 	subs.w	fp, sl, r4
 800b394:	d00b      	beq.n	800b3ae <_svfiprintf_r+0x7e>
 800b396:	465b      	mov	r3, fp
 800b398:	4622      	mov	r2, r4
 800b39a:	4629      	mov	r1, r5
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff ff6b 	bl	800b278 <__ssputs_r>
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f000 80a7 	beq.w	800b4f6 <_svfiprintf_r+0x1c6>
 800b3a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3aa:	445a      	add	r2, fp
 800b3ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 809f 	beq.w	800b4f6 <_svfiprintf_r+0x1c6>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c2:	f10a 0a01 	add.w	sl, sl, #1
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3d0:	4654      	mov	r4, sl
 800b3d2:	2205      	movs	r2, #5
 800b3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d8:	484e      	ldr	r0, [pc, #312]	@ (800b514 <_svfiprintf_r+0x1e4>)
 800b3da:	f000 fa5f 	bl	800b89c <memchr>
 800b3de:	9a04      	ldr	r2, [sp, #16]
 800b3e0:	b9d8      	cbnz	r0, 800b41a <_svfiprintf_r+0xea>
 800b3e2:	06d0      	lsls	r0, r2, #27
 800b3e4:	bf44      	itt	mi
 800b3e6:	2320      	movmi	r3, #32
 800b3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ec:	0711      	lsls	r1, r2, #28
 800b3ee:	bf44      	itt	mi
 800b3f0:	232b      	movmi	r3, #43	@ 0x2b
 800b3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3fc:	d015      	beq.n	800b42a <_svfiprintf_r+0xfa>
 800b3fe:	4654      	mov	r4, sl
 800b400:	2000      	movs	r0, #0
 800b402:	f04f 0c0a 	mov.w	ip, #10
 800b406:	9a07      	ldr	r2, [sp, #28]
 800b408:	4621      	mov	r1, r4
 800b40a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b40e:	3b30      	subs	r3, #48	@ 0x30
 800b410:	2b09      	cmp	r3, #9
 800b412:	d94b      	bls.n	800b4ac <_svfiprintf_r+0x17c>
 800b414:	b1b0      	cbz	r0, 800b444 <_svfiprintf_r+0x114>
 800b416:	9207      	str	r2, [sp, #28]
 800b418:	e014      	b.n	800b444 <_svfiprintf_r+0x114>
 800b41a:	eba0 0308 	sub.w	r3, r0, r8
 800b41e:	fa09 f303 	lsl.w	r3, r9, r3
 800b422:	4313      	orrs	r3, r2
 800b424:	46a2      	mov	sl, r4
 800b426:	9304      	str	r3, [sp, #16]
 800b428:	e7d2      	b.n	800b3d0 <_svfiprintf_r+0xa0>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	1d19      	adds	r1, r3, #4
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	9103      	str	r1, [sp, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	bfbb      	ittet	lt
 800b436:	425b      	neglt	r3, r3
 800b438:	f042 0202 	orrlt.w	r2, r2, #2
 800b43c:	9307      	strge	r3, [sp, #28]
 800b43e:	9307      	strlt	r3, [sp, #28]
 800b440:	bfb8      	it	lt
 800b442:	9204      	strlt	r2, [sp, #16]
 800b444:	7823      	ldrb	r3, [r4, #0]
 800b446:	2b2e      	cmp	r3, #46	@ 0x2e
 800b448:	d10a      	bne.n	800b460 <_svfiprintf_r+0x130>
 800b44a:	7863      	ldrb	r3, [r4, #1]
 800b44c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b44e:	d132      	bne.n	800b4b6 <_svfiprintf_r+0x186>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	3402      	adds	r4, #2
 800b454:	1d1a      	adds	r2, r3, #4
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	9203      	str	r2, [sp, #12]
 800b45a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b45e:	9305      	str	r3, [sp, #20]
 800b460:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b518 <_svfiprintf_r+0x1e8>
 800b464:	2203      	movs	r2, #3
 800b466:	4650      	mov	r0, sl
 800b468:	7821      	ldrb	r1, [r4, #0]
 800b46a:	f000 fa17 	bl	800b89c <memchr>
 800b46e:	b138      	cbz	r0, 800b480 <_svfiprintf_r+0x150>
 800b470:	2240      	movs	r2, #64	@ 0x40
 800b472:	9b04      	ldr	r3, [sp, #16]
 800b474:	eba0 000a 	sub.w	r0, r0, sl
 800b478:	4082      	lsls	r2, r0
 800b47a:	4313      	orrs	r3, r2
 800b47c:	3401      	adds	r4, #1
 800b47e:	9304      	str	r3, [sp, #16]
 800b480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b484:	2206      	movs	r2, #6
 800b486:	4825      	ldr	r0, [pc, #148]	@ (800b51c <_svfiprintf_r+0x1ec>)
 800b488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b48c:	f000 fa06 	bl	800b89c <memchr>
 800b490:	2800      	cmp	r0, #0
 800b492:	d036      	beq.n	800b502 <_svfiprintf_r+0x1d2>
 800b494:	4b22      	ldr	r3, [pc, #136]	@ (800b520 <_svfiprintf_r+0x1f0>)
 800b496:	bb1b      	cbnz	r3, 800b4e0 <_svfiprintf_r+0x1b0>
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	3307      	adds	r3, #7
 800b49c:	f023 0307 	bic.w	r3, r3, #7
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	9303      	str	r3, [sp, #12]
 800b4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a6:	4433      	add	r3, r6
 800b4a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4aa:	e76a      	b.n	800b382 <_svfiprintf_r+0x52>
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4b4:	e7a8      	b.n	800b408 <_svfiprintf_r+0xd8>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f04f 0c0a 	mov.w	ip, #10
 800b4bc:	4619      	mov	r1, r3
 800b4be:	3401      	adds	r4, #1
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c8:	3a30      	subs	r2, #48	@ 0x30
 800b4ca:	2a09      	cmp	r2, #9
 800b4cc:	d903      	bls.n	800b4d6 <_svfiprintf_r+0x1a6>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0c6      	beq.n	800b460 <_svfiprintf_r+0x130>
 800b4d2:	9105      	str	r1, [sp, #20]
 800b4d4:	e7c4      	b.n	800b460 <_svfiprintf_r+0x130>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	2301      	movs	r3, #1
 800b4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4de:	e7f0      	b.n	800b4c2 <_svfiprintf_r+0x192>
 800b4e0:	ab03      	add	r3, sp, #12
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <_svfiprintf_r+0x1f4>)
 800b4ea:	a904      	add	r1, sp, #16
 800b4ec:	f3af 8000 	nop.w
 800b4f0:	1c42      	adds	r2, r0, #1
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	d1d6      	bne.n	800b4a4 <_svfiprintf_r+0x174>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	065b      	lsls	r3, r3, #25
 800b4fa:	f53f af2d 	bmi.w	800b358 <_svfiprintf_r+0x28>
 800b4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b500:	e72c      	b.n	800b35c <_svfiprintf_r+0x2c>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4638      	mov	r0, r7
 800b50a:	4b06      	ldr	r3, [pc, #24]	@ (800b524 <_svfiprintf_r+0x1f4>)
 800b50c:	a904      	add	r1, sp, #16
 800b50e:	f000 f87d 	bl	800b60c <_printf_i>
 800b512:	e7ed      	b.n	800b4f0 <_svfiprintf_r+0x1c0>
 800b514:	0800de4b 	.word	0x0800de4b
 800b518:	0800de51 	.word	0x0800de51
 800b51c:	0800de55 	.word	0x0800de55
 800b520:	00000000 	.word	0x00000000
 800b524:	0800b279 	.word	0x0800b279

0800b528 <_printf_common>:
 800b528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52c:	4616      	mov	r6, r2
 800b52e:	4698      	mov	r8, r3
 800b530:	688a      	ldr	r2, [r1, #8]
 800b532:	690b      	ldr	r3, [r1, #16]
 800b534:	4607      	mov	r7, r0
 800b536:	4293      	cmp	r3, r2
 800b538:	bfb8      	it	lt
 800b53a:	4613      	movlt	r3, r2
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b542:	460c      	mov	r4, r1
 800b544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b548:	b10a      	cbz	r2, 800b54e <_printf_common+0x26>
 800b54a:	3301      	adds	r3, #1
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	0699      	lsls	r1, r3, #26
 800b552:	bf42      	ittt	mi
 800b554:	6833      	ldrmi	r3, [r6, #0]
 800b556:	3302      	addmi	r3, #2
 800b558:	6033      	strmi	r3, [r6, #0]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	f015 0506 	ands.w	r5, r5, #6
 800b560:	d106      	bne.n	800b570 <_printf_common+0x48>
 800b562:	f104 0a19 	add.w	sl, r4, #25
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	6832      	ldr	r2, [r6, #0]
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dc2b      	bgt.n	800b5c8 <_printf_common+0xa0>
 800b570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	3b00      	subs	r3, #0
 800b578:	bf18      	it	ne
 800b57a:	2301      	movne	r3, #1
 800b57c:	0692      	lsls	r2, r2, #26
 800b57e:	d430      	bmi.n	800b5e2 <_printf_common+0xba>
 800b580:	4641      	mov	r1, r8
 800b582:	4638      	mov	r0, r7
 800b584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b588:	47c8      	blx	r9
 800b58a:	3001      	adds	r0, #1
 800b58c:	d023      	beq.n	800b5d6 <_printf_common+0xae>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	6922      	ldr	r2, [r4, #16]
 800b592:	f003 0306 	and.w	r3, r3, #6
 800b596:	2b04      	cmp	r3, #4
 800b598:	bf14      	ite	ne
 800b59a:	2500      	movne	r5, #0
 800b59c:	6833      	ldreq	r3, [r6, #0]
 800b59e:	f04f 0600 	mov.w	r6, #0
 800b5a2:	bf08      	it	eq
 800b5a4:	68e5      	ldreq	r5, [r4, #12]
 800b5a6:	f104 041a 	add.w	r4, r4, #26
 800b5aa:	bf08      	it	eq
 800b5ac:	1aed      	subeq	r5, r5, r3
 800b5ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b5b2:	bf08      	it	eq
 800b5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	bfc4      	itt	gt
 800b5bc:	1a9b      	subgt	r3, r3, r2
 800b5be:	18ed      	addgt	r5, r5, r3
 800b5c0:	42b5      	cmp	r5, r6
 800b5c2:	d11a      	bne.n	800b5fa <_printf_common+0xd2>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e008      	b.n	800b5da <_printf_common+0xb2>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	47c8      	blx	r9
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	d103      	bne.n	800b5de <_printf_common+0xb6>
 800b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5de:	3501      	adds	r5, #1
 800b5e0:	e7c1      	b.n	800b566 <_printf_common+0x3e>
 800b5e2:	2030      	movs	r0, #48	@ 0x30
 800b5e4:	18e1      	adds	r1, r4, r3
 800b5e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5f0:	4422      	add	r2, r4
 800b5f2:	3302      	adds	r3, #2
 800b5f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5f8:	e7c2      	b.n	800b580 <_printf_common+0x58>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	4641      	mov	r1, r8
 800b600:	4638      	mov	r0, r7
 800b602:	47c8      	blx	r9
 800b604:	3001      	adds	r0, #1
 800b606:	d0e6      	beq.n	800b5d6 <_printf_common+0xae>
 800b608:	3601      	adds	r6, #1
 800b60a:	e7d9      	b.n	800b5c0 <_printf_common+0x98>

0800b60c <_printf_i>:
 800b60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	7e0f      	ldrb	r7, [r1, #24]
 800b612:	4691      	mov	r9, r2
 800b614:	2f78      	cmp	r7, #120	@ 0x78
 800b616:	4680      	mov	r8, r0
 800b618:	460c      	mov	r4, r1
 800b61a:	469a      	mov	sl, r3
 800b61c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b61e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b622:	d807      	bhi.n	800b634 <_printf_i+0x28>
 800b624:	2f62      	cmp	r7, #98	@ 0x62
 800b626:	d80a      	bhi.n	800b63e <_printf_i+0x32>
 800b628:	2f00      	cmp	r7, #0
 800b62a:	f000 80d1 	beq.w	800b7d0 <_printf_i+0x1c4>
 800b62e:	2f58      	cmp	r7, #88	@ 0x58
 800b630:	f000 80b8 	beq.w	800b7a4 <_printf_i+0x198>
 800b634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b63c:	e03a      	b.n	800b6b4 <_printf_i+0xa8>
 800b63e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b642:	2b15      	cmp	r3, #21
 800b644:	d8f6      	bhi.n	800b634 <_printf_i+0x28>
 800b646:	a101      	add	r1, pc, #4	@ (adr r1, 800b64c <_printf_i+0x40>)
 800b648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b64c:	0800b6a5 	.word	0x0800b6a5
 800b650:	0800b6b9 	.word	0x0800b6b9
 800b654:	0800b635 	.word	0x0800b635
 800b658:	0800b635 	.word	0x0800b635
 800b65c:	0800b635 	.word	0x0800b635
 800b660:	0800b635 	.word	0x0800b635
 800b664:	0800b6b9 	.word	0x0800b6b9
 800b668:	0800b635 	.word	0x0800b635
 800b66c:	0800b635 	.word	0x0800b635
 800b670:	0800b635 	.word	0x0800b635
 800b674:	0800b635 	.word	0x0800b635
 800b678:	0800b7b7 	.word	0x0800b7b7
 800b67c:	0800b6e3 	.word	0x0800b6e3
 800b680:	0800b771 	.word	0x0800b771
 800b684:	0800b635 	.word	0x0800b635
 800b688:	0800b635 	.word	0x0800b635
 800b68c:	0800b7d9 	.word	0x0800b7d9
 800b690:	0800b635 	.word	0x0800b635
 800b694:	0800b6e3 	.word	0x0800b6e3
 800b698:	0800b635 	.word	0x0800b635
 800b69c:	0800b635 	.word	0x0800b635
 800b6a0:	0800b779 	.word	0x0800b779
 800b6a4:	6833      	ldr	r3, [r6, #0]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6032      	str	r2, [r6, #0]
 800b6ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e09c      	b.n	800b7f2 <_printf_i+0x1e6>
 800b6b8:	6833      	ldr	r3, [r6, #0]
 800b6ba:	6820      	ldr	r0, [r4, #0]
 800b6bc:	1d19      	adds	r1, r3, #4
 800b6be:	6031      	str	r1, [r6, #0]
 800b6c0:	0606      	lsls	r6, r0, #24
 800b6c2:	d501      	bpl.n	800b6c8 <_printf_i+0xbc>
 800b6c4:	681d      	ldr	r5, [r3, #0]
 800b6c6:	e003      	b.n	800b6d0 <_printf_i+0xc4>
 800b6c8:	0645      	lsls	r5, r0, #25
 800b6ca:	d5fb      	bpl.n	800b6c4 <_printf_i+0xb8>
 800b6cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	da03      	bge.n	800b6dc <_printf_i+0xd0>
 800b6d4:	232d      	movs	r3, #45	@ 0x2d
 800b6d6:	426d      	negs	r5, r5
 800b6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6dc:	230a      	movs	r3, #10
 800b6de:	4858      	ldr	r0, [pc, #352]	@ (800b840 <_printf_i+0x234>)
 800b6e0:	e011      	b.n	800b706 <_printf_i+0xfa>
 800b6e2:	6821      	ldr	r1, [r4, #0]
 800b6e4:	6833      	ldr	r3, [r6, #0]
 800b6e6:	0608      	lsls	r0, r1, #24
 800b6e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6ec:	d402      	bmi.n	800b6f4 <_printf_i+0xe8>
 800b6ee:	0649      	lsls	r1, r1, #25
 800b6f0:	bf48      	it	mi
 800b6f2:	b2ad      	uxthmi	r5, r5
 800b6f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6f6:	6033      	str	r3, [r6, #0]
 800b6f8:	bf14      	ite	ne
 800b6fa:	230a      	movne	r3, #10
 800b6fc:	2308      	moveq	r3, #8
 800b6fe:	4850      	ldr	r0, [pc, #320]	@ (800b840 <_printf_i+0x234>)
 800b700:	2100      	movs	r1, #0
 800b702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b706:	6866      	ldr	r6, [r4, #4]
 800b708:	2e00      	cmp	r6, #0
 800b70a:	60a6      	str	r6, [r4, #8]
 800b70c:	db05      	blt.n	800b71a <_printf_i+0x10e>
 800b70e:	6821      	ldr	r1, [r4, #0]
 800b710:	432e      	orrs	r6, r5
 800b712:	f021 0104 	bic.w	r1, r1, #4
 800b716:	6021      	str	r1, [r4, #0]
 800b718:	d04b      	beq.n	800b7b2 <_printf_i+0x1a6>
 800b71a:	4616      	mov	r6, r2
 800b71c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b720:	fb03 5711 	mls	r7, r3, r1, r5
 800b724:	5dc7      	ldrb	r7, [r0, r7]
 800b726:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b72a:	462f      	mov	r7, r5
 800b72c:	42bb      	cmp	r3, r7
 800b72e:	460d      	mov	r5, r1
 800b730:	d9f4      	bls.n	800b71c <_printf_i+0x110>
 800b732:	2b08      	cmp	r3, #8
 800b734:	d10b      	bne.n	800b74e <_printf_i+0x142>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	07df      	lsls	r7, r3, #31
 800b73a:	d508      	bpl.n	800b74e <_printf_i+0x142>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	6861      	ldr	r1, [r4, #4]
 800b740:	4299      	cmp	r1, r3
 800b742:	bfde      	ittt	le
 800b744:	2330      	movle	r3, #48	@ 0x30
 800b746:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b74a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b74e:	1b92      	subs	r2, r2, r6
 800b750:	6122      	str	r2, [r4, #16]
 800b752:	464b      	mov	r3, r9
 800b754:	4621      	mov	r1, r4
 800b756:	4640      	mov	r0, r8
 800b758:	f8cd a000 	str.w	sl, [sp]
 800b75c:	aa03      	add	r2, sp, #12
 800b75e:	f7ff fee3 	bl	800b528 <_printf_common>
 800b762:	3001      	adds	r0, #1
 800b764:	d14a      	bne.n	800b7fc <_printf_i+0x1f0>
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	b004      	add	sp, #16
 800b76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b770:	6823      	ldr	r3, [r4, #0]
 800b772:	f043 0320 	orr.w	r3, r3, #32
 800b776:	6023      	str	r3, [r4, #0]
 800b778:	2778      	movs	r7, #120	@ 0x78
 800b77a:	4832      	ldr	r0, [pc, #200]	@ (800b844 <_printf_i+0x238>)
 800b77c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	6831      	ldr	r1, [r6, #0]
 800b784:	061f      	lsls	r7, r3, #24
 800b786:	f851 5b04 	ldr.w	r5, [r1], #4
 800b78a:	d402      	bmi.n	800b792 <_printf_i+0x186>
 800b78c:	065f      	lsls	r7, r3, #25
 800b78e:	bf48      	it	mi
 800b790:	b2ad      	uxthmi	r5, r5
 800b792:	6031      	str	r1, [r6, #0]
 800b794:	07d9      	lsls	r1, r3, #31
 800b796:	bf44      	itt	mi
 800b798:	f043 0320 	orrmi.w	r3, r3, #32
 800b79c:	6023      	strmi	r3, [r4, #0]
 800b79e:	b11d      	cbz	r5, 800b7a8 <_printf_i+0x19c>
 800b7a0:	2310      	movs	r3, #16
 800b7a2:	e7ad      	b.n	800b700 <_printf_i+0xf4>
 800b7a4:	4826      	ldr	r0, [pc, #152]	@ (800b840 <_printf_i+0x234>)
 800b7a6:	e7e9      	b.n	800b77c <_printf_i+0x170>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	f023 0320 	bic.w	r3, r3, #32
 800b7ae:	6023      	str	r3, [r4, #0]
 800b7b0:	e7f6      	b.n	800b7a0 <_printf_i+0x194>
 800b7b2:	4616      	mov	r6, r2
 800b7b4:	e7bd      	b.n	800b732 <_printf_i+0x126>
 800b7b6:	6833      	ldr	r3, [r6, #0]
 800b7b8:	6825      	ldr	r5, [r4, #0]
 800b7ba:	1d18      	adds	r0, r3, #4
 800b7bc:	6961      	ldr	r1, [r4, #20]
 800b7be:	6030      	str	r0, [r6, #0]
 800b7c0:	062e      	lsls	r6, r5, #24
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	d501      	bpl.n	800b7ca <_printf_i+0x1be>
 800b7c6:	6019      	str	r1, [r3, #0]
 800b7c8:	e002      	b.n	800b7d0 <_printf_i+0x1c4>
 800b7ca:	0668      	lsls	r0, r5, #25
 800b7cc:	d5fb      	bpl.n	800b7c6 <_printf_i+0x1ba>
 800b7ce:	8019      	strh	r1, [r3, #0]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4616      	mov	r6, r2
 800b7d4:	6123      	str	r3, [r4, #16]
 800b7d6:	e7bc      	b.n	800b752 <_printf_i+0x146>
 800b7d8:	6833      	ldr	r3, [r6, #0]
 800b7da:	2100      	movs	r1, #0
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	6032      	str	r2, [r6, #0]
 800b7e0:	681e      	ldr	r6, [r3, #0]
 800b7e2:	6862      	ldr	r2, [r4, #4]
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f000 f859 	bl	800b89c <memchr>
 800b7ea:	b108      	cbz	r0, 800b7f0 <_printf_i+0x1e4>
 800b7ec:	1b80      	subs	r0, r0, r6
 800b7ee:	6060      	str	r0, [r4, #4]
 800b7f0:	6863      	ldr	r3, [r4, #4]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7fa:	e7aa      	b.n	800b752 <_printf_i+0x146>
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	4649      	mov	r1, r9
 800b800:	4640      	mov	r0, r8
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	47d0      	blx	sl
 800b806:	3001      	adds	r0, #1
 800b808:	d0ad      	beq.n	800b766 <_printf_i+0x15a>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	079b      	lsls	r3, r3, #30
 800b80e:	d413      	bmi.n	800b838 <_printf_i+0x22c>
 800b810:	68e0      	ldr	r0, [r4, #12]
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	4298      	cmp	r0, r3
 800b816:	bfb8      	it	lt
 800b818:	4618      	movlt	r0, r3
 800b81a:	e7a6      	b.n	800b76a <_printf_i+0x15e>
 800b81c:	2301      	movs	r3, #1
 800b81e:	4632      	mov	r2, r6
 800b820:	4649      	mov	r1, r9
 800b822:	4640      	mov	r0, r8
 800b824:	47d0      	blx	sl
 800b826:	3001      	adds	r0, #1
 800b828:	d09d      	beq.n	800b766 <_printf_i+0x15a>
 800b82a:	3501      	adds	r5, #1
 800b82c:	68e3      	ldr	r3, [r4, #12]
 800b82e:	9903      	ldr	r1, [sp, #12]
 800b830:	1a5b      	subs	r3, r3, r1
 800b832:	42ab      	cmp	r3, r5
 800b834:	dcf2      	bgt.n	800b81c <_printf_i+0x210>
 800b836:	e7eb      	b.n	800b810 <_printf_i+0x204>
 800b838:	2500      	movs	r5, #0
 800b83a:	f104 0619 	add.w	r6, r4, #25
 800b83e:	e7f5      	b.n	800b82c <_printf_i+0x220>
 800b840:	0800de5c 	.word	0x0800de5c
 800b844:	0800de6d 	.word	0x0800de6d

0800b848 <memmove>:
 800b848:	4288      	cmp	r0, r1
 800b84a:	b510      	push	{r4, lr}
 800b84c:	eb01 0402 	add.w	r4, r1, r2
 800b850:	d902      	bls.n	800b858 <memmove+0x10>
 800b852:	4284      	cmp	r4, r0
 800b854:	4623      	mov	r3, r4
 800b856:	d807      	bhi.n	800b868 <memmove+0x20>
 800b858:	1e43      	subs	r3, r0, #1
 800b85a:	42a1      	cmp	r1, r4
 800b85c:	d008      	beq.n	800b870 <memmove+0x28>
 800b85e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b862:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b866:	e7f8      	b.n	800b85a <memmove+0x12>
 800b868:	4601      	mov	r1, r0
 800b86a:	4402      	add	r2, r0
 800b86c:	428a      	cmp	r2, r1
 800b86e:	d100      	bne.n	800b872 <memmove+0x2a>
 800b870:	bd10      	pop	{r4, pc}
 800b872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b87a:	e7f7      	b.n	800b86c <memmove+0x24>

0800b87c <_sbrk_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	2300      	movs	r3, #0
 800b880:	4d05      	ldr	r5, [pc, #20]	@ (800b898 <_sbrk_r+0x1c>)
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	f7f6 f94e 	bl	8001b28 <_sbrk>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_sbrk_r+0x1a>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_sbrk_r+0x1a>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	200018bc 	.word	0x200018bc

0800b89c <memchr>:
 800b89c:	4603      	mov	r3, r0
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	b2c9      	uxtb	r1, r1
 800b8a2:	4402      	add	r2, r0
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	d101      	bne.n	800b8ae <memchr+0x12>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e003      	b.n	800b8b6 <memchr+0x1a>
 800b8ae:	7804      	ldrb	r4, [r0, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	428c      	cmp	r4, r1
 800b8b4:	d1f6      	bne.n	800b8a4 <memchr+0x8>
 800b8b6:	bd10      	pop	{r4, pc}

0800b8b8 <_realloc_r>:
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	4607      	mov	r7, r0
 800b8be:	4614      	mov	r4, r2
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	b921      	cbnz	r1, 800b8ce <_realloc_r+0x16>
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ca:	f7ff bc49 	b.w	800b160 <_malloc_r>
 800b8ce:	b92a      	cbnz	r2, 800b8dc <_realloc_r+0x24>
 800b8d0:	f7ff fbdc 	bl	800b08c <_free_r>
 800b8d4:	4625      	mov	r5, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	f000 f81a 	bl	800b914 <_malloc_usable_size_r>
 800b8e0:	4284      	cmp	r4, r0
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	d802      	bhi.n	800b8ec <_realloc_r+0x34>
 800b8e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8ea:	d8f4      	bhi.n	800b8d6 <_realloc_r+0x1e>
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7ff fc36 	bl	800b160 <_malloc_r>
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	b908      	cbnz	r0, 800b8fc <_realloc_r+0x44>
 800b8f8:	4645      	mov	r5, r8
 800b8fa:	e7ec      	b.n	800b8d6 <_realloc_r+0x1e>
 800b8fc:	42b4      	cmp	r4, r6
 800b8fe:	4622      	mov	r2, r4
 800b900:	4629      	mov	r1, r5
 800b902:	bf28      	it	cs
 800b904:	4632      	movcs	r2, r6
 800b906:	f7ff fbb3 	bl	800b070 <memcpy>
 800b90a:	4629      	mov	r1, r5
 800b90c:	4638      	mov	r0, r7
 800b90e:	f7ff fbbd 	bl	800b08c <_free_r>
 800b912:	e7f1      	b.n	800b8f8 <_realloc_r+0x40>

0800b914 <_malloc_usable_size_r>:
 800b914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b918:	1f18      	subs	r0, r3, #4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	bfbc      	itt	lt
 800b91e:	580b      	ldrlt	r3, [r1, r0]
 800b920:	18c0      	addlt	r0, r0, r3
 800b922:	4770      	bx	lr

0800b924 <pow>:
 800b924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b928:	4614      	mov	r4, r2
 800b92a:	461d      	mov	r5, r3
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	f000 f866 	bl	800ba00 <__ieee754_pow>
 800b934:	4622      	mov	r2, r4
 800b936:	4606      	mov	r6, r0
 800b938:	460f      	mov	r7, r1
 800b93a:	462b      	mov	r3, r5
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f5 f864 	bl	8000a0c <__aeabi_dcmpun>
 800b944:	bbc8      	cbnz	r0, 800b9ba <pow+0x96>
 800b946:	2200      	movs	r2, #0
 800b948:	2300      	movs	r3, #0
 800b94a:	4640      	mov	r0, r8
 800b94c:	4649      	mov	r1, r9
 800b94e:	f7f5 f82b 	bl	80009a8 <__aeabi_dcmpeq>
 800b952:	b1b8      	cbz	r0, 800b984 <pow+0x60>
 800b954:	2200      	movs	r2, #0
 800b956:	2300      	movs	r3, #0
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f5 f824 	bl	80009a8 <__aeabi_dcmpeq>
 800b960:	2800      	cmp	r0, #0
 800b962:	d141      	bne.n	800b9e8 <pow+0xc4>
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f000 f844 	bl	800b9f4 <finite>
 800b96c:	b328      	cbz	r0, 800b9ba <pow+0x96>
 800b96e:	2200      	movs	r2, #0
 800b970:	2300      	movs	r3, #0
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f5 f821 	bl	80009bc <__aeabi_dcmplt>
 800b97a:	b1f0      	cbz	r0, 800b9ba <pow+0x96>
 800b97c:	f7ff fb4c 	bl	800b018 <__errno>
 800b980:	2322      	movs	r3, #34	@ 0x22
 800b982:	e019      	b.n	800b9b8 <pow+0x94>
 800b984:	4630      	mov	r0, r6
 800b986:	4639      	mov	r1, r7
 800b988:	f000 f834 	bl	800b9f4 <finite>
 800b98c:	b9c8      	cbnz	r0, 800b9c2 <pow+0x9e>
 800b98e:	4640      	mov	r0, r8
 800b990:	4649      	mov	r1, r9
 800b992:	f000 f82f 	bl	800b9f4 <finite>
 800b996:	b1a0      	cbz	r0, 800b9c2 <pow+0x9e>
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f000 f82a 	bl	800b9f4 <finite>
 800b9a0:	b178      	cbz	r0, 800b9c2 <pow+0x9e>
 800b9a2:	4632      	mov	r2, r6
 800b9a4:	463b      	mov	r3, r7
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	f7f5 f82f 	bl	8000a0c <__aeabi_dcmpun>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0e4      	beq.n	800b97c <pow+0x58>
 800b9b2:	f7ff fb31 	bl	800b018 <__errno>
 800b9b6:	2321      	movs	r3, #33	@ 0x21
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f4 ffed 	bl	80009a8 <__aeabi_dcmpeq>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d0f3      	beq.n	800b9ba <pow+0x96>
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	f000 f80d 	bl	800b9f4 <finite>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d0ed      	beq.n	800b9ba <pow+0x96>
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f000 f807 	bl	800b9f4 <finite>
 800b9e6:	e7c8      	b.n	800b97a <pow+0x56>
 800b9e8:	2600      	movs	r6, #0
 800b9ea:	4f01      	ldr	r7, [pc, #4]	@ (800b9f0 <pow+0xcc>)
 800b9ec:	e7e5      	b.n	800b9ba <pow+0x96>
 800b9ee:	bf00      	nop
 800b9f0:	3ff00000 	.word	0x3ff00000

0800b9f4 <finite>:
 800b9f4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b9f8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b9fc:	0fc0      	lsrs	r0, r0, #31
 800b9fe:	4770      	bx	lr

0800ba00 <__ieee754_pow>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	b091      	sub	sp, #68	@ 0x44
 800ba06:	e9cd 2300 	strd	r2, r3, [sp]
 800ba0a:	468b      	mov	fp, r1
 800ba0c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800ba10:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800ba14:	4682      	mov	sl, r0
 800ba16:	ea57 0001 	orrs.w	r0, r7, r1
 800ba1a:	d112      	bne.n	800ba42 <__ieee754_pow+0x42>
 800ba1c:	4653      	mov	r3, sl
 800ba1e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800ba22:	18db      	adds	r3, r3, r3
 800ba24:	4152      	adcs	r2, r2
 800ba26:	4298      	cmp	r0, r3
 800ba28:	4b93      	ldr	r3, [pc, #588]	@ (800bc78 <__ieee754_pow+0x278>)
 800ba2a:	4193      	sbcs	r3, r2
 800ba2c:	f080 84cd 	bcs.w	800c3ca <__ieee754_pow+0x9ca>
 800ba30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba34:	4650      	mov	r0, sl
 800ba36:	4659      	mov	r1, fp
 800ba38:	f7f4 fb98 	bl	800016c <__adddf3>
 800ba3c:	b011      	add	sp, #68	@ 0x44
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	4b8e      	ldr	r3, [pc, #568]	@ (800bc7c <__ieee754_pow+0x27c>)
 800ba44:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 800ba48:	429d      	cmp	r5, r3
 800ba4a:	465e      	mov	r6, fp
 800ba4c:	46d1      	mov	r9, sl
 800ba4e:	d80b      	bhi.n	800ba68 <__ieee754_pow+0x68>
 800ba50:	d105      	bne.n	800ba5e <__ieee754_pow+0x5e>
 800ba52:	f1ba 0f00 	cmp.w	sl, #0
 800ba56:	d1eb      	bne.n	800ba30 <__ieee754_pow+0x30>
 800ba58:	42af      	cmp	r7, r5
 800ba5a:	d8e9      	bhi.n	800ba30 <__ieee754_pow+0x30>
 800ba5c:	e001      	b.n	800ba62 <__ieee754_pow+0x62>
 800ba5e:	429f      	cmp	r7, r3
 800ba60:	d802      	bhi.n	800ba68 <__ieee754_pow+0x68>
 800ba62:	429f      	cmp	r7, r3
 800ba64:	d10f      	bne.n	800ba86 <__ieee754_pow+0x86>
 800ba66:	b171      	cbz	r1, 800ba86 <__ieee754_pow+0x86>
 800ba68:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ba6c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ba70:	ea56 0609 	orrs.w	r6, r6, r9
 800ba74:	d1dc      	bne.n	800ba30 <__ieee754_pow+0x30>
 800ba76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba7a:	18db      	adds	r3, r3, r3
 800ba7c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ba80:	4152      	adcs	r2, r2
 800ba82:	429e      	cmp	r6, r3
 800ba84:	e7d0      	b.n	800ba28 <__ieee754_pow+0x28>
 800ba86:	2e00      	cmp	r6, #0
 800ba88:	462b      	mov	r3, r5
 800ba8a:	da42      	bge.n	800bb12 <__ieee754_pow+0x112>
 800ba8c:	4a7c      	ldr	r2, [pc, #496]	@ (800bc80 <__ieee754_pow+0x280>)
 800ba8e:	4297      	cmp	r7, r2
 800ba90:	d856      	bhi.n	800bb40 <__ieee754_pow+0x140>
 800ba92:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ba96:	4297      	cmp	r7, r2
 800ba98:	f240 84a6 	bls.w	800c3e8 <__ieee754_pow+0x9e8>
 800ba9c:	153a      	asrs	r2, r7, #20
 800ba9e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800baa2:	2a14      	cmp	r2, #20
 800baa4:	dd18      	ble.n	800bad8 <__ieee754_pow+0xd8>
 800baa6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800baaa:	fa21 f402 	lsr.w	r4, r1, r2
 800baae:	fa04 f202 	lsl.w	r2, r4, r2
 800bab2:	428a      	cmp	r2, r1
 800bab4:	f040 8498 	bne.w	800c3e8 <__ieee754_pow+0x9e8>
 800bab8:	f004 0401 	and.w	r4, r4, #1
 800babc:	f1c4 0402 	rsb	r4, r4, #2
 800bac0:	2900      	cmp	r1, #0
 800bac2:	d159      	bne.n	800bb78 <__ieee754_pow+0x178>
 800bac4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bac8:	d149      	bne.n	800bb5e <__ieee754_pow+0x15e>
 800baca:	4652      	mov	r2, sl
 800bacc:	465b      	mov	r3, fp
 800bace:	4650      	mov	r0, sl
 800bad0:	4659      	mov	r1, fp
 800bad2:	f7f4 fd01 	bl	80004d8 <__aeabi_dmul>
 800bad6:	e7b1      	b.n	800ba3c <__ieee754_pow+0x3c>
 800bad8:	2900      	cmp	r1, #0
 800bada:	d14c      	bne.n	800bb76 <__ieee754_pow+0x176>
 800badc:	f1c2 0214 	rsb	r2, r2, #20
 800bae0:	fa47 f402 	asr.w	r4, r7, r2
 800bae4:	fa04 f202 	lsl.w	r2, r4, r2
 800bae8:	42ba      	cmp	r2, r7
 800baea:	f040 847a 	bne.w	800c3e2 <__ieee754_pow+0x9e2>
 800baee:	f004 0401 	and.w	r4, r4, #1
 800baf2:	f1c4 0402 	rsb	r4, r4, #2
 800baf6:	4a63      	ldr	r2, [pc, #396]	@ (800bc84 <__ieee754_pow+0x284>)
 800baf8:	4297      	cmp	r7, r2
 800bafa:	d1e3      	bne.n	800bac4 <__ieee754_pow+0xc4>
 800bafc:	f1b8 0f00 	cmp.w	r8, #0
 800bb00:	f280 846b 	bge.w	800c3da <__ieee754_pow+0x9da>
 800bb04:	4652      	mov	r2, sl
 800bb06:	465b      	mov	r3, fp
 800bb08:	2000      	movs	r0, #0
 800bb0a:	495e      	ldr	r1, [pc, #376]	@ (800bc84 <__ieee754_pow+0x284>)
 800bb0c:	f7f4 fe0e 	bl	800072c <__aeabi_ddiv>
 800bb10:	e794      	b.n	800ba3c <__ieee754_pow+0x3c>
 800bb12:	2400      	movs	r4, #0
 800bb14:	bb81      	cbnz	r1, 800bb78 <__ieee754_pow+0x178>
 800bb16:	4a59      	ldr	r2, [pc, #356]	@ (800bc7c <__ieee754_pow+0x27c>)
 800bb18:	4297      	cmp	r7, r2
 800bb1a:	d1ec      	bne.n	800baf6 <__ieee754_pow+0xf6>
 800bb1c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800bb20:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bb24:	ea53 0309 	orrs.w	r3, r3, r9
 800bb28:	f000 844f 	beq.w	800c3ca <__ieee754_pow+0x9ca>
 800bb2c:	4b56      	ldr	r3, [pc, #344]	@ (800bc88 <__ieee754_pow+0x288>)
 800bb2e:	429d      	cmp	r5, r3
 800bb30:	d908      	bls.n	800bb44 <__ieee754_pow+0x144>
 800bb32:	f1b8 0f00 	cmp.w	r8, #0
 800bb36:	f280 844c 	bge.w	800c3d2 <__ieee754_pow+0x9d2>
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	e77d      	b.n	800ba3c <__ieee754_pow+0x3c>
 800bb40:	2402      	movs	r4, #2
 800bb42:	e7e7      	b.n	800bb14 <__ieee754_pow+0x114>
 800bb44:	f1b8 0f00 	cmp.w	r8, #0
 800bb48:	f04f 0000 	mov.w	r0, #0
 800bb4c:	f04f 0100 	mov.w	r1, #0
 800bb50:	f6bf af74 	bge.w	800ba3c <__ieee754_pow+0x3c>
 800bb54:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb58:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb5c:	e76e      	b.n	800ba3c <__ieee754_pow+0x3c>
 800bb5e:	4a4b      	ldr	r2, [pc, #300]	@ (800bc8c <__ieee754_pow+0x28c>)
 800bb60:	4590      	cmp	r8, r2
 800bb62:	d109      	bne.n	800bb78 <__ieee754_pow+0x178>
 800bb64:	2e00      	cmp	r6, #0
 800bb66:	db07      	blt.n	800bb78 <__ieee754_pow+0x178>
 800bb68:	4650      	mov	r0, sl
 800bb6a:	4659      	mov	r1, fp
 800bb6c:	b011      	add	sp, #68	@ 0x44
 800bb6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb72:	f000 bd0f 	b.w	800c594 <__ieee754_sqrt>
 800bb76:	2400      	movs	r4, #0
 800bb78:	4650      	mov	r0, sl
 800bb7a:	4659      	mov	r1, fp
 800bb7c:	9302      	str	r3, [sp, #8]
 800bb7e:	f000 fc69 	bl	800c454 <fabs>
 800bb82:	9b02      	ldr	r3, [sp, #8]
 800bb84:	f1b9 0f00 	cmp.w	r9, #0
 800bb88:	d127      	bne.n	800bbda <__ieee754_pow+0x1da>
 800bb8a:	4a3e      	ldr	r2, [pc, #248]	@ (800bc84 <__ieee754_pow+0x284>)
 800bb8c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800bb90:	4594      	cmp	ip, r2
 800bb92:	d000      	beq.n	800bb96 <__ieee754_pow+0x196>
 800bb94:	bb0d      	cbnz	r5, 800bbda <__ieee754_pow+0x1da>
 800bb96:	f1b8 0f00 	cmp.w	r8, #0
 800bb9a:	da05      	bge.n	800bba8 <__ieee754_pow+0x1a8>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	2000      	movs	r0, #0
 800bba2:	4938      	ldr	r1, [pc, #224]	@ (800bc84 <__ieee754_pow+0x284>)
 800bba4:	f7f4 fdc2 	bl	800072c <__aeabi_ddiv>
 800bba8:	2e00      	cmp	r6, #0
 800bbaa:	f6bf af47 	bge.w	800ba3c <__ieee754_pow+0x3c>
 800bbae:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bbb2:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bbb6:	4325      	orrs	r5, r4
 800bbb8:	d108      	bne.n	800bbcc <__ieee754_pow+0x1cc>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	f7f4 fad1 	bl	8000168 <__aeabi_dsub>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	e79f      	b.n	800bb0c <__ieee754_pow+0x10c>
 800bbcc:	2c01      	cmp	r4, #1
 800bbce:	f47f af35 	bne.w	800ba3c <__ieee754_pow+0x3c>
 800bbd2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	e730      	b.n	800ba3c <__ieee754_pow+0x3c>
 800bbda:	0ff2      	lsrs	r2, r6, #31
 800bbdc:	3a01      	subs	r2, #1
 800bbde:	ea52 0c04 	orrs.w	ip, r2, r4
 800bbe2:	d102      	bne.n	800bbea <__ieee754_pow+0x1ea>
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	465b      	mov	r3, fp
 800bbe8:	e7e9      	b.n	800bbbe <__ieee754_pow+0x1be>
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	3c01      	subs	r4, #1
 800bbf0:	4314      	orrs	r4, r2
 800bbf2:	bf14      	ite	ne
 800bbf4:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bc84 <__ieee754_pow+0x284>
 800bbf8:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bc90 <__ieee754_pow+0x290>
 800bbfc:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bc00:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bc04:	f240 8104 	bls.w	800be10 <__ieee754_pow+0x410>
 800bc08:	4b22      	ldr	r3, [pc, #136]	@ (800bc94 <__ieee754_pow+0x294>)
 800bc0a:	429f      	cmp	r7, r3
 800bc0c:	4b1e      	ldr	r3, [pc, #120]	@ (800bc88 <__ieee754_pow+0x288>)
 800bc0e:	d913      	bls.n	800bc38 <__ieee754_pow+0x238>
 800bc10:	429d      	cmp	r5, r3
 800bc12:	d808      	bhi.n	800bc26 <__ieee754_pow+0x226>
 800bc14:	f1b8 0f00 	cmp.w	r8, #0
 800bc18:	da08      	bge.n	800bc2c <__ieee754_pow+0x22c>
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	b011      	add	sp, #68	@ 0x44
 800bc1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc22:	f000 bcb1 	b.w	800c588 <__math_oflow>
 800bc26:	f1b8 0f00 	cmp.w	r8, #0
 800bc2a:	dcf6      	bgt.n	800bc1a <__ieee754_pow+0x21a>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	b011      	add	sp, #68	@ 0x44
 800bc30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	f000 bca3 	b.w	800c57e <__math_uflow>
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	d20c      	bcs.n	800bc56 <__ieee754_pow+0x256>
 800bc3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	f7f4 feba 	bl	80009bc <__aeabi_dcmplt>
 800bc48:	3800      	subs	r0, #0
 800bc4a:	bf18      	it	ne
 800bc4c:	2001      	movne	r0, #1
 800bc4e:	f1b8 0f00 	cmp.w	r8, #0
 800bc52:	daec      	bge.n	800bc2e <__ieee754_pow+0x22e>
 800bc54:	e7e2      	b.n	800bc1c <__ieee754_pow+0x21c>
 800bc56:	4b0b      	ldr	r3, [pc, #44]	@ (800bc84 <__ieee754_pow+0x284>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	429d      	cmp	r5, r3
 800bc5c:	d91c      	bls.n	800bc98 <__ieee754_pow+0x298>
 800bc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc62:	2300      	movs	r3, #0
 800bc64:	f7f4 feaa 	bl	80009bc <__aeabi_dcmplt>
 800bc68:	3800      	subs	r0, #0
 800bc6a:	bf18      	it	ne
 800bc6c:	2001      	movne	r0, #1
 800bc6e:	f1b8 0f00 	cmp.w	r8, #0
 800bc72:	dcd3      	bgt.n	800bc1c <__ieee754_pow+0x21c>
 800bc74:	e7db      	b.n	800bc2e <__ieee754_pow+0x22e>
 800bc76:	bf00      	nop
 800bc78:	fff00000 	.word	0xfff00000
 800bc7c:	7ff00000 	.word	0x7ff00000
 800bc80:	433fffff 	.word	0x433fffff
 800bc84:	3ff00000 	.word	0x3ff00000
 800bc88:	3fefffff 	.word	0x3fefffff
 800bc8c:	3fe00000 	.word	0x3fe00000
 800bc90:	bff00000 	.word	0xbff00000
 800bc94:	43f00000 	.word	0x43f00000
 800bc98:	4b59      	ldr	r3, [pc, #356]	@ (800be00 <__ieee754_pow+0x400>)
 800bc9a:	f7f4 fa65 	bl	8000168 <__aeabi_dsub>
 800bc9e:	a350      	add	r3, pc, #320	@ (adr r3, 800bde0 <__ieee754_pow+0x3e0>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	4604      	mov	r4, r0
 800bca6:	460d      	mov	r5, r1
 800bca8:	f7f4 fc16 	bl	80004d8 <__aeabi_dmul>
 800bcac:	a34e      	add	r3, pc, #312	@ (adr r3, 800bde8 <__ieee754_pow+0x3e8>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 fc0d 	bl	80004d8 <__aeabi_dmul>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	468b      	mov	fp, r1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4b4e      	ldr	r3, [pc, #312]	@ (800be04 <__ieee754_pow+0x404>)
 800bcca:	f7f4 fc05 	bl	80004d8 <__aeabi_dmul>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	a147      	add	r1, pc, #284	@ (adr r1, 800bdf0 <__ieee754_pow+0x3f0>)
 800bcd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd8:	f7f4 fa46 	bl	8000168 <__aeabi_dsub>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	462b      	mov	r3, r5
 800bce0:	f7f4 fbfa 	bl	80004d8 <__aeabi_dmul>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	2000      	movs	r0, #0
 800bcea:	4947      	ldr	r1, [pc, #284]	@ (800be08 <__ieee754_pow+0x408>)
 800bcec:	f7f4 fa3c 	bl	8000168 <__aeabi_dsub>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	4689      	mov	r9, r1
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7f4 fbec 	bl	80004d8 <__aeabi_dmul>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4640      	mov	r0, r8
 800bd06:	4649      	mov	r1, r9
 800bd08:	f7f4 fbe6 	bl	80004d8 <__aeabi_dmul>
 800bd0c:	a33a      	add	r3, pc, #232	@ (adr r3, 800bdf8 <__ieee754_pow+0x3f8>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fbe1 	bl	80004d8 <__aeabi_dmul>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4650      	mov	r0, sl
 800bd1c:	4659      	mov	r1, fp
 800bd1e:	f7f4 fa23 	bl	8000168 <__aeabi_dsub>
 800bd22:	2400      	movs	r4, #0
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4680      	mov	r8, r0
 800bd2a:	4689      	mov	r9, r1
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4639      	mov	r1, r7
 800bd30:	f7f4 fa1c 	bl	800016c <__adddf3>
 800bd34:	4632      	mov	r2, r6
 800bd36:	463b      	mov	r3, r7
 800bd38:	4620      	mov	r0, r4
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	f7f4 fa14 	bl	8000168 <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fa0e 	bl	8000168 <__aeabi_dsub>
 800bd4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9304      	str	r3, [sp, #16]
 800bd58:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd64:	465b      	mov	r3, fp
 800bd66:	4652      	mov	r2, sl
 800bd68:	f7f4 f9fe 	bl	8000168 <__aeabi_dsub>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f7f4 fbb2 	bl	80004d8 <__aeabi_dmul>
 800bd74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd78:	4680      	mov	r8, r0
 800bd7a:	4689      	mov	r9, r1
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
 800bd80:	f7f4 fbaa 	bl	80004d8 <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 f9ee 	bl	800016c <__adddf3>
 800bd90:	465b      	mov	r3, fp
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	4652      	mov	r2, sl
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 fb9c 	bl	80004d8 <__aeabi_dmul>
 800bda0:	460b      	mov	r3, r1
 800bda2:	4602      	mov	r2, r0
 800bda4:	4680      	mov	r8, r0
 800bda6:	4689      	mov	r9, r1
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 f9de 	bl	800016c <__adddf3>
 800bdb0:	4b16      	ldr	r3, [pc, #88]	@ (800be0c <__ieee754_pow+0x40c>)
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4299      	cmp	r1, r3
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	468b      	mov	fp, r1
 800bdba:	f340 81fd 	ble.w	800c1b8 <__ieee754_pow+0x7b8>
 800bdbe:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bdc2:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bdc6:	4303      	orrs	r3, r0
 800bdc8:	f000 81dc 	beq.w	800c184 <__ieee754_pow+0x784>
 800bdcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f7f4 fdf2 	bl	80009bc <__aeabi_dcmplt>
 800bdd8:	3800      	subs	r0, #0
 800bdda:	bf18      	it	ne
 800bddc:	2001      	movne	r0, #1
 800bdde:	e71d      	b.n	800bc1c <__ieee754_pow+0x21c>
 800bde0:	60000000 	.word	0x60000000
 800bde4:	3ff71547 	.word	0x3ff71547
 800bde8:	f85ddf44 	.word	0xf85ddf44
 800bdec:	3e54ae0b 	.word	0x3e54ae0b
 800bdf0:	55555555 	.word	0x55555555
 800bdf4:	3fd55555 	.word	0x3fd55555
 800bdf8:	652b82fe 	.word	0x652b82fe
 800bdfc:	3ff71547 	.word	0x3ff71547
 800be00:	3ff00000 	.word	0x3ff00000
 800be04:	3fd00000 	.word	0x3fd00000
 800be08:	3fe00000 	.word	0x3fe00000
 800be0c:	408fffff 	.word	0x408fffff
 800be10:	4ad3      	ldr	r2, [pc, #844]	@ (800c160 <__ieee754_pow+0x760>)
 800be12:	4032      	ands	r2, r6
 800be14:	2a00      	cmp	r2, #0
 800be16:	f040 817a 	bne.w	800c10e <__ieee754_pow+0x70e>
 800be1a:	4bd2      	ldr	r3, [pc, #840]	@ (800c164 <__ieee754_pow+0x764>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	f7f4 fb5b 	bl	80004d8 <__aeabi_dmul>
 800be22:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800be26:	460b      	mov	r3, r1
 800be28:	151a      	asrs	r2, r3, #20
 800be2a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be2e:	4422      	add	r2, r4
 800be30:	920a      	str	r2, [sp, #40]	@ 0x28
 800be32:	4acd      	ldr	r2, [pc, #820]	@ (800c168 <__ieee754_pow+0x768>)
 800be34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be38:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800be3c:	4293      	cmp	r3, r2
 800be3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be42:	dd08      	ble.n	800be56 <__ieee754_pow+0x456>
 800be44:	4ac9      	ldr	r2, [pc, #804]	@ (800c16c <__ieee754_pow+0x76c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	f340 8163 	ble.w	800c112 <__ieee754_pow+0x712>
 800be4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be4e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800be52:	3301      	adds	r3, #1
 800be54:	930a      	str	r3, [sp, #40]	@ 0x28
 800be56:	2600      	movs	r6, #0
 800be58:	00f3      	lsls	r3, r6, #3
 800be5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be5c:	4bc4      	ldr	r3, [pc, #784]	@ (800c170 <__ieee754_pow+0x770>)
 800be5e:	4629      	mov	r1, r5
 800be60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be64:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be68:	461a      	mov	r2, r3
 800be6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800be6e:	4623      	mov	r3, r4
 800be70:	4682      	mov	sl, r0
 800be72:	f7f4 f979 	bl	8000168 <__aeabi_dsub>
 800be76:	4652      	mov	r2, sl
 800be78:	462b      	mov	r3, r5
 800be7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800be7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be82:	f7f4 f973 	bl	800016c <__adddf3>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	2000      	movs	r0, #0
 800be8c:	49b9      	ldr	r1, [pc, #740]	@ (800c174 <__ieee754_pow+0x774>)
 800be8e:	f7f4 fc4d 	bl	800072c <__aeabi_ddiv>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be9e:	f7f4 fb1b 	bl	80004d8 <__aeabi_dmul>
 800bea2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bea6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800beaa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800beae:	2300      	movs	r3, #0
 800beb0:	2200      	movs	r2, #0
 800beb2:	46ab      	mov	fp, r5
 800beb4:	106d      	asrs	r5, r5, #1
 800beb6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bec0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bec4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bec8:	4640      	mov	r0, r8
 800beca:	4649      	mov	r1, r9
 800becc:	4614      	mov	r4, r2
 800bece:	461d      	mov	r5, r3
 800bed0:	f7f4 fb02 	bl	80004d8 <__aeabi_dmul>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bedc:	f7f4 f944 	bl	8000168 <__aeabi_dsub>
 800bee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bee4:	4606      	mov	r6, r0
 800bee6:	460f      	mov	r7, r1
 800bee8:	4620      	mov	r0, r4
 800beea:	4629      	mov	r1, r5
 800beec:	f7f4 f93c 	bl	8000168 <__aeabi_dsub>
 800bef0:	4602      	mov	r2, r0
 800bef2:	460b      	mov	r3, r1
 800bef4:	4650      	mov	r0, sl
 800bef6:	4659      	mov	r1, fp
 800bef8:	f7f4 f936 	bl	8000168 <__aeabi_dsub>
 800befc:	4642      	mov	r2, r8
 800befe:	464b      	mov	r3, r9
 800bf00:	f7f4 faea 	bl	80004d8 <__aeabi_dmul>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4630      	mov	r0, r6
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	f7f4 f92c 	bl	8000168 <__aeabi_dsub>
 800bf10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf14:	f7f4 fae0 	bl	80004d8 <__aeabi_dmul>
 800bf18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf20:	4610      	mov	r0, r2
 800bf22:	4619      	mov	r1, r3
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	a37b      	add	r3, pc, #492	@ (adr r3, 800c118 <__ieee754_pow+0x718>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	4604      	mov	r4, r0
 800bf30:	460d      	mov	r5, r1
 800bf32:	f7f4 fad1 	bl	80004d8 <__aeabi_dmul>
 800bf36:	a37a      	add	r3, pc, #488	@ (adr r3, 800c120 <__ieee754_pow+0x720>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	f7f4 f916 	bl	800016c <__adddf3>
 800bf40:	4622      	mov	r2, r4
 800bf42:	462b      	mov	r3, r5
 800bf44:	f7f4 fac8 	bl	80004d8 <__aeabi_dmul>
 800bf48:	a377      	add	r3, pc, #476	@ (adr r3, 800c128 <__ieee754_pow+0x728>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 f90d 	bl	800016c <__adddf3>
 800bf52:	4622      	mov	r2, r4
 800bf54:	462b      	mov	r3, r5
 800bf56:	f7f4 fabf 	bl	80004d8 <__aeabi_dmul>
 800bf5a:	a375      	add	r3, pc, #468	@ (adr r3, 800c130 <__ieee754_pow+0x730>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 f904 	bl	800016c <__adddf3>
 800bf64:	4622      	mov	r2, r4
 800bf66:	462b      	mov	r3, r5
 800bf68:	f7f4 fab6 	bl	80004d8 <__aeabi_dmul>
 800bf6c:	a372      	add	r3, pc, #456	@ (adr r3, 800c138 <__ieee754_pow+0x738>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 f8fb 	bl	800016c <__adddf3>
 800bf76:	4622      	mov	r2, r4
 800bf78:	462b      	mov	r3, r5
 800bf7a:	f7f4 faad 	bl	80004d8 <__aeabi_dmul>
 800bf7e:	a370      	add	r3, pc, #448	@ (adr r3, 800c140 <__ieee754_pow+0x740>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 f8f2 	bl	800016c <__adddf3>
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	462b      	mov	r3, r5
 800bf90:	4620      	mov	r0, r4
 800bf92:	4629      	mov	r1, r5
 800bf94:	f7f4 faa0 	bl	80004d8 <__aeabi_dmul>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f7f4 fa9a 	bl	80004d8 <__aeabi_dmul>
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	f7f4 f8dc 	bl	800016c <__adddf3>
 800bfb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfb8:	f7f4 fa8e 	bl	80004d8 <__aeabi_dmul>
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	f7f4 f8d4 	bl	800016c <__adddf3>
 800bfc4:	4642      	mov	r2, r8
 800bfc6:	4682      	mov	sl, r0
 800bfc8:	468b      	mov	fp, r1
 800bfca:	464b      	mov	r3, r9
 800bfcc:	4640      	mov	r0, r8
 800bfce:	4649      	mov	r1, r9
 800bfd0:	f7f4 fa82 	bl	80004d8 <__aeabi_dmul>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4b68      	ldr	r3, [pc, #416]	@ (800c178 <__ieee754_pow+0x778>)
 800bfd8:	4606      	mov	r6, r0
 800bfda:	460f      	mov	r7, r1
 800bfdc:	f7f4 f8c6 	bl	800016c <__adddf3>
 800bfe0:	4652      	mov	r2, sl
 800bfe2:	465b      	mov	r3, fp
 800bfe4:	f7f4 f8c2 	bl	800016c <__adddf3>
 800bfe8:	2400      	movs	r4, #0
 800bfea:	460d      	mov	r5, r1
 800bfec:	4622      	mov	r2, r4
 800bfee:	460b      	mov	r3, r1
 800bff0:	4640      	mov	r0, r8
 800bff2:	4649      	mov	r1, r9
 800bff4:	f7f4 fa70 	bl	80004d8 <__aeabi_dmul>
 800bff8:	2200      	movs	r2, #0
 800bffa:	4680      	mov	r8, r0
 800bffc:	4689      	mov	r9, r1
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	4b5d      	ldr	r3, [pc, #372]	@ (800c178 <__ieee754_pow+0x778>)
 800c004:	f7f4 f8b0 	bl	8000168 <__aeabi_dsub>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	f7f4 f8ac 	bl	8000168 <__aeabi_dsub>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	f7f4 f8a6 	bl	8000168 <__aeabi_dsub>
 800c01c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c020:	f7f4 fa5a 	bl	80004d8 <__aeabi_dmul>
 800c024:	4622      	mov	r2, r4
 800c026:	4606      	mov	r6, r0
 800c028:	460f      	mov	r7, r1
 800c02a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c02e:	462b      	mov	r3, r5
 800c030:	f7f4 fa52 	bl	80004d8 <__aeabi_dmul>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 f896 	bl	800016c <__adddf3>
 800c040:	2400      	movs	r4, #0
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4640      	mov	r0, r8
 800c04c:	4649      	mov	r1, r9
 800c04e:	f7f4 f88d 	bl	800016c <__adddf3>
 800c052:	a33d      	add	r3, pc, #244	@ (adr r3, 800c148 <__ieee754_pow+0x748>)
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	4620      	mov	r0, r4
 800c05a:	460d      	mov	r5, r1
 800c05c:	f7f4 fa3c 	bl	80004d8 <__aeabi_dmul>
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c068:	4620      	mov	r0, r4
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 f87c 	bl	8000168 <__aeabi_dsub>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4630      	mov	r0, r6
 800c076:	4639      	mov	r1, r7
 800c078:	f7f4 f876 	bl	8000168 <__aeabi_dsub>
 800c07c:	a334      	add	r3, pc, #208	@ (adr r3, 800c150 <__ieee754_pow+0x750>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 fa29 	bl	80004d8 <__aeabi_dmul>
 800c086:	a334      	add	r3, pc, #208	@ (adr r3, 800c158 <__ieee754_pow+0x758>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	4606      	mov	r6, r0
 800c08e:	460f      	mov	r7, r1
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 fa20 	bl	80004d8 <__aeabi_dmul>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4630      	mov	r0, r6
 800c09e:	4639      	mov	r1, r7
 800c0a0:	f7f4 f864 	bl	800016c <__adddf3>
 800c0a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0a6:	4b35      	ldr	r3, [pc, #212]	@ (800c17c <__ieee754_pow+0x77c>)
 800c0a8:	2400      	movs	r4, #0
 800c0aa:	4413      	add	r3, r2
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f85c 	bl	800016c <__adddf3>
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0b8:	468b      	mov	fp, r1
 800c0ba:	f7f4 f9a3 	bl	8000404 <__aeabi_i2d>
 800c0be:	4606      	mov	r6, r0
 800c0c0:	460f      	mov	r7, r1
 800c0c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c180 <__ieee754_pow+0x780>)
 800c0c6:	4413      	add	r3, r2
 800c0c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0cc:	4652      	mov	r2, sl
 800c0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0d2:	465b      	mov	r3, fp
 800c0d4:	f7f4 f84a 	bl	800016c <__adddf3>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	464b      	mov	r3, r9
 800c0dc:	f7f4 f846 	bl	800016c <__adddf3>
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	463b      	mov	r3, r7
 800c0e4:	f7f4 f842 	bl	800016c <__adddf3>
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	f7f4 f83a 	bl	8000168 <__aeabi_dsub>
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	f7f4 f836 	bl	8000168 <__aeabi_dsub>
 800c0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c100:	f7f4 f832 	bl	8000168 <__aeabi_dsub>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	4650      	mov	r0, sl
 800c10a:	4659      	mov	r1, fp
 800c10c:	e61c      	b.n	800bd48 <__ieee754_pow+0x348>
 800c10e:	2400      	movs	r4, #0
 800c110:	e68a      	b.n	800be28 <__ieee754_pow+0x428>
 800c112:	2601      	movs	r6, #1
 800c114:	e6a0      	b.n	800be58 <__ieee754_pow+0x458>
 800c116:	bf00      	nop
 800c118:	4a454eef 	.word	0x4a454eef
 800c11c:	3fca7e28 	.word	0x3fca7e28
 800c120:	93c9db65 	.word	0x93c9db65
 800c124:	3fcd864a 	.word	0x3fcd864a
 800c128:	a91d4101 	.word	0xa91d4101
 800c12c:	3fd17460 	.word	0x3fd17460
 800c130:	518f264d 	.word	0x518f264d
 800c134:	3fd55555 	.word	0x3fd55555
 800c138:	db6fabff 	.word	0xdb6fabff
 800c13c:	3fdb6db6 	.word	0x3fdb6db6
 800c140:	33333303 	.word	0x33333303
 800c144:	3fe33333 	.word	0x3fe33333
 800c148:	e0000000 	.word	0xe0000000
 800c14c:	3feec709 	.word	0x3feec709
 800c150:	dc3a03fd 	.word	0xdc3a03fd
 800c154:	3feec709 	.word	0x3feec709
 800c158:	145b01f5 	.word	0x145b01f5
 800c15c:	be3e2fe0 	.word	0xbe3e2fe0
 800c160:	7ff00000 	.word	0x7ff00000
 800c164:	43400000 	.word	0x43400000
 800c168:	0003988e 	.word	0x0003988e
 800c16c:	000bb679 	.word	0x000bb679
 800c170:	0800dea0 	.word	0x0800dea0
 800c174:	3ff00000 	.word	0x3ff00000
 800c178:	40080000 	.word	0x40080000
 800c17c:	0800de80 	.word	0x0800de80
 800c180:	0800de90 	.word	0x0800de90
 800c184:	a39a      	add	r3, pc, #616	@ (adr r3, 800c3f0 <__ieee754_pow+0x9f0>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	4630      	mov	r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	f7f3 ffed 	bl	800016c <__adddf3>
 800c192:	4642      	mov	r2, r8
 800c194:	e9cd 0100 	strd	r0, r1, [sp]
 800c198:	464b      	mov	r3, r9
 800c19a:	4620      	mov	r0, r4
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7f3 ffe3 	bl	8000168 <__aeabi_dsub>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1aa:	f7f4 fc25 	bl	80009f8 <__aeabi_dcmpgt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f47f ae0c 	bne.w	800bdcc <__ieee754_pow+0x3cc>
 800c1b4:	4ba0      	ldr	r3, [pc, #640]	@ (800c438 <__ieee754_pow+0xa38>)
 800c1b6:	e022      	b.n	800c1fe <__ieee754_pow+0x7fe>
 800c1b8:	4ca0      	ldr	r4, [pc, #640]	@ (800c43c <__ieee754_pow+0xa3c>)
 800c1ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1be:	42a3      	cmp	r3, r4
 800c1c0:	d919      	bls.n	800c1f6 <__ieee754_pow+0x7f6>
 800c1c2:	4b9f      	ldr	r3, [pc, #636]	@ (800c440 <__ieee754_pow+0xa40>)
 800c1c4:	440b      	add	r3, r1
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	d009      	beq.n	800c1de <__ieee754_pow+0x7de>
 800c1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f7f4 fbf3 	bl	80009bc <__aeabi_dcmplt>
 800c1d6:	3800      	subs	r0, #0
 800c1d8:	bf18      	it	ne
 800c1da:	2001      	movne	r0, #1
 800c1dc:	e527      	b.n	800bc2e <__ieee754_pow+0x22e>
 800c1de:	4642      	mov	r2, r8
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	f7f3 ffc1 	bl	8000168 <__aeabi_dsub>
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	463b      	mov	r3, r7
 800c1ea:	f7f4 fbfb 	bl	80009e4 <__aeabi_dcmpge>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d1eb      	bne.n	800c1ca <__ieee754_pow+0x7ca>
 800c1f2:	4b94      	ldr	r3, [pc, #592]	@ (800c444 <__ieee754_pow+0xa44>)
 800c1f4:	e003      	b.n	800c1fe <__ieee754_pow+0x7fe>
 800c1f6:	4a94      	ldr	r2, [pc, #592]	@ (800c448 <__ieee754_pow+0xa48>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	f240 80e1 	bls.w	800c3c0 <__ieee754_pow+0x9c0>
 800c1fe:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800c202:	151b      	asrs	r3, r3, #20
 800c204:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800c208:	fa4a fa03 	asr.w	sl, sl, r3
 800c20c:	44da      	add	sl, fp
 800c20e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c212:	488e      	ldr	r0, [pc, #568]	@ (800c44c <__ieee754_pow+0xa4c>)
 800c214:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c218:	4108      	asrs	r0, r1
 800c21a:	ea00 030a 	and.w	r3, r0, sl
 800c21e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c222:	f1c1 0114 	rsb	r1, r1, #20
 800c226:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c22a:	4640      	mov	r0, r8
 800c22c:	fa4a fa01 	asr.w	sl, sl, r1
 800c230:	f1bb 0f00 	cmp.w	fp, #0
 800c234:	4649      	mov	r1, r9
 800c236:	f04f 0200 	mov.w	r2, #0
 800c23a:	bfb8      	it	lt
 800c23c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c240:	f7f3 ff92 	bl	8000168 <__aeabi_dsub>
 800c244:	4680      	mov	r8, r0
 800c246:	4689      	mov	r9, r1
 800c248:	2400      	movs	r4, #0
 800c24a:	4632      	mov	r2, r6
 800c24c:	463b      	mov	r3, r7
 800c24e:	4640      	mov	r0, r8
 800c250:	4649      	mov	r1, r9
 800c252:	f7f3 ff8b 	bl	800016c <__adddf3>
 800c256:	a368      	add	r3, pc, #416	@ (adr r3, 800c3f8 <__ieee754_pow+0x9f8>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	4620      	mov	r0, r4
 800c25e:	460d      	mov	r5, r1
 800c260:	f7f4 f93a 	bl	80004d8 <__aeabi_dmul>
 800c264:	4642      	mov	r2, r8
 800c266:	464b      	mov	r3, r9
 800c268:	e9cd 0100 	strd	r0, r1, [sp]
 800c26c:	4620      	mov	r0, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	f7f3 ff7a 	bl	8000168 <__aeabi_dsub>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f3 ff74 	bl	8000168 <__aeabi_dsub>
 800c280:	a35f      	add	r3, pc, #380	@ (adr r3, 800c400 <__ieee754_pow+0xa00>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f7f4 f927 	bl	80004d8 <__aeabi_dmul>
 800c28a:	a35f      	add	r3, pc, #380	@ (adr r3, 800c408 <__ieee754_pow+0xa08>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	4680      	mov	r8, r0
 800c292:	4689      	mov	r9, r1
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	f7f4 f91e 	bl	80004d8 <__aeabi_dmul>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	f7f3 ff62 	bl	800016c <__adddf3>
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2b4:	f7f3 ff5a 	bl	800016c <__adddf3>
 800c2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4689      	mov	r9, r1
 800c2c0:	f7f3 ff52 	bl	8000168 <__aeabi_dsub>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	f7f3 ff4c 	bl	8000168 <__aeabi_dsub>
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	4640      	mov	r0, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	f7f4 f8fc 	bl	80004d8 <__aeabi_dmul>
 800c2e0:	a34b      	add	r3, pc, #300	@ (adr r3, 800c410 <__ieee754_pow+0xa10>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	f7f4 f8f5 	bl	80004d8 <__aeabi_dmul>
 800c2ee:	a34a      	add	r3, pc, #296	@ (adr r3, 800c418 <__ieee754_pow+0xa18>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f3 ff38 	bl	8000168 <__aeabi_dsub>
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	462b      	mov	r3, r5
 800c2fc:	f7f4 f8ec 	bl	80004d8 <__aeabi_dmul>
 800c300:	a347      	add	r3, pc, #284	@ (adr r3, 800c420 <__ieee754_pow+0xa20>)
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f7f3 ff31 	bl	800016c <__adddf3>
 800c30a:	4622      	mov	r2, r4
 800c30c:	462b      	mov	r3, r5
 800c30e:	f7f4 f8e3 	bl	80004d8 <__aeabi_dmul>
 800c312:	a345      	add	r3, pc, #276	@ (adr r3, 800c428 <__ieee754_pow+0xa28>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	f7f3 ff26 	bl	8000168 <__aeabi_dsub>
 800c31c:	4622      	mov	r2, r4
 800c31e:	462b      	mov	r3, r5
 800c320:	f7f4 f8da 	bl	80004d8 <__aeabi_dmul>
 800c324:	a342      	add	r3, pc, #264	@ (adr r3, 800c430 <__ieee754_pow+0xa30>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ff1f 	bl	800016c <__adddf3>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	f7f4 f8d1 	bl	80004d8 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f3 ff13 	bl	8000168 <__aeabi_dsub>
 800c342:	4604      	mov	r4, r0
 800c344:	460d      	mov	r5, r1
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4640      	mov	r0, r8
 800c34c:	4649      	mov	r1, r9
 800c34e:	f7f4 f8c3 	bl	80004d8 <__aeabi_dmul>
 800c352:	2200      	movs	r2, #0
 800c354:	e9cd 0100 	strd	r0, r1, [sp]
 800c358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c35c:	4620      	mov	r0, r4
 800c35e:	4629      	mov	r1, r5
 800c360:	f7f3 ff02 	bl	8000168 <__aeabi_dsub>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c36c:	f7f4 f9de 	bl	800072c <__aeabi_ddiv>
 800c370:	4632      	mov	r2, r6
 800c372:	4604      	mov	r4, r0
 800c374:	460d      	mov	r5, r1
 800c376:	463b      	mov	r3, r7
 800c378:	4640      	mov	r0, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7f4 f8ac 	bl	80004d8 <__aeabi_dmul>
 800c380:	4632      	mov	r2, r6
 800c382:	463b      	mov	r3, r7
 800c384:	f7f3 fef2 	bl	800016c <__adddf3>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4620      	mov	r0, r4
 800c38e:	4629      	mov	r1, r5
 800c390:	f7f3 feea 	bl	8000168 <__aeabi_dsub>
 800c394:	4642      	mov	r2, r8
 800c396:	464b      	mov	r3, r9
 800c398:	f7f3 fee6 	bl	8000168 <__aeabi_dsub>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	492b      	ldr	r1, [pc, #172]	@ (800c450 <__ieee754_pow+0xa50>)
 800c3a4:	f7f3 fee0 	bl	8000168 <__aeabi_dsub>
 800c3a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c3ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c3b0:	da09      	bge.n	800c3c6 <__ieee754_pow+0x9c6>
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	f000 f854 	bl	800c460 <scalbn>
 800c3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3bc:	f7ff bb89 	b.w	800bad2 <__ieee754_pow+0xd2>
 800c3c0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c3c4:	e740      	b.n	800c248 <__ieee754_pow+0x848>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	e7f6      	b.n	800c3b8 <__ieee754_pow+0x9b8>
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	4920      	ldr	r1, [pc, #128]	@ (800c450 <__ieee754_pow+0xa50>)
 800c3ce:	f7ff bb35 	b.w	800ba3c <__ieee754_pow+0x3c>
 800c3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3d6:	f7ff bb31 	b.w	800ba3c <__ieee754_pow+0x3c>
 800c3da:	4650      	mov	r0, sl
 800c3dc:	4659      	mov	r1, fp
 800c3de:	f7ff bb2d 	b.w	800ba3c <__ieee754_pow+0x3c>
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	f7ff bb87 	b.w	800baf6 <__ieee754_pow+0xf6>
 800c3e8:	2400      	movs	r4, #0
 800c3ea:	f7ff bb69 	b.w	800bac0 <__ieee754_pow+0xc0>
 800c3ee:	bf00      	nop
 800c3f0:	652b82fe 	.word	0x652b82fe
 800c3f4:	3c971547 	.word	0x3c971547
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	3fe62e43 	.word	0x3fe62e43
 800c400:	fefa39ef 	.word	0xfefa39ef
 800c404:	3fe62e42 	.word	0x3fe62e42
 800c408:	0ca86c39 	.word	0x0ca86c39
 800c40c:	be205c61 	.word	0xbe205c61
 800c410:	72bea4d0 	.word	0x72bea4d0
 800c414:	3e663769 	.word	0x3e663769
 800c418:	c5d26bf1 	.word	0xc5d26bf1
 800c41c:	3ebbbd41 	.word	0x3ebbbd41
 800c420:	af25de2c 	.word	0xaf25de2c
 800c424:	3f11566a 	.word	0x3f11566a
 800c428:	16bebd93 	.word	0x16bebd93
 800c42c:	3f66c16c 	.word	0x3f66c16c
 800c430:	5555553e 	.word	0x5555553e
 800c434:	3fc55555 	.word	0x3fc55555
 800c438:	40900000 	.word	0x40900000
 800c43c:	4090cbff 	.word	0x4090cbff
 800c440:	3f6f3400 	.word	0x3f6f3400
 800c444:	4090cc00 	.word	0x4090cc00
 800c448:	3fe00000 	.word	0x3fe00000
 800c44c:	fff00000 	.word	0xfff00000
 800c450:	3ff00000 	.word	0x3ff00000

0800c454 <fabs>:
 800c454:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c458:	4619      	mov	r1, r3
 800c45a:	4770      	bx	lr
 800c45c:	0000      	movs	r0, r0
	...

0800c460 <scalbn>:
 800c460:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c464:	4616      	mov	r6, r2
 800c466:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c46a:	4683      	mov	fp, r0
 800c46c:	468c      	mov	ip, r1
 800c46e:	460b      	mov	r3, r1
 800c470:	b982      	cbnz	r2, 800c494 <scalbn+0x34>
 800c472:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c476:	4303      	orrs	r3, r0
 800c478:	d035      	beq.n	800c4e6 <scalbn+0x86>
 800c47a:	4b2d      	ldr	r3, [pc, #180]	@ (800c530 <scalbn+0xd0>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	f7f4 f82b 	bl	80004d8 <__aeabi_dmul>
 800c482:	4b2c      	ldr	r3, [pc, #176]	@ (800c534 <scalbn+0xd4>)
 800c484:	4683      	mov	fp, r0
 800c486:	429e      	cmp	r6, r3
 800c488:	468c      	mov	ip, r1
 800c48a:	da0d      	bge.n	800c4a8 <scalbn+0x48>
 800c48c:	a324      	add	r3, pc, #144	@ (adr r3, 800c520 <scalbn+0xc0>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	e019      	b.n	800c4c8 <scalbn+0x68>
 800c494:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c498:	42ba      	cmp	r2, r7
 800c49a:	d109      	bne.n	800c4b0 <scalbn+0x50>
 800c49c:	4602      	mov	r2, r0
 800c49e:	f7f3 fe65 	bl	800016c <__adddf3>
 800c4a2:	4683      	mov	fp, r0
 800c4a4:	468c      	mov	ip, r1
 800c4a6:	e01e      	b.n	800c4e6 <scalbn+0x86>
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4ae:	3a36      	subs	r2, #54	@ 0x36
 800c4b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c4b4:	428e      	cmp	r6, r1
 800c4b6:	dd0a      	ble.n	800c4ce <scalbn+0x6e>
 800c4b8:	a31b      	add	r3, pc, #108	@ (adr r3, 800c528 <scalbn+0xc8>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	4665      	mov	r5, ip
 800c4c0:	f363 051e 	bfi	r5, r3, #0, #31
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	481c      	ldr	r0, [pc, #112]	@ (800c538 <scalbn+0xd8>)
 800c4c8:	f7f4 f806 	bl	80004d8 <__aeabi_dmul>
 800c4cc:	e7e9      	b.n	800c4a2 <scalbn+0x42>
 800c4ce:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c4d2:	4432      	add	r2, r6
 800c4d4:	428a      	cmp	r2, r1
 800c4d6:	dcef      	bgt.n	800c4b8 <scalbn+0x58>
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	dd08      	ble.n	800c4ee <scalbn+0x8e>
 800c4dc:	f36f 531e 	bfc	r3, #20, #11
 800c4e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4e4:	46ac      	mov	ip, r5
 800c4e6:	4658      	mov	r0, fp
 800c4e8:	4661      	mov	r1, ip
 800c4ea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c4ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c4f2:	da09      	bge.n	800c508 <scalbn+0xa8>
 800c4f4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c4f8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c4fc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c500:	480e      	ldr	r0, [pc, #56]	@ (800c53c <scalbn+0xdc>)
 800c502:	f041 011f 	orr.w	r1, r1, #31
 800c506:	e7c1      	b.n	800c48c <scalbn+0x2c>
 800c508:	3236      	adds	r2, #54	@ 0x36
 800c50a:	f36f 531e 	bfc	r3, #20, #11
 800c50e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c512:	4658      	mov	r0, fp
 800c514:	4629      	mov	r1, r5
 800c516:	2200      	movs	r2, #0
 800c518:	4b09      	ldr	r3, [pc, #36]	@ (800c540 <scalbn+0xe0>)
 800c51a:	e7d5      	b.n	800c4c8 <scalbn+0x68>
 800c51c:	f3af 8000 	nop.w
 800c520:	c2f8f359 	.word	0xc2f8f359
 800c524:	01a56e1f 	.word	0x01a56e1f
 800c528:	8800759c 	.word	0x8800759c
 800c52c:	7e37e43c 	.word	0x7e37e43c
 800c530:	43500000 	.word	0x43500000
 800c534:	ffff3cb0 	.word	0xffff3cb0
 800c538:	8800759c 	.word	0x8800759c
 800c53c:	c2f8f359 	.word	0xc2f8f359
 800c540:	3c900000 	.word	0x3c900000

0800c544 <with_errno>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4604      	mov	r4, r0
 800c548:	460d      	mov	r5, r1
 800c54a:	4616      	mov	r6, r2
 800c54c:	f7fe fd64 	bl	800b018 <__errno>
 800c550:	4629      	mov	r1, r5
 800c552:	6006      	str	r6, [r0, #0]
 800c554:	4620      	mov	r0, r4
 800c556:	bd70      	pop	{r4, r5, r6, pc}

0800c558 <xflow>:
 800c558:	b513      	push	{r0, r1, r4, lr}
 800c55a:	4604      	mov	r4, r0
 800c55c:	4619      	mov	r1, r3
 800c55e:	4610      	mov	r0, r2
 800c560:	b10c      	cbz	r4, 800c566 <xflow+0xe>
 800c562:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c566:	e9cd 2300 	strd	r2, r3, [sp]
 800c56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c56e:	f7f3 ffb3 	bl	80004d8 <__aeabi_dmul>
 800c572:	2222      	movs	r2, #34	@ 0x22
 800c574:	b002      	add	sp, #8
 800c576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c57a:	f7ff bfe3 	b.w	800c544 <with_errno>

0800c57e <__math_uflow>:
 800c57e:	2200      	movs	r2, #0
 800c580:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c584:	f7ff bfe8 	b.w	800c558 <xflow>

0800c588 <__math_oflow>:
 800c588:	2200      	movs	r2, #0
 800c58a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c58e:	f7ff bfe3 	b.w	800c558 <xflow>
	...

0800c594 <__ieee754_sqrt>:
 800c594:	4a65      	ldr	r2, [pc, #404]	@ (800c72c <__ieee754_sqrt+0x198>)
 800c596:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59a:	438a      	bics	r2, r1
 800c59c:	4606      	mov	r6, r0
 800c59e:	460f      	mov	r7, r1
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	d10e      	bne.n	800c5c4 <__ieee754_sqrt+0x30>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	f7f3 ff96 	bl	80004d8 <__aeabi_dmul>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f3 fdda 	bl	800016c <__adddf3>
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	dc0c      	bgt.n	800c5e2 <__ieee754_sqrt+0x4e>
 800c5c8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c5cc:	4302      	orrs	r2, r0
 800c5ce:	d0f5      	beq.n	800c5bc <__ieee754_sqrt+0x28>
 800c5d0:	b189      	cbz	r1, 800c5f6 <__ieee754_sqrt+0x62>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	f7f3 fdc8 	bl	8000168 <__aeabi_dsub>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	f7f4 f8a6 	bl	800072c <__aeabi_ddiv>
 800c5e0:	e7ea      	b.n	800c5b8 <__ieee754_sqrt+0x24>
 800c5e2:	150a      	asrs	r2, r1, #20
 800c5e4:	d115      	bne.n	800c612 <__ieee754_sqrt+0x7e>
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	e009      	b.n	800c5fe <__ieee754_sqrt+0x6a>
 800c5ea:	0ae3      	lsrs	r3, r4, #11
 800c5ec:	3a15      	subs	r2, #21
 800c5ee:	0564      	lsls	r4, r4, #21
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0fa      	beq.n	800c5ea <__ieee754_sqrt+0x56>
 800c5f4:	e7f7      	b.n	800c5e6 <__ieee754_sqrt+0x52>
 800c5f6:	460a      	mov	r2, r1
 800c5f8:	e7fa      	b.n	800c5f0 <__ieee754_sqrt+0x5c>
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	3101      	adds	r1, #1
 800c5fe:	02d8      	lsls	r0, r3, #11
 800c600:	d5fb      	bpl.n	800c5fa <__ieee754_sqrt+0x66>
 800c602:	1e48      	subs	r0, r1, #1
 800c604:	1a12      	subs	r2, r2, r0
 800c606:	f1c1 0020 	rsb	r0, r1, #32
 800c60a:	fa24 f000 	lsr.w	r0, r4, r0
 800c60e:	4303      	orrs	r3, r0
 800c610:	408c      	lsls	r4, r1
 800c612:	2700      	movs	r7, #0
 800c614:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800c618:	2116      	movs	r1, #22
 800c61a:	07d2      	lsls	r2, r2, #31
 800c61c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c620:	463a      	mov	r2, r7
 800c622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c62a:	bf5c      	itt	pl
 800c62c:	005b      	lslpl	r3, r3, #1
 800c62e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c632:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c636:	bf58      	it	pl
 800c638:	0064      	lslpl	r4, r4, #1
 800c63a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c63e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c642:	0064      	lsls	r4, r4, #1
 800c644:	1815      	adds	r5, r2, r0
 800c646:	429d      	cmp	r5, r3
 800c648:	bfde      	ittt	le
 800c64a:	182a      	addle	r2, r5, r0
 800c64c:	1b5b      	suble	r3, r3, r5
 800c64e:	183f      	addle	r7, r7, r0
 800c650:	0fe5      	lsrs	r5, r4, #31
 800c652:	3901      	subs	r1, #1
 800c654:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c658:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c65c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c660:	d1f0      	bne.n	800c644 <__ieee754_sqrt+0xb0>
 800c662:	460d      	mov	r5, r1
 800c664:	2620      	movs	r6, #32
 800c666:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c66a:	4293      	cmp	r3, r2
 800c66c:	eb00 0c01 	add.w	ip, r0, r1
 800c670:	dc02      	bgt.n	800c678 <__ieee754_sqrt+0xe4>
 800c672:	d113      	bne.n	800c69c <__ieee754_sqrt+0x108>
 800c674:	45a4      	cmp	ip, r4
 800c676:	d811      	bhi.n	800c69c <__ieee754_sqrt+0x108>
 800c678:	f1bc 0f00 	cmp.w	ip, #0
 800c67c:	eb0c 0100 	add.w	r1, ip, r0
 800c680:	da3e      	bge.n	800c700 <__ieee754_sqrt+0x16c>
 800c682:	2900      	cmp	r1, #0
 800c684:	db3c      	blt.n	800c700 <__ieee754_sqrt+0x16c>
 800c686:	f102 0e01 	add.w	lr, r2, #1
 800c68a:	1a9b      	subs	r3, r3, r2
 800c68c:	4672      	mov	r2, lr
 800c68e:	45a4      	cmp	ip, r4
 800c690:	bf88      	it	hi
 800c692:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c696:	eba4 040c 	sub.w	r4, r4, ip
 800c69a:	4405      	add	r5, r0
 800c69c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c6a0:	3e01      	subs	r6, #1
 800c6a2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c6a6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c6aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c6ae:	d1dc      	bne.n	800c66a <__ieee754_sqrt+0xd6>
 800c6b0:	431c      	orrs	r4, r3
 800c6b2:	d01a      	beq.n	800c6ea <__ieee754_sqrt+0x156>
 800c6b4:	4c1e      	ldr	r4, [pc, #120]	@ (800c730 <__ieee754_sqrt+0x19c>)
 800c6b6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c734 <__ieee754_sqrt+0x1a0>
 800c6ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6be:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c6c2:	f7f3 fd51 	bl	8000168 <__aeabi_dsub>
 800c6c6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4650      	mov	r0, sl
 800c6d0:	4659      	mov	r1, fp
 800c6d2:	f7f4 f97d 	bl	80009d0 <__aeabi_dcmple>
 800c6d6:	b140      	cbz	r0, 800c6ea <__ieee754_sqrt+0x156>
 800c6d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c6dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c6e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c6e4:	d10e      	bne.n	800c704 <__ieee754_sqrt+0x170>
 800c6e6:	4635      	mov	r5, r6
 800c6e8:	3701      	adds	r7, #1
 800c6ea:	107b      	asrs	r3, r7, #1
 800c6ec:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6f0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c6f4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800c6f8:	086b      	lsrs	r3, r5, #1
 800c6fa:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800c6fe:	e75b      	b.n	800c5b8 <__ieee754_sqrt+0x24>
 800c700:	4696      	mov	lr, r2
 800c702:	e7c2      	b.n	800c68a <__ieee754_sqrt+0xf6>
 800c704:	f7f3 fd32 	bl	800016c <__adddf3>
 800c708:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4650      	mov	r0, sl
 800c712:	4659      	mov	r1, fp
 800c714:	f7f4 f952 	bl	80009bc <__aeabi_dcmplt>
 800c718:	b120      	cbz	r0, 800c724 <__ieee754_sqrt+0x190>
 800c71a:	1cab      	adds	r3, r5, #2
 800c71c:	bf08      	it	eq
 800c71e:	3701      	addeq	r7, #1
 800c720:	3502      	adds	r5, #2
 800c722:	e7e2      	b.n	800c6ea <__ieee754_sqrt+0x156>
 800c724:	1c6b      	adds	r3, r5, #1
 800c726:	f023 0501 	bic.w	r5, r3, #1
 800c72a:	e7de      	b.n	800c6ea <__ieee754_sqrt+0x156>
 800c72c:	7ff00000 	.word	0x7ff00000
 800c730:	0800deb8 	.word	0x0800deb8
 800c734:	0800deb0 	.word	0x0800deb0

0800c738 <_init>:
 800c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73a:	bf00      	nop
 800c73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73e:	bc08      	pop	{r3}
 800c740:	469e      	mov	lr, r3
 800c742:	4770      	bx	lr

0800c744 <_fini>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr
