
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001778  0800c7f0  0800c7f0  0000d7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df68  0800df68  0000f1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df68  0800df68  0000ef68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df70  0800df70  0000f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df74  0800df74  0000ef74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800df78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  200001d0  0800e144  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018cc  0800e144  0000f8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016da7  00000000  00000000  0000f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eac  00000000  00000000  00025f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00029e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001085  00000000  00000000  0002b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b31c  00000000  00000000  0002c445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b28e  00000000  00000000  00047761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009138c  00000000  00000000  000629ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3d7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  000f3dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fa12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7d8 	.word	0x0800c7d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c7d8 	.word	0x0800c7d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <int_to_str>:

    return ERROR_NONE;
}


void int_to_str(int num, char *str) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <int_to_str+0x60>
        str[0] = '0';
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2230      	movs	r2, #48	@ 0x30
 8000aa0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e039      	b.n	8000b20 <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <int_to_str+0xa0>)
 8000ab0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab4:	1099      	asrs	r1, r3, #2
 8000ab6:	17d3      	asrs	r3, r2, #31
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad1      	subs	r1, r2, r3
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	1c59      	adds	r1, r3, #1
 8000aca:	61f9      	str	r1, [r7, #28]
 8000acc:	3230      	adds	r2, #48	@ 0x30
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <int_to_str+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1092      	asrs	r2, r2, #2
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dcde      	bgt.n	8000aac <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 8000af2:	e00b      	b.n	8000b0c <int_to_str+0x84>
        str[j++] = tmp[i];
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	61ba      	str	r2, [r7, #24]
 8000afa:	461a      	mov	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dcee      	bgt.n	8000af4 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	66666667 	.word	0x66666667

08000b2c <Is_Flash_Valid>:

char Is_Flash_Valid() {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
    // Чтение метки из Flash
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 8000b32:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <Is_Flash_Valid+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	607b      	str	r3, [r7, #4]
    if(magic == FLASH_MAGIC_NUMBER){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <Is_Flash_Valid+0x28>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <Is_Flash_Valid+0x18>
    	return 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <Is_Flash_Valid+0x1a>
    }else{
    	return 0;
 8000b44:	2300      	movs	r3, #0
    }
    //return (magic == FLASH_MAGIC_NUMBER);
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	0801fc00 	.word	0x0801fc00
 8000b54:	deadbeef 	.word	0xdeadbeef

08000b58 <Read_Flash_Array>:

void Read_Flash_Array(int32_t *output) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    if (!Is_Flash_Valid()) {
 8000b60:	f7ff ffe4 	bl	8000b2c <Is_Flash_Valid>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d105      	bne.n	8000b76 <Read_Flash_Array+0x1e>
        // Данные не валидны (первый запуск)
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f00a fa88 	bl	800b084 <memset>
        return;
 8000b74:	e008      	b.n	8000b88 <Read_Flash_Array+0x30>
    }

    // Чтение данных (пропускаем метку)
    FlashData *flash_data = (FlashData*)FLASH_USER_START_ADDR;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <Read_Flash_Array+0x38>)
 8000b78:	60fb      	str	r3, [r7, #12]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	220c      	movs	r2, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f00a fac4 	bl	800b110 <memcpy>
}
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	0801fc00 	.word	0x0801fc00

08000b94 <Write_Flash_Array>:

void Write_Flash_Array(int32_t *data) {
 8000b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b98:	b090      	sub	sp, #64	@ 0x40
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000b9e:	f001 fca7 	bl	80024f0 <HAL_FLASH_Unlock>

    // Стирание страницы
    FLASH_EraseInitTypeDef erase;
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    erase.PageAddress = FLASH_USER_START_ADDR;
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    erase.NbPages = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase, &page_error);
 8000bae:	f107 0218 	add.w	r2, r7, #24
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd81 	bl	80026c0 <HAL_FLASHEx_Erase>

    // Запись структуры (метка + данные)
    FlashData flash_data;
    flash_data.magic = FLASH_MAGIC_NUMBER;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <Write_Flash_Array+0xb8>)
 8000bc0:	60bb      	str	r3, [r7, #8]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	220c      	movs	r2, #12
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00a fa9f 	bl	800b110 <memcpy>

    // Запись по 16-битным полусловам
    uint32_t addr = FLASH_USER_START_ADDR;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <Write_Flash_Array+0xb4>)
 8000bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t *ptr = (uint32_t*)&flash_data;
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t size = sizeof(FlashData) / 2; // Количество 16-битных слов
 8000bdc:	2308      	movs	r3, #8
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < size; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000be4:	e024      	b.n	8000c30 <Write_Flash_Array+0x9c>
        uint32_t value = ptr[i];
 8000be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4693      	mov	fp, r2
 8000bfa:	fa1f f48a 	uxth.w	r4, sl
 8000bfe:	2500      	movs	r5, #0
 8000c00:	4622      	mov	r2, r4
 8000c02:	462b      	mov	r3, r5
 8000c04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000c06:	2001      	movs	r0, #1
 8000c08:	f001 fc02 	bl	8002410 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8000c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c0e:	1c99      	adds	r1, r3, #2
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	0c1b      	lsrs	r3, r3, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	4698      	mov	r8, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f001 fbf6 	bl	8002410 <HAL_FLASH_Program>
        addr += 4;
 8000c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c26:	3304      	adds	r3, #4
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint32_t i = 0; i < size; i++) {
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3d6      	bcc.n	8000be6 <Write_Flash_Array+0x52>
    }

    HAL_FLASH_Lock();
 8000c38:	f001 fc80 	bl	800253c <HAL_FLASH_Lock>
}
 8000c3c:	bf00      	nop
 8000c3e:	3740      	adds	r7, #64	@ 0x40
 8000c40:	46bd      	mov	sp, r7
 8000c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c46:	bf00      	nop
 8000c48:	0801fc00 	.word	0x0801fc00
 8000c4c:	deadbeef 	.word	0xdeadbeef

08000c50 <get_encoder>:


int get_encoder(){
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <get_encoder+0x18>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <get_encoder+0xe>
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	109b      	asrs	r3, r3, #2
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <set_encoder>:

void set_encoder(int e){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	009a      	lsls	r2, r3, #2
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <set_encoder+0x1c>)
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40012c00 	.word	0x40012c00

08000c8c <print_interface_mode0>:


void print_interface_mode0(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 f9dd 	bl	8002054 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 f890 	bl	8001dc0 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <print_interface_mode0+0xb0>)
 8000caa:	f001 f9ad 	bl	8002008 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	9200      	str	r2, [sp, #0]
 8000cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb6:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cb8:	f001 f9a6 	bl	8002008 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	9200      	str	r2, [sp, #0]
 8000cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc4:	481f      	ldr	r0, [pc, #124]	@ (8000d44 <print_interface_mode0+0xb8>)
 8000cc6:	f001 f99f 	bl	8002008 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000cca:	210a      	movs	r1, #10
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f001 f9c1 	bl	8002054 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cda:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <print_interface_mode0+0xbc>)
 8000cdc:	f001 f994 	bl	8002008 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <print_interface_mode0+0xac>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	4815      	ldr	r0, [pc, #84]	@ (8000d40 <print_interface_mode0+0xb4>)
 8000cea:	f001 f98d 	bl	8002008 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <print_interface_mode0+0xac>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfe:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <print_interface_mode0+0xc4>)
 8000d00:	f001 f982 	bl	8002008 <ssd1306_WriteString>
 8000d04:	e012      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <print_interface_mode0+0xc0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d107      	bne.n	8000d1e <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d16:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <print_interface_mode0+0xc8>)
 8000d18:	f001 f976 	bl	8002008 <ssd1306_WriteString>
 8000d1c:	e006      	b.n	8000d2c <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <print_interface_mode0+0xac>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	9200      	str	r2, [sp, #0]
 8000d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d26:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <print_interface_mode0+0xcc>)
 8000d28:	f001 f96e 	bl	8002008 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000d2c:	f001 f860 	bl	8001df0 <ssd1306_UpdateScreen>
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800ddc8 	.word	0x0800ddc8
 8000d3c:	20000338 	.word	0x20000338
 8000d40:	0800c7f0 	.word	0x0800c7f0
 8000d44:	2000033f 	.word	0x2000033f
 8000d48:	20000346 	.word	0x20000346
 8000d4c:	2000034e 	.word	0x2000034e
 8000d50:	0800c7f4 	.word	0x0800c7f4
 8000d54:	0800c7f8 	.word	0x0800c7f8
 8000d58:	0800c7fc 	.word	0x0800c7fc

08000d5c <print_interface_mode1>:

void print_interface_mode1(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 f975 	bl	8002054 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 f828 	bl	8001dc0 <ssd1306_Fill>
	if(choiced_num==0){
 8000d70:	4b7d      	ldr	r3, [pc, #500]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d139      	bne.n	8000dec <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000d78:	4b7c      	ldr	r3, [pc, #496]	@ (8000f6c <print_interface_mode1+0x210>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a9b      	subs	r3, r3, r2
 8000d84:	4a7a      	ldr	r2, [pc, #488]	@ (8000f70 <print_interface_mode1+0x214>)
 8000d86:	4413      	add	r3, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9e1 	bl	8000150 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 8000d98:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <print_interface_mode1+0x218>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	4875      	ldr	r0, [pc, #468]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000da2:	f001 f931 	bl	8002008 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	ddf2      	ble.n	8000d98 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000db2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f6c <print_interface_mode1+0x210>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	4a6c      	ldr	r2, [pc, #432]	@ (8000f70 <print_interface_mode1+0x214>)
 8000dc0:	1898      	adds	r0, r3, r2
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f74 <print_interface_mode1+0x218>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dca:	f001 f91d 	bl	8002008 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 8000dce:	4b69      	ldr	r3, [pc, #420]	@ (8000f74 <print_interface_mode1+0x218>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd6:	4869      	ldr	r0, [pc, #420]	@ (8000f7c <print_interface_mode1+0x220>)
 8000dd8:	f001 f916 	bl	8002008 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000ddc:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <print_interface_mode1+0x224>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	9200      	str	r2, [sp, #0]
 8000de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de4:	4867      	ldr	r0, [pc, #412]	@ (8000f84 <print_interface_mode1+0x228>)
 8000de6:	f001 f90f 	bl	8002008 <ssd1306_WriteString>
 8000dea:	e08f      	b.n	8000f0c <print_interface_mode1+0x1b0>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8000dec:	4b5f      	ldr	r3, [pc, #380]	@ (8000f6c <print_interface_mode1+0x210>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	4a5d      	ldr	r2, [pc, #372]	@ (8000f70 <print_interface_mode1+0x214>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8000e06:	2305      	movs	r3, #5
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e017      	b.n	8000e3c <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8000e0c:	4b56      	ldr	r3, [pc, #344]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d107      	bne.n	8000e28 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8000e18:	4b59      	ldr	r3, [pc, #356]	@ (8000f80 <print_interface_mode1+0x224>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e20:	4855      	ldr	r0, [pc, #340]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000e22:	f001 f8f1 	bl	8002008 <ssd1306_WriteString>
 8000e26:	e006      	b.n	8000e36 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8000e28:	4b52      	ldr	r3, [pc, #328]	@ (8000f74 <print_interface_mode1+0x218>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	9200      	str	r2, [sp, #0]
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	4851      	ldr	r0, [pc, #324]	@ (8000f78 <print_interface_mode1+0x21c>)
 8000e32:	f001 f8e9 	bl	8002008 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	897b      	ldrh	r3, [r7, #10]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dae3      	bge.n	8000e0c <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e034      	b.n	8000eb4 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	4a46      	ldr	r2, [pc, #280]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d115      	bne.n	8000e84 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e58:	4b44      	ldr	r3, [pc, #272]	@ (8000f6c <print_interface_mode1+0x210>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4a44      	ldr	r2, [pc, #272]	@ (8000f70 <print_interface_mode1+0x214>)
 8000e60:	460b      	mov	r3, r1
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	441a      	add	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	713b      	strb	r3, [r7, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 8000e74:	4b42      	ldr	r3, [pc, #264]	@ (8000f80 <print_interface_mode1+0x224>)
 8000e76:	1d38      	adds	r0, r7, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7e:	f001 f8c3 	bl	8002008 <ssd1306_WriteString>
 8000e82:	e014      	b.n	8000eae <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <print_interface_mode1+0x210>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4a39      	ldr	r2, [pc, #228]	@ (8000f70 <print_interface_mode1+0x214>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	441a      	add	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	703b      	strb	r3, [r7, #0]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 8000ea0:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ea2:	4638      	mov	r0, r7
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eaa:	f001 f8ad 	bl	8002008 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	897b      	ldrh	r3, [r7, #10]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbc6      	blt.n	8000e4a <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec4:	482d      	ldr	r0, [pc, #180]	@ (8000f7c <print_interface_mode1+0x220>)
 8000ec6:	f001 f89f 	bl	8002008 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <print_interface_mode1+0x218>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed2:	482c      	ldr	r0, [pc, #176]	@ (8000f84 <print_interface_mode1+0x228>)
 8000ed4:	f001 f898 	bl	8002008 <ssd1306_WriteString>
		if(choice==1){
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <print_interface_mode1+0x22c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d115      	bne.n	8000f0c <print_interface_mode1+0x1b0>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <print_interface_mode1+0x20c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f1c3 0306 	rsb	r3, r3, #6
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2112      	movs	r1, #18
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f8ab 	bl	8002054 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f06:	4821      	ldr	r0, [pc, #132]	@ (8000f8c <print_interface_mode1+0x230>)
 8000f08:	f001 f87e 	bl	8002008 <ssd1306_WriteString>
		}


	}
	if(freq[choiced_channel]==160000){
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <print_interface_mode1+0x210>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <print_interface_mode1+0x234>)
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <print_interface_mode1+0x238>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <print_interface_mode1+0x1da>
		ssd1306_SetCursor(77, 18);
 8000f1e:	2112      	movs	r1, #18
 8000f20:	204d      	movs	r0, #77	@ 0x4d
 8000f22:	f001 f897 	bl	8002054 <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	9200      	str	r2, [sp, #0]
 8000f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2e:	481a      	ldr	r0, [pc, #104]	@ (8000f98 <print_interface_mode1+0x23c>)
 8000f30:	f001 f86a 	bl	8002008 <ssd1306_WriteString>
 8000f34:	e012      	b.n	8000f5c <print_interface_mode1+0x200>
	}else if(freq[choiced_channel]==8){
 8000f36:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <print_interface_mode1+0x210>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <print_interface_mode1+0x234>)
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d10a      	bne.n	8000f5c <print_interface_mode1+0x200>
		ssd1306_SetCursor(77, 18);
 8000f46:	2112      	movs	r1, #18
 8000f48:	204d      	movs	r0, #77	@ 0x4d
 8000f4a:	f001 f883 	bl	8002054 <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <print_interface_mode1+0x218>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	9200      	str	r2, [sp, #0]
 8000f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <print_interface_mode1+0x240>)
 8000f58:	f001 f856 	bl	8002008 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000f5c:	f000 ff48 	bl	8001df0 <ssd1306_UpdateScreen>
}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000034d 	.word	0x2000034d
 8000f6c:	2000034e 	.word	0x2000034e
 8000f70:	20000338 	.word	0x20000338
 8000f74:	0800ddc8 	.word	0x0800ddc8
 8000f78:	0800c800 	.word	0x0800c800
 8000f7c:	0800c7f0 	.word	0x0800c7f0
 8000f80:	0800ddd4 	.word	0x0800ddd4
 8000f84:	0800c804 	.word	0x0800c804
 8000f88:	20000334 	.word	0x20000334
 8000f8c:	0800c80c 	.word	0x0800c80c
 8000f90:	20000324 	.word	0x20000324
 8000f94:	00027100 	.word	0x00027100
 8000f98:	0800c810 	.word	0x0800c810
 8000f9c:	0800c814 	.word	0x0800c814

08000fa0 <int_mode_0>:

void int_mode_0(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	481d      	ldr	r0, [pc, #116]	@ (800101c <int_mode_0+0x7c>)
 8000fa8:	f001 fdb6 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d102      	bne.n	8000fb8 <int_mode_0+0x18>
		choice=1;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <int_mode_0+0x80>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8000fb8:	bf00      	nop
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4817      	ldr	r0, [pc, #92]	@ (800101c <int_mode_0+0x7c>)
 8000fbe:	f001 fdab 	bl	8002b18 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <int_mode_0+0x1a>
	if(choice==0){
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <int_mode_0+0x80>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <int_mode_0+0x54>
		choiced_channel=get_encoder()%3;
 8000fd0:	f7ff fe3e 	bl	8000c50 <get_encoder>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <int_mode_0+0x84>)
 8000fd8:	fb83 3102 	smull	r3, r1, r3, r2
 8000fdc:	17d3      	asrs	r3, r2, #31
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	440b      	add	r3, r1
 8000fe6:	1ad1      	subs	r1, r2, r3
 8000fe8:	b2ca      	uxtb	r2, r1
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <int_mode_0+0x88>)
 8000fec:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 8000fee:	f7ff fe4d 	bl	8000c8c <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 8000ff2:	e011      	b.n	8001018 <int_mode_0+0x78>
	}else if(choice==1){
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <int_mode_0+0x80>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10d      	bne.n	8001018 <int_mode_0+0x78>
		set_encoder(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fe35 	bl	8000c6c <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <int_mode_0+0x8c>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <int_mode_0+0x90>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
		choice=0;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <int_mode_0+0x80>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001014:	f7ff fea2 	bl	8000d5c <print_interface_mode1>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800
 8001020:	20000334 	.word	0x20000334
 8001024:	55555556 	.word	0x55555556
 8001028:	2000034e 	.word	0x2000034e
 800102c:	2000034d 	.word	0x2000034d
 8001030:	2000034f 	.word	0x2000034f

08001034 <min_freq>:



void min_freq(){
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <min_freq+0x38>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <min_freq+0x3c>)
 8001040:	460b      	mov	r3, r1
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	4413      	add	r3, r2
 8001048:	2238      	movs	r2, #56	@ 0x38
 800104a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <min_freq+0x38>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <min_freq+0x3c>)
 8001054:	460b      	mov	r3, r1
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	4413      	add	r3, r2
 800105c:	3301      	adds	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000034e 	.word	0x2000034e
 8001070:	20000338 	.word	0x20000338

08001074 <max_freq>:

void max_freq(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <max_freq+0xa4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4a27      	ldr	r2, [pc, #156]	@ (800111c <max_freq+0xa8>)
 8001080:	460b      	mov	r3, r1
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a5b      	subs	r3, r3, r1
 8001086:	4413      	add	r3, r2
 8001088:	2231      	movs	r2, #49	@ 0x31
 800108a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <max_freq+0xa4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <max_freq+0xa8>)
 8001094:	460b      	mov	r3, r1
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a5b      	subs	r3, r3, r1
 800109a:	4413      	add	r3, r2
 800109c:	3301      	adds	r3, #1
 800109e:	2236      	movs	r2, #54	@ 0x36
 80010a0:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <max_freq+0xa4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <max_freq+0xa8>)
 80010aa:	460b      	mov	r3, r1
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	1a5b      	subs	r3, r3, r1
 80010b0:	4413      	add	r3, r2
 80010b2:	3302      	adds	r3, #2
 80010b4:	2230      	movs	r2, #48	@ 0x30
 80010b6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 80010b8:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <max_freq+0xa4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <max_freq+0xa8>)
 80010c0:	460b      	mov	r3, r1
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	4413      	add	r3, r2
 80010c8:	3303      	adds	r3, #3
 80010ca:	2230      	movs	r2, #48	@ 0x30
 80010cc:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <max_freq+0xa4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4a11      	ldr	r2, [pc, #68]	@ (800111c <max_freq+0xa8>)
 80010d6:	460b      	mov	r3, r1
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	2230      	movs	r2, #48	@ 0x30
 80010e2:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <max_freq+0xa4>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <max_freq+0xa8>)
 80010ec:	460b      	mov	r3, r1
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	1a5b      	subs	r3, r3, r1
 80010f2:	4413      	add	r3, r2
 80010f4:	3305      	adds	r3, #5
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <max_freq+0xa4>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <max_freq+0xa8>)
 8001102:	460b      	mov	r3, r1
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a5b      	subs	r3, r3, r1
 8001108:	4413      	add	r3, r2
 800110a:	3306      	adds	r3, #6
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	2000034e 	.word	0x2000034e
 800111c:	20000338 	.word	0x20000338

08001120 <int_mode_1>:

void int_mode_1(){
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001126:	2101      	movs	r1, #1
 8001128:	4896      	ldr	r0, [pc, #600]	@ (8001384 <int_mode_1+0x264>)
 800112a:	f001 fcf5 	bl	8002b18 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11b      	bne.n	800116c <int_mode_1+0x4c>
		if(choice==0){
 8001134:	4b94      	ldr	r3, [pc, #592]	@ (8001388 <int_mode_1+0x268>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <int_mode_1+0x3c>

			choice=1;
 800113c:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <int_mode_1+0x268>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 8001142:	4b92      	ldr	r3, [pc, #584]	@ (800138c <int_mode_1+0x26c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d010      	beq.n	800116c <int_mode_1+0x4c>
				prev_encoder=1000;
 800114a:	4b91      	ldr	r3, [pc, #580]	@ (8001390 <int_mode_1+0x270>)
 800114c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001150:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f7ff fd89 	bl	8000c6c <set_encoder>
 800115a:	e007      	b.n	800116c <int_mode_1+0x4c>

			}
		}else{
			choice=0;
 800115c:	4b8a      	ldr	r3, [pc, #552]	@ (8001388 <int_mode_1+0x268>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 8001162:	4b8a      	ldr	r3, [pc, #552]	@ (800138c <int_mode_1+0x26c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd80 	bl	8000c6c <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 800116c:	bf00      	nop
 800116e:	2101      	movs	r1, #1
 8001170:	4884      	ldr	r0, [pc, #528]	@ (8001384 <int_mode_1+0x264>)
 8001172:	f001 fcd1 	bl	8002b18 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f8      	beq.n	800116e <int_mode_1+0x4e>
	if(choice==0){
 800117c:	4b82      	ldr	r3, [pc, #520]	@ (8001388 <int_mode_1+0x268>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d113      	bne.n	80011ac <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 8001184:	f7ff fd64 	bl	8000c50 <get_encoder>
 8001188:	4602      	mov	r2, r0
 800118a:	4b82      	ldr	r3, [pc, #520]	@ (8001394 <int_mode_1+0x274>)
 800118c:	fb83 1302 	smull	r1, r3, r3, r2
 8001190:	4413      	add	r3, r2
 8001192:	1099      	asrs	r1, r3, #2
 8001194:	17d3      	asrs	r3, r2, #31
 8001196:	1ac9      	subs	r1, r1, r3
 8001198:	460b      	mov	r3, r1
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a5b      	subs	r3, r3, r1
 800119e:	1ad1      	subs	r1, r2, r3
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	4b7a      	ldr	r3, [pc, #488]	@ (800138c <int_mode_1+0x26c>)
 80011a4:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 80011a6:	f7ff fdd9 	bl	8000d5c <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
			print_interface_mode1();

		}
	}
}
 80011aa:	e0e7      	b.n	800137c <int_mode_1+0x25c>
	}else if(choice==1){
 80011ac:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <int_mode_1+0x268>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 80e3 	bne.w	800137c <int_mode_1+0x25c>
		if(choiced_num==0){
 80011b6:	4b75      	ldr	r3, [pc, #468]	@ (800138c <int_mode_1+0x26c>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d110      	bne.n	80011e0 <int_mode_1+0xc0>
			choice=0;
 80011be:	4b72      	ldr	r3, [pc, #456]	@ (8001388 <int_mode_1+0x268>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 80011c4:	4b74      	ldr	r3, [pc, #464]	@ (8001398 <int_mode_1+0x278>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
			Write_Flash_Array(freq);
 80011ca:	4874      	ldr	r0, [pc, #464]	@ (800139c <int_mode_1+0x27c>)
 80011cc:	f7ff fce2 	bl	8000b94 <Write_Flash_Array>
			set_encoder(choiced_channel);
 80011d0:	4b73      	ldr	r3, [pc, #460]	@ (80013a0 <int_mode_1+0x280>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd49 	bl	8000c6c <set_encoder>
			print_interface_mode0();
 80011da:	f7ff fd57 	bl	8000c8c <print_interface_mode0>
}
 80011de:	e0cd      	b.n	800137c <int_mode_1+0x25c>
			int delta = get_encoder();
 80011e0:	f7ff fd36 	bl	8000c50 <get_encoder>
 80011e4:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);
 80011e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <int_mode_1+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f908 	bl	8000404 <__aeabi_i2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	4b64      	ldr	r3, [pc, #400]	@ (800138c <int_mode_1+0x26c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f900 	bl	8000404 <__aeabi_i2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4965      	ldr	r1, [pc, #404]	@ (80013a4 <int_mode_1+0x284>)
 800120e:	f00a fbd9 	bl	800b9c4 <pow>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f95d 	bl	80004d8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4614      	mov	r4, r2
 8001224:	461d      	mov	r5, r3
 8001226:	4b5e      	ldr	r3, [pc, #376]	@ (80013a0 <int_mode_1+0x280>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b5b      	ldr	r3, [pc, #364]	@ (800139c <int_mode_1+0x27c>)
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8e6 	bl	8000404 <__aeabi_i2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7fe ff94 	bl	800016c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4955      	ldr	r1, [pc, #340]	@ (80013a0 <int_mode_1+0x280>)
 800124a:	7809      	ldrb	r1, [r1, #0]
 800124c:	460c      	mov	r4, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fbf1 	bl	8000a38 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	4a50      	ldr	r2, [pc, #320]	@ (800139c <int_mode_1+0x27c>)
 800125a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 800125e:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <int_mode_1+0x280>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <int_mode_1+0x27c>)
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da10      	bge.n	8001290 <int_mode_1+0x170>
				freq[choiced_channel]=1000000+freq[choiced_channel];
 800126e:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <int_mode_1+0x280>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b49      	ldr	r3, [pc, #292]	@ (800139c <int_mode_1+0x27c>)
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	4a49      	ldr	r2, [pc, #292]	@ (80013a0 <int_mode_1+0x280>)
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
 8001280:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8001284:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001288:	4a44      	ldr	r2, [pc, #272]	@ (800139c <int_mode_1+0x27c>)
 800128a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800128e:	e03a      	b.n	8001306 <int_mode_1+0x1e6>
			}else if(freq[choiced_channel]>999999){
 8001290:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <int_mode_1+0x280>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b41      	ldr	r3, [pc, #260]	@ (800139c <int_mode_1+0x27c>)
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	4a42      	ldr	r2, [pc, #264]	@ (80013a8 <int_mode_1+0x288>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	dd31      	ble.n	8001306 <int_mode_1+0x1e6>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <int_mode_1+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8aa 	bl	8000404 <__aeabi_i2d>
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	4b35      	ldr	r3, [pc, #212]	@ (800138c <int_mode_1+0x26c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8a2 	bl	8000404 <__aeabi_i2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	f04f 0000 	mov.w	r0, #0
 80012c8:	4936      	ldr	r1, [pc, #216]	@ (80013a4 <int_mode_1+0x284>)
 80012ca:	f00a fb7b 	bl	800b9c4 <pow>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f8ff 	bl	80004d8 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <int_mode_1+0x28c>)
 80012e8:	f7fe ff40 	bl	800016c <__adddf3>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	492b      	ldr	r1, [pc, #172]	@ (80013a0 <int_mode_1+0x280>)
 80012f2:	7809      	ldrb	r1, [r1, #0]
 80012f4:	460c      	mov	r4, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fb9d 	bl	8000a38 <__aeabi_d2iz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a26      	ldr	r2, [pc, #152]	@ (800139c <int_mode_1+0x27c>)
 8001302:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 8001306:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <int_mode_1+0x270>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
			if(freq[choiced_channel]<8){
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <int_mode_1+0x280>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <int_mode_1+0x27c>)
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	2b07      	cmp	r3, #7
 800131a:	dc09      	bgt.n	8001330 <int_mode_1+0x210>
				freq[choiced_channel]=8;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <int_mode_1+0x280>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <int_mode_1+0x27c>)
 8001324:	2208      	movs	r2, #8
 8001326:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 800132a:	f7ff fe83 	bl	8001034 <min_freq>
 800132e:	e011      	b.n	8001354 <int_mode_1+0x234>
			}else if(freq[choiced_channel]>160000){
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <int_mode_1+0x280>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <int_mode_1+0x27c>)
 8001338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133c:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <int_mode_1+0x290>)
 800133e:	4293      	cmp	r3, r2
 8001340:	dd08      	ble.n	8001354 <int_mode_1+0x234>
				freq[choiced_channel]=160000;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <int_mode_1+0x280>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <int_mode_1+0x27c>)
 800134a:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <int_mode_1+0x290>)
 800134c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 8001350:	f7ff fe90 	bl	8001074 <max_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <int_mode_1+0x280>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <int_mode_1+0x27c>)
 800135c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <int_mode_1+0x280>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	460b      	mov	r3, r1
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	4911      	ldr	r1, [pc, #68]	@ (80013b4 <int_mode_1+0x294>)
 800136e:	440b      	add	r3, r1
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff fb88 	bl	8000a88 <int_to_str>
			print_interface_mode1();
 8001378:	f7ff fcf0 	bl	8000d5c <print_interface_mode1>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	40010800 	.word	0x40010800
 8001388:	20000334 	.word	0x20000334
 800138c:	2000034d 	.word	0x2000034d
 8001390:	20000330 	.word	0x20000330
 8001394:	92492493 	.word	0x92492493
 8001398:	2000034f 	.word	0x2000034f
 800139c:	20000324 	.word	0x20000324
 80013a0:	2000034e 	.word	0x2000034e
 80013a4:	40240000 	.word	0x40240000
 80013a8:	000f423f 	.word	0x000f423f
 80013ac:	401c0000 	.word	0x401c0000
 80013b0:	00027100 	.word	0x00027100
 80013b4:	20000338 	.word	0x20000338

080013b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d108      	bne.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	if(interface_mode==0){
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_TIM_PeriodElapsedCallback+0x20>
    		int_mode_0();
 80013d2:	f7ff fde5 	bl	8000fa0 <int_mode_0>
    	}else{
    		int_mode_1();
    	}
    }
}
 80013d6:	e001      	b.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x24>
    		int_mode_1();
 80013d8:	f7ff fea2 	bl	8001120 <int_mode_1>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000034f 	.word	0x2000034f

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 fe7c 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f86e 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 f9d4 	bl	80017a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013f8:	f000 f8c4 	bl	8001584 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013fc:	f000 f91e 	bl	800163c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001400:	f000 f8ee 	bl	80015e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001404:	f000 f972 	bl	80016ec <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001408:	f008 ffa8 	bl	800a35c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800140c:	213c      	movs	r1, #60	@ 0x3c
 800140e:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <main+0xb8>)
 8001410:	f004 fbb3 	bl	8005b7a <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001414:	f000 fc6a 	bl	8001cec <ssd1306_Init>
  //si5351_Init();
  set_encoder(0);//выставление энкодера в 0
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fc27 	bl	8000c6c <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <main+0xbc>)
 8001420:	2208      	movs	r2, #8
 8001422:	601a      	str	r2, [r3, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <main+0xbc>)
 8001426:	2208      	movs	r2, #8
 8001428:	605a      	str	r2, [r3, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <main+0xbc>)
 800142c:	2208      	movs	r2, #8
 800142e:	609a      	str	r2, [r3, #8]
      if (Is_Flash_Valid()==0) {
 8001430:	f7ff fb7c 	bl	8000b2c <Is_Flash_Valid>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <main+0x5a>
          Write_Flash_Array(freq);
 800143a:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <main+0xbc>)
 800143c:	f7ff fbaa 	bl	8000b94 <Write_Flash_Array>
 8001440:	e002      	b.n	8001448 <main+0x60>
      }else{
    	  Read_Flash_Array(freq);
 8001442:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <main+0xbc>)
 8001444:	f7ff fb88 	bl	8000b58 <Read_Flash_Array>
      }
      choice=0;//переменная для считывания был ли нажат энкодер
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <main+0xc0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
      prev_choice=0;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <main+0xc4>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
      int_to_str(freq[2],num_string[2]);
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <main+0xbc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4915      	ldr	r1, [pc, #84]	@ (80014b0 <main+0xc8>)
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb14 	bl	8000a88 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001460:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <main+0xbc>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4913      	ldr	r1, [pc, #76]	@ (80014b4 <main+0xcc>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fb0e 	bl	8000a88 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <main+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4911      	ldr	r1, [pc, #68]	@ (80014b8 <main+0xd0>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb08 	bl	8000a88 <int_to_str>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <main+0xd4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <main+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <main+0xdc>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
      prev_encoder=8;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <main+0xe0>)
 800148c:	2208      	movs	r2, #8
 800148e:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 8001490:	f7ff fbfc 	bl	8000c8c <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001494:	480d      	ldr	r0, [pc, #52]	@ (80014cc <main+0xe4>)
 8001496:	f004 fa2d 	bl	80058f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	bf00      	nop
 800149c:	e7fd      	b.n	800149a <main+0xb2>
 800149e:	bf00      	nop
 80014a0:	20000294 	.word	0x20000294
 80014a4:	20000324 	.word	0x20000324
 80014a8:	20000334 	.word	0x20000334
 80014ac:	20000335 	.word	0x20000335
 80014b0:	20000346 	.word	0x20000346
 80014b4:	2000033f 	.word	0x2000033f
 80014b8:	20000338 	.word	0x20000338
 80014bc:	2000034d 	.word	0x2000034d
 80014c0:	2000034e 	.word	0x2000034e
 80014c4:	2000034f 	.word	0x2000034f
 80014c8:	20000330 	.word	0x20000330
 80014cc:	200002dc 	.word	0x200002dc

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	@ 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fdd0 	bl	800b084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800151a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800151c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fd32 	bl	8004f90 <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001532:	f000 f99b 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001546:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f003 ff9e 	bl	8005494 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800155e:	f000 f985 	bl	800186c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001562:	2310      	movs	r3, #16
 8001564:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f90b 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001578:	f000 f978 	bl	800186c <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	@ 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_I2C1_Init+0x50>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <MX_I2C1_Init+0x54>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_I2C1_Init+0x50>)
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x58>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_I2C1_Init+0x50>)
 80015c2:	f001 fad9 	bl	8002b78 <HAL_I2C_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015cc:	f000 f94e 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001ec 	.word	0x200001ec
 80015d8:	40005400 	.word	0x40005400
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_I2C2_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <MX_I2C2_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_I2C2_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_I2C2_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_I2C2_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_I2C2_Init+0x50>)
 800161e:	f001 faab 	bl	8002b78 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 f920 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000240 	.word	0x20000240
 8001634:	40005800 	.word	0x40005800
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2224      	movs	r2, #36	@ 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f009 fd1a 	bl	800b084 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800165a:	4a23      	ldr	r2, [pc, #140]	@ (80016e8 <MX_TIM1_Init+0xac>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800166c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001684:	2303      	movs	r3, #3
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 80016b0:	f004 f9c1 	bl	8005a36 <HAL_TIM_Encoder_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 f8d7 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_TIM1_Init+0xa8>)
 80016cc:	f004 fed4 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016d6:	f000 f8c9 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	@ 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000294 	.word	0x20000294
 80016e8:	40012c00 	.word	0x40012c00

080016ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800170e:	4b23      	ldr	r3, [pc, #140]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001710:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001714:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001718:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800171c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001726:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <MX_TIM2_Init+0xb0>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001738:	4818      	ldr	r0, [pc, #96]	@ (800179c <MX_TIM2_Init+0xb0>)
 800173a:	f004 f92d 	bl	8005998 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001744:	f000 f892 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4619      	mov	r1, r3
 8001756:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_TIM2_Init+0xb0>)
 8001758:	f004 fe8e 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001762:	f000 f883 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001766:	2360      	movs	r3, #96	@ 0x60
 8001768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_TIM2_Init+0xb0>)
 800177e:	f004 fb7b 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001788:	f000 f870 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <MX_TIM2_Init+0xb0>)
 800178e:	f000 f97d 	bl	8001a8c <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	@ 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002dc 	.word	0x200002dc

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_GPIO_Init+0xc0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <MX_GPIO_Init+0xc0>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_GPIO_Init+0xc0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181a:	4812      	ldr	r0, [pc, #72]	@ (8001864 <MX_GPIO_Init+0xc4>)
 800181c:	f001 f993 	bl	8002b46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	480a      	ldr	r0, [pc, #40]	@ (8001864 <MX_GPIO_Init+0xc4>)
 800183a:	f000 ffe9 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_GPIO_Init+0xc8>)
 8001852:	f000 ffdd 	bl	8002810 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40011000 	.word	0x40011000
 8001868:	40010800 	.word	0x40010800

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <Error_Handler+0x8>

08001878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_MspInit+0x6c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_MspInit+0x6c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_MspInit+0x6c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_MspInit+0x6c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <HAL_MspInit+0x6c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_MspInit+0x6c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2005      	movs	r0, #5
 80018b4:	f000 fd75 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80018b8:	2005      	movs	r0, #5
 80018ba:	f000 fd8e 	bl	80023da <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_MspInit+0x70>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_MspInit+0x70>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000

080018ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2b      	ldr	r2, [pc, #172]	@ (80019b4 <HAL_I2C_MspInit+0xc8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d124      	bne.n	8001956 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001924:	23c0      	movs	r3, #192	@ 0xc0
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4619      	mov	r1, r3
 8001936:	4821      	ldr	r0, [pc, #132]	@ (80019bc <HAL_I2C_MspInit+0xd0>)
 8001938:	f000 ff6a 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001942:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001946:	61d3      	str	r3, [r2, #28]
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001954:	e029      	b.n	80019aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a19      	ldr	r2, [pc, #100]	@ (80019c0 <HAL_I2C_MspInit+0xd4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d124      	bne.n	80019aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001978:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197e:	2312      	movs	r3, #18
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	4619      	mov	r1, r3
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_I2C_MspInit+0xd0>)
 800198e:	f000 ff3f 	bl	8002810 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_I2C_MspInit+0xcc>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40005400 	.word	0x40005400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40005800 	.word	0x40005800

080019c4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0x74>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d124      	bne.n	8001a2e <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 80019ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x78>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001a2a:	f000 fef1 	bl	8002810 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a2e:	bf00      	nop
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800

08001a44 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a54:	d113      	bne.n	8001a7e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_TIM_PWM_MspInit+0x44>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_TIM_PWM_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_TIM_PWM_MspInit+0x44>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	201c      	movs	r0, #28
 8001a74:	f000 fc95 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a78:	201c      	movs	r0, #28
 8001a7a:	f000 fcae 	bl	80023da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aaa:	d12a      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_TIM_MspPostInit+0x80>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a16      	ldr	r2, [pc, #88]	@ (8001b0c <HAL_TIM_MspPostInit+0x80>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_TIM_MspPostInit+0x80>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480d      	ldr	r0, [pc, #52]	@ (8001b10 <HAL_TIM_MspPostInit+0x84>)
 8001ada:	f000 fe99 	bl	8002810 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001ade:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_TIM_MspPostInit+0x88>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <HAL_TIM_MspPostInit+0x88>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010800 	.word	0x40010800
 8001b14:	40010000 	.word	0x40010000

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <NMI_Handler+0x4>

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <MemManage_Handler+0x4>

08001b30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 fb04 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001b82:	f001 fdc1 	bl	8003708 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000128c 	.word	0x2000128c

08001b90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b96:	f001 fdb7 	bl	8003708 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000128c 	.word	0x2000128c

08001ba4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <TIM2_IRQHandler+0x10>)
 8001baa:	f004 f874 	bl	8005c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002dc 	.word	0x200002dc

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f009 fa66 	bl	800b0b8 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20005000 	.word	0x20005000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	20000350 	.word	0x20000350
 8001c20:	200018d0 	.word	0x200018d0

08001c24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff fff8 	bl	8001c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c36:	490c      	ldr	r1, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c38:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c4c:	4c09      	ldr	r4, [pc, #36]	@ (8001c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f009 fa33 	bl	800b0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c5e:	f7ff fbc3 	bl	80013e8 <main>
  bx lr
 8001c62:	4770      	bx	lr
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001c6c:	0800df78 	.word	0x0800df78
  ldr r2, =_sbss
 8001c70:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001c74:	200018cc 	.word	0x200018cc

08001c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC1_2_IRQHandler>

08001c7a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2178      	movs	r1, #120	@ 0x78
 8001ca6:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <ssd1306_WriteCommand+0x2c>)
 8001ca8:	f001 f8aa 	bl	8002e00 <HAL_I2C_Mem_Write>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000240 	.word	0x20000240

08001cb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cca:	9202      	str	r2, [sp, #8]
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	2178      	movs	r1, #120	@ 0x78
 8001cd8:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <ssd1306_WriteData+0x30>)
 8001cda:	f001 f891 	bl	8002e00 <HAL_I2C_Mem_Write>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000240 	.word	0x20000240

08001cec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001cf0:	f7ff ffc3 	bl	8001c7a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cf4:	2064      	movs	r0, #100	@ 0x64
 8001cf6:	f000 fa59 	bl	80021ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f000 f9d6 	bl	80020ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d00:	2020      	movs	r0, #32
 8001d02:	f7ff ffc1 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ffbe 	bl	8001c88 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d0c:	20b0      	movs	r0, #176	@ 0xb0
 8001d0e:	f7ff ffbb 	bl	8001c88 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d12:	20c8      	movs	r0, #200	@ 0xc8
 8001d14:	f7ff ffb8 	bl	8001c88 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ffb5 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff ffb2 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d24:	2040      	movs	r0, #64	@ 0x40
 8001d26:	f7ff ffaf 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d2a:	20ff      	movs	r0, #255	@ 0xff
 8001d2c:	f000 f9aa 	bl	8002084 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d30:	20a1      	movs	r0, #161	@ 0xa1
 8001d32:	f7ff ffa9 	bl	8001c88 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d36:	20a6      	movs	r0, #166	@ 0xa6
 8001d38:	f7ff ffa6 	bl	8001c88 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d3c:	20a8      	movs	r0, #168	@ 0xa8
 8001d3e:	f7ff ffa3 	bl	8001c88 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001d42:	201f      	movs	r0, #31
 8001d44:	f7ff ffa0 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d48:	20a4      	movs	r0, #164	@ 0xa4
 8001d4a:	f7ff ff9d 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d4e:	20d3      	movs	r0, #211	@ 0xd3
 8001d50:	f7ff ff9a 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff ff97 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d5a:	20d5      	movs	r0, #213	@ 0xd5
 8001d5c:	f7ff ff94 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d60:	20f0      	movs	r0, #240	@ 0xf0
 8001d62:	f7ff ff91 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d66:	20d9      	movs	r0, #217	@ 0xd9
 8001d68:	f7ff ff8e 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d6c:	2022      	movs	r0, #34	@ 0x22
 8001d6e:	f7ff ff8b 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d72:	20da      	movs	r0, #218	@ 0xda
 8001d74:	f7ff ff88 	bl	8001c88 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff ff85 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d7e:	20db      	movs	r0, #219	@ 0xdb
 8001d80:	f7ff ff82 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff ff7f 	bl	8001c88 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d8a:	208d      	movs	r0, #141	@ 0x8d
 8001d8c:	f7ff ff7c 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d90:	2014      	movs	r0, #20
 8001d92:	f7ff ff79 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 f988 	bl	80020ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f000 f80f 	bl	8001dc0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001da2:	f000 f825 	bl	8001df0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001db2:	4b02      	ldr	r3, [pc, #8]	@ (8001dbc <ssd1306_Init+0xd0>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	711a      	strb	r2, [r3, #4]
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000554 	.word	0x20000554

08001dc0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <ssd1306_Fill+0x14>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <ssd1306_Fill+0x16>
 8001dd4:	23ff      	movs	r3, #255	@ 0xff
 8001dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <ssd1306_Fill+0x2c>)
 8001dde:	f009 f951 	bl	800b084 <memset>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000354 	.word	0x20000354

08001df0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e016      	b.n	8001e2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	3b50      	subs	r3, #80	@ 0x50
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff40 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ff3d 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e0e:	2010      	movs	r0, #16
 8001e10:	f7ff ff3a 	bl	8001c88 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <ssd1306_UpdateScreen+0x4c>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff4a 	bl	8001cb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3301      	adds	r3, #1
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d9e5      	bls.n	8001dfc <ssd1306_UpdateScreen+0xc>
    }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000354 	.word	0x20000354

08001e40 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db3d      	blt.n	8001ed6 <ssd1306_DrawPixel+0x96>
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	2b1f      	cmp	r3, #31
 8001e5e:	d83a      	bhi.n	8001ed6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11a      	bne.n	8001e9c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e66:	79fa      	ldrb	r2, [r7, #7]
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	b2d8      	uxtb	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	01db      	lsls	r3, r3, #7
 8001e72:	4413      	add	r3, r2
 8001e74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <ssd1306_DrawPixel+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b259      	sxtb	r1, r3
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	01db      	lsls	r3, r3, #7
 8001e92:	4413      	add	r3, r2
 8001e94:	b2c9      	uxtb	r1, r1
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <ssd1306_DrawPixel+0xa0>)
 8001e98:	54d1      	strb	r1, [r2, r3]
 8001e9a:	e01d      	b.n	8001ed8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	b2d8      	uxtb	r0, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <ssd1306_DrawPixel+0xa0>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b259      	sxtb	r1, r3
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	01db      	lsls	r3, r3, #7
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2c9      	uxtb	r1, r1
 8001ed0:	4a03      	ldr	r2, [pc, #12]	@ (8001ee0 <ssd1306_DrawPixel+0xa0>)
 8001ed2:	54d1      	strb	r1, [r2, r3]
 8001ed4:	e000      	b.n	8001ed8 <ssd1306_DrawPixel+0x98>
        return;
 8001ed6:	bf00      	nop
    }
}
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000354 	.word	0x20000354

08001ee4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4604      	mov	r4, r0
 8001eec:	4638      	mov	r0, r7
 8001eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b1f      	cmp	r3, #31
 8001efa:	d902      	bls.n	8001f02 <ssd1306_WriteChar+0x1e>
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f00:	d901      	bls.n	8001f06 <ssd1306_WriteChar+0x22>
        return 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e079      	b.n	8001ffa <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <ssd1306_WriteChar+0x34>
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3b20      	subs	r3, #32
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	e000      	b.n	8001f1a <ssd1306_WriteChar+0x36>
 8001f18:	783b      	ldrb	r3, [r7, #0]
 8001f1a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f1c:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	4413      	add	r3, r2
 8001f26:	2b80      	cmp	r3, #128	@ 0x80
 8001f28:	dc06      	bgt.n	8001f38 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f2a:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	dd01      	ble.n	8001f3c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e05e      	b.n	8001ffa <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e04d      	b.n	8001fde <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3b20      	subs	r3, #32
 8001f48:	7879      	ldrb	r1, [r7, #1]
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	440b      	add	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	e036      	b.n	8001fd0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d013      	beq.n	8001f9a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f72:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b2d8      	uxtb	r0, r3
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001f82:	885b      	ldrh	r3, [r3, #2]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7ff ff54 	bl	8001e40 <ssd1306_DrawPixel>
 8001f98:	e017      	b.n	8001fca <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b2d8      	uxtb	r0, r3
 8001fa8:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001faa:	885b      	ldrh	r3, [r3, #2]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	f7ff ff3b 	bl	8001e40 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3c4      	bcc.n	8001f62 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	787b      	ldrb	r3, [r7, #1]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d3ac      	bcc.n	8001f42 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001fea:	881a      	ldrh	r2, [r3, #0]
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <ssd1306_WriteChar+0x120>)
 8001ff6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	bf00      	nop
 8002004:	20000554 	.word	0x20000554

08002008 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	4638      	mov	r0, r7
 8002012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002016:	e013      	b.n	8002040 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	7818      	ldrb	r0, [r3, #0]
 800201c:	7e3b      	ldrb	r3, [r7, #24]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	463b      	mov	r3, r7
 8002022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002024:	f7ff ff5e 	bl	8001ee4 <ssd1306_WriteChar>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d002      	beq.n	800203a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	e008      	b.n	800204c <ssd1306_WriteString+0x44>
        }
        str++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e7      	bne.n	8002018 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	781b      	ldrb	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	460a      	mov	r2, r1
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	4613      	mov	r3, r2
 8002062:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <ssd1306_SetCursor+0x2c>)
 800206a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <ssd1306_SetCursor+0x2c>)
 8002072:	805a      	strh	r2, [r3, #2]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000554 	.word	0x20000554

08002084 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800208e:	2381      	movs	r3, #129	@ 0x81
 8002090:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fdf7 	bl	8001c88 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fdf3 	bl	8001c88 <ssd1306_WriteCommand>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020bc:	23af      	movs	r3, #175	@ 0xaf
 80020be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <ssd1306_SetDisplayOn+0x38>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	715a      	strb	r2, [r3, #5]
 80020c6:	e004      	b.n	80020d2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80020c8:	23ae      	movs	r3, #174	@ 0xae
 80020ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <ssd1306_SetDisplayOn+0x38>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdd7 	bl	8001c88 <ssd1306_WriteCommand>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000554 	.word	0x20000554

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x28>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x28>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f947 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fbb8 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40022000 	.word	0x40022000

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f95f 	bl	80023f6 <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f927 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000000 	.word	0x20000000
 800216c:	20000008 	.word	0x20000008
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_IncTick+0x1c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_IncTick+0x20>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a03      	ldr	r2, [pc, #12]	@ (8002194 <HAL_IncTick+0x20>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000008 	.word	0x20000008
 8002194:	2000055c 	.word	0x2000055c

08002198 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b02      	ldr	r3, [pc, #8]	@ (80021a8 <HAL_GetTick+0x10>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	2000055c 	.word	0x2000055c

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff fff0 	bl	8002198 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffe0 	bl	8002198 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000008 	.word	0x20000008

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	@ (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800242a:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <HAL_FLASH_Program+0xd8>)
 800242c:	7e1b      	ldrb	r3, [r3, #24]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_FLASH_Program+0x26>
 8002432:	2302      	movs	r3, #2
 8002434:	e054      	b.n	80024e0 <HAL_FLASH_Program+0xd0>
 8002436:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_FLASH_Program+0xd8>)
 8002438:	2201      	movs	r2, #1
 800243a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800243c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002440:	f000 f8a8 	bl	8002594 <FLASH_WaitForLastOperation>
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d144      	bne.n	80024d8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002454:	2301      	movs	r3, #1
 8002456:	757b      	strb	r3, [r7, #21]
 8002458:	e007      	b.n	800246a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d102      	bne.n	8002466 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002460:	2302      	movs	r3, #2
 8002462:	757b      	strb	r3, [r7, #21]
 8002464:	e001      	b.n	800246a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002466:	2304      	movs	r3, #4
 8002468:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800246a:	2300      	movs	r3, #0
 800246c:	75bb      	strb	r3, [r7, #22]
 800246e:	e02d      	b.n	80024cc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002470:	7dbb      	ldrb	r3, [r7, #22]
 8002472:	005a      	lsls	r2, r3, #1
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	eb02 0c03 	add.w	ip, r2, r3
 800247a:	7dbb      	ldrb	r3, [r7, #22]
 800247c:	0119      	lsls	r1, r3, #4
 800247e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002482:	f1c1 0620 	rsb	r6, r1, #32
 8002486:	f1a1 0020 	sub.w	r0, r1, #32
 800248a:	fa22 f401 	lsr.w	r4, r2, r1
 800248e:	fa03 f606 	lsl.w	r6, r3, r6
 8002492:	4334      	orrs	r4, r6
 8002494:	fa23 f000 	lsr.w	r0, r3, r0
 8002498:	4304      	orrs	r4, r0
 800249a:	fa23 f501 	lsr.w	r5, r3, r1
 800249e:	b2a3      	uxth	r3, r4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4660      	mov	r0, ip
 80024a4:	f000 f85a 	bl	800255c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024ac:	f000 f872 	bl	8002594 <FLASH_WaitForLastOperation>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_FLASH_Program+0xdc>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <HAL_FLASH_Program+0xdc>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80024c6:	7dbb      	ldrb	r3, [r7, #22]
 80024c8:	3301      	adds	r3, #1
 80024ca:	75bb      	strb	r3, [r7, #22]
 80024cc:	7dba      	ldrb	r2, [r7, #22]
 80024ce:	7d7b      	ldrb	r3, [r7, #21]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d3cd      	bcc.n	8002470 <HAL_FLASH_Program+0x60>
 80024d4:	e000      	b.n	80024d8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80024d6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_FLASH_Program+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	761a      	strb	r2, [r3, #24]

  return status;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	20000560 	.word	0x20000560
 80024ec:	40022000 	.word	0x40022000

080024f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_FLASH_Unlock+0x40>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_FLASH_Unlock+0x40>)
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <HAL_FLASH_Unlock+0x44>)
 800250a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800250c:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_FLASH_Unlock+0x40>)
 800250e:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <HAL_FLASH_Unlock+0x48>)
 8002510:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002512:	4b07      	ldr	r3, [pc, #28]	@ (8002530 <HAL_FLASH_Unlock+0x40>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002522:	79fb      	ldrb	r3, [r7, #7]
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000
 8002534:	45670123 	.word	0x45670123
 8002538:	cdef89ab 	.word	0xcdef89ab

0800253c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_FLASH_Lock+0x1c>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_FLASH_Lock+0x1c>)
 8002546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800254a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000

0800255c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002568:	4b08      	ldr	r3, [pc, #32]	@ (800258c <FLASH_Program_HalfWord+0x30>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <FLASH_Program_HalfWord+0x34>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <FLASH_Program_HalfWord+0x34>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	801a      	strh	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000560 	.word	0x20000560
 8002590:	40022000 	.word	0x40022000

08002594 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fdfc 	bl	8002198 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025a2:	e010      	b.n	80025c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d00c      	beq.n	80025c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <FLASH_WaitForLastOperation+0x2e>
 80025b2:	f7ff fdf1 	bl	8002198 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d201      	bcs.n	80025c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e025      	b.n	8002612 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1e8      	bne.n	80025a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025d2:	4b12      	ldr	r3, [pc, #72]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025de:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025e0:	2220      	movs	r2, #32
 80025e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025e4:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025fc:	4b07      	ldr	r3, [pc, #28]	@ (800261c <FLASH_WaitForLastOperation+0x88>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002608:	f000 f80a 	bl	8002620 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000

08002620 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002636:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	4a1f      	ldr	r2, [pc, #124]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002640:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f043 0310 	orr.w	r3, r3, #16
 8002648:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800264a:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002660:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800266a:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	4a0f      	ldr	r2, [pc, #60]	@ (80026bc <FLASH_SetErrorCode+0x9c>)
 8002680:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f240 1201 	movw	r2, #257	@ 0x101
 8002694:	4293      	cmp	r3, r2
 8002696:	d106      	bne.n	80026a6 <FLASH_SetErrorCode+0x86>
 8002698:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	4a06      	ldr	r2, [pc, #24]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	61d3      	str	r3, [r2, #28]
}  
 80026a4:	e002      	b.n	80026ac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <FLASH_SetErrorCode+0x98>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	60d3      	str	r3, [r2, #12]
}  
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000
 80026bc:	20000560 	.word	0x20000560

080026c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002790 <HAL_FLASHEx_Erase+0xd0>)
 80026d4:	7e1b      	ldrb	r3, [r3, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_FLASHEx_Erase+0x1e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e053      	b.n	8002786 <HAL_FLASHEx_Erase+0xc6>
 80026de:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <HAL_FLASHEx_Erase+0xd0>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d116      	bne.n	800271a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80026f0:	f7ff ff50 	bl	8002594 <FLASH_WaitForLastOperation>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d141      	bne.n	800277e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f000 f84c 	bl	8002798 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002700:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002704:	f7ff ff46 	bl	8002594 <FLASH_WaitForLastOperation>
 8002708:	4603      	mov	r3, r0
 800270a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_FLASHEx_Erase+0xd4>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4a20      	ldr	r2, [pc, #128]	@ (8002794 <HAL_FLASHEx_Erase+0xd4>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6113      	str	r3, [r2, #16]
 8002718:	e031      	b.n	800277e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800271a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800271e:	f7ff ff39 	bl	8002594 <FLASH_WaitForLastOperation>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12a      	bne.n	800277e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	e019      	b.n	800276c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002738:	68b8      	ldr	r0, [r7, #8]
 800273a:	f000 f849 	bl	80027d0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800273e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002742:	f7ff ff27 	bl	8002594 <FLASH_WaitForLastOperation>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_FLASHEx_Erase+0xd4>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <HAL_FLASHEx_Erase+0xd4>)
 8002750:	f023 0302 	bic.w	r3, r3, #2
 8002754:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	601a      	str	r2, [r3, #0]
            break;
 8002762:	e00c      	b.n	800277e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800276a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	029a      	lsls	r2, r3, #10
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4413      	add	r3, r2
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3dc      	bcc.n	8002738 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <HAL_FLASHEx_Erase+0xd0>)
 8002780:	2200      	movs	r2, #0
 8002782:	761a      	strb	r2, [r3, #24]

  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000560 	.word	0x20000560
 8002794:	40022000 	.word	0x40022000

08002798 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <FLASH_MassErase+0x30>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <FLASH_MassErase+0x34>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <FLASH_MassErase+0x34>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <FLASH_MassErase+0x34>)
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <FLASH_MassErase+0x34>)
 80027b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027bc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	20000560 	.word	0x20000560
 80027cc:	40022000 	.word	0x40022000

080027d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <FLASH_PageErase+0x38>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <FLASH_PageErase+0x3c>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <FLASH_PageErase+0x3c>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80027ea:	4a08      	ldr	r2, [pc, #32]	@ (800280c <FLASH_PageErase+0x3c>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <FLASH_PageErase+0x3c>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	4a05      	ldr	r2, [pc, #20]	@ (800280c <FLASH_PageErase+0x3c>)
 80027f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000560 	.word	0x20000560
 800280c:	40022000 	.word	0x40022000

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	@ 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002822:	e169      	b.n	8002af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002824:	2201      	movs	r2, #1
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8158 	bne.w	8002af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a9a      	ldr	r2, [pc, #616]	@ (8002ab0 <HAL_GPIO_Init+0x2a0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d05e      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800284c:	4a98      	ldr	r2, [pc, #608]	@ (8002ab0 <HAL_GPIO_Init+0x2a0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d875      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002852:	4a98      	ldr	r2, [pc, #608]	@ (8002ab4 <HAL_GPIO_Init+0x2a4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d058      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002858:	4a96      	ldr	r2, [pc, #600]	@ (8002ab4 <HAL_GPIO_Init+0x2a4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d86f      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800285e:	4a96      	ldr	r2, [pc, #600]	@ (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d052      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002864:	4a94      	ldr	r2, [pc, #592]	@ (8002ab8 <HAL_GPIO_Init+0x2a8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d869      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800286a:	4a94      	ldr	r2, [pc, #592]	@ (8002abc <HAL_GPIO_Init+0x2ac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04c      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002870:	4a92      	ldr	r2, [pc, #584]	@ (8002abc <HAL_GPIO_Init+0x2ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d863      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002876:	4a92      	ldr	r2, [pc, #584]	@ (8002ac0 <HAL_GPIO_Init+0x2b0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d046      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800287c:	4a90      	ldr	r2, [pc, #576]	@ (8002ac0 <HAL_GPIO_Init+0x2b0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d85d      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d82a      	bhi.n	80028dc <HAL_GPIO_Init+0xcc>
 8002886:	2b12      	cmp	r3, #18
 8002888:	d859      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800288a:	a201      	add	r2, pc, #4	@ (adr r2, 8002890 <HAL_GPIO_Init+0x80>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	0800290b 	.word	0x0800290b
 8002894:	080028e5 	.word	0x080028e5
 8002898:	080028f7 	.word	0x080028f7
 800289c:	08002939 	.word	0x08002939
 80028a0:	0800293f 	.word	0x0800293f
 80028a4:	0800293f 	.word	0x0800293f
 80028a8:	0800293f 	.word	0x0800293f
 80028ac:	0800293f 	.word	0x0800293f
 80028b0:	0800293f 	.word	0x0800293f
 80028b4:	0800293f 	.word	0x0800293f
 80028b8:	0800293f 	.word	0x0800293f
 80028bc:	0800293f 	.word	0x0800293f
 80028c0:	0800293f 	.word	0x0800293f
 80028c4:	0800293f 	.word	0x0800293f
 80028c8:	0800293f 	.word	0x0800293f
 80028cc:	0800293f 	.word	0x0800293f
 80028d0:	0800293f 	.word	0x0800293f
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	08002901 	.word	0x08002901
 80028dc:	4a79      	ldr	r2, [pc, #484]	@ (8002ac4 <HAL_GPIO_Init+0x2b4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028e2:	e02c      	b.n	800293e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e029      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e024      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	3308      	adds	r3, #8
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e01f      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	330c      	adds	r3, #12
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e01a      	b.n	8002940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002912:	2304      	movs	r3, #4
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e013      	b.n	8002940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	611a      	str	r2, [r3, #16]
          break;
 800292a:	e009      	b.n	8002940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	615a      	str	r2, [r3, #20]
          break;
 8002936:	e003      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x130>
          break;
 800293e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2bff      	cmp	r3, #255	@ 0xff
 8002944:	d801      	bhi.n	800294a <HAL_GPIO_Init+0x13a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	e001      	b.n	800294e <HAL_GPIO_Init+0x13e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	@ 0xff
 8002954:	d802      	bhi.n	800295c <HAL_GPIO_Init+0x14c>
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x152>
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	3b08      	subs	r3, #8
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	210f      	movs	r1, #15
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80b1 	beq.w	8002af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002990:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac8 <HAL_GPIO_Init+0x2b8>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_GPIO_Init+0x2b8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a8:	4a48      	ldr	r2, [pc, #288]	@ (8002acc <HAL_GPIO_Init+0x2bc>)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a40      	ldr	r2, [pc, #256]	@ (8002ad0 <HAL_GPIO_Init+0x2c0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_GPIO_Init+0x1ec>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ad4 <HAL_GPIO_Init+0x2c4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00d      	beq.n	80029f8 <HAL_GPIO_Init+0x1e8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3e      	ldr	r2, [pc, #248]	@ (8002ad8 <HAL_GPIO_Init+0x2c8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <HAL_GPIO_Init+0x1e4>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3d      	ldr	r2, [pc, #244]	@ (8002adc <HAL_GPIO_Init+0x2cc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_GPIO_Init+0x1e0>
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e004      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_GPIO_Init+0x1ee>
 80029fc:	2300      	movs	r3, #0
 80029fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0e:	492f      	ldr	r1, [pc, #188]	@ (8002acc <HAL_GPIO_Init+0x2bc>)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	492c      	ldr	r1, [pc, #176]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4928      	ldr	r1, [pc, #160]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a50:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4922      	ldr	r1, [pc, #136]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	491e      	ldr	r1, [pc, #120]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4918      	ldr	r1, [pc, #96]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a86:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4914      	ldr	r1, [pc, #80]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d021      	beq.n	8002ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	490e      	ldr	r1, [pc, #56]	@ (8002ae0 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e021      	b.n	8002af2 <HAL_GPIO_Init+0x2e2>
 8002aae:	bf00      	nop
 8002ab0:	10320000 	.word	0x10320000
 8002ab4:	10310000 	.word	0x10310000
 8002ab8:	10220000 	.word	0x10220000
 8002abc:	10210000 	.word	0x10210000
 8002ac0:	10120000 	.word	0x10120000
 8002ac4:	10110000 	.word	0x10110000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40010800 	.word	0x40010800
 8002ad4:	40010c00 	.word	0x40010c00
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	4909      	ldr	r1, [pc, #36]	@ (8002b14 <HAL_GPIO_Init+0x304>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f ae8e 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	372c      	adds	r7, #44	@ 0x2c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	e001      	b.n	8002b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
 8002b52:	4613      	mov	r3, r2
 8002b54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b56:	787b      	ldrb	r3, [r7, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	041a      	lsls	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12b      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fea4 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f002 fda2 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a81      	ldr	r2, [pc, #516]	@ (8002dec <HAL_I2C_Init+0x274>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d807      	bhi.n	8002bfc <HAL_I2C_Init+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a80      	ldr	r2, [pc, #512]	@ (8002df0 <HAL_I2C_Init+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e006      	b.n	8002c0a <HAL_I2C_Init+0x92>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	@ (8002df4 <HAL_I2C_Init+0x27c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e7      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a78      	ldr	r2, [pc, #480]	@ (8002df8 <HAL_I2C_Init+0x280>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a6a      	ldr	r2, [pc, #424]	@ (8002dec <HAL_I2C_Init+0x274>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d802      	bhi.n	8002c4c <HAL_I2C_Init+0xd4>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	e009      	b.n	8002c60 <HAL_I2C_Init+0xe8>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a69      	ldr	r2, [pc, #420]	@ (8002dfc <HAL_I2C_Init+0x284>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	3301      	adds	r3, #1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	495c      	ldr	r1, [pc, #368]	@ (8002dec <HAL_I2C_Init+0x274>)
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	d819      	bhi.n	8002cb4 <HAL_I2C_Init+0x13c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e59      	subs	r1, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c94:	400b      	ands	r3, r1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_I2C_Init+0x138>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e59      	subs	r1, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	e051      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e04f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_I2C_Init+0x168>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e012      	b.n	8002d06 <HAL_I2C_Init+0x18e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x196>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e022      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <HAL_I2C_Init+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e58      	subs	r0, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	440b      	add	r3, r1
 8002d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6911      	ldr	r1, [r2, #16]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	000186a0 	.word	0x000186a0
 8002df0:	001e847f 	.word	0x001e847f
 8002df4:	003d08ff 	.word	0x003d08ff
 8002df8:	431bde83 	.word	0x431bde83
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	817b      	strh	r3, [r7, #10]
 8002e12:	460b      	mov	r3, r1
 8002e14:	813b      	strh	r3, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e1a:	f7ff f9bd 	bl	8002198 <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	f040 80d9 	bne.w	8002fe0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2319      	movs	r3, #25
 8002e34:	2201      	movs	r2, #1
 8002e36:	496d      	ldr	r1, [pc, #436]	@ (8002fec <HAL_I2C_Mem_Write+0x1ec>)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f971 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0cc      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Mem_Write+0x56>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0c5      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d007      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2221      	movs	r2, #33	@ 0x21
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <HAL_I2C_Mem_Write+0x1f0>)
 8002ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ebe:	88f8      	ldrh	r0, [r7, #6]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4603      	mov	r3, r0
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f890 	bl	8002ff4 <I2C_RequestMemoryWrite>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d052      	beq.n	8002f80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e081      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa36 	bl	8003354 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d11b      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x180>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d017      	beq.n	8002f80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1aa      	bne.n	8002ede <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fa29 	bl	80033e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e016      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	00100002 	.word	0x00100002
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800301c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2200      	movs	r2, #0
 8003026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f878 	bl	8003120 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003044:	d103      	bne.n	800304e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e05f      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	492d      	ldr	r1, [pc, #180]	@ (800311c <I2C_RequestMemoryWrite+0x128>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f8d3 	bl	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04c      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f95e 	bl	8003354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02b      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e021      	b.n	8003110 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030cc:	893b      	ldrh	r3, [r7, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f938 	bl	8003354 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d107      	bne.n	8003102 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e005      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	e048      	b.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d044      	beq.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7ff f82d 	bl	8002198 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d139      	bne.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10d      	bne.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x56>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	43da      	mvns	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	e00c      	b.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	43da      	mvns	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	429a      	cmp	r2, r3
 8003194:	d116      	bne.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e023      	b.n	800320c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10d      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	e00c      	b.n	8003204 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	429a      	cmp	r2, r3
 8003208:	d093      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003222:	e071      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d123      	bne.n	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003242:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800324c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0204 	orr.w	r2, r3, #4
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e067      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d041      	beq.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fe ff88 	bl	8002198 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d136      	bne.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10c      	bne.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e00b      	b.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	43da      	mvns	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e021      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10c      	bne.n	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e00b      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f af6d 	bne.w	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003360:	e034      	b.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f886 	bl	8003474 <I2C_IsAcknowledgeFailed>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e034      	b.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d028      	beq.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe ff0d 	bl	8002198 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11d      	bne.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b80      	cmp	r3, #128	@ 0x80
 800339c:	d016      	beq.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e007      	b.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d1c3      	bne.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f0:	e034      	b.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f83e 	bl	8003474 <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e034      	b.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d028      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fec5 	bl	8002198 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d016      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d1c3      	bne.n	80033f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348a:	d11b      	bne.n	80034c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0e8      	b.n	80036b4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f007 fa54 	bl	800a9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f003 f845 	bl	800659e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351e:	f003 f81b 	bl	8006558 <USB_CoreInit>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0bf      	b.n	80036b4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f003 f849 	bl	80065d2 <USB_SetCurrentMode>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0b0      	b.n	80036b4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
 8003556:	e03e      	b.n	80035d6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	3311      	adds	r3, #17
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	3310      	adds	r3, #16
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	3313      	adds	r3, #19
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	3320      	adds	r3, #32
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	3324      	adds	r3, #36	@ 0x24
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	440b      	add	r3, r1
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3301      	adds	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	791b      	ldrb	r3, [r3, #4]
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3bb      	bcc.n	8003558 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e044      	b.n	8003670 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	3301      	adds	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	791b      	ldrb	r3, [r3, #4]
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	429a      	cmp	r2, r3
 8003678:	d3b5      	bcc.n	80035e6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003684:	f002 ffb1 	bl	80065ea <USB_DevInit>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00c      	b.n	80036b4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f005 fa30 	bl	8008b12 <USB_DevDisconnect>

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_Start+0x16>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e016      	b.n	8003700 <HAL_PCD_Start+0x44>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 ff47 	bl	8006572 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036e4:	2101      	movs	r1, #1
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f007 fbd7 	bl	800ae9a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 fa04 	bl	8008afe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f005 fa06 	bl	8008b26 <USB_ReadInterrupts>
 800371a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fb1a 	bl	8003d60 <PCD_EP_ISR_Handler>

    return;
 800372c:	e119      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f007 f9aa 	bl	800aaaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f905 	bl	8003968 <HAL_PCD_SetAddress>

    return;
 800375e:	e100      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800377c:	b292      	uxth	r2, r2
 800377e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003782:	e0ee      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a0:	b292      	uxth	r2, r2
 80037a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037a6:	e0dc      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d027      	beq.n	8003802 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0204 	bic.w	r2, r2, #4
 80037c4:	b292      	uxth	r2, r2
 80037c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	b292      	uxth	r2, r2
 80037de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f007 f99a 	bl	800ab1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037fa:	b292      	uxth	r2, r2
 80037fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003800:	e0af      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8083 	beq.w	8003914 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e010      	b.n	8003836 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	441a      	add	r2, r3
 8003820:	7ffb      	ldrb	r3, [r7, #31]
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	b292      	uxth	r2, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	3320      	adds	r3, #32
 800382a:	443b      	add	r3, r7
 800382c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003830:	7ffb      	ldrb	r3, [r7, #31]
 8003832:	3301      	adds	r3, #1
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	2b07      	cmp	r3, #7
 800383a:	d9eb      	bls.n	8003814 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	b292      	uxth	r2, r2
 8003850:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	b292      	uxth	r2, r2
 8003868:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800386c:	bf00      	nop
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003876:	b29b      	uxth	r3, r3
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f6      	beq.n	800386e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003892:	b292      	uxth	r2, r2
 8003894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e00f      	b.n	80038be <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4611      	mov	r1, r2
 80038a6:	7ffa      	ldrb	r2, [r7, #31]
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	440a      	add	r2, r1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	3320      	adds	r3, #32
 80038b0:	443b      	add	r3, r7
 80038b2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038b6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80038b8:	7ffb      	ldrb	r3, [r7, #31]
 80038ba:	3301      	adds	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	7ffb      	ldrb	r3, [r7, #31]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d9ec      	bls.n	800389e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	b292      	uxth	r2, r2
 80038d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ee:	b292      	uxth	r2, r2
 80038f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0204 	orr.w	r2, r2, #4
 8003906:	b292      	uxth	r2, r2
 8003908:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f007 f8eb 	bl	800aae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003912:	e026      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00f      	beq.n	800393e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003930:	b292      	uxth	r2, r2
 8003932:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f007 f8a9 	bl	800aa8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800393c:	e011      	b.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800395a:	b292      	uxth	r2, r2
 800395c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003960:	bf00      	nop
  }
}
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PCD_SetAddress+0x1a>
 800397e:	2302      	movs	r3, #2
 8003980:	e012      	b.n	80039a8 <HAL_PCD_SetAddress+0x40>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f005 f89d 	bl	8008ad8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	803b      	strh	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0e      	bge.n	80039f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0207 	and.w	r2, r3, #7
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	3310      	adds	r3, #16
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a1e:	883a      	ldrh	r2, [r7, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	78ba      	ldrb	r2, [r7, #2]
 8003a28:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a2a:	78bb      	ldrb	r3, [r7, #2]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d102      	bne.n	8003a36 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_PCD_EP_Open+0x94>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e00e      	b.n	8003a62 <HAL_PCD_EP_Open+0xb2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fde6 	bl	8006624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003a60:	7afb      	ldrb	r3, [r7, #11]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da0e      	bge.n	8003a9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 0207 	and.w	r2, r3, #7
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	705a      	strb	r2, [r3, #1]
 8003a9a:	e00e      	b.n	8003aba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_PCD_EP_Close+0x6a>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e00e      	b.n	8003af2 <HAL_PCD_EP_Close+0x88>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 f95e 	bl	8006da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	460b      	mov	r3, r1
 8003b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6979      	ldr	r1, [r7, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f003 fb15 	bl	800717c <USB_EPStartXfer>

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	460b      	mov	r3, r1
 8003b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	f003 0207 	and.w	r2, r3, #7
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3310      	adds	r3, #16
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6979      	ldr	r1, [r7, #20]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fac7 	bl	800717c <USB_EPStartXfer>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	7912      	ldrb	r2, [r2, #4]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e04c      	b.n	8003cb0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0e      	bge.n	8003c3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 0207 	and.w	r2, r3, #7
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	3310      	adds	r3, #16
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	705a      	strb	r2, [r3, #1]
 8003c3a:	e00c      	b.n	8003c56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_SetStall+0x7e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e01c      	b.n	8003cb0 <HAL_PCD_EP_SetStall+0xb8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fe2a 	bl	80088de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d108      	bne.n	8003ca6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f004 ff4f 	bl	8008b44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	7912      	ldrb	r2, [r2, #4]
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e040      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0e      	bge.n	8003cfc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 0207 	and.w	r2, r3, #7
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	3310      	adds	r3, #16
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_EP_ClrStall+0x82>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e00e      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa0>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fe18 	bl	800897e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b096      	sub	sp, #88	@ 0x58
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d68:	e3bb      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003d84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8175 	bne.w	8004078 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d14e      	bne.n	8003e38 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	81fb      	strh	r3, [r7, #14]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3302      	adds	r3, #2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	441a      	add	r2, r3
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f006 fe2a 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7b5b      	ldrb	r3, [r3, #13]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8368 	beq.w	80044e2 <PCD_EP_ISR_Handler+0x782>
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 8363 	bne.w	80044e2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7b5b      	ldrb	r3, [r3, #13]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	735a      	strb	r2, [r3, #13]
 8003e36:	e354      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e3e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d034      	beq.n	8003ec0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3306      	adds	r3, #6
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e80:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f004 fea6 	bl	8008be6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	823b      	strh	r3, [r7, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8a3a      	ldrh	r2, [r7, #16]
 8003eb0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f006 fda1 	bl	800aa00 <HAL_PCD_SetupStageCallback>
 8003ebe:	e310      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f280 830c 	bge.w	80044e2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	83fb      	strh	r3, [r7, #30]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	8bfa      	ldrh	r2, [r7, #30]
 8003ee0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	3306      	adds	r3, #6
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f12:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d019      	beq.n	8003f50 <PCD_EP_ISR_Handler+0x1f0>
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	6959      	ldr	r1, [r3, #20]
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f32:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f004 fe56 	bl	8008be6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	441a      	add	r2, r3
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f006 fd6a 	bl	800aa24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 82bd 	bne.w	80044e2 <PCD_EP_ISR_Handler+0x782>
 8003f68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f6c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f74:	f000 82b5 	beq.w	80044e2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fae:	d91d      	bls.n	8003fec <PCD_EP_ISR_Handler+0x28c>
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <PCD_EP_ISR_Handler+0x26a>
 8003fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	e026      	b.n	800403a <PCD_EP_ISR_Handler+0x2da>
 8003fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <PCD_EP_ISR_Handler+0x2aa>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29a      	uxth	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e017      	b.n	800403a <PCD_EP_ISR_Handler+0x2da>
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	647b      	str	r3, [r7, #68]	@ 0x44
 8004012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <PCD_EP_ISR_Handler+0x2c4>
 800401e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004020:	3301      	adds	r3, #1
 8004022:	647b      	str	r3, [r7, #68]	@ 0x44
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29a      	uxth	r2, r3
 800402a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800402c:	b29b      	uxth	r3, r3
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	b29b      	uxth	r3, r3
 8004032:	4313      	orrs	r3, r2
 8004034:	b29a      	uxth	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404a:	827b      	strh	r3, [r7, #18]
 800404c:	8a7b      	ldrh	r3, [r7, #18]
 800404e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004052:	827b      	strh	r3, [r7, #18]
 8004054:	8a7b      	ldrh	r3, [r7, #18]
 8004056:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800405a:	827b      	strh	r3, [r7, #18]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	8a7b      	ldrh	r3, [r7, #18]
 8004062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]
 8004076:	e234      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800408c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004090:	2b00      	cmp	r3, #0
 8004092:	f280 80fc 	bge.w	800428e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80040ac:	4013      	ands	r3, r2
 80040ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80040c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040c8:	b292      	uxth	r2, r2
 80040ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040cc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	7b1b      	ldrb	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d125      	bne.n	8004136 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	3306      	adds	r3, #6
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004112:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004116:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8092 	beq.w	8004244 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004126:	6959      	ldr	r1, [r3, #20]
 8004128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412a:	88da      	ldrh	r2, [r3, #6]
 800412c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004130:	f004 fd59 	bl	8008be6 <USB_ReadPMA>
 8004134:	e086      	b.n	8004244 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d10a      	bne.n	8004154 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800413e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004142:	461a      	mov	r2, r3
 8004144:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9d9 	bl	80044fe <HAL_PCD_EP_DB_Receive>
 800414c:	4603      	mov	r3, r0
 800414e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004152:	e077      	b.n	8004244 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004190:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d024      	beq.n	80041fc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	3302      	adds	r3, #2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80041de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02e      	beq.n	8004244 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	891a      	ldrh	r2, [r3, #8]
 80041f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041f6:	f004 fcf6 	bl	8008be6 <USB_ReadPMA>
 80041fa:	e023      	b.n	8004244 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	3306      	adds	r3, #6
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004224:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004228:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004236:	6959      	ldr	r1, [r3, #20]
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	895a      	ldrh	r2, [r3, #10]
 800423c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004240:	f004 fcd1 	bl	8008be6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800424c:	441a      	add	r2, r3
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800425a:	441a      	add	r2, r3
 800425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <PCD_EP_ISR_Handler+0x514>
 8004268:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800426c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d206      	bcs.n	8004282 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f006 fbd2 	bl	800aa24 <HAL_PCD_DataOutStageCallback>
 8004280:	e005      	b.n	800428e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004288:	4618      	mov	r0, r3
 800428a:	f002 ff77 	bl	800717c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800428e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8123 	beq.w	80044e2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800429c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	3310      	adds	r3, #16
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80042c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80042e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ee:	78db      	ldrb	r3, [r3, #3]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 80a2 	bne.w	800443a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8093 	beq.w	800442c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004306:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800430a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d046      	beq.n	80043a0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d126      	bne.n	8004368 <PCD_EP_ISR_Handler+0x608>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	4413      	add	r3, r2
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	011a      	lsls	r2, r3, #4
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	4413      	add	r3, r2
 800433c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434c:	b29a      	uxth	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800435c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004360:	b29a      	uxth	r2, r3
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	e061      	b.n	800442c <PCD_EP_ISR_Handler+0x6cc>
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d15d      	bne.n	800442c <PCD_EP_ISR_Handler+0x6cc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	4413      	add	r3, r2
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	4413      	add	r3, r2
 8004392:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e045      	b.n	800442c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d126      	bne.n	80043fc <PCD_EP_ISR_Handler+0x69c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c2:	4413      	add	r3, r2
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	011a      	lsls	r2, r3, #4
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	4413      	add	r3, r2
 80043d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	e017      	b.n	800442c <PCD_EP_ISR_Handler+0x6cc>
 80043fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d113      	bne.n	800442c <PCD_EP_ISR_Handler+0x6cc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004412:	4413      	add	r3, r2
 8004414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	011a      	lsls	r2, r3, #4
 800441c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441e:	4413      	add	r3, r2
 8004420:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f006 fb11 	bl	800aa5a <HAL_PCD_DataInStageCallback>
 8004438:	e053      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800443a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800443e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d146      	bne.n	80044d4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	3302      	adds	r3, #2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800447a:	429a      	cmp	r2, r3
 800447c:	d907      	bls.n	800448e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004486:	1ad2      	subs	r2, r2, r3
 8004488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448a:	619a      	str	r2, [r3, #24]
 800448c:	e002      	b.n	8004494 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800449c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f006 fad9 	bl	800aa5a <HAL_PCD_DataInStageCallback>
 80044a8:	e01b      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80044aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044b2:	441a      	add	r2, r3
 80044b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80044b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80044c0:	441a      	add	r2, r3
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fe55 	bl	800717c <USB_EPStartXfer>
 80044d2:	e006      	b.n	80044e2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80044d8:	461a      	mov	r2, r3
 80044da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f91b 	bl	8004718 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b21b      	sxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f6ff ac3b 	blt.w	8003d6a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3758      	adds	r7, #88	@ 0x58
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07e      	beq.n	8004614 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	3302      	adds	r3, #2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	8b7b      	ldrh	r3, [r7, #26]
 8004546:	429a      	cmp	r2, r3
 8004548:	d306      	bcc.n	8004558 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	8b7b      	ldrh	r3, [r7, #26]
 8004550:	1ad2      	subs	r2, r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	e002      	b.n	800455e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d123      	bne.n	80045ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800457c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004580:	833b      	strh	r3, [r7, #24]
 8004582:	8b3b      	ldrh	r3, [r7, #24]
 8004584:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004588:	833b      	strh	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	8b3b      	ldrh	r3, [r7, #24]
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01f      	beq.n	80045f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	82fb      	strh	r3, [r7, #22]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045f8:	8b7b      	ldrh	r3, [r7, #26]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8087 	beq.w	800470e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6959      	ldr	r1, [r3, #20]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	891a      	ldrh	r2, [r3, #8]
 800460c:	8b7b      	ldrh	r3, [r7, #26]
 800460e:	f004 faea 	bl	8008be6 <USB_ReadPMA>
 8004612:	e07c      	b.n	800470e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	3306      	adds	r3, #6
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	8b7b      	ldrh	r3, [r7, #26]
 8004644:	429a      	cmp	r2, r3
 8004646:	d306      	bcc.n	8004656 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	8b7b      	ldrh	r3, [r7, #26]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	619a      	str	r2, [r3, #24]
 8004654:	e002      	b.n	800465c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2200      	movs	r2, #0
 800465a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d123      	bne.n	80046ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	83fb      	strh	r3, [r7, #30]
 8004680:	8bfb      	ldrh	r3, [r7, #30]
 8004682:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004686:	83fb      	strh	r3, [r7, #30]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	8bfb      	ldrh	r3, [r7, #30]
 8004698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800469c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11f      	bne.n	80046f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d0:	83bb      	strh	r3, [r7, #28]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8bbb      	ldrh	r3, [r7, #28]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046f6:	8b7b      	ldrh	r3, [r7, #26]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6959      	ldr	r1, [r3, #20]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	895a      	ldrh	r2, [r3, #10]
 8004708:	8b7b      	ldrh	r3, [r7, #26]
 800470a:	f004 fa6c 	bl	8008be6 <USB_ReadPMA>
    }
  }

  return count;
 800470e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b0a4      	sub	sp, #144	@ 0x90
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 81dd 	beq.w	8004aec <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	3302      	adds	r3, #2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004766:	429a      	cmp	r2, r3
 8004768:	d907      	bls.n	800477a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	619a      	str	r2, [r3, #24]
 8004778:	e002      	b.n	8004780 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 80b9 	bne.w	80048fc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d126      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	4413      	add	r3, r2
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e01a      	b.n	8004816 <HAL_PCD_EP_DB_Transmit+0xfe>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d116      	bne.n	8004816 <HAL_PCD_EP_DB_Transmit+0xfe>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fc:	4413      	add	r3, r2
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	011a      	lsls	r2, r3, #4
 8004806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004808:	4413      	add	r3, r2
 800480a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d126      	bne.n	8004872 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004832:	b29b      	uxth	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	011a      	lsls	r2, r3, #4
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004856:	b29a      	uxth	r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e017      	b.n	80048a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	785b      	ldrb	r3, [r3, #1]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d113      	bne.n	80048a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	4413      	add	r3, r2
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	011a      	lsls	r2, r3, #4
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	4413      	add	r3, r2
 8004896:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2200      	movs	r2, #0
 80048a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f006 f8d6 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 82fc 	beq.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	82fb      	strh	r3, [r7, #22]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	8afb      	ldrh	r3, [r7, #22]
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
 80048fa:	e2da      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d021      	beq.n	800494a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004920:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800493a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800493e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 82ae 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800495e:	441a      	add	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800496c:	441a      	add	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d30b      	bcc.n	8004996 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	621a      	str	r2, [r3, #32]
 8004994:	e017      	b.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800499e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049ae:	e00a      	b.n	80049c6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d165      	bne.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x382>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	4413      	add	r3, r2
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	011a      	lsls	r2, r3, #4
 80049ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a0c:	d91d      	bls.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x332>
 8004a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x310>
 8004a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a24:	3b01      	subs	r3, #1
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	029b      	lsls	r3, r3, #10
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	4313      	orrs	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e044      	b.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_PCD_EP_DB_Transmit+0x350>
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e035      	b.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a7e:	3301      	adds	r3, #1
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	029b      	lsls	r3, r3, #10
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4313      	orrs	r3, r2
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	e01c      	b.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d118      	bne.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	4413      	add	r3, r2
 8004ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	011a      	lsls	r2, r3, #4
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6959      	ldr	r1, [r3, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	891a      	ldrh	r2, [r3, #8]
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f004 f838 	bl	8008b5a <USB_WritePMA>
 8004aea:	e1e2      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	3306      	adds	r3, #6
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d307      	bcc.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b2c:	1ad2      	subs	r2, r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	619a      	str	r2, [r3, #24]
 8004b32:	e002      	b.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f040 80c0 	bne.w	8004cc4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d126      	bne.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x482>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b60:	4413      	add	r3, r2
 8004b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e01a      	b.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d116      	bne.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb6:	4413      	add	r3, r2
 8004bb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bcc:	2200      	movs	r2, #0
 8004bce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d12b      	bne.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf2:	4413      	add	r3, r2
 8004bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	011a      	lsls	r2, r3, #4
 8004bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfe:	4413      	add	r3, r2
 8004c00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e017      	b.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d113      	bne.n	8004c66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c4c:	4413      	add	r3, r2
 8004c4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	011a      	lsls	r2, r3, #4
 8004c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c58:	4413      	add	r3, r2
 8004c5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c62:	2200      	movs	r2, #0
 8004c64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f005 fef4 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f040 811a 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c98:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
 8004cc2:	e0f6      	b.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d121      	bne.n	8004d12 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 80ca 	bne.w	8004eb2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d26:	441a      	add	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d34:	441a      	add	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d30b      	bcc.n	8004d5e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d56:	1ad2      	subs	r2, r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	621a      	str	r2, [r3, #32]
 8004d5c:	e017      	b.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004d66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d76:	e00a      	b.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d165      	bne.n	8004e68 <HAL_PCD_EP_DB_Transmit+0x750>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db0:	4413      	add	r3, r2
 8004db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dda:	d91d      	bls.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x700>
 8004ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004df2:	3b01      	subs	r3, #1
 8004df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	029b      	lsls	r3, r3, #10
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	4313      	orrs	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	e041      	b.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	e032      	b.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_PCD_EP_DB_Transmit+0x738>
 8004e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	e019      	b.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d115      	bne.n	8004e9c <HAL_PCD_EP_DB_Transmit+0x784>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7e:	4413      	add	r3, r2
 8004e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	011a      	lsls	r2, r3, #4
 8004e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6959      	ldr	r1, [r3, #20]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	895a      	ldrh	r2, [r3, #10]
 8004ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f003 fe54 	bl	8008b5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ecc:	82bb      	strh	r3, [r7, #20]
 8004ece:	8abb      	ldrh	r3, [r7, #20]
 8004ed0:	f083 0310 	eor.w	r3, r3, #16
 8004ed4:	82bb      	strh	r3, [r7, #20]
 8004ed6:	8abb      	ldrh	r3, [r7, #20]
 8004ed8:	f083 0320 	eor.w	r3, r3, #32
 8004edc:	82bb      	strh	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8abb      	ldrh	r3, [r7, #20]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3790      	adds	r7, #144	@ 0x90
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	f003 0207 	and.w	r2, r3, #7
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	3310      	adds	r3, #16
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e009      	b.n	8004f56 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f42:	897a      	ldrh	r2, [r7, #10]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f56:	893b      	ldrh	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	80da      	strh	r2, [r3, #6]
 8004f6a:	e00b      	b.n	8004f84 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e272      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8087 	beq.w	80050be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb0:	4b92      	ldr	r3, [pc, #584]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d00c      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d112      	bne.n	8004fee <HAL_RCC_OscConfig+0x5e>
 8004fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd4:	d10b      	bne.n	8004fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd6:	4b89      	ldr	r3, [pc, #548]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d06c      	beq.n	80050bc <HAL_RCC_OscConfig+0x12c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d168      	bne.n	80050bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e24c      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x76>
 8004ff8:	4b80      	ldr	r3, [pc, #512]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e02e      	b.n	8005064 <HAL_RCC_OscConfig+0xd4>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x98>
 800500e:	4b7b      	ldr	r3, [pc, #492]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7a      	ldr	r2, [pc, #488]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b78      	ldr	r3, [pc, #480]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a77      	ldr	r2, [pc, #476]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e01d      	b.n	8005064 <HAL_RCC_OscConfig+0xd4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0xbc>
 8005032:	4b72      	ldr	r3, [pc, #456]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a71      	ldr	r2, [pc, #452]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b6f      	ldr	r3, [pc, #444]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6e      	ldr	r2, [pc, #440]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xd4>
 800504c:	4b6b      	ldr	r3, [pc, #428]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a6a      	ldr	r2, [pc, #424]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	4b68      	ldr	r3, [pc, #416]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a67      	ldr	r2, [pc, #412]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 800505e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fd f894 	bl	8002198 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd f890 	bl	8002198 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e200      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b5d      	ldr	r3, [pc, #372]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0xe4>
 8005092:	e014      	b.n	80050be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd f880 	bl	8002198 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd f87c 	bl	8002198 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1ec      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	4b53      	ldr	r3, [pc, #332]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x10c>
 80050ba:	e000      	b.n	80050be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d063      	beq.n	8005192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ca:	4b4c      	ldr	r3, [pc, #304]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050d6:	4b49      	ldr	r3, [pc, #292]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d11c      	bne.n	800511c <HAL_RCC_OscConfig+0x18c>
 80050e2:	4b46      	ldr	r3, [pc, #280]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d116      	bne.n	800511c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_RCC_OscConfig+0x176>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e1c0      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005106:	4b3d      	ldr	r3, [pc, #244]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4939      	ldr	r1, [pc, #228]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	e03a      	b.n	8005192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d020      	beq.n	8005166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005124:	4b36      	ldr	r3, [pc, #216]	@ (8005200 <HAL_RCC_OscConfig+0x270>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fd f835 	bl	8002198 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005132:	f7fd f831 	bl	8002198 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1a1      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	4b2d      	ldr	r3, [pc, #180]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005150:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4927      	ldr	r1, [pc, #156]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]
 8005164:	e015      	b.n	8005192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005166:	4b26      	ldr	r3, [pc, #152]	@ (8005200 <HAL_RCC_OscConfig+0x270>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fd f814 	bl	8002198 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005174:	f7fd f810 	bl	8002198 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e180      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	4b1d      	ldr	r3, [pc, #116]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03a      	beq.n	8005214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d019      	beq.n	80051da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a6:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ac:	f7fc fff4 	bl	8002198 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fc fff0 	bl	8002198 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e160      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <HAL_RCC_OscConfig+0x26c>)
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f000 faba 	bl	800574c <RCC_Delay>
 80051d8:	e01c      	b.n	8005214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <HAL_RCC_OscConfig+0x274>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e0:	f7fc ffda 	bl	8002198 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e6:	e00f      	b.n	8005208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e8:	f7fc ffd6 	bl	8002198 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d908      	bls.n	8005208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e146      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
 8005200:	42420000 	.word	0x42420000
 8005204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005208:	4b92      	ldr	r3, [pc, #584]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e9      	bne.n	80051e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a6 	beq.w	800536e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005226:	4b8b      	ldr	r3, [pc, #556]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	4b88      	ldr	r3, [pc, #544]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	4a87      	ldr	r2, [pc, #540]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800523c:	61d3      	str	r3, [r2, #28]
 800523e:	4b85      	ldr	r3, [pc, #532]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524a:	2301      	movs	r3, #1
 800524c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524e:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_OscConfig+0x4c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d118      	bne.n	800528c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525a:	4b7f      	ldr	r3, [pc, #508]	@ (8005458 <HAL_RCC_OscConfig+0x4c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7e      	ldr	r2, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x4c8>)
 8005260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005266:	f7fc ff97 	bl	8002198 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800526e:	f7fc ff93 	bl	8002198 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b64      	cmp	r3, #100	@ 0x64
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e103      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005280:	4b75      	ldr	r3, [pc, #468]	@ (8005458 <HAL_RCC_OscConfig+0x4c8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d106      	bne.n	80052a2 <HAL_RCC_OscConfig+0x312>
 8005294:	4b6f      	ldr	r3, [pc, #444]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4a6e      	ldr	r2, [pc, #440]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6213      	str	r3, [r2, #32]
 80052a0:	e02d      	b.n	80052fe <HAL_RCC_OscConfig+0x36e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x334>
 80052aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4a69      	ldr	r2, [pc, #420]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	6213      	str	r3, [r2, #32]
 80052b6:	4b67      	ldr	r3, [pc, #412]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	4a66      	ldr	r2, [pc, #408]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	f023 0304 	bic.w	r3, r3, #4
 80052c0:	6213      	str	r3, [r2, #32]
 80052c2:	e01c      	b.n	80052fe <HAL_RCC_OscConfig+0x36e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b05      	cmp	r3, #5
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCC_OscConfig+0x356>
 80052cc:	4b61      	ldr	r3, [pc, #388]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	4a60      	ldr	r2, [pc, #384]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	f043 0304 	orr.w	r3, r3, #4
 80052d6:	6213      	str	r3, [r2, #32]
 80052d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6213      	str	r3, [r2, #32]
 80052e4:	e00b      	b.n	80052fe <HAL_RCC_OscConfig+0x36e>
 80052e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	6213      	str	r3, [r2, #32]
 80052f2:	4b58      	ldr	r3, [pc, #352]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a57      	ldr	r2, [pc, #348]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d015      	beq.n	8005332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fc ff47 	bl	8002198 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fc ff43 	bl	8002198 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e0b1      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005324:	4b4b      	ldr	r3, [pc, #300]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ee      	beq.n	800530e <HAL_RCC_OscConfig+0x37e>
 8005330:	e014      	b.n	800535c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005332:	f7fc ff31 	bl	8002198 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fc ff2d 	bl	8002198 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e09b      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005350:	4b40      	ldr	r3, [pc, #256]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ee      	bne.n	800533a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4a3b      	ldr	r2, [pc, #236]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8087 	beq.w	8005486 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005378:	4b36      	ldr	r3, [pc, #216]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b08      	cmp	r3, #8
 8005382:	d061      	beq.n	8005448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d146      	bne.n	800541a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538c:	4b33      	ldr	r3, [pc, #204]	@ (800545c <HAL_RCC_OscConfig+0x4cc>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fc ff01 	bl	8002198 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fc fefd 	bl	8002198 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e06d      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ac:	4b29      	ldr	r3, [pc, #164]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c0:	d108      	bne.n	80053d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4921      	ldr	r1, [pc, #132]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a19      	ldr	r1, [r3, #32]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	430b      	orrs	r3, r1
 80053e6:	491b      	ldr	r1, [pc, #108]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <HAL_RCC_OscConfig+0x4cc>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f2:	f7fc fed1 	bl	8002198 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fa:	f7fc fecd 	bl	8002198 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e03d      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800540c:	4b11      	ldr	r3, [pc, #68]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x46a>
 8005418:	e035      	b.n	8005486 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <HAL_RCC_OscConfig+0x4cc>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fc feba 	bl	8002198 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005428:	f7fc feb6 	bl	8002198 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e026      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543a:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_RCC_OscConfig+0x4c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x498>
 8005446:	e01e      	b.n	8005486 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e019      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
 8005454:	40021000 	.word	0x40021000
 8005458:	40007000 	.word	0x40007000
 800545c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005460:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <HAL_RCC_OscConfig+0x500>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	429a      	cmp	r2, r3
 8005472:	d106      	bne.n	8005482 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000

08005494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0d0      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d910      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b67      	ldr	r3, [pc, #412]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 0207 	bic.w	r2, r3, #7
 80054be:	4965      	ldr	r1, [pc, #404]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a58      	ldr	r2, [pc, #352]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a52      	ldr	r2, [pc, #328]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d040      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d115      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005552:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e073      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	4b3d      	ldr	r3, [pc, #244]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e06b      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b39      	ldr	r3, [pc, #228]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4936      	ldr	r1, [pc, #216]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005584:	f7fc fe08 	bl	8002198 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fc fe04 	bl	8002198 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e053      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b4:	4b27      	ldr	r3, [pc, #156]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d210      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 0207 	bic.w	r2, r3, #7
 80055ca:	4922      	ldr	r1, [pc, #136]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 800561e:	4313      	orrs	r3, r2
 8005620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x1c8>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <HAL_RCC_ClockConfig+0x1cc>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_RCC_ClockConfig+0x1d0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fd66 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40022000 	.word	0x40022000
 8005658:	40021000 	.word	0x40021000
 800565c:	0800c8e8 	.word	0x0800c8e8
 8005660:	20000000 	.word	0x20000000
 8005664:	20000004 	.word	0x20000004

08005668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	2300      	movs	r3, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x94>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 030c 	and.w	r3, r3, #12
 800568e:	2b04      	cmp	r3, #4
 8005690:	d002      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0x30>
 8005692:	2b08      	cmp	r3, #8
 8005694:	d003      	beq.n	800569e <HAL_RCC_GetSysClockFreq+0x36>
 8005696:	e027      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005698:	4b19      	ldr	r3, [pc, #100]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x98>)
 800569a:	613b      	str	r3, [r7, #16]
      break;
 800569c:	e027      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	0c9b      	lsrs	r3, r3, #18
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056a8:	5cd3      	ldrb	r3, [r2, r3]
 80056aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056b6:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x94>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	0c5b      	lsrs	r3, r3, #17
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	4a11      	ldr	r2, [pc, #68]	@ (8005708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ca:	fb03 f202 	mul.w	r2, r3, r2
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e004      	b.n	80056e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0c      	ldr	r2, [pc, #48]	@ (800570c <HAL_RCC_GetSysClockFreq+0xa4>)
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	613b      	str	r3, [r7, #16]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ea:	613b      	str	r3, [r7, #16]
      break;
 80056ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ee:	693b      	ldr	r3, [r7, #16]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	007a1200 	.word	0x007a1200
 8005704:	0800dde0 	.word	0x0800dde0
 8005708:	0800ddf0 	.word	0x0800ddf0
 800570c:	003d0900 	.word	0x003d0900

08005710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005714:	4b02      	ldr	r3, [pc, #8]	@ (8005720 <HAL_RCC_GetHCLKFreq+0x10>)
 8005716:	681b      	ldr	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	20000000 	.word	0x20000000

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005728:	f7ff fff2 	bl	8005710 <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	@ (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	0800c8f8 	.word	0x0800c8f8

0800574c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005754:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <RCC_Delay+0x34>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <RCC_Delay+0x38>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005768:	bf00      	nop
  }
  while (Delay --);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f9      	bne.n	8005768 <RCC_Delay+0x1c>
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	20000000 	.word	0x20000000
 8005784:	10624dd3 	.word	0x10624dd3

08005788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d07d      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a8:	4b4f      	ldr	r3, [pc, #316]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10d      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b4:	4b4c      	ldr	r3, [pc, #304]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	4a4b      	ldr	r2, [pc, #300]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057be:	61d3      	str	r3, [r2, #28]
 80057c0:	4b49      	ldr	r3, [pc, #292]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	4b46      	ldr	r3, [pc, #280]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d118      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057dc:	4b43      	ldr	r3, [pc, #268]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a42      	ldr	r2, [pc, #264]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e8:	f7fc fcd6 	bl	8002198 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f0:	f7fc fcd2 	bl	8002198 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	@ 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e06d      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005802:	4b3a      	ldr	r3, [pc, #232]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800580e:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02e      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	429a      	cmp	r2, r3
 800582a:	d027      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800582c:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005836:	4b2e      	ldr	r3, [pc, #184]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800583c:	4b2c      	ldr	r3, [pc, #176]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005842:	4a29      	ldr	r2, [pc, #164]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fc fca1 	bl	8002198 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc fc9d 	bl	8002198 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e036      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0ee      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587c:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4917      	ldr	r1, [pc, #92]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	4313      	orrs	r3, r2
 800588c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d105      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4a13      	ldr	r2, [pc, #76]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800589e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ac:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	490b      	ldr	r1, [pc, #44]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ca:	4b07      	ldr	r3, [pc, #28]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000
 80058ec:	40007000 	.word	0x40007000
 80058f0:	42420440 	.word	0x42420440

080058f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e03a      	b.n	8005982 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_TIM_Base_Start_IT+0x98>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x58>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d009      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x58>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a14      	ldr	r2, [pc, #80]	@ (8005990 <HAL_TIM_Base_Start_IT+0x9c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x58>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <HAL_TIM_Base_Start_IT+0xa0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d111      	bne.n	8005970 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b06      	cmp	r3, #6
 800595c:	d010      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	e007      	b.n	8005980 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800

08005998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e041      	b.n	8005a2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc f840 	bl	8001a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f000 fb34 	bl	8006044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b086      	sub	sp, #24
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e093      	b.n	8005b72 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fb ffb0 	bl	80019c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f000 fada 	bl	8006044 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ad6:	f023 030c 	bic.w	r3, r3, #12
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	4313      	orrs	r3, r2
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	011a      	lsls	r2, r3, #4
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	4313      	orrs	r3, r2
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005b14:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	4313      	orrs	r3, r2
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b8a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b9a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ba2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d110      	bne.n	8005bcc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bb0:	7b7b      	ldrb	r3, [r7, #13]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d001      	beq.n	8005bba <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e069      	b.n	8005c8e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bca:	e031      	b.n	8005c30 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d110      	bne.n	8005bf4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd8:	7b3b      	ldrb	r3, [r7, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e055      	b.n	8005c8e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bf2:	e01d      	b.n	8005c30 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d108      	bne.n	8005c0c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d105      	bne.n	8005c0c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c00:	7b7b      	ldrb	r3, [r7, #13]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d102      	bne.n	8005c0c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c06:	7b3b      	ldrb	r3, [r7, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e03e      	b.n	8005c8e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_Encoder_Start+0xc4>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d008      	beq.n	8005c4e <HAL_TIM_Encoder_Start+0xd4>
 8005c3c:	e00f      	b.n	8005c5e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fbf2 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 8005c4c:	e016      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	2104      	movs	r1, #4
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fbea 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 8005c5c:	e00e      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2201      	movs	r2, #1
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fbe2 	bl	8006430 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	2104      	movs	r1, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fbdb 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 8005c7a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01b      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0202 	mvn.w	r2, #2
 8005cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f994 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005ce6:	e005      	b.n	8005cf4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f987 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f996 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d020      	beq.n	8005d46 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01b      	beq.n	8005d46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0204 	mvn.w	r2, #4
 8005d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f96e 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005d32:	e005      	b.n	8005d40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f961 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f970 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d020      	beq.n	8005d92 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01b      	beq.n	8005d92 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f06f 0208 	mvn.w	r2, #8
 8005d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2204      	movs	r2, #4
 8005d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f948 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005d7e:	e005      	b.n	8005d8c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f93b 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f94a 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d020      	beq.n	8005dde <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01b      	beq.n	8005dde <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0210 	mvn.w	r2, #16
 8005dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2208      	movs	r2, #8
 8005db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f922 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005dca:	e005      	b.n	8005dd8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f915 	bl	8005ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f924 	bl	8006020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00c      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0201 	mvn.w	r2, #1
 8005dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb fadb 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00c      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb90 	bl	8006546 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8f4 	bl	8006032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00c      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0220 	mvn.w	r2, #32
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb63 	bl	8006534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0ae      	b.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	f200 809f 	bhi.w	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005fe5 	.word	0x08005fe5
 8005eb4:	08005fe5 	.word	0x08005fe5
 8005eb8:	08005fe5 	.word	0x08005fe5
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005fe5 	.word	0x08005fe5
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	08005fe5 	.word	0x08005fe5
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005fe5 	.word	0x08005fe5
 8005ed4:	08005fe5 	.word	0x08005fe5
 8005ed8:	08005fe5 	.word	0x08005fe5
 8005edc:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f91a 	bl	8006120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	619a      	str	r2, [r3, #24]
      break;
 8005f1e:	e064      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f960 	bl	80061ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	619a      	str	r2, [r3, #24]
      break;
 8005f60:	e043      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f9a9 	bl	80062c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0204 	bic.w	r2, r2, #4
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
      break;
 8005fa0:	e023      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f9f3 	bl	8006394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a2f      	ldr	r2, [pc, #188]	@ (8006114 <TIM_Base_SetConfig+0xd0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0x30>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0x30>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a2c      	ldr	r2, [pc, #176]	@ (8006118 <TIM_Base_SetConfig+0xd4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0x30>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2b      	ldr	r2, [pc, #172]	@ (800611c <TIM_Base_SetConfig+0xd8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <TIM_Base_SetConfig+0xd0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0x62>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0x62>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1f      	ldr	r2, [pc, #124]	@ (8006118 <TIM_Base_SetConfig+0xd4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0x62>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1e      	ldr	r2, [pc, #120]	@ (800611c <TIM_Base_SetConfig+0xd8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0d      	ldr	r2, [pc, #52]	@ (8006114 <TIM_Base_SetConfig+0xd0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]
  }
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800

08006120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f023 0201 	bic.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f023 0302 	bic.w	r3, r3, #2
 8006168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1c      	ldr	r2, [pc, #112]	@ (80061e8 <TIM_OC1_SetConfig+0xc8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d10c      	bne.n	8006196 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0308 	bic.w	r3, r3, #8
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a13      	ldr	r2, [pc, #76]	@ (80061e8 <TIM_OC1_SetConfig+0xc8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d111      	bne.n	80061c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00

080061ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f023 0210 	bic.w	r2, r3, #16
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0320 	bic.w	r3, r3, #32
 8006236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a1d      	ldr	r2, [pc, #116]	@ (80062bc <TIM_OC2_SetConfig+0xd0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10d      	bne.n	8006268 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a14      	ldr	r2, [pc, #80]	@ (80062bc <TIM_OC2_SetConfig+0xd0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d113      	bne.n	8006298 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	40012c00 	.word	0x40012c00

080062c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1d      	ldr	r2, [pc, #116]	@ (8006390 <TIM_OC3_SetConfig+0xd0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d10d      	bne.n	800633a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <TIM_OC3_SetConfig+0xd0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00

08006394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a0f      	ldr	r2, [pc, #60]	@ (800642c <TIM_OC4_SetConfig+0x98>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d109      	bne.n	8006408 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	019b      	lsls	r3, r3, #6
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00

08006430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2201      	movs	r2, #1
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e046      	b.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064dc:	d009      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a12      	ldr	r2, [pc, #72]	@ (800652c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a10      	ldr	r2, [pc, #64]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10c      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4313      	orrs	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800

08006534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	4638      	mov	r0, r7
 8006562:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006582:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006586:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065a6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80065aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	4013      	ands	r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	4638      	mov	r0, r7
 80065f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006624:	b480      	push	{r7}
 8006626:	b09d      	sub	sp, #116	@ 0x74
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d81f      	bhi.n	8006696 <USB_ActivateEndpoint+0x72>
 8006656:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <USB_ActivateEndpoint+0x38>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	0800666d 	.word	0x0800666d
 8006660:	08006689 	.word	0x08006689
 8006664:	0800669f 	.word	0x0800669f
 8006668:	0800667b 	.word	0x0800667b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800666c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006674:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006678:	e012      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800667a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800667e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006682:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006686:	e00b      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800668c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006690:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006694:	e004      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800669c:	e000      	b.n	80066a0 <USB_ActivateEndpoint+0x7c>
      break;
 800669e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d8:	b29b      	uxth	r3, r3
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	7b1b      	ldrb	r3, [r3, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 8178 	bne.w	8006a00 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8084 	beq.w	8006822 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	4413      	add	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	011a      	lsls	r2, r3, #4
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	b29b      	uxth	r3, r3
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	827b      	strh	r3, [r7, #18]
 800675c:	8a7b      	ldrh	r3, [r7, #18]
 800675e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01b      	beq.n	800679e <USB_ActivateEndpoint+0x17a>
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677c:	823b      	strh	r3, [r7, #16]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	441a      	add	r2, r3
 8006788:	8a3b      	ldrh	r3, [r7, #16]
 800678a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006796:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800679a:	b29b      	uxth	r3, r3
 800679c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d020      	beq.n	80067e8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067bc:	81bb      	strh	r3, [r7, #12]
 80067be:	89bb      	ldrh	r3, [r7, #12]
 80067c0:	f083 0320 	eor.w	r3, r3, #32
 80067c4:	81bb      	strh	r3, [r7, #12]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	89bb      	ldrh	r3, [r7, #12]
 80067d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	8013      	strh	r3, [r2, #0]
 80067e6:	e2d5      	b.n	8006d94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067fe:	81fb      	strh	r3, [r7, #14]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	89fb      	ldrh	r3, [r7, #14]
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
 8006820:	e2b8      	b.n	8006d94 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	633b      	str	r3, [r7, #48]	@ 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800682c:	b29b      	uxth	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	4413      	add	r3, r2
 8006834:	633b      	str	r3, [r7, #48]	@ 0x30
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	4413      	add	r3, r2
 8006840:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006860:	b29b      	uxth	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	4413      	add	r3, r2
 8006868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	011a      	lsls	r2, r3, #4
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	4413      	add	r3, r2
 8006874:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006884:	b29a      	uxth	r2, r3
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006890:	d91d      	bls.n	80068ce <USB_ActivateEndpoint+0x2aa>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <USB_ActivateEndpoint+0x288>
 80068a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068a8:	3b01      	subs	r3, #1
 80068aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	029b      	lsls	r3, r3, #10
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	4313      	orrs	r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	e026      	b.n	800691c <USB_ActivateEndpoint+0x2f8>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <USB_ActivateEndpoint+0x2c8>
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e017      	b.n	800691c <USB_ActivateEndpoint+0x2f8>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	085b      	lsrs	r3, r3, #1
 80068f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <USB_ActivateEndpoint+0x2e2>
 8006900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006902:	3301      	adds	r3, #1
 8006904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29a      	uxth	r2, r3
 800690c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690e:	b29b      	uxth	r3, r3
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	b29b      	uxth	r3, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	b29a      	uxth	r2, r3
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	847b      	strh	r3, [r7, #34]	@ 0x22
 800692a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800692c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01b      	beq.n	800696c <USB_ActivateEndpoint+0x348>
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800694a:	843b      	strh	r3, [r7, #32]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	8c3b      	ldrh	r3, [r7, #32]
 8006958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800695c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006968:	b29b      	uxth	r3, r3
 800696a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d124      	bne.n	80069be <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698a:	83bb      	strh	r3, [r7, #28]
 800698c:	8bbb      	ldrh	r3, [r7, #28]
 800698e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006992:	83bb      	strh	r3, [r7, #28]
 8006994:	8bbb      	ldrh	r3, [r7, #28]
 8006996:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800699a:	83bb      	strh	r3, [r7, #28]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	8bbb      	ldrh	r3, [r7, #28]
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
 80069bc:	e1ea      	b.n	8006d94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d4:	83fb      	strh	r3, [r7, #30]
 80069d6:	8bfb      	ldrh	r3, [r7, #30]
 80069d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069dc:	83fb      	strh	r3, [r7, #30]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8bfb      	ldrh	r3, [r7, #30]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
 80069fe:	e1c9      	b.n	8006d94 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11e      	bne.n	8006a46 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a38:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]
 8006a44:	e01d      	b.n	8006a82 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a92:	4413      	add	r3, r2
 8006a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	011a      	lsls	r2, r3, #4
 8006a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	891b      	ldrh	r3, [r3, #8]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ab4:	801a      	strh	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac6:	4413      	add	r3, r2
 8006ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	011a      	lsls	r2, r3, #4
 8006ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	895b      	ldrh	r3, [r3, #10]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ae8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 8093 	bne.w	8006c1a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006b04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01b      	beq.n	8006b48 <USB_ActivateEndpoint+0x524>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006b56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01b      	beq.n	8006b98 <USB_ActivateEndpoint+0x574>
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bb0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bb6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bbe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	8013      	strh	r3, [r2, #0]
 8006c18:	e0bc      	b.n	8006d94 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01d      	beq.n	8006c72 <USB_ActivateEndpoint+0x64e>
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01d      	beq.n	8006cca <USB_ActivateEndpoint+0x6a6>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	78db      	ldrb	r3, [r3, #3]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d024      	beq.n	8006d1c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006cec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006cf0:	f083 0320 	eor.w	r3, r3, #32
 8006cf4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
 8006d1a:	e01d      	b.n	8006d58 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	441a      	add	r2, r3
 8006d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006d94:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3774      	adds	r7, #116	@ 0x74
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b08d      	sub	sp, #52	@ 0x34
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	7b1b      	ldrb	r3, [r3, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f040 808e 	bne.w	8006ed4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d044      	beq.n	8006e4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	81bb      	strh	r3, [r7, #12]
 8006dce:	89bb      	ldrh	r3, [r7, #12]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01b      	beq.n	8006e10 <USB_DeactivateEndpoint+0x6c>
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dee:	817b      	strh	r3, [r7, #10]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	897b      	ldrh	r3, [r7, #10]
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e26:	813b      	strh	r3, [r7, #8]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	893b      	ldrh	r3, [r7, #8]
 8006e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	8013      	strh	r3, [r2, #0]
 8006e48:	e192      	b.n	8007170 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	827b      	strh	r3, [r7, #18]
 8006e58:	8a7b      	ldrh	r3, [r7, #18]
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01b      	beq.n	8006e9a <USB_DeactivateEndpoint+0xf6>
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e78:	823b      	strh	r3, [r7, #16]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	8a3b      	ldrh	r3, [r7, #16]
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	81fb      	strh	r3, [r7, #14]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	89fb      	ldrh	r3, [r7, #14]
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
 8006ed2:	e14d      	b.n	8007170 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f040 80a5 	bne.w	8007028 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	843b      	strh	r3, [r7, #32]
 8006eec:	8c3b      	ldrh	r3, [r7, #32]
 8006eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01b      	beq.n	8006f2e <USB_DeactivateEndpoint+0x18a>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0c:	83fb      	strh	r3, [r7, #30]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	8bfb      	ldrh	r3, [r7, #30]
 8006f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	83bb      	strh	r3, [r7, #28]
 8006f3c:	8bbb      	ldrh	r3, [r7, #28]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01b      	beq.n	8006f7e <USB_DeactivateEndpoint+0x1da>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f5c:	837b      	strh	r3, [r7, #26]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	441a      	add	r2, r3
 8006f68:	8b7b      	ldrh	r3, [r7, #26]
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f94:	833b      	strh	r3, [r7, #24]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	441a      	add	r2, r3
 8006fa0:	8b3b      	ldrh	r3, [r7, #24]
 8006fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fcc:	82fb      	strh	r3, [r7, #22]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	8afb      	ldrh	r3, [r7, #22]
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007004:	82bb      	strh	r3, [r7, #20]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	8abb      	ldrh	r3, [r7, #20]
 8007012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800701e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007022:	b29b      	uxth	r3, r3
 8007024:	8013      	strh	r3, [r2, #0]
 8007026:	e0a3      	b.n	8007170 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007036:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01b      	beq.n	8007078 <USB_DeactivateEndpoint+0x2d4>
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007056:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800706c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007086:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01b      	beq.n	80070c8 <USB_DeactivateEndpoint+0x324>
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	441a      	add	r2, r3
 80070ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007116:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	441a      	add	r2, r3
 8007122:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800712c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007134:	b29b      	uxth	r3, r3
 8007136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800714a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3734      	adds	r7, #52	@ 0x34
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b0c2      	sub	sp, #264	@ 0x108
 8007180:	af00      	add	r7, sp, #0
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800718a:	6018      	str	r0, [r3, #0]
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	f040 86b7 	bne.w	8007f16 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d908      	bls.n	80071d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80071c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071d4:	e007      	b.n	80071e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	7b1b      	ldrb	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d13a      	bne.n	800726c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6959      	ldr	r1, [r3, #20]
 8007202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	88da      	ldrh	r2, [r3, #6]
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	b29b      	uxth	r3, r3
 8007214:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007218:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f001 fc9c 	bl	8008b5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	011a      	lsls	r2, r3, #4
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	f000 be1f 	b.w	8007eaa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	2b02      	cmp	r3, #2
 800727a:	f040 8462 	bne.w	8007b42 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	f240 83df 	bls.w	8007a5a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800729c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	441a      	add	r2, r3
 80072e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 81c7 	beq.w	80076cc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d177      	bne.n	800744a <USB_EPStartXfer+0x2ce>
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007374:	b29b      	uxth	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	4413      	add	r3, r2
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	011a      	lsls	r2, r3, #4
 800738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738e:	4413      	add	r3, r2
 8007390:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007394:	627b      	str	r3, [r7, #36]	@ 0x24
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ac:	d921      	bls.n	80073f2 <USB_EPStartXfer+0x276>
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <USB_EPStartXfer+0x252>
 80073c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073c8:	3b01      	subs	r3, #1
 80073ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073d8:	b29b      	uxth	r3, r3
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e050      	b.n	8007494 <USB_EPStartXfer+0x318>
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <USB_EPStartXfer+0x294>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007408:	b29a      	uxth	r2, r3
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e041      	b.n	8007494 <USB_EPStartXfer+0x318>
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800741a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <USB_EPStartXfer+0x2b4>
 8007426:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800742a:	3301      	adds	r3, #1
 800742c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b29a      	uxth	r2, r3
 8007436:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29b      	uxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e024      	b.n	8007494 <USB_EPStartXfer+0x318>
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11c      	bne.n	8007494 <USB_EPStartXfer+0x318>
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	4413      	add	r3, r2
 8007470:	633b      	str	r3, [r7, #48]	@ 0x30
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	011a      	lsls	r2, r3, #4
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	4413      	add	r3, r2
 8007484:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800748a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748e:	b29a      	uxth	r2, r3
 8007490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007492:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	895b      	ldrh	r3, [r3, #10]
 80074a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6959      	ldr	r1, [r3, #20]
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	f001 fb49 	bl	8008b5a <USB_WritePMA>
            ep->xfer_buff += len;
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	441a      	add	r2, r3
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d90f      	bls.n	8007522 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	621a      	str	r2, [r3, #32]
 8007520:	e00e      	b.n	8007540 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d177      	bne.n	8007640 <USB_EPStartXfer+0x4c4>
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	4413      	add	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	011a      	lsls	r2, r3, #4
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	4413      	add	r3, r2
 8007586:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007596:	b29a      	uxth	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80075a2:	d921      	bls.n	80075e8 <USB_EPStartXfer+0x46c>
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <USB_EPStartXfer+0x448>
 80075ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075be:	3b01      	subs	r3, #1
 80075c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	029b      	lsls	r3, r3, #10
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e056      	b.n	8007696 <USB_EPStartXfer+0x51a>
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <USB_EPStartXfer+0x48a>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e047      	b.n	8007696 <USB_EPStartXfer+0x51a>
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <USB_EPStartXfer+0x4aa>
 800761c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007620:	3301      	adds	r3, #1
 8007622:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e02a      	b.n	8007696 <USB_EPStartXfer+0x51a>
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d122      	bne.n	8007696 <USB_EPStartXfer+0x51a>
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	623b      	str	r3, [r7, #32]
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	4413      	add	r3, r2
 8007672:	623b      	str	r3, [r7, #32]
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	011a      	lsls	r2, r3, #4
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	4413      	add	r3, r2
 8007686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	b29a      	uxth	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	891b      	ldrh	r3, [r3, #8]
 80076a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6959      	ldr	r1, [r3, #20]
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076c4:	6800      	ldr	r0, [r0, #0]
 80076c6:	f001 fa48 	bl	8008b5a <USB_WritePMA>
 80076ca:	e3ee      	b.n	8007eaa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d177      	bne.n	80077cc <USB_EPStartXfer+0x650>
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076fc:	4413      	add	r3, r2
 80076fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	011a      	lsls	r2, r3, #4
 800770e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007710:	4413      	add	r3, r2
 8007712:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007716:	647b      	str	r3, [r7, #68]	@ 0x44
 8007718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	b29b      	uxth	r3, r3
 800771e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007722:	b29a      	uxth	r2, r3
 8007724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	2b3e      	cmp	r3, #62	@ 0x3e
 800772e:	d921      	bls.n	8007774 <USB_EPStartXfer+0x5f8>
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <USB_EPStartXfer+0x5d4>
 8007746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800774a:	3b01      	subs	r3, #1
 800774c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29a      	uxth	r2, r3
 8007756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800775a:	b29b      	uxth	r3, r3
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	b29b      	uxth	r3, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	b29b      	uxth	r3, r3
 8007764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776c:	b29a      	uxth	r2, r3
 800776e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	e056      	b.n	8007822 <USB_EPStartXfer+0x6a6>
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <USB_EPStartXfer+0x616>
 800777c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29a      	uxth	r2, r3
 800778c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e047      	b.n	8007822 <USB_EPStartXfer+0x6a6>
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <USB_EPStartXfer+0x636>
 80077a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077ac:	3301      	adds	r3, #1
 80077ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077bc:	b29b      	uxth	r3, r3
 80077be:	029b      	lsls	r3, r3, #10
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	e02a      	b.n	8007822 <USB_EPStartXfer+0x6a6>
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d122      	bne.n	8007822 <USB_EPStartXfer+0x6a6>
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077fc:	4413      	add	r3, r2
 80077fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	011a      	lsls	r2, r3, #4
 800780e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007810:	4413      	add	r3, r2
 8007812:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	b29a      	uxth	r2, r3
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	891b      	ldrh	r3, [r3, #8]
 800782e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6959      	ldr	r1, [r3, #20]
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	b29b      	uxth	r3, r3
 8007844:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007848:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800784c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007850:	6800      	ldr	r0, [r0, #0]
 8007852:	f001 f982 	bl	8008b5a <USB_WritePMA>
            ep->xfer_buff += len;
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	441a      	add	r2, r3
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	429a      	cmp	r2, r3
 800788e:	d90f      	bls.n	80078b0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a0:	1ad2      	subs	r2, r2, r3
 80078a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	621a      	str	r2, [r3, #32]
 80078ae:	e00e      	b.n	80078ce <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d177      	bne.n	80079da <USB_EPStartXfer+0x85e>
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007904:	b29b      	uxth	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	4413      	add	r3, r2
 800790c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800790e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	011a      	lsls	r2, r3, #4
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	4413      	add	r3, r2
 8007920:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
 8007926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007930:	b29a      	uxth	r2, r3
 8007932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007934:	801a      	strh	r2, [r3, #0]
 8007936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793a:	2b3e      	cmp	r3, #62	@ 0x3e
 800793c:	d921      	bls.n	8007982 <USB_EPStartXfer+0x806>
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <USB_EPStartXfer+0x7e2>
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007958:	3b01      	subs	r3, #1
 800795a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800795e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29a      	uxth	r2, r3
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007968:	b29b      	uxth	r3, r3
 800796a:	029b      	lsls	r3, r3, #10
 800796c:	b29b      	uxth	r3, r3
 800796e:	4313      	orrs	r3, r2
 8007970:	b29b      	uxth	r3, r3
 8007972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797a:	b29a      	uxth	r2, r3
 800797c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e050      	b.n	8007a24 <USB_EPStartXfer+0x8a8>
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10a      	bne.n	80079a0 <USB_EPStartXfer+0x824>
 800798a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007998:	b29a      	uxth	r2, r3
 800799a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e041      	b.n	8007a24 <USB_EPStartXfer+0x8a8>
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d004      	beq.n	80079c0 <USB_EPStartXfer+0x844>
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ba:	3301      	adds	r3, #1
 80079bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80079c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d6:	801a      	strh	r2, [r3, #0]
 80079d8:	e024      	b.n	8007a24 <USB_EPStartXfer+0x8a8>
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d11c      	bne.n	8007a24 <USB_EPStartXfer+0x8a8>
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fe:	4413      	add	r3, r2
 8007a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	011a      	lsls	r2, r3, #4
 8007a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	895b      	ldrh	r3, [r3, #10]
 8007a30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6959      	ldr	r1, [r3, #20]
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a52:	6800      	ldr	r0, [r0, #0]
 8007a54:	f001 f881 	bl	8008b5a <USB_WritePMA>
 8007a58:	e227      	b.n	8007eaa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a90:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	441a      	add	r2, r3
 8007aae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ae6:	4413      	add	r3, r2
 8007ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	011a      	lsls	r2, r3, #4
 8007af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007afa:	4413      	add	r3, r2
 8007afc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	891b      	ldrh	r3, [r3, #8]
 8007b18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6959      	ldr	r1, [r3, #20]
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	f001 f80d 	bl	8008b5a <USB_WritePMA>
 8007b40:	e1b3      	b.n	8007eaa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b52:	1ad2      	subs	r2, r2, r3
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80c6 	beq.w	8007d14 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d177      	bne.n	8007c94 <USB_EPStartXfer+0xb18>
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bc4:	4413      	add	r3, r2
 8007bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	011a      	lsls	r2, r3, #4
 8007bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bd8:	4413      	add	r3, r2
 8007bda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bde:	667b      	str	r3, [r7, #100]	@ 0x64
 8007be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bf6:	d921      	bls.n	8007c3c <USB_EPStartXfer+0xac0>
 8007bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <USB_EPStartXfer+0xa9c>
 8007c0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c12:	3b01      	subs	r3, #1
 8007c14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e050      	b.n	8007cde <USB_EPStartXfer+0xb62>
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <USB_EPStartXfer+0xade>
 8007c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c56:	801a      	strh	r2, [r3, #0]
 8007c58:	e041      	b.n	8007cde <USB_EPStartXfer+0xb62>
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <USB_EPStartXfer+0xafe>
 8007c70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c74:	3301      	adds	r3, #1
 8007c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	029b      	lsls	r3, r3, #10
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c90:	801a      	strh	r2, [r3, #0]
 8007c92:	e024      	b.n	8007cde <USB_EPStartXfer+0xb62>
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	785b      	ldrb	r3, [r3, #1]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d11c      	bne.n	8007cde <USB_EPStartXfer+0xb62>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cb8:	4413      	add	r3, r2
 8007cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	011a      	lsls	r2, r3, #4
 8007cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ccc:	4413      	add	r3, r2
 8007cce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cdc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	895b      	ldrh	r3, [r3, #10]
 8007cea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6959      	ldr	r1, [r3, #20]
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d0c:	6800      	ldr	r0, [r0, #0]
 8007d0e:	f000 ff24 	bl	8008b5a <USB_WritePMA>
 8007d12:	e0ca      	b.n	8007eaa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d177      	bne.n	8007e14 <USB_EPStartXfer+0xc98>
 8007d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	461a      	mov	r2, r3
 8007d42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d44:	4413      	add	r3, r2
 8007d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	011a      	lsls	r2, r3, #4
 8007d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d74:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d76:	d921      	bls.n	8007dbc <USB_EPStartXfer+0xc40>
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <USB_EPStartXfer+0xc1c>
 8007d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d92:	3b01      	subs	r3, #1
 8007d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	029b      	lsls	r3, r3, #10
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e05c      	b.n	8007e76 <USB_EPStartXfer+0xcfa>
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <USB_EPStartXfer+0xc5e>
 8007dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	e04d      	b.n	8007e76 <USB_EPStartXfer+0xcfa>
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d004      	beq.n	8007dfa <USB_EPStartXfer+0xc7e>
 8007df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007df4:	3301      	adds	r3, #1
 8007df6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	029b      	lsls	r3, r3, #10
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e10:	801a      	strh	r2, [r3, #0]
 8007e12:	e030      	b.n	8007e76 <USB_EPStartXfer+0xcfa>
 8007e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d128      	bne.n	8007e76 <USB_EPStartXfer+0xcfa>
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e48:	4413      	add	r3, r2
 8007e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	011a      	lsls	r2, r3, #4
 8007e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	891b      	ldrh	r3, [r3, #8]
 8007e82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6959      	ldr	r1, [r3, #20]
 8007e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ea0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ea4:	6800      	ldr	r0, [r0, #0]
 8007ea6:	f000 fe58 	bl	8008b5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ed0:	817b      	strh	r3, [r7, #10]
 8007ed2:	897b      	ldrh	r3, [r7, #10]
 8007ed4:	f083 0310 	eor.w	r3, r3, #16
 8007ed8:	817b      	strh	r3, [r7, #10]
 8007eda:	897b      	ldrh	r3, [r7, #10]
 8007edc:	f083 0320 	eor.w	r3, r3, #32
 8007ee0:	817b      	strh	r3, [r7, #10]
 8007ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	897b      	ldrh	r3, [r7, #10]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]
 8007f12:	f000 bcde 	b.w	80088d2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	7b1b      	ldrb	r3, [r3, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f040 80bb 	bne.w	800809e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699a      	ldr	r2, [r3, #24]
 8007f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d917      	bls.n	8007f74 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	619a      	str	r2, [r3, #24]
 8007f72:	e00e      	b.n	8007f92 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	011a      	lsls	r2, r3, #4
 8007fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fce:	4413      	add	r3, r2
 8007fd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007fd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ff2:	d924      	bls.n	800803e <USB_EPStartXfer+0xec2>
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <USB_EPStartXfer+0xe98>
 800800a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800800e:	3b01      	subs	r3, #1
 8008010:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008020:	b29b      	uxth	r3, r3
 8008022:	029b      	lsls	r3, r3, #10
 8008024:	b29b      	uxth	r3, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	b29b      	uxth	r3, r3
 800802a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008032:	b29a      	uxth	r2, r3
 8008034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	f000 bc10 	b.w	800885e <USB_EPStartXfer+0x16e2>
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10c      	bne.n	8008060 <USB_EPStartXfer+0xee4>
 8008046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e3fe      	b.n	800885e <USB_EPStartXfer+0x16e2>
 8008060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008064:	085b      	lsrs	r3, r3, #1
 8008066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800806a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d004      	beq.n	8008080 <USB_EPStartXfer+0xf04>
 8008076:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800807a:	3301      	adds	r3, #1
 800807c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29a      	uxth	r2, r3
 8008088:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800808c:	b29b      	uxth	r3, r3
 800808e:	029b      	lsls	r3, r3, #10
 8008090:	b29b      	uxth	r3, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e3df      	b.n	800885e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800809e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	78db      	ldrb	r3, [r3, #3]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f040 8218 	bne.w	80084e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 809d 	bne.w	80081fc <USB_EPStartXfer+0x1080>
 80080c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080de:	b29b      	uxth	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080e6:	4413      	add	r3, r2
 80080e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	011a      	lsls	r2, r3, #4
 80080fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080fe:	4413      	add	r3, r2
 8008100:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008114:	b29a      	uxth	r2, r3
 8008116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b3e      	cmp	r3, #62	@ 0x3e
 800812a:	d92b      	bls.n	8008184 <USB_EPStartXfer+0x1008>
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800813e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 031f 	and.w	r3, r3, #31
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <USB_EPStartXfer+0xfe0>
 8008152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008156:	3b01      	subs	r3, #1
 8008158:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800815c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29b      	uxth	r3, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	b29b      	uxth	r3, r3
 8008172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817a:	b29a      	uxth	r2, r3
 800817c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008180:	801a      	strh	r2, [r3, #0]
 8008182:	e070      	b.n	8008266 <USB_EPStartXfer+0x10ea>
 8008184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <USB_EPStartXfer+0x1032>
 8008194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081aa:	801a      	strh	r2, [r3, #0]
 80081ac:	e05b      	b.n	8008266 <USB_EPStartXfer+0x10ea>
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <USB_EPStartXfer+0x1062>
 80081d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d8:	3301      	adds	r3, #1
 80081da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	4313      	orrs	r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e034      	b.n	8008266 <USB_EPStartXfer+0x10ea>
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d12c      	bne.n	8008266 <USB_EPStartXfer+0x10ea>
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800821a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008230:	4413      	add	r3, r2
 8008232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	011a      	lsls	r2, r3, #4
 8008244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008248:	4413      	add	r3, r2
 800824a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800824e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	b29a      	uxth	r2, r3
 8008260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 809d 	bne.w	80083c0 <USB_EPStartXfer+0x1244>
 8008286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082aa:	4413      	add	r3, r2
 80082ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	011a      	lsls	r2, r3, #4
 80082be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082c2:	4413      	add	r3, r2
 80082c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80082ee:	d92b      	bls.n	8008348 <USB_EPStartXfer+0x11cc>
 80082f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <USB_EPStartXfer+0x11a4>
 8008316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831a:	3b01      	subs	r3, #1
 800831c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29a      	uxth	r2, r3
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	b29b      	uxth	r3, r3
 800832e:	029b      	lsls	r3, r3, #10
 8008330:	b29b      	uxth	r3, r3
 8008332:	4313      	orrs	r3, r2
 8008334:	b29b      	uxth	r3, r3
 8008336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800833a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800833e:	b29a      	uxth	r2, r3
 8008340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	e069      	b.n	800841c <USB_EPStartXfer+0x12a0>
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10c      	bne.n	8008372 <USB_EPStartXfer+0x11f6>
 8008358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e054      	b.n	800841c <USB_EPStartXfer+0x12a0>
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <USB_EPStartXfer+0x1226>
 8008398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800839c:	3301      	adds	r3, #1
 800839e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	e02d      	b.n	800841c <USB_EPStartXfer+0x12a0>
 80083c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d125      	bne.n	800841c <USB_EPStartXfer+0x12a0>
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083de:	b29b      	uxth	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083e6:	4413      	add	r3, r2
 80083e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083fe:	4413      	add	r3, r2
 8008400:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008404:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	b29a      	uxth	r2, r3
 8008416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800841a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800841c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8218 	beq.w	800885e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800842e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800844e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <USB_EPStartXfer+0x12ea>
 800845a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800845e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008466:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800846a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800846e:	2b00      	cmp	r3, #0
 8008470:	f040 81f5 	bne.w	800885e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008474:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 81ee 	bne.w	800885e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	441a      	add	r2, r3
 80084c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80084ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084da:	b29b      	uxth	r3, r3
 80084dc:	8013      	strh	r3, [r2, #0]
 80084de:	e1be      	b.n	800885e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	78db      	ldrb	r3, [r3, #3]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	f040 81b4 	bne.w	800885a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	429a      	cmp	r2, r3
 800850c:	d917      	bls.n	800853e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800851e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	619a      	str	r2, [r3, #24]
 800853c:	e00e      	b.n	800855c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800853e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2200      	movs	r2, #0
 800855a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800855c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8085 	bne.w	8008678 <USB_EPStartXfer+0x14fc>
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800857c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800858a:	b29b      	uxth	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008592:	4413      	add	r3, r2
 8008594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	011a      	lsls	r2, r3, #4
 80085a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80085aa:	4413      	add	r3, r2
 80085ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80085ce:	d923      	bls.n	8008618 <USB_EPStartXfer+0x149c>
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <USB_EPStartXfer+0x1474>
 80085e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ea:	3b01      	subs	r3, #1
 80085ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	029b      	lsls	r3, r3, #10
 8008600:	b29b      	uxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b29b      	uxth	r3, r3
 8008606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	e060      	b.n	80086da <USB_EPStartXfer+0x155e>
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10c      	bne.n	800863a <USB_EPStartXfer+0x14be>
 8008620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e04f      	b.n	80086da <USB_EPStartXfer+0x155e>
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <USB_EPStartXfer+0x14de>
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008654:	3301      	adds	r3, #1
 8008656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800865a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29a      	uxth	r2, r3
 8008662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008666:	b29b      	uxth	r3, r3
 8008668:	029b      	lsls	r3, r3, #10
 800866a:	b29b      	uxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b29a      	uxth	r2, r3
 8008670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008674:	801a      	strh	r2, [r3, #0]
 8008676:	e030      	b.n	80086da <USB_EPStartXfer+0x155e>
 8008678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d128      	bne.n	80086da <USB_EPStartXfer+0x155e>
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086ac:	4413      	add	r3, r2
 80086ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	011a      	lsls	r2, r3, #4
 80086c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086c4:	4413      	add	r3, r2
 80086c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80086d8:	801a      	strh	r2, [r3, #0]
 80086da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f040 8085 	bne.w	8008804 <USB_EPStartXfer+0x1688>
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008716:	b29b      	uxth	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800871e:	4413      	add	r3, r2
 8008720:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	011a      	lsls	r2, r3, #4
 8008732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008736:	4413      	add	r3, r2
 8008738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800873c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800874c:	b29a      	uxth	r2, r3
 800874e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008758:	2b3e      	cmp	r3, #62	@ 0x3e
 800875a:	d923      	bls.n	80087a4 <USB_EPStartXfer+0x1628>
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	f003 031f 	and.w	r3, r3, #31
 800876e:	2b00      	cmp	r3, #0
 8008770:	d104      	bne.n	800877c <USB_EPStartXfer+0x1600>
 8008772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008776:	3b01      	subs	r3, #1
 8008778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800877c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008788:	b29b      	uxth	r3, r3
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	b29b      	uxth	r3, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879a:	b29a      	uxth	r2, r3
 800879c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087a0:	801a      	strh	r2, [r3, #0]
 80087a2:	e05c      	b.n	800885e <USB_EPStartXfer+0x16e2>
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10c      	bne.n	80087c6 <USB_EPStartXfer+0x164a>
 80087ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087bc:	b29a      	uxth	r2, r3
 80087be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	e04b      	b.n	800885e <USB_EPStartXfer+0x16e2>
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <USB_EPStartXfer+0x166a>
 80087dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087e0:	3301      	adds	r3, #1
 80087e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4313      	orrs	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	e02c      	b.n	800885e <USB_EPStartXfer+0x16e2>
 8008804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d124      	bne.n	800885e <USB_EPStartXfer+0x16e2>
 8008814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008822:	b29b      	uxth	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800882a:	4413      	add	r3, r2
 800882c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	011a      	lsls	r2, r3, #4
 800883e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008842:	4413      	add	r3, r2
 8008844:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	e001      	b.n	800885e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e03a      	b.n	80088d4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800885e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008884:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008888:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800888c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008890:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008894:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008898:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800889c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80088a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	441a      	add	r2, r3
 80088ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d020      	beq.n	8008932 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	89bb      	ldrh	r3, [r7, #12]
 800890a:	f083 0310 	eor.w	r3, r3, #16
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e01f      	b.n	8008972 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008948:	81fb      	strh	r3, [r7, #14]
 800894a:	89fb      	ldrh	r3, [r7, #14]
 800894c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008950:	81fb      	strh	r3, [r7, #14]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	89fb      	ldrh	r3, [r7, #14]
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr

0800897e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	7b1b      	ldrb	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f040 809d 	bne.w	8008acc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d04c      	beq.n	8008a34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	823b      	strh	r3, [r7, #16]
 80089a8:	8a3b      	ldrh	r3, [r7, #16]
 80089aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01b      	beq.n	80089ea <USB_EPClearStall+0x6c>
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089c8:	81fb      	strh	r3, [r7, #14]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	89fb      	ldrh	r3, [r7, #14]
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	78db      	ldrb	r3, [r3, #3]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d06c      	beq.n	8008acc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a08:	81bb      	strh	r3, [r7, #12]
 8008a0a:	89bb      	ldrh	r3, [r7, #12]
 8008a0c:	f083 0320 	eor.w	r3, r3, #32
 8008a10:	81bb      	strh	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	441a      	add	r2, r3
 8008a1c:	89bb      	ldrh	r3, [r7, #12]
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]
 8008a32:	e04b      	b.n	8008acc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	82fb      	strh	r3, [r7, #22]
 8008a42:	8afb      	ldrh	r3, [r7, #22]
 8008a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01b      	beq.n	8008a84 <USB_EPClearStall+0x106>
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a62:	82bb      	strh	r3, [r7, #20]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	441a      	add	r2, r3
 8008a6e:	8abb      	ldrh	r3, [r7, #20]
 8008a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a9a:	827b      	strh	r3, [r7, #18]
 8008a9c:	8a7b      	ldrh	r3, [r7, #18]
 8008a9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008aa2:	827b      	strh	r3, [r7, #18]
 8008aa4:	8a7b      	ldrh	r3, [r7, #18]
 8008aa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008aaa:	827b      	strh	r3, [r7, #18]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	441a      	add	r2, r3
 8008ab6:	8a7b      	ldrh	r3, [r7, #18]
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d103      	bne.n	8008af2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2280      	movs	r2, #128	@ 0x80
 8008aee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr

08008afe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr

08008b26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bc80      	pop	{r7}
 8008b58:	4770      	bx	lr

08008b5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b08b      	sub	sp, #44	@ 0x2c
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	4611      	mov	r1, r2
 8008b66:	461a      	mov	r2, r3
 8008b68:	460b      	mov	r3, r1
 8008b6a:	80fb      	strh	r3, [r7, #6]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b70:	88bb      	ldrh	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	005a      	lsls	r2, r3, #1
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b92:	e01f      	b.n	8008bd4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b21b      	sxth	r3, r3
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	b21a      	sxth	r2, r3
 8008ba6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b21b      	sxth	r3, r3
 8008bae:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	8a7a      	ldrh	r2, [r7, #18]
 8008bb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	3302      	adds	r3, #2
 8008bba:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1dc      	bne.n	8008b94 <USB_WritePMA+0x3a>
  }
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	372c      	adds	r7, #44	@ 0x2c
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b08b      	sub	sp, #44	@ 0x2c
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	80fb      	strh	r3, [r7, #6]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bfc:	88bb      	ldrh	r3, [r7, #4]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c0c:	88fb      	ldrh	r3, [r7, #6]
 8008c0e:	005a      	lsls	r2, r3, #1
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c1e:	e01b      	b.n	8008c58 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	3302      	adds	r3, #2
 8008c50:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c54:	3b01      	subs	r3, #1
 8008c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e0      	bne.n	8008c20 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008c5e:	88bb      	ldrh	r3, [r7, #4]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	701a      	strb	r2, [r3, #0]
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	372c      	adds	r7, #44	@ 0x2c
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d115      	bne.n	8008cc8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	2181      	movs	r1, #129	@ 0x81
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 ffbc 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 ffb2 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008cc6:	e012      	b.n	8008cee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cc8:	2340      	movs	r3, #64	@ 0x40
 8008cca:	2202      	movs	r2, #2
 8008ccc:	2181      	movs	r1, #129	@ 0x81
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 ffa7 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cda:	2340      	movs	r3, #64	@ 0x40
 8008cdc:	2202      	movs	r2, #2
 8008cde:	2101      	movs	r1, #1
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 ff9e 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008cee:	2308      	movs	r3, #8
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	2182      	movs	r1, #130	@ 0x82
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 ff94 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008d04:	f002 f8b4 	bl	800ae70 <USBD_static_malloc>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	e026      	b.n	8008d6e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d26:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	7c1b      	ldrb	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d54:	2101      	movs	r1, #1
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f002 f853 	bl	800ae02 <USBD_LL_PrepareReceive>
 8008d5c:	e007      	b.n	8008d6e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d64:	2340      	movs	r3, #64	@ 0x40
 8008d66:	2101      	movs	r1, #1
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 f84a 	bl	800ae02 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d88:	2181      	movs	r1, #129	@ 0x81
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 ff6f 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d96:	2101      	movs	r1, #1
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 ff68 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008da6:	2182      	movs	r1, #130	@ 0x82
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 ff60 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00e      	beq.n	8008ddc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f002 f85a 	bl	800ae88 <USBD_static_free>
    pdev->pClassData = NULL;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b086      	sub	sp, #24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008df6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d039      	beq.n	8008e84 <USBD_CDC_Setup+0x9e>
 8008e10:	2b20      	cmp	r3, #32
 8008e12:	d17f      	bne.n	8008f14 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	88db      	ldrh	r3, [r3, #6]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d029      	beq.n	8008e70 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	b25b      	sxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da11      	bge.n	8008e4a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	88d2      	ldrh	r2, [r2, #6]
 8008e38:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e3a:	6939      	ldr	r1, [r7, #16]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	88db      	ldrh	r3, [r3, #6]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 fa06 	bl	800a254 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e48:	e06b      	b.n	8008f22 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	785a      	ldrb	r2, [r3, #1]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e60:	6939      	ldr	r1, [r7, #16]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	88db      	ldrh	r3, [r3, #6]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 fa21 	bl	800a2b0 <USBD_CtlPrepareRx>
      break;
 8008e6e:	e058      	b.n	8008f22 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	7850      	ldrb	r0, [r2, #1]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	4798      	blx	r3
      break;
 8008e82:	e04e      	b.n	8008f22 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b0b      	cmp	r3, #11
 8008e8a:	d02e      	beq.n	8008eea <USBD_CDC_Setup+0x104>
 8008e8c:	2b0b      	cmp	r3, #11
 8008e8e:	dc38      	bgt.n	8008f02 <USBD_CDC_Setup+0x11c>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <USBD_CDC_Setup+0xb4>
 8008e94:	2b0a      	cmp	r3, #10
 8008e96:	d014      	beq.n	8008ec2 <USBD_CDC_Setup+0xdc>
 8008e98:	e033      	b.n	8008f02 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d107      	bne.n	8008eb4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f9d1 	bl	800a254 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb2:	e02e      	b.n	8008f12 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 f962 	bl	800a180 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec0:	e027      	b.n	8008f12 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d107      	bne.n	8008edc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ecc:	f107 030f 	add.w	r3, r7, #15
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 f9bd 	bl	800a254 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eda:	e01a      	b.n	8008f12 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 f94e 	bl	800a180 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee4:	2302      	movs	r3, #2
 8008ee6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ee8:	e013      	b.n	8008f12 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d00d      	beq.n	8008f10 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 f942 	bl	800a180 <USBD_CtlError>
            ret = USBD_FAIL;
 8008efc:	2302      	movs	r3, #2
 8008efe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f00:	e006      	b.n	8008f10 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 f93b 	bl	800a180 <USBD_CtlError>
          ret = USBD_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f0e:	e000      	b.n	8008f12 <USBD_CDC_Setup+0x12c>
          break;
 8008f10:	bf00      	nop
      }
      break;
 8008f12:	e006      	b.n	8008f22 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 f932 	bl	800a180 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f20:	bf00      	nop
  }

  return ret;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f3e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f46:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d03a      	beq.n	8008fc8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f52:	78fa      	ldrb	r2, [r7, #3]
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	331c      	adds	r3, #28
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d029      	beq.n	8008fbc <USBD_CDC_DataIn+0x90>
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	331c      	adds	r3, #28
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	78f9      	ldrb	r1, [r7, #3]
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4403      	add	r3, r0
 8008f88:	3320      	adds	r3, #32
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d110      	bne.n	8008fbc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	331c      	adds	r3, #28
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fae:	78f9      	ldrb	r1, [r7, #3]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 ff01 	bl	800adbc <USBD_LL_Transmit>
 8008fba:	e003      	b.n	8008fc4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	e000      	b.n	8008fca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008fc8:	2302      	movs	r3, #2
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 ff2c 	bl	800ae48 <USBD_LL_GetRxDataSize>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009016:	4611      	mov	r1, r2
 8009018:	4798      	blx	r3

    return USBD_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009036:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <USBD_CDC_EP0_RxReady+0x44>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009048:	2bff      	cmp	r3, #255	@ 0xff
 800904a:	d00f      	beq.n	800906c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800905a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009062:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	22ff      	movs	r2, #255	@ 0xff
 8009068:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2243      	movs	r2, #67	@ 0x43
 8009084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009086:	4b03      	ldr	r3, [pc, #12]	@ (8009094 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000094 	.word	0x20000094

08009098 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2243      	movs	r2, #67	@ 0x43
 80090a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090a6:	4b03      	ldr	r3, [pc, #12]	@ (80090b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20000050 	.word	0x20000050

080090b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2243      	movs	r2, #67	@ 0x43
 80090c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090c6:	4b03      	ldr	r3, [pc, #12]	@ (80090d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	200000d8 	.word	0x200000d8

080090d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	220a      	movs	r2, #10
 80090e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090e6:	4b03      	ldr	r3, [pc, #12]	@ (80090f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c

080090f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009102:	2302      	movs	r3, #2
 8009104:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009138:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr

08009156 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009166:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr

0800917c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800918a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d01c      	beq.n	80091d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800919c:	2b00      	cmp	r3, #0
 800919e:	d115      	bne.n	80091cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2181      	movs	r1, #129	@ 0x81
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fdfa 	bl	800adbc <USBD_LL_Transmit>

      return USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e002      	b.n	80091d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091d0:	2302      	movs	r3, #2
  }
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d017      	beq.n	8009224 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7c1b      	ldrb	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009206:	2101      	movs	r1, #1
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fdfa 	bl	800ae02 <USBD_LL_PrepareReceive>
 800920e:	e007      	b.n	8009220 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009216:	2340      	movs	r3, #64	@ 0x40
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fdf1 	bl	800ae02 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e000      	b.n	8009226 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009224:	2302      	movs	r3, #2
  }
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	4613      	mov	r3, r2
 800923a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009242:	2302      	movs	r3, #2
 8009244:	e01a      	b.n	800927c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	79fa      	ldrb	r2, [r7, #7]
 8009272:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f001 fc5f 	bl	800ab38 <USBD_LL_Init>

  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
 80092a4:	e001      	b.n	80092aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092a6:	2302      	movs	r3, #2
 80092a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 fc94 	bl	800abec <USBD_LL_Start>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092ee:	2302      	movs	r3, #2
 80092f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00c      	beq.n	8009316 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	4611      	mov	r1, r2
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	4798      	blx	r3
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	78fa      	ldrb	r2, [r7, #3]
 8009336:	4611      	mov	r1, r2
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3

  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fed8 	bl	800a10e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800936c:	461a      	mov	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800937a:	f003 031f 	and.w	r3, r3, #31
 800937e:	2b02      	cmp	r3, #2
 8009380:	d016      	beq.n	80093b0 <USBD_LL_SetupStage+0x6a>
 8009382:	2b02      	cmp	r3, #2
 8009384:	d81c      	bhi.n	80093c0 <USBD_LL_SetupStage+0x7a>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <USBD_LL_SetupStage+0x4a>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d008      	beq.n	80093a0 <USBD_LL_SetupStage+0x5a>
 800938e:	e017      	b.n	80093c0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9cb 	bl	8009734 <USBD_StdDevReq>
      break;
 800939e:	e01a      	b.n	80093d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa2d 	bl	8009808 <USBD_StdItfReq>
      break;
 80093ae:	e012      	b.n	80093d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fa6d 	bl	8009898 <USBD_StdEPReq>
      break;
 80093be:	e00a      	b.n	80093d6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 fc6c 	bl	800acac <USBD_LL_StallEP>
      break;
 80093d4:	bf00      	nop
  }

  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	460b      	mov	r3, r1
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d14b      	bne.n	800948c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009402:	2b03      	cmp	r3, #3
 8009404:	d134      	bne.n	8009470 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d919      	bls.n	8009446 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	1ad2      	subs	r2, r2, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009428:	429a      	cmp	r2, r3
 800942a:	d203      	bcs.n	8009434 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009430:	b29b      	uxth	r3, r3
 8009432:	e002      	b.n	800943a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009438:	b29b      	uxth	r3, r3
 800943a:	461a      	mov	r2, r3
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 ff54 	bl	800a2ec <USBD_CtlContinueRx>
 8009444:	e038      	b.n	80094b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009458:	2b03      	cmp	r3, #3
 800945a:	d105      	bne.n	8009468 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 ff51 	bl	800a310 <USBD_CtlSendStatus>
 800946e:	e023      	b.n	80094b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009476:	2b05      	cmp	r3, #5
 8009478:	d11e      	bne.n	80094b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f001 fc11 	bl	800acac <USBD_LL_StallEP>
 800948a:	e015      	b.n	80094b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00d      	beq.n	80094b4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d108      	bne.n	80094b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	7afa      	ldrb	r2, [r7, #11]
 80094ac:	4611      	mov	r1, r2
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4798      	blx	r3
 80094b2:	e001      	b.n	80094b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094b4:	2302      	movs	r3, #2
 80094b6:	e000      	b.n	80094ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b086      	sub	sp, #24
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	460b      	mov	r3, r1
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094d0:	7afb      	ldrb	r3, [r7, #11]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d17f      	bne.n	80095d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3314      	adds	r3, #20
 80094da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d15c      	bne.n	80095a0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d915      	bls.n	800951e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	1ad2      	subs	r2, r2, r3
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	b29b      	uxth	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 febe 	bl	800a28c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009510:	2300      	movs	r3, #0
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f001 fc73 	bl	800ae02 <USBD_LL_PrepareReceive>
 800951c:	e04e      	b.n	80095bc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	6912      	ldr	r2, [r2, #16]
 8009526:	fbb3 f1f2 	udiv	r1, r3, r2
 800952a:	fb01 f202 	mul.w	r2, r1, r2
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11c      	bne.n	800956e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800953c:	429a      	cmp	r2, r3
 800953e:	d316      	bcc.n	800956e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800954a:	429a      	cmp	r2, r3
 800954c:	d20f      	bcs.n	800956e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800954e:	2200      	movs	r2, #0
 8009550:	2100      	movs	r1, #0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 fe9a 	bl	800a28c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009560:	2300      	movs	r3, #0
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f001 fc4b 	bl	800ae02 <USBD_LL_PrepareReceive>
 800956c:	e026      	b.n	80095bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009580:	2b03      	cmp	r3, #3
 8009582:	d105      	bne.n	8009590 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009590:	2180      	movs	r1, #128	@ 0x80
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f001 fb8a 	bl	800acac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fecc 	bl	800a336 <USBD_CtlReceiveStatus>
 800959e:	e00d      	b.n	80095bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d004      	beq.n	80095b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095b4:	2180      	movs	r1, #128	@ 0x80
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f001 fb78 	bl	800acac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d11d      	bne.n	8009602 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fe81 	bl	80092ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095d4:	e015      	b.n	8009602 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00d      	beq.n	80095fe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d108      	bne.n	80095fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	7afa      	ldrb	r2, [r7, #11]
 80095f6:	4611      	mov	r1, r2
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	4798      	blx	r3
 80095fc:	e001      	b.n	8009602 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095fe:	2302      	movs	r3, #2
 8009600:	e000      	b.n	8009604 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009614:	2340      	movs	r3, #64	@ 0x40
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fb01 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2240      	movs	r2, #64	@ 0x40
 800962c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009630:	2340      	movs	r3, #64	@ 0x40
 8009632:	2200      	movs	r2, #0
 8009634:	2180      	movs	r1, #128	@ 0x80
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 faf3 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2240      	movs	r2, #64	@ 0x40
 8009646:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6852      	ldr	r2, [r2, #4]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	4611      	mov	r1, r2
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2204      	movs	r2, #4
 80096c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr

080096d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d105      	bne.n	80096f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800970c:	2b03      	cmp	r3, #3
 800970e:	d10b      	bne.n	8009728 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800974a:	2b40      	cmp	r3, #64	@ 0x40
 800974c:	d005      	beq.n	800975a <USBD_StdDevReq+0x26>
 800974e:	2b40      	cmp	r3, #64	@ 0x40
 8009750:	d84f      	bhi.n	80097f2 <USBD_StdDevReq+0xbe>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <USBD_StdDevReq+0x36>
 8009756:	2b20      	cmp	r3, #32
 8009758:	d14b      	bne.n	80097f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	4798      	blx	r3
      break;
 8009768:	e048      	b.n	80097fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b09      	cmp	r3, #9
 8009770:	d839      	bhi.n	80097e6 <USBD_StdDevReq+0xb2>
 8009772:	a201      	add	r2, pc, #4	@ (adr r2, 8009778 <USBD_StdDevReq+0x44>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097c9 	.word	0x080097c9
 800977c:	080097dd 	.word	0x080097dd
 8009780:	080097e7 	.word	0x080097e7
 8009784:	080097d3 	.word	0x080097d3
 8009788:	080097e7 	.word	0x080097e7
 800978c:	080097ab 	.word	0x080097ab
 8009790:	080097a1 	.word	0x080097a1
 8009794:	080097e7 	.word	0x080097e7
 8009798:	080097bf 	.word	0x080097bf
 800979c:	080097b5 	.word	0x080097b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9dc 	bl	8009b60 <USBD_GetDescriptor>
          break;
 80097a8:	e022      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fb3f 	bl	8009e30 <USBD_SetAddress>
          break;
 80097b2:	e01d      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fb7e 	bl	8009eb8 <USBD_SetConfig>
          break;
 80097bc:	e018      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc07 	bl	8009fd4 <USBD_GetConfig>
          break;
 80097c6:	e013      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc37 	bl	800a03e <USBD_GetStatus>
          break;
 80097d0:	e00e      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fc65 	bl	800a0a4 <USBD_SetFeature>
          break;
 80097da:	e009      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc74 	bl	800a0cc <USBD_ClrFeature>
          break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fcc9 	bl	800a180 <USBD_CtlError>
          break;
 80097ee:	bf00      	nop
      }
      break;
 80097f0:	e004      	b.n	80097fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fcc3 	bl	800a180 <USBD_CtlError>
      break;
 80097fa:	bf00      	nop
  }

  return ret;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop

08009808 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800981e:	2b40      	cmp	r3, #64	@ 0x40
 8009820:	d005      	beq.n	800982e <USBD_StdItfReq+0x26>
 8009822:	2b40      	cmp	r3, #64	@ 0x40
 8009824:	d82e      	bhi.n	8009884 <USBD_StdItfReq+0x7c>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <USBD_StdItfReq+0x26>
 800982a:	2b20      	cmp	r3, #32
 800982c:	d12a      	bne.n	8009884 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009834:	3b01      	subs	r3, #1
 8009836:	2b02      	cmp	r3, #2
 8009838:	d81d      	bhi.n	8009876 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	889b      	ldrh	r3, [r3, #4]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b01      	cmp	r3, #1
 8009842:	d813      	bhi.n	800986c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	88db      	ldrh	r3, [r3, #6]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d110      	bne.n	8009880 <USBD_StdItfReq+0x78>
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10d      	bne.n	8009880 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fd53 	bl	800a310 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800986a:	e009      	b.n	8009880 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fc86 	bl	800a180 <USBD_CtlError>
          break;
 8009874:	e004      	b.n	8009880 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fc81 	bl	800a180 <USBD_CtlError>
          break;
 800987e:	e000      	b.n	8009882 <USBD_StdItfReq+0x7a>
          break;
 8009880:	bf00      	nop
      }
      break;
 8009882:	e004      	b.n	800988e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fc7a 	bl	800a180 <USBD_CtlError>
      break;
 800988c:	bf00      	nop
  }

  return USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	889b      	ldrh	r3, [r3, #4]
 80098aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098b4:	2b40      	cmp	r3, #64	@ 0x40
 80098b6:	d007      	beq.n	80098c8 <USBD_StdEPReq+0x30>
 80098b8:	2b40      	cmp	r3, #64	@ 0x40
 80098ba:	f200 8146 	bhi.w	8009b4a <USBD_StdEPReq+0x2b2>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <USBD_StdEPReq+0x40>
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	f040 8141 	bne.w	8009b4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
      break;
 80098d6:	e13d      	b.n	8009b54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d10a      	bne.n	80098fa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	e12d      	b.n	8009b56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d007      	beq.n	8009912 <USBD_StdEPReq+0x7a>
 8009902:	2b03      	cmp	r3, #3
 8009904:	f300 811b 	bgt.w	8009b3e <USBD_StdEPReq+0x2a6>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d072      	beq.n	80099f2 <USBD_StdEPReq+0x15a>
 800990c:	2b01      	cmp	r3, #1
 800990e:	d03a      	beq.n	8009986 <USBD_StdEPReq+0xee>
 8009910:	e115      	b.n	8009b3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009918:	2b02      	cmp	r3, #2
 800991a:	d002      	beq.n	8009922 <USBD_StdEPReq+0x8a>
 800991c:	2b03      	cmp	r3, #3
 800991e:	d015      	beq.n	800994c <USBD_StdEPReq+0xb4>
 8009920:	e02b      	b.n	800997a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00c      	beq.n	8009942 <USBD_StdEPReq+0xaa>
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b80      	cmp	r3, #128	@ 0x80
 800992c:	d009      	beq.n	8009942 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 f9ba 	bl	800acac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009938:	2180      	movs	r1, #128	@ 0x80
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 f9b6 	bl	800acac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009940:	e020      	b.n	8009984 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fc1b 	bl	800a180 <USBD_CtlError>
              break;
 800994a:	e01b      	b.n	8009984 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	885b      	ldrh	r3, [r3, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10e      	bne.n	8009972 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <USBD_StdEPReq+0xda>
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	2b80      	cmp	r3, #128	@ 0x80
 800995e:	d008      	beq.n	8009972 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	88db      	ldrh	r3, [r3, #6]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 f99d 	bl	800acac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fccc 	bl	800a310 <USBD_CtlSendStatus>

              break;
 8009978:	e004      	b.n	8009984 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fbff 	bl	800a180 <USBD_CtlError>
              break;
 8009982:	bf00      	nop
          }
          break;
 8009984:	e0e0      	b.n	8009b48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	2b02      	cmp	r3, #2
 800998e:	d002      	beq.n	8009996 <USBD_StdEPReq+0xfe>
 8009990:	2b03      	cmp	r3, #3
 8009992:	d015      	beq.n	80099c0 <USBD_StdEPReq+0x128>
 8009994:	e026      	b.n	80099e4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00c      	beq.n	80099b6 <USBD_StdEPReq+0x11e>
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	2b80      	cmp	r3, #128	@ 0x80
 80099a0:	d009      	beq.n	80099b6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 f980 	bl	800acac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099ac:	2180      	movs	r1, #128	@ 0x80
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f97c 	bl	800acac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099b4:	e01c      	b.n	80099f0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fbe1 	bl	800a180 <USBD_CtlError>
              break;
 80099be:	e017      	b.n	80099f0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	885b      	ldrh	r3, [r3, #2]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d112      	bne.n	80099ee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 f987 	bl	800acea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fc97 	bl	800a310 <USBD_CtlSendStatus>
              }
              break;
 80099e2:	e004      	b.n	80099ee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fbca 	bl	800a180 <USBD_CtlError>
              break;
 80099ec:	e000      	b.n	80099f0 <USBD_StdEPReq+0x158>
              break;
 80099ee:	bf00      	nop
          }
          break;
 80099f0:	e0aa      	b.n	8009b48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d002      	beq.n	8009a02 <USBD_StdEPReq+0x16a>
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d032      	beq.n	8009a66 <USBD_StdEPReq+0x1ce>
 8009a00:	e097      	b.n	8009b32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <USBD_StdEPReq+0x180>
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b80      	cmp	r3, #128	@ 0x80
 8009a0c:	d004      	beq.n	8009a18 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fbb5 	bl	800a180 <USBD_CtlError>
                break;
 8009a16:	e091      	b.n	8009b3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da0b      	bge.n	8009a38 <USBD_StdEPReq+0x1a0>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	3310      	adds	r3, #16
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4413      	add	r3, r2
 8009a34:	3304      	adds	r3, #4
 8009a36:	e00b      	b.n	8009a50 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	3304      	adds	r3, #4
 8009a50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fbf8 	bl	800a254 <USBD_CtlSendData>
              break;
 8009a64:	e06a      	b.n	8009b3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da11      	bge.n	8009a92 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	f003 020f 	and.w	r2, r3, #15
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	3318      	adds	r3, #24
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d117      	bne.n	8009ab8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fb78 	bl	800a180 <USBD_CtlError>
                  break;
 8009a90:	e054      	b.n	8009b3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	f003 020f 	and.w	r2, r3, #15
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb65 	bl	800a180 <USBD_CtlError>
                  break;
 8009ab6:	e041      	b.n	8009b3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	da0b      	bge.n	8009ad8 <USBD_StdEPReq+0x240>
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	3310      	adds	r3, #16
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	e00b      	b.n	8009af0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <USBD_StdEPReq+0x266>
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	2b80      	cmp	r3, #128	@ 0x80
 8009afc:	d103      	bne.n	8009b06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e00e      	b.n	8009b24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 f90c 	bl	800ad28 <USBD_LL_IsStallEP>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	e002      	b.n	8009b24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2202      	movs	r2, #2
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fb92 	bl	800a254 <USBD_CtlSendData>
              break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb23 	bl	800a180 <USBD_CtlError>
              break;
 8009b3a:	bf00      	nop
          }
          break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb1d 	bl	800a180 <USBD_CtlError>
          break;
 8009b46:	bf00      	nop
      }
      break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fb17 	bl	800a180 <USBD_CtlError>
      break;
 8009b52:	bf00      	nop
  }

  return ret;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	0a1b      	lsrs	r3, r3, #8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	f200 8128 	bhi.w	8009dd6 <USBD_GetDescriptor+0x276>
 8009b86:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <USBD_GetDescriptor+0x2c>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bc1 	.word	0x08009bc1
 8009b94:	08009c01 	.word	0x08009c01
 8009b98:	08009dd7 	.word	0x08009dd7
 8009b9c:	08009dd7 	.word	0x08009dd7
 8009ba0:	08009d77 	.word	0x08009d77
 8009ba4:	08009da3 	.word	0x08009da3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
      break;
 8009bbe:	e112      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7c1b      	ldrb	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10d      	bne.n	8009be4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	f107 0208 	add.w	r2, r7, #8
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
 8009bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	2202      	movs	r2, #2
 8009be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009be2:	e100      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	f107 0208 	add.w	r2, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
      break;
 8009bfe:	e0f2      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	885b      	ldrh	r3, [r3, #2]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	f200 80ac 	bhi.w	8009d64 <USBD_GetDescriptor+0x204>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <USBD_GetDescriptor+0xb4>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cfd 	.word	0x08009cfd
 8009c28:	08009d31 	.word	0x08009d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00b      	beq.n	8009c50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	7c12      	ldrb	r2, [r2, #16]
 8009c44:	f107 0108 	add.w	r1, r7, #8
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4e:	e091      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa94 	bl	800a180 <USBD_CtlError>
            err++;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5e:	e089      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00b      	beq.n	8009c84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7c12      	ldrb	r2, [r2, #16]
 8009c78:	f107 0108 	add.w	r1, r7, #8
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
 8009c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c82:	e077      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa7a 	bl	800a180 <USBD_CtlError>
            err++;
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	72fb      	strb	r3, [r7, #11]
          break;
 8009c92:	e06f      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7c12      	ldrb	r2, [r2, #16]
 8009cac:	f107 0108 	add.w	r1, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb6:	e05d      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa60 	bl	800a180 <USBD_CtlError>
            err++;
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc6:	e055      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00b      	beq.n	8009cec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	7c12      	ldrb	r2, [r2, #16]
 8009ce0:	f107 0108 	add.w	r1, r7, #8
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
 8009ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cea:	e043      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa46 	bl	800a180 <USBD_CtlError>
            err++;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfa:	e03b      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	7c12      	ldrb	r2, [r2, #16]
 8009d14:	f107 0108 	add.w	r1, r7, #8
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
 8009d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1e:	e029      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa2c 	bl	800a180 <USBD_CtlError>
            err++;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2e:	e021      	b.n	8009d74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7c12      	ldrb	r2, [r2, #16]
 8009d48:	f107 0108 	add.w	r1, r7, #8
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	4798      	blx	r3
 8009d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d52:	e00f      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa12 	bl	800a180 <USBD_CtlError>
            err++;
 8009d5c:	7afb      	ldrb	r3, [r7, #11]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	72fb      	strb	r3, [r7, #11]
          break;
 8009d62:	e007      	b.n	8009d74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa0a 	bl	800a180 <USBD_CtlError>
          err++;
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d72:	e038      	b.n	8009de6 <USBD_GetDescriptor+0x286>
 8009d74:	e037      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7c1b      	ldrb	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d86:	f107 0208 	add.w	r2, r7, #8
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d90:	e029      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f9f3 	bl	800a180 <USBD_CtlError>
        err++;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009da0:	e021      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	7c1b      	ldrb	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10d      	bne.n	8009dc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db2:	f107 0208 	add.w	r2, r7, #8
 8009db6:	4610      	mov	r0, r2
 8009db8:	4798      	blx	r3
 8009dba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc4:	e00f      	b.n	8009de6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f9d9 	bl	800a180 <USBD_CtlError>
        err++;
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd4:	e007      	b.n	8009de6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f9d1 	bl	800a180 <USBD_CtlError>
      err++;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	3301      	adds	r3, #1
 8009de2:	72fb      	strb	r3, [r7, #11]
      break;
 8009de4:	bf00      	nop
  }

  if (err != 0U)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11c      	bne.n	8009e26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009dec:	893b      	ldrh	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d011      	beq.n	8009e16 <USBD_GetDescriptor+0x2b6>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	88db      	ldrh	r3, [r3, #6]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00d      	beq.n	8009e16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	88da      	ldrh	r2, [r3, #6]
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bf28      	it	cs
 8009e04:	4613      	movcs	r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa1f 	bl	800a254 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	88db      	ldrh	r3, [r3, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa76 	bl	800a310 <USBD_CtlSendStatus>
 8009e24:	e000      	b.n	8009e28 <USBD_GetDescriptor+0x2c8>
    return;
 8009e26:	bf00      	nop
    }
  }
}
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop

08009e30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	889b      	ldrh	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d130      	bne.n	8009ea4 <USBD_SetAddress+0x74>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d12c      	bne.n	8009ea4 <USBD_SetAddress+0x74>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e50:	d828      	bhi.n	8009ea4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d104      	bne.n	8009e72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f988 	bl	800a180 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e70:	e01d      	b.n	8009eae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7bfa      	ldrb	r2, [r7, #15]
 8009e76:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 ff7d 	bl	800ad7e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa43 	bl	800a310 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e98:	e009      	b.n	8009eae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea2:	e004      	b.n	8009eae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f96a 	bl	800a180 <USBD_CtlError>
  }
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	4b41      	ldr	r3, [pc, #260]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009eca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ecc:	4b40      	ldr	r3, [pc, #256]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d904      	bls.n	8009ede <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f952 	bl	800a180 <USBD_CtlError>
 8009edc:	e075      	b.n	8009fca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d002      	beq.n	8009eee <USBD_SetConfig+0x36>
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d023      	beq.n	8009f34 <USBD_SetConfig+0x7c>
 8009eec:	e062      	b.n	8009fb4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009eee:	4b38      	ldr	r3, [pc, #224]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d01a      	beq.n	8009f2c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ef6:	4b36      	ldr	r3, [pc, #216]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2203      	movs	r2, #3
 8009f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f08:	4b31      	ldr	r3, [pc, #196]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff f9e7 	bl	80092e2 <USBD_SetClassConfig>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d104      	bne.n	8009f24 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f92f 	bl	800a180 <USBD_CtlError>
            return;
 8009f22:	e052      	b.n	8009fca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f9f3 	bl	800a310 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f2a:	e04e      	b.n	8009fca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f9ef 	bl	800a310 <USBD_CtlSendStatus>
        break;
 8009f32:	e04a      	b.n	8009fca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f34:	4b26      	ldr	r3, [pc, #152]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d112      	bne.n	8009f62 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f44:	4b22      	ldr	r3, [pc, #136]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f4e:	4b20      	ldr	r3, [pc, #128]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff f9e3 	bl	8009320 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9d8 	bl	800a310 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f60:	e033      	b.n	8009fca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f62:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d01d      	beq.n	8009fac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff f9d1 	bl	8009320 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f88:	4b11      	ldr	r3, [pc, #68]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff f9a7 	bl	80092e2 <USBD_SetClassConfig>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d104      	bne.n	8009fa4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f8ef 	bl	800a180 <USBD_CtlError>
            return;
 8009fa2:	e012      	b.n	8009fca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f9b3 	bl	800a310 <USBD_CtlSendStatus>
        break;
 8009faa:	e00e      	b.n	8009fca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9af 	bl	800a310 <USBD_CtlSendStatus>
        break;
 8009fb2:	e00a      	b.n	8009fca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f8e2 	bl	800a180 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fbc:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <USBD_SetConfig+0x118>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff f9ac 	bl	8009320 <USBD_ClrClassConfig>
        break;
 8009fc8:	bf00      	nop
    }
  }
}
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000580 	.word	0x20000580

08009fd4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88db      	ldrh	r3, [r3, #6]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d004      	beq.n	8009ff0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f8c9 	bl	800a180 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fee:	e022      	b.n	800a036 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	dc02      	bgt.n	800a000 <USBD_GetConfig+0x2c>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dc03      	bgt.n	800a006 <USBD_GetConfig+0x32>
 8009ffe:	e015      	b.n	800a02c <USBD_GetConfig+0x58>
 800a000:	2b03      	cmp	r3, #3
 800a002:	d00b      	beq.n	800a01c <USBD_GetConfig+0x48>
 800a004:	e012      	b.n	800a02c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3308      	adds	r3, #8
 800a010:	2201      	movs	r2, #1
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f91d 	bl	800a254 <USBD_CtlSendData>
        break;
 800a01a:	e00c      	b.n	800a036 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	2201      	movs	r2, #1
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f915 	bl	800a254 <USBD_CtlSendData>
        break;
 800a02a:	e004      	b.n	800a036 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f8a6 	bl	800a180 <USBD_CtlError>
        break;
 800a034:	bf00      	nop
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a04e:	3b01      	subs	r3, #1
 800a050:	2b02      	cmp	r3, #2
 800a052:	d81e      	bhi.n	800a092 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	88db      	ldrh	r3, [r3, #6]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d004      	beq.n	800a066 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f88e 	bl	800a180 <USBD_CtlError>
        break;
 800a064:	e01a      	b.n	800a09c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a072:	2b00      	cmp	r3, #0
 800a074:	d005      	beq.n	800a082 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	f043 0202 	orr.w	r2, r3, #2
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	330c      	adds	r3, #12
 800a086:	2202      	movs	r2, #2
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f8e2 	bl	800a254 <USBD_CtlSendData>
      break;
 800a090:	e004      	b.n	800a09c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f873 	bl	800a180 <USBD_CtlError>
      break;
 800a09a:	bf00      	nop
  }
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	885b      	ldrh	r3, [r3, #2]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d106      	bne.n	800a0c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f926 	bl	800a310 <USBD_CtlSendStatus>
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d80b      	bhi.n	800a0fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d10c      	bne.n	800a104 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f90c 	bl	800a310 <USBD_CtlSendStatus>
      }
      break;
 800a0f8:	e004      	b.n	800a104 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f83f 	bl	800a180 <USBD_CtlError>
      break;
 800a102:	e000      	b.n	800a106 <USBD_ClrFeature+0x3a>
      break;
 800a104:	bf00      	nop
  }
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781a      	ldrb	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	785a      	ldrb	r2, [r3, #1]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	3302      	adds	r3, #2
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	3303      	adds	r3, #3
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	3304      	adds	r3, #4
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	461a      	mov	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	3305      	adds	r3, #5
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	b29b      	uxth	r3, r3
 800a154:	4413      	add	r3, r2
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	3306      	adds	r3, #6
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	3307      	adds	r3, #7
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4413      	add	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	80da      	strh	r2, [r3, #6]

}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bc80      	pop	{r7}
 800a17e:	4770      	bx	lr

0800a180 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a18a:	2180      	movs	r1, #128	@ 0x80
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fd8d 	bl	800acac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a192:	2100      	movs	r1, #0
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fd89 	bl	800acac <USBD_LL_StallEP>
}
 800a19a:	bf00      	nop
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b086      	sub	sp, #24
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d032      	beq.n	800a21e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f834 	bl	800a226 <USBD_GetLen>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	75fa      	strb	r2, [r7, #23]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	7812      	ldrb	r2, [r2, #0]
 800a1dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	75fa      	strb	r2, [r7, #23]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1ee:	e012      	b.n	800a216 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	60fa      	str	r2, [r7, #12]
 800a1f6:	7dfa      	ldrb	r2, [r7, #23]
 800a1f8:	1c51      	adds	r1, r2, #1
 800a1fa:	75f9      	strb	r1, [r7, #23]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	440a      	add	r2, r1
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	75fa      	strb	r2, [r7, #23]
 800a20c:	461a      	mov	r2, r3
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4413      	add	r3, r2
 800a212:	2200      	movs	r2, #0
 800a214:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e8      	bne.n	800a1f0 <USBD_GetString+0x4e>
    }
  }
}
 800a21e:	bf00      	nop
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a232:	e005      	b.n	800a240 <USBD_GetLen+0x1a>
  {
    len++;
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	3301      	adds	r3, #1
 800a238:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3301      	adds	r3, #1
 800a23e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1f5      	bne.n	800a234 <USBD_GetLen+0xe>
  }

  return len;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	bc80      	pop	{r7}
 800a252:	4770      	bx	lr

0800a254 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2202      	movs	r2, #2
 800a266:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a270:	88fa      	ldrh	r2, [r7, #6]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	2100      	movs	r1, #0
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 fd9d 	bl	800adbc <USBD_LL_Transmit>

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 fd8b 	bl	800adbc <USBD_LL_Transmit>

  return USBD_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	2100      	movs	r1, #0
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f000 fd90 	bl	800ae02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	2100      	movs	r1, #0
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 fd7e 	bl	800ae02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2204      	movs	r2, #4
 800a31c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a320:	2300      	movs	r3, #0
 800a322:	2200      	movs	r2, #0
 800a324:	2100      	movs	r1, #0
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fd48 	bl	800adbc <USBD_LL_Transmit>

  return USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2205      	movs	r2, #5
 800a342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a346:	2300      	movs	r3, #0
 800a348:	2200      	movs	r2, #0
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fd58 	bl	800ae02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a360:	2200      	movs	r2, #0
 800a362:	4912      	ldr	r1, [pc, #72]	@ (800a3ac <MX_USB_DEVICE_Init+0x50>)
 800a364:	4812      	ldr	r0, [pc, #72]	@ (800a3b0 <MX_USB_DEVICE_Init+0x54>)
 800a366:	f7fe ff62 	bl	800922e <USBD_Init>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a370:	f7f7 fa7c 	bl	800186c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a374:	490f      	ldr	r1, [pc, #60]	@ (800a3b4 <MX_USB_DEVICE_Init+0x58>)
 800a376:	480e      	ldr	r0, [pc, #56]	@ (800a3b0 <MX_USB_DEVICE_Init+0x54>)
 800a378:	f7fe ff84 	bl	8009284 <USBD_RegisterClass>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a382:	f7f7 fa73 	bl	800186c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a386:	490c      	ldr	r1, [pc, #48]	@ (800a3b8 <MX_USB_DEVICE_Init+0x5c>)
 800a388:	4809      	ldr	r0, [pc, #36]	@ (800a3b0 <MX_USB_DEVICE_Init+0x54>)
 800a38a:	f7fe feb5 	bl	80090f8 <USBD_CDC_RegisterInterface>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a394:	f7f7 fa6a 	bl	800186c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a398:	4805      	ldr	r0, [pc, #20]	@ (800a3b0 <MX_USB_DEVICE_Init+0x54>)
 800a39a:	f7fe ff8c 	bl	80092b6 <USBD_Start>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3a4:	f7f7 fa62 	bl	800186c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3a8:	bf00      	nop
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	2000012c 	.word	0x2000012c
 800a3b0:	20000584 	.word	0x20000584
 800a3b4:	20000018 	.word	0x20000018
 800a3b8:	2000011c 	.word	0x2000011c

0800a3bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4905      	ldr	r1, [pc, #20]	@ (800a3d8 <CDC_Init_FS+0x1c>)
 800a3c4:	4805      	ldr	r0, [pc, #20]	@ (800a3dc <CDC_Init_FS+0x20>)
 800a3c6:	f7fe fead 	bl	8009124 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3ca:	4905      	ldr	r1, [pc, #20]	@ (800a3e0 <CDC_Init_FS+0x24>)
 800a3cc:	4803      	ldr	r0, [pc, #12]	@ (800a3dc <CDC_Init_FS+0x20>)
 800a3ce:	f7fe fec2 	bl	8009156 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000c48 	.word	0x20000c48
 800a3dc:	20000584 	.word	0x20000584
 800a3e0:	20000848 	.word	0x20000848

0800a3e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
 800a400:	4613      	mov	r3, r2
 800a402:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	2b23      	cmp	r3, #35	@ 0x23
 800a408:	d84a      	bhi.n	800a4a0 <CDC_Control_FS+0xac>
 800a40a:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <CDC_Control_FS+0x1c>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a4a1 	.word	0x0800a4a1
 800a414:	0800a4a1 	.word	0x0800a4a1
 800a418:	0800a4a1 	.word	0x0800a4a1
 800a41c:	0800a4a1 	.word	0x0800a4a1
 800a420:	0800a4a1 	.word	0x0800a4a1
 800a424:	0800a4a1 	.word	0x0800a4a1
 800a428:	0800a4a1 	.word	0x0800a4a1
 800a42c:	0800a4a1 	.word	0x0800a4a1
 800a430:	0800a4a1 	.word	0x0800a4a1
 800a434:	0800a4a1 	.word	0x0800a4a1
 800a438:	0800a4a1 	.word	0x0800a4a1
 800a43c:	0800a4a1 	.word	0x0800a4a1
 800a440:	0800a4a1 	.word	0x0800a4a1
 800a444:	0800a4a1 	.word	0x0800a4a1
 800a448:	0800a4a1 	.word	0x0800a4a1
 800a44c:	0800a4a1 	.word	0x0800a4a1
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a4a1 	.word	0x0800a4a1
 800a458:	0800a4a1 	.word	0x0800a4a1
 800a45c:	0800a4a1 	.word	0x0800a4a1
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4a1 	.word	0x0800a4a1
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a4a1 	.word	0x0800a4a1
 800a470:	0800a4a1 	.word	0x0800a4a1
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	0800a4a1 	.word	0x0800a4a1
 800a47c:	0800a4a1 	.word	0x0800a4a1
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4a1 	.word	0x0800a4a1
 800a488:	0800a4a1 	.word	0x0800a4a1
 800a48c:	0800a4a1 	.word	0x0800a4a1
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4a1 	.word	0x0800a4a1
 800a498:	0800a4a1 	.word	0x0800a4a1
 800a49c:	0800a4a1 	.word	0x0800a4a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4a0:	bf00      	nop
  }

  return (USBD_OK);
 800a4a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop

0800a4b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b09e      	sub	sp, #120	@ 0x78
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static char rx_buffer[64]; // Буфер для сборки команды
		static uint8_t rx_index = 0; // Индекс текуцей позиции
		    // Обработка всех принятых байт
		    for (uint32_t i = 0; i < *Len; i++) {
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4be:	e106      	b.n	800a6ce <CDC_Receive_FS+0x21e>
		        char byte = Buf[i]; // Чтение байта
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c4:	4413      	add	r3, r2
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		        // Если конец строки или буфер переполен - заканчиваем строку
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 800a4cc:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a4d0:	2b0a      	cmp	r3, #10
 800a4d2:	d004      	beq.n	800a4de <CDC_Receive_FS+0x2e>
 800a4d4:	4b87      	ldr	r3, [pc, #540]	@ (800a6f4 <CDC_Receive_FS+0x244>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4da:	f240 80ea 	bls.w	800a6b2 <CDC_Receive_FS+0x202>
		            rx_buffer[rx_index] = '\0';
 800a4de:	4b85      	ldr	r3, [pc, #532]	@ (800a6f4 <CDC_Receive_FS+0x244>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	4b84      	ldr	r3, [pc, #528]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	5499      	strb	r1, [r3, r2]
		            // Обработка команды частоты: F<канал>:<частота>
		                     if (rx_buffer[0] == 'F') {
 800a4ea:	4b83      	ldr	r3, [pc, #524]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b46      	cmp	r3, #70	@ 0x46
 800a4f0:	d17e      	bne.n	800a5f0 <CDC_Receive_FS+0x140>
		                         uint8_t ch = rx_buffer[1] - '0';
 800a4f2:	4b81      	ldr	r3, [pc, #516]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	3b30      	subs	r3, #48	@ 0x30
 800a4f8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a4fc:	4b7e      	ldr	r3, [pc, #504]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a4fe:	789b      	ldrb	r3, [r3, #2]
 800a500:	2b3a      	cmp	r3, #58	@ 0x3a
 800a502:	d170      	bne.n	800a5e6 <CDC_Receive_FS+0x136>
 800a504:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d86c      	bhi.n	800a5e6 <CDC_Receive_FS+0x136>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 800a50c:	487b      	ldr	r0, [pc, #492]	@ (800a6fc <CDC_Receive_FS+0x24c>)
 800a50e:	f000 fcfb 	bl	800af08 <atoi>
 800a512:	4603      	mov	r3, r0
 800a514:	65fb      	str	r3, [r7, #92]	@ 0x5c
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 800a516:	4879      	ldr	r0, [pc, #484]	@ (800a6fc <CDC_Receive_FS+0x24c>)
 800a518:	f000 fcf6 	bl	800af08 <atoi>
 800a51c:	4603      	mov	r3, r0
 800a51e:	65bb      	str	r3, [r7, #88]	@ 0x58
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a522:	2b00      	cmp	r3, #0
 800a524:	d038      	beq.n	800a598 <CDC_Receive_FS+0xe8>
 800a526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a528:	4a75      	ldr	r2, [pc, #468]	@ (800a700 <CDC_Receive_FS+0x250>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d834      	bhi.n	800a598 <CDC_Receive_FS+0xe8>
		                            	 //si5351_enableOutputs(0xFF);
		                            	 extern int freq[3];
		                            	 extern void print_interface_mode0(void);

		                            	 extern void int_to_str(int num, char *str);
		                            	 freq[ch] = set_freq / 1000;
 800a52e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a530:	4a74      	ldr	r2, [pc, #464]	@ (800a704 <CDC_Receive_FS+0x254>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	099a      	lsrs	r2, r3, #6
 800a538:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a53c:	4611      	mov	r1, r2
 800a53e:	4a72      	ldr	r2, [pc, #456]	@ (800a708 <CDC_Receive_FS+0x258>)
 800a540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 800a544:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a548:	4a6f      	ldr	r2, [pc, #444]	@ (800a708 <CDC_Receive_FS+0x258>)
 800a54a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a54e:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800a552:	4613      	mov	r3, r2
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	1a9b      	subs	r3, r3, r2
 800a558:	4a6c      	ldr	r2, [pc, #432]	@ (800a70c <CDC_Receive_FS+0x25c>)
 800a55a:	4413      	add	r3, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	f7f6 fa93 	bl	8000a88 <int_to_str>
		                            	 print_interface_mode0();
 800a562:	f7f6 fb93 	bl	8000c8c <print_interface_mode0>
		                            	 char msg[64];
		                            	 // Формируем и отправляем сообщение с установленной частотой
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 800a566:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a56a:	f107 000c 	add.w	r0, r7, #12
 800a56e:	4a66      	ldr	r2, [pc, #408]	@ (800a708 <CDC_Receive_FS+0x258>)
 800a570:	9200      	str	r2, [sp, #0]
 800a572:	4a67      	ldr	r2, [pc, #412]	@ (800a710 <CDC_Receive_FS+0x260>)
 800a574:	2140      	movs	r1, #64	@ 0x40
 800a576:	f000 fd4f 	bl	800b018 <sniprintf>
		                            	 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a57a:	f107 030c 	add.w	r3, r7, #12
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f5 fde6 	bl	8000150 <strlen>
 800a584:	4603      	mov	r3, r0
 800a586:	b29a      	uxth	r2, r3
 800a588:	f107 030c 	add.w	r3, r7, #12
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f8d4 	bl	800a73c <CDC_Transmit_FS>
		                             if (set_freq > 0 && set_freq < 150000000) {
 800a594:	bf00      	nop
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a596:	e088      	b.n	800a6aa <CDC_Receive_FS+0x1fa>
		                             } else if (freq == 0) {
 800a598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d11e      	bne.n	800a5dc <CDC_Receive_FS+0x12c>
		                            	 // Если частота = 0 - отключение выходного канала
		                                 uint8_t disable_mask = ~(1 << ch);
 800a59e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		                                 //si5351_enableOutputs(disable_mask);
		                                 char msg[32];
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 800a5b0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800a5b4:	f107 000c 	add.w	r0, r7, #12
 800a5b8:	4a56      	ldr	r2, [pc, #344]	@ (800a714 <CDC_Receive_FS+0x264>)
 800a5ba:	2120      	movs	r1, #32
 800a5bc:	f000 fd2c 	bl	800b018 <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7f5 fdc3 	bl	8000150 <strlen>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f107 030c 	add.w	r3, r7, #12
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f8b1 	bl	800a73c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a5da:	e066      	b.n	800a6aa <CDC_Receive_FS+0x1fa>
		                             } else {
		                            	 // Проверка неправильного ввода частоты
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 800a5dc:	2114      	movs	r1, #20
 800a5de:	484e      	ldr	r0, [pc, #312]	@ (800a718 <CDC_Receive_FS+0x268>)
 800a5e0:	f000 f8ac 	bl	800a73c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 800a5e4:	e061      	b.n	800a6aa <CDC_Receive_FS+0x1fa>
		                             }
		                         } else {
		                        	 // Проверка неправильного формата команды
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 800a5e6:	2111      	movs	r1, #17
 800a5e8:	484c      	ldr	r0, [pc, #304]	@ (800a71c <CDC_Receive_FS+0x26c>)
 800a5ea:	f000 f8a7 	bl	800a73c <CDC_Transmit_FS>
 800a5ee:	e05c      	b.n	800a6aa <CDC_Receive_FS+0x1fa>
		                         }
		                     }
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 800a5f0:	2204      	movs	r2, #4
 800a5f2:	494b      	ldr	r1, [pc, #300]	@ (800a720 <CDC_Receive_FS+0x270>)
 800a5f4:	4840      	ldr	r0, [pc, #256]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a5f6:	f000 fd4d 	bl	800b094 <strncmp>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d116      	bne.n	800a62e <CDC_Receive_FS+0x17e>
		                // Команда проверки связи
		                char msg[] = "Normally\r\n";
 800a600:	4a48      	ldr	r2, [pc, #288]	@ (800a724 <CDC_Receive_FS+0x274>)
 800a602:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a606:	ca07      	ldmia	r2, {r0, r1, r2}
 800a608:	c303      	stmia	r3!, {r0, r1}
 800a60a:	801a      	strh	r2, [r3, #0]
 800a60c:	3302      	adds	r3, #2
 800a60e:	0c12      	lsrs	r2, r2, #16
 800a610:	701a      	strb	r2, [r3, #0]
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a612:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a616:	4618      	mov	r0, r3
 800a618:	f7f5 fd9a 	bl	8000150 <strlen>
 800a61c:	4603      	mov	r3, r0
 800a61e:	b29a      	uxth	r2, r3
 800a620:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f000 f888 	bl	800a73c <CDC_Transmit_FS>
 800a62c:	e03d      	b.n	800a6aa <CDC_Receive_FS+0x1fa>
		            }
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 800a62e:	2206      	movs	r2, #6
 800a630:	493d      	ldr	r1, [pc, #244]	@ (800a728 <CDC_Receive_FS+0x278>)
 800a632:	4831      	ldr	r0, [pc, #196]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a634:	f000 fd2e 	bl	800b094 <strncmp>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d135      	bne.n	800a6aa <CDC_Receive_FS+0x1fa>
		                extern int freq[3];  // частоты каналов, кГц
		                char msg[64];
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a644:	e02d      	b.n	800a6a2 <CDC_Receive_FS+0x1f2>
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800a646:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a64a:	4a2f      	ldr	r2, [pc, #188]	@ (800a708 <CDC_Receive_FS+0x258>)
 800a64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a650:	2b00      	cmp	r3, #0
 800a652:	dd01      	ble.n	800a658 <CDC_Receive_FS+0x1a8>
 800a654:	4b35      	ldr	r3, [pc, #212]	@ (800a72c <CDC_Receive_FS+0x27c>)
 800a656:	e000      	b.n	800a65a <CDC_Receive_FS+0x1aa>
 800a658:	4b35      	ldr	r3, [pc, #212]	@ (800a730 <CDC_Receive_FS+0x280>)
 800a65a:	667b      	str	r3, [r7, #100]	@ 0x64
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800a65c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800a660:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a664:	4928      	ldr	r1, [pc, #160]	@ (800a708 <CDC_Receive_FS+0x258>)
 800a666:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a66a:	f107 000c 	add.w	r0, r7, #12
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	4613      	mov	r3, r2
 800a676:	4a2f      	ldr	r2, [pc, #188]	@ (800a734 <CDC_Receive_FS+0x284>)
 800a678:	2140      	movs	r1, #64	@ 0x40
 800a67a:	f000 fccd 	bl	800b018 <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a67e:	f107 030c 	add.w	r3, r7, #12
 800a682:	4618      	mov	r0, r3
 800a684:	f7f5 fd64 	bl	8000150 <strlen>
 800a688:	4603      	mov	r3, r0
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	f107 030c 	add.w	r3, r7, #12
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f852 	bl	800a73c <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a698:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a69c:	3301      	adds	r3, #1
 800a69e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a6a2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d9cd      	bls.n	800a646 <CDC_Receive_FS+0x196>
		                }
		            }
		            rx_index = 0; // Очищаем буфер
 800a6aa:	4b12      	ldr	r3, [pc, #72]	@ (800a6f4 <CDC_Receive_FS+0x244>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	e00a      	b.n	800a6c8 <CDC_Receive_FS+0x218>

		        } else {
		            rx_buffer[rx_index++] = byte;
 800a6b2:	4b10      	ldr	r3, [pc, #64]	@ (800a6f4 <CDC_Receive_FS+0x244>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	b2d1      	uxtb	r1, r2
 800a6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f4 <CDC_Receive_FS+0x244>)
 800a6bc:	7011      	strb	r1, [r2, #0]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a6f8 <CDC_Receive_FS+0x248>)
 800a6c2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a6c6:	5453      	strb	r3, [r2, r1]
		    for (uint32_t i = 0; i < *Len; i++) {
 800a6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	f4ff aef3 	bcc.w	800a4c0 <CDC_Receive_FS+0x10>
		        }
		    }

		    // Запускаем приём следующего пакета
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4816      	ldr	r0, [pc, #88]	@ (800a738 <CDC_Receive_FS+0x288>)
 800a6de:	f7fe fd3a 	bl	8009156 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6e2:	4815      	ldr	r0, [pc, #84]	@ (800a738 <CDC_Receive_FS+0x288>)
 800a6e4:	f7fe fd79 	bl	80091da <USBD_CDC_ReceivePacket>
		    return (USBD_OK);
 800a6e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3770      	adds	r7, #112	@ 0x70
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20001048 	.word	0x20001048
 800a6f8:	2000104c 	.word	0x2000104c
 800a6fc:	2000104f 	.word	0x2000104f
 800a700:	08f0d17f 	.word	0x08f0d17f
 800a704:	10624dd3 	.word	0x10624dd3
 800a708:	20000324 	.word	0x20000324
 800a70c:	20000338 	.word	0x20000338
 800a710:	0800c818 	.word	0x0800c818
 800a714:	0800c830 	.word	0x0800c830
 800a718:	0800c840 	.word	0x0800c840
 800a71c:	0800c854 	.word	0x0800c854
 800a720:	0800c868 	.word	0x0800c868
 800a724:	0800c898 	.word	0x0800c898
 800a728:	0800c874 	.word	0x0800c874
 800a72c:	0800c87c 	.word	0x0800c87c
 800a730:	0800c880 	.word	0x0800c880
 800a734:	0800c884 	.word	0x0800c884
 800a738:	20000584 	.word	0x20000584

0800a73c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <CDC_Transmit_FS+0x48>)
 800a74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a752:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a75e:	2301      	movs	r3, #1
 800a760:	e00b      	b.n	800a77a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a762:	887b      	ldrh	r3, [r7, #2]
 800a764:	461a      	mov	r2, r3
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4806      	ldr	r0, [pc, #24]	@ (800a784 <CDC_Transmit_FS+0x48>)
 800a76a:	f7fe fcdb 	bl	8009124 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a76e:	4805      	ldr	r0, [pc, #20]	@ (800a784 <CDC_Transmit_FS+0x48>)
 800a770:	f7fe fd04 	bl	800917c <USBD_CDC_TransmitPacket>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a778:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000584 	.word	0x20000584

0800a788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	6039      	str	r1, [r7, #0]
 800a792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2212      	movs	r2, #18
 800a798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a79a:	4b03      	ldr	r3, [pc, #12]	@ (800a7a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bc80      	pop	{r7}
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000148 	.word	0x20000148

0800a7ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	2000015c 	.word	0x2000015c

0800a7d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d105      	bne.n	800a7ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	4907      	ldr	r1, [pc, #28]	@ (800a804 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7e6:	4808      	ldr	r0, [pc, #32]	@ (800a808 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7e8:	f7ff fcdb 	bl	800a1a2 <USBD_GetString>
 800a7ec:	e004      	b.n	800a7f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	4904      	ldr	r1, [pc, #16]	@ (800a804 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7f2:	4805      	ldr	r0, [pc, #20]	@ (800a808 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7f4:	f7ff fcd5 	bl	800a1a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f8:	4b02      	ldr	r3, [pc, #8]	@ (800a804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2000108c 	.word	0x2000108c
 800a808:	0800c8a4 	.word	0x0800c8a4

0800a80c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	4904      	ldr	r1, [pc, #16]	@ (800a82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a81c:	4804      	ldr	r0, [pc, #16]	@ (800a830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a81e:	f7ff fcc0 	bl	800a1a2 <USBD_GetString>
  return USBD_StrDesc;
 800a822:	4b02      	ldr	r3, [pc, #8]	@ (800a82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	2000108c 	.word	0x2000108c
 800a830:	0800c8b8 	.word	0x0800c8b8

0800a834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	221a      	movs	r2, #26
 800a844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a846:	f000 f843 	bl	800a8d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a84a:	4b02      	ldr	r3, [pc, #8]	@ (800a854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000160 	.word	0x20000160

0800a858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a864:	79fb      	ldrb	r3, [r7, #7]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d105      	bne.n	800a876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4907      	ldr	r1, [pc, #28]	@ (800a88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a86e:	4808      	ldr	r0, [pc, #32]	@ (800a890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a870:	f7ff fc97 	bl	800a1a2 <USBD_GetString>
 800a874:	e004      	b.n	800a880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4904      	ldr	r1, [pc, #16]	@ (800a88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a87a:	4805      	ldr	r0, [pc, #20]	@ (800a890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a87c:	f7ff fc91 	bl	800a1a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a880:	4b02      	ldr	r3, [pc, #8]	@ (800a88c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000108c 	.word	0x2000108c
 800a890:	0800c8cc 	.word	0x0800c8cc

0800a894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	6039      	str	r1, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d105      	bne.n	800a8b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4907      	ldr	r1, [pc, #28]	@ (800a8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8aa:	4808      	ldr	r0, [pc, #32]	@ (800a8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8ac:	f7ff fc79 	bl	800a1a2 <USBD_GetString>
 800a8b0:	e004      	b.n	800a8bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	4904      	ldr	r1, [pc, #16]	@ (800a8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8b6:	4805      	ldr	r0, [pc, #20]	@ (800a8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8b8:	f7ff fc73 	bl	800a1a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8bc:	4b02      	ldr	r3, [pc, #8]	@ (800a8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000108c 	.word	0x2000108c
 800a8cc:	0800c8d8 	.word	0x0800c8d8

0800a8d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <Get_SerialNum+0x44>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <Get_SerialNum+0x48>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a91c <Get_SerialNum+0x4c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8f6:	2208      	movs	r2, #8
 800a8f8:	4909      	ldr	r1, [pc, #36]	@ (800a920 <Get_SerialNum+0x50>)
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 f814 	bl	800a928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a900:	2204      	movs	r2, #4
 800a902:	4908      	ldr	r1, [pc, #32]	@ (800a924 <Get_SerialNum+0x54>)
 800a904:	68b8      	ldr	r0, [r7, #8]
 800a906:	f000 f80f 	bl	800a928 <IntToUnicode>
  }
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	1ffff7e8 	.word	0x1ffff7e8
 800a918:	1ffff7ec 	.word	0x1ffff7ec
 800a91c:	1ffff7f0 	.word	0x1ffff7f0
 800a920:	20000162 	.word	0x20000162
 800a924:	20000172 	.word	0x20000172

0800a928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]
 800a93e:	e027      	b.n	800a990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0f1b      	lsrs	r3, r3, #28
 800a944:	2b09      	cmp	r3, #9
 800a946:	d80b      	bhi.n	800a960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	0f1b      	lsrs	r3, r3, #28
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4619      	mov	r1, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	440b      	add	r3, r1
 800a958:	3230      	adds	r2, #48	@ 0x30
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e00a      	b.n	800a976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	0f1b      	lsrs	r3, r3, #28
 800a964:	b2da      	uxtb	r2, r3
 800a966:	7dfb      	ldrb	r3, [r7, #23]
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	4619      	mov	r1, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	440b      	add	r3, r1
 800a970:	3237      	adds	r2, #55	@ 0x37
 800a972:	b2d2      	uxtb	r2, r2
 800a974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	011b      	lsls	r3, r3, #4
 800a97a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	3301      	adds	r3, #1
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	4413      	add	r3, r2
 800a986:	2200      	movs	r2, #0
 800a988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	3301      	adds	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]
 800a990:	7dfa      	ldrb	r2, [r7, #23]
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	429a      	cmp	r2, r3
 800a996:	d3d3      	bcc.n	800a940 <IntToUnicode+0x18>
  }
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	371c      	adds	r7, #28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bc80      	pop	{r7}
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a11      	ldr	r2, [pc, #68]	@ (800a9f8 <HAL_PCD_MspInit+0x54>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d11b      	bne.n	800a9ee <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9b6:	4b11      	ldr	r3, [pc, #68]	@ (800a9fc <HAL_PCD_MspInit+0x58>)
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	4a10      	ldr	r2, [pc, #64]	@ (800a9fc <HAL_PCD_MspInit+0x58>)
 800a9bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9c0:	61d3      	str	r3, [r2, #28]
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <HAL_PCD_MspInit+0x58>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	2013      	movs	r0, #19
 800a9d4:	f7f7 fce5 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800a9d8:	2013      	movs	r0, #19
 800a9da:	f7f7 fcfe 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	2014      	movs	r0, #20
 800a9e4:	f7f7 fcdd 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9e8:	2014      	movs	r0, #20
 800a9ea:	f7f7 fcf6 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40005c00 	.word	0x40005c00
 800a9fc:	40021000 	.word	0x40021000

0800aa00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f7fe fc95 	bl	8009346 <USBD_LL_SetupStage>
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	440b      	add	r3, r1
 800aa44:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7fe fcc7 	bl	80093e0 <USBD_LL_DataOutStage>
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aa6c:	78fa      	ldrb	r2, [r7, #3]
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4613      	mov	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	440b      	add	r3, r1
 800aa7a:	3324      	adds	r3, #36	@ 0x24
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	78fb      	ldrb	r3, [r7, #3]
 800aa80:	4619      	mov	r1, r3
 800aa82:	f7fe fd1e 	bl	80094c2 <USBD_LL_DataInStage>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe fe2e 	bl	80096fe <USBD_LL_SOF>
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	799b      	ldrb	r3, [r3, #6]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d001      	beq.n	800aac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aabe:	f7f6 fed5 	bl	800186c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aac8:	7bfa      	ldrb	r2, [r7, #15]
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fdde 	bl	800968e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fd97 	bl	800960c <USBD_LL_Reset>
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe fdd8 	bl	80096ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7a9b      	ldrb	r3, [r3, #10]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab04:	4b04      	ldr	r3, [pc, #16]	@ (800ab18 <HAL_PCD_SuspendCallback+0x30>)
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	4a03      	ldr	r2, [pc, #12]	@ (800ab18 <HAL_PCD_SuspendCallback+0x30>)
 800ab0a:	f043 0306 	orr.w	r3, r3, #6
 800ab0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	e000ed00 	.word	0xe000ed00

0800ab1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fdd2 	bl	80096d4 <USBD_LL_Resume>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab40:	4a28      	ldr	r2, [pc, #160]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a26      	ldr	r2, [pc, #152]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab4c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab50:	4b24      	ldr	r3, [pc, #144]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab52:	4a25      	ldr	r2, [pc, #148]	@ (800abe8 <USBD_LL_Init+0xb0>)
 800ab54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab56:	4b23      	ldr	r3, [pc, #140]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab58:	2208      	movs	r2, #8
 800ab5a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab5c:	4b21      	ldr	r3, [pc, #132]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab5e:	2202      	movs	r2, #2
 800ab60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab62:	4b20      	ldr	r3, [pc, #128]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab68:	4b1e      	ldr	r3, [pc, #120]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab6e:	4b1d      	ldr	r3, [pc, #116]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab74:	481b      	ldr	r0, [pc, #108]	@ (800abe4 <USBD_LL_Init+0xac>)
 800ab76:	f7f8 fcab 	bl	80034d0 <HAL_PCD_Init>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab80:	f7f6 fe74 	bl	800186c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab8a:	2318      	movs	r3, #24
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2100      	movs	r1, #0
 800ab90:	f7fa f9bc 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab9a:	2358      	movs	r3, #88	@ 0x58
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2180      	movs	r1, #128	@ 0x80
 800aba0:	f7fa f9b4 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abaa:	23c0      	movs	r3, #192	@ 0xc0
 800abac:	2200      	movs	r2, #0
 800abae:	2181      	movs	r1, #129	@ 0x81
 800abb0:	f7fa f9ac 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800abbe:	2200      	movs	r2, #0
 800abc0:	2101      	movs	r1, #1
 800abc2:	f7fa f9a3 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abd0:	2200      	movs	r2, #0
 800abd2:	2182      	movs	r1, #130	@ 0x82
 800abd4:	f7fa f99a 	bl	8004f0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	2000128c 	.word	0x2000128c
 800abe8:	40005c00 	.word	0x40005c00

0800abec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f8 fd5a 	bl	80036bc <HAL_PCD_Start>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f94e 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4603      	mov	r3, r0
 800ac32:	70fb      	strb	r3, [r7, #3]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70bb      	strb	r3, [r7, #2]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac4a:	78bb      	ldrb	r3, [r7, #2]
 800ac4c:	883a      	ldrh	r2, [r7, #0]
 800ac4e:	78f9      	ldrb	r1, [r7, #3]
 800ac50:	f7f8 feae 	bl	80039b0 <HAL_PCD_EP_Open>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f928 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f8 feec 	bl	8003a6a <HAL_PCD_EP_Close>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f909 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	4611      	mov	r1, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7f8 ff94 	bl	8003bf8 <HAL_PCD_EP_SetStall>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f8ea 	bl	800aeb0 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f8 ffd5 	bl	8003cb8 <HAL_PCD_EP_ClrStall>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f8cb 	bl	800aeb0 <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	da0b      	bge.n	800ad5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	440b      	add	r3, r1
 800ad56:	3312      	adds	r3, #18
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	e00b      	b.n	800ad74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	440b      	add	r3, r1
 800ad6e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ad72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bc80      	pop	{r7}
 800ad7c:	4770      	bx	lr

0800ad7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad98:	78fa      	ldrb	r2, [r7, #3]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f8 fde3 	bl	8003968 <HAL_PCD_SetAddress>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f881 	bl	800aeb0 <USBD_Get_USB_Status>
 800adae:	4603      	mov	r3, r0
 800adb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	461a      	mov	r2, r3
 800adc8:	460b      	mov	r3, r1
 800adca:	72fb      	strb	r3, [r7, #11]
 800adcc:	4613      	mov	r3, r2
 800adce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	7af9      	ldrb	r1, [r7, #11]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	f7f8 fed1 	bl	8003b8a <HAL_PCD_EP_Transmit>
 800ade8:	4603      	mov	r3, r0
 800adea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f85e 	bl	800aeb0 <USBD_Get_USB_Status>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b086      	sub	sp, #24
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	460b      	mov	r3, r1
 800ae10:	72fb      	strb	r3, [r7, #11]
 800ae12:	4613      	mov	r3, r2
 800ae14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae24:	893b      	ldrh	r3, [r7, #8]
 800ae26:	7af9      	ldrb	r1, [r7, #11]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	f7f8 fe66 	bl	8003afa <HAL_PCD_EP_Receive>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f83b 	bl	800aeb0 <USBD_Get_USB_Status>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f8 fe7c 	bl	8003b5c <HAL_PCD_EP_GetRxCount>
 800ae64:	4603      	mov	r3, r0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae78:	4b02      	ldr	r3, [pc, #8]	@ (800ae84 <USBD_static_malloc+0x14>)
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr
 800ae84:	20001564 	.word	0x20001564

0800ae88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bc80      	pop	{r7}
 800ae98:	4770      	bx	lr

0800ae9a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	460b      	mov	r3, r1
 800aea4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr

0800aeb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d817      	bhi.n	800aef4 <USBD_Get_USB_Status+0x44>
 800aec4:	a201      	add	r2, pc, #4	@ (adr r2, 800aecc <USBD_Get_USB_Status+0x1c>)
 800aec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeca:	bf00      	nop
 800aecc:	0800aedd 	.word	0x0800aedd
 800aed0:	0800aee3 	.word	0x0800aee3
 800aed4:	0800aee9 	.word	0x0800aee9
 800aed8:	0800aeef 	.word	0x0800aeef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
    break;
 800aee0:	e00b      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aee2:	2302      	movs	r3, #2
 800aee4:	73fb      	strb	r3, [r7, #15]
    break;
 800aee6:	e008      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
    break;
 800aeec:	e005      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeee:	2302      	movs	r3, #2
 800aef0:	73fb      	strb	r3, [r7, #15]
    break;
 800aef2:	e002      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aef4:	2302      	movs	r3, #2
 800aef6:	73fb      	strb	r3, [r7, #15]
    break;
 800aef8:	bf00      	nop
  }
  return usb_status;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop

0800af08 <atoi>:
 800af08:	220a      	movs	r2, #10
 800af0a:	2100      	movs	r1, #0
 800af0c:	f000 b87a 	b.w	800b004 <strtol>

0800af10 <_strtol_l.isra.0>:
 800af10:	2b24      	cmp	r3, #36	@ 0x24
 800af12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af16:	4686      	mov	lr, r0
 800af18:	4690      	mov	r8, r2
 800af1a:	d801      	bhi.n	800af20 <_strtol_l.isra.0+0x10>
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d106      	bne.n	800af2e <_strtol_l.isra.0+0x1e>
 800af20:	f000 f8ca 	bl	800b0b8 <__errno>
 800af24:	2316      	movs	r3, #22
 800af26:	6003      	str	r3, [r0, #0]
 800af28:	2000      	movs	r0, #0
 800af2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2e:	460d      	mov	r5, r1
 800af30:	4833      	ldr	r0, [pc, #204]	@ (800b000 <_strtol_l.isra.0+0xf0>)
 800af32:	462a      	mov	r2, r5
 800af34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af38:	5d06      	ldrb	r6, [r0, r4]
 800af3a:	f016 0608 	ands.w	r6, r6, #8
 800af3e:	d1f8      	bne.n	800af32 <_strtol_l.isra.0+0x22>
 800af40:	2c2d      	cmp	r4, #45	@ 0x2d
 800af42:	d110      	bne.n	800af66 <_strtol_l.isra.0+0x56>
 800af44:	2601      	movs	r6, #1
 800af46:	782c      	ldrb	r4, [r5, #0]
 800af48:	1c95      	adds	r5, r2, #2
 800af4a:	f033 0210 	bics.w	r2, r3, #16
 800af4e:	d115      	bne.n	800af7c <_strtol_l.isra.0+0x6c>
 800af50:	2c30      	cmp	r4, #48	@ 0x30
 800af52:	d10d      	bne.n	800af70 <_strtol_l.isra.0+0x60>
 800af54:	782a      	ldrb	r2, [r5, #0]
 800af56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af5a:	2a58      	cmp	r2, #88	@ 0x58
 800af5c:	d108      	bne.n	800af70 <_strtol_l.isra.0+0x60>
 800af5e:	786c      	ldrb	r4, [r5, #1]
 800af60:	3502      	adds	r5, #2
 800af62:	2310      	movs	r3, #16
 800af64:	e00a      	b.n	800af7c <_strtol_l.isra.0+0x6c>
 800af66:	2c2b      	cmp	r4, #43	@ 0x2b
 800af68:	bf04      	itt	eq
 800af6a:	782c      	ldrbeq	r4, [r5, #0]
 800af6c:	1c95      	addeq	r5, r2, #2
 800af6e:	e7ec      	b.n	800af4a <_strtol_l.isra.0+0x3a>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1f6      	bne.n	800af62 <_strtol_l.isra.0+0x52>
 800af74:	2c30      	cmp	r4, #48	@ 0x30
 800af76:	bf14      	ite	ne
 800af78:	230a      	movne	r3, #10
 800af7a:	2308      	moveq	r3, #8
 800af7c:	2200      	movs	r2, #0
 800af7e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af82:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af86:	fbbc f9f3 	udiv	r9, ip, r3
 800af8a:	4610      	mov	r0, r2
 800af8c:	fb03 ca19 	mls	sl, r3, r9, ip
 800af90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af94:	2f09      	cmp	r7, #9
 800af96:	d80f      	bhi.n	800afb8 <_strtol_l.isra.0+0xa8>
 800af98:	463c      	mov	r4, r7
 800af9a:	42a3      	cmp	r3, r4
 800af9c:	dd1b      	ble.n	800afd6 <_strtol_l.isra.0+0xc6>
 800af9e:	1c57      	adds	r7, r2, #1
 800afa0:	d007      	beq.n	800afb2 <_strtol_l.isra.0+0xa2>
 800afa2:	4581      	cmp	r9, r0
 800afa4:	d314      	bcc.n	800afd0 <_strtol_l.isra.0+0xc0>
 800afa6:	d101      	bne.n	800afac <_strtol_l.isra.0+0x9c>
 800afa8:	45a2      	cmp	sl, r4
 800afaa:	db11      	blt.n	800afd0 <_strtol_l.isra.0+0xc0>
 800afac:	2201      	movs	r2, #1
 800afae:	fb00 4003 	mla	r0, r0, r3, r4
 800afb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afb6:	e7eb      	b.n	800af90 <_strtol_l.isra.0+0x80>
 800afb8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afbc:	2f19      	cmp	r7, #25
 800afbe:	d801      	bhi.n	800afc4 <_strtol_l.isra.0+0xb4>
 800afc0:	3c37      	subs	r4, #55	@ 0x37
 800afc2:	e7ea      	b.n	800af9a <_strtol_l.isra.0+0x8a>
 800afc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afc8:	2f19      	cmp	r7, #25
 800afca:	d804      	bhi.n	800afd6 <_strtol_l.isra.0+0xc6>
 800afcc:	3c57      	subs	r4, #87	@ 0x57
 800afce:	e7e4      	b.n	800af9a <_strtol_l.isra.0+0x8a>
 800afd0:	f04f 32ff 	mov.w	r2, #4294967295
 800afd4:	e7ed      	b.n	800afb2 <_strtol_l.isra.0+0xa2>
 800afd6:	1c53      	adds	r3, r2, #1
 800afd8:	d108      	bne.n	800afec <_strtol_l.isra.0+0xdc>
 800afda:	2322      	movs	r3, #34	@ 0x22
 800afdc:	4660      	mov	r0, ip
 800afde:	f8ce 3000 	str.w	r3, [lr]
 800afe2:	f1b8 0f00 	cmp.w	r8, #0
 800afe6:	d0a0      	beq.n	800af2a <_strtol_l.isra.0+0x1a>
 800afe8:	1e69      	subs	r1, r5, #1
 800afea:	e006      	b.n	800affa <_strtol_l.isra.0+0xea>
 800afec:	b106      	cbz	r6, 800aff0 <_strtol_l.isra.0+0xe0>
 800afee:	4240      	negs	r0, r0
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	d099      	beq.n	800af2a <_strtol_l.isra.0+0x1a>
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	d1f6      	bne.n	800afe8 <_strtol_l.isra.0+0xd8>
 800affa:	f8c8 1000 	str.w	r1, [r8]
 800affe:	e794      	b.n	800af2a <_strtol_l.isra.0+0x1a>
 800b000:	0800ddf3 	.word	0x0800ddf3

0800b004 <strtol>:
 800b004:	4613      	mov	r3, r2
 800b006:	460a      	mov	r2, r1
 800b008:	4601      	mov	r1, r0
 800b00a:	4802      	ldr	r0, [pc, #8]	@ (800b014 <strtol+0x10>)
 800b00c:	6800      	ldr	r0, [r0, #0]
 800b00e:	f7ff bf7f 	b.w	800af10 <_strtol_l.isra.0>
 800b012:	bf00      	nop
 800b014:	2000017c 	.word	0x2000017c

0800b018 <sniprintf>:
 800b018:	b40c      	push	{r2, r3}
 800b01a:	b530      	push	{r4, r5, lr}
 800b01c:	4b18      	ldr	r3, [pc, #96]	@ (800b080 <sniprintf+0x68>)
 800b01e:	1e0c      	subs	r4, r1, #0
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	b09d      	sub	sp, #116	@ 0x74
 800b024:	da08      	bge.n	800b038 <sniprintf+0x20>
 800b026:	238b      	movs	r3, #139	@ 0x8b
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	602b      	str	r3, [r5, #0]
 800b02e:	b01d      	add	sp, #116	@ 0x74
 800b030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b034:	b002      	add	sp, #8
 800b036:	4770      	bx	lr
 800b038:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b03c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b040:	f04f 0300 	mov.w	r3, #0
 800b044:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b046:	bf0c      	ite	eq
 800b048:	4623      	moveq	r3, r4
 800b04a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	9307      	str	r3, [sp, #28]
 800b052:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b056:	9002      	str	r0, [sp, #8]
 800b058:	9006      	str	r0, [sp, #24]
 800b05a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b05e:	4628      	mov	r0, r5
 800b060:	ab21      	add	r3, sp, #132	@ 0x84
 800b062:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b064:	a902      	add	r1, sp, #8
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	f000 f9b2 	bl	800b3d0 <_svfiprintf_r>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	bfbc      	itt	lt
 800b070:	238b      	movlt	r3, #139	@ 0x8b
 800b072:	602b      	strlt	r3, [r5, #0]
 800b074:	2c00      	cmp	r4, #0
 800b076:	d0da      	beq.n	800b02e <sniprintf+0x16>
 800b078:	2200      	movs	r2, #0
 800b07a:	9b02      	ldr	r3, [sp, #8]
 800b07c:	701a      	strb	r2, [r3, #0]
 800b07e:	e7d6      	b.n	800b02e <sniprintf+0x16>
 800b080:	2000017c 	.word	0x2000017c

0800b084 <memset>:
 800b084:	4603      	mov	r3, r0
 800b086:	4402      	add	r2, r0
 800b088:	4293      	cmp	r3, r2
 800b08a:	d100      	bne.n	800b08e <memset+0xa>
 800b08c:	4770      	bx	lr
 800b08e:	f803 1b01 	strb.w	r1, [r3], #1
 800b092:	e7f9      	b.n	800b088 <memset+0x4>

0800b094 <strncmp>:
 800b094:	b510      	push	{r4, lr}
 800b096:	b16a      	cbz	r2, 800b0b4 <strncmp+0x20>
 800b098:	3901      	subs	r1, #1
 800b09a:	1884      	adds	r4, r0, r2
 800b09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d103      	bne.n	800b0b0 <strncmp+0x1c>
 800b0a8:	42a0      	cmp	r0, r4
 800b0aa:	d001      	beq.n	800b0b0 <strncmp+0x1c>
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	d1f5      	bne.n	800b09c <strncmp+0x8>
 800b0b0:	1ad0      	subs	r0, r2, r3
 800b0b2:	bd10      	pop	{r4, pc}
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	e7fc      	b.n	800b0b2 <strncmp+0x1e>

0800b0b8 <__errno>:
 800b0b8:	4b01      	ldr	r3, [pc, #4]	@ (800b0c0 <__errno+0x8>)
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	2000017c 	.word	0x2000017c

0800b0c4 <__libc_init_array>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	4d0c      	ldr	r5, [pc, #48]	@ (800b0fc <__libc_init_array+0x38>)
 800b0ca:	4c0d      	ldr	r4, [pc, #52]	@ (800b100 <__libc_init_array+0x3c>)
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	d109      	bne.n	800b0e8 <__libc_init_array+0x24>
 800b0d4:	f001 fb80 	bl	800c7d8 <_init>
 800b0d8:	2600      	movs	r6, #0
 800b0da:	4d0a      	ldr	r5, [pc, #40]	@ (800b104 <__libc_init_array+0x40>)
 800b0dc:	4c0a      	ldr	r4, [pc, #40]	@ (800b108 <__libc_init_array+0x44>)
 800b0de:	1b64      	subs	r4, r4, r5
 800b0e0:	10a4      	asrs	r4, r4, #2
 800b0e2:	42a6      	cmp	r6, r4
 800b0e4:	d105      	bne.n	800b0f2 <__libc_init_array+0x2e>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ec:	4798      	blx	r3
 800b0ee:	3601      	adds	r6, #1
 800b0f0:	e7ee      	b.n	800b0d0 <__libc_init_array+0xc>
 800b0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f6:	4798      	blx	r3
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	e7f2      	b.n	800b0e2 <__libc_init_array+0x1e>
 800b0fc:	0800df70 	.word	0x0800df70
 800b100:	0800df70 	.word	0x0800df70
 800b104:	0800df70 	.word	0x0800df70
 800b108:	0800df74 	.word	0x0800df74

0800b10c <__retarget_lock_acquire_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__retarget_lock_release_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <memcpy>:
 800b110:	440a      	add	r2, r1
 800b112:	4291      	cmp	r1, r2
 800b114:	f100 33ff 	add.w	r3, r0, #4294967295
 800b118:	d100      	bne.n	800b11c <memcpy+0xc>
 800b11a:	4770      	bx	lr
 800b11c:	b510      	push	{r4, lr}
 800b11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b122:	4291      	cmp	r1, r2
 800b124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b128:	d1f9      	bne.n	800b11e <memcpy+0xe>
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <_free_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4605      	mov	r5, r0
 800b130:	2900      	cmp	r1, #0
 800b132:	d040      	beq.n	800b1b6 <_free_r+0x8a>
 800b134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b138:	1f0c      	subs	r4, r1, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfb8      	it	lt
 800b13e:	18e4      	addlt	r4, r4, r3
 800b140:	f000 f8de 	bl	800b300 <__malloc_lock>
 800b144:	4a1c      	ldr	r2, [pc, #112]	@ (800b1b8 <_free_r+0x8c>)
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	b933      	cbnz	r3, 800b158 <_free_r+0x2c>
 800b14a:	6063      	str	r3, [r4, #4]
 800b14c:	6014      	str	r4, [r2, #0]
 800b14e:	4628      	mov	r0, r5
 800b150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b154:	f000 b8da 	b.w	800b30c <__malloc_unlock>
 800b158:	42a3      	cmp	r3, r4
 800b15a:	d908      	bls.n	800b16e <_free_r+0x42>
 800b15c:	6820      	ldr	r0, [r4, #0]
 800b15e:	1821      	adds	r1, r4, r0
 800b160:	428b      	cmp	r3, r1
 800b162:	bf01      	itttt	eq
 800b164:	6819      	ldreq	r1, [r3, #0]
 800b166:	685b      	ldreq	r3, [r3, #4]
 800b168:	1809      	addeq	r1, r1, r0
 800b16a:	6021      	streq	r1, [r4, #0]
 800b16c:	e7ed      	b.n	800b14a <_free_r+0x1e>
 800b16e:	461a      	mov	r2, r3
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	b10b      	cbz	r3, 800b178 <_free_r+0x4c>
 800b174:	42a3      	cmp	r3, r4
 800b176:	d9fa      	bls.n	800b16e <_free_r+0x42>
 800b178:	6811      	ldr	r1, [r2, #0]
 800b17a:	1850      	adds	r0, r2, r1
 800b17c:	42a0      	cmp	r0, r4
 800b17e:	d10b      	bne.n	800b198 <_free_r+0x6c>
 800b180:	6820      	ldr	r0, [r4, #0]
 800b182:	4401      	add	r1, r0
 800b184:	1850      	adds	r0, r2, r1
 800b186:	4283      	cmp	r3, r0
 800b188:	6011      	str	r1, [r2, #0]
 800b18a:	d1e0      	bne.n	800b14e <_free_r+0x22>
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	4408      	add	r0, r1
 800b192:	6010      	str	r0, [r2, #0]
 800b194:	6053      	str	r3, [r2, #4]
 800b196:	e7da      	b.n	800b14e <_free_r+0x22>
 800b198:	d902      	bls.n	800b1a0 <_free_r+0x74>
 800b19a:	230c      	movs	r3, #12
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	e7d6      	b.n	800b14e <_free_r+0x22>
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	1821      	adds	r1, r4, r0
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1809      	addeq	r1, r1, r0
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	6063      	str	r3, [r4, #4]
 800b1b2:	6054      	str	r4, [r2, #4]
 800b1b4:	e7cb      	b.n	800b14e <_free_r+0x22>
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	200018c8 	.word	0x200018c8

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0f      	ldr	r6, [pc, #60]	@ (800b1fc <sbrk_aligned+0x40>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 fba8 	bl	800b91c <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 fba3 	bl	800b91c <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d103      	bne.n	800b1e2 <sbrk_aligned+0x26>
 800b1da:	f04f 34ff 	mov.w	r4, #4294967295
 800b1de:	4620      	mov	r0, r4
 800b1e0:	bd70      	pop	{r4, r5, r6, pc}
 800b1e2:	1cc4      	adds	r4, r0, #3
 800b1e4:	f024 0403 	bic.w	r4, r4, #3
 800b1e8:	42a0      	cmp	r0, r4
 800b1ea:	d0f8      	beq.n	800b1de <sbrk_aligned+0x22>
 800b1ec:	1a21      	subs	r1, r4, r0
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 fb94 	bl	800b91c <_sbrk_r>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d1f2      	bne.n	800b1de <sbrk_aligned+0x22>
 800b1f8:	e7ef      	b.n	800b1da <sbrk_aligned+0x1e>
 800b1fa:	bf00      	nop
 800b1fc:	200018c4 	.word	0x200018c4

0800b200 <_malloc_r>:
 800b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b204:	1ccd      	adds	r5, r1, #3
 800b206:	f025 0503 	bic.w	r5, r5, #3
 800b20a:	3508      	adds	r5, #8
 800b20c:	2d0c      	cmp	r5, #12
 800b20e:	bf38      	it	cc
 800b210:	250c      	movcc	r5, #12
 800b212:	2d00      	cmp	r5, #0
 800b214:	4606      	mov	r6, r0
 800b216:	db01      	blt.n	800b21c <_malloc_r+0x1c>
 800b218:	42a9      	cmp	r1, r5
 800b21a:	d904      	bls.n	800b226 <_malloc_r+0x26>
 800b21c:	230c      	movs	r3, #12
 800b21e:	6033      	str	r3, [r6, #0]
 800b220:	2000      	movs	r0, #0
 800b222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2fc <_malloc_r+0xfc>
 800b22a:	f000 f869 	bl	800b300 <__malloc_lock>
 800b22e:	f8d8 3000 	ldr.w	r3, [r8]
 800b232:	461c      	mov	r4, r3
 800b234:	bb44      	cbnz	r4, 800b288 <_malloc_r+0x88>
 800b236:	4629      	mov	r1, r5
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff ffbf 	bl	800b1bc <sbrk_aligned>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	4604      	mov	r4, r0
 800b242:	d158      	bne.n	800b2f6 <_malloc_r+0xf6>
 800b244:	f8d8 4000 	ldr.w	r4, [r8]
 800b248:	4627      	mov	r7, r4
 800b24a:	2f00      	cmp	r7, #0
 800b24c:	d143      	bne.n	800b2d6 <_malloc_r+0xd6>
 800b24e:	2c00      	cmp	r4, #0
 800b250:	d04b      	beq.n	800b2ea <_malloc_r+0xea>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	4639      	mov	r1, r7
 800b256:	4630      	mov	r0, r6
 800b258:	eb04 0903 	add.w	r9, r4, r3
 800b25c:	f000 fb5e 	bl	800b91c <_sbrk_r>
 800b260:	4581      	cmp	r9, r0
 800b262:	d142      	bne.n	800b2ea <_malloc_r+0xea>
 800b264:	6821      	ldr	r1, [r4, #0]
 800b266:	4630      	mov	r0, r6
 800b268:	1a6d      	subs	r5, r5, r1
 800b26a:	4629      	mov	r1, r5
 800b26c:	f7ff ffa6 	bl	800b1bc <sbrk_aligned>
 800b270:	3001      	adds	r0, #1
 800b272:	d03a      	beq.n	800b2ea <_malloc_r+0xea>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	442b      	add	r3, r5
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	f8d8 3000 	ldr.w	r3, [r8]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	bb62      	cbnz	r2, 800b2dc <_malloc_r+0xdc>
 800b282:	f8c8 7000 	str.w	r7, [r8]
 800b286:	e00f      	b.n	800b2a8 <_malloc_r+0xa8>
 800b288:	6822      	ldr	r2, [r4, #0]
 800b28a:	1b52      	subs	r2, r2, r5
 800b28c:	d420      	bmi.n	800b2d0 <_malloc_r+0xd0>
 800b28e:	2a0b      	cmp	r2, #11
 800b290:	d917      	bls.n	800b2c2 <_malloc_r+0xc2>
 800b292:	1961      	adds	r1, r4, r5
 800b294:	42a3      	cmp	r3, r4
 800b296:	6025      	str	r5, [r4, #0]
 800b298:	bf18      	it	ne
 800b29a:	6059      	strne	r1, [r3, #4]
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	bf08      	it	eq
 800b2a0:	f8c8 1000 	streq.w	r1, [r8]
 800b2a4:	5162      	str	r2, [r4, r5]
 800b2a6:	604b      	str	r3, [r1, #4]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f000 f82f 	bl	800b30c <__malloc_unlock>
 800b2ae:	f104 000b 	add.w	r0, r4, #11
 800b2b2:	1d23      	adds	r3, r4, #4
 800b2b4:	f020 0007 	bic.w	r0, r0, #7
 800b2b8:	1ac2      	subs	r2, r0, r3
 800b2ba:	bf1c      	itt	ne
 800b2bc:	1a1b      	subne	r3, r3, r0
 800b2be:	50a3      	strne	r3, [r4, r2]
 800b2c0:	e7af      	b.n	800b222 <_malloc_r+0x22>
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	bf0c      	ite	eq
 800b2c8:	f8c8 2000 	streq.w	r2, [r8]
 800b2cc:	605a      	strne	r2, [r3, #4]
 800b2ce:	e7eb      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	6864      	ldr	r4, [r4, #4]
 800b2d4:	e7ae      	b.n	800b234 <_malloc_r+0x34>
 800b2d6:	463c      	mov	r4, r7
 800b2d8:	687f      	ldr	r7, [r7, #4]
 800b2da:	e7b6      	b.n	800b24a <_malloc_r+0x4a>
 800b2dc:	461a      	mov	r2, r3
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	d1fb      	bne.n	800b2dc <_malloc_r+0xdc>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	6053      	str	r3, [r2, #4]
 800b2e8:	e7de      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	6033      	str	r3, [r6, #0]
 800b2f0:	f000 f80c 	bl	800b30c <__malloc_unlock>
 800b2f4:	e794      	b.n	800b220 <_malloc_r+0x20>
 800b2f6:	6005      	str	r5, [r0, #0]
 800b2f8:	e7d6      	b.n	800b2a8 <_malloc_r+0xa8>
 800b2fa:	bf00      	nop
 800b2fc:	200018c8 	.word	0x200018c8

0800b300 <__malloc_lock>:
 800b300:	4801      	ldr	r0, [pc, #4]	@ (800b308 <__malloc_lock+0x8>)
 800b302:	f7ff bf03 	b.w	800b10c <__retarget_lock_acquire_recursive>
 800b306:	bf00      	nop
 800b308:	200018c0 	.word	0x200018c0

0800b30c <__malloc_unlock>:
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <__malloc_unlock+0x8>)
 800b30e:	f7ff befe 	b.w	800b10e <__retarget_lock_release_recursive>
 800b312:	bf00      	nop
 800b314:	200018c0 	.word	0x200018c0

0800b318 <__ssputs_r>:
 800b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	461f      	mov	r7, r3
 800b31e:	688e      	ldr	r6, [r1, #8]
 800b320:	4682      	mov	sl, r0
 800b322:	42be      	cmp	r6, r7
 800b324:	460c      	mov	r4, r1
 800b326:	4690      	mov	r8, r2
 800b328:	680b      	ldr	r3, [r1, #0]
 800b32a:	d82d      	bhi.n	800b388 <__ssputs_r+0x70>
 800b32c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b330:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b334:	d026      	beq.n	800b384 <__ssputs_r+0x6c>
 800b336:	6965      	ldr	r5, [r4, #20]
 800b338:	6909      	ldr	r1, [r1, #16]
 800b33a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b33e:	eba3 0901 	sub.w	r9, r3, r1
 800b342:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b346:	1c7b      	adds	r3, r7, #1
 800b348:	444b      	add	r3, r9
 800b34a:	106d      	asrs	r5, r5, #1
 800b34c:	429d      	cmp	r5, r3
 800b34e:	bf38      	it	cc
 800b350:	461d      	movcc	r5, r3
 800b352:	0553      	lsls	r3, r2, #21
 800b354:	d527      	bpl.n	800b3a6 <__ssputs_r+0x8e>
 800b356:	4629      	mov	r1, r5
 800b358:	f7ff ff52 	bl	800b200 <_malloc_r>
 800b35c:	4606      	mov	r6, r0
 800b35e:	b360      	cbz	r0, 800b3ba <__ssputs_r+0xa2>
 800b360:	464a      	mov	r2, r9
 800b362:	6921      	ldr	r1, [r4, #16]
 800b364:	f7ff fed4 	bl	800b110 <memcpy>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	6126      	str	r6, [r4, #16]
 800b376:	444e      	add	r6, r9
 800b378:	6026      	str	r6, [r4, #0]
 800b37a:	463e      	mov	r6, r7
 800b37c:	6165      	str	r5, [r4, #20]
 800b37e:	eba5 0509 	sub.w	r5, r5, r9
 800b382:	60a5      	str	r5, [r4, #8]
 800b384:	42be      	cmp	r6, r7
 800b386:	d900      	bls.n	800b38a <__ssputs_r+0x72>
 800b388:	463e      	mov	r6, r7
 800b38a:	4632      	mov	r2, r6
 800b38c:	4641      	mov	r1, r8
 800b38e:	6820      	ldr	r0, [r4, #0]
 800b390:	f000 faaa 	bl	800b8e8 <memmove>
 800b394:	2000      	movs	r0, #0
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	1b9b      	subs	r3, r3, r6
 800b39a:	60a3      	str	r3, [r4, #8]
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	4433      	add	r3, r6
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	462a      	mov	r2, r5
 800b3a8:	f000 fad6 	bl	800b958 <_realloc_r>
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d1e0      	bne.n	800b374 <__ssputs_r+0x5c>
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	6921      	ldr	r1, [r4, #16]
 800b3b6:	f7ff feb9 	bl	800b12c <_free_r>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	f8ca 3000 	str.w	r3, [sl]
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	e7e9      	b.n	800b3a2 <__ssputs_r+0x8a>
	...

0800b3d0 <_svfiprintf_r>:
 800b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d4:	4698      	mov	r8, r3
 800b3d6:	898b      	ldrh	r3, [r1, #12]
 800b3d8:	4607      	mov	r7, r0
 800b3da:	061b      	lsls	r3, r3, #24
 800b3dc:	460d      	mov	r5, r1
 800b3de:	4614      	mov	r4, r2
 800b3e0:	b09d      	sub	sp, #116	@ 0x74
 800b3e2:	d510      	bpl.n	800b406 <_svfiprintf_r+0x36>
 800b3e4:	690b      	ldr	r3, [r1, #16]
 800b3e6:	b973      	cbnz	r3, 800b406 <_svfiprintf_r+0x36>
 800b3e8:	2140      	movs	r1, #64	@ 0x40
 800b3ea:	f7ff ff09 	bl	800b200 <_malloc_r>
 800b3ee:	6028      	str	r0, [r5, #0]
 800b3f0:	6128      	str	r0, [r5, #16]
 800b3f2:	b930      	cbnz	r0, 800b402 <_svfiprintf_r+0x32>
 800b3f4:	230c      	movs	r3, #12
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	b01d      	add	sp, #116	@ 0x74
 800b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b402:	2340      	movs	r3, #64	@ 0x40
 800b404:	616b      	str	r3, [r5, #20]
 800b406:	2300      	movs	r3, #0
 800b408:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40a:	2320      	movs	r3, #32
 800b40c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b410:	2330      	movs	r3, #48	@ 0x30
 800b412:	f04f 0901 	mov.w	r9, #1
 800b416:	f8cd 800c 	str.w	r8, [sp, #12]
 800b41a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b5b4 <_svfiprintf_r+0x1e4>
 800b41e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b422:	4623      	mov	r3, r4
 800b424:	469a      	mov	sl, r3
 800b426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b42a:	b10a      	cbz	r2, 800b430 <_svfiprintf_r+0x60>
 800b42c:	2a25      	cmp	r2, #37	@ 0x25
 800b42e:	d1f9      	bne.n	800b424 <_svfiprintf_r+0x54>
 800b430:	ebba 0b04 	subs.w	fp, sl, r4
 800b434:	d00b      	beq.n	800b44e <_svfiprintf_r+0x7e>
 800b436:	465b      	mov	r3, fp
 800b438:	4622      	mov	r2, r4
 800b43a:	4629      	mov	r1, r5
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7ff ff6b 	bl	800b318 <__ssputs_r>
 800b442:	3001      	adds	r0, #1
 800b444:	f000 80a7 	beq.w	800b596 <_svfiprintf_r+0x1c6>
 800b448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b44a:	445a      	add	r2, fp
 800b44c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b44e:	f89a 3000 	ldrb.w	r3, [sl]
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 809f 	beq.w	800b596 <_svfiprintf_r+0x1c6>
 800b458:	2300      	movs	r3, #0
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b462:	f10a 0a01 	add.w	sl, sl, #1
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	9307      	str	r3, [sp, #28]
 800b46a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b46e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b470:	4654      	mov	r4, sl
 800b472:	2205      	movs	r2, #5
 800b474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b478:	484e      	ldr	r0, [pc, #312]	@ (800b5b4 <_svfiprintf_r+0x1e4>)
 800b47a:	f000 fa5f 	bl	800b93c <memchr>
 800b47e:	9a04      	ldr	r2, [sp, #16]
 800b480:	b9d8      	cbnz	r0, 800b4ba <_svfiprintf_r+0xea>
 800b482:	06d0      	lsls	r0, r2, #27
 800b484:	bf44      	itt	mi
 800b486:	2320      	movmi	r3, #32
 800b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48c:	0711      	lsls	r1, r2, #28
 800b48e:	bf44      	itt	mi
 800b490:	232b      	movmi	r3, #43	@ 0x2b
 800b492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b496:	f89a 3000 	ldrb.w	r3, [sl]
 800b49a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b49c:	d015      	beq.n	800b4ca <_svfiprintf_r+0xfa>
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f04f 0c0a 	mov.w	ip, #10
 800b4a6:	9a07      	ldr	r2, [sp, #28]
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ae:	3b30      	subs	r3, #48	@ 0x30
 800b4b0:	2b09      	cmp	r3, #9
 800b4b2:	d94b      	bls.n	800b54c <_svfiprintf_r+0x17c>
 800b4b4:	b1b0      	cbz	r0, 800b4e4 <_svfiprintf_r+0x114>
 800b4b6:	9207      	str	r2, [sp, #28]
 800b4b8:	e014      	b.n	800b4e4 <_svfiprintf_r+0x114>
 800b4ba:	eba0 0308 	sub.w	r3, r0, r8
 800b4be:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	46a2      	mov	sl, r4
 800b4c6:	9304      	str	r3, [sp, #16]
 800b4c8:	e7d2      	b.n	800b470 <_svfiprintf_r+0xa0>
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	1d19      	adds	r1, r3, #4
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	9103      	str	r1, [sp, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bfbb      	ittet	lt
 800b4d6:	425b      	neglt	r3, r3
 800b4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4dc:	9307      	strge	r3, [sp, #28]
 800b4de:	9307      	strlt	r3, [sp, #28]
 800b4e0:	bfb8      	it	lt
 800b4e2:	9204      	strlt	r2, [sp, #16]
 800b4e4:	7823      	ldrb	r3, [r4, #0]
 800b4e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4e8:	d10a      	bne.n	800b500 <_svfiprintf_r+0x130>
 800b4ea:	7863      	ldrb	r3, [r4, #1]
 800b4ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ee:	d132      	bne.n	800b556 <_svfiprintf_r+0x186>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	3402      	adds	r4, #2
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	9203      	str	r2, [sp, #12]
 800b4fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b5b8 <_svfiprintf_r+0x1e8>
 800b504:	2203      	movs	r2, #3
 800b506:	4650      	mov	r0, sl
 800b508:	7821      	ldrb	r1, [r4, #0]
 800b50a:	f000 fa17 	bl	800b93c <memchr>
 800b50e:	b138      	cbz	r0, 800b520 <_svfiprintf_r+0x150>
 800b510:	2240      	movs	r2, #64	@ 0x40
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	eba0 000a 	sub.w	r0, r0, sl
 800b518:	4082      	lsls	r2, r0
 800b51a:	4313      	orrs	r3, r2
 800b51c:	3401      	adds	r4, #1
 800b51e:	9304      	str	r3, [sp, #16]
 800b520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b524:	2206      	movs	r2, #6
 800b526:	4825      	ldr	r0, [pc, #148]	@ (800b5bc <_svfiprintf_r+0x1ec>)
 800b528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b52c:	f000 fa06 	bl	800b93c <memchr>
 800b530:	2800      	cmp	r0, #0
 800b532:	d036      	beq.n	800b5a2 <_svfiprintf_r+0x1d2>
 800b534:	4b22      	ldr	r3, [pc, #136]	@ (800b5c0 <_svfiprintf_r+0x1f0>)
 800b536:	bb1b      	cbnz	r3, 800b580 <_svfiprintf_r+0x1b0>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	3307      	adds	r3, #7
 800b53c:	f023 0307 	bic.w	r3, r3, #7
 800b540:	3308      	adds	r3, #8
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b546:	4433      	add	r3, r6
 800b548:	9309      	str	r3, [sp, #36]	@ 0x24
 800b54a:	e76a      	b.n	800b422 <_svfiprintf_r+0x52>
 800b54c:	460c      	mov	r4, r1
 800b54e:	2001      	movs	r0, #1
 800b550:	fb0c 3202 	mla	r2, ip, r2, r3
 800b554:	e7a8      	b.n	800b4a8 <_svfiprintf_r+0xd8>
 800b556:	2300      	movs	r3, #0
 800b558:	f04f 0c0a 	mov.w	ip, #10
 800b55c:	4619      	mov	r1, r3
 800b55e:	3401      	adds	r4, #1
 800b560:	9305      	str	r3, [sp, #20]
 800b562:	4620      	mov	r0, r4
 800b564:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b568:	3a30      	subs	r2, #48	@ 0x30
 800b56a:	2a09      	cmp	r2, #9
 800b56c:	d903      	bls.n	800b576 <_svfiprintf_r+0x1a6>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0c6      	beq.n	800b500 <_svfiprintf_r+0x130>
 800b572:	9105      	str	r1, [sp, #20]
 800b574:	e7c4      	b.n	800b500 <_svfiprintf_r+0x130>
 800b576:	4604      	mov	r4, r0
 800b578:	2301      	movs	r3, #1
 800b57a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b57e:	e7f0      	b.n	800b562 <_svfiprintf_r+0x192>
 800b580:	ab03      	add	r3, sp, #12
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462a      	mov	r2, r5
 800b586:	4638      	mov	r0, r7
 800b588:	4b0e      	ldr	r3, [pc, #56]	@ (800b5c4 <_svfiprintf_r+0x1f4>)
 800b58a:	a904      	add	r1, sp, #16
 800b58c:	f3af 8000 	nop.w
 800b590:	1c42      	adds	r2, r0, #1
 800b592:	4606      	mov	r6, r0
 800b594:	d1d6      	bne.n	800b544 <_svfiprintf_r+0x174>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	065b      	lsls	r3, r3, #25
 800b59a:	f53f af2d 	bmi.w	800b3f8 <_svfiprintf_r+0x28>
 800b59e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5a0:	e72c      	b.n	800b3fc <_svfiprintf_r+0x2c>
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <_svfiprintf_r+0x1f4>)
 800b5ac:	a904      	add	r1, sp, #16
 800b5ae:	f000 f87d 	bl	800b6ac <_printf_i>
 800b5b2:	e7ed      	b.n	800b590 <_svfiprintf_r+0x1c0>
 800b5b4:	0800def3 	.word	0x0800def3
 800b5b8:	0800def9 	.word	0x0800def9
 800b5bc:	0800defd 	.word	0x0800defd
 800b5c0:	00000000 	.word	0x00000000
 800b5c4:	0800b319 	.word	0x0800b319

0800b5c8 <_printf_common>:
 800b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	4698      	mov	r8, r3
 800b5d0:	688a      	ldr	r2, [r1, #8]
 800b5d2:	690b      	ldr	r3, [r1, #16]
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bfb8      	it	lt
 800b5da:	4613      	movlt	r3, r2
 800b5dc:	6033      	str	r3, [r6, #0]
 800b5de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5e8:	b10a      	cbz	r2, 800b5ee <_printf_common+0x26>
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	6033      	str	r3, [r6, #0]
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	0699      	lsls	r1, r3, #26
 800b5f2:	bf42      	ittt	mi
 800b5f4:	6833      	ldrmi	r3, [r6, #0]
 800b5f6:	3302      	addmi	r3, #2
 800b5f8:	6033      	strmi	r3, [r6, #0]
 800b5fa:	6825      	ldr	r5, [r4, #0]
 800b5fc:	f015 0506 	ands.w	r5, r5, #6
 800b600:	d106      	bne.n	800b610 <_printf_common+0x48>
 800b602:	f104 0a19 	add.w	sl, r4, #25
 800b606:	68e3      	ldr	r3, [r4, #12]
 800b608:	6832      	ldr	r2, [r6, #0]
 800b60a:	1a9b      	subs	r3, r3, r2
 800b60c:	42ab      	cmp	r3, r5
 800b60e:	dc2b      	bgt.n	800b668 <_printf_common+0xa0>
 800b610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b614:	6822      	ldr	r2, [r4, #0]
 800b616:	3b00      	subs	r3, #0
 800b618:	bf18      	it	ne
 800b61a:	2301      	movne	r3, #1
 800b61c:	0692      	lsls	r2, r2, #26
 800b61e:	d430      	bmi.n	800b682 <_printf_common+0xba>
 800b620:	4641      	mov	r1, r8
 800b622:	4638      	mov	r0, r7
 800b624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b628:	47c8      	blx	r9
 800b62a:	3001      	adds	r0, #1
 800b62c:	d023      	beq.n	800b676 <_printf_common+0xae>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	6922      	ldr	r2, [r4, #16]
 800b632:	f003 0306 	and.w	r3, r3, #6
 800b636:	2b04      	cmp	r3, #4
 800b638:	bf14      	ite	ne
 800b63a:	2500      	movne	r5, #0
 800b63c:	6833      	ldreq	r3, [r6, #0]
 800b63e:	f04f 0600 	mov.w	r6, #0
 800b642:	bf08      	it	eq
 800b644:	68e5      	ldreq	r5, [r4, #12]
 800b646:	f104 041a 	add.w	r4, r4, #26
 800b64a:	bf08      	it	eq
 800b64c:	1aed      	subeq	r5, r5, r3
 800b64e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b652:	bf08      	it	eq
 800b654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b658:	4293      	cmp	r3, r2
 800b65a:	bfc4      	itt	gt
 800b65c:	1a9b      	subgt	r3, r3, r2
 800b65e:	18ed      	addgt	r5, r5, r3
 800b660:	42b5      	cmp	r5, r6
 800b662:	d11a      	bne.n	800b69a <_printf_common+0xd2>
 800b664:	2000      	movs	r0, #0
 800b666:	e008      	b.n	800b67a <_printf_common+0xb2>
 800b668:	2301      	movs	r3, #1
 800b66a:	4652      	mov	r2, sl
 800b66c:	4641      	mov	r1, r8
 800b66e:	4638      	mov	r0, r7
 800b670:	47c8      	blx	r9
 800b672:	3001      	adds	r0, #1
 800b674:	d103      	bne.n	800b67e <_printf_common+0xb6>
 800b676:	f04f 30ff 	mov.w	r0, #4294967295
 800b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b67e:	3501      	adds	r5, #1
 800b680:	e7c1      	b.n	800b606 <_printf_common+0x3e>
 800b682:	2030      	movs	r0, #48	@ 0x30
 800b684:	18e1      	adds	r1, r4, r3
 800b686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b690:	4422      	add	r2, r4
 800b692:	3302      	adds	r3, #2
 800b694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b698:	e7c2      	b.n	800b620 <_printf_common+0x58>
 800b69a:	2301      	movs	r3, #1
 800b69c:	4622      	mov	r2, r4
 800b69e:	4641      	mov	r1, r8
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	47c8      	blx	r9
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d0e6      	beq.n	800b676 <_printf_common+0xae>
 800b6a8:	3601      	adds	r6, #1
 800b6aa:	e7d9      	b.n	800b660 <_printf_common+0x98>

0800b6ac <_printf_i>:
 800b6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b0:	7e0f      	ldrb	r7, [r1, #24]
 800b6b2:	4691      	mov	r9, r2
 800b6b4:	2f78      	cmp	r7, #120	@ 0x78
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	469a      	mov	sl, r3
 800b6bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6c2:	d807      	bhi.n	800b6d4 <_printf_i+0x28>
 800b6c4:	2f62      	cmp	r7, #98	@ 0x62
 800b6c6:	d80a      	bhi.n	800b6de <_printf_i+0x32>
 800b6c8:	2f00      	cmp	r7, #0
 800b6ca:	f000 80d1 	beq.w	800b870 <_printf_i+0x1c4>
 800b6ce:	2f58      	cmp	r7, #88	@ 0x58
 800b6d0:	f000 80b8 	beq.w	800b844 <_printf_i+0x198>
 800b6d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6dc:	e03a      	b.n	800b754 <_printf_i+0xa8>
 800b6de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6e2:	2b15      	cmp	r3, #21
 800b6e4:	d8f6      	bhi.n	800b6d4 <_printf_i+0x28>
 800b6e6:	a101      	add	r1, pc, #4	@ (adr r1, 800b6ec <_printf_i+0x40>)
 800b6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6ec:	0800b745 	.word	0x0800b745
 800b6f0:	0800b759 	.word	0x0800b759
 800b6f4:	0800b6d5 	.word	0x0800b6d5
 800b6f8:	0800b6d5 	.word	0x0800b6d5
 800b6fc:	0800b6d5 	.word	0x0800b6d5
 800b700:	0800b6d5 	.word	0x0800b6d5
 800b704:	0800b759 	.word	0x0800b759
 800b708:	0800b6d5 	.word	0x0800b6d5
 800b70c:	0800b6d5 	.word	0x0800b6d5
 800b710:	0800b6d5 	.word	0x0800b6d5
 800b714:	0800b6d5 	.word	0x0800b6d5
 800b718:	0800b857 	.word	0x0800b857
 800b71c:	0800b783 	.word	0x0800b783
 800b720:	0800b811 	.word	0x0800b811
 800b724:	0800b6d5 	.word	0x0800b6d5
 800b728:	0800b6d5 	.word	0x0800b6d5
 800b72c:	0800b879 	.word	0x0800b879
 800b730:	0800b6d5 	.word	0x0800b6d5
 800b734:	0800b783 	.word	0x0800b783
 800b738:	0800b6d5 	.word	0x0800b6d5
 800b73c:	0800b6d5 	.word	0x0800b6d5
 800b740:	0800b819 	.word	0x0800b819
 800b744:	6833      	ldr	r3, [r6, #0]
 800b746:	1d1a      	adds	r2, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6032      	str	r2, [r6, #0]
 800b74c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b754:	2301      	movs	r3, #1
 800b756:	e09c      	b.n	800b892 <_printf_i+0x1e6>
 800b758:	6833      	ldr	r3, [r6, #0]
 800b75a:	6820      	ldr	r0, [r4, #0]
 800b75c:	1d19      	adds	r1, r3, #4
 800b75e:	6031      	str	r1, [r6, #0]
 800b760:	0606      	lsls	r6, r0, #24
 800b762:	d501      	bpl.n	800b768 <_printf_i+0xbc>
 800b764:	681d      	ldr	r5, [r3, #0]
 800b766:	e003      	b.n	800b770 <_printf_i+0xc4>
 800b768:	0645      	lsls	r5, r0, #25
 800b76a:	d5fb      	bpl.n	800b764 <_printf_i+0xb8>
 800b76c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b770:	2d00      	cmp	r5, #0
 800b772:	da03      	bge.n	800b77c <_printf_i+0xd0>
 800b774:	232d      	movs	r3, #45	@ 0x2d
 800b776:	426d      	negs	r5, r5
 800b778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b77c:	230a      	movs	r3, #10
 800b77e:	4858      	ldr	r0, [pc, #352]	@ (800b8e0 <_printf_i+0x234>)
 800b780:	e011      	b.n	800b7a6 <_printf_i+0xfa>
 800b782:	6821      	ldr	r1, [r4, #0]
 800b784:	6833      	ldr	r3, [r6, #0]
 800b786:	0608      	lsls	r0, r1, #24
 800b788:	f853 5b04 	ldr.w	r5, [r3], #4
 800b78c:	d402      	bmi.n	800b794 <_printf_i+0xe8>
 800b78e:	0649      	lsls	r1, r1, #25
 800b790:	bf48      	it	mi
 800b792:	b2ad      	uxthmi	r5, r5
 800b794:	2f6f      	cmp	r7, #111	@ 0x6f
 800b796:	6033      	str	r3, [r6, #0]
 800b798:	bf14      	ite	ne
 800b79a:	230a      	movne	r3, #10
 800b79c:	2308      	moveq	r3, #8
 800b79e:	4850      	ldr	r0, [pc, #320]	@ (800b8e0 <_printf_i+0x234>)
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7a6:	6866      	ldr	r6, [r4, #4]
 800b7a8:	2e00      	cmp	r6, #0
 800b7aa:	60a6      	str	r6, [r4, #8]
 800b7ac:	db05      	blt.n	800b7ba <_printf_i+0x10e>
 800b7ae:	6821      	ldr	r1, [r4, #0]
 800b7b0:	432e      	orrs	r6, r5
 800b7b2:	f021 0104 	bic.w	r1, r1, #4
 800b7b6:	6021      	str	r1, [r4, #0]
 800b7b8:	d04b      	beq.n	800b852 <_printf_i+0x1a6>
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7c0:	fb03 5711 	mls	r7, r3, r1, r5
 800b7c4:	5dc7      	ldrb	r7, [r0, r7]
 800b7c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7ca:	462f      	mov	r7, r5
 800b7cc:	42bb      	cmp	r3, r7
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	d9f4      	bls.n	800b7bc <_printf_i+0x110>
 800b7d2:	2b08      	cmp	r3, #8
 800b7d4:	d10b      	bne.n	800b7ee <_printf_i+0x142>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	07df      	lsls	r7, r3, #31
 800b7da:	d508      	bpl.n	800b7ee <_printf_i+0x142>
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	6861      	ldr	r1, [r4, #4]
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	bfde      	ittt	le
 800b7e4:	2330      	movle	r3, #48	@ 0x30
 800b7e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7ee:	1b92      	subs	r2, r2, r6
 800b7f0:	6122      	str	r2, [r4, #16]
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	f8cd a000 	str.w	sl, [sp]
 800b7fc:	aa03      	add	r2, sp, #12
 800b7fe:	f7ff fee3 	bl	800b5c8 <_printf_common>
 800b802:	3001      	adds	r0, #1
 800b804:	d14a      	bne.n	800b89c <_printf_i+0x1f0>
 800b806:	f04f 30ff 	mov.w	r0, #4294967295
 800b80a:	b004      	add	sp, #16
 800b80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	f043 0320 	orr.w	r3, r3, #32
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	2778      	movs	r7, #120	@ 0x78
 800b81a:	4832      	ldr	r0, [pc, #200]	@ (800b8e4 <_printf_i+0x238>)
 800b81c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	6831      	ldr	r1, [r6, #0]
 800b824:	061f      	lsls	r7, r3, #24
 800b826:	f851 5b04 	ldr.w	r5, [r1], #4
 800b82a:	d402      	bmi.n	800b832 <_printf_i+0x186>
 800b82c:	065f      	lsls	r7, r3, #25
 800b82e:	bf48      	it	mi
 800b830:	b2ad      	uxthmi	r5, r5
 800b832:	6031      	str	r1, [r6, #0]
 800b834:	07d9      	lsls	r1, r3, #31
 800b836:	bf44      	itt	mi
 800b838:	f043 0320 	orrmi.w	r3, r3, #32
 800b83c:	6023      	strmi	r3, [r4, #0]
 800b83e:	b11d      	cbz	r5, 800b848 <_printf_i+0x19c>
 800b840:	2310      	movs	r3, #16
 800b842:	e7ad      	b.n	800b7a0 <_printf_i+0xf4>
 800b844:	4826      	ldr	r0, [pc, #152]	@ (800b8e0 <_printf_i+0x234>)
 800b846:	e7e9      	b.n	800b81c <_printf_i+0x170>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	f023 0320 	bic.w	r3, r3, #32
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	e7f6      	b.n	800b840 <_printf_i+0x194>
 800b852:	4616      	mov	r6, r2
 800b854:	e7bd      	b.n	800b7d2 <_printf_i+0x126>
 800b856:	6833      	ldr	r3, [r6, #0]
 800b858:	6825      	ldr	r5, [r4, #0]
 800b85a:	1d18      	adds	r0, r3, #4
 800b85c:	6961      	ldr	r1, [r4, #20]
 800b85e:	6030      	str	r0, [r6, #0]
 800b860:	062e      	lsls	r6, r5, #24
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	d501      	bpl.n	800b86a <_printf_i+0x1be>
 800b866:	6019      	str	r1, [r3, #0]
 800b868:	e002      	b.n	800b870 <_printf_i+0x1c4>
 800b86a:	0668      	lsls	r0, r5, #25
 800b86c:	d5fb      	bpl.n	800b866 <_printf_i+0x1ba>
 800b86e:	8019      	strh	r1, [r3, #0]
 800b870:	2300      	movs	r3, #0
 800b872:	4616      	mov	r6, r2
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	e7bc      	b.n	800b7f2 <_printf_i+0x146>
 800b878:	6833      	ldr	r3, [r6, #0]
 800b87a:	2100      	movs	r1, #0
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	6032      	str	r2, [r6, #0]
 800b880:	681e      	ldr	r6, [r3, #0]
 800b882:	6862      	ldr	r2, [r4, #4]
 800b884:	4630      	mov	r0, r6
 800b886:	f000 f859 	bl	800b93c <memchr>
 800b88a:	b108      	cbz	r0, 800b890 <_printf_i+0x1e4>
 800b88c:	1b80      	subs	r0, r0, r6
 800b88e:	6060      	str	r0, [r4, #4]
 800b890:	6863      	ldr	r3, [r4, #4]
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	2300      	movs	r3, #0
 800b896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b89a:	e7aa      	b.n	800b7f2 <_printf_i+0x146>
 800b89c:	4632      	mov	r2, r6
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	47d0      	blx	sl
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d0ad      	beq.n	800b806 <_printf_i+0x15a>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	079b      	lsls	r3, r3, #30
 800b8ae:	d413      	bmi.n	800b8d8 <_printf_i+0x22c>
 800b8b0:	68e0      	ldr	r0, [r4, #12]
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	4298      	cmp	r0, r3
 800b8b6:	bfb8      	it	lt
 800b8b8:	4618      	movlt	r0, r3
 800b8ba:	e7a6      	b.n	800b80a <_printf_i+0x15e>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	4632      	mov	r2, r6
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	47d0      	blx	sl
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	d09d      	beq.n	800b806 <_printf_i+0x15a>
 800b8ca:	3501      	adds	r5, #1
 800b8cc:	68e3      	ldr	r3, [r4, #12]
 800b8ce:	9903      	ldr	r1, [sp, #12]
 800b8d0:	1a5b      	subs	r3, r3, r1
 800b8d2:	42ab      	cmp	r3, r5
 800b8d4:	dcf2      	bgt.n	800b8bc <_printf_i+0x210>
 800b8d6:	e7eb      	b.n	800b8b0 <_printf_i+0x204>
 800b8d8:	2500      	movs	r5, #0
 800b8da:	f104 0619 	add.w	r6, r4, #25
 800b8de:	e7f5      	b.n	800b8cc <_printf_i+0x220>
 800b8e0:	0800df04 	.word	0x0800df04
 800b8e4:	0800df15 	.word	0x0800df15

0800b8e8 <memmove>:
 800b8e8:	4288      	cmp	r0, r1
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	eb01 0402 	add.w	r4, r1, r2
 800b8f0:	d902      	bls.n	800b8f8 <memmove+0x10>
 800b8f2:	4284      	cmp	r4, r0
 800b8f4:	4623      	mov	r3, r4
 800b8f6:	d807      	bhi.n	800b908 <memmove+0x20>
 800b8f8:	1e43      	subs	r3, r0, #1
 800b8fa:	42a1      	cmp	r1, r4
 800b8fc:	d008      	beq.n	800b910 <memmove+0x28>
 800b8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b902:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b906:	e7f8      	b.n	800b8fa <memmove+0x12>
 800b908:	4601      	mov	r1, r0
 800b90a:	4402      	add	r2, r0
 800b90c:	428a      	cmp	r2, r1
 800b90e:	d100      	bne.n	800b912 <memmove+0x2a>
 800b910:	bd10      	pop	{r4, pc}
 800b912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b91a:	e7f7      	b.n	800b90c <memmove+0x24>

0800b91c <_sbrk_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	2300      	movs	r3, #0
 800b920:	4d05      	ldr	r5, [pc, #20]	@ (800b938 <_sbrk_r+0x1c>)
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f6 f946 	bl	8001bb8 <_sbrk>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_sbrk_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_sbrk_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	200018bc 	.word	0x200018bc

0800b93c <memchr>:
 800b93c:	4603      	mov	r3, r0
 800b93e:	b510      	push	{r4, lr}
 800b940:	b2c9      	uxtb	r1, r1
 800b942:	4402      	add	r2, r0
 800b944:	4293      	cmp	r3, r2
 800b946:	4618      	mov	r0, r3
 800b948:	d101      	bne.n	800b94e <memchr+0x12>
 800b94a:	2000      	movs	r0, #0
 800b94c:	e003      	b.n	800b956 <memchr+0x1a>
 800b94e:	7804      	ldrb	r4, [r0, #0]
 800b950:	3301      	adds	r3, #1
 800b952:	428c      	cmp	r4, r1
 800b954:	d1f6      	bne.n	800b944 <memchr+0x8>
 800b956:	bd10      	pop	{r4, pc}

0800b958 <_realloc_r>:
 800b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95c:	4607      	mov	r7, r0
 800b95e:	4614      	mov	r4, r2
 800b960:	460d      	mov	r5, r1
 800b962:	b921      	cbnz	r1, 800b96e <_realloc_r+0x16>
 800b964:	4611      	mov	r1, r2
 800b966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	f7ff bc49 	b.w	800b200 <_malloc_r>
 800b96e:	b92a      	cbnz	r2, 800b97c <_realloc_r+0x24>
 800b970:	f7ff fbdc 	bl	800b12c <_free_r>
 800b974:	4625      	mov	r5, r4
 800b976:	4628      	mov	r0, r5
 800b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b97c:	f000 f81a 	bl	800b9b4 <_malloc_usable_size_r>
 800b980:	4284      	cmp	r4, r0
 800b982:	4606      	mov	r6, r0
 800b984:	d802      	bhi.n	800b98c <_realloc_r+0x34>
 800b986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b98a:	d8f4      	bhi.n	800b976 <_realloc_r+0x1e>
 800b98c:	4621      	mov	r1, r4
 800b98e:	4638      	mov	r0, r7
 800b990:	f7ff fc36 	bl	800b200 <_malloc_r>
 800b994:	4680      	mov	r8, r0
 800b996:	b908      	cbnz	r0, 800b99c <_realloc_r+0x44>
 800b998:	4645      	mov	r5, r8
 800b99a:	e7ec      	b.n	800b976 <_realloc_r+0x1e>
 800b99c:	42b4      	cmp	r4, r6
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	bf28      	it	cs
 800b9a4:	4632      	movcs	r2, r6
 800b9a6:	f7ff fbb3 	bl	800b110 <memcpy>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff fbbd 	bl	800b12c <_free_r>
 800b9b2:	e7f1      	b.n	800b998 <_realloc_r+0x40>

0800b9b4 <_malloc_usable_size_r>:
 800b9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b8:	1f18      	subs	r0, r3, #4
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	bfbc      	itt	lt
 800b9be:	580b      	ldrlt	r3, [r1, r0]
 800b9c0:	18c0      	addlt	r0, r0, r3
 800b9c2:	4770      	bx	lr

0800b9c4 <pow>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	461d      	mov	r5, r3
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	4689      	mov	r9, r1
 800b9d0:	f000 f866 	bl	800baa0 <__ieee754_pow>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	460f      	mov	r7, r1
 800b9da:	462b      	mov	r3, r5
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f5 f814 	bl	8000a0c <__aeabi_dcmpun>
 800b9e4:	bbc8      	cbnz	r0, 800ba5a <pow+0x96>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	f7f4 ffdb 	bl	80009a8 <__aeabi_dcmpeq>
 800b9f2:	b1b8      	cbz	r0, 800ba24 <pow+0x60>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7f4 ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d141      	bne.n	800ba88 <pow+0xc4>
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f000 f844 	bl	800ba94 <finite>
 800ba0c:	b328      	cbz	r0, 800ba5a <pow+0x96>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f4 ffd1 	bl	80009bc <__aeabi_dcmplt>
 800ba1a:	b1f0      	cbz	r0, 800ba5a <pow+0x96>
 800ba1c:	f7ff fb4c 	bl	800b0b8 <__errno>
 800ba20:	2322      	movs	r3, #34	@ 0x22
 800ba22:	e019      	b.n	800ba58 <pow+0x94>
 800ba24:	4630      	mov	r0, r6
 800ba26:	4639      	mov	r1, r7
 800ba28:	f000 f834 	bl	800ba94 <finite>
 800ba2c:	b9c8      	cbnz	r0, 800ba62 <pow+0x9e>
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f000 f82f 	bl	800ba94 <finite>
 800ba36:	b1a0      	cbz	r0, 800ba62 <pow+0x9e>
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f000 f82a 	bl	800ba94 <finite>
 800ba40:	b178      	cbz	r0, 800ba62 <pow+0x9e>
 800ba42:	4632      	mov	r2, r6
 800ba44:	463b      	mov	r3, r7
 800ba46:	4630      	mov	r0, r6
 800ba48:	4639      	mov	r1, r7
 800ba4a:	f7f4 ffdf 	bl	8000a0c <__aeabi_dcmpun>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0e4      	beq.n	800ba1c <pow+0x58>
 800ba52:	f7ff fb31 	bl	800b0b8 <__errno>
 800ba56:	2321      	movs	r3, #33	@ 0x21
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f4 ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d0f3      	beq.n	800ba5a <pow+0x96>
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f000 f80d 	bl	800ba94 <finite>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d0ed      	beq.n	800ba5a <pow+0x96>
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f000 f807 	bl	800ba94 <finite>
 800ba86:	e7c8      	b.n	800ba1a <pow+0x56>
 800ba88:	2600      	movs	r6, #0
 800ba8a:	4f01      	ldr	r7, [pc, #4]	@ (800ba90 <pow+0xcc>)
 800ba8c:	e7e5      	b.n	800ba5a <pow+0x96>
 800ba8e:	bf00      	nop
 800ba90:	3ff00000 	.word	0x3ff00000

0800ba94 <finite>:
 800ba94:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800ba98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ba9c:	0fc0      	lsrs	r0, r0, #31
 800ba9e:	4770      	bx	lr

0800baa0 <__ieee754_pow>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	b091      	sub	sp, #68	@ 0x44
 800baa6:	e9cd 2300 	strd	r2, r3, [sp]
 800baaa:	468b      	mov	fp, r1
 800baac:	e9dd 1800 	ldrd	r1, r8, [sp]
 800bab0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800bab4:	4682      	mov	sl, r0
 800bab6:	ea57 0001 	orrs.w	r0, r7, r1
 800baba:	d112      	bne.n	800bae2 <__ieee754_pow+0x42>
 800babc:	4653      	mov	r3, sl
 800babe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800bac2:	18db      	adds	r3, r3, r3
 800bac4:	4152      	adcs	r2, r2
 800bac6:	4298      	cmp	r0, r3
 800bac8:	4b93      	ldr	r3, [pc, #588]	@ (800bd18 <__ieee754_pow+0x278>)
 800baca:	4193      	sbcs	r3, r2
 800bacc:	f080 84cd 	bcs.w	800c46a <__ieee754_pow+0x9ca>
 800bad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bad4:	4650      	mov	r0, sl
 800bad6:	4659      	mov	r1, fp
 800bad8:	f7f4 fb48 	bl	800016c <__adddf3>
 800badc:	b011      	add	sp, #68	@ 0x44
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	4b8e      	ldr	r3, [pc, #568]	@ (800bd1c <__ieee754_pow+0x27c>)
 800bae4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 800bae8:	429d      	cmp	r5, r3
 800baea:	465e      	mov	r6, fp
 800baec:	46d1      	mov	r9, sl
 800baee:	d80b      	bhi.n	800bb08 <__ieee754_pow+0x68>
 800baf0:	d105      	bne.n	800bafe <__ieee754_pow+0x5e>
 800baf2:	f1ba 0f00 	cmp.w	sl, #0
 800baf6:	d1eb      	bne.n	800bad0 <__ieee754_pow+0x30>
 800baf8:	42af      	cmp	r7, r5
 800bafa:	d8e9      	bhi.n	800bad0 <__ieee754_pow+0x30>
 800bafc:	e001      	b.n	800bb02 <__ieee754_pow+0x62>
 800bafe:	429f      	cmp	r7, r3
 800bb00:	d802      	bhi.n	800bb08 <__ieee754_pow+0x68>
 800bb02:	429f      	cmp	r7, r3
 800bb04:	d10f      	bne.n	800bb26 <__ieee754_pow+0x86>
 800bb06:	b171      	cbz	r1, 800bb26 <__ieee754_pow+0x86>
 800bb08:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bb0c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bb10:	ea56 0609 	orrs.w	r6, r6, r9
 800bb14:	d1dc      	bne.n	800bad0 <__ieee754_pow+0x30>
 800bb16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb1a:	18db      	adds	r3, r3, r3
 800bb1c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bb20:	4152      	adcs	r2, r2
 800bb22:	429e      	cmp	r6, r3
 800bb24:	e7d0      	b.n	800bac8 <__ieee754_pow+0x28>
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	462b      	mov	r3, r5
 800bb2a:	da42      	bge.n	800bbb2 <__ieee754_pow+0x112>
 800bb2c:	4a7c      	ldr	r2, [pc, #496]	@ (800bd20 <__ieee754_pow+0x280>)
 800bb2e:	4297      	cmp	r7, r2
 800bb30:	d856      	bhi.n	800bbe0 <__ieee754_pow+0x140>
 800bb32:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bb36:	4297      	cmp	r7, r2
 800bb38:	f240 84a6 	bls.w	800c488 <__ieee754_pow+0x9e8>
 800bb3c:	153a      	asrs	r2, r7, #20
 800bb3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb42:	2a14      	cmp	r2, #20
 800bb44:	dd18      	ble.n	800bb78 <__ieee754_pow+0xd8>
 800bb46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bb4a:	fa21 f402 	lsr.w	r4, r1, r2
 800bb4e:	fa04 f202 	lsl.w	r2, r4, r2
 800bb52:	428a      	cmp	r2, r1
 800bb54:	f040 8498 	bne.w	800c488 <__ieee754_pow+0x9e8>
 800bb58:	f004 0401 	and.w	r4, r4, #1
 800bb5c:	f1c4 0402 	rsb	r4, r4, #2
 800bb60:	2900      	cmp	r1, #0
 800bb62:	d159      	bne.n	800bc18 <__ieee754_pow+0x178>
 800bb64:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bb68:	d149      	bne.n	800bbfe <__ieee754_pow+0x15e>
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	4650      	mov	r0, sl
 800bb70:	4659      	mov	r1, fp
 800bb72:	f7f4 fcb1 	bl	80004d8 <__aeabi_dmul>
 800bb76:	e7b1      	b.n	800badc <__ieee754_pow+0x3c>
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	d14c      	bne.n	800bc16 <__ieee754_pow+0x176>
 800bb7c:	f1c2 0214 	rsb	r2, r2, #20
 800bb80:	fa47 f402 	asr.w	r4, r7, r2
 800bb84:	fa04 f202 	lsl.w	r2, r4, r2
 800bb88:	42ba      	cmp	r2, r7
 800bb8a:	f040 847a 	bne.w	800c482 <__ieee754_pow+0x9e2>
 800bb8e:	f004 0401 	and.w	r4, r4, #1
 800bb92:	f1c4 0402 	rsb	r4, r4, #2
 800bb96:	4a63      	ldr	r2, [pc, #396]	@ (800bd24 <__ieee754_pow+0x284>)
 800bb98:	4297      	cmp	r7, r2
 800bb9a:	d1e3      	bne.n	800bb64 <__ieee754_pow+0xc4>
 800bb9c:	f1b8 0f00 	cmp.w	r8, #0
 800bba0:	f280 846b 	bge.w	800c47a <__ieee754_pow+0x9da>
 800bba4:	4652      	mov	r2, sl
 800bba6:	465b      	mov	r3, fp
 800bba8:	2000      	movs	r0, #0
 800bbaa:	495e      	ldr	r1, [pc, #376]	@ (800bd24 <__ieee754_pow+0x284>)
 800bbac:	f7f4 fdbe 	bl	800072c <__aeabi_ddiv>
 800bbb0:	e794      	b.n	800badc <__ieee754_pow+0x3c>
 800bbb2:	2400      	movs	r4, #0
 800bbb4:	bb81      	cbnz	r1, 800bc18 <__ieee754_pow+0x178>
 800bbb6:	4a59      	ldr	r2, [pc, #356]	@ (800bd1c <__ieee754_pow+0x27c>)
 800bbb8:	4297      	cmp	r7, r2
 800bbba:	d1ec      	bne.n	800bb96 <__ieee754_pow+0xf6>
 800bbbc:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800bbc0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bbc4:	ea53 0309 	orrs.w	r3, r3, r9
 800bbc8:	f000 844f 	beq.w	800c46a <__ieee754_pow+0x9ca>
 800bbcc:	4b56      	ldr	r3, [pc, #344]	@ (800bd28 <__ieee754_pow+0x288>)
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	d908      	bls.n	800bbe4 <__ieee754_pow+0x144>
 800bbd2:	f1b8 0f00 	cmp.w	r8, #0
 800bbd6:	f280 844c 	bge.w	800c472 <__ieee754_pow+0x9d2>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	e77d      	b.n	800badc <__ieee754_pow+0x3c>
 800bbe0:	2402      	movs	r4, #2
 800bbe2:	e7e7      	b.n	800bbb4 <__ieee754_pow+0x114>
 800bbe4:	f1b8 0f00 	cmp.w	r8, #0
 800bbe8:	f04f 0000 	mov.w	r0, #0
 800bbec:	f04f 0100 	mov.w	r1, #0
 800bbf0:	f6bf af74 	bge.w	800badc <__ieee754_pow+0x3c>
 800bbf4:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bbf8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bbfc:	e76e      	b.n	800badc <__ieee754_pow+0x3c>
 800bbfe:	4a4b      	ldr	r2, [pc, #300]	@ (800bd2c <__ieee754_pow+0x28c>)
 800bc00:	4590      	cmp	r8, r2
 800bc02:	d109      	bne.n	800bc18 <__ieee754_pow+0x178>
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	db07      	blt.n	800bc18 <__ieee754_pow+0x178>
 800bc08:	4650      	mov	r0, sl
 800bc0a:	4659      	mov	r1, fp
 800bc0c:	b011      	add	sp, #68	@ 0x44
 800bc0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc12:	f000 bd0f 	b.w	800c634 <__ieee754_sqrt>
 800bc16:	2400      	movs	r4, #0
 800bc18:	4650      	mov	r0, sl
 800bc1a:	4659      	mov	r1, fp
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	f000 fc69 	bl	800c4f4 <fabs>
 800bc22:	9b02      	ldr	r3, [sp, #8]
 800bc24:	f1b9 0f00 	cmp.w	r9, #0
 800bc28:	d127      	bne.n	800bc7a <__ieee754_pow+0x1da>
 800bc2a:	4a3e      	ldr	r2, [pc, #248]	@ (800bd24 <__ieee754_pow+0x284>)
 800bc2c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800bc30:	4594      	cmp	ip, r2
 800bc32:	d000      	beq.n	800bc36 <__ieee754_pow+0x196>
 800bc34:	bb0d      	cbnz	r5, 800bc7a <__ieee754_pow+0x1da>
 800bc36:	f1b8 0f00 	cmp.w	r8, #0
 800bc3a:	da05      	bge.n	800bc48 <__ieee754_pow+0x1a8>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	2000      	movs	r0, #0
 800bc42:	4938      	ldr	r1, [pc, #224]	@ (800bd24 <__ieee754_pow+0x284>)
 800bc44:	f7f4 fd72 	bl	800072c <__aeabi_ddiv>
 800bc48:	2e00      	cmp	r6, #0
 800bc4a:	f6bf af47 	bge.w	800badc <__ieee754_pow+0x3c>
 800bc4e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bc52:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bc56:	4325      	orrs	r5, r4
 800bc58:	d108      	bne.n	800bc6c <__ieee754_pow+0x1cc>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4610      	mov	r0, r2
 800bc60:	4619      	mov	r1, r3
 800bc62:	f7f4 fa81 	bl	8000168 <__aeabi_dsub>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	e79f      	b.n	800bbac <__ieee754_pow+0x10c>
 800bc6c:	2c01      	cmp	r4, #1
 800bc6e:	f47f af35 	bne.w	800badc <__ieee754_pow+0x3c>
 800bc72:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc76:	4619      	mov	r1, r3
 800bc78:	e730      	b.n	800badc <__ieee754_pow+0x3c>
 800bc7a:	0ff2      	lsrs	r2, r6, #31
 800bc7c:	3a01      	subs	r2, #1
 800bc7e:	ea52 0c04 	orrs.w	ip, r2, r4
 800bc82:	d102      	bne.n	800bc8a <__ieee754_pow+0x1ea>
 800bc84:	4652      	mov	r2, sl
 800bc86:	465b      	mov	r3, fp
 800bc88:	e7e9      	b.n	800bc5e <__ieee754_pow+0x1be>
 800bc8a:	f04f 0900 	mov.w	r9, #0
 800bc8e:	3c01      	subs	r4, #1
 800bc90:	4314      	orrs	r4, r2
 800bc92:	bf14      	ite	ne
 800bc94:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bd24 <__ieee754_pow+0x284>
 800bc98:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bd30 <__ieee754_pow+0x290>
 800bc9c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bca0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bca4:	f240 8104 	bls.w	800beb0 <__ieee754_pow+0x410>
 800bca8:	4b22      	ldr	r3, [pc, #136]	@ (800bd34 <__ieee754_pow+0x294>)
 800bcaa:	429f      	cmp	r7, r3
 800bcac:	4b1e      	ldr	r3, [pc, #120]	@ (800bd28 <__ieee754_pow+0x288>)
 800bcae:	d913      	bls.n	800bcd8 <__ieee754_pow+0x238>
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	d808      	bhi.n	800bcc6 <__ieee754_pow+0x226>
 800bcb4:	f1b8 0f00 	cmp.w	r8, #0
 800bcb8:	da08      	bge.n	800bccc <__ieee754_pow+0x22c>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	b011      	add	sp, #68	@ 0x44
 800bcbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc2:	f000 bcb1 	b.w	800c628 <__math_oflow>
 800bcc6:	f1b8 0f00 	cmp.w	r8, #0
 800bcca:	dcf6      	bgt.n	800bcba <__ieee754_pow+0x21a>
 800bccc:	2000      	movs	r0, #0
 800bcce:	b011      	add	sp, #68	@ 0x44
 800bcd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	f000 bca3 	b.w	800c61e <__math_uflow>
 800bcd8:	429d      	cmp	r5, r3
 800bcda:	d20c      	bcs.n	800bcf6 <__ieee754_pow+0x256>
 800bcdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bce0:	2200      	movs	r2, #0
 800bce2:	2300      	movs	r3, #0
 800bce4:	f7f4 fe6a 	bl	80009bc <__aeabi_dcmplt>
 800bce8:	3800      	subs	r0, #0
 800bcea:	bf18      	it	ne
 800bcec:	2001      	movne	r0, #1
 800bcee:	f1b8 0f00 	cmp.w	r8, #0
 800bcf2:	daec      	bge.n	800bcce <__ieee754_pow+0x22e>
 800bcf4:	e7e2      	b.n	800bcbc <__ieee754_pow+0x21c>
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd24 <__ieee754_pow+0x284>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	d91c      	bls.n	800bd38 <__ieee754_pow+0x298>
 800bcfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd02:	2300      	movs	r3, #0
 800bd04:	f7f4 fe5a 	bl	80009bc <__aeabi_dcmplt>
 800bd08:	3800      	subs	r0, #0
 800bd0a:	bf18      	it	ne
 800bd0c:	2001      	movne	r0, #1
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	dcd3      	bgt.n	800bcbc <__ieee754_pow+0x21c>
 800bd14:	e7db      	b.n	800bcce <__ieee754_pow+0x22e>
 800bd16:	bf00      	nop
 800bd18:	fff00000 	.word	0xfff00000
 800bd1c:	7ff00000 	.word	0x7ff00000
 800bd20:	433fffff 	.word	0x433fffff
 800bd24:	3ff00000 	.word	0x3ff00000
 800bd28:	3fefffff 	.word	0x3fefffff
 800bd2c:	3fe00000 	.word	0x3fe00000
 800bd30:	bff00000 	.word	0xbff00000
 800bd34:	43f00000 	.word	0x43f00000
 800bd38:	4b59      	ldr	r3, [pc, #356]	@ (800bea0 <__ieee754_pow+0x400>)
 800bd3a:	f7f4 fa15 	bl	8000168 <__aeabi_dsub>
 800bd3e:	a350      	add	r3, pc, #320	@ (adr r3, 800be80 <__ieee754_pow+0x3e0>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	f7f4 fbc6 	bl	80004d8 <__aeabi_dmul>
 800bd4c:	a34e      	add	r3, pc, #312	@ (adr r3, 800be88 <__ieee754_pow+0x3e8>)
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	4606      	mov	r6, r0
 800bd54:	460f      	mov	r7, r1
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 fbbd 	bl	80004d8 <__aeabi_dmul>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	4682      	mov	sl, r0
 800bd62:	468b      	mov	fp, r1
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	4b4e      	ldr	r3, [pc, #312]	@ (800bea4 <__ieee754_pow+0x404>)
 800bd6a:	f7f4 fbb5 	bl	80004d8 <__aeabi_dmul>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	a147      	add	r1, pc, #284	@ (adr r1, 800be90 <__ieee754_pow+0x3f0>)
 800bd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd78:	f7f4 f9f6 	bl	8000168 <__aeabi_dsub>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fbaa 	bl	80004d8 <__aeabi_dmul>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	2000      	movs	r0, #0
 800bd8a:	4947      	ldr	r1, [pc, #284]	@ (800bea8 <__ieee754_pow+0x408>)
 800bd8c:	f7f4 f9ec 	bl	8000168 <__aeabi_dsub>
 800bd90:	4622      	mov	r2, r4
 800bd92:	4680      	mov	r8, r0
 800bd94:	4689      	mov	r9, r1
 800bd96:	462b      	mov	r3, r5
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 fb9c 	bl	80004d8 <__aeabi_dmul>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 fb96 	bl	80004d8 <__aeabi_dmul>
 800bdac:	a33a      	add	r3, pc, #232	@ (adr r3, 800be98 <__ieee754_pow+0x3f8>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fb91 	bl	80004d8 <__aeabi_dmul>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4650      	mov	r0, sl
 800bdbc:	4659      	mov	r1, fp
 800bdbe:	f7f4 f9d3 	bl	8000168 <__aeabi_dsub>
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4680      	mov	r8, r0
 800bdca:	4689      	mov	r9, r1
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 f9cc 	bl	800016c <__adddf3>
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	4620      	mov	r0, r4
 800bdda:	460d      	mov	r5, r1
 800bddc:	f7f4 f9c4 	bl	8000168 <__aeabi_dsub>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4640      	mov	r0, r8
 800bde6:	4649      	mov	r1, r9
 800bde8:	f7f4 f9be 	bl	8000168 <__aeabi_dsub>
 800bdec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9304      	str	r3, [sp, #16]
 800bdf8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be04:	465b      	mov	r3, fp
 800be06:	4652      	mov	r2, sl
 800be08:	f7f4 f9ae 	bl	8000168 <__aeabi_dsub>
 800be0c:	4622      	mov	r2, r4
 800be0e:	462b      	mov	r3, r5
 800be10:	f7f4 fb62 	bl	80004d8 <__aeabi_dmul>
 800be14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be18:	4680      	mov	r8, r0
 800be1a:	4689      	mov	r9, r1
 800be1c:	4630      	mov	r0, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fb5a 	bl	80004d8 <__aeabi_dmul>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 f99e 	bl	800016c <__adddf3>
 800be30:	465b      	mov	r3, fp
 800be32:	4606      	mov	r6, r0
 800be34:	460f      	mov	r7, r1
 800be36:	4652      	mov	r2, sl
 800be38:	4620      	mov	r0, r4
 800be3a:	4629      	mov	r1, r5
 800be3c:	f7f4 fb4c 	bl	80004d8 <__aeabi_dmul>
 800be40:	460b      	mov	r3, r1
 800be42:	4602      	mov	r2, r0
 800be44:	4680      	mov	r8, r0
 800be46:	4689      	mov	r9, r1
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 f98e 	bl	800016c <__adddf3>
 800be50:	4b16      	ldr	r3, [pc, #88]	@ (800beac <__ieee754_pow+0x40c>)
 800be52:	4604      	mov	r4, r0
 800be54:	4299      	cmp	r1, r3
 800be56:	460d      	mov	r5, r1
 800be58:	468b      	mov	fp, r1
 800be5a:	f340 81fd 	ble.w	800c258 <__ieee754_pow+0x7b8>
 800be5e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800be62:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800be66:	4303      	orrs	r3, r0
 800be68:	f000 81dc 	beq.w	800c224 <__ieee754_pow+0x784>
 800be6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be70:	2200      	movs	r2, #0
 800be72:	2300      	movs	r3, #0
 800be74:	f7f4 fda2 	bl	80009bc <__aeabi_dcmplt>
 800be78:	3800      	subs	r0, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	e71d      	b.n	800bcbc <__ieee754_pow+0x21c>
 800be80:	60000000 	.word	0x60000000
 800be84:	3ff71547 	.word	0x3ff71547
 800be88:	f85ddf44 	.word	0xf85ddf44
 800be8c:	3e54ae0b 	.word	0x3e54ae0b
 800be90:	55555555 	.word	0x55555555
 800be94:	3fd55555 	.word	0x3fd55555
 800be98:	652b82fe 	.word	0x652b82fe
 800be9c:	3ff71547 	.word	0x3ff71547
 800bea0:	3ff00000 	.word	0x3ff00000
 800bea4:	3fd00000 	.word	0x3fd00000
 800bea8:	3fe00000 	.word	0x3fe00000
 800beac:	408fffff 	.word	0x408fffff
 800beb0:	4ad3      	ldr	r2, [pc, #844]	@ (800c200 <__ieee754_pow+0x760>)
 800beb2:	4032      	ands	r2, r6
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	f040 817a 	bne.w	800c1ae <__ieee754_pow+0x70e>
 800beba:	4bd2      	ldr	r3, [pc, #840]	@ (800c204 <__ieee754_pow+0x764>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	f7f4 fb0b 	bl	80004d8 <__aeabi_dmul>
 800bec2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800bec6:	460b      	mov	r3, r1
 800bec8:	151a      	asrs	r2, r3, #20
 800beca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bece:	4422      	add	r2, r4
 800bed0:	920a      	str	r2, [sp, #40]	@ 0x28
 800bed2:	4acd      	ldr	r2, [pc, #820]	@ (800c208 <__ieee754_pow+0x768>)
 800bed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bed8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800bedc:	4293      	cmp	r3, r2
 800bede:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bee2:	dd08      	ble.n	800bef6 <__ieee754_pow+0x456>
 800bee4:	4ac9      	ldr	r2, [pc, #804]	@ (800c20c <__ieee754_pow+0x76c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	f340 8163 	ble.w	800c1b2 <__ieee754_pow+0x712>
 800beec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bef2:	3301      	adds	r3, #1
 800bef4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bef6:	2600      	movs	r6, #0
 800bef8:	00f3      	lsls	r3, r6, #3
 800befa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800befc:	4bc4      	ldr	r3, [pc, #784]	@ (800c210 <__ieee754_pow+0x770>)
 800befe:	4629      	mov	r1, r5
 800bf00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf04:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bf0e:	4623      	mov	r3, r4
 800bf10:	4682      	mov	sl, r0
 800bf12:	f7f4 f929 	bl	8000168 <__aeabi_dsub>
 800bf16:	4652      	mov	r2, sl
 800bf18:	462b      	mov	r3, r5
 800bf1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bf1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf22:	f7f4 f923 	bl	800016c <__adddf3>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	49b9      	ldr	r1, [pc, #740]	@ (800c214 <__ieee754_pow+0x774>)
 800bf2e:	f7f4 fbfd 	bl	800072c <__aeabi_ddiv>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3e:	f7f4 facb 	bl	80004d8 <__aeabi_dmul>
 800bf42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf46:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bf4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	2200      	movs	r2, #0
 800bf52:	46ab      	mov	fp, r5
 800bf54:	106d      	asrs	r5, r5, #1
 800bf56:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bf60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf64:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	461d      	mov	r5, r3
 800bf70:	f7f4 fab2 	bl	80004d8 <__aeabi_dmul>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf7c:	f7f4 f8f4 	bl	8000168 <__aeabi_dsub>
 800bf80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	f7f4 f8ec 	bl	8000168 <__aeabi_dsub>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	4650      	mov	r0, sl
 800bf96:	4659      	mov	r1, fp
 800bf98:	f7f4 f8e6 	bl	8000168 <__aeabi_dsub>
 800bf9c:	4642      	mov	r2, r8
 800bf9e:	464b      	mov	r3, r9
 800bfa0:	f7f4 fa9a 	bl	80004d8 <__aeabi_dmul>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	f7f4 f8dc 	bl	8000168 <__aeabi_dsub>
 800bfb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bfb4:	f7f4 fa90 	bl	80004d8 <__aeabi_dmul>
 800bfb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	f7f4 fa88 	bl	80004d8 <__aeabi_dmul>
 800bfc8:	a37b      	add	r3, pc, #492	@ (adr r3, 800c1b8 <__ieee754_pow+0x718>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	4604      	mov	r4, r0
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	f7f4 fa81 	bl	80004d8 <__aeabi_dmul>
 800bfd6:	a37a      	add	r3, pc, #488	@ (adr r3, 800c1c0 <__ieee754_pow+0x720>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 f8c6 	bl	800016c <__adddf3>
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	462b      	mov	r3, r5
 800bfe4:	f7f4 fa78 	bl	80004d8 <__aeabi_dmul>
 800bfe8:	a377      	add	r3, pc, #476	@ (adr r3, 800c1c8 <__ieee754_pow+0x728>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f4 f8bd 	bl	800016c <__adddf3>
 800bff2:	4622      	mov	r2, r4
 800bff4:	462b      	mov	r3, r5
 800bff6:	f7f4 fa6f 	bl	80004d8 <__aeabi_dmul>
 800bffa:	a375      	add	r3, pc, #468	@ (adr r3, 800c1d0 <__ieee754_pow+0x730>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 f8b4 	bl	800016c <__adddf3>
 800c004:	4622      	mov	r2, r4
 800c006:	462b      	mov	r3, r5
 800c008:	f7f4 fa66 	bl	80004d8 <__aeabi_dmul>
 800c00c:	a372      	add	r3, pc, #456	@ (adr r3, 800c1d8 <__ieee754_pow+0x738>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 f8ab 	bl	800016c <__adddf3>
 800c016:	4622      	mov	r2, r4
 800c018:	462b      	mov	r3, r5
 800c01a:	f7f4 fa5d 	bl	80004d8 <__aeabi_dmul>
 800c01e:	a370      	add	r3, pc, #448	@ (adr r3, 800c1e0 <__ieee754_pow+0x740>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 f8a2 	bl	800016c <__adddf3>
 800c028:	4622      	mov	r2, r4
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	462b      	mov	r3, r5
 800c030:	4620      	mov	r0, r4
 800c032:	4629      	mov	r1, r5
 800c034:	f7f4 fa50 	bl	80004d8 <__aeabi_dmul>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4630      	mov	r0, r6
 800c03e:	4639      	mov	r1, r7
 800c040:	f7f4 fa4a 	bl	80004d8 <__aeabi_dmul>
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c04c:	4642      	mov	r2, r8
 800c04e:	464b      	mov	r3, r9
 800c050:	f7f4 f88c 	bl	800016c <__adddf3>
 800c054:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c058:	f7f4 fa3e 	bl	80004d8 <__aeabi_dmul>
 800c05c:	4622      	mov	r2, r4
 800c05e:	462b      	mov	r3, r5
 800c060:	f7f4 f884 	bl	800016c <__adddf3>
 800c064:	4642      	mov	r2, r8
 800c066:	4682      	mov	sl, r0
 800c068:	468b      	mov	fp, r1
 800c06a:	464b      	mov	r3, r9
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	f7f4 fa32 	bl	80004d8 <__aeabi_dmul>
 800c074:	2200      	movs	r2, #0
 800c076:	4b68      	ldr	r3, [pc, #416]	@ (800c218 <__ieee754_pow+0x778>)
 800c078:	4606      	mov	r6, r0
 800c07a:	460f      	mov	r7, r1
 800c07c:	f7f4 f876 	bl	800016c <__adddf3>
 800c080:	4652      	mov	r2, sl
 800c082:	465b      	mov	r3, fp
 800c084:	f7f4 f872 	bl	800016c <__adddf3>
 800c088:	2400      	movs	r4, #0
 800c08a:	460d      	mov	r5, r1
 800c08c:	4622      	mov	r2, r4
 800c08e:	460b      	mov	r3, r1
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 fa20 	bl	80004d8 <__aeabi_dmul>
 800c098:	2200      	movs	r2, #0
 800c09a:	4680      	mov	r8, r0
 800c09c:	4689      	mov	r9, r1
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4b5d      	ldr	r3, [pc, #372]	@ (800c218 <__ieee754_pow+0x778>)
 800c0a4:	f7f4 f860 	bl	8000168 <__aeabi_dsub>
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	463b      	mov	r3, r7
 800c0ac:	f7f4 f85c 	bl	8000168 <__aeabi_dsub>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	f7f4 f856 	bl	8000168 <__aeabi_dsub>
 800c0bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0c0:	f7f4 fa0a 	bl	80004d8 <__aeabi_dmul>
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f7f4 fa02 	bl	80004d8 <__aeabi_dmul>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 f846 	bl	800016c <__adddf3>
 800c0e0:	2400      	movs	r4, #0
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	460f      	mov	r7, r1
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 f83d 	bl	800016c <__adddf3>
 800c0f2:	a33d      	add	r3, pc, #244	@ (adr r3, 800c1e8 <__ieee754_pow+0x748>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	460d      	mov	r5, r1
 800c0fc:	f7f4 f9ec 	bl	80004d8 <__aeabi_dmul>
 800c100:	4642      	mov	r2, r8
 800c102:	464b      	mov	r3, r9
 800c104:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c108:	4620      	mov	r0, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 f82c 	bl	8000168 <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4630      	mov	r0, r6
 800c116:	4639      	mov	r1, r7
 800c118:	f7f4 f826 	bl	8000168 <__aeabi_dsub>
 800c11c:	a334      	add	r3, pc, #208	@ (adr r3, 800c1f0 <__ieee754_pow+0x750>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f7f4 f9d9 	bl	80004d8 <__aeabi_dmul>
 800c126:	a334      	add	r3, pc, #208	@ (adr r3, 800c1f8 <__ieee754_pow+0x758>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	4606      	mov	r6, r0
 800c12e:	460f      	mov	r7, r1
 800c130:	4620      	mov	r0, r4
 800c132:	4629      	mov	r1, r5
 800c134:	f7f4 f9d0 	bl	80004d8 <__aeabi_dmul>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	f7f4 f814 	bl	800016c <__adddf3>
 800c144:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c146:	4b35      	ldr	r3, [pc, #212]	@ (800c21c <__ieee754_pow+0x77c>)
 800c148:	2400      	movs	r4, #0
 800c14a:	4413      	add	r3, r2
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	f7f4 f80c 	bl	800016c <__adddf3>
 800c154:	4682      	mov	sl, r0
 800c156:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c158:	468b      	mov	fp, r1
 800c15a:	f7f4 f953 	bl	8000404 <__aeabi_i2d>
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c164:	4b2e      	ldr	r3, [pc, #184]	@ (800c220 <__ieee754_pow+0x780>)
 800c166:	4413      	add	r3, r2
 800c168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c16c:	4652      	mov	r2, sl
 800c16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c172:	465b      	mov	r3, fp
 800c174:	f7f3 fffa 	bl	800016c <__adddf3>
 800c178:	4642      	mov	r2, r8
 800c17a:	464b      	mov	r3, r9
 800c17c:	f7f3 fff6 	bl	800016c <__adddf3>
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	f7f3 fff2 	bl	800016c <__adddf3>
 800c188:	4632      	mov	r2, r6
 800c18a:	463b      	mov	r3, r7
 800c18c:	4620      	mov	r0, r4
 800c18e:	460d      	mov	r5, r1
 800c190:	f7f3 ffea 	bl	8000168 <__aeabi_dsub>
 800c194:	4642      	mov	r2, r8
 800c196:	464b      	mov	r3, r9
 800c198:	f7f3 ffe6 	bl	8000168 <__aeabi_dsub>
 800c19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1a0:	f7f3 ffe2 	bl	8000168 <__aeabi_dsub>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4650      	mov	r0, sl
 800c1aa:	4659      	mov	r1, fp
 800c1ac:	e61c      	b.n	800bde8 <__ieee754_pow+0x348>
 800c1ae:	2400      	movs	r4, #0
 800c1b0:	e68a      	b.n	800bec8 <__ieee754_pow+0x428>
 800c1b2:	2601      	movs	r6, #1
 800c1b4:	e6a0      	b.n	800bef8 <__ieee754_pow+0x458>
 800c1b6:	bf00      	nop
 800c1b8:	4a454eef 	.word	0x4a454eef
 800c1bc:	3fca7e28 	.word	0x3fca7e28
 800c1c0:	93c9db65 	.word	0x93c9db65
 800c1c4:	3fcd864a 	.word	0x3fcd864a
 800c1c8:	a91d4101 	.word	0xa91d4101
 800c1cc:	3fd17460 	.word	0x3fd17460
 800c1d0:	518f264d 	.word	0x518f264d
 800c1d4:	3fd55555 	.word	0x3fd55555
 800c1d8:	db6fabff 	.word	0xdb6fabff
 800c1dc:	3fdb6db6 	.word	0x3fdb6db6
 800c1e0:	33333303 	.word	0x33333303
 800c1e4:	3fe33333 	.word	0x3fe33333
 800c1e8:	e0000000 	.word	0xe0000000
 800c1ec:	3feec709 	.word	0x3feec709
 800c1f0:	dc3a03fd 	.word	0xdc3a03fd
 800c1f4:	3feec709 	.word	0x3feec709
 800c1f8:	145b01f5 	.word	0x145b01f5
 800c1fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c200:	7ff00000 	.word	0x7ff00000
 800c204:	43400000 	.word	0x43400000
 800c208:	0003988e 	.word	0x0003988e
 800c20c:	000bb679 	.word	0x000bb679
 800c210:	0800df48 	.word	0x0800df48
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	40080000 	.word	0x40080000
 800c21c:	0800df28 	.word	0x0800df28
 800c220:	0800df38 	.word	0x0800df38
 800c224:	a39a      	add	r3, pc, #616	@ (adr r3, 800c490 <__ieee754_pow+0x9f0>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f3 ff9d 	bl	800016c <__adddf3>
 800c232:	4642      	mov	r2, r8
 800c234:	e9cd 0100 	strd	r0, r1, [sp]
 800c238:	464b      	mov	r3, r9
 800c23a:	4620      	mov	r0, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f3 ff93 	bl	8000168 <__aeabi_dsub>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c24a:	f7f4 fbd5 	bl	80009f8 <__aeabi_dcmpgt>
 800c24e:	2800      	cmp	r0, #0
 800c250:	f47f ae0c 	bne.w	800be6c <__ieee754_pow+0x3cc>
 800c254:	4ba0      	ldr	r3, [pc, #640]	@ (800c4d8 <__ieee754_pow+0xa38>)
 800c256:	e022      	b.n	800c29e <__ieee754_pow+0x7fe>
 800c258:	4ca0      	ldr	r4, [pc, #640]	@ (800c4dc <__ieee754_pow+0xa3c>)
 800c25a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c25e:	42a3      	cmp	r3, r4
 800c260:	d919      	bls.n	800c296 <__ieee754_pow+0x7f6>
 800c262:	4b9f      	ldr	r3, [pc, #636]	@ (800c4e0 <__ieee754_pow+0xa40>)
 800c264:	440b      	add	r3, r1
 800c266:	4303      	orrs	r3, r0
 800c268:	d009      	beq.n	800c27e <__ieee754_pow+0x7de>
 800c26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26e:	2200      	movs	r2, #0
 800c270:	2300      	movs	r3, #0
 800c272:	f7f4 fba3 	bl	80009bc <__aeabi_dcmplt>
 800c276:	3800      	subs	r0, #0
 800c278:	bf18      	it	ne
 800c27a:	2001      	movne	r0, #1
 800c27c:	e527      	b.n	800bcce <__ieee754_pow+0x22e>
 800c27e:	4642      	mov	r2, r8
 800c280:	464b      	mov	r3, r9
 800c282:	f7f3 ff71 	bl	8000168 <__aeabi_dsub>
 800c286:	4632      	mov	r2, r6
 800c288:	463b      	mov	r3, r7
 800c28a:	f7f4 fbab 	bl	80009e4 <__aeabi_dcmpge>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d1eb      	bne.n	800c26a <__ieee754_pow+0x7ca>
 800c292:	4b94      	ldr	r3, [pc, #592]	@ (800c4e4 <__ieee754_pow+0xa44>)
 800c294:	e003      	b.n	800c29e <__ieee754_pow+0x7fe>
 800c296:	4a94      	ldr	r2, [pc, #592]	@ (800c4e8 <__ieee754_pow+0xa48>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	f240 80e1 	bls.w	800c460 <__ieee754_pow+0x9c0>
 800c29e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800c2a2:	151b      	asrs	r3, r3, #20
 800c2a4:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800c2a8:	fa4a fa03 	asr.w	sl, sl, r3
 800c2ac:	44da      	add	sl, fp
 800c2ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c2b2:	488e      	ldr	r0, [pc, #568]	@ (800c4ec <__ieee754_pow+0xa4c>)
 800c2b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c2b8:	4108      	asrs	r0, r1
 800c2ba:	ea00 030a 	and.w	r3, r0, sl
 800c2be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c2c2:	f1c1 0114 	rsb	r1, r1, #20
 800c2c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	fa4a fa01 	asr.w	sl, sl, r1
 800c2d0:	f1bb 0f00 	cmp.w	fp, #0
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	bfb8      	it	lt
 800c2dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2e0:	f7f3 ff42 	bl	8000168 <__aeabi_dsub>
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	2400      	movs	r4, #0
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	463b      	mov	r3, r7
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	f7f3 ff3b 	bl	800016c <__adddf3>
 800c2f6:	a368      	add	r3, pc, #416	@ (adr r3, 800c498 <__ieee754_pow+0x9f8>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	460d      	mov	r5, r1
 800c300:	f7f4 f8ea 	bl	80004d8 <__aeabi_dmul>
 800c304:	4642      	mov	r2, r8
 800c306:	464b      	mov	r3, r9
 800c308:	e9cd 0100 	strd	r0, r1, [sp]
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f3 ff2a 	bl	8000168 <__aeabi_dsub>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f3 ff24 	bl	8000168 <__aeabi_dsub>
 800c320:	a35f      	add	r3, pc, #380	@ (adr r3, 800c4a0 <__ieee754_pow+0xa00>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f8d7 	bl	80004d8 <__aeabi_dmul>
 800c32a:	a35f      	add	r3, pc, #380	@ (adr r3, 800c4a8 <__ieee754_pow+0xa08>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	4680      	mov	r8, r0
 800c332:	4689      	mov	r9, r1
 800c334:	4620      	mov	r0, r4
 800c336:	4629      	mov	r1, r5
 800c338:	f7f4 f8ce 	bl	80004d8 <__aeabi_dmul>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f3 ff12 	bl	800016c <__adddf3>
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c354:	f7f3 ff0a 	bl	800016c <__adddf3>
 800c358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	f7f3 ff02 	bl	8000168 <__aeabi_dsub>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f3 fefc 	bl	8000168 <__aeabi_dsub>
 800c370:	4642      	mov	r2, r8
 800c372:	4606      	mov	r6, r0
 800c374:	460f      	mov	r7, r1
 800c376:	464b      	mov	r3, r9
 800c378:	4640      	mov	r0, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7f4 f8ac 	bl	80004d8 <__aeabi_dmul>
 800c380:	a34b      	add	r3, pc, #300	@ (adr r3, 800c4b0 <__ieee754_pow+0xa10>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	4604      	mov	r4, r0
 800c388:	460d      	mov	r5, r1
 800c38a:	f7f4 f8a5 	bl	80004d8 <__aeabi_dmul>
 800c38e:	a34a      	add	r3, pc, #296	@ (adr r3, 800c4b8 <__ieee754_pow+0xa18>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f3 fee8 	bl	8000168 <__aeabi_dsub>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	f7f4 f89c 	bl	80004d8 <__aeabi_dmul>
 800c3a0:	a347      	add	r3, pc, #284	@ (adr r3, 800c4c0 <__ieee754_pow+0xa20>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f3 fee1 	bl	800016c <__adddf3>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	f7f4 f893 	bl	80004d8 <__aeabi_dmul>
 800c3b2:	a345      	add	r3, pc, #276	@ (adr r3, 800c4c8 <__ieee754_pow+0xa28>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 fed6 	bl	8000168 <__aeabi_dsub>
 800c3bc:	4622      	mov	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	f7f4 f88a 	bl	80004d8 <__aeabi_dmul>
 800c3c4:	a342      	add	r3, pc, #264	@ (adr r3, 800c4d0 <__ieee754_pow+0xa30>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 fecf 	bl	800016c <__adddf3>
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	f7f4 f881 	bl	80004d8 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4640      	mov	r0, r8
 800c3dc:	4649      	mov	r1, r9
 800c3de:	f7f3 fec3 	bl	8000168 <__aeabi_dsub>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f4 f873 	bl	80004d8 <__aeabi_dmul>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c3f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f3 feb2 	bl	8000168 <__aeabi_dsub>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c40c:	f7f4 f98e 	bl	800072c <__aeabi_ddiv>
 800c410:	4632      	mov	r2, r6
 800c412:	4604      	mov	r4, r0
 800c414:	460d      	mov	r5, r1
 800c416:	463b      	mov	r3, r7
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f4 f85c 	bl	80004d8 <__aeabi_dmul>
 800c420:	4632      	mov	r2, r6
 800c422:	463b      	mov	r3, r7
 800c424:	f7f3 fea2 	bl	800016c <__adddf3>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4620      	mov	r0, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	f7f3 fe9a 	bl	8000168 <__aeabi_dsub>
 800c434:	4642      	mov	r2, r8
 800c436:	464b      	mov	r3, r9
 800c438:	f7f3 fe96 	bl	8000168 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	2000      	movs	r0, #0
 800c442:	492b      	ldr	r1, [pc, #172]	@ (800c4f0 <__ieee754_pow+0xa50>)
 800c444:	f7f3 fe90 	bl	8000168 <__aeabi_dsub>
 800c448:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c44c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c450:	da09      	bge.n	800c466 <__ieee754_pow+0x9c6>
 800c452:	4652      	mov	r2, sl
 800c454:	f000 f854 	bl	800c500 <scalbn>
 800c458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c45c:	f7ff bb89 	b.w	800bb72 <__ieee754_pow+0xd2>
 800c460:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c464:	e740      	b.n	800c2e8 <__ieee754_pow+0x848>
 800c466:	4621      	mov	r1, r4
 800c468:	e7f6      	b.n	800c458 <__ieee754_pow+0x9b8>
 800c46a:	2000      	movs	r0, #0
 800c46c:	4920      	ldr	r1, [pc, #128]	@ (800c4f0 <__ieee754_pow+0xa50>)
 800c46e:	f7ff bb35 	b.w	800badc <__ieee754_pow+0x3c>
 800c472:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c476:	f7ff bb31 	b.w	800badc <__ieee754_pow+0x3c>
 800c47a:	4650      	mov	r0, sl
 800c47c:	4659      	mov	r1, fp
 800c47e:	f7ff bb2d 	b.w	800badc <__ieee754_pow+0x3c>
 800c482:	460c      	mov	r4, r1
 800c484:	f7ff bb87 	b.w	800bb96 <__ieee754_pow+0xf6>
 800c488:	2400      	movs	r4, #0
 800c48a:	f7ff bb69 	b.w	800bb60 <__ieee754_pow+0xc0>
 800c48e:	bf00      	nop
 800c490:	652b82fe 	.word	0x652b82fe
 800c494:	3c971547 	.word	0x3c971547
 800c498:	00000000 	.word	0x00000000
 800c49c:	3fe62e43 	.word	0x3fe62e43
 800c4a0:	fefa39ef 	.word	0xfefa39ef
 800c4a4:	3fe62e42 	.word	0x3fe62e42
 800c4a8:	0ca86c39 	.word	0x0ca86c39
 800c4ac:	be205c61 	.word	0xbe205c61
 800c4b0:	72bea4d0 	.word	0x72bea4d0
 800c4b4:	3e663769 	.word	0x3e663769
 800c4b8:	c5d26bf1 	.word	0xc5d26bf1
 800c4bc:	3ebbbd41 	.word	0x3ebbbd41
 800c4c0:	af25de2c 	.word	0xaf25de2c
 800c4c4:	3f11566a 	.word	0x3f11566a
 800c4c8:	16bebd93 	.word	0x16bebd93
 800c4cc:	3f66c16c 	.word	0x3f66c16c
 800c4d0:	5555553e 	.word	0x5555553e
 800c4d4:	3fc55555 	.word	0x3fc55555
 800c4d8:	40900000 	.word	0x40900000
 800c4dc:	4090cbff 	.word	0x4090cbff
 800c4e0:	3f6f3400 	.word	0x3f6f3400
 800c4e4:	4090cc00 	.word	0x4090cc00
 800c4e8:	3fe00000 	.word	0x3fe00000
 800c4ec:	fff00000 	.word	0xfff00000
 800c4f0:	3ff00000 	.word	0x3ff00000

0800c4f4 <fabs>:
 800c4f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4770      	bx	lr
 800c4fc:	0000      	movs	r0, r0
	...

0800c500 <scalbn>:
 800c500:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c504:	4616      	mov	r6, r2
 800c506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c50a:	4683      	mov	fp, r0
 800c50c:	468c      	mov	ip, r1
 800c50e:	460b      	mov	r3, r1
 800c510:	b982      	cbnz	r2, 800c534 <scalbn+0x34>
 800c512:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c516:	4303      	orrs	r3, r0
 800c518:	d035      	beq.n	800c586 <scalbn+0x86>
 800c51a:	4b2d      	ldr	r3, [pc, #180]	@ (800c5d0 <scalbn+0xd0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f7f3 ffdb 	bl	80004d8 <__aeabi_dmul>
 800c522:	4b2c      	ldr	r3, [pc, #176]	@ (800c5d4 <scalbn+0xd4>)
 800c524:	4683      	mov	fp, r0
 800c526:	429e      	cmp	r6, r3
 800c528:	468c      	mov	ip, r1
 800c52a:	da0d      	bge.n	800c548 <scalbn+0x48>
 800c52c:	a324      	add	r3, pc, #144	@ (adr r3, 800c5c0 <scalbn+0xc0>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	e019      	b.n	800c568 <scalbn+0x68>
 800c534:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c538:	42ba      	cmp	r2, r7
 800c53a:	d109      	bne.n	800c550 <scalbn+0x50>
 800c53c:	4602      	mov	r2, r0
 800c53e:	f7f3 fe15 	bl	800016c <__adddf3>
 800c542:	4683      	mov	fp, r0
 800c544:	468c      	mov	ip, r1
 800c546:	e01e      	b.n	800c586 <scalbn+0x86>
 800c548:	460b      	mov	r3, r1
 800c54a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c54e:	3a36      	subs	r2, #54	@ 0x36
 800c550:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c554:	428e      	cmp	r6, r1
 800c556:	dd0a      	ble.n	800c56e <scalbn+0x6e>
 800c558:	a31b      	add	r3, pc, #108	@ (adr r3, 800c5c8 <scalbn+0xc8>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	4665      	mov	r5, ip
 800c560:	f363 051e 	bfi	r5, r3, #0, #31
 800c564:	4629      	mov	r1, r5
 800c566:	481c      	ldr	r0, [pc, #112]	@ (800c5d8 <scalbn+0xd8>)
 800c568:	f7f3 ffb6 	bl	80004d8 <__aeabi_dmul>
 800c56c:	e7e9      	b.n	800c542 <scalbn+0x42>
 800c56e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c572:	4432      	add	r2, r6
 800c574:	428a      	cmp	r2, r1
 800c576:	dcef      	bgt.n	800c558 <scalbn+0x58>
 800c578:	2a00      	cmp	r2, #0
 800c57a:	dd08      	ble.n	800c58e <scalbn+0x8e>
 800c57c:	f36f 531e 	bfc	r3, #20, #11
 800c580:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c584:	46ac      	mov	ip, r5
 800c586:	4658      	mov	r0, fp
 800c588:	4661      	mov	r1, ip
 800c58a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c58e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c592:	da09      	bge.n	800c5a8 <scalbn+0xa8>
 800c594:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c598:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c59c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c5a0:	480e      	ldr	r0, [pc, #56]	@ (800c5dc <scalbn+0xdc>)
 800c5a2:	f041 011f 	orr.w	r1, r1, #31
 800c5a6:	e7c1      	b.n	800c52c <scalbn+0x2c>
 800c5a8:	3236      	adds	r2, #54	@ 0x36
 800c5aa:	f36f 531e 	bfc	r3, #20, #11
 800c5ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5b2:	4658      	mov	r0, fp
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4b09      	ldr	r3, [pc, #36]	@ (800c5e0 <scalbn+0xe0>)
 800c5ba:	e7d5      	b.n	800c568 <scalbn+0x68>
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	c2f8f359 	.word	0xc2f8f359
 800c5c4:	01a56e1f 	.word	0x01a56e1f
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	43500000 	.word	0x43500000
 800c5d4:	ffff3cb0 	.word	0xffff3cb0
 800c5d8:	8800759c 	.word	0x8800759c
 800c5dc:	c2f8f359 	.word	0xc2f8f359
 800c5e0:	3c900000 	.word	0x3c900000

0800c5e4 <with_errno>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	4616      	mov	r6, r2
 800c5ec:	f7fe fd64 	bl	800b0b8 <__errno>
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	6006      	str	r6, [r0, #0]
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}

0800c5f8 <xflow>:
 800c5f8:	b513      	push	{r0, r1, r4, lr}
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4610      	mov	r0, r2
 800c600:	b10c      	cbz	r4, 800c606 <xflow+0xe>
 800c602:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c606:	e9cd 2300 	strd	r2, r3, [sp]
 800c60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60e:	f7f3 ff63 	bl	80004d8 <__aeabi_dmul>
 800c612:	2222      	movs	r2, #34	@ 0x22
 800c614:	b002      	add	sp, #8
 800c616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c61a:	f7ff bfe3 	b.w	800c5e4 <with_errno>

0800c61e <__math_uflow>:
 800c61e:	2200      	movs	r2, #0
 800c620:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c624:	f7ff bfe8 	b.w	800c5f8 <xflow>

0800c628 <__math_oflow>:
 800c628:	2200      	movs	r2, #0
 800c62a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c62e:	f7ff bfe3 	b.w	800c5f8 <xflow>
	...

0800c634 <__ieee754_sqrt>:
 800c634:	4a65      	ldr	r2, [pc, #404]	@ (800c7cc <__ieee754_sqrt+0x198>)
 800c636:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	438a      	bics	r2, r1
 800c63c:	4606      	mov	r6, r0
 800c63e:	460f      	mov	r7, r1
 800c640:	460b      	mov	r3, r1
 800c642:	4604      	mov	r4, r0
 800c644:	d10e      	bne.n	800c664 <__ieee754_sqrt+0x30>
 800c646:	4602      	mov	r2, r0
 800c648:	f7f3 ff46 	bl	80004d8 <__aeabi_dmul>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4630      	mov	r0, r6
 800c652:	4639      	mov	r1, r7
 800c654:	f7f3 fd8a 	bl	800016c <__adddf3>
 800c658:	4606      	mov	r6, r0
 800c65a:	460f      	mov	r7, r1
 800c65c:	4630      	mov	r0, r6
 800c65e:	4639      	mov	r1, r7
 800c660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	2900      	cmp	r1, #0
 800c666:	dc0c      	bgt.n	800c682 <__ieee754_sqrt+0x4e>
 800c668:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c66c:	4302      	orrs	r2, r0
 800c66e:	d0f5      	beq.n	800c65c <__ieee754_sqrt+0x28>
 800c670:	b189      	cbz	r1, 800c696 <__ieee754_sqrt+0x62>
 800c672:	4602      	mov	r2, r0
 800c674:	f7f3 fd78 	bl	8000168 <__aeabi_dsub>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	f7f4 f856 	bl	800072c <__aeabi_ddiv>
 800c680:	e7ea      	b.n	800c658 <__ieee754_sqrt+0x24>
 800c682:	150a      	asrs	r2, r1, #20
 800c684:	d115      	bne.n	800c6b2 <__ieee754_sqrt+0x7e>
 800c686:	2100      	movs	r1, #0
 800c688:	e009      	b.n	800c69e <__ieee754_sqrt+0x6a>
 800c68a:	0ae3      	lsrs	r3, r4, #11
 800c68c:	3a15      	subs	r2, #21
 800c68e:	0564      	lsls	r4, r4, #21
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0fa      	beq.n	800c68a <__ieee754_sqrt+0x56>
 800c694:	e7f7      	b.n	800c686 <__ieee754_sqrt+0x52>
 800c696:	460a      	mov	r2, r1
 800c698:	e7fa      	b.n	800c690 <__ieee754_sqrt+0x5c>
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	3101      	adds	r1, #1
 800c69e:	02d8      	lsls	r0, r3, #11
 800c6a0:	d5fb      	bpl.n	800c69a <__ieee754_sqrt+0x66>
 800c6a2:	1e48      	subs	r0, r1, #1
 800c6a4:	1a12      	subs	r2, r2, r0
 800c6a6:	f1c1 0020 	rsb	r0, r1, #32
 800c6aa:	fa24 f000 	lsr.w	r0, r4, r0
 800c6ae:	4303      	orrs	r3, r0
 800c6b0:	408c      	lsls	r4, r1
 800c6b2:	2700      	movs	r7, #0
 800c6b4:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800c6b8:	2116      	movs	r1, #22
 800c6ba:	07d2      	lsls	r2, r2, #31
 800c6bc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6ca:	bf5c      	itt	pl
 800c6cc:	005b      	lslpl	r3, r3, #1
 800c6ce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c6d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6d6:	bf58      	it	pl
 800c6d8:	0064      	lslpl	r4, r4, #1
 800c6da:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c6de:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c6e2:	0064      	lsls	r4, r4, #1
 800c6e4:	1815      	adds	r5, r2, r0
 800c6e6:	429d      	cmp	r5, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	182a      	addle	r2, r5, r0
 800c6ec:	1b5b      	suble	r3, r3, r5
 800c6ee:	183f      	addle	r7, r7, r0
 800c6f0:	0fe5      	lsrs	r5, r4, #31
 800c6f2:	3901      	subs	r1, #1
 800c6f4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c6f8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c6fc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c700:	d1f0      	bne.n	800c6e4 <__ieee754_sqrt+0xb0>
 800c702:	460d      	mov	r5, r1
 800c704:	2620      	movs	r6, #32
 800c706:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c70a:	4293      	cmp	r3, r2
 800c70c:	eb00 0c01 	add.w	ip, r0, r1
 800c710:	dc02      	bgt.n	800c718 <__ieee754_sqrt+0xe4>
 800c712:	d113      	bne.n	800c73c <__ieee754_sqrt+0x108>
 800c714:	45a4      	cmp	ip, r4
 800c716:	d811      	bhi.n	800c73c <__ieee754_sqrt+0x108>
 800c718:	f1bc 0f00 	cmp.w	ip, #0
 800c71c:	eb0c 0100 	add.w	r1, ip, r0
 800c720:	da3e      	bge.n	800c7a0 <__ieee754_sqrt+0x16c>
 800c722:	2900      	cmp	r1, #0
 800c724:	db3c      	blt.n	800c7a0 <__ieee754_sqrt+0x16c>
 800c726:	f102 0e01 	add.w	lr, r2, #1
 800c72a:	1a9b      	subs	r3, r3, r2
 800c72c:	4672      	mov	r2, lr
 800c72e:	45a4      	cmp	ip, r4
 800c730:	bf88      	it	hi
 800c732:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c736:	eba4 040c 	sub.w	r4, r4, ip
 800c73a:	4405      	add	r5, r0
 800c73c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c740:	3e01      	subs	r6, #1
 800c742:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c746:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c74a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c74e:	d1dc      	bne.n	800c70a <__ieee754_sqrt+0xd6>
 800c750:	431c      	orrs	r4, r3
 800c752:	d01a      	beq.n	800c78a <__ieee754_sqrt+0x156>
 800c754:	4c1e      	ldr	r4, [pc, #120]	@ (800c7d0 <__ieee754_sqrt+0x19c>)
 800c756:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c7d4 <__ieee754_sqrt+0x1a0>
 800c75a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c75e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c762:	f7f3 fd01 	bl	8000168 <__aeabi_dsub>
 800c766:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4650      	mov	r0, sl
 800c770:	4659      	mov	r1, fp
 800c772:	f7f4 f92d 	bl	80009d0 <__aeabi_dcmple>
 800c776:	b140      	cbz	r0, 800c78a <__ieee754_sqrt+0x156>
 800c778:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c77c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c780:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c784:	d10e      	bne.n	800c7a4 <__ieee754_sqrt+0x170>
 800c786:	4635      	mov	r5, r6
 800c788:	3701      	adds	r7, #1
 800c78a:	107b      	asrs	r3, r7, #1
 800c78c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c790:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c794:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800c798:	086b      	lsrs	r3, r5, #1
 800c79a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800c79e:	e75b      	b.n	800c658 <__ieee754_sqrt+0x24>
 800c7a0:	4696      	mov	lr, r2
 800c7a2:	e7c2      	b.n	800c72a <__ieee754_sqrt+0xf6>
 800c7a4:	f7f3 fce2 	bl	800016c <__adddf3>
 800c7a8:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	4659      	mov	r1, fp
 800c7b4:	f7f4 f902 	bl	80009bc <__aeabi_dcmplt>
 800c7b8:	b120      	cbz	r0, 800c7c4 <__ieee754_sqrt+0x190>
 800c7ba:	1cab      	adds	r3, r5, #2
 800c7bc:	bf08      	it	eq
 800c7be:	3701      	addeq	r7, #1
 800c7c0:	3502      	adds	r5, #2
 800c7c2:	e7e2      	b.n	800c78a <__ieee754_sqrt+0x156>
 800c7c4:	1c6b      	adds	r3, r5, #1
 800c7c6:	f023 0501 	bic.w	r5, r3, #1
 800c7ca:	e7de      	b.n	800c78a <__ieee754_sqrt+0x156>
 800c7cc:	7ff00000 	.word	0x7ff00000
 800c7d0:	0800df60 	.word	0x0800df60
 800c7d4:	0800df58 	.word	0x0800df58

0800c7d8 <_init>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	bf00      	nop
 800c7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7de:	bc08      	pop	{r3}
 800c7e0:	469e      	mov	lr, r3
 800c7e2:	4770      	bx	lr

0800c7e4 <_fini>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	bf00      	nop
 800c7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ea:	bc08      	pop	{r3}
 800c7ec:	469e      	mov	lr, r3
 800c7ee:	4770      	bx	lr
