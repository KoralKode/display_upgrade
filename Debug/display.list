
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001770  0800c1b0  0800c1b0  0000d1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d920  0800d920  0000f1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d920  0800d920  0000e920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d928  0800d928  0000f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d928  0800d928  0000e928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d92c  0800d92c  0000e92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800d930  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016dc  200001cc  0800dafc  0000f1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a8  0800dafc  0000f8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e95  00000000  00000000  0000f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b0  00000000  00000000  0002508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00028a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8d  00000000  00000000  00029e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af64  00000000  00000000  0002adfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b16  00000000  00000000  00045d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cfb  00000000  00000000  0005f877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  000f05b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f640c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c198 	.word	0x0800c198

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800c198 	.word	0x0800c198

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <int_to_str>:

    return ERROR_NONE;
}


void int_to_str(int num, char *str) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d125      	bne.n	8000ae8 <int_to_str+0x60>
        str[0] = '0';
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2230      	movs	r2, #48	@ 0x30
 8000aa0:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e039      	b.n	8000b20 <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <int_to_str+0xa0>)
 8000ab0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab4:	1099      	asrs	r1, r3, #2
 8000ab6:	17d3      	asrs	r3, r2, #31
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad1      	subs	r1, r2, r3
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	1c59      	adds	r1, r3, #1
 8000aca:	61f9      	str	r1, [r7, #28]
 8000acc:	3230      	adds	r2, #48	@ 0x30
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	3320      	adds	r3, #32
 8000ad2:	443b      	add	r3, r7
 8000ad4:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <int_to_str+0xa0>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1092      	asrs	r2, r2, #2
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dcde      	bgt.n	8000aac <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 8000af2:	e00b      	b.n	8000b0c <int_to_str+0x84>
        str[j++] = tmp[i];
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	61ba      	str	r2, [r7, #24]
 8000afa:	461a      	mov	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f107 010c 	add.w	r1, r7, #12
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	440a      	add	r2, r1
 8000b08:	7812      	ldrb	r2, [r2, #0]
 8000b0a:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	61fa      	str	r2, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dcee      	bgt.n	8000af4 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
}
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	66666667 	.word	0x66666667

08000b2c <get_encoder>:

int get_encoder(){
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <get_encoder+0x18>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	da00      	bge.n	8000b3a <get_encoder+0xe>
 8000b38:	3303      	adds	r3, #3
 8000b3a:	109b      	asrs	r3, r3, #2
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <set_encoder>:

void set_encoder(int e){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	009a      	lsls	r2, r3, #2
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <set_encoder+0x1c>)
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <print_interface_mode0>:


void print_interface_mode0(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2001      	movs	r0, #1
 8000b72:	f001 f957 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f001 f80a 	bl	8001b90 <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b84:	4824      	ldr	r0, [pc, #144]	@ (8000c18 <print_interface_mode0+0xb0>)
 8000b86:	f001 f927 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	9200      	str	r2, [sp, #0]
 8000b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b92:	4822      	ldr	r0, [pc, #136]	@ (8000c1c <print_interface_mode0+0xb4>)
 8000b94:	f001 f920 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8000b98:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <print_interface_mode0+0xac>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba0:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <print_interface_mode0+0xb8>)
 8000ba2:	f001 f919 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 f93b 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb6:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <print_interface_mode0+0xbc>)
 8000bb8:	f001 f90e 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc4:	4815      	ldr	r0, [pc, #84]	@ (8000c1c <print_interface_mode0+0xb4>)
 8000bc6:	f001 f907 	bl	8001dd8 <ssd1306_WriteString>
	if(choiced_channel==0){
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <print_interface_mode0+0xc0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d107      	bne.n	8000be2 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <print_interface_mode0+0xc4>)
 8000bdc:	f001 f8fc 	bl	8001dd8 <ssd1306_WriteString>
 8000be0:	e012      	b.n	8000c08 <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <print_interface_mode0+0xc0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d107      	bne.n	8000bfa <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	9200      	str	r2, [sp, #0]
 8000bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bf2:	480f      	ldr	r0, [pc, #60]	@ (8000c30 <print_interface_mode0+0xc8>)
 8000bf4:	f001 f8f0 	bl	8001dd8 <ssd1306_WriteString>
 8000bf8:	e006      	b.n	8000c08 <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <print_interface_mode0+0xac>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <print_interface_mode0+0xcc>)
 8000c04:	f001 f8e8 	bl	8001dd8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000c08:	f000 ffda 	bl	8001bc0 <ssd1306_UpdateScreen>
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800d77c 	.word	0x0800d77c
 8000c18:	20000334 	.word	0x20000334
 8000c1c:	0800c1b0 	.word	0x0800c1b0
 8000c20:	2000033b 	.word	0x2000033b
 8000c24:	20000342 	.word	0x20000342
 8000c28:	2000034a 	.word	0x2000034a
 8000c2c:	0800c1b4 	.word	0x0800c1b4
 8000c30:	0800c1b8 	.word	0x0800c1b8
 8000c34:	0800c1bc 	.word	0x0800c1bc

08000c38 <print_interface_mode1>:

void print_interface_mode1(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(1, 1);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2001      	movs	r0, #1
 8000c42:	f001 f8ef 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 ffa2 	bl	8001b90 <ssd1306_Fill>
	if(choiced_num==0){
 8000c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d139      	bne.n	8000cc8 <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 8000c54:	4b5b      	ldr	r3, [pc, #364]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	4a59      	ldr	r2, [pc, #356]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fa73 	bl	8000150 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 8000c6e:	893b      	ldrh	r3, [r7, #8]
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 8000c74:	4b55      	ldr	r3, [pc, #340]	@ (8000dcc <print_interface_mode1+0x194>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	9200      	str	r2, [sp, #0]
 8000c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c7c:	4854      	ldr	r0, [pc, #336]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000c7e:	f001 f8ab 	bl	8001dd8 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	ddf2      	ble.n	8000c74 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4613      	mov	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000c9c:	1898      	adds	r0, r3, r2
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <print_interface_mode1+0x194>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca6:	f001 f897 	bl	8001dd8 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 8000caa:	4b48      	ldr	r3, [pc, #288]	@ (8000dcc <print_interface_mode1+0x194>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb2:	4848      	ldr	r0, [pc, #288]	@ (8000dd4 <print_interface_mode1+0x19c>)
 8000cb4:	f001 f890 	bl	8001dd8 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc0:	4846      	ldr	r0, [pc, #280]	@ (8000ddc <print_interface_mode1+0x1a4>)
 8000cc2:	f001 f889 	bl	8001dd8 <ssd1306_WriteString>
 8000cc6:	e075      	b.n	8000db4 <print_interface_mode1+0x17c>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fa39 	bl	8000150 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e017      	b.n	8000d18 <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d107      	bne.n	8000d04 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	9200      	str	r2, [sp, #0]
 8000cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfc:	4834      	ldr	r0, [pc, #208]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000cfe:	f001 f86b 	bl	8001dd8 <ssd1306_WriteString>
 8000d02:	e006      	b.n	8000d12 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0c:	4830      	ldr	r0, [pc, #192]	@ (8000dd0 <print_interface_mode1+0x198>)
 8000d0e:	f001 f863 	bl	8001dd8 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	897b      	ldrh	r3, [r7, #10]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dae3      	bge.n	8000ce8 <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e034      	b.n	8000d90 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 8000d26:	897b      	ldrh	r3, [r7, #10]
 8000d28:	4a25      	ldr	r2, [pc, #148]	@ (8000dc0 <print_interface_mode1+0x188>)
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d115      	bne.n	8000d60 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	441a      	add	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	713b      	strb	r3, [r7, #4]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <print_interface_mode1+0x1a0>)
 8000d52:	1d38      	adds	r0, r7, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	9200      	str	r2, [sp, #0]
 8000d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5a:	f001 f83d 	bl	8001dd8 <ssd1306_WriteString>
 8000d5e:	e014      	b.n	8000d8a <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <print_interface_mode1+0x18c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <print_interface_mode1+0x190>)
 8000d68:	460b      	mov	r3, r1
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	441a      	add	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	703b      	strb	r3, [r7, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d7e:	4638      	mov	r0, r7
 8000d80:	2201      	movs	r2, #1
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d86:	f001 f827 	bl	8001dd8 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	897b      	ldrh	r3, [r7, #10]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbc6      	blt.n	8000d26 <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <print_interface_mode1+0x194>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <print_interface_mode1+0x19c>)
 8000da2:	f001 f819 	bl	8001dd8 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <print_interface_mode1+0x194>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dae:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <print_interface_mode1+0x1a4>)
 8000db0:	f001 f812 	bl	8001dd8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000db4:	f000 ff04 	bl	8001bc0 <ssd1306_UpdateScreen>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000349 	.word	0x20000349
 8000dc4:	2000034a 	.word	0x2000034a
 8000dc8:	20000334 	.word	0x20000334
 8000dcc:	0800d77c 	.word	0x0800d77c
 8000dd0:	0800c1c0 	.word	0x0800c1c0
 8000dd4:	0800c1b0 	.word	0x0800c1b0
 8000dd8:	0800d788 	.word	0x0800d788
 8000ddc:	0800c1c4 	.word	0x0800c1c4

08000de0 <int_mode_0>:

void int_mode_0(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000de4:	2102      	movs	r1, #2
 8000de6:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <int_mode_0+0x7c>)
 8000de8:	f001 fb7e 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <int_mode_0+0x18>
		choice=1;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <int_mode_0+0x80>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);  // Ждём отпускания
 8000df8:	bf00      	nop
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <int_mode_0+0x7c>)
 8000dfe:	f001 fb73 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f8      	beq.n	8000dfa <int_mode_0+0x1a>
	if(choice==0){
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <int_mode_0+0x80>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d111      	bne.n	8000e34 <int_mode_0+0x54>
		choiced_channel=get_encoder()%3;
 8000e10:	f7ff fe8c 	bl	8000b2c <get_encoder>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <int_mode_0+0x84>)
 8000e18:	fb83 3102 	smull	r3, r1, r3, r2
 8000e1c:	17d3      	asrs	r3, r2, #31
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	460b      	mov	r3, r1
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	440b      	add	r3, r1
 8000e26:	1ad1      	subs	r1, r2, r3
 8000e28:	b2ca      	uxtb	r2, r1
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <int_mode_0+0x88>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 8000e2e:	f7ff fe9b 	bl	8000b68 <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 8000e32:	e011      	b.n	8000e58 <int_mode_0+0x78>
	}else if(choice==1){
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <int_mode_0+0x80>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10d      	bne.n	8000e58 <int_mode_0+0x78>
		set_encoder(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fe83 	bl	8000b48 <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <int_mode_0+0x8c>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <int_mode_0+0x90>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		choice=0;
 8000e4e:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <int_mode_0+0x80>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8000e54:	f7ff fef0 	bl	8000c38 <print_interface_mode1>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	20000330 	.word	0x20000330
 8000e64:	55555556 	.word	0x55555556
 8000e68:	2000034a 	.word	0x2000034a
 8000e6c:	20000349 	.word	0x20000349
 8000e70:	2000034b 	.word	0x2000034b

08000e74 <min_freq>:



void min_freq(){
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <min_freq+0x38>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <min_freq+0x3c>)
 8000e80:	460b      	mov	r3, r1
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	4413      	add	r3, r2
 8000e88:	2238      	movs	r2, #56	@ 0x38
 8000e8a:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <min_freq+0x38>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <min_freq+0x3c>)
 8000e94:	460b      	mov	r3, r1
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000034a 	.word	0x2000034a
 8000eb0:	20000334 	.word	0x20000334

08000eb4 <max_freq>:

void max_freq(){
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <max_freq+0xa4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4a27      	ldr	r2, [pc, #156]	@ (8000f5c <max_freq+0xa8>)
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2231      	movs	r2, #49	@ 0x31
 8000eca:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <max_freq+0xa4>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <max_freq+0xa8>)
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	4413      	add	r3, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	2236      	movs	r2, #54	@ 0x36
 8000ee0:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <max_freq+0xa4>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <max_freq+0xa8>)
 8000eea:	460b      	mov	r3, r1
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	1a5b      	subs	r3, r3, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	2230      	movs	r2, #48	@ 0x30
 8000ef6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <max_freq+0xa4>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <max_freq+0xa8>)
 8000f00:	460b      	mov	r3, r1
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	4413      	add	r3, r2
 8000f08:	3303      	adds	r3, #3
 8000f0a:	2230      	movs	r2, #48	@ 0x30
 8000f0c:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <max_freq+0xa4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <max_freq+0xa8>)
 8000f16:	460b      	mov	r3, r1
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	1a5b      	subs	r3, r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	2230      	movs	r2, #48	@ 0x30
 8000f22:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <max_freq+0xa4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f5c <max_freq+0xa8>)
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4413      	add	r3, r2
 8000f34:	3305      	adds	r3, #5
 8000f36:	2230      	movs	r2, #48	@ 0x30
 8000f38:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <max_freq+0xa4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <max_freq+0xa8>)
 8000f42:	460b      	mov	r3, r1
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	4413      	add	r3, r2
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000034a 	.word	0x2000034a
 8000f5c:	20000334 	.word	0x20000334

08000f60 <int_mode_1>:

void int_mode_1(){
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8000f66:	2102      	movs	r1, #2
 8000f68:	4895      	ldr	r0, [pc, #596]	@ (80011c0 <int_mode_1+0x260>)
 8000f6a:	f001 fabd 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d11b      	bne.n	8000fac <int_mode_1+0x4c>
		if(choice==0){
 8000f74:	4b93      	ldr	r3, [pc, #588]	@ (80011c4 <int_mode_1+0x264>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <int_mode_1+0x3c>

			choice=1;
 8000f7c:	4b91      	ldr	r3, [pc, #580]	@ (80011c4 <int_mode_1+0x264>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 8000f82:	4b91      	ldr	r3, [pc, #580]	@ (80011c8 <int_mode_1+0x268>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d010      	beq.n	8000fac <int_mode_1+0x4c>
				prev_encoder=1000;
 8000f8a:	4b90      	ldr	r3, [pc, #576]	@ (80011cc <int_mode_1+0x26c>)
 8000f8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f90:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f96:	f7ff fdd7 	bl	8000b48 <set_encoder>
 8000f9a:	e007      	b.n	8000fac <int_mode_1+0x4c>

			}
		}else{
			choice=0;
 8000f9c:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <int_mode_1+0x264>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 8000fa2:	4b89      	ldr	r3, [pc, #548]	@ (80011c8 <int_mode_1+0x268>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fdce 	bl	8000b48 <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);  // Ждём отпускания
 8000fac:	bf00      	nop
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4883      	ldr	r0, [pc, #524]	@ (80011c0 <int_mode_1+0x260>)
 8000fb2:	f001 fa99 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f8      	beq.n	8000fae <int_mode_1+0x4e>
	if(choice==0){
 8000fbc:	4b81      	ldr	r3, [pc, #516]	@ (80011c4 <int_mode_1+0x264>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d113      	bne.n	8000fec <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 8000fc4:	f7ff fdb2 	bl	8000b2c <get_encoder>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b81      	ldr	r3, [pc, #516]	@ (80011d0 <int_mode_1+0x270>)
 8000fcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	1099      	asrs	r1, r3, #2
 8000fd4:	17d3      	asrs	r3, r2, #31
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	460b      	mov	r3, r1
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	1a5b      	subs	r3, r3, r1
 8000fde:	1ad1      	subs	r1, r2, r3
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	4b79      	ldr	r3, [pc, #484]	@ (80011c8 <int_mode_1+0x268>)
 8000fe4:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8000fe6:	f7ff fe27 	bl	8000c38 <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
			print_interface_mode1();

		}
	}
}
 8000fea:	e0e4      	b.n	80011b6 <int_mode_1+0x256>
	}else if(choice==1){
 8000fec:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <int_mode_1+0x264>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f040 80e0 	bne.w	80011b6 <int_mode_1+0x256>
		if(choiced_num==0){
 8000ff6:	4b74      	ldr	r3, [pc, #464]	@ (80011c8 <int_mode_1+0x268>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d131      	bne.n	8001062 <int_mode_1+0x102>
			choice=0;
 8000ffe:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <int_mode_1+0x264>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 8001004:	4b73      	ldr	r3, [pc, #460]	@ (80011d4 <int_mode_1+0x274>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			if(freq[choiced_channel]<8){
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <int_mode_1+0x278>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <int_mode_1+0x27c>)
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	2b07      	cmp	r3, #7
 8001018:	dc09      	bgt.n	800102e <int_mode_1+0xce>
				freq[choiced_channel]=8;
 800101a:	4b6f      	ldr	r3, [pc, #444]	@ (80011d8 <int_mode_1+0x278>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4b6e      	ldr	r3, [pc, #440]	@ (80011dc <int_mode_1+0x27c>)
 8001022:	2208      	movs	r2, #8
 8001024:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 8001028:	f7ff ff24 	bl	8000e74 <min_freq>
 800102c:	e011      	b.n	8001052 <int_mode_1+0xf2>
			}else if(freq[choiced_channel]>160000){
 800102e:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <int_mode_1+0x278>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b69      	ldr	r3, [pc, #420]	@ (80011dc <int_mode_1+0x27c>)
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	4a69      	ldr	r2, [pc, #420]	@ (80011e0 <int_mode_1+0x280>)
 800103c:	4293      	cmp	r3, r2
 800103e:	dd08      	ble.n	8001052 <int_mode_1+0xf2>
				freq[choiced_channel]=160000;
 8001040:	4b65      	ldr	r3, [pc, #404]	@ (80011d8 <int_mode_1+0x278>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <int_mode_1+0x27c>)
 8001048:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <int_mode_1+0x280>)
 800104a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 800104e:	f7ff ff31 	bl	8000eb4 <max_freq>
			set_encoder(choiced_channel);
 8001052:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <int_mode_1+0x278>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fd76 	bl	8000b48 <set_encoder>
			print_interface_mode0();
 800105c:	f7ff fd84 	bl	8000b68 <print_interface_mode0>
}
 8001060:	e0a9      	b.n	80011b6 <int_mode_1+0x256>
			int delta = get_encoder();
 8001062:	f7ff fd63 	bl	8000b2c <get_encoder>
 8001066:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);
 8001068:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <int_mode_1+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f9c7 	bl	8000404 <__aeabi_i2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <int_mode_1+0x268>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9bf 	bl	8000404 <__aeabi_i2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4955      	ldr	r1, [pc, #340]	@ (80011e4 <int_mode_1+0x284>)
 8001090:	f00a f978 	bl	800b384 <pow>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff fa1c 	bl	80004d8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4614      	mov	r4, r2
 80010a6:	461d      	mov	r5, r3
 80010a8:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <int_mode_1+0x278>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <int_mode_1+0x27c>)
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9a5 	bl	8000404 <__aeabi_i2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff f853 	bl	800016c <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4943      	ldr	r1, [pc, #268]	@ (80011d8 <int_mode_1+0x278>)
 80010cc:	7809      	ldrb	r1, [r1, #0]
 80010ce:	460c      	mov	r4, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fcb0 	bl	8000a38 <__aeabi_d2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a40      	ldr	r2, [pc, #256]	@ (80011dc <int_mode_1+0x27c>)
 80010dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 80010e0:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <int_mode_1+0x278>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <int_mode_1+0x27c>)
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da10      	bge.n	8001112 <int_mode_1+0x1b2>
				freq[choiced_channel]=1000000+freq[choiced_channel];
 80010f0:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <int_mode_1+0x278>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <int_mode_1+0x27c>)
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	4a36      	ldr	r2, [pc, #216]	@ (80011d8 <int_mode_1+0x278>)
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	4611      	mov	r1, r2
 8001102:	f503 2374 	add.w	r3, r3, #999424	@ 0xf4000
 8001106:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800110a:	4a34      	ldr	r2, [pc, #208]	@ (80011dc <int_mode_1+0x27c>)
 800110c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001110:	e03a      	b.n	8001188 <int_mode_1+0x228>
			}else if(freq[choiced_channel]>999999){
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <int_mode_1+0x278>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <int_mode_1+0x27c>)
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	4a32      	ldr	r2, [pc, #200]	@ (80011e8 <int_mode_1+0x288>)
 8001120:	4293      	cmp	r3, r2
 8001122:	dd31      	ble.n	8001188 <int_mode_1+0x228>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <int_mode_1+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f969 	bl	8000404 <__aeabi_i2d>
 8001132:	4604      	mov	r4, r0
 8001134:	460d      	mov	r5, r1
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <int_mode_1+0x268>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4926      	ldr	r1, [pc, #152]	@ (80011e4 <int_mode_1+0x284>)
 800114c:	f00a f91a 	bl	800b384 <pow>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f9be 	bl	80004d8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <int_mode_1+0x28c>)
 800116a:	f7fe ffff 	bl	800016c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4919      	ldr	r1, [pc, #100]	@ (80011d8 <int_mode_1+0x278>)
 8001174:	7809      	ldrb	r1, [r1, #0]
 8001176:	460c      	mov	r4, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc5c 	bl	8000a38 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a16      	ldr	r2, [pc, #88]	@ (80011dc <int_mode_1+0x27c>)
 8001184:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <int_mode_1+0x26c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <int_mode_1+0x278>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <int_mode_1+0x27c>)
 8001196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <int_mode_1+0x278>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	460b      	mov	r3, r1
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	1a5b      	subs	r3, r3, r1
 80011a6:	4912      	ldr	r1, [pc, #72]	@ (80011f0 <int_mode_1+0x290>)
 80011a8:	440b      	add	r3, r1
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f7ff fc6b 	bl	8000a88 <int_to_str>
			print_interface_mode1();
 80011b2:	f7ff fd41 	bl	8000c38 <print_interface_mode1>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	40010800 	.word	0x40010800
 80011c4:	20000330 	.word	0x20000330
 80011c8:	20000349 	.word	0x20000349
 80011cc:	2000032c 	.word	0x2000032c
 80011d0:	92492493 	.word	0x92492493
 80011d4:	2000034b 	.word	0x2000034b
 80011d8:	2000034a 	.word	0x2000034a
 80011dc:	20000320 	.word	0x20000320
 80011e0:	00027100 	.word	0x00027100
 80011e4:	40240000 	.word	0x40240000
 80011e8:	000f423f 	.word	0x000f423f
 80011ec:	401c0000 	.word	0x401c0000
 80011f0:	20000334 	.word	0x20000334

080011f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001204:	d108      	bne.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	if(interface_mode==0){
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x20>
    		int_mode_0();
 800120e:	f7ff fde7 	bl	8000de0 <int_mode_0>
    	}else{
    		int_mode_1();
    	}
    }
}
 8001212:	e001      	b.n	8001218 <HAL_TIM_PeriodElapsedCallback+0x24>
    		int_mode_1();
 8001214:	f7ff fea4 	bl	8000f60 <int_mode_1>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000034b 	.word	0x2000034b

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fe46 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f850 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f9b6 	bl	80015a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001234:	f000 f8a6 	bl	8001384 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001238:	f000 f900 	bl	800143c <MX_TIM1_Init>
  MX_I2C2_Init();
 800123c:	f000 f8d0 	bl	80013e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001240:	f000 f954 	bl	80014ec <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001244:	f008 fd72 	bl	8009d2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001248:	213c      	movs	r1, #60	@ 0x3c
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <main+0x8c>)
 800124c:	f004 f97d 	bl	800554a <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001250:	f000 fc34 	bl	8001abc <ssd1306_Init>
  //si5351_Init();
  set_encoder(0);//выставление энкодера в 0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fc77 	bl	8000b48 <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <main+0x90>)
 800125c:	2208      	movs	r2, #8
 800125e:	601a      	str	r2, [r3, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <main+0x90>)
 8001262:	2208      	movs	r2, #8
 8001264:	605a      	str	r2, [r3, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <main+0x90>)
 8001268:	2208      	movs	r2, #8
 800126a:	609a      	str	r2, [r3, #8]
      choice=0;//переменная для считывания был ли нажат энкодер
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <main+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
      choiced_channel=2;
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x98>)
 8001274:	2202      	movs	r2, #2
 8001276:	701a      	strb	r2, [r3, #0]
      min_freq();
 8001278:	f7ff fdfc 	bl	8000e74 <min_freq>
      choiced_channel=1;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <main+0x98>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
      min_freq();
 8001282:	f7ff fdf7 	bl	8000e74 <min_freq>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <main+0x9c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
      choiced_channel=0;// номер выбранного канала
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <main+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
      min_freq();
 8001292:	f7ff fdef 	bl	8000e74 <min_freq>
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <main+0xa0>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
      prev_encoder=8;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <main+0xa4>)
 800129e:	2208      	movs	r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
      print_interface_mode0();
 80012a2:	f7ff fc61 	bl	8000b68 <print_interface_mode0>
  si5351_set_frequency(1, 8000);//устанвливаем частоту в минимальную
  si5351_set_frequency(2, 8000);//устанвливаем частоту в минимальную
  si5351_enableOutputs(0xFF);//включаем все выходы
  */

  HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <main+0xa8>)
 80012a8:	f004 f80c 	bl	80052c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <main+0x88>
 80012b0:	20000290 	.word	0x20000290
 80012b4:	20000320 	.word	0x20000320
 80012b8:	20000330 	.word	0x20000330
 80012bc:	2000034a 	.word	0x2000034a
 80012c0:	20000349 	.word	0x20000349
 80012c4:	2000034b 	.word	0x2000034b
 80012c8:	2000032c 	.word	0x2000032c
 80012cc:	200002d8 	.word	0x200002d8

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	2228      	movs	r2, #40	@ 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f009 fbb0 	bl	800aa44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800131c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001320:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fb1a 	bl	8004960 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001332:	f000 f99b 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800133e:	2390      	movs	r3, #144	@ 0x90
 8001340:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f003 fd87 	bl	8004e64 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800135c:	f000 f986 	bl	800166c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001360:	2310      	movs	r3, #16
 8001362:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001364:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fef3 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001378:	f000 f978 	bl	800166c <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	@ 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C1_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C1_Init+0x50>)
 80013c2:	f001 f8c1 	bl	8002548 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 f94e 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001e8 	.word	0x200001e8
 80013d8:	40005400 	.word	0x40005400
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_I2C2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_I2C2_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_I2C2_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2C2_Init+0x50>)
 800141e:	f001 f893 	bl	8002548 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f920 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000023c 	.word	0x2000023c
 8001434:	40005800 	.word	0x40005800
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	@ 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f009 fafa 	bl	800aa44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <MX_TIM1_Init+0xac>)
 800145c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 800146c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001484:	2303      	movs	r3, #3
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800149c:	2301      	movs	r3, #1
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 80014b0:	f003 ffa9 	bl	8005406 <HAL_TIM_Encoder_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014ba:	f000 f8d7 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <MX_TIM1_Init+0xa8>)
 80014cc:	f004 fcbc 	bl	8005e48 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014d6:	f000 f8c9 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3730      	adds	r7, #48	@ 0x30
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000290 	.word	0x20000290
 80014e8:	40012c00 	.word	0x40012c00

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 599;
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001518:	f240 2257 	movw	r2, #599	@ 0x257
 800151c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001526:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_TIM2_Init+0xb0>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001538:	4818      	ldr	r0, [pc, #96]	@ (800159c <MX_TIM2_Init+0xb0>)
 800153a:	f003 ff15 	bl	8005368 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001544:	f000 f892 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	@ (800159c <MX_TIM2_Init+0xb0>)
 8001558:	f004 fc76 	bl	8005e48 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001562:	f000 f883 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	@ 0x60
 8001568:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM2_Init+0xb0>)
 800157e:	f004 f963 	bl	8005848 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001588:	f000 f870 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM2_Init+0xb0>)
 800158e:	f000 f975 	bl	800187c <HAL_TIM_MspPostInit>

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002d8 	.word	0x200002d8

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015d2:	f043 0320 	orr.w	r3, r3, #32
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_GPIO_Init+0xc0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <MX_GPIO_Init+0xc0>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_GPIO_Init+0xc0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800161a:	4812      	ldr	r0, [pc, #72]	@ (8001664 <MX_GPIO_Init+0xc4>)
 800161c:	f000 ff7b 	bl	8002516 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2302      	movs	r3, #2
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	480a      	ldr	r0, [pc, #40]	@ (8001664 <MX_GPIO_Init+0xc4>)
 800163a:	f000 fdd1 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_GPIO_Init+0xc8>)
 8001652:	f000 fdc5 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40011000 	.word	0x40011000
 8001668:	40010800 	.word	0x40010800

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <Error_Handler+0x8>

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_MspInit+0x5c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_MspInit+0x5c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_MspInit+0x60>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <HAL_MspInit+0x60>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000

080016dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <HAL_I2C_MspInit+0xc8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d124      	bne.n	8001746 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a29      	ldr	r2, [pc, #164]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001714:	23c0      	movs	r3, #192	@ 0xc0
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4619      	mov	r1, r3
 8001726:	4821      	ldr	r0, [pc, #132]	@ (80017ac <HAL_I2C_MspInit+0xd0>)
 8001728:	f000 fd5a 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001732:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001736:	61d3      	str	r3, [r2, #28]
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001744:	e029      	b.n	800179a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_I2C_MspInit+0xd4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d124      	bne.n	800179a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001768:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	4619      	mov	r1, r3
 800177c:	480b      	ldr	r0, [pc, #44]	@ (80017ac <HAL_I2C_MspInit+0xd0>)
 800177e:	f000 fd2f 	bl	80021e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_I2C_MspInit+0xcc>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	@ 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40005800 	.word	0x40005800

080017b4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <HAL_TIM_Encoder_MspInit+0x74>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d124      	bne.n	800181e <HAL_TIM_Encoder_MspInit+0x6a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_TIM_Encoder_MspInit+0x78>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001804:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <HAL_TIM_Encoder_MspInit+0x7c>)
 800181a:	f000 fce1 	bl	80021e0 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40010800 	.word	0x40010800

08001834 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001844:	d113      	bne.n	800186e <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_TIM_PWM_MspInit+0x44>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_TIM_PWM_MspInit+0x44>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_TIM_PWM_MspInit+0x44>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201c      	movs	r0, #28
 8001864:	f000 fc85 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f000 fc9e 	bl	80021aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189a:	d12a      	bne.n	80018f2 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_TIM_MspPostInit+0x80>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_TIM_MspPostInit+0x80>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_TIM_MspPostInit+0x80>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	480d      	ldr	r0, [pc, #52]	@ (8001900 <HAL_TIM_MspPostInit+0x84>)
 80018ca:	f000 fc89 	bl	80021e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_TIM_MspPostInit+0x88>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <HAL_TIM_MspPostInit+0x88>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010000 	.word	0x40010000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 faf4 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001966:	f001 fbb7 	bl	80030d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20001268 	.word	0x20001268

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <TIM2_IRQHandler+0x10>)
 800197a:	f003 fe74 	bl	8005666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002d8 	.word	0x200002d8

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f009 f85e 	bl	800aa78 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20005000 	.word	0x20005000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	2000034c 	.word	0x2000034c
 80019f0:	200018a8 	.word	0x200018a8

080019f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff fff8 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a06:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a08:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a1c:	4c09      	ldr	r4, [pc, #36]	@ (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f009 f82b 	bl	800aa84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2e:	f7ff fbf9 	bl	8001224 <main>
  bx lr
 8001a32:	4770      	bx	lr
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001a3c:	0800d930 	.word	0x0800d930
  ldr r2, =_sbss
 8001a40:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001a44:	200018a8 	.word	0x200018a8

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>

08001a4a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	2200      	movs	r2, #0
 8001a74:	2178      	movs	r1, #120	@ 0x78
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <ssd1306_WriteCommand+0x2c>)
 8001a78:	f000 feaa 	bl	80027d0 <HAL_I2C_Mem_Write>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000023c 	.word	0x2000023c

08001a88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9a:	9202      	str	r2, [sp, #8]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2240      	movs	r2, #64	@ 0x40
 8001aa6:	2178      	movs	r1, #120	@ 0x78
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <ssd1306_WriteData+0x30>)
 8001aaa:	f000 fe91 	bl	80027d0 <HAL_I2C_Mem_Write>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000023c 	.word	0x2000023c

08001abc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ac0:	f7ff ffc3 	bl	8001a4a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ac4:	2064      	movs	r0, #100	@ 0x64
 8001ac6:	f000 fa59 	bl	8001f7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f9d6 	bl	8001e7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ad0:	2020      	movs	r0, #32
 8001ad2:	f7ff ffc1 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff ffbe 	bl	8001a58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001adc:	20b0      	movs	r0, #176	@ 0xb0
 8001ade:	f7ff ffbb 	bl	8001a58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ae2:	20c8      	movs	r0, #200	@ 0xc8
 8001ae4:	f7ff ffb8 	bl	8001a58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ffb5 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffb2 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001af4:	2040      	movs	r0, #64	@ 0x40
 8001af6:	f7ff ffaf 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001afa:	20ff      	movs	r0, #255	@ 0xff
 8001afc:	f000 f9aa 	bl	8001e54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b00:	20a1      	movs	r0, #161	@ 0xa1
 8001b02:	f7ff ffa9 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b06:	20a6      	movs	r0, #166	@ 0xa6
 8001b08:	f7ff ffa6 	bl	8001a58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b0c:	20a8      	movs	r0, #168	@ 0xa8
 8001b0e:	f7ff ffa3 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001b12:	201f      	movs	r0, #31
 8001b14:	f7ff ffa0 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b18:	20a4      	movs	r0, #164	@ 0xa4
 8001b1a:	f7ff ff9d 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b1e:	20d3      	movs	r0, #211	@ 0xd3
 8001b20:	f7ff ff9a 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff ff97 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b2a:	20d5      	movs	r0, #213	@ 0xd5
 8001b2c:	f7ff ff94 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b30:	20f0      	movs	r0, #240	@ 0xf0
 8001b32:	f7ff ff91 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b36:	20d9      	movs	r0, #217	@ 0xd9
 8001b38:	f7ff ff8e 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b3c:	2022      	movs	r0, #34	@ 0x22
 8001b3e:	f7ff ff8b 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b42:	20da      	movs	r0, #218	@ 0xda
 8001b44:	f7ff ff88 	bl	8001a58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7ff ff85 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b4e:	20db      	movs	r0, #219	@ 0xdb
 8001b50:	f7ff ff82 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b54:	2020      	movs	r0, #32
 8001b56:	f7ff ff7f 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b5a:	208d      	movs	r0, #141	@ 0x8d
 8001b5c:	f7ff ff7c 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b60:	2014      	movs	r0, #20
 8001b62:	f7ff ff79 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f988 	bl	8001e7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 f80f 	bl	8001b90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b72:	f000 f825 	bl	8001bc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b82:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	711a      	strb	r2, [r3, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000550 	.word	0x20000550

08001b90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <ssd1306_Fill+0x14>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <ssd1306_Fill+0x16>
 8001ba4:	23ff      	movs	r3, #255	@ 0xff
 8001ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <ssd1306_Fill+0x2c>)
 8001bae:	f008 ff49 	bl	800aa44 <memset>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000350 	.word	0x20000350

08001bc0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e016      	b.n	8001bfa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	3b50      	subs	r3, #80	@ 0x50
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff40 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ff3d 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bde:	2010      	movs	r0, #16
 8001be0:	f7ff ff3a 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <ssd1306_UpdateScreen+0x4c>)
 8001bea:	4413      	add	r3, r2
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff4a 	bl	8001a88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d9e5      	bls.n	8001bcc <ssd1306_UpdateScreen+0xc>
    }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000350 	.word	0x20000350

08001c10 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	71bb      	strb	r3, [r7, #6]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db3d      	blt.n	8001ca6 <ssd1306_DrawPixel+0x96>
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	2b1f      	cmp	r3, #31
 8001c2e:	d83a      	bhi.n	8001ca6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11a      	bne.n	8001c6c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	4413      	add	r3, r2
 8001c44:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <ssd1306_DrawPixel+0xa0>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b259      	sxtb	r1, r3
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	4413      	add	r3, r2
 8001c64:	b2c9      	uxtb	r1, r1
 8001c66:	4a12      	ldr	r2, [pc, #72]	@ (8001cb0 <ssd1306_DrawPixel+0xa0>)
 8001c68:	54d1      	strb	r1, [r2, r3]
 8001c6a:	e01d      	b.n	8001ca8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	b2d8      	uxtb	r0, r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <ssd1306_DrawPixel+0xa0>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4013      	ands	r3, r2
 8001c94:	b259      	sxtb	r1, r3
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	4603      	mov	r3, r0
 8001c9a:	01db      	lsls	r3, r3, #7
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <ssd1306_DrawPixel+0xa0>)
 8001ca2:	54d1      	strb	r1, [r2, r3]
 8001ca4:	e000      	b.n	8001ca8 <ssd1306_DrawPixel+0x98>
        return;
 8001ca6:	bf00      	nop
    }
}
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000350 	.word	0x20000350

08001cb4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b1f      	cmp	r3, #31
 8001cca:	d902      	bls.n	8001cd2 <ssd1306_WriteChar+0x1e>
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b7e      	cmp	r3, #126	@ 0x7e
 8001cd0:	d901      	bls.n	8001cd6 <ssd1306_WriteChar+0x22>
        return 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e079      	b.n	8001dca <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <ssd1306_WriteChar+0x34>
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	3b20      	subs	r3, #32
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	e000      	b.n	8001cea <ssd1306_WriteChar+0x36>
 8001ce8:	783b      	ldrb	r3, [r7, #0]
 8001cea:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2b80      	cmp	r3, #128	@ 0x80
 8001cf8:	dc06      	bgt.n	8001d08 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001cfc:	885b      	ldrh	r3, [r3, #2]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	dd01      	ble.n	8001d0c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e05e      	b.n	8001dca <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	e04d      	b.n	8001dae <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3b20      	subs	r3, #32
 8001d18:	7879      	ldrb	r1, [r7, #1]
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	440b      	add	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	e036      	b.n	8001da0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d42:	4b24      	ldr	r3, [pc, #144]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2d8      	uxtb	r0, r3
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7ff ff54 	bl	8001c10 <ssd1306_DrawPixel>
 8001d68:	e017      	b.n	8001d9a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b2d8      	uxtb	r0, r3
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b2d9      	uxtb	r1, r3
 8001d86:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	f7ff ff3b 	bl	8001c10 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3c4      	bcc.n	8001d32 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	787b      	ldrb	r3, [r7, #1]
 8001db0:	461a      	mov	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d3ac      	bcc.n	8001d12 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001dba:	881a      	ldrh	r2, [r3, #0]
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <ssd1306_WriteChar+0x120>)
 8001dc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000550 	.word	0x20000550

08001dd8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4638      	mov	r0, r7
 8001de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001de6:	e013      	b.n	8001e10 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	7818      	ldrb	r0, [r3, #0]
 8001dec:	7e3b      	ldrb	r3, [r7, #24]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	463b      	mov	r3, r7
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	f7ff ff5e 	bl	8001cb4 <ssd1306_WriteChar>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d002      	beq.n	8001e0a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	e008      	b.n	8001e1c <ssd1306_WriteString+0x44>
        }
        str++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e7      	bne.n	8001de8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <ssd1306_SetCursor+0x2c>)
 8001e3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <ssd1306_SetCursor+0x2c>)
 8001e42:	805a      	strh	r2, [r3, #2]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000550 	.word	0x20000550

08001e54 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e5e:	2381      	movs	r3, #129	@ 0x81
 8001e60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fdf7 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fdf3 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e8c:	23af      	movs	r3, #175	@ 0xaf
 8001e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <ssd1306_SetDisplayOn+0x38>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	715a      	strb	r2, [r3, #5]
 8001e96:	e004      	b.n	8001ea2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e98:	23ae      	movs	r3, #174	@ 0xae
 8001e9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <ssd1306_SetDisplayOn+0x38>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fdd7 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000550 	.word	0x20000550

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_Init+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <HAL_Init+0x28>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f947 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	200f      	movs	r0, #15
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fbd0 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f95f 	bl	80021c6 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f927 	bl	8002172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a03      	ldr	r2, [pc, #12]	@ (8001f64 <HAL_IncTick+0x20>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000558 	.word	0x20000558

08001f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	@ (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000558 	.word	0x20000558

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db0b      	blt.n	8002052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	4906      	ldr	r1, [pc, #24]	@ (800205c <__NVIC_EnableIRQ+0x34>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	@ (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	@ (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	@ 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff90 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff2d 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff42 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff35 	bl	8002028 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	@ 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e169      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f4:	2201      	movs	r2, #1
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8158 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a9a      	ldr	r2, [pc, #616]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d05e      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800221c:	4a98      	ldr	r2, [pc, #608]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d875      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002222:	4a98      	ldr	r2, [pc, #608]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d058      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002228:	4a96      	ldr	r2, [pc, #600]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d86f      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800222e:	4a96      	ldr	r2, [pc, #600]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d052      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002234:	4a94      	ldr	r2, [pc, #592]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d869      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800223a:	4a94      	ldr	r2, [pc, #592]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04c      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002240:	4a92      	ldr	r2, [pc, #584]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d863      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002246:	4a92      	ldr	r2, [pc, #584]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d046      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800224c:	4a90      	ldr	r2, [pc, #576]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d85d      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d82a      	bhi.n	80022ac <HAL_GPIO_Init+0xcc>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d859      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_GPIO_Init+0x80>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	080022db 	.word	0x080022db
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022c7 	.word	0x080022c7
 800226c:	08002309 	.word	0x08002309
 8002270:	0800230f 	.word	0x0800230f
 8002274:	0800230f 	.word	0x0800230f
 8002278:	0800230f 	.word	0x0800230f
 800227c:	0800230f 	.word	0x0800230f
 8002280:	0800230f 	.word	0x0800230f
 8002284:	0800230f 	.word	0x0800230f
 8002288:	0800230f 	.word	0x0800230f
 800228c:	0800230f 	.word	0x0800230f
 8002290:	0800230f 	.word	0x0800230f
 8002294:	0800230f 	.word	0x0800230f
 8002298:	0800230f 	.word	0x0800230f
 800229c:	0800230f 	.word	0x0800230f
 80022a0:	0800230f 	.word	0x0800230f
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	4a79      	ldr	r2, [pc, #484]	@ (8002494 <HAL_GPIO_Init+0x2b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b2:	e02c      	b.n	800230e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e029      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e024      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3308      	adds	r3, #8
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e01f      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	330c      	adds	r3, #12
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e01a      	b.n	8002310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022e2:	2304      	movs	r3, #4
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e013      	b.n	8002310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	611a      	str	r2, [r3, #16]
          break;
 80022fa:	e009      	b.n	8002310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	615a      	str	r2, [r3, #20]
          break;
 8002306:	e003      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x130>
          break;
 800230e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2bff      	cmp	r3, #255	@ 0xff
 8002314:	d801      	bhi.n	800231a <HAL_GPIO_Init+0x13a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <HAL_GPIO_Init+0x13e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d802      	bhi.n	800232c <HAL_GPIO_Init+0x14c>
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x152>
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	3b08      	subs	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	210f      	movs	r1, #15
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b1 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a4c      	ldr	r2, [pc, #304]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002378:	4a48      	ldr	r2, [pc, #288]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	@ (80024a4 <HAL_GPIO_Init+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	@ (80024a8 <HAL_GPIO_Init+0x2c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	492f      	ldr	r1, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	492c      	ldr	r1, [pc, #176]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002406:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4928      	ldr	r1, [pc, #160]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	491e      	ldr	r1, [pc, #120]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4918      	ldr	r1, [pc, #96]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4914      	ldr	r1, [pc, #80]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	490e      	ldr	r1, [pc, #56]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x2e2>
 800247e:	bf00      	nop
 8002480:	10320000 	.word	0x10320000
 8002484:	10310000 	.word	0x10310000
 8002488:	10220000 	.word	0x10220000
 800248c:	10210000 	.word	0x10210000
 8002490:	10120000 	.word	0x10120000
 8002494:	10110000 	.word	0x10110000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae8e 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	@ 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002526:	787b      	ldrb	r3, [r7, #1]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002532:	e003      	b.n	800253c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	041a      	lsls	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e12b      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff f8b4 	bl	80016dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	@ 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ac:	f002 fda2 	bl	80050f4 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a81      	ldr	r2, [pc, #516]	@ (80027bc <HAL_I2C_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d807      	bhi.n	80025cc <HAL_I2C_Init+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a80      	ldr	r2, [pc, #512]	@ (80027c0 <HAL_I2C_Init+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x92>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a7d      	ldr	r2, [pc, #500]	@ (80027c4 <HAL_I2C_Init+0x27c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0e7      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a78      	ldr	r2, [pc, #480]	@ (80027c8 <HAL_I2C_Init+0x280>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a6a      	ldr	r2, [pc, #424]	@ (80027bc <HAL_I2C_Init+0x274>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d802      	bhi.n	800261c <HAL_I2C_Init+0xd4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	e009      	b.n	8002630 <HAL_I2C_Init+0xe8>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a69      	ldr	r2, [pc, #420]	@ (80027cc <HAL_I2C_Init+0x284>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	3301      	adds	r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	495c      	ldr	r1, [pc, #368]	@ (80027bc <HAL_I2C_Init+0x274>)
 800264c:	428b      	cmp	r3, r1
 800264e:	d819      	bhi.n	8002684 <HAL_I2C_Init+0x13c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e59      	subs	r1, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_I2C_Init+0x138>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	e051      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002680:	2304      	movs	r3, #4
 8002682:	e04f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Init+0x168>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e012      	b.n	80026d6 <HAL_I2C_Init+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x196>
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <HAL_I2C_Init+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e58      	subs	r0, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6809      	ldr	r1, [r1, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6911      	ldr	r1, [r2, #16]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000186a0 	.word	0x000186a0
 80027c0:	001e847f 	.word	0x001e847f
 80027c4:	003d08ff 	.word	0x003d08ff
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	460b      	mov	r3, r1
 80027e4:	813b      	strh	r3, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ea:	f7ff fbbd 	bl	8001f68 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80d9 	bne.w	80029b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	496d      	ldr	r1, [pc, #436]	@ (80029bc <HAL_I2C_Mem_Write+0x1ec>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f971 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e0cc      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Mem_Write+0x56>
 8002822:	2302      	movs	r3, #2
 8002824:	e0c5      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	@ 0x21
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <HAL_I2C_Mem_Write+0x1f0>)
 800288c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288e:	88f8      	ldrh	r0, [r7, #6]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f890 	bl	80029c4 <I2C_RequestMemoryWrite>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d052      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e081      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa36 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d107      	bne.n	80028d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_I2C_Mem_Write+0x180>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1aa      	bne.n	80028ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fa29 	bl	8002db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	2b04      	cmp	r3, #4
 800296e:	d107      	bne.n	8002980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e016      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000

080029c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f878 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a14:	d103      	bne.n	8002a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e05f      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	492d      	ldr	r1, [pc, #180]	@ (8002aec <I2C_RequestMemoryWrite+0x128>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8d3 	bl	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e04c      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f95e 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d107      	bne.n	8002a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e02b      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d105      	bne.n	8002a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	e021      	b.n	8002ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f938 	bl	8002d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e005      	b.n	8002ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad6:	893b      	ldrh	r3, [r7, #8]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b00:	e048      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d044      	beq.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7ff fa2d 	bl	8001f68 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d139      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d10d      	bne.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	e00c      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4013      	ands	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d116      	bne.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e023      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10d      	bne.n	8002bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	e00c      	b.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d093      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf2:	e071      	b.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c02:	d123      	bne.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e067      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d041      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7ff f988 	bl	8001f68 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d136      	bne.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10c      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	e00b      	b.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e021      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10c      	bne.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e00b      	b.n	8002d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af6d 	bne.w	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d30:	e034      	b.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f886 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d028      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7ff f90d 	bl	8001f68 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11d      	bne.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d016      	beq.n	8002d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e007      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d1c3      	bne.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc0:	e034      	b.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f83e 	bl	8002e44 <I2C_IsAcknowledgeFailed>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d028      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7ff f8c5 	bl	8001f68 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d1c3      	bne.n	8002dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d11b      	bne.n	8002e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0e8      	b.n	8003084 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f007 fa54 	bl	800a374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 f845 	bl	8005f6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eee:	f003 f81b 	bl	8005f28 <USB_CoreInit>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0bf      	b.n	8003084 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f849 	bl	8005fa2 <USB_SetCurrentMode>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0b0      	b.n	8003084 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e03e      	b.n	8002fa6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3311      	adds	r3, #17
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3310      	adds	r3, #16
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3313      	adds	r3, #19
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3320      	adds	r3, #32
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	3324      	adds	r3, #36	@ 0x24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	7bfa      	ldrb	r2, [r7, #15]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d3bb      	bcc.n	8002f28 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e044      	b.n	8003040 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	3301      	adds	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3b5      	bcc.n	8002fb6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003054:	f002 ffb1 	bl	8005fba <USB_DevInit>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00c      	b.n	8003084 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fa30 	bl	80084e2 <USB_DevDisconnect>

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_Start+0x16>
 800309e:	2302      	movs	r3, #2
 80030a0:	e016      	b.n	80030d0 <HAL_PCD_Start+0x44>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 ff47 	bl	8005f42 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80030b4:	2101      	movs	r1, #1
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f007 fbcf 	bl	800a85a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fa04 	bl	80084ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f005 fa06 	bl	80084f6 <USB_ReadInterrupts>
 80030ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fb1a 	bl	8003730 <PCD_EP_ISR_Handler>

    return;
 80030fc:	e119      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311a:	b292      	uxth	r2, r2
 800311c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f007 f9a2 	bl	800a46a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003126:	2100      	movs	r1, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f905 	bl	8003338 <HAL_PCD_SetAddress>

    return;
 800312e:	e100      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800314c:	b292      	uxth	r2, r2
 800314e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003152:	e0ee      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003170:	b292      	uxth	r2, r2
 8003172:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003176:	e0dc      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d027      	beq.n	80031d2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0204 	bic.w	r2, r2, #4
 8003194:	b292      	uxth	r2, r2
 8003196:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0208 	bic.w	r2, r2, #8
 80031ac:	b292      	uxth	r2, r2
 80031ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f007 f992 	bl	800a4dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ca:	b292      	uxth	r2, r2
 80031cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031d0:	e0af      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8083 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e010      	b.n	8003206 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	441a      	add	r2, r3
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
 80031f2:	8812      	ldrh	r2, [r2, #0]
 80031f4:	b292      	uxth	r2, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	3320      	adds	r3, #32
 80031fa:	443b      	add	r3, r7
 80031fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	3301      	adds	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	7ffb      	ldrb	r3, [r7, #31]
 8003208:	2b07      	cmp	r3, #7
 800320a:	d9eb      	bls.n	80031e4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	b292      	uxth	r2, r2
 8003220:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	b292      	uxth	r2, r2
 8003238:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800323c:	bf00      	nop
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003246:	b29b      	uxth	r3, r3
 8003248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f6      	beq.n	800323e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003262:	b292      	uxth	r2, r2
 8003264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003268:	2300      	movs	r3, #0
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e00f      	b.n	800328e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800326e:	7ffb      	ldrb	r3, [r7, #31]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	4611      	mov	r1, r2
 8003276:	7ffa      	ldrb	r2, [r7, #31]
 8003278:	0092      	lsls	r2, r2, #2
 800327a:	440a      	add	r2, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	3320      	adds	r3, #32
 8003280:	443b      	add	r3, r7
 8003282:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003286:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	3301      	adds	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d9ec      	bls.n	800326e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	b292      	uxth	r2, r2
 80032a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032be:	b292      	uxth	r2, r2
 80032c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0204 	orr.w	r2, r2, #4
 80032d6:	b292      	uxth	r2, r2
 80032d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f007 f8e3 	bl	800a4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80032e2:	e026      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00f      	beq.n	800330e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003300:	b292      	uxth	r2, r2
 8003302:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f007 f8a1 	bl	800a44e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800330c:	e011      	b.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800332a:	b292      	uxth	r2, r2
 800332c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003330:	bf00      	nop
  }
}
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_PCD_SetAddress+0x1a>
 800334e:	2302      	movs	r3, #2
 8003350:	e012      	b.n	8003378 <HAL_PCD_SetAddress+0x40>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f005 f89d 	bl	80084a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	70fb      	strb	r3, [r7, #3]
 8003392:	460b      	mov	r3, r1
 8003394:	803b      	strh	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800339e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0e      	bge.n	80033c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0207 	and.w	r2, r3, #7
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3310      	adds	r3, #16
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
 80033c2:	e00e      	b.n	80033e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 0207 	and.w	r2, r3, #7
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033ee:	883a      	ldrh	r2, [r7, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	78ba      	ldrb	r2, [r7, #2]
 80033f8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033fa:	78bb      	ldrb	r3, [r7, #2]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d102      	bne.n	8003406 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_PCD_EP_Open+0x94>
 8003410:	2302      	movs	r3, #2
 8003412:	e00e      	b.n	8003432 <HAL_PCD_EP_Open+0xb2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68f9      	ldr	r1, [r7, #12]
 8003422:	4618      	mov	r0, r3
 8003424:	f002 fde6 	bl	8005ff4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003430:	7afb      	ldrb	r3, [r7, #11]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da0e      	bge.n	800346c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 0207 	and.w	r2, r3, #7
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	3310      	adds	r3, #16
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
 800346a:	e00e      	b.n	800348a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_EP_Close+0x6a>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e00e      	b.n	80034c2 <HAL_PCD_EP_Close+0x88>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 f95e 	bl	8006774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	460b      	mov	r3, r1
 80034d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f003 0207 	and.w	r2, r3, #7
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2200      	movs	r2, #0
 8003508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b2da      	uxtb	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6979      	ldr	r1, [r7, #20]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fb15 	bl	8006b4c <USB_EPStartXfer>

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 0207 	and.w	r2, r3, #7
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	460b      	mov	r3, r1
 8003568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356a:	7afb      	ldrb	r3, [r7, #11]
 800356c:	f003 0207 	and.w	r2, r3, #7
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3310      	adds	r3, #16
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2201      	movs	r2, #1
 80035a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6979      	ldr	r1, [r7, #20]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fac7 	bl	8006b4c <USB_EPStartXfer>

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	7912      	ldrb	r2, [r2, #4]
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e04c      	b.n	8003680 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da0e      	bge.n	800360c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 0207 	and.w	r2, r3, #7
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	3310      	adds	r3, #16
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	705a      	strb	r2, [r3, #1]
 800360a:	e00c      	b.n	8003626 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_PCD_EP_SetStall+0x7e>
 8003642:	2302      	movs	r3, #2
 8003644:	e01c      	b.n	8003680 <HAL_PCD_EP_SetStall+0xb8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	4618      	mov	r0, r3
 8003656:	f004 fe2a 	bl	80082ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f004 ff4f 	bl	8008514 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	7912      	ldrb	r2, [r2, #4]
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e040      	b.n	8003728 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da0e      	bge.n	80036cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 0207 	and.w	r2, r3, #7
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3310      	adds	r3, #16
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	705a      	strb	r2, [r3, #1]
 80036ca:	e00e      	b.n	80036ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_PCD_EP_ClrStall+0x82>
 8003706:	2302      	movs	r3, #2
 8003708:	e00e      	b.n	8003728 <HAL_PCD_EP_ClrStall+0xa0>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f004 fe18 	bl	800834e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b096      	sub	sp, #88	@ 0x58
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003738:	e3bb      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003742:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003754:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 8175 	bne.w	8003a48 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800375e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14e      	bne.n	8003808 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	81fb      	strh	r3, [r7, #14]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800378a:	b29b      	uxth	r3, r3
 800378c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3310      	adds	r3, #16
 8003792:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	3302      	adds	r3, #2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80037c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	441a      	add	r2, r3
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037ce:	2100      	movs	r1, #0
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f006 fe22 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7b5b      	ldrb	r3, [r3, #13]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8368 	beq.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
 80037e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 8363 	bne.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7b5b      	ldrb	r3, [r3, #13]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	735a      	strb	r2, [r3, #13]
 8003806:	e354      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800380e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800381a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800381e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003822:	2b00      	cmp	r3, #0
 8003824:	d034      	beq.n	8003890 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	3306      	adds	r3, #6
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003850:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003862:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003864:	b29b      	uxth	r3, r3
 8003866:	f004 fea6 	bl	80085b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29a      	uxth	r2, r3
 8003872:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003876:	4013      	ands	r3, r2
 8003878:	823b      	strh	r3, [r7, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	8a3a      	ldrh	r2, [r7, #16]
 8003880:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f006 fd99 	bl	800a3c0 <HAL_PCD_SetupStageCallback>
 800388e:	e310      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003890:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003894:	2b00      	cmp	r3, #0
 8003896:	f280 830c 	bge.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038a6:	4013      	ands	r3, r2
 80038a8:	83fb      	strh	r3, [r7, #30]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	8bfa      	ldrh	r2, [r7, #30]
 80038b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	3306      	adds	r3, #6
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d019      	beq.n	8003920 <PCD_EP_ISR_Handler+0x1f0>
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d015      	beq.n	8003920 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003904:	b29b      	uxth	r3, r3
 8003906:	f004 fe56 	bl	80085b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	441a      	add	r2, r3
 8003914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003916:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f006 fd62 	bl	800a3e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800392a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800392e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003932:	2b00      	cmp	r3, #0
 8003934:	f040 82bd 	bne.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
 8003938:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800393c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003940:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003944:	f000 82b5 	beq.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003956:	b29b      	uxth	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003972:	b29a      	uxth	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b3e      	cmp	r3, #62	@ 0x3e
 800397e:	d91d      	bls.n	80039bc <PCD_EP_ISR_Handler+0x28c>
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
 8003988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <PCD_EP_ISR_Handler+0x26a>
 8003994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003996:	3b01      	subs	r3, #1
 8003998:	647b      	str	r3, [r7, #68]	@ 0x44
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	029b      	lsls	r3, r3, #10
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e026      	b.n	8003a0a <PCD_EP_ISR_Handler+0x2da>
 80039bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <PCD_EP_ISR_Handler+0x2aa>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	801a      	strh	r2, [r3, #0]
 80039d8:	e017      	b.n	8003a0a <PCD_EP_ISR_Handler+0x2da>
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <PCD_EP_ISR_Handler+0x2c4>
 80039ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f0:	3301      	adds	r3, #1
 80039f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	029b      	lsls	r3, r3, #10
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4313      	orrs	r3, r2
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a1a:	827b      	strh	r3, [r7, #18]
 8003a1c:	8a7b      	ldrh	r3, [r7, #18]
 8003a1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a22:	827b      	strh	r3, [r7, #18]
 8003a24:	8a7b      	ldrh	r3, [r7, #18]
 8003a26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a2a:	827b      	strh	r3, [r7, #18]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	8a7b      	ldrh	r3, [r7, #18]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]
 8003a46:	e234      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a5c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f280 80fc 	bge.w	8003c5e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003a94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a98:	b292      	uxth	r2, r2
 8003a9a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a9c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	7b1b      	ldrb	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d125      	bne.n	8003b06 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	3306      	adds	r3, #6
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003ae6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8092 	beq.w	8003c14 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af6:	6959      	ldr	r1, [r3, #20]
 8003af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afa:	88da      	ldrh	r2, [r3, #6]
 8003afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b00:	f004 fd59 	bl	80085b6 <USB_ReadPMA>
 8003b04:	e086      	b.n	8003c14 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b08:	78db      	ldrb	r3, [r3, #3]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d10a      	bne.n	8003b24 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b12:	461a      	mov	r2, r3
 8003b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9d9 	bl	8003ece <HAL_PCD_EP_DB_Receive>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003b22:	e077      	b.n	8003c14 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d024      	beq.n	8003bcc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	3302      	adds	r3, #2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02e      	beq.n	8003c14 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	6959      	ldr	r1, [r3, #20]
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	891a      	ldrh	r2, [r3, #8]
 8003bc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bc6:	f004 fcf6 	bl	80085b6 <USB_ReadPMA>
 8003bca:	e023      	b.n	8003c14 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	3306      	adds	r3, #6
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d009      	beq.n	8003c14 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c06:	6959      	ldr	r1, [r3, #20]
 8003c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0a:	895a      	ldrh	r2, [r3, #10]
 8003c0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c10:	f004 fcd1 	bl	80085b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c1c:	441a      	add	r2, r3
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c2a:	441a      	add	r2, r3
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x514>
 8003c38:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d206      	bcs.n	8003c52 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f006 fbca 	bl	800a3e4 <HAL_PCD_DataOutStageCallback>
 8003c50:	e005      	b.n	8003c5e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f002 ff77 	bl	8006b4c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8123 	beq.w	8003eb2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c6c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	441a      	add	r2, r3
 8003cac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbe:	78db      	ldrb	r3, [r3, #3]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 80a2 	bne.w	8003e0a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	7b1b      	ldrb	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8093 	beq.w	8003dfc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d046      	beq.n	8003d70 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d126      	bne.n	8003d38 <PCD_EP_ISR_Handler+0x608>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	4413      	add	r3, r2
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	011a      	lsls	r2, r3, #4
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e061      	b.n	8003dfc <PCD_EP_ISR_Handler+0x6cc>
 8003d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d15d      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x6cc>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d54:	4413      	add	r3, r2
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	011a      	lsls	r2, r3, #4
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	4413      	add	r3, r2
 8003d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	e045      	b.n	8003dfc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d126      	bne.n	8003dcc <PCD_EP_ISR_Handler+0x69c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	4413      	add	r3, r2
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	011a      	lsls	r2, r3, #4
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	4413      	add	r3, r2
 8003da0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e017      	b.n	8003dfc <PCD_EP_ISR_Handler+0x6cc>
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d113      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x6cc>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de2:	4413      	add	r3, r2
 8003de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	011a      	lsls	r2, r3, #4
 8003dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dee:	4413      	add	r3, r2
 8003df0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f006 fb09 	bl	800a41a <HAL_PCD_DataInStageCallback>
 8003e08:	e053      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d146      	bne.n	8003ea4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d907      	bls.n	8003e5e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5a:	619a      	str	r2, [r3, #24]
 8003e5c:	e002      	b.n	8003e64 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f006 fad1 	bl	800a41a <HAL_PCD_DataInStageCallback>
 8003e78:	e01b      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e82:	441a      	add	r2, r3
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	69da      	ldr	r2, [r3, #28]
 8003e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003e90:	441a      	add	r2, r3
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fe55 	bl	8006b4c <USB_EPStartXfer>
 8003ea2:	e006      	b.n	8003eb2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f91b 	bl	80040e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f6ff ac3b 	blt.w	800373a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3758      	adds	r7, #88	@ 0x58
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d07e      	beq.n	8003fe4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3302      	adds	r3, #2
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	8b7b      	ldrh	r3, [r7, #26]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d306      	bcc.n	8003f28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	8b7b      	ldrh	r3, [r7, #26]
 8003f20:	1ad2      	subs	r2, r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	619a      	str	r2, [r3, #24]
 8003f26:	e002      	b.n	8003f2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d123      	bne.n	8003f7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f50:	833b      	strh	r3, [r7, #24]
 8003f52:	8b3b      	ldrh	r3, [r7, #24]
 8003f54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f58:	833b      	strh	r3, [r7, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8b3b      	ldrh	r3, [r7, #24]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	82fb      	strh	r3, [r7, #22]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	8afb      	ldrh	r3, [r7, #22]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8087 	beq.w	80040de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6959      	ldr	r1, [r3, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	891a      	ldrh	r2, [r3, #8]
 8003fdc:	8b7b      	ldrh	r3, [r7, #26]
 8003fde:	f004 faea 	bl	80085b6 <USB_ReadPMA>
 8003fe2:	e07c      	b.n	80040de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3306      	adds	r3, #6
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	429a      	cmp	r2, r3
 8004016:	d306      	bcc.n	8004026 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	8b7b      	ldrh	r3, [r7, #26]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	619a      	str	r2, [r3, #24]
 8004024:	e002      	b.n	800402c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d123      	bne.n	800407c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800404a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404e:	83fb      	strh	r3, [r7, #30]
 8004050:	8bfb      	ldrh	r3, [r7, #30]
 8004052:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004056:	83fb      	strh	r3, [r7, #30]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	8bfb      	ldrh	r3, [r7, #30]
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11f      	bne.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a0:	83bb      	strh	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	8bbb      	ldrh	r3, [r7, #28]
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040c6:	8b7b      	ldrh	r3, [r7, #26]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6959      	ldr	r1, [r3, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	895a      	ldrh	r2, [r3, #10]
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	f004 fa6c 	bl	80085b6 <USB_ReadPMA>
    }
  }

  return count;
 80040de:	8b7b      	ldrh	r3, [r7, #26]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0a4      	sub	sp, #144	@ 0x90
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 81dd 	beq.w	80044bc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	3302      	adds	r3, #2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004136:	429a      	cmp	r2, r3
 8004138:	d907      	bls.n	800414a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	e002      	b.n	8004150 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 80b9 	bne.w	80042cc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d126      	bne.n	80041b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004170:	b29b      	uxth	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004176:	4413      	add	r3, r2
 8004178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	011a      	lsls	r2, r3, #4
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	4413      	add	r3, r2
 8004184:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004194:	b29a      	uxth	r2, r3
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	e01a      	b.n	80041e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d116      	bne.n	80041e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041cc:	4413      	add	r3, r2
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	4413      	add	r3, r2
 80041da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d126      	bne.n	8004242 <HAL_PCD_EP_DB_Transmit+0x15a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	011a      	lsls	r2, r3, #4
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004226:	b29a      	uxth	r2, r3
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423a:	b29a      	uxth	r2, r3
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	e017      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d113      	bne.n	8004272 <HAL_PCD_EP_DB_Transmit+0x18a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	4413      	add	r3, r2
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	4413      	add	r3, r2
 8004266:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2200      	movs	r2, #0
 8004270:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f006 f8ce 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 82fc 	beq.w	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a4:	82fb      	strh	r3, [r7, #22]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	8afb      	ldrh	r3, [r7, #22]
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8013      	strh	r3, [r2, #0]
 80042ca:	e2da      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d021      	beq.n	800431a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004320:	2b01      	cmp	r3, #1
 8004322:	f040 82ae 	bne.w	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800432e:	441a      	add	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800433c:	441a      	add	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	429a      	cmp	r2, r3
 800434c:	d30b      	bcc.n	8004366 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	621a      	str	r2, [r3, #32]
 8004364:	e017      	b.n	8004396 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d108      	bne.n	8004380 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800436e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800437e:	e00a      	b.n	8004396 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d165      	bne.n	800446a <HAL_PCD_EP_DB_Transmit+0x382>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b2:	4413      	add	r3, r2
 80043b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	011a      	lsls	r2, r3, #4
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	4413      	add	r3, r2
 80043c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80043c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043da:	2b3e      	cmp	r3, #62	@ 0x3e
 80043dc:	d91d      	bls.n	800441a <HAL_PCD_EP_DB_Transmit+0x332>
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d102      	bne.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x310>
 80043f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f4:	3b01      	subs	r3, #1
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004400:	b29b      	uxth	r3, r3
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b29b      	uxth	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004412:	b29a      	uxth	r2, r3
 8004414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004416:	801a      	strh	r2, [r3, #0]
 8004418:	e044      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <HAL_PCD_EP_DB_Transmit+0x350>
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004430:	b29a      	uxth	r2, r3
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	801a      	strh	r2, [r3, #0]
 8004436:	e035      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_PCD_EP_DB_Transmit+0x36a>
 800444c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800444e:	3301      	adds	r3, #1
 8004450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29a      	uxth	r2, r3
 8004458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800445a:	b29b      	uxth	r3, r3
 800445c:	029b      	lsls	r3, r3, #10
 800445e:	b29b      	uxth	r3, r3
 8004460:	4313      	orrs	r3, r2
 8004462:	b29a      	uxth	r2, r3
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	e01c      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d118      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	4413      	add	r3, r2
 8004488:	647b      	str	r3, [r7, #68]	@ 0x44
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	011a      	lsls	r2, r3, #4
 8004490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004492:	4413      	add	r3, r2
 8004494:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
 800449a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6959      	ldr	r1, [r3, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	891a      	ldrh	r2, [r3, #8]
 80044b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f004 f838 	bl	800852a <USB_WritePMA>
 80044ba:	e1e2      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	3306      	adds	r3, #6
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d307      	bcc.n	8004504 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	619a      	str	r2, [r3, #24]
 8004502:	e002      	b.n	800450a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 80c0 	bne.w	8004694 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d126      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x482>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004530:	4413      	add	r3, r2
 8004532:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800453c:	4413      	add	r3, r2
 800453e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004542:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454e:	b29a      	uxth	r2, r3
 8004550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004562:	b29a      	uxth	r2, r3
 8004564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e01a      	b.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d116      	bne.n	80045a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	667b      	str	r3, [r7, #100]	@ 0x64
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004580:	b29b      	uxth	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004586:	4413      	add	r3, r2
 8004588:	667b      	str	r3, [r7, #100]	@ 0x64
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	011a      	lsls	r2, r3, #4
 8004590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004592:	4413      	add	r3, r2
 8004594:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004598:	663b      	str	r3, [r7, #96]	@ 0x60
 800459a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800459c:	2200      	movs	r2, #0
 800459e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d12b      	bne.n	8004606 <HAL_PCD_EP_DB_Transmit+0x51e>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045bc:	b29b      	uxth	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c2:	4413      	add	r3, r2
 80045c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	011a      	lsls	r2, r3, #4
 80045cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ce:	4413      	add	r3, r2
 80045d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e017      	b.n	8004636 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d113      	bne.n	8004636 <HAL_PCD_EP_DB_Transmit+0x54e>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800461c:	4413      	add	r3, r2
 800461e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	011a      	lsls	r2, r3, #4
 8004626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004628:	4413      	add	r3, r2
 800462a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800462e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004632:	2200      	movs	r2, #0
 8004634:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	4619      	mov	r1, r3
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f005 feec 	bl	800a41a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 811a 	bne.w	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004668:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800468a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
 8004692:	e0f6      	b.n	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d121      	bne.n	80046e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 80ca 	bne.w	8004882 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046f6:	441a      	add	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004704:	441a      	add	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a1a      	ldr	r2, [r3, #32]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d30b      	bcc.n	800472e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004726:	1ad2      	subs	r2, r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	621a      	str	r2, [r3, #32]
 800472c:	e017      	b.n	800475e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004736:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800473a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004746:	e00a      	b.n	800475e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	657b      	str	r3, [r7, #84]	@ 0x54
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d165      	bne.n	8004838 <HAL_PCD_EP_DB_Transmit+0x750>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004780:	4413      	add	r3, r2
 8004782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	011a      	lsls	r2, r3, #4
 800478a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800478c:	4413      	add	r3, r2
 800478e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004792:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80047aa:	d91d      	bls.n	80047e8 <HAL_PCD_EP_DB_Transmit+0x700>
 80047ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80047c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047c2:	3b01      	subs	r3, #1
 80047c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e041      	b.n	800486c <HAL_PCD_EP_DB_Transmit+0x784>
 80047e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_PCD_EP_DB_Transmit+0x71e>
 80047f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	e032      	b.n	800486c <HAL_PCD_EP_DB_Transmit+0x784>
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800480e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_PCD_EP_DB_Transmit+0x738>
 800481a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800481c:	3301      	adds	r3, #1
 800481e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29a      	uxth	r2, r3
 8004826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004828:	b29b      	uxth	r3, r3
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	b29b      	uxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b29a      	uxth	r2, r3
 8004832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e019      	b.n	800486c <HAL_PCD_EP_DB_Transmit+0x784>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d115      	bne.n	800486c <HAL_PCD_EP_DB_Transmit+0x784>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004848:	b29b      	uxth	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484e:	4413      	add	r3, r2
 8004850:	657b      	str	r3, [r7, #84]	@ 0x54
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485a:	4413      	add	r3, r2
 800485c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004860:	653b      	str	r3, [r7, #80]	@ 0x50
 8004862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004866:	b29a      	uxth	r2, r3
 8004868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800486a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6959      	ldr	r1, [r3, #20]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	895a      	ldrh	r2, [r3, #10]
 8004878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487c:	b29b      	uxth	r3, r3
 800487e:	f003 fe54 	bl	800852a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489c:	82bb      	strh	r3, [r7, #20]
 800489e:	8abb      	ldrh	r3, [r7, #20]
 80048a0:	f083 0310 	eor.w	r3, r3, #16
 80048a4:	82bb      	strh	r3, [r7, #20]
 80048a6:	8abb      	ldrh	r3, [r7, #20]
 80048a8:	f083 0320 	eor.w	r3, r3, #32
 80048ac:	82bb      	strh	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	8abb      	ldrh	r3, [r7, #20]
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3790      	adds	r7, #144	@ 0x90
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	4613      	mov	r3, r2
 80048ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	f003 0207 	and.w	r2, r3, #7
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	3310      	adds	r3, #16
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e009      	b.n	8004926 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004912:	897a      	ldrh	r2, [r7, #10]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004926:	893b      	ldrh	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d107      	bne.n	800493c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	b29a      	uxth	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	80da      	strh	r2, [r3, #6]
 800493a:	e00b      	b.n	8004954 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2201      	movs	r2, #1
 8004940:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	b29a      	uxth	r2, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	b29a      	uxth	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e272      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8087 	beq.w	8004a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004980:	4b92      	ldr	r3, [pc, #584]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b04      	cmp	r3, #4
 800498a:	d00c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800498c:	4b8f      	ldr	r3, [pc, #572]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d112      	bne.n	80049be <HAL_RCC_OscConfig+0x5e>
 8004998:	4b8c      	ldr	r3, [pc, #560]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a4:	d10b      	bne.n	80049be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a6:	4b89      	ldr	r3, [pc, #548]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d06c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x12c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d168      	bne.n	8004a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e24c      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x76>
 80049c8:	4b80      	ldr	r3, [pc, #512]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a7f      	ldr	r2, [pc, #508]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	e02e      	b.n	8004a34 <HAL_RCC_OscConfig+0xd4>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x98>
 80049de:	4b7b      	ldr	r3, [pc, #492]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7a      	ldr	r2, [pc, #488]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4b78      	ldr	r3, [pc, #480]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a77      	ldr	r2, [pc, #476]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 80049f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xd4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0xbc>
 8004a02:	4b72      	ldr	r3, [pc, #456]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a71      	ldr	r2, [pc, #452]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6e      	ldr	r2, [pc, #440]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xd4>
 8004a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a6a      	ldr	r2, [pc, #424]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b68      	ldr	r3, [pc, #416]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a67      	ldr	r2, [pc, #412]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fa94 	bl	8001f68 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd fa90 	bl	8001f68 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e200      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b5d      	ldr	r3, [pc, #372]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xe4>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd fa80 	bl	8001f68 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fa7c 	bl	8001f68 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1ec      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b53      	ldr	r3, [pc, #332]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x10c>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d063      	beq.n	8004b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aa6:	4b49      	ldr	r3, [pc, #292]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_OscConfig+0x18c>
 8004ab2:	4b46      	ldr	r3, [pc, #280]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b43      	ldr	r3, [pc, #268]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x176>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1c0      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4939      	ldr	r1, [pc, #228]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e03a      	b.n	8004b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <HAL_RCC_OscConfig+0x270>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd fa35 	bl	8001f68 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fd fa31 	bl	8001f68 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1a1      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b14:	4b2d      	ldr	r3, [pc, #180]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4927      	ldr	r1, [pc, #156]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
 8004b34:	e015      	b.n	8004b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <HAL_RCC_OscConfig+0x270>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fd fa14 	bl	8001f68 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fd fa10 	bl	8001f68 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e180      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b56:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03a      	beq.n	8004be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d019      	beq.n	8004baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b76:	4b17      	ldr	r3, [pc, #92]	@ (8004bd4 <HAL_RCC_OscConfig+0x274>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7c:	f7fd f9f4 	bl	8001f68 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b84:	f7fd f9f0 	bl	8001f68 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e160      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <HAL_RCC_OscConfig+0x26c>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	f000 faba 	bl	800511c <RCC_Delay>
 8004ba8:	e01c      	b.n	8004be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <HAL_RCC_OscConfig+0x274>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb0:	f7fd f9da 	bl	8001f68 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb6:	e00f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fd f9d6 	bl	8001f68 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d908      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e146      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	42420000 	.word	0x42420000
 8004bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e9      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80a6 	beq.w	8004d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	4b88      	ldr	r3, [pc, #544]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	4a87      	ldr	r2, [pc, #540]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	61d3      	str	r3, [r2, #28]
 8004c0e:	4b85      	ldr	r3, [pc, #532]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	4b82      	ldr	r3, [pc, #520]	@ (8004e28 <HAL_RCC_OscConfig+0x4c8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d118      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e28 <HAL_RCC_OscConfig+0x4c8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e28 <HAL_RCC_OscConfig+0x4c8>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c36:	f7fd f997 	bl	8001f68 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fd f993 	bl	8001f68 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	@ 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e103      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <HAL_RCC_OscConfig+0x4c8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_OscConfig+0x312>
 8004c64:	4b6f      	ldr	r3, [pc, #444]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4a6e      	ldr	r2, [pc, #440]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6213      	str	r3, [r2, #32]
 8004c70:	e02d      	b.n	8004cce <HAL_RCC_OscConfig+0x36e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x334>
 8004c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a69      	ldr	r2, [pc, #420]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	6213      	str	r3, [r2, #32]
 8004c86:	4b67      	ldr	r3, [pc, #412]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4a66      	ldr	r2, [pc, #408]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	f023 0304 	bic.w	r3, r3, #4
 8004c90:	6213      	str	r3, [r2, #32]
 8004c92:	e01c      	b.n	8004cce <HAL_RCC_OscConfig+0x36e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b05      	cmp	r3, #5
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x356>
 8004c9c:	4b61      	ldr	r3, [pc, #388]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	4a60      	ldr	r2, [pc, #384]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004ca2:	f043 0304 	orr.w	r3, r3, #4
 8004ca6:	6213      	str	r3, [r2, #32]
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	4a5d      	ldr	r2, [pc, #372]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6213      	str	r3, [r2, #32]
 8004cb4:	e00b      	b.n	8004cce <HAL_RCC_OscConfig+0x36e>
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	4a5a      	ldr	r2, [pc, #360]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	6213      	str	r3, [r2, #32]
 8004cc2:	4b58      	ldr	r3, [pc, #352]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	4a57      	ldr	r2, [pc, #348]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd f947 	bl	8001f68 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fd f943 	bl	8001f68 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0b1      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ee      	beq.n	8004cde <HAL_RCC_OscConfig+0x37e>
 8004d00:	e014      	b.n	8004d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d02:	f7fd f931 	bl	8001f68 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fd f92d 	bl	8001f68 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e09b      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d20:	4b40      	ldr	r3, [pc, #256]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d32:	4b3c      	ldr	r3, [pc, #240]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	4a3b      	ldr	r2, [pc, #236]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8087 	beq.w	8004e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d48:	4b36      	ldr	r3, [pc, #216]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d061      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d146      	bne.n	8004dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_RCC_OscConfig+0x4cc>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fd f901 	bl	8001f68 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7fd f8fd 	bl	8001f68 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e06d      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d108      	bne.n	8004da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4921      	ldr	r1, [pc, #132]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a19      	ldr	r1, [r3, #32]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	430b      	orrs	r3, r1
 8004db6:	491b      	ldr	r1, [pc, #108]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fd f8d1 	bl	8001f68 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fd f8cd 	bl	8001f68 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e03d      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ddc:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x46a>
 8004de8:	e035      	b.n	8004e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCC_OscConfig+0x4cc>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd f8ba 	bl	8001f68 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd f8b6 	bl	8001f68 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e026      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_OscConfig+0x4c4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x498>
 8004e16:	e01e      	b.n	8004e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e019      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <HAL_RCC_OscConfig+0x500>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000

08004e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0d0      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d910      	bls.n	8004ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b67      	ldr	r3, [pc, #412]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	4965      	ldr	r1, [pc, #404]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b63      	ldr	r3, [pc, #396]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0b8      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec0:	4b59      	ldr	r3, [pc, #356]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a58      	ldr	r2, [pc, #352]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed8:	4b53      	ldr	r3, [pc, #332]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a52      	ldr	r2, [pc, #328]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee4:	4b50      	ldr	r3, [pc, #320]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	494d      	ldr	r1, [pc, #308]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d040      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b47      	ldr	r3, [pc, #284]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d115      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07f      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b41      	ldr	r3, [pc, #260]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e073      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3d      	ldr	r3, [pc, #244]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06b      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b39      	ldr	r3, [pc, #228]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4936      	ldr	r1, [pc, #216]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7fd f808 	bl	8001f68 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fd f804 	bl	8001f68 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e053      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2d      	ldr	r3, [pc, #180]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b27      	ldr	r3, [pc, #156]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d210      	bcs.n	8004fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 0207 	bic.w	r2, r3, #7
 8004f9a:	4922      	ldr	r1, [pc, #136]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e032      	b.n	800501a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc0:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4916      	ldr	r1, [pc, #88]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fde:	4b12      	ldr	r3, [pc, #72]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	490e      	ldr	r1, [pc, #56]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ff2:	f000 f821 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	490a      	ldr	r1, [pc, #40]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	5ccb      	ldrb	r3, [r1, r3]
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	4a09      	ldr	r2, [pc, #36]	@ (8005030 <HAL_RCC_ClockConfig+0x1cc>)
 800500c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800500e:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCC_ClockConfig+0x1d0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc ff66 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40022000 	.word	0x40022000
 8005028:	40021000 	.word	0x40021000
 800502c:	0800c29c 	.word	0x0800c29c
 8005030:	20000000 	.word	0x20000000
 8005034:	20000004 	.word	0x20000004

08005038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	2300      	movs	r3, #0
 800504c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005052:	4b1e      	ldr	r3, [pc, #120]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b04      	cmp	r3, #4
 8005060:	d002      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x30>
 8005062:	2b08      	cmp	r3, #8
 8005064:	d003      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x36>
 8005066:	e027      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005068:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800506a:	613b      	str	r3, [r7, #16]
      break;
 800506c:	e027      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	0c9b      	lsrs	r3, r3, #18
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	4a17      	ldr	r2, [pc, #92]	@ (80050d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005078:	5cd3      	ldrb	r3, [r2, r3]
 800507a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d010      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005086:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	0c5b      	lsrs	r3, r3, #17
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	4a11      	ldr	r2, [pc, #68]	@ (80050d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800509a:	fb03 f202 	mul.w	r2, r3, r2
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e004      	b.n	80050b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	613b      	str	r3, [r7, #16]
      break;
 80050b6:	e002      	b.n	80050be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ba:	613b      	str	r3, [r7, #16]
      break;
 80050bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050be:	693b      	ldr	r3, [r7, #16]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	007a1200 	.word	0x007a1200
 80050d4:	0800d794 	.word	0x0800d794
 80050d8:	0800d7a4 	.word	0x0800d7a4
 80050dc:	003d0900 	.word	0x003d0900

080050e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e4:	4b02      	ldr	r3, [pc, #8]	@ (80050f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	20000000 	.word	0x20000000

080050f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050f8:	f7ff fff2 	bl	80050e0 <HAL_RCC_GetHCLKFreq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4903      	ldr	r1, [pc, #12]	@ (8005118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800510a:	5ccb      	ldrb	r3, [r1, r3]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	0800c2ac 	.word	0x0800c2ac

0800511c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <RCC_Delay+0x34>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <RCC_Delay+0x38>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005138:	bf00      	nop
  }
  while (Delay --);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f9      	bne.n	8005138 <RCC_Delay+0x1c>
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	20000000 	.word	0x20000000
 8005154:	10624dd3 	.word	0x10624dd3

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d07d      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005178:	4b4f      	ldr	r3, [pc, #316]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	4b4c      	ldr	r3, [pc, #304]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4a4b      	ldr	r2, [pc, #300]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518e:	61d3      	str	r3, [r2, #28]
 8005190:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	4b46      	ldr	r3, [pc, #280]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d118      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ac:	4b43      	ldr	r3, [pc, #268]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a42      	ldr	r2, [pc, #264]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b8:	f7fc fed6 	bl	8001f68 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fc fed2 	bl	8001f68 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	@ 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e06d      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b3a      	ldr	r3, [pc, #232]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051de:	4b36      	ldr	r3, [pc, #216]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02e      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d027      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051fc:	4b2e      	ldr	r3, [pc, #184]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005206:	4b2e      	ldr	r3, [pc, #184]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800520c:	4b2c      	ldr	r3, [pc, #176]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005212:	4a29      	ldr	r2, [pc, #164]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fc fea1 	bl	8001f68 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	e00a      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fc fe9d 	bl	8001f68 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e036      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ee      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524c:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4917      	ldr	r1, [pc, #92]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	4313      	orrs	r3, r2
 800525c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800527c:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	490b      	ldr	r1, [pc, #44]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529a:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	4904      	ldr	r1, [pc, #16]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42420440 	.word	0x42420440

080052c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e03a      	b.n	8005352 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	@ (800535c <HAL_TIM_Base_Start_IT+0x98>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x58>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	d009      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x58>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a14      	ldr	r2, [pc, #80]	@ (8005360 <HAL_TIM_Base_Start_IT+0x9c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x58>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <HAL_TIM_Base_Start_IT+0xa0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d111      	bne.n	8005340 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d010      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	e007      	b.n	8005350 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800

08005368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e041      	b.n	80053fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fa50 	bl	8001834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 fb34 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e093      	b.n	8005542 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc f9c0 	bl	80017b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fada 	bl	8005a14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4313      	orrs	r3, r2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054a6:	f023 030c 	bic.w	r3, r3, #12
 80054aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	4313      	orrs	r3, r2
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	011a      	lsls	r2, r3, #4
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	4313      	orrs	r3, r2
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80054e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4313      	orrs	r3, r2
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800555a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005562:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800556a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005572:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d110      	bne.n	800559c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d102      	bne.n	8005586 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005580:	7b7b      	ldrb	r3, [r7, #13]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d001      	beq.n	800558a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e069      	b.n	800565e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800559a:	e031      	b.n	8005600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d110      	bne.n	80055c4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d102      	bne.n	80055ae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055a8:	7b3b      	ldrb	r3, [r7, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e055      	b.n	800565e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c2:	e01d      	b.n	8005600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d108      	bne.n	80055dc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d105      	bne.n	80055dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d0:	7b7b      	ldrb	r3, [r7, #13]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d102      	bne.n	80055dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d6:	7b3b      	ldrb	r3, [r7, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e03e      	b.n	800565e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_Encoder_Start+0xc4>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d008      	beq.n	800561e <HAL_TIM_Encoder_Start+0xd4>
 800560c:	e00f      	b.n	800562e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fbf2 	bl	8005e00 <TIM_CCxChannelCmd>
      break;
 800561c:	e016      	b.n	800564c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	2104      	movs	r1, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fbea 	bl	8005e00 <TIM_CCxChannelCmd>
      break;
 800562c:	e00e      	b.n	800564c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fbe2 	bl	8005e00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	2104      	movs	r1, #4
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fbdb 	bl	8005e00 <TIM_CCxChannelCmd>
      break;
 800564a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01b      	beq.n	80056ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0202 	mvn.w	r2, #2
 800569a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f994 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 80056b6:	e005      	b.n	80056c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f987 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f996 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01b      	beq.n	8005716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f06f 0204 	mvn.w	r2, #4
 80056e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f96e 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 8005702:	e005      	b.n	8005710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f961 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f970 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d020      	beq.n	8005762 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01b      	beq.n	8005762 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f06f 0208 	mvn.w	r2, #8
 8005732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f948 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 800574e:	e005      	b.n	800575c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f93b 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f94a 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01b      	beq.n	80057ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0210 	mvn.w	r2, #16
 800577e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2208      	movs	r2, #8
 8005784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f922 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 800579a:	e005      	b.n	80057a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f915 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f924 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00c      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0201 	mvn.w	r2, #1
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fb fd11 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00c      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb90 	bl	8005f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8f4 	bl	8005a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f06f 0220 	mvn.w	r2, #32
 8005836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fb63 	bl	8005f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005862:	2302      	movs	r3, #2
 8005864:	e0ae      	b.n	80059c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	f200 809f 	bhi.w	80059b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080059b5 	.word	0x080059b5
 8005884:	080059b5 	.word	0x080059b5
 8005888:	080059b5 	.word	0x080059b5
 800588c:	080058f1 	.word	0x080058f1
 8005890:	080059b5 	.word	0x080059b5
 8005894:	080059b5 	.word	0x080059b5
 8005898:	080059b5 	.word	0x080059b5
 800589c:	08005933 	.word	0x08005933
 80058a0:	080059b5 	.word	0x080059b5
 80058a4:	080059b5 	.word	0x080059b5
 80058a8:	080059b5 	.word	0x080059b5
 80058ac:	08005973 	.word	0x08005973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f91a 	bl	8005af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0208 	orr.w	r2, r2, #8
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	619a      	str	r2, [r3, #24]
      break;
 80058ee:	e064      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f960 	bl	8005bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800590a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6999      	ldr	r1, [r3, #24]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	619a      	str	r2, [r3, #24]
      break;
 8005930:	e043      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f9a9 	bl	8005c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0208 	orr.w	r2, r2, #8
 800594c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0204 	bic.w	r2, r2, #4
 800595c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
      break;
 8005970:	e023      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f9f3 	bl	8005d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800598c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69d9      	ldr	r1, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	021a      	lsls	r2, r3, #8
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	61da      	str	r2, [r3, #28]
      break;
 80059b2:	e002      	b.n	80059ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]
      break;
 80059b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <TIM_Base_SetConfig+0xd0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae8 <TIM_Base_SetConfig+0xd4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <TIM_Base_SetConfig+0xd8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a22      	ldr	r2, [pc, #136]	@ (8005ae4 <TIM_Base_SetConfig+0xd0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae8 <TIM_Base_SetConfig+0xd4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <TIM_Base_SetConfig+0xd8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae4 <TIM_Base_SetConfig+0xd0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]
  }
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800

08005af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0201 	bic.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 0302 	bic.w	r3, r3, #2
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <TIM_OC1_SetConfig+0xc8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10c      	bne.n	8005b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0308 	bic.w	r3, r3, #8
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a13      	ldr	r2, [pc, #76]	@ (8005bb8 <TIM_OC1_SetConfig+0xc8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d111      	bne.n	8005b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40012c00 	.word	0x40012c00

08005bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f023 0210 	bic.w	r2, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0320 	bic.w	r3, r3, #32
 8005c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <TIM_OC2_SetConfig+0xd0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10d      	bne.n	8005c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <TIM_OC2_SetConfig+0xd0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d113      	bne.n	8005c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr
 8005c8c:	40012c00 	.word	0x40012c00

08005c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <TIM_OC3_SetConfig+0xd0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10d      	bne.n	8005d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a14      	ldr	r2, [pc, #80]	@ (8005d60 <TIM_OC3_SetConfig+0xd0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d113      	bne.n	8005d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00

08005d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8005dfc <TIM_OC4_SetConfig+0x98>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	40012c00 	.word	0x40012c00

08005e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2201      	movs	r2, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1a      	ldr	r2, [r3, #32]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	401a      	ands	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e046      	b.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a16      	ldr	r2, [pc, #88]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eac:	d009      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a12      	ldr	r2, [pc, #72]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10c      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800

08005f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	4638      	mov	r0, r7
 8005f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f52:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f76:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b09d      	sub	sp, #116	@ 0x74
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d81f      	bhi.n	8006066 <USB_ActivateEndpoint+0x72>
 8006026:	a201      	add	r2, pc, #4	@ (adr r2, 800602c <USB_ActivateEndpoint+0x38>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	0800603d 	.word	0x0800603d
 8006030:	08006059 	.word	0x08006059
 8006034:	0800606f 	.word	0x0800606f
 8006038:	0800604b 	.word	0x0800604b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800603c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006040:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006044:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006048:	e012      	b.n	8006070 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800604a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800604e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006052:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006056:	e00b      	b.n	8006070 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006058:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800605c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006060:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006064:	e004      	b.n	8006070 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800606c:	e000      	b.n	8006070 <USB_ActivateEndpoint+0x7c>
      break;
 800606e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	7812      	ldrb	r2, [r2, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	441a      	add	r2, r3
 80060be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	7b1b      	ldrb	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8178 	bne.w	80063d0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8084 	beq.w	80061f2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	4413      	add	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	011a      	lsls	r2, r3, #4
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	88db      	ldrh	r3, [r3, #6]
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	b29b      	uxth	r3, r3
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	827b      	strh	r3, [r7, #18]
 800612c:	8a7b      	ldrh	r3, [r7, #18]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01b      	beq.n	800616e <USB_ActivateEndpoint+0x17a>
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614c:	823b      	strh	r3, [r7, #16]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	8a3b      	ldrh	r3, [r7, #16]
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006166:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	78db      	ldrb	r3, [r3, #3]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d020      	beq.n	80061b8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618c:	81bb      	strh	r3, [r7, #12]
 800618e:	89bb      	ldrh	r3, [r7, #12]
 8006190:	f083 0320 	eor.w	r3, r3, #32
 8006194:	81bb      	strh	r3, [r7, #12]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	89bb      	ldrh	r3, [r7, #12]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
 80061b6:	e2d5      	b.n	8006764 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ce:	81fb      	strh	r3, [r7, #14]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	89fb      	ldrh	r3, [r7, #14]
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
 80061f0:	e2b8      	b.n	8006764 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	4413      	add	r3, r2
 8006204:	633b      	str	r3, [r7, #48]	@ 0x30
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	011a      	lsls	r2, r3, #4
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	4413      	add	r3, r2
 8006210:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	88db      	ldrh	r3, [r3, #6]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	b29b      	uxth	r3, r3
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006230:	b29b      	uxth	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	4413      	add	r3, r2
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	011a      	lsls	r2, r3, #4
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	4413      	add	r3, r2
 8006244:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006260:	d91d      	bls.n	800629e <USB_ActivateEndpoint+0x2aa>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <USB_ActivateEndpoint+0x288>
 8006276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006278:	3b01      	subs	r3, #1
 800627a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006284:	b29b      	uxth	r3, r3
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	b29b      	uxth	r3, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006296:	b29a      	uxth	r2, r3
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e026      	b.n	80062ec <USB_ActivateEndpoint+0x2f8>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <USB_ActivateEndpoint+0x2c8>
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e017      	b.n	80062ec <USB_ActivateEndpoint+0x2f8>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <USB_ActivateEndpoint+0x2e2>
 80062d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d2:	3301      	adds	r3, #1
 80062d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062de:	b29b      	uxth	r3, r3
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01b      	beq.n	800633c <USB_ActivateEndpoint+0x348>
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	843b      	strh	r3, [r7, #32]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	8c3b      	ldrh	r3, [r7, #32]
 8006328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800632c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006338:	b29b      	uxth	r3, r3
 800633a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d124      	bne.n	800638e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	83bb      	strh	r3, [r7, #28]
 800635c:	8bbb      	ldrh	r3, [r7, #28]
 800635e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006362:	83bb      	strh	r3, [r7, #28]
 8006364:	8bbb      	ldrh	r3, [r7, #28]
 8006366:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800636a:	83bb      	strh	r3, [r7, #28]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	8bbb      	ldrh	r3, [r7, #28]
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
 800638c:	e1ea      	b.n	8006764 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	83fb      	strh	r3, [r7, #30]
 80063a6:	8bfb      	ldrh	r3, [r7, #30]
 80063a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063ac:	83fb      	strh	r3, [r7, #30]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	8bfb      	ldrh	r3, [r7, #30]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
 80063ce:	e1c9      	b.n	8006764 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	78db      	ldrb	r3, [r3, #3]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11e      	bne.n	8006416 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	441a      	add	r2, r3
 80063fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006408:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800640c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]
 8006414:	e01d      	b.n	8006452 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645c:	b29b      	uxth	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006462:	4413      	add	r3, r2
 8006464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	011a      	lsls	r2, r3, #4
 800646c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800646e:	4413      	add	r3, r2
 8006470:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006474:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	891b      	ldrh	r3, [r3, #8]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	b29b      	uxth	r3, r3
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	657b      	str	r3, [r7, #84]	@ 0x54
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006490:	b29b      	uxth	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006496:	4413      	add	r3, r2
 8006498:	657b      	str	r3, [r7, #84]	@ 0x54
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	011a      	lsls	r2, r3, #4
 80064a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	895b      	ldrh	r3, [r3, #10]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064b8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 8093 	bne.w	80065ea <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80064d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80064d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <USB_ActivateEndpoint+0x524>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006514:	b29b      	uxth	r3, r3
 8006516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006526:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <USB_ActivateEndpoint+0x574>
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006546:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006560:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006580:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006582:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006586:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006588:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800658a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800658e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
 80065e8:	e0bc      	b.n	8006764 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80065fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80065fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01d      	beq.n	8006642 <USB_ActivateEndpoint+0x64e>
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800661c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800663a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006652:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01d      	beq.n	800669a <USB_ActivateEndpoint+0x6a6>
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	78db      	ldrb	r3, [r3, #3]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d024      	beq.n	80066ec <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80066bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066c0:	f083 0320 	eor.w	r3, r3, #32
 80066c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
 80066ea:	e01d      	b.n	8006728 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006702:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006764:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006768:	4618      	mov	r0, r3
 800676a:	3774      	adds	r7, #116	@ 0x74
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop

08006774 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006774:	b480      	push	{r7}
 8006776:	b08d      	sub	sp, #52	@ 0x34
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	7b1b      	ldrb	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 808e 	bne.w	80068a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d044      	beq.n	800681a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	81bb      	strh	r3, [r7, #12]
 800679e:	89bb      	ldrh	r3, [r7, #12]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01b      	beq.n	80067e0 <USB_DeactivateEndpoint+0x6c>
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067be:	817b      	strh	r3, [r7, #10]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	897b      	ldrh	r3, [r7, #10]
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f6:	813b      	strh	r3, [r7, #8]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	893b      	ldrh	r3, [r7, #8]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
 8006818:	e192      	b.n	8006b40 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	827b      	strh	r3, [r7, #18]
 8006828:	8a7b      	ldrh	r3, [r7, #18]
 800682a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <USB_DeactivateEndpoint+0xf6>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006848:	823b      	strh	r3, [r7, #16]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	8a3b      	ldrh	r3, [r7, #16]
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800685e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	81fb      	strh	r3, [r7, #14]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	89fb      	ldrh	r3, [r7, #14]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
 80068a2:	e14d      	b.n	8006b40 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 80a5 	bne.w	80069f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	843b      	strh	r3, [r7, #32]
 80068bc:	8c3b      	ldrh	r3, [r7, #32]
 80068be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01b      	beq.n	80068fe <USB_DeactivateEndpoint+0x18a>
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068dc:	83fb      	strh	r3, [r7, #30]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	8bfb      	ldrh	r3, [r7, #30]
 80068ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	83bb      	strh	r3, [r7, #28]
 800690c:	8bbb      	ldrh	r3, [r7, #28]
 800690e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <USB_DeactivateEndpoint+0x1da>
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692c:	837b      	strh	r3, [r7, #26]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	8b7b      	ldrh	r3, [r7, #26]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006964:	833b      	strh	r3, [r7, #24]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8b3b      	ldrh	r3, [r7, #24]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699c:	82fb      	strh	r3, [r7, #22]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	8afb      	ldrh	r3, [r7, #22]
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d4:	82bb      	strh	r3, [r7, #20]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	8abb      	ldrh	r3, [r7, #20]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
 80069f6:	e0a3      	b.n	8006b40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01b      	beq.n	8006a48 <USB_DeactivateEndpoint+0x2d4>
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a26:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <USB_DeactivateEndpoint+0x324>
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	441a      	add	r2, r3
 8006aba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3734      	adds	r7, #52	@ 0x34
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0c2      	sub	sp, #264	@ 0x108
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5a:	6018      	str	r0, [r3, #0]
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b64:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	f040 86b7 	bne.w	80078e6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d908      	bls.n	8006ba6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006ba4:	e007      	b.n	8006bb6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	7b1b      	ldrb	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d13a      	bne.n	8006c3c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6959      	ldr	r1, [r3, #20]
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	88da      	ldrh	r2, [r3, #6]
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006be8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f001 fc9c 	bl	800852a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	011a      	lsls	r2, r3, #4
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4413      	add	r3, r2
 8006c28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	f000 be1f 	b.w	800787a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	78db      	ldrb	r3, [r3, #3]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f040 8462 	bne.w	8007512 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	f240 83df 	bls.w	800742a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c92:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cbc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 81c7 	beq.w	800709c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d177      	bne.n	8006e1a <USB_EPStartXfer+0x2ce>
 8006d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	4413      	add	r3, r2
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	011a      	lsls	r2, r3, #4
 8006d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d7c:	d921      	bls.n	8006dc2 <USB_EPStartXfer+0x276>
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	f003 031f 	and.w	r3, r3, #31
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <USB_EPStartXfer+0x252>
 8006d94:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	029b      	lsls	r3, r3, #10
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e050      	b.n	8006e64 <USB_EPStartXfer+0x318>
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <USB_EPStartXfer+0x294>
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	e041      	b.n	8006e64 <USB_EPStartXfer+0x318>
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	085b      	lsrs	r3, r3, #1
 8006de6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <USB_EPStartXfer+0x2b4>
 8006df6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	029b      	lsls	r3, r3, #10
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e024      	b.n	8006e64 <USB_EPStartXfer+0x318>
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d11c      	bne.n	8006e64 <USB_EPStartXfer+0x318>
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	4413      	add	r3, r2
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	011a      	lsls	r2, r3, #4
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	4413      	add	r3, r2
 8006e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	895b      	ldrh	r3, [r3, #10]
 8006e70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6959      	ldr	r1, [r3, #20]
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e92:	6800      	ldr	r0, [r0, #0]
 8006e94:	f001 fb49 	bl	800852a <USB_WritePMA>
            ep->xfer_buff += len;
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	441a      	add	r2, r3
 8006eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d90f      	bls.n	8006ef2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6a1a      	ldr	r2, [r3, #32]
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	1ad2      	subs	r2, r2, r3
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	621a      	str	r2, [r3, #32]
 8006ef0:	e00e      	b.n	8006f10 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d177      	bne.n	8007010 <USB_EPStartXfer+0x4c4>
 8006f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	4413      	add	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	011a      	lsls	r2, r3, #4
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	4413      	add	r3, r2
 8006f56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f72:	d921      	bls.n	8006fb8 <USB_EPStartXfer+0x46c>
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <USB_EPStartXfer+0x448>
 8006f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e056      	b.n	8007066 <USB_EPStartXfer+0x51a>
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <USB_EPStartXfer+0x48a>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	e047      	b.n	8007066 <USB_EPStartXfer+0x51a>
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <USB_EPStartXfer+0x4aa>
 8006fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007000:	b29b      	uxth	r3, r3
 8007002:	029b      	lsls	r3, r3, #10
 8007004:	b29b      	uxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	b29a      	uxth	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	e02a      	b.n	8007066 <USB_EPStartXfer+0x51a>
 8007010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d122      	bne.n	8007066 <USB_EPStartXfer+0x51a>
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	623b      	str	r3, [r7, #32]
 800702c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	4413      	add	r3, r2
 8007042:	623b      	str	r3, [r7, #32]
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	011a      	lsls	r2, r3, #4
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	4413      	add	r3, r2
 8007056:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007060:	b29a      	uxth	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	891b      	ldrh	r3, [r3, #8]
 8007072:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6959      	ldr	r1, [r3, #20]
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	b29b      	uxth	r3, r3
 8007088:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800708c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007090:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007094:	6800      	ldr	r0, [r0, #0]
 8007096:	f001 fa48 	bl	800852a <USB_WritePMA>
 800709a:	e3ee      	b.n	800787a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d177      	bne.n	800719c <USB_EPStartXfer+0x650>
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070cc:	4413      	add	r3, r2
 80070ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	011a      	lsls	r2, r3, #4
 80070de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070e0:	4413      	add	r3, r2
 80070e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80070fe:	d921      	bls.n	8007144 <USB_EPStartXfer+0x5f8>
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <USB_EPStartXfer+0x5d4>
 8007116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800711a:	3b01      	subs	r3, #1
 800711c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800712a:	b29b      	uxth	r3, r3
 800712c:	029b      	lsls	r3, r3, #10
 800712e:	b29b      	uxth	r3, r3
 8007130:	4313      	orrs	r3, r2
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e056      	b.n	80071f2 <USB_EPStartXfer+0x6a6>
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USB_EPStartXfer+0x616>
 800714c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715a:	b29a      	uxth	r2, r3
 800715c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	e047      	b.n	80071f2 <USB_EPStartXfer+0x6a6>
 8007162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <USB_EPStartXfer+0x636>
 8007178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29a      	uxth	r2, r3
 8007188:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800718c:	b29b      	uxth	r3, r3
 800718e:	029b      	lsls	r3, r3, #10
 8007190:	b29b      	uxth	r3, r3
 8007192:	4313      	orrs	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e02a      	b.n	80071f2 <USB_EPStartXfer+0x6a6>
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	785b      	ldrb	r3, [r3, #1]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d122      	bne.n	80071f2 <USB_EPStartXfer+0x6a6>
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80071b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071cc:	4413      	add	r3, r2
 80071ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	011a      	lsls	r2, r3, #4
 80071de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e0:	4413      	add	r3, r2
 80071e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	891b      	ldrh	r3, [r3, #8]
 80071fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6959      	ldr	r1, [r3, #20]
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	b29b      	uxth	r3, r3
 8007214:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007218:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800721c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007220:	6800      	ldr	r0, [r0, #0]
 8007222:	f001 f982 	bl	800852a <USB_WritePMA>
            ep->xfer_buff += len;
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695a      	ldr	r2, [r3, #20]
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007236:	441a      	add	r2, r3
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	429a      	cmp	r2, r3
 800725e:	d90f      	bls.n	8007280 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	621a      	str	r2, [r3, #32]
 800727e:	e00e      	b.n	800729e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800729e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d177      	bne.n	80073aa <USB_EPStartXfer+0x85e>
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	461a      	mov	r2, r3
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	4413      	add	r3, r2
 80072dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	011a      	lsls	r2, r3, #4
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007300:	b29a      	uxth	r2, r3
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730a:	2b3e      	cmp	r3, #62	@ 0x3e
 800730c:	d921      	bls.n	8007352 <USB_EPStartXfer+0x806>
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <USB_EPStartXfer+0x7e2>
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007328:	3b01      	subs	r3, #1
 800732a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29a      	uxth	r2, r3
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	b29b      	uxth	r3, r3
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	b29b      	uxth	r3, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	b29b      	uxth	r3, r3
 8007342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800734a:	b29a      	uxth	r2, r3
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e050      	b.n	80073f4 <USB_EPStartXfer+0x8a8>
 8007352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <USB_EPStartXfer+0x824>
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e041      	b.n	80073f4 <USB_EPStartXfer+0x8a8>
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <USB_EPStartXfer+0x844>
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738a:	3301      	adds	r3, #1
 800738c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29a      	uxth	r2, r3
 8007396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739a:	b29b      	uxth	r3, r3
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e024      	b.n	80073f4 <USB_EPStartXfer+0x8a8>
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	785b      	ldrb	r3, [r3, #1]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d11c      	bne.n	80073f4 <USB_EPStartXfer+0x8a8>
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ce:	4413      	add	r3, r2
 80073d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	011a      	lsls	r2, r3, #4
 80073e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e2:	4413      	add	r3, r2
 80073e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	895b      	ldrh	r3, [r3, #10]
 8007400:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6959      	ldr	r1, [r3, #20]
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	b29b      	uxth	r3, r3
 8007416:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800741a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800741e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007422:	6800      	ldr	r0, [r0, #0]
 8007424:	f001 f881 	bl	800852a <USB_WritePMA>
 8007428:	e227      	b.n	800787a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800742a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800743a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800745c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007460:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800748a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007492:	b29b      	uxth	r3, r3
 8007494:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b6:	4413      	add	r3, r2
 80074b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	011a      	lsls	r2, r3, #4
 80074c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074ca:	4413      	add	r3, r2
 80074cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	891b      	ldrh	r3, [r3, #8]
 80074e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6959      	ldr	r1, [r3, #20]
 80074f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007502:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007506:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	f001 f80d 	bl	800852a <USB_WritePMA>
 8007510:	e1b3      	b.n	800787a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007522:	1ad2      	subs	r2, r2, r3
 8007524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80c6 	beq.w	80076e4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	673b      	str	r3, [r7, #112]	@ 0x70
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d177      	bne.n	8007664 <USB_EPStartXfer+0xb18>
 8007574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800758e:	b29b      	uxth	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007594:	4413      	add	r3, r2
 8007596:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	011a      	lsls	r2, r3, #4
 80075a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80075b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80075c6:	d921      	bls.n	800760c <USB_EPStartXfer+0xac0>
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <USB_EPStartXfer+0xa9c>
 80075de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075e2:	3b01      	subs	r3, #1
 80075e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	029b      	lsls	r3, r3, #10
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007604:	b29a      	uxth	r2, r3
 8007606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	e050      	b.n	80076ae <USB_EPStartXfer+0xb62>
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <USB_EPStartXfer+0xade>
 8007614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007622:	b29a      	uxth	r2, r3
 8007624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e041      	b.n	80076ae <USB_EPStartXfer+0xb62>
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USB_EPStartXfer+0xafe>
 8007640:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007644:	3301      	adds	r3, #1
 8007646:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800764a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29a      	uxth	r2, r3
 8007650:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007654:	b29b      	uxth	r3, r3
 8007656:	029b      	lsls	r3, r3, #10
 8007658:	b29b      	uxth	r3, r3
 800765a:	4313      	orrs	r3, r2
 800765c:	b29a      	uxth	r2, r3
 800765e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	e024      	b.n	80076ae <USB_EPStartXfer+0xb62>
 8007664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d11c      	bne.n	80076ae <USB_EPStartXfer+0xb62>
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007688:	4413      	add	r3, r2
 800768a:	673b      	str	r3, [r7, #112]	@ 0x70
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	011a      	lsls	r2, r3, #4
 800769a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800769c:	4413      	add	r3, r2
 800769e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	895b      	ldrh	r3, [r3, #10]
 80076ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6959      	ldr	r1, [r3, #20]
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f000 ff24 	bl	800852a <USB_WritePMA>
 80076e2:	e0ca      	b.n	800787a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d177      	bne.n	80077e4 <USB_EPStartXfer+0xc98>
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007714:	4413      	add	r3, r2
 8007716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	011a      	lsls	r2, r3, #4
 8007726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007728:	4413      	add	r3, r2
 800772a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800772e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800773a:	b29a      	uxth	r2, r3
 800773c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	2b3e      	cmp	r3, #62	@ 0x3e
 8007746:	d921      	bls.n	800778c <USB_EPStartXfer+0xc40>
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <USB_EPStartXfer+0xc1c>
 800775e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007762:	3b01      	subs	r3, #1
 8007764:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007772:	b29b      	uxth	r3, r3
 8007774:	029b      	lsls	r3, r3, #10
 8007776:	b29b      	uxth	r3, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	b29b      	uxth	r3, r3
 800777c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007784:	b29a      	uxth	r2, r3
 8007786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	e05c      	b.n	8007846 <USB_EPStartXfer+0xcfa>
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <USB_EPStartXfer+0xc5e>
 8007794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e04d      	b.n	8007846 <USB_EPStartXfer+0xcfa>
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <USB_EPStartXfer+0xc7e>
 80077c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077c4:	3301      	adds	r3, #1
 80077c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4313      	orrs	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e030      	b.n	8007846 <USB_EPStartXfer+0xcfa>
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d128      	bne.n	8007846 <USB_EPStartXfer+0xcfa>
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007818:	4413      	add	r3, r2
 800781a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800781e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	011a      	lsls	r2, r3, #4
 800782c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007830:	4413      	add	r3, r2
 8007832:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783e:	b29a      	uxth	r2, r3
 8007840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007844:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	891b      	ldrh	r3, [r3, #8]
 8007852:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6959      	ldr	r1, [r3, #20]
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	b29b      	uxth	r3, r3
 8007868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800786c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007870:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007874:	6800      	ldr	r0, [r0, #0]
 8007876:	f000 fe58 	bl	800852a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800789c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a0:	817b      	strh	r3, [r7, #10]
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	f083 0310 	eor.w	r3, r3, #16
 80078a8:	817b      	strh	r3, [r7, #10]
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	f083 0320 	eor.w	r3, r3, #32
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	441a      	add	r2, r3
 80078cc:	897b      	ldrh	r3, [r7, #10]
 80078ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8013      	strh	r3, [r2, #0]
 80078e2:	f000 bcde 	b.w	80082a2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 80bb 	bne.w	8007a6e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	d917      	bls.n	8007944 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699a      	ldr	r2, [r3, #24]
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	619a      	str	r2, [r3, #24]
 8007942:	e00e      	b.n	8007962 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007986:	4413      	add	r3, r2
 8007988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	011a      	lsls	r2, r3, #4
 800799a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800799e:	4413      	add	r3, r2
 80079a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80079c2:	d924      	bls.n	8007a0e <USB_EPStartXfer+0xec2>
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d104      	bne.n	80079e4 <USB_EPStartXfer+0xe98>
 80079da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079de:	3b01      	subs	r3, #1
 80079e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	029b      	lsls	r3, r3, #10
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	f000 bc10 	b.w	800822e <USB_EPStartXfer+0x16e2>
 8007a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <USB_EPStartXfer+0xee4>
 8007a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e3fe      	b.n	800822e <USB_EPStartXfer+0x16e2>
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <USB_EPStartXfer+0xf04>
 8007a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	029b      	lsls	r3, r3, #10
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	4313      	orrs	r3, r2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e3df      	b.n	800822e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	78db      	ldrb	r3, [r3, #3]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	f040 8218 	bne.w	8007eb0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 809d 	bne.w	8007bcc <USB_EPStartXfer+0x1080>
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	011a      	lsls	r2, r3, #4
 8007aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ace:	4413      	add	r3, r2
 8007ad0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007afa:	d92b      	bls.n	8007b54 <USB_EPStartXfer+0x1008>
 8007afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_EPStartXfer+0xfe0>
 8007b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e070      	b.n	8007c36 <USB_EPStartXfer+0x10ea>
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10c      	bne.n	8007b7e <USB_EPStartXfer+0x1032>
 8007b64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e05b      	b.n	8007c36 <USB_EPStartXfer+0x10ea>
 8007b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <USB_EPStartXfer+0x1062>
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	029b      	lsls	r3, r3, #10
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	e034      	b.n	8007c36 <USB_EPStartXfer+0x10ea>
 8007bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d12c      	bne.n	8007c36 <USB_EPStartXfer+0x10ea>
 8007bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c00:	4413      	add	r3, r2
 8007c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	011a      	lsls	r2, r3, #4
 8007c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c18:	4413      	add	r3, r2
 8007c1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c34:	801a      	strh	r2, [r3, #0]
 8007c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f040 809d 	bne.w	8007d90 <USB_EPStartXfer+0x1244>
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	011a      	lsls	r2, r3, #4
 8007c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cae:	801a      	strh	r2, [r3, #0]
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cbe:	d92b      	bls.n	8007d18 <USB_EPStartXfer+0x11cc>
 8007cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 031f 	and.w	r3, r3, #31
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d104      	bne.n	8007cf0 <USB_EPStartXfer+0x11a4>
 8007ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cea:	3b01      	subs	r3, #1
 8007cec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	029b      	lsls	r3, r3, #10
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4313      	orrs	r3, r2
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e069      	b.n	8007dec <USB_EPStartXfer+0x12a0>
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10c      	bne.n	8007d42 <USB_EPStartXfer+0x11f6>
 8007d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	e054      	b.n	8007dec <USB_EPStartXfer+0x12a0>
 8007d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d004      	beq.n	8007d72 <USB_EPStartXfer+0x1226>
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e02d      	b.n	8007dec <USB_EPStartXfer+0x12a0>
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d125      	bne.n	8007dec <USB_EPStartXfer+0x12a0>
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007db6:	4413      	add	r3, r2
 8007db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	011a      	lsls	r2, r3, #4
 8007dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dce:	4413      	add	r3, r2
 8007dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8218 	beq.w	800822e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <USB_EPStartXfer+0x12ea>
 8007e2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10d      	bne.n	8007e52 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 81f5 	bne.w	800822e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 81ee 	bne.w	800822e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	441a      	add	r2, r3
 8007e96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	8013      	strh	r3, [r2, #0]
 8007eae:	e1be      	b.n	800822e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	78db      	ldrb	r3, [r3, #3]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	f040 81b4 	bne.w	800822a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d917      	bls.n	8007f0e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	619a      	str	r2, [r3, #24]
 8007f0c:	e00e      	b.n	8007f2c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 8085 	bne.w	8008048 <USB_EPStartXfer+0x14fc>
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f62:	4413      	add	r3, r2
 8007f64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	011a      	lsls	r2, r3, #4
 8007f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f9e:	d923      	bls.n	8007fe8 <USB_EPStartXfer+0x149c>
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d104      	bne.n	8007fc0 <USB_EPStartXfer+0x1474>
 8007fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e060      	b.n	80080aa <USB_EPStartXfer+0x155e>
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <USB_EPStartXfer+0x14be>
 8007ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008000:	b29a      	uxth	r2, r3
 8008002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	e04f      	b.n	80080aa <USB_EPStartXfer+0x155e>
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <USB_EPStartXfer+0x14de>
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008024:	3301      	adds	r3, #1
 8008026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800802a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29a      	uxth	r2, r3
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008036:	b29b      	uxth	r3, r3
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	b29b      	uxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	e030      	b.n	80080aa <USB_EPStartXfer+0x155e>
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d128      	bne.n	80080aa <USB_EPStartXfer+0x155e>
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800807c:	4413      	add	r3, r2
 800807e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	011a      	lsls	r2, r3, #4
 8008090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008094:	4413      	add	r3, r2
 8008096:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800809a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800809e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 8085 	bne.w	80081d4 <USB_EPStartXfer+0x1688>
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80080ee:	4413      	add	r3, r2
 80080f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	011a      	lsls	r2, r3, #4
 8008102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008106:	4413      	add	r3, r2
 8008108:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800810c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800811c:	b29a      	uxth	r2, r3
 800811e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008128:	2b3e      	cmp	r3, #62	@ 0x3e
 800812a:	d923      	bls.n	8008174 <USB_EPStartXfer+0x1628>
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	2b00      	cmp	r3, #0
 8008140:	d104      	bne.n	800814c <USB_EPStartXfer+0x1600>
 8008142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008146:	3b01      	subs	r3, #1
 8008148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800814c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29a      	uxth	r2, r3
 8008154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008158:	b29b      	uxth	r3, r3
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	b29b      	uxth	r3, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	b29b      	uxth	r3, r3
 8008162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816a:	b29a      	uxth	r2, r3
 800816c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008170:	801a      	strh	r2, [r3, #0]
 8008172:	e05c      	b.n	800822e <USB_EPStartXfer+0x16e2>
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10c      	bne.n	8008196 <USB_EPStartXfer+0x164a>
 800817c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e04b      	b.n	800822e <USB_EPStartXfer+0x16e2>
 8008196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <USB_EPStartXfer+0x166a>
 80081ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081b0:	3301      	adds	r3, #1
 80081b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29a      	uxth	r2, r3
 80081be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	029b      	lsls	r3, r3, #10
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	e02c      	b.n	800822e <USB_EPStartXfer+0x16e2>
 80081d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d124      	bne.n	800822e <USB_EPStartXfer+0x16e2>
 80081e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081fa:	4413      	add	r3, r2
 80081fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008212:	4413      	add	r3, r2
 8008214:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008226:	801a      	strh	r2, [r3, #0]
 8008228:	e001      	b.n	800822e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e03a      	b.n	80082a4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800822e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008254:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008258:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800825c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008260:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008264:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008268:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800826c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800829a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d020      	beq.n	8008302 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082d6:	81bb      	strh	r3, [r7, #12]
 80082d8:	89bb      	ldrh	r3, [r7, #12]
 80082da:	f083 0310 	eor.w	r3, r3, #16
 80082de:	81bb      	strh	r3, [r7, #12]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	441a      	add	r2, r3
 80082ea:	89bb      	ldrh	r3, [r7, #12]
 80082ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	8013      	strh	r3, [r2, #0]
 8008300:	e01f      	b.n	8008342 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008318:	81fb      	strh	r3, [r7, #14]
 800831a:	89fb      	ldrh	r3, [r7, #14]
 800831c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008320:	81fb      	strh	r3, [r7, #14]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	89fb      	ldrh	r3, [r7, #14]
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr

0800834e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800834e:	b480      	push	{r7}
 8008350:	b087      	sub	sp, #28
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	7b1b      	ldrb	r3, [r3, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 809d 	bne.w	800849c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04c      	beq.n	8008404 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	823b      	strh	r3, [r7, #16]
 8008378:	8a3b      	ldrh	r3, [r7, #16]
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01b      	beq.n	80083ba <USB_EPClearStall+0x6c>
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008398:	81fb      	strh	r3, [r7, #14]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	441a      	add	r2, r3
 80083a4:	89fb      	ldrh	r3, [r7, #14]
 80083a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	78db      	ldrb	r3, [r3, #3]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d06c      	beq.n	800849c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d8:	81bb      	strh	r3, [r7, #12]
 80083da:	89bb      	ldrh	r3, [r7, #12]
 80083dc:	f083 0320 	eor.w	r3, r3, #32
 80083e0:	81bb      	strh	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	441a      	add	r2, r3
 80083ec:	89bb      	ldrh	r3, [r7, #12]
 80083ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083fe:	b29b      	uxth	r3, r3
 8008400:	8013      	strh	r3, [r2, #0]
 8008402:	e04b      	b.n	800849c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	82fb      	strh	r3, [r7, #22]
 8008412:	8afb      	ldrh	r3, [r7, #22]
 8008414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01b      	beq.n	8008454 <USB_EPClearStall+0x106>
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800842e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008432:	82bb      	strh	r3, [r7, #20]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	8abb      	ldrh	r3, [r7, #20]
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800844c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846a:	827b      	strh	r3, [r7, #18]
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008472:	827b      	strh	r3, [r7, #18]
 8008474:	8a7b      	ldrh	r3, [r7, #18]
 8008476:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800847a:	827b      	strh	r3, [r7, #18]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	8a7b      	ldrh	r3, [r7, #18]
 8008488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008498:	b29b      	uxth	r3, r3
 800849a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2280      	movs	r2, #128	@ 0x80
 80084be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	bc80      	pop	{r7}
 80084e0:	4770      	bx	lr

080084e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr

080084f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008504:	b29b      	uxth	r3, r3
 8008506:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800852a:	b480      	push	{r7}
 800852c:	b08b      	sub	sp, #44	@ 0x2c
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4611      	mov	r1, r2
 8008536:	461a      	mov	r2, r3
 8008538:	460b      	mov	r3, r1
 800853a:	80fb      	strh	r3, [r7, #6]
 800853c:	4613      	mov	r3, r2
 800853e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008540:	88bb      	ldrh	r3, [r7, #4]
 8008542:	3301      	adds	r3, #1
 8008544:	085b      	lsrs	r3, r3, #1
 8008546:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	005a      	lsls	r2, r3, #1
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800855c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	627b      	str	r3, [r7, #36]	@ 0x24
 8008562:	e01f      	b.n	80085a4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	3301      	adds	r3, #1
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	b21b      	sxth	r3, r3
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	b21a      	sxth	r2, r3
 8008576:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800857a:	4313      	orrs	r3, r2
 800857c:	b21b      	sxth	r3, r3
 800857e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	8a7a      	ldrh	r2, [r7, #18]
 8008584:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	3302      	adds	r3, #2
 800858a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	3302      	adds	r3, #2
 8008590:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	3301      	adds	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	3301      	adds	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	3b01      	subs	r3, #1
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1dc      	bne.n	8008564 <USB_WritePMA+0x3a>
  }
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	372c      	adds	r7, #44	@ 0x2c
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr

080085b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b08b      	sub	sp, #44	@ 0x2c
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	460b      	mov	r3, r1
 80085c6:	80fb      	strh	r3, [r7, #6]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085cc:	88bb      	ldrh	r3, [r7, #4]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085dc:	88fb      	ldrh	r3, [r7, #6]
 80085de:	005a      	lsls	r2, r3, #1
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ee:	e01b      	b.n	8008628 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	3302      	adds	r3, #2
 80085fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	b2da      	uxtb	r2, r3
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3301      	adds	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	3302      	adds	r3, #2
 8008620:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	3b01      	subs	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e0      	bne.n	80085f0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800862e:	88bb      	ldrh	r3, [r7, #4]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	701a      	strb	r2, [r3, #0]
  }
}
 800864a:	bf00      	nop
 800864c:	372c      	adds	r7, #44	@ 0x2c
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr

08008654 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7c1b      	ldrb	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d115      	bne.n	8008698 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800866c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008670:	2202      	movs	r2, #2
 8008672:	2181      	movs	r1, #129	@ 0x81
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 ffb4 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008684:	2202      	movs	r2, #2
 8008686:	2101      	movs	r1, #1
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 ffaa 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008696:	e012      	b.n	80086be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008698:	2340      	movs	r3, #64	@ 0x40
 800869a:	2202      	movs	r2, #2
 800869c:	2181      	movs	r1, #129	@ 0x81
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 ff9f 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086aa:	2340      	movs	r3, #64	@ 0x40
 80086ac:	2202      	movs	r2, #2
 80086ae:	2101      	movs	r1, #1
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 ff96 	bl	800a5e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086be:	2308      	movs	r3, #8
 80086c0:	2203      	movs	r2, #3
 80086c2:	2182      	movs	r1, #130	@ 0x82
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 ff8c 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086d4:	f002 f8ac 	bl	800a830 <USBD_static_malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80086ea:	2301      	movs	r3, #1
 80086ec:	73fb      	strb	r3, [r7, #15]
 80086ee:	e026      	b.n	800873e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2200      	movs	r2, #0
 800870e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7c1b      	ldrb	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008724:	2101      	movs	r1, #1
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f002 f84b 	bl	800a7c2 <USBD_LL_PrepareReceive>
 800872c:	e007      	b.n	800873e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008734:	2340      	movs	r3, #64	@ 0x40
 8008736:	2101      	movs	r1, #1
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f002 f842 	bl	800a7c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008758:	2181      	movs	r1, #129	@ 0x81
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 ff67 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008766:	2101      	movs	r1, #1
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 ff60 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008776:	2182      	movs	r1, #130	@ 0x82
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 ff58 	bl	800a62e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879e:	4618      	mov	r0, r3
 80087a0:	f002 f852 	bl	800a848 <USBD_static_free>
    pdev->pClassData = NULL;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d039      	beq.n	8008854 <USBD_CDC_Setup+0x9e>
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	d17f      	bne.n	80088e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d029      	beq.n	8008840 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	b25b      	sxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da11      	bge.n	800881a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008802:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	88d2      	ldrh	r2, [r2, #6]
 8008808:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800880a:	6939      	ldr	r1, [r7, #16]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	88db      	ldrh	r3, [r3, #6]
 8008810:	461a      	mov	r2, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 fa06 	bl	8009c24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008818:	e06b      	b.n	80088f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	785a      	ldrb	r2, [r3, #1]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	b2da      	uxtb	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008830:	6939      	ldr	r1, [r7, #16]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88db      	ldrh	r3, [r3, #6]
 8008836:	461a      	mov	r2, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 fa21 	bl	8009c80 <USBD_CtlPrepareRx>
      break;
 800883e:	e058      	b.n	80088f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	7850      	ldrb	r0, [r2, #1]
 800884c:	2200      	movs	r2, #0
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	4798      	blx	r3
      break;
 8008852:	e04e      	b.n	80088f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b0b      	cmp	r3, #11
 800885a:	d02e      	beq.n	80088ba <USBD_CDC_Setup+0x104>
 800885c:	2b0b      	cmp	r3, #11
 800885e:	dc38      	bgt.n	80088d2 <USBD_CDC_Setup+0x11c>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <USBD_CDC_Setup+0xb4>
 8008864:	2b0a      	cmp	r3, #10
 8008866:	d014      	beq.n	8008892 <USBD_CDC_Setup+0xdc>
 8008868:	e033      	b.n	80088d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008870:	2b03      	cmp	r3, #3
 8008872:	d107      	bne.n	8008884 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008874:	f107 030c 	add.w	r3, r7, #12
 8008878:	2202      	movs	r2, #2
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f9d1 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008882:	e02e      	b.n	80088e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f962 	bl	8009b50 <USBD_CtlError>
            ret = USBD_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	75fb      	strb	r3, [r7, #23]
          break;
 8008890:	e027      	b.n	80088e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008898:	2b03      	cmp	r3, #3
 800889a:	d107      	bne.n	80088ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800889c:	f107 030f 	add.w	r3, r7, #15
 80088a0:	2201      	movs	r2, #1
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f9bd 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088aa:	e01a      	b.n	80088e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 f94e 	bl	8009b50 <USBD_CtlError>
            ret = USBD_FAIL;
 80088b4:	2302      	movs	r3, #2
 80088b6:	75fb      	strb	r3, [r7, #23]
          break;
 80088b8:	e013      	b.n	80088e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d00d      	beq.n	80088e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f942 	bl	8009b50 <USBD_CtlError>
            ret = USBD_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088d0:	e006      	b.n	80088e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 f93b 	bl	8009b50 <USBD_CtlError>
          ret = USBD_FAIL;
 80088da:	2302      	movs	r3, #2
 80088dc:	75fb      	strb	r3, [r7, #23]
          break;
 80088de:	e000      	b.n	80088e2 <USBD_CDC_Setup+0x12c>
          break;
 80088e0:	bf00      	nop
      }
      break;
 80088e2:	e006      	b.n	80088f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 f932 	bl	8009b50 <USBD_CtlError>
      ret = USBD_FAIL;
 80088ec:	2302      	movs	r3, #2
 80088ee:	75fb      	strb	r3, [r7, #23]
      break;
 80088f0:	bf00      	nop
  }

  return ret;
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800890e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008916:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d03a      	beq.n	8008998 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	440b      	add	r3, r1
 8008930:	331c      	adds	r3, #28
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d029      	beq.n	800898c <USBD_CDC_DataIn+0x90>
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	331c      	adds	r3, #28
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	78f9      	ldrb	r1, [r7, #3]
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	460b      	mov	r3, r1
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	4403      	add	r3, r0
 8008958:	3320      	adds	r3, #32
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008960:	fb01 f303 	mul.w	r3, r1, r3
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d110      	bne.n	800898c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	331c      	adds	r3, #28
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	2300      	movs	r3, #0
 8008982:	2200      	movs	r2, #0
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fef9 	bl	800a77c <USBD_LL_Transmit>
 800898a:	e003      	b.n	8008994 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e000      	b.n	800899a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 ff24 	bl	800a808 <USBD_LL_GetRxDataSize>
 80089c0:	4602      	mov	r2, r0
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00d      	beq.n	80089ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80089e6:	4611      	mov	r1, r2
 80089e8:	4798      	blx	r3

    return USBD_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	e000      	b.n	80089f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089ee:	2302      	movs	r3, #2
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a06:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d014      	beq.n	8008a3c <USBD_CDC_EP0_RxReady+0x44>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008a18:	2bff      	cmp	r3, #255	@ 0xff
 8008a1a:	d00f      	beq.n	8008a3c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a2a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	22ff      	movs	r2, #255	@ 0xff
 8008a38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2243      	movs	r2, #67	@ 0x43
 8008a54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000094 	.word	0x20000094

08008a68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2243      	movs	r2, #67	@ 0x43
 8008a74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a76:	4b03      	ldr	r3, [pc, #12]	@ (8008a84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000050 	.word	0x20000050

08008a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2243      	movs	r2, #67	@ 0x43
 8008a94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	@ (8008aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	200000d8 	.word	0x200000d8

08008aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ab6:	4b03      	ldr	r3, [pc, #12]	@ (8008ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	2000000c 	.word	0x2000000c

08008ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b12:	88fa      	ldrh	r2, [r7, #6]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr

08008b26 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b36:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01c      	beq.n	8008ba0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d115      	bne.n	8008b9c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2181      	movs	r1, #129	@ 0x81
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fdf2 	bl	800a77c <USBD_LL_Transmit>

      return USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e002      	b.n	8008ba2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d017      	beq.n	8008bf4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fdf2 	bl	800a7c2 <USBD_LL_PrepareReceive>
 8008bde:	e007      	b.n	8008bf0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008be6:	2340      	movs	r3, #64	@ 0x40
 8008be8:	2101      	movs	r1, #1
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fde9 	bl	800a7c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e000      	b.n	8008bf6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008bf4:	2302      	movs	r3, #2
  }
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c12:	2302      	movs	r3, #2
 8008c14:	e01a      	b.n	8008c4c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	79fa      	ldrb	r2, [r7, #7]
 8008c42:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 fc57 	bl	800a4f8 <USBD_LL_Init>

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e001      	b.n	8008c7a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr

08008c86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fc8c 	bl	800a5ac <USBD_LL_Start>

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00c      	beq.n	8008ce6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4798      	blx	r3
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4611      	mov	r1, r2
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fed8 	bl	8009ade <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d016      	beq.n	8008d80 <USBD_LL_SetupStage+0x6a>
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d81c      	bhi.n	8008d90 <USBD_LL_SetupStage+0x7a>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <USBD_LL_SetupStage+0x4a>
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d008      	beq.n	8008d70 <USBD_LL_SetupStage+0x5a>
 8008d5e:	e017      	b.n	8008d90 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f9cb 	bl	8009104 <USBD_StdDevReq>
      break;
 8008d6e:	e01a      	b.n	8008da6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa2d 	bl	80091d8 <USBD_StdItfReq>
      break;
 8008d7e:	e012      	b.n	8008da6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fa6d 	bl	8009268 <USBD_StdEPReq>
      break;
 8008d8e:	e00a      	b.n	8008da6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 fc64 	bl	800a66c <USBD_LL_StallEP>
      break;
 8008da4:	bf00      	nop
  }

  return USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	460b      	mov	r3, r1
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d14b      	bne.n	8008e5c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008dca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d134      	bne.n	8008e40 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d919      	bls.n	8008e16 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d203      	bcs.n	8008e04 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	e002      	b.n	8008e0a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 ff54 	bl	8009cbc <USBD_CtlContinueRx>
 8008e14:	e038      	b.n	8008e88 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d105      	bne.n	8008e38 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 ff51 	bl	8009ce0 <USBD_CtlSendStatus>
 8008e3e:	e023      	b.n	8008e88 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d11e      	bne.n	8008e88 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e52:	2100      	movs	r1, #0
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f001 fc09 	bl	800a66c <USBD_LL_StallEP>
 8008e5a:	e015      	b.n	8008e88 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00d      	beq.n	8008e84 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d108      	bne.n	8008e84 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	7afa      	ldrb	r2, [r7, #11]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	4798      	blx	r3
 8008e82:	e001      	b.n	8008e88 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e84:	2302      	movs	r3, #2
 8008e86:	e000      	b.n	8008e8a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d17f      	bne.n	8008fa6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d15c      	bne.n	8008f70 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d915      	bls.n	8008eee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	1ad2      	subs	r2, r2, r3
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 febe 	bl	8009c5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f001 fc6b 	bl	800a7c2 <USBD_LL_PrepareReceive>
 8008eec:	e04e      	b.n	8008f8c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	6912      	ldr	r2, [r2, #16]
 8008ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008efa:	fb01 f202 	mul.w	r2, r1, r2
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d11c      	bne.n	8008f3e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d316      	bcc.n	8008f3e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d20f      	bcs.n	8008f3e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 fe9a 	bl	8009c5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f30:	2300      	movs	r3, #0
 8008f32:	2200      	movs	r2, #0
 8008f34:	2100      	movs	r1, #0
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f001 fc43 	bl	800a7c2 <USBD_LL_PrepareReceive>
 8008f3c:	e026      	b.n	8008f8c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d105      	bne.n	8008f60 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f60:	2180      	movs	r1, #128	@ 0x80
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f001 fb82 	bl	800a66c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fecc 	bl	8009d06 <USBD_CtlReceiveStatus>
 8008f6e:	e00d      	b.n	8008f8c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d004      	beq.n	8008f84 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d103      	bne.n	8008f8c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f84:	2180      	movs	r1, #128	@ 0x80
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f001 fb70 	bl	800a66c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d11d      	bne.n	8008fd2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fe81 	bl	8008c9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fa4:	e015      	b.n	8008fd2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00d      	beq.n	8008fce <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d108      	bne.n	8008fce <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	7afa      	ldrb	r2, [r7, #11]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	4798      	blx	r3
 8008fcc:	e001      	b.n	8008fd2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e000      	b.n	8008fd4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fe4:	2340      	movs	r3, #64	@ 0x40
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2100      	movs	r1, #0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 faf9 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2240      	movs	r2, #64	@ 0x40
 8008ffc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009000:	2340      	movs	r3, #64	@ 0x40
 8009002:	2200      	movs	r2, #0
 8009004:	2180      	movs	r1, #128	@ 0x80
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 faeb 	bl	800a5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2240      	movs	r2, #64	@ 0x40
 8009016:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6852      	ldr	r2, [r2, #4]
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	4611      	mov	r1, r2
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
  }

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	bc80      	pop	{r7}
 800907a:	4770      	bx	lr

0800907c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2204      	movs	r2, #4
 8009094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d105      	bne.n	80090c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr

080090ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d10b      	bne.n	80090f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d005      	beq.n	80090f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800911a:	2b40      	cmp	r3, #64	@ 0x40
 800911c:	d005      	beq.n	800912a <USBD_StdDevReq+0x26>
 800911e:	2b40      	cmp	r3, #64	@ 0x40
 8009120:	d84f      	bhi.n	80091c2 <USBD_StdDevReq+0xbe>
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <USBD_StdDevReq+0x36>
 8009126:	2b20      	cmp	r3, #32
 8009128:	d14b      	bne.n	80091c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
      break;
 8009138:	e048      	b.n	80091cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b09      	cmp	r3, #9
 8009140:	d839      	bhi.n	80091b6 <USBD_StdDevReq+0xb2>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <USBD_StdDevReq+0x44>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009199 	.word	0x08009199
 800914c:	080091ad 	.word	0x080091ad
 8009150:	080091b7 	.word	0x080091b7
 8009154:	080091a3 	.word	0x080091a3
 8009158:	080091b7 	.word	0x080091b7
 800915c:	0800917b 	.word	0x0800917b
 8009160:	08009171 	.word	0x08009171
 8009164:	080091b7 	.word	0x080091b7
 8009168:	0800918f 	.word	0x0800918f
 800916c:	08009185 	.word	0x08009185
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f9dc 	bl	8009530 <USBD_GetDescriptor>
          break;
 8009178:	e022      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb3f 	bl	8009800 <USBD_SetAddress>
          break;
 8009182:	e01d      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb7e 	bl	8009888 <USBD_SetConfig>
          break;
 800918c:	e018      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fc07 	bl	80099a4 <USBD_GetConfig>
          break;
 8009196:	e013      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fc37 	bl	8009a0e <USBD_GetStatus>
          break;
 80091a0:	e00e      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fc65 	bl	8009a74 <USBD_SetFeature>
          break;
 80091aa:	e009      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fc74 	bl	8009a9c <USBD_ClrFeature>
          break;
 80091b4:	e004      	b.n	80091c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fcc9 	bl	8009b50 <USBD_CtlError>
          break;
 80091be:	bf00      	nop
      }
      break;
 80091c0:	e004      	b.n	80091cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fcc3 	bl	8009b50 <USBD_CtlError>
      break;
 80091ca:	bf00      	nop
  }

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop

080091d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d005      	beq.n	80091fe <USBD_StdItfReq+0x26>
 80091f2:	2b40      	cmp	r3, #64	@ 0x40
 80091f4:	d82e      	bhi.n	8009254 <USBD_StdItfReq+0x7c>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <USBD_StdItfReq+0x26>
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	d12a      	bne.n	8009254 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009204:	3b01      	subs	r3, #1
 8009206:	2b02      	cmp	r3, #2
 8009208:	d81d      	bhi.n	8009246 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	889b      	ldrh	r3, [r3, #4]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d813      	bhi.n	800923c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d110      	bne.n	8009250 <USBD_StdItfReq+0x78>
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10d      	bne.n	8009250 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fd53 	bl	8009ce0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800923a:	e009      	b.n	8009250 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc86 	bl	8009b50 <USBD_CtlError>
          break;
 8009244:	e004      	b.n	8009250 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc81 	bl	8009b50 <USBD_CtlError>
          break;
 800924e:	e000      	b.n	8009252 <USBD_StdItfReq+0x7a>
          break;
 8009250:	bf00      	nop
      }
      break;
 8009252:	e004      	b.n	800925e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fc7a 	bl	8009b50 <USBD_CtlError>
      break;
 800925c:	bf00      	nop
  }

  return USBD_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	889b      	ldrh	r3, [r3, #4]
 800927a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009284:	2b40      	cmp	r3, #64	@ 0x40
 8009286:	d007      	beq.n	8009298 <USBD_StdEPReq+0x30>
 8009288:	2b40      	cmp	r3, #64	@ 0x40
 800928a:	f200 8146 	bhi.w	800951a <USBD_StdEPReq+0x2b2>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <USBD_StdEPReq+0x40>
 8009292:	2b20      	cmp	r3, #32
 8009294:	f040 8141 	bne.w	800951a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	4798      	blx	r3
      break;
 80092a6:	e13d      	b.n	8009524 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d10a      	bne.n	80092ca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	e12d      	b.n	8009526 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d007      	beq.n	80092e2 <USBD_StdEPReq+0x7a>
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	f300 811b 	bgt.w	800950e <USBD_StdEPReq+0x2a6>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d072      	beq.n	80093c2 <USBD_StdEPReq+0x15a>
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d03a      	beq.n	8009356 <USBD_StdEPReq+0xee>
 80092e0:	e115      	b.n	800950e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d002      	beq.n	80092f2 <USBD_StdEPReq+0x8a>
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d015      	beq.n	800931c <USBD_StdEPReq+0xb4>
 80092f0:	e02b      	b.n	800934a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00c      	beq.n	8009312 <USBD_StdEPReq+0xaa>
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	2b80      	cmp	r3, #128	@ 0x80
 80092fc:	d009      	beq.n	8009312 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f001 f9b2 	bl	800a66c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009308:	2180      	movs	r1, #128	@ 0x80
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 f9ae 	bl	800a66c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009310:	e020      	b.n	8009354 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fc1b 	bl	8009b50 <USBD_CtlError>
              break;
 800931a:	e01b      	b.n	8009354 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	885b      	ldrh	r3, [r3, #2]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10e      	bne.n	8009342 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <USBD_StdEPReq+0xda>
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b80      	cmp	r3, #128	@ 0x80
 800932e:	d008      	beq.n	8009342 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d104      	bne.n	8009342 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f001 f995 	bl	800a66c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fccc 	bl	8009ce0 <USBD_CtlSendStatus>

              break;
 8009348:	e004      	b.n	8009354 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fbff 	bl	8009b50 <USBD_CtlError>
              break;
 8009352:	bf00      	nop
          }
          break;
 8009354:	e0e0      	b.n	8009518 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800935c:	2b02      	cmp	r3, #2
 800935e:	d002      	beq.n	8009366 <USBD_StdEPReq+0xfe>
 8009360:	2b03      	cmp	r3, #3
 8009362:	d015      	beq.n	8009390 <USBD_StdEPReq+0x128>
 8009364:	e026      	b.n	80093b4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00c      	beq.n	8009386 <USBD_StdEPReq+0x11e>
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	2b80      	cmp	r3, #128	@ 0x80
 8009370:	d009      	beq.n	8009386 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 f978 	bl	800a66c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800937c:	2180      	movs	r1, #128	@ 0x80
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 f974 	bl	800a66c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009384:	e01c      	b.n	80093c0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fbe1 	bl	8009b50 <USBD_CtlError>
              break;
 800938e:	e017      	b.n	80093c0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	885b      	ldrh	r3, [r3, #2]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d112      	bne.n	80093be <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f97f 	bl	800a6aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc97 	bl	8009ce0 <USBD_CtlSendStatus>
              }
              break;
 80093b2:	e004      	b.n	80093be <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fbca 	bl	8009b50 <USBD_CtlError>
              break;
 80093bc:	e000      	b.n	80093c0 <USBD_StdEPReq+0x158>
              break;
 80093be:	bf00      	nop
          }
          break;
 80093c0:	e0aa      	b.n	8009518 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d002      	beq.n	80093d2 <USBD_StdEPReq+0x16a>
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d032      	beq.n	8009436 <USBD_StdEPReq+0x1ce>
 80093d0:	e097      	b.n	8009502 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <USBD_StdEPReq+0x180>
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b80      	cmp	r3, #128	@ 0x80
 80093dc:	d004      	beq.n	80093e8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fbb5 	bl	8009b50 <USBD_CtlError>
                break;
 80093e6:	e091      	b.n	800950c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da0b      	bge.n	8009408 <USBD_StdEPReq+0x1a0>
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	3310      	adds	r3, #16
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	4413      	add	r3, r2
 8009404:	3304      	adds	r3, #4
 8009406:	e00b      	b.n	8009420 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800940e:	4613      	mov	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	3304      	adds	r3, #4
 8009420:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2202      	movs	r2, #2
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fbf8 	bl	8009c24 <USBD_CtlSendData>
              break;
 8009434:	e06a      	b.n	800950c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800943a:	2b00      	cmp	r3, #0
 800943c:	da11      	bge.n	8009462 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	3318      	adds	r3, #24
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d117      	bne.n	8009488 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fb78 	bl	8009b50 <USBD_CtlError>
                  break;
 8009460:	e054      	b.n	800950c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb65 	bl	8009b50 <USBD_CtlError>
                  break;
 8009486:	e041      	b.n	800950c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800948c:	2b00      	cmp	r3, #0
 800948e:	da0b      	bge.n	80094a8 <USBD_StdEPReq+0x240>
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	3310      	adds	r3, #16
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	3304      	adds	r3, #4
 80094a6:	e00b      	b.n	80094c0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	3304      	adds	r3, #4
 80094c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <USBD_StdEPReq+0x266>
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
 80094ca:	2b80      	cmp	r3, #128	@ 0x80
 80094cc:	d103      	bne.n	80094d6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e00e      	b.n	80094f4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	4619      	mov	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 f904 	bl	800a6e8 <USBD_LL_IsStallEP>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2201      	movs	r2, #1
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	e002      	b.n	80094f4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2202      	movs	r2, #2
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fb92 	bl	8009c24 <USBD_CtlSendData>
              break;
 8009500:	e004      	b.n	800950c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb23 	bl	8009b50 <USBD_CtlError>
              break;
 800950a:	bf00      	nop
          }
          break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb1d 	bl	8009b50 <USBD_CtlError>
          break;
 8009516:	bf00      	nop
      }
      break;
 8009518:	e004      	b.n	8009524 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb17 	bl	8009b50 <USBD_CtlError>
      break;
 8009522:	bf00      	nop
  }

  return ret;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	885b      	ldrh	r3, [r3, #2]
 800954a:	0a1b      	lsrs	r3, r3, #8
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	2b06      	cmp	r3, #6
 8009552:	f200 8128 	bhi.w	80097a6 <USBD_GetDescriptor+0x276>
 8009556:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <USBD_GetDescriptor+0x2c>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	08009579 	.word	0x08009579
 8009560:	08009591 	.word	0x08009591
 8009564:	080095d1 	.word	0x080095d1
 8009568:	080097a7 	.word	0x080097a7
 800956c:	080097a7 	.word	0x080097a7
 8009570:	08009747 	.word	0x08009747
 8009574:	08009773 	.word	0x08009773
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	7c12      	ldrb	r2, [r2, #16]
 8009584:	f107 0108 	add.w	r1, r7, #8
 8009588:	4610      	mov	r0, r2
 800958a:	4798      	blx	r3
 800958c:	60f8      	str	r0, [r7, #12]
      break;
 800958e:	e112      	b.n	80097b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7c1b      	ldrb	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10d      	bne.n	80095b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a0:	f107 0208 	add.w	r2, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095b2:	e100      	b.n	80097b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	f107 0208 	add.w	r2, r7, #8
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
 80095c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	2202      	movs	r2, #2
 80095cc:	701a      	strb	r2, [r3, #0]
      break;
 80095ce:	e0f2      	b.n	80097b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	f200 80ac 	bhi.w	8009734 <USBD_GetDescriptor+0x204>
 80095dc:	a201      	add	r2, pc, #4	@ (adr r2, 80095e4 <USBD_GetDescriptor+0xb4>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	080095fd 	.word	0x080095fd
 80095e8:	08009631 	.word	0x08009631
 80095ec:	08009665 	.word	0x08009665
 80095f0:	08009699 	.word	0x08009699
 80095f4:	080096cd 	.word	0x080096cd
 80095f8:	08009701 	.word	0x08009701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961e:	e091      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa94 	bl	8009b50 <USBD_CtlError>
            err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
          break;
 800962e:	e089      	b.n	8009744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009652:	e077      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa7a 	bl	8009b50 <USBD_CtlError>
            err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
          break;
 8009662:	e06f      	b.n	8009744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e05d      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa60 	bl	8009b50 <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e055      	b.n	8009744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e043      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa46 	bl	8009b50 <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e03b      	b.n	8009744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	7c12      	ldrb	r2, [r2, #16]
 80096e4:	f107 0108 	add.w	r1, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ee:	e029      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa2c 	bl	8009b50 <USBD_CtlError>
            err++;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3301      	adds	r3, #1
 80096fc:	72fb      	strb	r3, [r7, #11]
          break;
 80096fe:	e021      	b.n	8009744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	7c12      	ldrb	r2, [r2, #16]
 8009718:	f107 0108 	add.w	r1, r7, #8
 800971c:	4610      	mov	r0, r2
 800971e:	4798      	blx	r3
 8009720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009722:	e00f      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa12 	bl	8009b50 <USBD_CtlError>
            err++;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	3301      	adds	r3, #1
 8009730:	72fb      	strb	r3, [r7, #11]
          break;
 8009732:	e007      	b.n	8009744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa0a 	bl	8009b50 <USBD_CtlError>
          err++;
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	3301      	adds	r3, #1
 8009740:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009742:	e038      	b.n	80097b6 <USBD_GetDescriptor+0x286>
 8009744:	e037      	b.n	80097b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7c1b      	ldrb	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009756:	f107 0208 	add.w	r2, r7, #8
 800975a:	4610      	mov	r0, r2
 800975c:	4798      	blx	r3
 800975e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009760:	e029      	b.n	80097b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f9f3 	bl	8009b50 <USBD_CtlError>
        err++;
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	3301      	adds	r3, #1
 800976e:	72fb      	strb	r3, [r7, #11]
      break;
 8009770:	e021      	b.n	80097b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	7c1b      	ldrb	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10d      	bne.n	8009796 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009782:	f107 0208 	add.w	r2, r7, #8
 8009786:	4610      	mov	r0, r2
 8009788:	4798      	blx	r3
 800978a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	2207      	movs	r2, #7
 8009792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009794:	e00f      	b.n	80097b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f9d9 	bl	8009b50 <USBD_CtlError>
        err++;
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	3301      	adds	r3, #1
 80097a2:	72fb      	strb	r3, [r7, #11]
      break;
 80097a4:	e007      	b.n	80097b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f9d1 	bl	8009b50 <USBD_CtlError>
      err++;
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	3301      	adds	r3, #1
 80097b2:	72fb      	strb	r3, [r7, #11]
      break;
 80097b4:	bf00      	nop
  }

  if (err != 0U)
 80097b6:	7afb      	ldrb	r3, [r7, #11]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d11c      	bne.n	80097f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d011      	beq.n	80097e6 <USBD_GetDescriptor+0x2b6>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	88db      	ldrh	r3, [r3, #6]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00d      	beq.n	80097e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	88da      	ldrh	r2, [r3, #6]
 80097ce:	893b      	ldrh	r3, [r7, #8]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	bf28      	it	cs
 80097d4:	4613      	movcs	r3, r2
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097da:	893b      	ldrh	r3, [r7, #8]
 80097dc:	461a      	mov	r2, r3
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa1f 	bl	8009c24 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	88db      	ldrh	r3, [r3, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa76 	bl	8009ce0 <USBD_CtlSendStatus>
 80097f4:	e000      	b.n	80097f8 <USBD_GetDescriptor+0x2c8>
    return;
 80097f6:	bf00      	nop
    }
  }
}
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop

08009800 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	889b      	ldrh	r3, [r3, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d130      	bne.n	8009874 <USBD_SetAddress+0x74>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	88db      	ldrh	r3, [r3, #6]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d12c      	bne.n	8009874 <USBD_SetAddress+0x74>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	885b      	ldrh	r3, [r3, #2]
 800981e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009820:	d828      	bhi.n	8009874 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009834:	2b03      	cmp	r3, #3
 8009836:	d104      	bne.n	8009842 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f988 	bl	8009b50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009840:	e01d      	b.n	800987e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	7bfa      	ldrb	r2, [r7, #15]
 8009846:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 ff75 	bl	800a73e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa43 	bl	8009ce0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	e009      	b.n	800987e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009872:	e004      	b.n	800987e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f96a 	bl	8009b50 <USBD_CtlError>
  }
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	4b41      	ldr	r3, [pc, #260]	@ (80099a0 <USBD_SetConfig+0x118>)
 800989a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800989c:	4b40      	ldr	r3, [pc, #256]	@ (80099a0 <USBD_SetConfig+0x118>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d904      	bls.n	80098ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f952 	bl	8009b50 <USBD_CtlError>
 80098ac:	e075      	b.n	800999a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d002      	beq.n	80098be <USBD_SetConfig+0x36>
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d023      	beq.n	8009904 <USBD_SetConfig+0x7c>
 80098bc:	e062      	b.n	8009984 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098be:	4b38      	ldr	r3, [pc, #224]	@ (80099a0 <USBD_SetConfig+0x118>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01a      	beq.n	80098fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098c6:	4b36      	ldr	r3, [pc, #216]	@ (80099a0 <USBD_SetConfig+0x118>)
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2203      	movs	r2, #3
 80098d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098d8:	4b31      	ldr	r3, [pc, #196]	@ (80099a0 <USBD_SetConfig+0x118>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f9e7 	bl	8008cb2 <USBD_SetClassConfig>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d104      	bne.n	80098f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f92f 	bl	8009b50 <USBD_CtlError>
            return;
 80098f2:	e052      	b.n	800999a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f9f3 	bl	8009ce0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098fa:	e04e      	b.n	800999a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f9ef 	bl	8009ce0 <USBD_CtlSendStatus>
        break;
 8009902:	e04a      	b.n	800999a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009904:	4b26      	ldr	r3, [pc, #152]	@ (80099a0 <USBD_SetConfig+0x118>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d112      	bne.n	8009932 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009914:	4b22      	ldr	r3, [pc, #136]	@ (80099a0 <USBD_SetConfig+0x118>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800991e:	4b20      	ldr	r3, [pc, #128]	@ (80099a0 <USBD_SetConfig+0x118>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff f9e3 	bl	8008cf0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9d8 	bl	8009ce0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009930:	e033      	b.n	800999a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009932:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <USBD_SetConfig+0x118>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	429a      	cmp	r2, r3
 800993e:	d01d      	beq.n	800997c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff f9d1 	bl	8008cf0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800994e:	4b14      	ldr	r3, [pc, #80]	@ (80099a0 <USBD_SetConfig+0x118>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009958:	4b11      	ldr	r3, [pc, #68]	@ (80099a0 <USBD_SetConfig+0x118>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff f9a7 	bl	8008cb2 <USBD_SetClassConfig>
 8009964:	4603      	mov	r3, r0
 8009966:	2b02      	cmp	r3, #2
 8009968:	d104      	bne.n	8009974 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f8ef 	bl	8009b50 <USBD_CtlError>
            return;
 8009972:	e012      	b.n	800999a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9b3 	bl	8009ce0 <USBD_CtlSendStatus>
        break;
 800997a:	e00e      	b.n	800999a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f9af 	bl	8009ce0 <USBD_CtlSendStatus>
        break;
 8009982:	e00a      	b.n	800999a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8e2 	bl	8009b50 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800998c:	4b04      	ldr	r3, [pc, #16]	@ (80099a0 <USBD_SetConfig+0x118>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff f9ac 	bl	8008cf0 <USBD_ClrClassConfig>
        break;
 8009998:	bf00      	nop
    }
  }
}
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	2000055c 	.word	0x2000055c

080099a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	88db      	ldrh	r3, [r3, #6]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d004      	beq.n	80099c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f8c9 	bl	8009b50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099be:	e022      	b.n	8009a06 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	dc02      	bgt.n	80099d0 <USBD_GetConfig+0x2c>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dc03      	bgt.n	80099d6 <USBD_GetConfig+0x32>
 80099ce:	e015      	b.n	80099fc <USBD_GetConfig+0x58>
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d00b      	beq.n	80099ec <USBD_GetConfig+0x48>
 80099d4:	e012      	b.n	80099fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3308      	adds	r3, #8
 80099e0:	2201      	movs	r2, #1
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f91d 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099ea:	e00c      	b.n	8009a06 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3304      	adds	r3, #4
 80099f0:	2201      	movs	r2, #1
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f915 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099fa:	e004      	b.n	8009a06 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8a6 	bl	8009b50 <USBD_CtlError>
        break;
 8009a04:	bf00      	nop
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d81e      	bhi.n	8009a62 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	88db      	ldrh	r3, [r3, #6]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d004      	beq.n	8009a36 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f88e 	bl	8009b50 <USBD_CtlError>
        break;
 8009a34:	e01a      	b.n	8009a6c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	f043 0202 	orr.w	r2, r3, #2
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	330c      	adds	r3, #12
 8009a56:	2202      	movs	r2, #2
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f8e2 	bl	8009c24 <USBD_CtlSendData>
      break;
 8009a60:	e004      	b.n	8009a6c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f873 	bl	8009b50 <USBD_CtlError>
      break;
 8009a6a:	bf00      	nop
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	885b      	ldrh	r3, [r3, #2]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d106      	bne.n	8009a94 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f926 	bl	8009ce0 <USBD_CtlSendStatus>
  }
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aac:	3b01      	subs	r3, #1
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d80b      	bhi.n	8009aca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885b      	ldrh	r3, [r3, #2]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d10c      	bne.n	8009ad4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f90c 	bl	8009ce0 <USBD_CtlSendStatus>
      }
      break;
 8009ac8:	e004      	b.n	8009ad4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f83f 	bl	8009b50 <USBD_CtlError>
      break;
 8009ad2:	e000      	b.n	8009ad6 <USBD_ClrFeature+0x3a>
      break;
 8009ad4:	bf00      	nop
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781a      	ldrb	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	785a      	ldrb	r2, [r3, #1]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	3302      	adds	r3, #2
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	3303      	adds	r3, #3
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	3304      	adds	r3, #4
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	3305      	adds	r3, #5
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4413      	add	r3, r2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	3306      	adds	r3, #6
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	3307      	adds	r3, #7
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	80da      	strh	r2, [r3, #6]

}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bc80      	pop	{r7}
 8009b4e:	4770      	bx	lr

08009b50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b5a:	2180      	movs	r1, #128	@ 0x80
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fd85 	bl	800a66c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b62:	2100      	movs	r1, #0
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fd81 	bl	800a66c <USBD_LL_StallEP>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d032      	beq.n	8009bee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f834 	bl	8009bf6 <USBD_GetLen>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	3301      	adds	r3, #1
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	75fa      	strb	r2, [r7, #23]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	7812      	ldrb	r2, [r2, #0]
 8009bac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	75fa      	strb	r2, [r7, #23]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	2203      	movs	r2, #3
 8009bbc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bbe:	e012      	b.n	8009be6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	60fa      	str	r2, [r7, #12]
 8009bc6:	7dfa      	ldrb	r2, [r7, #23]
 8009bc8:	1c51      	adds	r1, r2, #1
 8009bca:	75f9      	strb	r1, [r7, #23]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	75fa      	strb	r2, [r7, #23]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4413      	add	r3, r2
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e8      	bne.n	8009bc0 <USBD_GetString+0x4e>
    }
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c02:	e005      	b.n	8009c10 <USBD_GetLen+0x1a>
  {
    len++;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	3301      	adds	r3, #1
 8009c08:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f5      	bne.n	8009c04 <USBD_GetLen+0xe>
  }

  return len;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2202      	movs	r2, #2
 8009c36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c3a:	88fa      	ldrh	r2, [r7, #6]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c40:	88fa      	ldrh	r2, [r7, #6]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c46:	88fb      	ldrh	r3, [r7, #6]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fd95 	bl	800a77c <USBD_LL_Transmit>

  return USBD_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	2100      	movs	r1, #0
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fd83 	bl	800a77c <USBD_LL_Transmit>

  return USBD_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2203      	movs	r2, #3
 8009c92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	2100      	movs	r1, #0
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fd88 	bl	800a7c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	2100      	movs	r1, #0
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fd76 	bl	800a7c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2204      	movs	r2, #4
 8009cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fd40 	bl	800a77c <USBD_LL_Transmit>

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2205      	movs	r2, #5
 8009d12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d16:	2300      	movs	r3, #0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fd50 	bl	800a7c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d30:	2200      	movs	r2, #0
 8009d32:	4912      	ldr	r1, [pc, #72]	@ (8009d7c <MX_USB_DEVICE_Init+0x50>)
 8009d34:	4812      	ldr	r0, [pc, #72]	@ (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d36:	f7fe ff62 	bl	8008bfe <USBD_Init>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d40:	f7f7 fc94 	bl	800166c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d44:	490f      	ldr	r1, [pc, #60]	@ (8009d84 <MX_USB_DEVICE_Init+0x58>)
 8009d46:	480e      	ldr	r0, [pc, #56]	@ (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d48:	f7fe ff84 	bl	8008c54 <USBD_RegisterClass>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d52:	f7f7 fc8b 	bl	800166c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d56:	490c      	ldr	r1, [pc, #48]	@ (8009d88 <MX_USB_DEVICE_Init+0x5c>)
 8009d58:	4809      	ldr	r0, [pc, #36]	@ (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d5a:	f7fe feb5 	bl	8008ac8 <USBD_CDC_RegisterInterface>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d64:	f7f7 fc82 	bl	800166c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d68:	4805      	ldr	r0, [pc, #20]	@ (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d6a:	f7fe ff8c 	bl	8008c86 <USBD_Start>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d74:	f7f7 fc7a 	bl	800166c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d78:	bf00      	nop
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	2000012c 	.word	0x2000012c
 8009d80:	20000560 	.word	0x20000560
 8009d84:	20000018 	.word	0x20000018
 8009d88:	2000011c 	.word	0x2000011c

08009d8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d90:	2200      	movs	r2, #0
 8009d92:	4905      	ldr	r1, [pc, #20]	@ (8009da8 <CDC_Init_FS+0x1c>)
 8009d94:	4805      	ldr	r0, [pc, #20]	@ (8009dac <CDC_Init_FS+0x20>)
 8009d96:	f7fe fead 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d9a:	4905      	ldr	r1, [pc, #20]	@ (8009db0 <CDC_Init_FS+0x24>)
 8009d9c:	4803      	ldr	r0, [pc, #12]	@ (8009dac <CDC_Init_FS+0x20>)
 8009d9e:	f7fe fec2 	bl	8008b26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009da2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20000c24 	.word	0x20000c24
 8009dac:	20000560 	.word	0x20000560
 8009db0:	20000824 	.word	0x20000824

08009db4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009db8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr
	...

08009dc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	6039      	str	r1, [r7, #0]
 8009dce:	71fb      	strb	r3, [r7, #7]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b23      	cmp	r3, #35	@ 0x23
 8009dd8:	d84a      	bhi.n	8009e70 <CDC_Control_FS+0xac>
 8009dda:	a201      	add	r2, pc, #4	@ (adr r2, 8009de0 <CDC_Control_FS+0x1c>)
 8009ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de0:	08009e71 	.word	0x08009e71
 8009de4:	08009e71 	.word	0x08009e71
 8009de8:	08009e71 	.word	0x08009e71
 8009dec:	08009e71 	.word	0x08009e71
 8009df0:	08009e71 	.word	0x08009e71
 8009df4:	08009e71 	.word	0x08009e71
 8009df8:	08009e71 	.word	0x08009e71
 8009dfc:	08009e71 	.word	0x08009e71
 8009e00:	08009e71 	.word	0x08009e71
 8009e04:	08009e71 	.word	0x08009e71
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009e71 	.word	0x08009e71
 8009e10:	08009e71 	.word	0x08009e71
 8009e14:	08009e71 	.word	0x08009e71
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e71 	.word	0x08009e71
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009e71 	.word	0x08009e71
 8009e28:	08009e71 	.word	0x08009e71
 8009e2c:	08009e71 	.word	0x08009e71
 8009e30:	08009e71 	.word	0x08009e71
 8009e34:	08009e71 	.word	0x08009e71
 8009e38:	08009e71 	.word	0x08009e71
 8009e3c:	08009e71 	.word	0x08009e71
 8009e40:	08009e71 	.word	0x08009e71
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e71 	.word	0x08009e71
 8009e5c:	08009e71 	.word	0x08009e71
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e71 	.word	0x08009e71
 8009e68:	08009e71 	.word	0x08009e71
 8009e6c:	08009e71 	.word	0x08009e71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e70:	bf00      	nop
  }

  return (USBD_OK);
 8009e72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop

08009e80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b09e      	sub	sp, #120	@ 0x78
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static char rx_buffer[64]; // Буфер для сборки команды
		static uint8_t rx_index = 0; // Индекс текуцей позиции
		    // Обработка всех принятых байт
		    for (uint32_t i = 0; i < *Len; i++) {
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e8e:	e106      	b.n	800a09e <CDC_Receive_FS+0x21e>
		        char byte = Buf[i]; // Чтение байта
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e94:	4413      	add	r3, r2
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		        // Если конец строки или буфер переполен - заканчиваем строку
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8009e9c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8009ea0:	2b0a      	cmp	r3, #10
 8009ea2:	d004      	beq.n	8009eae <CDC_Receive_FS+0x2e>
 8009ea4:	4b87      	ldr	r3, [pc, #540]	@ (800a0c4 <CDC_Receive_FS+0x244>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eaa:	f240 80ea 	bls.w	800a082 <CDC_Receive_FS+0x202>
		            rx_buffer[rx_index] = '\0';
 8009eae:	4b85      	ldr	r3, [pc, #532]	@ (800a0c4 <CDC_Receive_FS+0x244>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4b84      	ldr	r3, [pc, #528]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	5499      	strb	r1, [r3, r2]
		            // Обработка команды частоты: F<канал>:<частота>
		                     if (rx_buffer[0] == 'F') {
 8009eba:	4b83      	ldr	r3, [pc, #524]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b46      	cmp	r3, #70	@ 0x46
 8009ec0:	d17e      	bne.n	8009fc0 <CDC_Receive_FS+0x140>
		                         uint8_t ch = rx_buffer[1] - '0';
 8009ec2:	4b81      	ldr	r3, [pc, #516]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	3b30      	subs	r3, #48	@ 0x30
 8009ec8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8009ecc:	4b7e      	ldr	r3, [pc, #504]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 8009ece:	789b      	ldrb	r3, [r3, #2]
 8009ed0:	2b3a      	cmp	r3, #58	@ 0x3a
 8009ed2:	d170      	bne.n	8009fb6 <CDC_Receive_FS+0x136>
 8009ed4:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d86c      	bhi.n	8009fb6 <CDC_Receive_FS+0x136>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 8009edc:	487b      	ldr	r0, [pc, #492]	@ (800a0cc <CDC_Receive_FS+0x24c>)
 8009ede:	f000 fcf3 	bl	800a8c8 <atoi>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 8009ee6:	4879      	ldr	r0, [pc, #484]	@ (800a0cc <CDC_Receive_FS+0x24c>)
 8009ee8:	f000 fcee 	bl	800a8c8 <atoi>
 8009eec:	4603      	mov	r3, r0
 8009eee:	65bb      	str	r3, [r7, #88]	@ 0x58
		                             if (set_freq > 0 && set_freq < 150000000) {
 8009ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d038      	beq.n	8009f68 <CDC_Receive_FS+0xe8>
 8009ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ef8:	4a75      	ldr	r2, [pc, #468]	@ (800a0d0 <CDC_Receive_FS+0x250>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d834      	bhi.n	8009f68 <CDC_Receive_FS+0xe8>
		                            	 //si5351_enableOutputs(0xFF);
		                            	 extern int freq[3];
		                            	 extern void print_interface_mode0(void);

		                            	 extern void int_to_str(int num, char *str);
		                            	 freq[ch] = set_freq / 1000;
 8009efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f00:	4a74      	ldr	r2, [pc, #464]	@ (800a0d4 <CDC_Receive_FS+0x254>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	099a      	lsrs	r2, r3, #6
 8009f08:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4a72      	ldr	r2, [pc, #456]	@ (800a0d8 <CDC_Receive_FS+0x258>)
 8009f10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 8009f14:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009f18:	4a6f      	ldr	r2, [pc, #444]	@ (800a0d8 <CDC_Receive_FS+0x258>)
 8009f1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009f1e:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8009f22:	4613      	mov	r3, r2
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	4a6c      	ldr	r2, [pc, #432]	@ (800a0dc <CDC_Receive_FS+0x25c>)
 8009f2a:	4413      	add	r3, r2
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	f7f6 fdab 	bl	8000a88 <int_to_str>
		                            	 print_interface_mode0();
 8009f32:	f7f6 fe19 	bl	8000b68 <print_interface_mode0>
		                            	 char msg[64];
		                            	 // Формируем и отправляем сообщение с установленной частотой
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 8009f36:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009f3a:	f107 000c 	add.w	r0, r7, #12
 8009f3e:	4a66      	ldr	r2, [pc, #408]	@ (800a0d8 <CDC_Receive_FS+0x258>)
 8009f40:	9200      	str	r2, [sp, #0]
 8009f42:	4a67      	ldr	r2, [pc, #412]	@ (800a0e0 <CDC_Receive_FS+0x260>)
 8009f44:	2140      	movs	r1, #64	@ 0x40
 8009f46:	f000 fd47 	bl	800a9d8 <sniprintf>
		                            	 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8009f4a:	f107 030c 	add.w	r3, r7, #12
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f6 f8fe 	bl	8000150 <strlen>
 8009f54:	4603      	mov	r3, r0
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f107 030c 	add.w	r3, r7, #12
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f8d4 	bl	800a10c <CDC_Transmit_FS>
		                             if (set_freq > 0 && set_freq < 150000000) {
 8009f64:	bf00      	nop
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8009f66:	e088      	b.n	800a07a <CDC_Receive_FS+0x1fa>
		                             } else if (freq == 0) {
 8009f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11e      	bne.n	8009fac <CDC_Receive_FS+0x12c>
		                            	 // Если частота = 0 - отключение выходного канала
		                                 uint8_t disable_mask = ~(1 << ch);
 8009f6e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009f72:	2201      	movs	r2, #1
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		                                 //si5351_enableOutputs(disable_mask);
		                                 char msg[32];
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 8009f80:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8009f84:	f107 000c 	add.w	r0, r7, #12
 8009f88:	4a56      	ldr	r2, [pc, #344]	@ (800a0e4 <CDC_Receive_FS+0x264>)
 8009f8a:	2120      	movs	r1, #32
 8009f8c:	f000 fd24 	bl	800a9d8 <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8009f90:	f107 030c 	add.w	r3, r7, #12
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f6 f8db 	bl	8000150 <strlen>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f8b1 	bl	800a10c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8009faa:	e066      	b.n	800a07a <CDC_Receive_FS+0x1fa>
		                             } else {
		                            	 // Проверка неправильного ввода частоты
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 8009fac:	2114      	movs	r1, #20
 8009fae:	484e      	ldr	r0, [pc, #312]	@ (800a0e8 <CDC_Receive_FS+0x268>)
 8009fb0:	f000 f8ac 	bl	800a10c <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8009fb4:	e061      	b.n	800a07a <CDC_Receive_FS+0x1fa>
		                             }
		                         } else {
		                        	 // Проверка неправильного формата команды
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 8009fb6:	2111      	movs	r1, #17
 8009fb8:	484c      	ldr	r0, [pc, #304]	@ (800a0ec <CDC_Receive_FS+0x26c>)
 8009fba:	f000 f8a7 	bl	800a10c <CDC_Transmit_FS>
 8009fbe:	e05c      	b.n	800a07a <CDC_Receive_FS+0x1fa>
		                         }
		                     }
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	494b      	ldr	r1, [pc, #300]	@ (800a0f0 <CDC_Receive_FS+0x270>)
 8009fc4:	4840      	ldr	r0, [pc, #256]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 8009fc6:	f000 fd45 	bl	800aa54 <strncmp>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d116      	bne.n	8009ffe <CDC_Receive_FS+0x17e>
		                // Команда проверки связи
		                char msg[] = "Normally\r\n";
 8009fd0:	4a48      	ldr	r2, [pc, #288]	@ (800a0f4 <CDC_Receive_FS+0x274>)
 8009fd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8009fd8:	c303      	stmia	r3!, {r0, r1}
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	3302      	adds	r3, #2
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	701a      	strb	r2, [r3, #0]
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8009fe2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7f6 f8b2 	bl	8000150 <strlen>
 8009fec:	4603      	mov	r3, r0
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f888 	bl	800a10c <CDC_Transmit_FS>
 8009ffc:	e03d      	b.n	800a07a <CDC_Receive_FS+0x1fa>
		            }
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 8009ffe:	2206      	movs	r2, #6
 800a000:	493d      	ldr	r1, [pc, #244]	@ (800a0f8 <CDC_Receive_FS+0x278>)
 800a002:	4831      	ldr	r0, [pc, #196]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 800a004:	f000 fd26 	bl	800aa54 <strncmp>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d135      	bne.n	800a07a <CDC_Receive_FS+0x1fa>
		                extern int freq[3];  // частоты каналов, кГц
		                char msg[64];
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a014:	e02d      	b.n	800a072 <CDC_Receive_FS+0x1f2>
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 800a016:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a01a:	4a2f      	ldr	r2, [pc, #188]	@ (800a0d8 <CDC_Receive_FS+0x258>)
 800a01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a020:	2b00      	cmp	r3, #0
 800a022:	dd01      	ble.n	800a028 <CDC_Receive_FS+0x1a8>
 800a024:	4b35      	ldr	r3, [pc, #212]	@ (800a0fc <CDC_Receive_FS+0x27c>)
 800a026:	e000      	b.n	800a02a <CDC_Receive_FS+0x1aa>
 800a028:	4b35      	ldr	r3, [pc, #212]	@ (800a100 <CDC_Receive_FS+0x280>)
 800a02a:	667b      	str	r3, [r7, #100]	@ 0x64
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 800a02c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800a030:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a034:	4928      	ldr	r1, [pc, #160]	@ (800a0d8 <CDC_Receive_FS+0x258>)
 800a036:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a03a:	f107 000c 	add.w	r0, r7, #12
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	4613      	mov	r3, r2
 800a046:	4a2f      	ldr	r2, [pc, #188]	@ (800a104 <CDC_Receive_FS+0x284>)
 800a048:	2140      	movs	r1, #64	@ 0x40
 800a04a:	f000 fcc5 	bl	800a9d8 <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	4618      	mov	r0, r3
 800a054:	f7f6 f87c 	bl	8000150 <strlen>
 800a058:	4603      	mov	r3, r0
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	f107 030c 	add.w	r3, r7, #12
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f852 	bl	800a10c <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 800a068:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a06c:	3301      	adds	r3, #1
 800a06e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800a072:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a076:	2b02      	cmp	r3, #2
 800a078:	d9cd      	bls.n	800a016 <CDC_Receive_FS+0x196>
		                }
		            }
		            rx_index = 0; // Очищаем буфер
 800a07a:	4b12      	ldr	r3, [pc, #72]	@ (800a0c4 <CDC_Receive_FS+0x244>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e00a      	b.n	800a098 <CDC_Receive_FS+0x218>

		        } else {
		            rx_buffer[rx_index++] = byte;
 800a082:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <CDC_Receive_FS+0x244>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	b2d1      	uxtb	r1, r2
 800a08a:	4a0e      	ldr	r2, [pc, #56]	@ (800a0c4 <CDC_Receive_FS+0x244>)
 800a08c:	7011      	strb	r1, [r2, #0]
 800a08e:	4619      	mov	r1, r3
 800a090:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c8 <CDC_Receive_FS+0x248>)
 800a092:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a096:	5453      	strb	r3, [r2, r1]
		    for (uint32_t i = 0; i < *Len; i++) {
 800a098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a09a:	3301      	adds	r3, #1
 800a09c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	f4ff aef3 	bcc.w	8009e90 <CDC_Receive_FS+0x10>
		        }
		    }

		    // Запускаем приём следующего пакета
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4816      	ldr	r0, [pc, #88]	@ (800a108 <CDC_Receive_FS+0x288>)
 800a0ae:	f7fe fd3a 	bl	8008b26 <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0b2:	4815      	ldr	r0, [pc, #84]	@ (800a108 <CDC_Receive_FS+0x288>)
 800a0b4:	f7fe fd79 	bl	8008baa <USBD_CDC_ReceivePacket>
		    return (USBD_OK);
 800a0b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3770      	adds	r7, #112	@ 0x70
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20001024 	.word	0x20001024
 800a0c8:	20001028 	.word	0x20001028
 800a0cc:	2000102b 	.word	0x2000102b
 800a0d0:	08f0d17f 	.word	0x08f0d17f
 800a0d4:	10624dd3 	.word	0x10624dd3
 800a0d8:	20000320 	.word	0x20000320
 800a0dc:	20000334 	.word	0x20000334
 800a0e0:	0800c1cc 	.word	0x0800c1cc
 800a0e4:	0800c1e4 	.word	0x0800c1e4
 800a0e8:	0800c1f4 	.word	0x0800c1f4
 800a0ec:	0800c208 	.word	0x0800c208
 800a0f0:	0800c21c 	.word	0x0800c21c
 800a0f4:	0800c24c 	.word	0x0800c24c
 800a0f8:	0800c228 	.word	0x0800c228
 800a0fc:	0800c230 	.word	0x0800c230
 800a100:	0800c234 	.word	0x0800c234
 800a104:	0800c238 	.word	0x0800c238
 800a108:	20000560 	.word	0x20000560

0800a10c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <CDC_Transmit_FS+0x48>)
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a12e:	2301      	movs	r3, #1
 800a130:	e00b      	b.n	800a14a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a132:	887b      	ldrh	r3, [r7, #2]
 800a134:	461a      	mov	r2, r3
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4806      	ldr	r0, [pc, #24]	@ (800a154 <CDC_Transmit_FS+0x48>)
 800a13a:	f7fe fcdb 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a13e:	4805      	ldr	r0, [pc, #20]	@ (800a154 <CDC_Transmit_FS+0x48>)
 800a140:	f7fe fd04 	bl	8008b4c <USBD_CDC_TransmitPacket>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20000560 	.word	0x20000560

0800a158 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2212      	movs	r2, #18
 800a168:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a16a:	4b03      	ldr	r3, [pc, #12]	@ (800a178 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20000148 	.word	0x20000148

0800a17c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	6039      	str	r1, [r7, #0]
 800a186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2204      	movs	r2, #4
 800a18c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a18e:	4b03      	ldr	r3, [pc, #12]	@ (800a19c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	bc80      	pop	{r7}
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	2000015c 	.word	0x2000015c

0800a1a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	6039      	str	r1, [r7, #0]
 800a1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d105      	bne.n	800a1be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1b6:	4808      	ldr	r0, [pc, #32]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1b8:	f7ff fcdb 	bl	8009b72 <USBD_GetString>
 800a1bc:	e004      	b.n	800a1c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4904      	ldr	r1, [pc, #16]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1c2:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c4:	f7ff fcd5 	bl	8009b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	@ (800a1d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20001068 	.word	0x20001068
 800a1d8:	0800c258 	.word	0x0800c258

0800a1dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	6039      	str	r1, [r7, #0]
 800a1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	4904      	ldr	r1, [pc, #16]	@ (800a1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1ec:	4804      	ldr	r0, [pc, #16]	@ (800a200 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1ee:	f7ff fcc0 	bl	8009b72 <USBD_GetString>
  return USBD_StrDesc;
 800a1f2:	4b02      	ldr	r3, [pc, #8]	@ (800a1fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20001068 	.word	0x20001068
 800a200:	0800c26c 	.word	0x0800c26c

0800a204 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	6039      	str	r1, [r7, #0]
 800a20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	221a      	movs	r2, #26
 800a214:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a216:	f000 f843 	bl	800a2a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a21a:	4b02      	ldr	r3, [pc, #8]	@ (800a224 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000160 	.word	0x20000160

0800a228 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	6039      	str	r1, [r7, #0]
 800a232:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d105      	bne.n	800a246 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	4907      	ldr	r1, [pc, #28]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a23e:	4808      	ldr	r0, [pc, #32]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a240:	f7ff fc97 	bl	8009b72 <USBD_GetString>
 800a244:	e004      	b.n	800a250 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	4904      	ldr	r1, [pc, #16]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a24a:	4805      	ldr	r0, [pc, #20]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a24c:	f7ff fc91 	bl	8009b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a250:	4b02      	ldr	r3, [pc, #8]	@ (800a25c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20001068 	.word	0x20001068
 800a260:	0800c280 	.word	0x0800c280

0800a264 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	4907      	ldr	r1, [pc, #28]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a27a:	4808      	ldr	r0, [pc, #32]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a27c:	f7ff fc79 	bl	8009b72 <USBD_GetString>
 800a280:	e004      	b.n	800a28c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	4904      	ldr	r1, [pc, #16]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a286:	4805      	ldr	r0, [pc, #20]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a288:	f7ff fc73 	bl	8009b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a28c:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20001068 	.word	0x20001068
 800a29c:	0800c28c 	.word	0x0800c28c

0800a2a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <Get_SerialNum+0x44>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a2e8 <Get_SerialNum+0x48>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ec <Get_SerialNum+0x4c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4413      	add	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	4909      	ldr	r1, [pc, #36]	@ (800a2f0 <Get_SerialNum+0x50>)
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 f814 	bl	800a2f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	4908      	ldr	r1, [pc, #32]	@ (800a2f4 <Get_SerialNum+0x54>)
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f000 f80f 	bl	800a2f8 <IntToUnicode>
  }
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	1ffff7e8 	.word	0x1ffff7e8
 800a2e8:	1ffff7ec 	.word	0x1ffff7ec
 800a2ec:	1ffff7f0 	.word	0x1ffff7f0
 800a2f0:	20000162 	.word	0x20000162
 800a2f4:	20000172 	.word	0x20000172

0800a2f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]
 800a30e:	e027      	b.n	800a360 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	0f1b      	lsrs	r3, r3, #28
 800a314:	2b09      	cmp	r3, #9
 800a316:	d80b      	bhi.n	800a330 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0f1b      	lsrs	r3, r3, #28
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	4619      	mov	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	440b      	add	r3, r1
 800a328:	3230      	adds	r2, #48	@ 0x30
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	e00a      	b.n	800a346 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	b2da      	uxtb	r2, r3
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4619      	mov	r1, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	440b      	add	r3, r1
 800a340:	3237      	adds	r2, #55	@ 0x37
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	3301      	adds	r3, #1
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	4413      	add	r3, r2
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	3301      	adds	r3, #1
 800a35e:	75fb      	strb	r3, [r7, #23]
 800a360:	7dfa      	ldrb	r2, [r7, #23]
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	429a      	cmp	r2, r3
 800a366:	d3d3      	bcc.n	800a310 <IntToUnicode+0x18>
  }
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr

0800a374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0d      	ldr	r2, [pc, #52]	@ (800a3b8 <HAL_PCD_MspInit+0x44>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d113      	bne.n	800a3ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a386:	4b0d      	ldr	r3, [pc, #52]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	4a0c      	ldr	r2, [pc, #48]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a38c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a390:	61d3      	str	r3, [r2, #28]
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <HAL_PCD_MspInit+0x48>)
 800a394:	69db      	ldr	r3, [r3, #28]
 800a396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	2014      	movs	r0, #20
 800a3a4:	f7f7 fee5 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3a8:	2014      	movs	r0, #20
 800a3aa:	f7f7 fefe 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3ae:	bf00      	nop
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	40005c00 	.word	0x40005c00
 800a3bc:	40021000 	.word	0x40021000

0800a3c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f7fe fc9d 	bl	8008d16 <USBD_LL_SetupStage>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	440b      	add	r3, r1
 800a404:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7fe fccf 	bl	8008db0 <USBD_LL_DataOutStage>
}
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	3324      	adds	r3, #36	@ 0x24
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	4619      	mov	r1, r3
 800a442:	f7fe fd26 	bl	8008e92 <USBD_LL_DataInStage>
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fe36 	bl	80090ce <USBD_LL_SOF>
}
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a472:	2301      	movs	r3, #1
 800a474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	799b      	ldrb	r3, [r3, #6]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d001      	beq.n	800a482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a47e:	f7f7 f8f5 	bl	800166c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a488:	7bfa      	ldrb	r2, [r7, #15]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fde6 	bl	800905e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fd9f 	bl	8008fdc <USBD_LL_Reset>
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fde0 	bl	800907c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7a9b      	ldrb	r3, [r3, #10]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d005      	beq.n	800a4d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4c4:	4b04      	ldr	r3, [pc, #16]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x30>)
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	4a03      	ldr	r2, [pc, #12]	@ (800a4d8 <HAL_PCD_SuspendCallback+0x30>)
 800a4ca:	f043 0306 	orr.w	r3, r3, #6
 800a4ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	e000ed00 	.word	0xe000ed00

0800a4dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fdda 	bl	80090a4 <USBD_LL_Resume>
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a500:	4a28      	ldr	r2, [pc, #160]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a26      	ldr	r2, [pc, #152]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a50c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a510:	4b24      	ldr	r3, [pc, #144]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a512:	4a25      	ldr	r2, [pc, #148]	@ (800a5a8 <USBD_LL_Init+0xb0>)
 800a514:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a516:	4b23      	ldr	r3, [pc, #140]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a518:	2208      	movs	r2, #8
 800a51a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a51c:	4b21      	ldr	r3, [pc, #132]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a51e:	2202      	movs	r2, #2
 800a520:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a522:	4b20      	ldr	r3, [pc, #128]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a524:	2200      	movs	r2, #0
 800a526:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a528:	4b1e      	ldr	r3, [pc, #120]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a52e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a530:	2200      	movs	r2, #0
 800a532:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a534:	481b      	ldr	r0, [pc, #108]	@ (800a5a4 <USBD_LL_Init+0xac>)
 800a536:	f7f8 fcb3 	bl	8002ea0 <HAL_PCD_Init>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a540:	f7f7 f894 	bl	800166c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a54a:	2318      	movs	r3, #24
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	f7fa f9c4 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a55a:	2358      	movs	r3, #88	@ 0x58
 800a55c:	2200      	movs	r2, #0
 800a55e:	2180      	movs	r1, #128	@ 0x80
 800a560:	f7fa f9bc 	bl	80048dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a56a:	23c0      	movs	r3, #192	@ 0xc0
 800a56c:	2200      	movs	r2, #0
 800a56e:	2181      	movs	r1, #129	@ 0x81
 800a570:	f7fa f9b4 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a57a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a57e:	2200      	movs	r2, #0
 800a580:	2101      	movs	r1, #1
 800a582:	f7fa f9ab 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a58c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a590:	2200      	movs	r2, #0
 800a592:	2182      	movs	r1, #130	@ 0x82
 800a594:	f7fa f9a2 	bl	80048dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001268 	.word	0x20001268
 800a5a8:	40005c00 	.word	0x40005c00

0800a5ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f8 fd62 	bl	800308c <HAL_PCD_Start>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 f94e 	bl	800a870 <USBD_Get_USB_Status>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	4608      	mov	r0, r1
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	70fb      	strb	r3, [r7, #3]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70bb      	strb	r3, [r7, #2]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a60a:	78bb      	ldrb	r3, [r7, #2]
 800a60c:	883a      	ldrh	r2, [r7, #0]
 800a60e:	78f9      	ldrb	r1, [r7, #3]
 800a610:	f7f8 feb6 	bl	8003380 <HAL_PCD_EP_Open>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f928 	bl	800a870 <USBD_Get_USB_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a624:	7bbb      	ldrb	r3, [r7, #14]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f8 fef4 	bl	800343a <HAL_PCD_EP_Close>
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f909 	bl	800a870 <USBD_Get_USB_Status>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a662:	7bbb      	ldrb	r3, [r7, #14]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a686:	78fa      	ldrb	r2, [r7, #3]
 800a688:	4611      	mov	r1, r2
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f8 ff9c 	bl	80035c8 <HAL_PCD_EP_SetStall>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f8ea 	bl	800a870 <USBD_Get_USB_Status>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7f8 ffdd 	bl	8003688 <HAL_PCD_EP_ClrStall>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 f8cb 	bl	800a870 <USBD_Get_USB_Status>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a700:	2b00      	cmp	r3, #0
 800a702:	da0b      	bge.n	800a71c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a70a:	68f9      	ldr	r1, [r7, #12]
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	440b      	add	r3, r1
 800a716:	3312      	adds	r3, #18
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	e00b      	b.n	800a734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a722:	68f9      	ldr	r1, [r7, #12]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	440b      	add	r3, r1
 800a72e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a732:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr

0800a73e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7f8 fdeb 	bl	8003338 <HAL_PCD_SetAddress>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a766:	7bfb      	ldrb	r3, [r7, #15]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f881 	bl	800a870 <USBD_Get_USB_Status>
 800a76e:	4603      	mov	r3, r0
 800a770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a772:	7bbb      	ldrb	r3, [r7, #14]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	607a      	str	r2, [r7, #4]
 800a786:	461a      	mov	r2, r3
 800a788:	460b      	mov	r3, r1
 800a78a:	72fb      	strb	r3, [r7, #11]
 800a78c:	4613      	mov	r3, r2
 800a78e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a79e:	893b      	ldrh	r3, [r7, #8]
 800a7a0:	7af9      	ldrb	r1, [r7, #11]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	f7f8 fed9 	bl	800355a <HAL_PCD_EP_Transmit>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f85e 	bl	800a870 <USBD_Get_USB_Status>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b086      	sub	sp, #24
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	72fb      	strb	r3, [r7, #11]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7e4:	893b      	ldrh	r3, [r7, #8]
 800a7e6:	7af9      	ldrb	r1, [r7, #11]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	f7f8 fe6e 	bl	80034ca <HAL_PCD_EP_Receive>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f83b 	bl	800a870 <USBD_Get_USB_Status>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f8 fe84 	bl	800352c <HAL_PCD_EP_GetRxCount>
 800a824:	4603      	mov	r3, r0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a838:	4b02      	ldr	r3, [pc, #8]	@ (800a844 <USBD_static_malloc+0x14>)
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	bc80      	pop	{r7}
 800a842:	4770      	bx	lr
 800a844:	20001540 	.word	0x20001540

0800a848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr

0800a85a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr

0800a870 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d817      	bhi.n	800a8b4 <USBD_Get_USB_Status+0x44>
 800a884:	a201      	add	r2, pc, #4	@ (adr r2, 800a88c <USBD_Get_USB_Status+0x1c>)
 800a886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88a:	bf00      	nop
 800a88c:	0800a89d 	.word	0x0800a89d
 800a890:	0800a8a3 	.word	0x0800a8a3
 800a894:	0800a8a9 	.word	0x0800a8a9
 800a898:	0800a8af 	.word	0x0800a8af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e00b      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	e008      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	e005      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b2:	e002      	b.n	800a8ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	bf00      	nop
  }
  return usb_status;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop

0800a8c8 <atoi>:
 800a8c8:	220a      	movs	r2, #10
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	f000 b87a 	b.w	800a9c4 <strtol>

0800a8d0 <_strtol_l.isra.0>:
 800a8d0:	2b24      	cmp	r3, #36	@ 0x24
 800a8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d6:	4686      	mov	lr, r0
 800a8d8:	4690      	mov	r8, r2
 800a8da:	d801      	bhi.n	800a8e0 <_strtol_l.isra.0+0x10>
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d106      	bne.n	800a8ee <_strtol_l.isra.0+0x1e>
 800a8e0:	f000 f8ca 	bl	800aa78 <__errno>
 800a8e4:	2316      	movs	r3, #22
 800a8e6:	6003      	str	r3, [r0, #0]
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	4833      	ldr	r0, [pc, #204]	@ (800a9c0 <_strtol_l.isra.0+0xf0>)
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f8:	5d06      	ldrb	r6, [r0, r4]
 800a8fa:	f016 0608 	ands.w	r6, r6, #8
 800a8fe:	d1f8      	bne.n	800a8f2 <_strtol_l.isra.0+0x22>
 800a900:	2c2d      	cmp	r4, #45	@ 0x2d
 800a902:	d110      	bne.n	800a926 <_strtol_l.isra.0+0x56>
 800a904:	2601      	movs	r6, #1
 800a906:	782c      	ldrb	r4, [r5, #0]
 800a908:	1c95      	adds	r5, r2, #2
 800a90a:	f033 0210 	bics.w	r2, r3, #16
 800a90e:	d115      	bne.n	800a93c <_strtol_l.isra.0+0x6c>
 800a910:	2c30      	cmp	r4, #48	@ 0x30
 800a912:	d10d      	bne.n	800a930 <_strtol_l.isra.0+0x60>
 800a914:	782a      	ldrb	r2, [r5, #0]
 800a916:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a91a:	2a58      	cmp	r2, #88	@ 0x58
 800a91c:	d108      	bne.n	800a930 <_strtol_l.isra.0+0x60>
 800a91e:	786c      	ldrb	r4, [r5, #1]
 800a920:	3502      	adds	r5, #2
 800a922:	2310      	movs	r3, #16
 800a924:	e00a      	b.n	800a93c <_strtol_l.isra.0+0x6c>
 800a926:	2c2b      	cmp	r4, #43	@ 0x2b
 800a928:	bf04      	itt	eq
 800a92a:	782c      	ldrbeq	r4, [r5, #0]
 800a92c:	1c95      	addeq	r5, r2, #2
 800a92e:	e7ec      	b.n	800a90a <_strtol_l.isra.0+0x3a>
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1f6      	bne.n	800a922 <_strtol_l.isra.0+0x52>
 800a934:	2c30      	cmp	r4, #48	@ 0x30
 800a936:	bf14      	ite	ne
 800a938:	230a      	movne	r3, #10
 800a93a:	2308      	moveq	r3, #8
 800a93c:	2200      	movs	r2, #0
 800a93e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a942:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a946:	fbbc f9f3 	udiv	r9, ip, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a950:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a954:	2f09      	cmp	r7, #9
 800a956:	d80f      	bhi.n	800a978 <_strtol_l.isra.0+0xa8>
 800a958:	463c      	mov	r4, r7
 800a95a:	42a3      	cmp	r3, r4
 800a95c:	dd1b      	ble.n	800a996 <_strtol_l.isra.0+0xc6>
 800a95e:	1c57      	adds	r7, r2, #1
 800a960:	d007      	beq.n	800a972 <_strtol_l.isra.0+0xa2>
 800a962:	4581      	cmp	r9, r0
 800a964:	d314      	bcc.n	800a990 <_strtol_l.isra.0+0xc0>
 800a966:	d101      	bne.n	800a96c <_strtol_l.isra.0+0x9c>
 800a968:	45a2      	cmp	sl, r4
 800a96a:	db11      	blt.n	800a990 <_strtol_l.isra.0+0xc0>
 800a96c:	2201      	movs	r2, #1
 800a96e:	fb00 4003 	mla	r0, r0, r3, r4
 800a972:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a976:	e7eb      	b.n	800a950 <_strtol_l.isra.0+0x80>
 800a978:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a97c:	2f19      	cmp	r7, #25
 800a97e:	d801      	bhi.n	800a984 <_strtol_l.isra.0+0xb4>
 800a980:	3c37      	subs	r4, #55	@ 0x37
 800a982:	e7ea      	b.n	800a95a <_strtol_l.isra.0+0x8a>
 800a984:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a988:	2f19      	cmp	r7, #25
 800a98a:	d804      	bhi.n	800a996 <_strtol_l.isra.0+0xc6>
 800a98c:	3c57      	subs	r4, #87	@ 0x57
 800a98e:	e7e4      	b.n	800a95a <_strtol_l.isra.0+0x8a>
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	e7ed      	b.n	800a972 <_strtol_l.isra.0+0xa2>
 800a996:	1c53      	adds	r3, r2, #1
 800a998:	d108      	bne.n	800a9ac <_strtol_l.isra.0+0xdc>
 800a99a:	2322      	movs	r3, #34	@ 0x22
 800a99c:	4660      	mov	r0, ip
 800a99e:	f8ce 3000 	str.w	r3, [lr]
 800a9a2:	f1b8 0f00 	cmp.w	r8, #0
 800a9a6:	d0a0      	beq.n	800a8ea <_strtol_l.isra.0+0x1a>
 800a9a8:	1e69      	subs	r1, r5, #1
 800a9aa:	e006      	b.n	800a9ba <_strtol_l.isra.0+0xea>
 800a9ac:	b106      	cbz	r6, 800a9b0 <_strtol_l.isra.0+0xe0>
 800a9ae:	4240      	negs	r0, r0
 800a9b0:	f1b8 0f00 	cmp.w	r8, #0
 800a9b4:	d099      	beq.n	800a8ea <_strtol_l.isra.0+0x1a>
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	d1f6      	bne.n	800a9a8 <_strtol_l.isra.0+0xd8>
 800a9ba:	f8c8 1000 	str.w	r1, [r8]
 800a9be:	e794      	b.n	800a8ea <_strtol_l.isra.0+0x1a>
 800a9c0:	0800d7a7 	.word	0x0800d7a7

0800a9c4 <strtol>:
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	460a      	mov	r2, r1
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	4802      	ldr	r0, [pc, #8]	@ (800a9d4 <strtol+0x10>)
 800a9cc:	6800      	ldr	r0, [r0, #0]
 800a9ce:	f7ff bf7f 	b.w	800a8d0 <_strtol_l.isra.0>
 800a9d2:	bf00      	nop
 800a9d4:	2000017c 	.word	0x2000017c

0800a9d8 <sniprintf>:
 800a9d8:	b40c      	push	{r2, r3}
 800a9da:	b530      	push	{r4, r5, lr}
 800a9dc:	4b18      	ldr	r3, [pc, #96]	@ (800aa40 <sniprintf+0x68>)
 800a9de:	1e0c      	subs	r4, r1, #0
 800a9e0:	681d      	ldr	r5, [r3, #0]
 800a9e2:	b09d      	sub	sp, #116	@ 0x74
 800a9e4:	da08      	bge.n	800a9f8 <sniprintf+0x20>
 800a9e6:	238b      	movs	r3, #139	@ 0x8b
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	b01d      	add	sp, #116	@ 0x74
 800a9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f4:	b002      	add	sp, #8
 800a9f6:	4770      	bx	lr
 800a9f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a9fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	931b      	str	r3, [sp, #108]	@ 0x6c
 800aa06:	bf0c      	ite	eq
 800aa08:	4623      	moveq	r3, r4
 800aa0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa16:	9002      	str	r0, [sp, #8]
 800aa18:	9006      	str	r0, [sp, #24]
 800aa1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa1e:	4628      	mov	r0, r5
 800aa20:	ab21      	add	r3, sp, #132	@ 0x84
 800aa22:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa24:	a902      	add	r1, sp, #8
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	f000 f9b2 	bl	800ad90 <_svfiprintf_r>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	bfbc      	itt	lt
 800aa30:	238b      	movlt	r3, #139	@ 0x8b
 800aa32:	602b      	strlt	r3, [r5, #0]
 800aa34:	2c00      	cmp	r4, #0
 800aa36:	d0da      	beq.n	800a9ee <sniprintf+0x16>
 800aa38:	2200      	movs	r2, #0
 800aa3a:	9b02      	ldr	r3, [sp, #8]
 800aa3c:	701a      	strb	r2, [r3, #0]
 800aa3e:	e7d6      	b.n	800a9ee <sniprintf+0x16>
 800aa40:	2000017c 	.word	0x2000017c

0800aa44 <memset>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	4402      	add	r2, r0
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d100      	bne.n	800aa4e <memset+0xa>
 800aa4c:	4770      	bx	lr
 800aa4e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa52:	e7f9      	b.n	800aa48 <memset+0x4>

0800aa54 <strncmp>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	b16a      	cbz	r2, 800aa74 <strncmp+0x20>
 800aa58:	3901      	subs	r1, #1
 800aa5a:	1884      	adds	r4, r0, r2
 800aa5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d103      	bne.n	800aa70 <strncmp+0x1c>
 800aa68:	42a0      	cmp	r0, r4
 800aa6a:	d001      	beq.n	800aa70 <strncmp+0x1c>
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1f5      	bne.n	800aa5c <strncmp+0x8>
 800aa70:	1ad0      	subs	r0, r2, r3
 800aa72:	bd10      	pop	{r4, pc}
 800aa74:	4610      	mov	r0, r2
 800aa76:	e7fc      	b.n	800aa72 <strncmp+0x1e>

0800aa78 <__errno>:
 800aa78:	4b01      	ldr	r3, [pc, #4]	@ (800aa80 <__errno+0x8>)
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	2000017c 	.word	0x2000017c

0800aa84 <__libc_init_array>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	2600      	movs	r6, #0
 800aa88:	4d0c      	ldr	r5, [pc, #48]	@ (800aabc <__libc_init_array+0x38>)
 800aa8a:	4c0d      	ldr	r4, [pc, #52]	@ (800aac0 <__libc_init_array+0x3c>)
 800aa8c:	1b64      	subs	r4, r4, r5
 800aa8e:	10a4      	asrs	r4, r4, #2
 800aa90:	42a6      	cmp	r6, r4
 800aa92:	d109      	bne.n	800aaa8 <__libc_init_array+0x24>
 800aa94:	f001 fb80 	bl	800c198 <_init>
 800aa98:	2600      	movs	r6, #0
 800aa9a:	4d0a      	ldr	r5, [pc, #40]	@ (800aac4 <__libc_init_array+0x40>)
 800aa9c:	4c0a      	ldr	r4, [pc, #40]	@ (800aac8 <__libc_init_array+0x44>)
 800aa9e:	1b64      	subs	r4, r4, r5
 800aaa0:	10a4      	asrs	r4, r4, #2
 800aaa2:	42a6      	cmp	r6, r4
 800aaa4:	d105      	bne.n	800aab2 <__libc_init_array+0x2e>
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaac:	4798      	blx	r3
 800aaae:	3601      	adds	r6, #1
 800aab0:	e7ee      	b.n	800aa90 <__libc_init_array+0xc>
 800aab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab6:	4798      	blx	r3
 800aab8:	3601      	adds	r6, #1
 800aaba:	e7f2      	b.n	800aaa2 <__libc_init_array+0x1e>
 800aabc:	0800d928 	.word	0x0800d928
 800aac0:	0800d928 	.word	0x0800d928
 800aac4:	0800d928 	.word	0x0800d928
 800aac8:	0800d92c 	.word	0x0800d92c

0800aacc <__retarget_lock_acquire_recursive>:
 800aacc:	4770      	bx	lr

0800aace <__retarget_lock_release_recursive>:
 800aace:	4770      	bx	lr

0800aad0 <memcpy>:
 800aad0:	440a      	add	r2, r1
 800aad2:	4291      	cmp	r1, r2
 800aad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	4770      	bx	lr
 800aadc:	b510      	push	{r4, lr}
 800aade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae2:	4291      	cmp	r1, r2
 800aae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae8:	d1f9      	bne.n	800aade <memcpy+0xe>
 800aaea:	bd10      	pop	{r4, pc}

0800aaec <_free_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4605      	mov	r5, r0
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d040      	beq.n	800ab76 <_free_r+0x8a>
 800aaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf8:	1f0c      	subs	r4, r1, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	18e4      	addlt	r4, r4, r3
 800ab00:	f000 f8de 	bl	800acc0 <__malloc_lock>
 800ab04:	4a1c      	ldr	r2, [pc, #112]	@ (800ab78 <_free_r+0x8c>)
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	b933      	cbnz	r3, 800ab18 <_free_r+0x2c>
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	6014      	str	r4, [r2, #0]
 800ab0e:	4628      	mov	r0, r5
 800ab10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab14:	f000 b8da 	b.w	800accc <__malloc_unlock>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d908      	bls.n	800ab2e <_free_r+0x42>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf01      	itttt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	1809      	addeq	r1, r1, r0
 800ab2a:	6021      	streq	r1, [r4, #0]
 800ab2c:	e7ed      	b.n	800ab0a <_free_r+0x1e>
 800ab2e:	461a      	mov	r2, r3
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b10b      	cbz	r3, 800ab38 <_free_r+0x4c>
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d9fa      	bls.n	800ab2e <_free_r+0x42>
 800ab38:	6811      	ldr	r1, [r2, #0]
 800ab3a:	1850      	adds	r0, r2, r1
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	d10b      	bne.n	800ab58 <_free_r+0x6c>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	4401      	add	r1, r0
 800ab44:	1850      	adds	r0, r2, r1
 800ab46:	4283      	cmp	r3, r0
 800ab48:	6011      	str	r1, [r2, #0]
 800ab4a:	d1e0      	bne.n	800ab0e <_free_r+0x22>
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4408      	add	r0, r1
 800ab52:	6010      	str	r0, [r2, #0]
 800ab54:	6053      	str	r3, [r2, #4]
 800ab56:	e7da      	b.n	800ab0e <_free_r+0x22>
 800ab58:	d902      	bls.n	800ab60 <_free_r+0x74>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	e7d6      	b.n	800ab0e <_free_r+0x22>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	1821      	adds	r1, r4, r0
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf01      	itttt	eq
 800ab68:	6819      	ldreq	r1, [r3, #0]
 800ab6a:	685b      	ldreq	r3, [r3, #4]
 800ab6c:	1809      	addeq	r1, r1, r0
 800ab6e:	6021      	streq	r1, [r4, #0]
 800ab70:	6063      	str	r3, [r4, #4]
 800ab72:	6054      	str	r4, [r2, #4]
 800ab74:	e7cb      	b.n	800ab0e <_free_r+0x22>
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	200018a4 	.word	0x200018a4

0800ab7c <sbrk_aligned>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	4e0f      	ldr	r6, [pc, #60]	@ (800abbc <sbrk_aligned+0x40>)
 800ab80:	460c      	mov	r4, r1
 800ab82:	6831      	ldr	r1, [r6, #0]
 800ab84:	4605      	mov	r5, r0
 800ab86:	b911      	cbnz	r1, 800ab8e <sbrk_aligned+0x12>
 800ab88:	f000 fba8 	bl	800b2dc <_sbrk_r>
 800ab8c:	6030      	str	r0, [r6, #0]
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 fba3 	bl	800b2dc <_sbrk_r>
 800ab96:	1c43      	adds	r3, r0, #1
 800ab98:	d103      	bne.n	800aba2 <sbrk_aligned+0x26>
 800ab9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab9e:	4620      	mov	r0, r4
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
 800aba2:	1cc4      	adds	r4, r0, #3
 800aba4:	f024 0403 	bic.w	r4, r4, #3
 800aba8:	42a0      	cmp	r0, r4
 800abaa:	d0f8      	beq.n	800ab9e <sbrk_aligned+0x22>
 800abac:	1a21      	subs	r1, r4, r0
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 fb94 	bl	800b2dc <_sbrk_r>
 800abb4:	3001      	adds	r0, #1
 800abb6:	d1f2      	bne.n	800ab9e <sbrk_aligned+0x22>
 800abb8:	e7ef      	b.n	800ab9a <sbrk_aligned+0x1e>
 800abba:	bf00      	nop
 800abbc:	200018a0 	.word	0x200018a0

0800abc0 <_malloc_r>:
 800abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc4:	1ccd      	adds	r5, r1, #3
 800abc6:	f025 0503 	bic.w	r5, r5, #3
 800abca:	3508      	adds	r5, #8
 800abcc:	2d0c      	cmp	r5, #12
 800abce:	bf38      	it	cc
 800abd0:	250c      	movcc	r5, #12
 800abd2:	2d00      	cmp	r5, #0
 800abd4:	4606      	mov	r6, r0
 800abd6:	db01      	blt.n	800abdc <_malloc_r+0x1c>
 800abd8:	42a9      	cmp	r1, r5
 800abda:	d904      	bls.n	800abe6 <_malloc_r+0x26>
 800abdc:	230c      	movs	r3, #12
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	2000      	movs	r0, #0
 800abe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acbc <_malloc_r+0xfc>
 800abea:	f000 f869 	bl	800acc0 <__malloc_lock>
 800abee:	f8d8 3000 	ldr.w	r3, [r8]
 800abf2:	461c      	mov	r4, r3
 800abf4:	bb44      	cbnz	r4, 800ac48 <_malloc_r+0x88>
 800abf6:	4629      	mov	r1, r5
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7ff ffbf 	bl	800ab7c <sbrk_aligned>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	4604      	mov	r4, r0
 800ac02:	d158      	bne.n	800acb6 <_malloc_r+0xf6>
 800ac04:	f8d8 4000 	ldr.w	r4, [r8]
 800ac08:	4627      	mov	r7, r4
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	d143      	bne.n	800ac96 <_malloc_r+0xd6>
 800ac0e:	2c00      	cmp	r4, #0
 800ac10:	d04b      	beq.n	800acaa <_malloc_r+0xea>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	4639      	mov	r1, r7
 800ac16:	4630      	mov	r0, r6
 800ac18:	eb04 0903 	add.w	r9, r4, r3
 800ac1c:	f000 fb5e 	bl	800b2dc <_sbrk_r>
 800ac20:	4581      	cmp	r9, r0
 800ac22:	d142      	bne.n	800acaa <_malloc_r+0xea>
 800ac24:	6821      	ldr	r1, [r4, #0]
 800ac26:	4630      	mov	r0, r6
 800ac28:	1a6d      	subs	r5, r5, r1
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	f7ff ffa6 	bl	800ab7c <sbrk_aligned>
 800ac30:	3001      	adds	r0, #1
 800ac32:	d03a      	beq.n	800acaa <_malloc_r+0xea>
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	442b      	add	r3, r5
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	bb62      	cbnz	r2, 800ac9c <_malloc_r+0xdc>
 800ac42:	f8c8 7000 	str.w	r7, [r8]
 800ac46:	e00f      	b.n	800ac68 <_malloc_r+0xa8>
 800ac48:	6822      	ldr	r2, [r4, #0]
 800ac4a:	1b52      	subs	r2, r2, r5
 800ac4c:	d420      	bmi.n	800ac90 <_malloc_r+0xd0>
 800ac4e:	2a0b      	cmp	r2, #11
 800ac50:	d917      	bls.n	800ac82 <_malloc_r+0xc2>
 800ac52:	1961      	adds	r1, r4, r5
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	6025      	str	r5, [r4, #0]
 800ac58:	bf18      	it	ne
 800ac5a:	6059      	strne	r1, [r3, #4]
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	bf08      	it	eq
 800ac60:	f8c8 1000 	streq.w	r1, [r8]
 800ac64:	5162      	str	r2, [r4, r5]
 800ac66:	604b      	str	r3, [r1, #4]
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 f82f 	bl	800accc <__malloc_unlock>
 800ac6e:	f104 000b 	add.w	r0, r4, #11
 800ac72:	1d23      	adds	r3, r4, #4
 800ac74:	f020 0007 	bic.w	r0, r0, #7
 800ac78:	1ac2      	subs	r2, r0, r3
 800ac7a:	bf1c      	itt	ne
 800ac7c:	1a1b      	subne	r3, r3, r0
 800ac7e:	50a3      	strne	r3, [r4, r2]
 800ac80:	e7af      	b.n	800abe2 <_malloc_r+0x22>
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	bf0c      	ite	eq
 800ac88:	f8c8 2000 	streq.w	r2, [r8]
 800ac8c:	605a      	strne	r2, [r3, #4]
 800ac8e:	e7eb      	b.n	800ac68 <_malloc_r+0xa8>
 800ac90:	4623      	mov	r3, r4
 800ac92:	6864      	ldr	r4, [r4, #4]
 800ac94:	e7ae      	b.n	800abf4 <_malloc_r+0x34>
 800ac96:	463c      	mov	r4, r7
 800ac98:	687f      	ldr	r7, [r7, #4]
 800ac9a:	e7b6      	b.n	800ac0a <_malloc_r+0x4a>
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	d1fb      	bne.n	800ac9c <_malloc_r+0xdc>
 800aca4:	2300      	movs	r3, #0
 800aca6:	6053      	str	r3, [r2, #4]
 800aca8:	e7de      	b.n	800ac68 <_malloc_r+0xa8>
 800acaa:	230c      	movs	r3, #12
 800acac:	4630      	mov	r0, r6
 800acae:	6033      	str	r3, [r6, #0]
 800acb0:	f000 f80c 	bl	800accc <__malloc_unlock>
 800acb4:	e794      	b.n	800abe0 <_malloc_r+0x20>
 800acb6:	6005      	str	r5, [r0, #0]
 800acb8:	e7d6      	b.n	800ac68 <_malloc_r+0xa8>
 800acba:	bf00      	nop
 800acbc:	200018a4 	.word	0x200018a4

0800acc0 <__malloc_lock>:
 800acc0:	4801      	ldr	r0, [pc, #4]	@ (800acc8 <__malloc_lock+0x8>)
 800acc2:	f7ff bf03 	b.w	800aacc <__retarget_lock_acquire_recursive>
 800acc6:	bf00      	nop
 800acc8:	2000189c 	.word	0x2000189c

0800accc <__malloc_unlock>:
 800accc:	4801      	ldr	r0, [pc, #4]	@ (800acd4 <__malloc_unlock+0x8>)
 800acce:	f7ff befe 	b.w	800aace <__retarget_lock_release_recursive>
 800acd2:	bf00      	nop
 800acd4:	2000189c 	.word	0x2000189c

0800acd8 <__ssputs_r>:
 800acd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acdc:	461f      	mov	r7, r3
 800acde:	688e      	ldr	r6, [r1, #8]
 800ace0:	4682      	mov	sl, r0
 800ace2:	42be      	cmp	r6, r7
 800ace4:	460c      	mov	r4, r1
 800ace6:	4690      	mov	r8, r2
 800ace8:	680b      	ldr	r3, [r1, #0]
 800acea:	d82d      	bhi.n	800ad48 <__ssputs_r+0x70>
 800acec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acf4:	d026      	beq.n	800ad44 <__ssputs_r+0x6c>
 800acf6:	6965      	ldr	r5, [r4, #20]
 800acf8:	6909      	ldr	r1, [r1, #16]
 800acfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acfe:	eba3 0901 	sub.w	r9, r3, r1
 800ad02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad06:	1c7b      	adds	r3, r7, #1
 800ad08:	444b      	add	r3, r9
 800ad0a:	106d      	asrs	r5, r5, #1
 800ad0c:	429d      	cmp	r5, r3
 800ad0e:	bf38      	it	cc
 800ad10:	461d      	movcc	r5, r3
 800ad12:	0553      	lsls	r3, r2, #21
 800ad14:	d527      	bpl.n	800ad66 <__ssputs_r+0x8e>
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7ff ff52 	bl	800abc0 <_malloc_r>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	b360      	cbz	r0, 800ad7a <__ssputs_r+0xa2>
 800ad20:	464a      	mov	r2, r9
 800ad22:	6921      	ldr	r1, [r4, #16]
 800ad24:	f7ff fed4 	bl	800aad0 <memcpy>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	6126      	str	r6, [r4, #16]
 800ad36:	444e      	add	r6, r9
 800ad38:	6026      	str	r6, [r4, #0]
 800ad3a:	463e      	mov	r6, r7
 800ad3c:	6165      	str	r5, [r4, #20]
 800ad3e:	eba5 0509 	sub.w	r5, r5, r9
 800ad42:	60a5      	str	r5, [r4, #8]
 800ad44:	42be      	cmp	r6, r7
 800ad46:	d900      	bls.n	800ad4a <__ssputs_r+0x72>
 800ad48:	463e      	mov	r6, r7
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	4641      	mov	r1, r8
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	f000 faaa 	bl	800b2a8 <memmove>
 800ad54:	2000      	movs	r0, #0
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	1b9b      	subs	r3, r3, r6
 800ad5a:	60a3      	str	r3, [r4, #8]
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	4433      	add	r3, r6
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad66:	462a      	mov	r2, r5
 800ad68:	f000 fad6 	bl	800b318 <_realloc_r>
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d1e0      	bne.n	800ad34 <__ssputs_r+0x5c>
 800ad72:	4650      	mov	r0, sl
 800ad74:	6921      	ldr	r1, [r4, #16]
 800ad76:	f7ff feb9 	bl	800aaec <_free_r>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	f8ca 3000 	str.w	r3, [sl]
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f04f 30ff 	mov.w	r0, #4294967295
 800ad86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	e7e9      	b.n	800ad62 <__ssputs_r+0x8a>
	...

0800ad90 <_svfiprintf_r>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	4698      	mov	r8, r3
 800ad96:	898b      	ldrh	r3, [r1, #12]
 800ad98:	4607      	mov	r7, r0
 800ad9a:	061b      	lsls	r3, r3, #24
 800ad9c:	460d      	mov	r5, r1
 800ad9e:	4614      	mov	r4, r2
 800ada0:	b09d      	sub	sp, #116	@ 0x74
 800ada2:	d510      	bpl.n	800adc6 <_svfiprintf_r+0x36>
 800ada4:	690b      	ldr	r3, [r1, #16]
 800ada6:	b973      	cbnz	r3, 800adc6 <_svfiprintf_r+0x36>
 800ada8:	2140      	movs	r1, #64	@ 0x40
 800adaa:	f7ff ff09 	bl	800abc0 <_malloc_r>
 800adae:	6028      	str	r0, [r5, #0]
 800adb0:	6128      	str	r0, [r5, #16]
 800adb2:	b930      	cbnz	r0, 800adc2 <_svfiprintf_r+0x32>
 800adb4:	230c      	movs	r3, #12
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	f04f 30ff 	mov.w	r0, #4294967295
 800adbc:	b01d      	add	sp, #116	@ 0x74
 800adbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc2:	2340      	movs	r3, #64	@ 0x40
 800adc4:	616b      	str	r3, [r5, #20]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800adca:	2320      	movs	r3, #32
 800adcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add0:	2330      	movs	r3, #48	@ 0x30
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800af74 <_svfiprintf_r+0x1e4>
 800adde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ade2:	4623      	mov	r3, r4
 800ade4:	469a      	mov	sl, r3
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	b10a      	cbz	r2, 800adf0 <_svfiprintf_r+0x60>
 800adec:	2a25      	cmp	r2, #37	@ 0x25
 800adee:	d1f9      	bne.n	800ade4 <_svfiprintf_r+0x54>
 800adf0:	ebba 0b04 	subs.w	fp, sl, r4
 800adf4:	d00b      	beq.n	800ae0e <_svfiprintf_r+0x7e>
 800adf6:	465b      	mov	r3, fp
 800adf8:	4622      	mov	r2, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff ff6b 	bl	800acd8 <__ssputs_r>
 800ae02:	3001      	adds	r0, #1
 800ae04:	f000 80a7 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0a:	445a      	add	r2, fp
 800ae0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 809f 	beq.w	800af56 <_svfiprintf_r+0x1c6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae22:	f10a 0a01 	add.w	sl, sl, #1
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae30:	4654      	mov	r4, sl
 800ae32:	2205      	movs	r2, #5
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	484e      	ldr	r0, [pc, #312]	@ (800af74 <_svfiprintf_r+0x1e4>)
 800ae3a:	f000 fa5f 	bl	800b2fc <memchr>
 800ae3e:	9a04      	ldr	r2, [sp, #16]
 800ae40:	b9d8      	cbnz	r0, 800ae7a <_svfiprintf_r+0xea>
 800ae42:	06d0      	lsls	r0, r2, #27
 800ae44:	bf44      	itt	mi
 800ae46:	2320      	movmi	r3, #32
 800ae48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4c:	0711      	lsls	r1, r2, #28
 800ae4e:	bf44      	itt	mi
 800ae50:	232b      	movmi	r3, #43	@ 0x2b
 800ae52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae56:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5c:	d015      	beq.n	800ae8a <_svfiprintf_r+0xfa>
 800ae5e:	4654      	mov	r4, sl
 800ae60:	2000      	movs	r0, #0
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6e:	3b30      	subs	r3, #48	@ 0x30
 800ae70:	2b09      	cmp	r3, #9
 800ae72:	d94b      	bls.n	800af0c <_svfiprintf_r+0x17c>
 800ae74:	b1b0      	cbz	r0, 800aea4 <_svfiprintf_r+0x114>
 800ae76:	9207      	str	r2, [sp, #28]
 800ae78:	e014      	b.n	800aea4 <_svfiprintf_r+0x114>
 800ae7a:	eba0 0308 	sub.w	r3, r0, r8
 800ae7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae82:	4313      	orrs	r3, r2
 800ae84:	46a2      	mov	sl, r4
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	e7d2      	b.n	800ae30 <_svfiprintf_r+0xa0>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	1d19      	adds	r1, r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfbb      	ittet	lt
 800ae96:	425b      	neglt	r3, r3
 800ae98:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9c:	9307      	strge	r3, [sp, #28]
 800ae9e:	9307      	strlt	r3, [sp, #28]
 800aea0:	bfb8      	it	lt
 800aea2:	9204      	strlt	r2, [sp, #16]
 800aea4:	7823      	ldrb	r3, [r4, #0]
 800aea6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aea8:	d10a      	bne.n	800aec0 <_svfiprintf_r+0x130>
 800aeaa:	7863      	ldrb	r3, [r4, #1]
 800aeac:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeae:	d132      	bne.n	800af16 <_svfiprintf_r+0x186>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	3402      	adds	r4, #2
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	9203      	str	r2, [sp, #12]
 800aeba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800af78 <_svfiprintf_r+0x1e8>
 800aec4:	2203      	movs	r2, #3
 800aec6:	4650      	mov	r0, sl
 800aec8:	7821      	ldrb	r1, [r4, #0]
 800aeca:	f000 fa17 	bl	800b2fc <memchr>
 800aece:	b138      	cbz	r0, 800aee0 <_svfiprintf_r+0x150>
 800aed0:	2240      	movs	r2, #64	@ 0x40
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	eba0 000a 	sub.w	r0, r0, sl
 800aed8:	4082      	lsls	r2, r0
 800aeda:	4313      	orrs	r3, r2
 800aedc:	3401      	adds	r4, #1
 800aede:	9304      	str	r3, [sp, #16]
 800aee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee4:	2206      	movs	r2, #6
 800aee6:	4825      	ldr	r0, [pc, #148]	@ (800af7c <_svfiprintf_r+0x1ec>)
 800aee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeec:	f000 fa06 	bl	800b2fc <memchr>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d036      	beq.n	800af62 <_svfiprintf_r+0x1d2>
 800aef4:	4b22      	ldr	r3, [pc, #136]	@ (800af80 <_svfiprintf_r+0x1f0>)
 800aef6:	bb1b      	cbnz	r3, 800af40 <_svfiprintf_r+0x1b0>
 800aef8:	9b03      	ldr	r3, [sp, #12]
 800aefa:	3307      	adds	r3, #7
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	3308      	adds	r3, #8
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af06:	4433      	add	r3, r6
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	e76a      	b.n	800ade2 <_svfiprintf_r+0x52>
 800af0c:	460c      	mov	r4, r1
 800af0e:	2001      	movs	r0, #1
 800af10:	fb0c 3202 	mla	r2, ip, r2, r3
 800af14:	e7a8      	b.n	800ae68 <_svfiprintf_r+0xd8>
 800af16:	2300      	movs	r3, #0
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4619      	mov	r1, r3
 800af1e:	3401      	adds	r4, #1
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	4620      	mov	r0, r4
 800af24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af28:	3a30      	subs	r2, #48	@ 0x30
 800af2a:	2a09      	cmp	r2, #9
 800af2c:	d903      	bls.n	800af36 <_svfiprintf_r+0x1a6>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0c6      	beq.n	800aec0 <_svfiprintf_r+0x130>
 800af32:	9105      	str	r1, [sp, #20]
 800af34:	e7c4      	b.n	800aec0 <_svfiprintf_r+0x130>
 800af36:	4604      	mov	r4, r0
 800af38:	2301      	movs	r3, #1
 800af3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af3e:	e7f0      	b.n	800af22 <_svfiprintf_r+0x192>
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4638      	mov	r0, r7
 800af48:	4b0e      	ldr	r3, [pc, #56]	@ (800af84 <_svfiprintf_r+0x1f4>)
 800af4a:	a904      	add	r1, sp, #16
 800af4c:	f3af 8000 	nop.w
 800af50:	1c42      	adds	r2, r0, #1
 800af52:	4606      	mov	r6, r0
 800af54:	d1d6      	bne.n	800af04 <_svfiprintf_r+0x174>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af2d 	bmi.w	800adb8 <_svfiprintf_r+0x28>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e72c      	b.n	800adbc <_svfiprintf_r+0x2c>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4638      	mov	r0, r7
 800af6a:	4b06      	ldr	r3, [pc, #24]	@ (800af84 <_svfiprintf_r+0x1f4>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	f000 f87d 	bl	800b06c <_printf_i>
 800af72:	e7ed      	b.n	800af50 <_svfiprintf_r+0x1c0>
 800af74:	0800d8a7 	.word	0x0800d8a7
 800af78:	0800d8ad 	.word	0x0800d8ad
 800af7c:	0800d8b1 	.word	0x0800d8b1
 800af80:	00000000 	.word	0x00000000
 800af84:	0800acd9 	.word	0x0800acd9

0800af88 <_printf_common>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	4616      	mov	r6, r2
 800af8e:	4698      	mov	r8, r3
 800af90:	688a      	ldr	r2, [r1, #8]
 800af92:	690b      	ldr	r3, [r1, #16]
 800af94:	4607      	mov	r7, r0
 800af96:	4293      	cmp	r3, r2
 800af98:	bfb8      	it	lt
 800af9a:	4613      	movlt	r3, r2
 800af9c:	6033      	str	r3, [r6, #0]
 800af9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa2:	460c      	mov	r4, r1
 800afa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afa8:	b10a      	cbz	r2, 800afae <_printf_common+0x26>
 800afaa:	3301      	adds	r3, #1
 800afac:	6033      	str	r3, [r6, #0]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	0699      	lsls	r1, r3, #26
 800afb2:	bf42      	ittt	mi
 800afb4:	6833      	ldrmi	r3, [r6, #0]
 800afb6:	3302      	addmi	r3, #2
 800afb8:	6033      	strmi	r3, [r6, #0]
 800afba:	6825      	ldr	r5, [r4, #0]
 800afbc:	f015 0506 	ands.w	r5, r5, #6
 800afc0:	d106      	bne.n	800afd0 <_printf_common+0x48>
 800afc2:	f104 0a19 	add.w	sl, r4, #25
 800afc6:	68e3      	ldr	r3, [r4, #12]
 800afc8:	6832      	ldr	r2, [r6, #0]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	42ab      	cmp	r3, r5
 800afce:	dc2b      	bgt.n	800b028 <_printf_common+0xa0>
 800afd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd4:	6822      	ldr	r2, [r4, #0]
 800afd6:	3b00      	subs	r3, #0
 800afd8:	bf18      	it	ne
 800afda:	2301      	movne	r3, #1
 800afdc:	0692      	lsls	r2, r2, #26
 800afde:	d430      	bmi.n	800b042 <_printf_common+0xba>
 800afe0:	4641      	mov	r1, r8
 800afe2:	4638      	mov	r0, r7
 800afe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe8:	47c8      	blx	r9
 800afea:	3001      	adds	r0, #1
 800afec:	d023      	beq.n	800b036 <_printf_common+0xae>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	6922      	ldr	r2, [r4, #16]
 800aff2:	f003 0306 	and.w	r3, r3, #6
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	bf14      	ite	ne
 800affa:	2500      	movne	r5, #0
 800affc:	6833      	ldreq	r3, [r6, #0]
 800affe:	f04f 0600 	mov.w	r6, #0
 800b002:	bf08      	it	eq
 800b004:	68e5      	ldreq	r5, [r4, #12]
 800b006:	f104 041a 	add.w	r4, r4, #26
 800b00a:	bf08      	it	eq
 800b00c:	1aed      	subeq	r5, r5, r3
 800b00e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b012:	bf08      	it	eq
 800b014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b018:	4293      	cmp	r3, r2
 800b01a:	bfc4      	itt	gt
 800b01c:	1a9b      	subgt	r3, r3, r2
 800b01e:	18ed      	addgt	r5, r5, r3
 800b020:	42b5      	cmp	r5, r6
 800b022:	d11a      	bne.n	800b05a <_printf_common+0xd2>
 800b024:	2000      	movs	r0, #0
 800b026:	e008      	b.n	800b03a <_printf_common+0xb2>
 800b028:	2301      	movs	r3, #1
 800b02a:	4652      	mov	r2, sl
 800b02c:	4641      	mov	r1, r8
 800b02e:	4638      	mov	r0, r7
 800b030:	47c8      	blx	r9
 800b032:	3001      	adds	r0, #1
 800b034:	d103      	bne.n	800b03e <_printf_common+0xb6>
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03e:	3501      	adds	r5, #1
 800b040:	e7c1      	b.n	800afc6 <_printf_common+0x3e>
 800b042:	2030      	movs	r0, #48	@ 0x30
 800b044:	18e1      	adds	r1, r4, r3
 800b046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b050:	4422      	add	r2, r4
 800b052:	3302      	adds	r3, #2
 800b054:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b058:	e7c2      	b.n	800afe0 <_printf_common+0x58>
 800b05a:	2301      	movs	r3, #1
 800b05c:	4622      	mov	r2, r4
 800b05e:	4641      	mov	r1, r8
 800b060:	4638      	mov	r0, r7
 800b062:	47c8      	blx	r9
 800b064:	3001      	adds	r0, #1
 800b066:	d0e6      	beq.n	800b036 <_printf_common+0xae>
 800b068:	3601      	adds	r6, #1
 800b06a:	e7d9      	b.n	800b020 <_printf_common+0x98>

0800b06c <_printf_i>:
 800b06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	7e0f      	ldrb	r7, [r1, #24]
 800b072:	4691      	mov	r9, r2
 800b074:	2f78      	cmp	r7, #120	@ 0x78
 800b076:	4680      	mov	r8, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	469a      	mov	sl, r3
 800b07c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b07e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b082:	d807      	bhi.n	800b094 <_printf_i+0x28>
 800b084:	2f62      	cmp	r7, #98	@ 0x62
 800b086:	d80a      	bhi.n	800b09e <_printf_i+0x32>
 800b088:	2f00      	cmp	r7, #0
 800b08a:	f000 80d1 	beq.w	800b230 <_printf_i+0x1c4>
 800b08e:	2f58      	cmp	r7, #88	@ 0x58
 800b090:	f000 80b8 	beq.w	800b204 <_printf_i+0x198>
 800b094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b09c:	e03a      	b.n	800b114 <_printf_i+0xa8>
 800b09e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0a2:	2b15      	cmp	r3, #21
 800b0a4:	d8f6      	bhi.n	800b094 <_printf_i+0x28>
 800b0a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b0ac <_printf_i+0x40>)
 800b0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0ac:	0800b105 	.word	0x0800b105
 800b0b0:	0800b119 	.word	0x0800b119
 800b0b4:	0800b095 	.word	0x0800b095
 800b0b8:	0800b095 	.word	0x0800b095
 800b0bc:	0800b095 	.word	0x0800b095
 800b0c0:	0800b095 	.word	0x0800b095
 800b0c4:	0800b119 	.word	0x0800b119
 800b0c8:	0800b095 	.word	0x0800b095
 800b0cc:	0800b095 	.word	0x0800b095
 800b0d0:	0800b095 	.word	0x0800b095
 800b0d4:	0800b095 	.word	0x0800b095
 800b0d8:	0800b217 	.word	0x0800b217
 800b0dc:	0800b143 	.word	0x0800b143
 800b0e0:	0800b1d1 	.word	0x0800b1d1
 800b0e4:	0800b095 	.word	0x0800b095
 800b0e8:	0800b095 	.word	0x0800b095
 800b0ec:	0800b239 	.word	0x0800b239
 800b0f0:	0800b095 	.word	0x0800b095
 800b0f4:	0800b143 	.word	0x0800b143
 800b0f8:	0800b095 	.word	0x0800b095
 800b0fc:	0800b095 	.word	0x0800b095
 800b100:	0800b1d9 	.word	0x0800b1d9
 800b104:	6833      	ldr	r3, [r6, #0]
 800b106:	1d1a      	adds	r2, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6032      	str	r2, [r6, #0]
 800b10c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b114:	2301      	movs	r3, #1
 800b116:	e09c      	b.n	800b252 <_printf_i+0x1e6>
 800b118:	6833      	ldr	r3, [r6, #0]
 800b11a:	6820      	ldr	r0, [r4, #0]
 800b11c:	1d19      	adds	r1, r3, #4
 800b11e:	6031      	str	r1, [r6, #0]
 800b120:	0606      	lsls	r6, r0, #24
 800b122:	d501      	bpl.n	800b128 <_printf_i+0xbc>
 800b124:	681d      	ldr	r5, [r3, #0]
 800b126:	e003      	b.n	800b130 <_printf_i+0xc4>
 800b128:	0645      	lsls	r5, r0, #25
 800b12a:	d5fb      	bpl.n	800b124 <_printf_i+0xb8>
 800b12c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b130:	2d00      	cmp	r5, #0
 800b132:	da03      	bge.n	800b13c <_printf_i+0xd0>
 800b134:	232d      	movs	r3, #45	@ 0x2d
 800b136:	426d      	negs	r5, r5
 800b138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b13c:	230a      	movs	r3, #10
 800b13e:	4858      	ldr	r0, [pc, #352]	@ (800b2a0 <_printf_i+0x234>)
 800b140:	e011      	b.n	800b166 <_printf_i+0xfa>
 800b142:	6821      	ldr	r1, [r4, #0]
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	0608      	lsls	r0, r1, #24
 800b148:	f853 5b04 	ldr.w	r5, [r3], #4
 800b14c:	d402      	bmi.n	800b154 <_printf_i+0xe8>
 800b14e:	0649      	lsls	r1, r1, #25
 800b150:	bf48      	it	mi
 800b152:	b2ad      	uxthmi	r5, r5
 800b154:	2f6f      	cmp	r7, #111	@ 0x6f
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	bf14      	ite	ne
 800b15a:	230a      	movne	r3, #10
 800b15c:	2308      	moveq	r3, #8
 800b15e:	4850      	ldr	r0, [pc, #320]	@ (800b2a0 <_printf_i+0x234>)
 800b160:	2100      	movs	r1, #0
 800b162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b166:	6866      	ldr	r6, [r4, #4]
 800b168:	2e00      	cmp	r6, #0
 800b16a:	60a6      	str	r6, [r4, #8]
 800b16c:	db05      	blt.n	800b17a <_printf_i+0x10e>
 800b16e:	6821      	ldr	r1, [r4, #0]
 800b170:	432e      	orrs	r6, r5
 800b172:	f021 0104 	bic.w	r1, r1, #4
 800b176:	6021      	str	r1, [r4, #0]
 800b178:	d04b      	beq.n	800b212 <_printf_i+0x1a6>
 800b17a:	4616      	mov	r6, r2
 800b17c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b180:	fb03 5711 	mls	r7, r3, r1, r5
 800b184:	5dc7      	ldrb	r7, [r0, r7]
 800b186:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b18a:	462f      	mov	r7, r5
 800b18c:	42bb      	cmp	r3, r7
 800b18e:	460d      	mov	r5, r1
 800b190:	d9f4      	bls.n	800b17c <_printf_i+0x110>
 800b192:	2b08      	cmp	r3, #8
 800b194:	d10b      	bne.n	800b1ae <_printf_i+0x142>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	07df      	lsls	r7, r3, #31
 800b19a:	d508      	bpl.n	800b1ae <_printf_i+0x142>
 800b19c:	6923      	ldr	r3, [r4, #16]
 800b19e:	6861      	ldr	r1, [r4, #4]
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	bfde      	ittt	le
 800b1a4:	2330      	movle	r3, #48	@ 0x30
 800b1a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ae:	1b92      	subs	r2, r2, r6
 800b1b0:	6122      	str	r2, [r4, #16]
 800b1b2:	464b      	mov	r3, r9
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	f8cd a000 	str.w	sl, [sp]
 800b1bc:	aa03      	add	r2, sp, #12
 800b1be:	f7ff fee3 	bl	800af88 <_printf_common>
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d14a      	bne.n	800b25c <_printf_i+0x1f0>
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ca:	b004      	add	sp, #16
 800b1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	f043 0320 	orr.w	r3, r3, #32
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	2778      	movs	r7, #120	@ 0x78
 800b1da:	4832      	ldr	r0, [pc, #200]	@ (800b2a4 <_printf_i+0x238>)
 800b1dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	6831      	ldr	r1, [r6, #0]
 800b1e4:	061f      	lsls	r7, r3, #24
 800b1e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1ea:	d402      	bmi.n	800b1f2 <_printf_i+0x186>
 800b1ec:	065f      	lsls	r7, r3, #25
 800b1ee:	bf48      	it	mi
 800b1f0:	b2ad      	uxthmi	r5, r5
 800b1f2:	6031      	str	r1, [r6, #0]
 800b1f4:	07d9      	lsls	r1, r3, #31
 800b1f6:	bf44      	itt	mi
 800b1f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fc:	6023      	strmi	r3, [r4, #0]
 800b1fe:	b11d      	cbz	r5, 800b208 <_printf_i+0x19c>
 800b200:	2310      	movs	r3, #16
 800b202:	e7ad      	b.n	800b160 <_printf_i+0xf4>
 800b204:	4826      	ldr	r0, [pc, #152]	@ (800b2a0 <_printf_i+0x234>)
 800b206:	e7e9      	b.n	800b1dc <_printf_i+0x170>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	f023 0320 	bic.w	r3, r3, #32
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	e7f6      	b.n	800b200 <_printf_i+0x194>
 800b212:	4616      	mov	r6, r2
 800b214:	e7bd      	b.n	800b192 <_printf_i+0x126>
 800b216:	6833      	ldr	r3, [r6, #0]
 800b218:	6825      	ldr	r5, [r4, #0]
 800b21a:	1d18      	adds	r0, r3, #4
 800b21c:	6961      	ldr	r1, [r4, #20]
 800b21e:	6030      	str	r0, [r6, #0]
 800b220:	062e      	lsls	r6, r5, #24
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	d501      	bpl.n	800b22a <_printf_i+0x1be>
 800b226:	6019      	str	r1, [r3, #0]
 800b228:	e002      	b.n	800b230 <_printf_i+0x1c4>
 800b22a:	0668      	lsls	r0, r5, #25
 800b22c:	d5fb      	bpl.n	800b226 <_printf_i+0x1ba>
 800b22e:	8019      	strh	r1, [r3, #0]
 800b230:	2300      	movs	r3, #0
 800b232:	4616      	mov	r6, r2
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	e7bc      	b.n	800b1b2 <_printf_i+0x146>
 800b238:	6833      	ldr	r3, [r6, #0]
 800b23a:	2100      	movs	r1, #0
 800b23c:	1d1a      	adds	r2, r3, #4
 800b23e:	6032      	str	r2, [r6, #0]
 800b240:	681e      	ldr	r6, [r3, #0]
 800b242:	6862      	ldr	r2, [r4, #4]
 800b244:	4630      	mov	r0, r6
 800b246:	f000 f859 	bl	800b2fc <memchr>
 800b24a:	b108      	cbz	r0, 800b250 <_printf_i+0x1e4>
 800b24c:	1b80      	subs	r0, r0, r6
 800b24e:	6060      	str	r0, [r4, #4]
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	2300      	movs	r3, #0
 800b256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b25a:	e7aa      	b.n	800b1b2 <_printf_i+0x146>
 800b25c:	4632      	mov	r2, r6
 800b25e:	4649      	mov	r1, r9
 800b260:	4640      	mov	r0, r8
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	47d0      	blx	sl
 800b266:	3001      	adds	r0, #1
 800b268:	d0ad      	beq.n	800b1c6 <_printf_i+0x15a>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	079b      	lsls	r3, r3, #30
 800b26e:	d413      	bmi.n	800b298 <_printf_i+0x22c>
 800b270:	68e0      	ldr	r0, [r4, #12]
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	4298      	cmp	r0, r3
 800b276:	bfb8      	it	lt
 800b278:	4618      	movlt	r0, r3
 800b27a:	e7a6      	b.n	800b1ca <_printf_i+0x15e>
 800b27c:	2301      	movs	r3, #1
 800b27e:	4632      	mov	r2, r6
 800b280:	4649      	mov	r1, r9
 800b282:	4640      	mov	r0, r8
 800b284:	47d0      	blx	sl
 800b286:	3001      	adds	r0, #1
 800b288:	d09d      	beq.n	800b1c6 <_printf_i+0x15a>
 800b28a:	3501      	adds	r5, #1
 800b28c:	68e3      	ldr	r3, [r4, #12]
 800b28e:	9903      	ldr	r1, [sp, #12]
 800b290:	1a5b      	subs	r3, r3, r1
 800b292:	42ab      	cmp	r3, r5
 800b294:	dcf2      	bgt.n	800b27c <_printf_i+0x210>
 800b296:	e7eb      	b.n	800b270 <_printf_i+0x204>
 800b298:	2500      	movs	r5, #0
 800b29a:	f104 0619 	add.w	r6, r4, #25
 800b29e:	e7f5      	b.n	800b28c <_printf_i+0x220>
 800b2a0:	0800d8b8 	.word	0x0800d8b8
 800b2a4:	0800d8c9 	.word	0x0800d8c9

0800b2a8 <memmove>:
 800b2a8:	4288      	cmp	r0, r1
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	eb01 0402 	add.w	r4, r1, r2
 800b2b0:	d902      	bls.n	800b2b8 <memmove+0x10>
 800b2b2:	4284      	cmp	r4, r0
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	d807      	bhi.n	800b2c8 <memmove+0x20>
 800b2b8:	1e43      	subs	r3, r0, #1
 800b2ba:	42a1      	cmp	r1, r4
 800b2bc:	d008      	beq.n	800b2d0 <memmove+0x28>
 800b2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2c6:	e7f8      	b.n	800b2ba <memmove+0x12>
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4402      	add	r2, r0
 800b2cc:	428a      	cmp	r2, r1
 800b2ce:	d100      	bne.n	800b2d2 <memmove+0x2a>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2da:	e7f7      	b.n	800b2cc <memmove+0x24>

0800b2dc <_sbrk_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4d05      	ldr	r5, [pc, #20]	@ (800b2f8 <_sbrk_r+0x1c>)
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	f7f6 fb4e 	bl	8001988 <_sbrk>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_sbrk_r+0x1a>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_sbrk_r+0x1a>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20001898 	.word	0x20001898

0800b2fc <memchr>:
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	b510      	push	{r4, lr}
 800b300:	b2c9      	uxtb	r1, r1
 800b302:	4402      	add	r2, r0
 800b304:	4293      	cmp	r3, r2
 800b306:	4618      	mov	r0, r3
 800b308:	d101      	bne.n	800b30e <memchr+0x12>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e003      	b.n	800b316 <memchr+0x1a>
 800b30e:	7804      	ldrb	r4, [r0, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	428c      	cmp	r4, r1
 800b314:	d1f6      	bne.n	800b304 <memchr+0x8>
 800b316:	bd10      	pop	{r4, pc}

0800b318 <_realloc_r>:
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4607      	mov	r7, r0
 800b31e:	4614      	mov	r4, r2
 800b320:	460d      	mov	r5, r1
 800b322:	b921      	cbnz	r1, 800b32e <_realloc_r+0x16>
 800b324:	4611      	mov	r1, r2
 800b326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b32a:	f7ff bc49 	b.w	800abc0 <_malloc_r>
 800b32e:	b92a      	cbnz	r2, 800b33c <_realloc_r+0x24>
 800b330:	f7ff fbdc 	bl	800aaec <_free_r>
 800b334:	4625      	mov	r5, r4
 800b336:	4628      	mov	r0, r5
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	f000 f81a 	bl	800b374 <_malloc_usable_size_r>
 800b340:	4284      	cmp	r4, r0
 800b342:	4606      	mov	r6, r0
 800b344:	d802      	bhi.n	800b34c <_realloc_r+0x34>
 800b346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b34a:	d8f4      	bhi.n	800b336 <_realloc_r+0x1e>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4638      	mov	r0, r7
 800b350:	f7ff fc36 	bl	800abc0 <_malloc_r>
 800b354:	4680      	mov	r8, r0
 800b356:	b908      	cbnz	r0, 800b35c <_realloc_r+0x44>
 800b358:	4645      	mov	r5, r8
 800b35a:	e7ec      	b.n	800b336 <_realloc_r+0x1e>
 800b35c:	42b4      	cmp	r4, r6
 800b35e:	4622      	mov	r2, r4
 800b360:	4629      	mov	r1, r5
 800b362:	bf28      	it	cs
 800b364:	4632      	movcs	r2, r6
 800b366:	f7ff fbb3 	bl	800aad0 <memcpy>
 800b36a:	4629      	mov	r1, r5
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7ff fbbd 	bl	800aaec <_free_r>
 800b372:	e7f1      	b.n	800b358 <_realloc_r+0x40>

0800b374 <_malloc_usable_size_r>:
 800b374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b378:	1f18      	subs	r0, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfbc      	itt	lt
 800b37e:	580b      	ldrlt	r3, [r1, r0]
 800b380:	18c0      	addlt	r0, r0, r3
 800b382:	4770      	bx	lr

0800b384 <pow>:
 800b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b388:	4614      	mov	r4, r2
 800b38a:	461d      	mov	r5, r3
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	f000 f866 	bl	800b460 <__ieee754_pow>
 800b394:	4622      	mov	r2, r4
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	462b      	mov	r3, r5
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 fb34 	bl	8000a0c <__aeabi_dcmpun>
 800b3a4:	bbc8      	cbnz	r0, 800b41a <pow+0x96>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f5 fafb 	bl	80009a8 <__aeabi_dcmpeq>
 800b3b2:	b1b8      	cbz	r0, 800b3e4 <pow+0x60>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	f7f5 faf4 	bl	80009a8 <__aeabi_dcmpeq>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d141      	bne.n	800b448 <pow+0xc4>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f000 f844 	bl	800b454 <finite>
 800b3cc:	b328      	cbz	r0, 800b41a <pow+0x96>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4629      	mov	r1, r5
 800b3d6:	f7f5 faf1 	bl	80009bc <__aeabi_dcmplt>
 800b3da:	b1f0      	cbz	r0, 800b41a <pow+0x96>
 800b3dc:	f7ff fb4c 	bl	800aa78 <__errno>
 800b3e0:	2322      	movs	r3, #34	@ 0x22
 800b3e2:	e019      	b.n	800b418 <pow+0x94>
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f000 f834 	bl	800b454 <finite>
 800b3ec:	b9c8      	cbnz	r0, 800b422 <pow+0x9e>
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	f000 f82f 	bl	800b454 <finite>
 800b3f6:	b1a0      	cbz	r0, 800b422 <pow+0x9e>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f000 f82a 	bl	800b454 <finite>
 800b400:	b178      	cbz	r0, 800b422 <pow+0x9e>
 800b402:	4632      	mov	r2, r6
 800b404:	463b      	mov	r3, r7
 800b406:	4630      	mov	r0, r6
 800b408:	4639      	mov	r1, r7
 800b40a:	f7f5 faff 	bl	8000a0c <__aeabi_dcmpun>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0e4      	beq.n	800b3dc <pow+0x58>
 800b412:	f7ff fb31 	bl	800aa78 <__errno>
 800b416:	2321      	movs	r3, #33	@ 0x21
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	4630      	mov	r0, r6
 800b41c:	4639      	mov	r1, r7
 800b41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	4630      	mov	r0, r6
 800b428:	4639      	mov	r1, r7
 800b42a:	f7f5 fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0f3      	beq.n	800b41a <pow+0x96>
 800b432:	4640      	mov	r0, r8
 800b434:	4649      	mov	r1, r9
 800b436:	f000 f80d 	bl	800b454 <finite>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0ed      	beq.n	800b41a <pow+0x96>
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f000 f807 	bl	800b454 <finite>
 800b446:	e7c8      	b.n	800b3da <pow+0x56>
 800b448:	2600      	movs	r6, #0
 800b44a:	4f01      	ldr	r7, [pc, #4]	@ (800b450 <pow+0xcc>)
 800b44c:	e7e5      	b.n	800b41a <pow+0x96>
 800b44e:	bf00      	nop
 800b450:	3ff00000 	.word	0x3ff00000

0800b454 <finite>:
 800b454:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800b458:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b45c:	0fc0      	lsrs	r0, r0, #31
 800b45e:	4770      	bx	lr

0800b460 <__ieee754_pow>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	b091      	sub	sp, #68	@ 0x44
 800b466:	e9cd 2300 	strd	r2, r3, [sp]
 800b46a:	468b      	mov	fp, r1
 800b46c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b470:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b474:	4682      	mov	sl, r0
 800b476:	ea57 0001 	orrs.w	r0, r7, r1
 800b47a:	d112      	bne.n	800b4a2 <__ieee754_pow+0x42>
 800b47c:	4653      	mov	r3, sl
 800b47e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b482:	18db      	adds	r3, r3, r3
 800b484:	4152      	adcs	r2, r2
 800b486:	4298      	cmp	r0, r3
 800b488:	4b93      	ldr	r3, [pc, #588]	@ (800b6d8 <__ieee754_pow+0x278>)
 800b48a:	4193      	sbcs	r3, r2
 800b48c:	f080 84cd 	bcs.w	800be2a <__ieee754_pow+0x9ca>
 800b490:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b494:	4650      	mov	r0, sl
 800b496:	4659      	mov	r1, fp
 800b498:	f7f4 fe68 	bl	800016c <__adddf3>
 800b49c:	b011      	add	sp, #68	@ 0x44
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	4b8e      	ldr	r3, [pc, #568]	@ (800b6dc <__ieee754_pow+0x27c>)
 800b4a4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 800b4a8:	429d      	cmp	r5, r3
 800b4aa:	465e      	mov	r6, fp
 800b4ac:	46d1      	mov	r9, sl
 800b4ae:	d80b      	bhi.n	800b4c8 <__ieee754_pow+0x68>
 800b4b0:	d105      	bne.n	800b4be <__ieee754_pow+0x5e>
 800b4b2:	f1ba 0f00 	cmp.w	sl, #0
 800b4b6:	d1eb      	bne.n	800b490 <__ieee754_pow+0x30>
 800b4b8:	42af      	cmp	r7, r5
 800b4ba:	d8e9      	bhi.n	800b490 <__ieee754_pow+0x30>
 800b4bc:	e001      	b.n	800b4c2 <__ieee754_pow+0x62>
 800b4be:	429f      	cmp	r7, r3
 800b4c0:	d802      	bhi.n	800b4c8 <__ieee754_pow+0x68>
 800b4c2:	429f      	cmp	r7, r3
 800b4c4:	d10f      	bne.n	800b4e6 <__ieee754_pow+0x86>
 800b4c6:	b171      	cbz	r1, 800b4e6 <__ieee754_pow+0x86>
 800b4c8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b4cc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b4d0:	ea56 0609 	orrs.w	r6, r6, r9
 800b4d4:	d1dc      	bne.n	800b490 <__ieee754_pow+0x30>
 800b4d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4da:	18db      	adds	r3, r3, r3
 800b4dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b4e0:	4152      	adcs	r2, r2
 800b4e2:	429e      	cmp	r6, r3
 800b4e4:	e7d0      	b.n	800b488 <__ieee754_pow+0x28>
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	da42      	bge.n	800b572 <__ieee754_pow+0x112>
 800b4ec:	4a7c      	ldr	r2, [pc, #496]	@ (800b6e0 <__ieee754_pow+0x280>)
 800b4ee:	4297      	cmp	r7, r2
 800b4f0:	d856      	bhi.n	800b5a0 <__ieee754_pow+0x140>
 800b4f2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b4f6:	4297      	cmp	r7, r2
 800b4f8:	f240 84a6 	bls.w	800be48 <__ieee754_pow+0x9e8>
 800b4fc:	153a      	asrs	r2, r7, #20
 800b4fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b502:	2a14      	cmp	r2, #20
 800b504:	dd18      	ble.n	800b538 <__ieee754_pow+0xd8>
 800b506:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b50a:	fa21 f402 	lsr.w	r4, r1, r2
 800b50e:	fa04 f202 	lsl.w	r2, r4, r2
 800b512:	428a      	cmp	r2, r1
 800b514:	f040 8498 	bne.w	800be48 <__ieee754_pow+0x9e8>
 800b518:	f004 0401 	and.w	r4, r4, #1
 800b51c:	f1c4 0402 	rsb	r4, r4, #2
 800b520:	2900      	cmp	r1, #0
 800b522:	d159      	bne.n	800b5d8 <__ieee754_pow+0x178>
 800b524:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b528:	d149      	bne.n	800b5be <__ieee754_pow+0x15e>
 800b52a:	4652      	mov	r2, sl
 800b52c:	465b      	mov	r3, fp
 800b52e:	4650      	mov	r0, sl
 800b530:	4659      	mov	r1, fp
 800b532:	f7f4 ffd1 	bl	80004d8 <__aeabi_dmul>
 800b536:	e7b1      	b.n	800b49c <__ieee754_pow+0x3c>
 800b538:	2900      	cmp	r1, #0
 800b53a:	d14c      	bne.n	800b5d6 <__ieee754_pow+0x176>
 800b53c:	f1c2 0214 	rsb	r2, r2, #20
 800b540:	fa47 f402 	asr.w	r4, r7, r2
 800b544:	fa04 f202 	lsl.w	r2, r4, r2
 800b548:	42ba      	cmp	r2, r7
 800b54a:	f040 847a 	bne.w	800be42 <__ieee754_pow+0x9e2>
 800b54e:	f004 0401 	and.w	r4, r4, #1
 800b552:	f1c4 0402 	rsb	r4, r4, #2
 800b556:	4a63      	ldr	r2, [pc, #396]	@ (800b6e4 <__ieee754_pow+0x284>)
 800b558:	4297      	cmp	r7, r2
 800b55a:	d1e3      	bne.n	800b524 <__ieee754_pow+0xc4>
 800b55c:	f1b8 0f00 	cmp.w	r8, #0
 800b560:	f280 846b 	bge.w	800be3a <__ieee754_pow+0x9da>
 800b564:	4652      	mov	r2, sl
 800b566:	465b      	mov	r3, fp
 800b568:	2000      	movs	r0, #0
 800b56a:	495e      	ldr	r1, [pc, #376]	@ (800b6e4 <__ieee754_pow+0x284>)
 800b56c:	f7f5 f8de 	bl	800072c <__aeabi_ddiv>
 800b570:	e794      	b.n	800b49c <__ieee754_pow+0x3c>
 800b572:	2400      	movs	r4, #0
 800b574:	bb81      	cbnz	r1, 800b5d8 <__ieee754_pow+0x178>
 800b576:	4a59      	ldr	r2, [pc, #356]	@ (800b6dc <__ieee754_pow+0x27c>)
 800b578:	4297      	cmp	r7, r2
 800b57a:	d1ec      	bne.n	800b556 <__ieee754_pow+0xf6>
 800b57c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800b580:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b584:	ea53 0309 	orrs.w	r3, r3, r9
 800b588:	f000 844f 	beq.w	800be2a <__ieee754_pow+0x9ca>
 800b58c:	4b56      	ldr	r3, [pc, #344]	@ (800b6e8 <__ieee754_pow+0x288>)
 800b58e:	429d      	cmp	r5, r3
 800b590:	d908      	bls.n	800b5a4 <__ieee754_pow+0x144>
 800b592:	f1b8 0f00 	cmp.w	r8, #0
 800b596:	f280 844c 	bge.w	800be32 <__ieee754_pow+0x9d2>
 800b59a:	2000      	movs	r0, #0
 800b59c:	2100      	movs	r1, #0
 800b59e:	e77d      	b.n	800b49c <__ieee754_pow+0x3c>
 800b5a0:	2402      	movs	r4, #2
 800b5a2:	e7e7      	b.n	800b574 <__ieee754_pow+0x114>
 800b5a4:	f1b8 0f00 	cmp.w	r8, #0
 800b5a8:	f04f 0000 	mov.w	r0, #0
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	f6bf af74 	bge.w	800b49c <__ieee754_pow+0x3c>
 800b5b4:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b5b8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b5bc:	e76e      	b.n	800b49c <__ieee754_pow+0x3c>
 800b5be:	4a4b      	ldr	r2, [pc, #300]	@ (800b6ec <__ieee754_pow+0x28c>)
 800b5c0:	4590      	cmp	r8, r2
 800b5c2:	d109      	bne.n	800b5d8 <__ieee754_pow+0x178>
 800b5c4:	2e00      	cmp	r6, #0
 800b5c6:	db07      	blt.n	800b5d8 <__ieee754_pow+0x178>
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	4659      	mov	r1, fp
 800b5cc:	b011      	add	sp, #68	@ 0x44
 800b5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d2:	f000 bd0f 	b.w	800bff4 <__ieee754_sqrt>
 800b5d6:	2400      	movs	r4, #0
 800b5d8:	4650      	mov	r0, sl
 800b5da:	4659      	mov	r1, fp
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	f000 fc69 	bl	800beb4 <fabs>
 800b5e2:	9b02      	ldr	r3, [sp, #8]
 800b5e4:	f1b9 0f00 	cmp.w	r9, #0
 800b5e8:	d127      	bne.n	800b63a <__ieee754_pow+0x1da>
 800b5ea:	4a3e      	ldr	r2, [pc, #248]	@ (800b6e4 <__ieee754_pow+0x284>)
 800b5ec:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800b5f0:	4594      	cmp	ip, r2
 800b5f2:	d000      	beq.n	800b5f6 <__ieee754_pow+0x196>
 800b5f4:	bb0d      	cbnz	r5, 800b63a <__ieee754_pow+0x1da>
 800b5f6:	f1b8 0f00 	cmp.w	r8, #0
 800b5fa:	da05      	bge.n	800b608 <__ieee754_pow+0x1a8>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	2000      	movs	r0, #0
 800b602:	4938      	ldr	r1, [pc, #224]	@ (800b6e4 <__ieee754_pow+0x284>)
 800b604:	f7f5 f892 	bl	800072c <__aeabi_ddiv>
 800b608:	2e00      	cmp	r6, #0
 800b60a:	f6bf af47 	bge.w	800b49c <__ieee754_pow+0x3c>
 800b60e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b612:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b616:	4325      	orrs	r5, r4
 800b618:	d108      	bne.n	800b62c <__ieee754_pow+0x1cc>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	4610      	mov	r0, r2
 800b620:	4619      	mov	r1, r3
 800b622:	f7f4 fda1 	bl	8000168 <__aeabi_dsub>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	e79f      	b.n	800b56c <__ieee754_pow+0x10c>
 800b62c:	2c01      	cmp	r4, #1
 800b62e:	f47f af35 	bne.w	800b49c <__ieee754_pow+0x3c>
 800b632:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b636:	4619      	mov	r1, r3
 800b638:	e730      	b.n	800b49c <__ieee754_pow+0x3c>
 800b63a:	0ff2      	lsrs	r2, r6, #31
 800b63c:	3a01      	subs	r2, #1
 800b63e:	ea52 0c04 	orrs.w	ip, r2, r4
 800b642:	d102      	bne.n	800b64a <__ieee754_pow+0x1ea>
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	e7e9      	b.n	800b61e <__ieee754_pow+0x1be>
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	3c01      	subs	r4, #1
 800b650:	4314      	orrs	r4, r2
 800b652:	bf14      	ite	ne
 800b654:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b6e4 <__ieee754_pow+0x284>
 800b658:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b6f0 <__ieee754_pow+0x290>
 800b65c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b660:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b664:	f240 8104 	bls.w	800b870 <__ieee754_pow+0x410>
 800b668:	4b22      	ldr	r3, [pc, #136]	@ (800b6f4 <__ieee754_pow+0x294>)
 800b66a:	429f      	cmp	r7, r3
 800b66c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6e8 <__ieee754_pow+0x288>)
 800b66e:	d913      	bls.n	800b698 <__ieee754_pow+0x238>
 800b670:	429d      	cmp	r5, r3
 800b672:	d808      	bhi.n	800b686 <__ieee754_pow+0x226>
 800b674:	f1b8 0f00 	cmp.w	r8, #0
 800b678:	da08      	bge.n	800b68c <__ieee754_pow+0x22c>
 800b67a:	2000      	movs	r0, #0
 800b67c:	b011      	add	sp, #68	@ 0x44
 800b67e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b682:	f000 bcb1 	b.w	800bfe8 <__math_oflow>
 800b686:	f1b8 0f00 	cmp.w	r8, #0
 800b68a:	dcf6      	bgt.n	800b67a <__ieee754_pow+0x21a>
 800b68c:	2000      	movs	r0, #0
 800b68e:	b011      	add	sp, #68	@ 0x44
 800b690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	f000 bca3 	b.w	800bfde <__math_uflow>
 800b698:	429d      	cmp	r5, r3
 800b69a:	d20c      	bcs.n	800b6b6 <__ieee754_pow+0x256>
 800b69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f7f5 f98a 	bl	80009bc <__aeabi_dcmplt>
 800b6a8:	3800      	subs	r0, #0
 800b6aa:	bf18      	it	ne
 800b6ac:	2001      	movne	r0, #1
 800b6ae:	f1b8 0f00 	cmp.w	r8, #0
 800b6b2:	daec      	bge.n	800b68e <__ieee754_pow+0x22e>
 800b6b4:	e7e2      	b.n	800b67c <__ieee754_pow+0x21c>
 800b6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e4 <__ieee754_pow+0x284>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	429d      	cmp	r5, r3
 800b6bc:	d91c      	bls.n	800b6f8 <__ieee754_pow+0x298>
 800b6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f7f5 f97a 	bl	80009bc <__aeabi_dcmplt>
 800b6c8:	3800      	subs	r0, #0
 800b6ca:	bf18      	it	ne
 800b6cc:	2001      	movne	r0, #1
 800b6ce:	f1b8 0f00 	cmp.w	r8, #0
 800b6d2:	dcd3      	bgt.n	800b67c <__ieee754_pow+0x21c>
 800b6d4:	e7db      	b.n	800b68e <__ieee754_pow+0x22e>
 800b6d6:	bf00      	nop
 800b6d8:	fff00000 	.word	0xfff00000
 800b6dc:	7ff00000 	.word	0x7ff00000
 800b6e0:	433fffff 	.word	0x433fffff
 800b6e4:	3ff00000 	.word	0x3ff00000
 800b6e8:	3fefffff 	.word	0x3fefffff
 800b6ec:	3fe00000 	.word	0x3fe00000
 800b6f0:	bff00000 	.word	0xbff00000
 800b6f4:	43f00000 	.word	0x43f00000
 800b6f8:	4b59      	ldr	r3, [pc, #356]	@ (800b860 <__ieee754_pow+0x400>)
 800b6fa:	f7f4 fd35 	bl	8000168 <__aeabi_dsub>
 800b6fe:	a350      	add	r3, pc, #320	@ (adr r3, 800b840 <__ieee754_pow+0x3e0>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	4604      	mov	r4, r0
 800b706:	460d      	mov	r5, r1
 800b708:	f7f4 fee6 	bl	80004d8 <__aeabi_dmul>
 800b70c:	a34e      	add	r3, pc, #312	@ (adr r3, 800b848 <__ieee754_pow+0x3e8>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	4606      	mov	r6, r0
 800b714:	460f      	mov	r7, r1
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	f7f4 fedd 	bl	80004d8 <__aeabi_dmul>
 800b71e:	2200      	movs	r2, #0
 800b720:	4682      	mov	sl, r0
 800b722:	468b      	mov	fp, r1
 800b724:	4620      	mov	r0, r4
 800b726:	4629      	mov	r1, r5
 800b728:	4b4e      	ldr	r3, [pc, #312]	@ (800b864 <__ieee754_pow+0x404>)
 800b72a:	f7f4 fed5 	bl	80004d8 <__aeabi_dmul>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	a147      	add	r1, pc, #284	@ (adr r1, 800b850 <__ieee754_pow+0x3f0>)
 800b734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b738:	f7f4 fd16 	bl	8000168 <__aeabi_dsub>
 800b73c:	4622      	mov	r2, r4
 800b73e:	462b      	mov	r3, r5
 800b740:	f7f4 feca 	bl	80004d8 <__aeabi_dmul>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	2000      	movs	r0, #0
 800b74a:	4947      	ldr	r1, [pc, #284]	@ (800b868 <__ieee754_pow+0x408>)
 800b74c:	f7f4 fd0c 	bl	8000168 <__aeabi_dsub>
 800b750:	4622      	mov	r2, r4
 800b752:	4680      	mov	r8, r0
 800b754:	4689      	mov	r9, r1
 800b756:	462b      	mov	r3, r5
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 febc 	bl	80004d8 <__aeabi_dmul>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4640      	mov	r0, r8
 800b766:	4649      	mov	r1, r9
 800b768:	f7f4 feb6 	bl	80004d8 <__aeabi_dmul>
 800b76c:	a33a      	add	r3, pc, #232	@ (adr r3, 800b858 <__ieee754_pow+0x3f8>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 feb1 	bl	80004d8 <__aeabi_dmul>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	f7f4 fcf3 	bl	8000168 <__aeabi_dsub>
 800b782:	2400      	movs	r4, #0
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4680      	mov	r8, r0
 800b78a:	4689      	mov	r9, r1
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f4 fcec 	bl	800016c <__adddf3>
 800b794:	4632      	mov	r2, r6
 800b796:	463b      	mov	r3, r7
 800b798:	4620      	mov	r0, r4
 800b79a:	460d      	mov	r5, r1
 800b79c:	f7f4 fce4 	bl	8000168 <__aeabi_dsub>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	f7f4 fcde 	bl	8000168 <__aeabi_dsub>
 800b7ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b7bc:	4606      	mov	r6, r0
 800b7be:	460f      	mov	r7, r1
 800b7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	4652      	mov	r2, sl
 800b7c8:	f7f4 fcce 	bl	8000168 <__aeabi_dsub>
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	462b      	mov	r3, r5
 800b7d0:	f7f4 fe82 	bl	80004d8 <__aeabi_dmul>
 800b7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4689      	mov	r9, r1
 800b7dc:	4630      	mov	r0, r6
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f4 fe7a 	bl	80004d8 <__aeabi_dmul>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f4 fcbe 	bl	800016c <__adddf3>
 800b7f0:	465b      	mov	r3, fp
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460f      	mov	r7, r1
 800b7f6:	4652      	mov	r2, sl
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	f7f4 fe6c 	bl	80004d8 <__aeabi_dmul>
 800b800:	460b      	mov	r3, r1
 800b802:	4602      	mov	r2, r0
 800b804:	4680      	mov	r8, r0
 800b806:	4689      	mov	r9, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f4 fcae 	bl	800016c <__adddf3>
 800b810:	4b16      	ldr	r3, [pc, #88]	@ (800b86c <__ieee754_pow+0x40c>)
 800b812:	4604      	mov	r4, r0
 800b814:	4299      	cmp	r1, r3
 800b816:	460d      	mov	r5, r1
 800b818:	468b      	mov	fp, r1
 800b81a:	f340 81fd 	ble.w	800bc18 <__ieee754_pow+0x7b8>
 800b81e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b822:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b826:	4303      	orrs	r3, r0
 800b828:	f000 81dc 	beq.w	800bbe4 <__ieee754_pow+0x784>
 800b82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b830:	2200      	movs	r2, #0
 800b832:	2300      	movs	r3, #0
 800b834:	f7f5 f8c2 	bl	80009bc <__aeabi_dcmplt>
 800b838:	3800      	subs	r0, #0
 800b83a:	bf18      	it	ne
 800b83c:	2001      	movne	r0, #1
 800b83e:	e71d      	b.n	800b67c <__ieee754_pow+0x21c>
 800b840:	60000000 	.word	0x60000000
 800b844:	3ff71547 	.word	0x3ff71547
 800b848:	f85ddf44 	.word	0xf85ddf44
 800b84c:	3e54ae0b 	.word	0x3e54ae0b
 800b850:	55555555 	.word	0x55555555
 800b854:	3fd55555 	.word	0x3fd55555
 800b858:	652b82fe 	.word	0x652b82fe
 800b85c:	3ff71547 	.word	0x3ff71547
 800b860:	3ff00000 	.word	0x3ff00000
 800b864:	3fd00000 	.word	0x3fd00000
 800b868:	3fe00000 	.word	0x3fe00000
 800b86c:	408fffff 	.word	0x408fffff
 800b870:	4ad3      	ldr	r2, [pc, #844]	@ (800bbc0 <__ieee754_pow+0x760>)
 800b872:	4032      	ands	r2, r6
 800b874:	2a00      	cmp	r2, #0
 800b876:	f040 817a 	bne.w	800bb6e <__ieee754_pow+0x70e>
 800b87a:	4bd2      	ldr	r3, [pc, #840]	@ (800bbc4 <__ieee754_pow+0x764>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	f7f4 fe2b 	bl	80004d8 <__aeabi_dmul>
 800b882:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b886:	460b      	mov	r3, r1
 800b888:	151a      	asrs	r2, r3, #20
 800b88a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b88e:	4422      	add	r2, r4
 800b890:	920a      	str	r2, [sp, #40]	@ 0x28
 800b892:	4acd      	ldr	r2, [pc, #820]	@ (800bbc8 <__ieee754_pow+0x768>)
 800b894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b898:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b89c:	4293      	cmp	r3, r2
 800b89e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8a2:	dd08      	ble.n	800b8b6 <__ieee754_pow+0x456>
 800b8a4:	4ac9      	ldr	r2, [pc, #804]	@ (800bbcc <__ieee754_pow+0x76c>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	f340 8163 	ble.w	800bb72 <__ieee754_pow+0x712>
 800b8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	00f3      	lsls	r3, r6, #3
 800b8ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8bc:	4bc4      	ldr	r3, [pc, #784]	@ (800bbd0 <__ieee754_pow+0x770>)
 800b8be:	4629      	mov	r1, r5
 800b8c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b8ce:	4623      	mov	r3, r4
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	f7f4 fc49 	bl	8000168 <__aeabi_dsub>
 800b8d6:	4652      	mov	r2, sl
 800b8d8:	462b      	mov	r3, r5
 800b8da:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b8de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8e2:	f7f4 fc43 	bl	800016c <__adddf3>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	49b9      	ldr	r1, [pc, #740]	@ (800bbd4 <__ieee754_pow+0x774>)
 800b8ee:	f7f4 ff1d 	bl	800072c <__aeabi_ddiv>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b8fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8fe:	f7f4 fdeb 	bl	80004d8 <__aeabi_dmul>
 800b902:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b906:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b90a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b90e:	2300      	movs	r3, #0
 800b910:	2200      	movs	r2, #0
 800b912:	46ab      	mov	fp, r5
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b91a:	9304      	str	r3, [sp, #16]
 800b91c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b920:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b924:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b928:	4640      	mov	r0, r8
 800b92a:	4649      	mov	r1, r9
 800b92c:	4614      	mov	r4, r2
 800b92e:	461d      	mov	r5, r3
 800b930:	f7f4 fdd2 	bl	80004d8 <__aeabi_dmul>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b93c:	f7f4 fc14 	bl	8000168 <__aeabi_dsub>
 800b940:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 fc0c 	bl	8000168 <__aeabi_dsub>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4650      	mov	r0, sl
 800b956:	4659      	mov	r1, fp
 800b958:	f7f4 fc06 	bl	8000168 <__aeabi_dsub>
 800b95c:	4642      	mov	r2, r8
 800b95e:	464b      	mov	r3, r9
 800b960:	f7f4 fdba 	bl	80004d8 <__aeabi_dmul>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4630      	mov	r0, r6
 800b96a:	4639      	mov	r1, r7
 800b96c:	f7f4 fbfc 	bl	8000168 <__aeabi_dsub>
 800b970:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b974:	f7f4 fdb0 	bl	80004d8 <__aeabi_dmul>
 800b978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b97c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b980:	4610      	mov	r0, r2
 800b982:	4619      	mov	r1, r3
 800b984:	f7f4 fda8 	bl	80004d8 <__aeabi_dmul>
 800b988:	a37b      	add	r3, pc, #492	@ (adr r3, 800bb78 <__ieee754_pow+0x718>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	f7f4 fda1 	bl	80004d8 <__aeabi_dmul>
 800b996:	a37a      	add	r3, pc, #488	@ (adr r3, 800bb80 <__ieee754_pow+0x720>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fbe6 	bl	800016c <__adddf3>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fd98 	bl	80004d8 <__aeabi_dmul>
 800b9a8:	a377      	add	r3, pc, #476	@ (adr r3, 800bb88 <__ieee754_pow+0x728>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fbdd 	bl	800016c <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	f7f4 fd8f 	bl	80004d8 <__aeabi_dmul>
 800b9ba:	a375      	add	r3, pc, #468	@ (adr r3, 800bb90 <__ieee754_pow+0x730>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fbd4 	bl	800016c <__adddf3>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f7f4 fd86 	bl	80004d8 <__aeabi_dmul>
 800b9cc:	a372      	add	r3, pc, #456	@ (adr r3, 800bb98 <__ieee754_pow+0x738>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fbcb 	bl	800016c <__adddf3>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	462b      	mov	r3, r5
 800b9da:	f7f4 fd7d 	bl	80004d8 <__aeabi_dmul>
 800b9de:	a370      	add	r3, pc, #448	@ (adr r3, 800bba0 <__ieee754_pow+0x740>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f7f4 fbc2 	bl	800016c <__adddf3>
 800b9e8:	4622      	mov	r2, r4
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	f7f4 fd70 	bl	80004d8 <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fd6a 	bl	80004d8 <__aeabi_dmul>
 800ba04:	4604      	mov	r4, r0
 800ba06:	460d      	mov	r5, r1
 800ba08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba0c:	4642      	mov	r2, r8
 800ba0e:	464b      	mov	r3, r9
 800ba10:	f7f4 fbac 	bl	800016c <__adddf3>
 800ba14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba18:	f7f4 fd5e 	bl	80004d8 <__aeabi_dmul>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f4 fba4 	bl	800016c <__adddf3>
 800ba24:	4642      	mov	r2, r8
 800ba26:	4682      	mov	sl, r0
 800ba28:	468b      	mov	fp, r1
 800ba2a:	464b      	mov	r3, r9
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	4649      	mov	r1, r9
 800ba30:	f7f4 fd52 	bl	80004d8 <__aeabi_dmul>
 800ba34:	2200      	movs	r2, #0
 800ba36:	4b68      	ldr	r3, [pc, #416]	@ (800bbd8 <__ieee754_pow+0x778>)
 800ba38:	4606      	mov	r6, r0
 800ba3a:	460f      	mov	r7, r1
 800ba3c:	f7f4 fb96 	bl	800016c <__adddf3>
 800ba40:	4652      	mov	r2, sl
 800ba42:	465b      	mov	r3, fp
 800ba44:	f7f4 fb92 	bl	800016c <__adddf3>
 800ba48:	2400      	movs	r4, #0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	4622      	mov	r2, r4
 800ba4e:	460b      	mov	r3, r1
 800ba50:	4640      	mov	r0, r8
 800ba52:	4649      	mov	r1, r9
 800ba54:	f7f4 fd40 	bl	80004d8 <__aeabi_dmul>
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	4689      	mov	r9, r1
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	4b5d      	ldr	r3, [pc, #372]	@ (800bbd8 <__ieee754_pow+0x778>)
 800ba64:	f7f4 fb80 	bl	8000168 <__aeabi_dsub>
 800ba68:	4632      	mov	r2, r6
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	f7f4 fb7c 	bl	8000168 <__aeabi_dsub>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	f7f4 fb76 	bl	8000168 <__aeabi_dsub>
 800ba7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba80:	f7f4 fd2a 	bl	80004d8 <__aeabi_dmul>
 800ba84:	4622      	mov	r2, r4
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba8e:	462b      	mov	r3, r5
 800ba90:	f7f4 fd22 	bl	80004d8 <__aeabi_dmul>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f4 fb66 	bl	800016c <__adddf3>
 800baa0:	2400      	movs	r4, #0
 800baa2:	4606      	mov	r6, r0
 800baa4:	460f      	mov	r7, r1
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	4640      	mov	r0, r8
 800baac:	4649      	mov	r1, r9
 800baae:	f7f4 fb5d 	bl	800016c <__adddf3>
 800bab2:	a33d      	add	r3, pc, #244	@ (adr r3, 800bba8 <__ieee754_pow+0x748>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	4620      	mov	r0, r4
 800baba:	460d      	mov	r5, r1
 800babc:	f7f4 fd0c 	bl	80004d8 <__aeabi_dmul>
 800bac0:	4642      	mov	r2, r8
 800bac2:	464b      	mov	r3, r9
 800bac4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bac8:	4620      	mov	r0, r4
 800baca:	4629      	mov	r1, r5
 800bacc:	f7f4 fb4c 	bl	8000168 <__aeabi_dsub>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4630      	mov	r0, r6
 800bad6:	4639      	mov	r1, r7
 800bad8:	f7f4 fb46 	bl	8000168 <__aeabi_dsub>
 800badc:	a334      	add	r3, pc, #208	@ (adr r3, 800bbb0 <__ieee754_pow+0x750>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f7f4 fcf9 	bl	80004d8 <__aeabi_dmul>
 800bae6:	a334      	add	r3, pc, #208	@ (adr r3, 800bbb8 <__ieee754_pow+0x758>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	4606      	mov	r6, r0
 800baee:	460f      	mov	r7, r1
 800baf0:	4620      	mov	r0, r4
 800baf2:	4629      	mov	r1, r5
 800baf4:	f7f4 fcf0 	bl	80004d8 <__aeabi_dmul>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f4 fb34 	bl	800016c <__adddf3>
 800bb04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb06:	4b35      	ldr	r3, [pc, #212]	@ (800bbdc <__ieee754_pow+0x77c>)
 800bb08:	2400      	movs	r4, #0
 800bb0a:	4413      	add	r3, r2
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fb2c 	bl	800016c <__adddf3>
 800bb14:	4682      	mov	sl, r0
 800bb16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb18:	468b      	mov	fp, r1
 800bb1a:	f7f4 fc73 	bl	8000404 <__aeabi_i2d>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb24:	4b2e      	ldr	r3, [pc, #184]	@ (800bbe0 <__ieee754_pow+0x780>)
 800bb26:	4413      	add	r3, r2
 800bb28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb2c:	4652      	mov	r2, sl
 800bb2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb32:	465b      	mov	r3, fp
 800bb34:	f7f4 fb1a 	bl	800016c <__adddf3>
 800bb38:	4642      	mov	r2, r8
 800bb3a:	464b      	mov	r3, r9
 800bb3c:	f7f4 fb16 	bl	800016c <__adddf3>
 800bb40:	4632      	mov	r2, r6
 800bb42:	463b      	mov	r3, r7
 800bb44:	f7f4 fb12 	bl	800016c <__adddf3>
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	460d      	mov	r5, r1
 800bb50:	f7f4 fb0a 	bl	8000168 <__aeabi_dsub>
 800bb54:	4642      	mov	r2, r8
 800bb56:	464b      	mov	r3, r9
 800bb58:	f7f4 fb06 	bl	8000168 <__aeabi_dsub>
 800bb5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb60:	f7f4 fb02 	bl	8000168 <__aeabi_dsub>
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4650      	mov	r0, sl
 800bb6a:	4659      	mov	r1, fp
 800bb6c:	e61c      	b.n	800b7a8 <__ieee754_pow+0x348>
 800bb6e:	2400      	movs	r4, #0
 800bb70:	e68a      	b.n	800b888 <__ieee754_pow+0x428>
 800bb72:	2601      	movs	r6, #1
 800bb74:	e6a0      	b.n	800b8b8 <__ieee754_pow+0x458>
 800bb76:	bf00      	nop
 800bb78:	4a454eef 	.word	0x4a454eef
 800bb7c:	3fca7e28 	.word	0x3fca7e28
 800bb80:	93c9db65 	.word	0x93c9db65
 800bb84:	3fcd864a 	.word	0x3fcd864a
 800bb88:	a91d4101 	.word	0xa91d4101
 800bb8c:	3fd17460 	.word	0x3fd17460
 800bb90:	518f264d 	.word	0x518f264d
 800bb94:	3fd55555 	.word	0x3fd55555
 800bb98:	db6fabff 	.word	0xdb6fabff
 800bb9c:	3fdb6db6 	.word	0x3fdb6db6
 800bba0:	33333303 	.word	0x33333303
 800bba4:	3fe33333 	.word	0x3fe33333
 800bba8:	e0000000 	.word	0xe0000000
 800bbac:	3feec709 	.word	0x3feec709
 800bbb0:	dc3a03fd 	.word	0xdc3a03fd
 800bbb4:	3feec709 	.word	0x3feec709
 800bbb8:	145b01f5 	.word	0x145b01f5
 800bbbc:	be3e2fe0 	.word	0xbe3e2fe0
 800bbc0:	7ff00000 	.word	0x7ff00000
 800bbc4:	43400000 	.word	0x43400000
 800bbc8:	0003988e 	.word	0x0003988e
 800bbcc:	000bb679 	.word	0x000bb679
 800bbd0:	0800d900 	.word	0x0800d900
 800bbd4:	3ff00000 	.word	0x3ff00000
 800bbd8:	40080000 	.word	0x40080000
 800bbdc:	0800d8e0 	.word	0x0800d8e0
 800bbe0:	0800d8f0 	.word	0x0800d8f0
 800bbe4:	a39a      	add	r3, pc, #616	@ (adr r3, 800be50 <__ieee754_pow+0x9f0>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	f7f4 fabd 	bl	800016c <__adddf3>
 800bbf2:	4642      	mov	r2, r8
 800bbf4:	e9cd 0100 	strd	r0, r1, [sp]
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	f7f4 fab3 	bl	8000168 <__aeabi_dsub>
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc0a:	f7f4 fef5 	bl	80009f8 <__aeabi_dcmpgt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f47f ae0c 	bne.w	800b82c <__ieee754_pow+0x3cc>
 800bc14:	4ba0      	ldr	r3, [pc, #640]	@ (800be98 <__ieee754_pow+0xa38>)
 800bc16:	e022      	b.n	800bc5e <__ieee754_pow+0x7fe>
 800bc18:	4ca0      	ldr	r4, [pc, #640]	@ (800be9c <__ieee754_pow+0xa3c>)
 800bc1a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bc1e:	42a3      	cmp	r3, r4
 800bc20:	d919      	bls.n	800bc56 <__ieee754_pow+0x7f6>
 800bc22:	4b9f      	ldr	r3, [pc, #636]	@ (800bea0 <__ieee754_pow+0xa40>)
 800bc24:	440b      	add	r3, r1
 800bc26:	4303      	orrs	r3, r0
 800bc28:	d009      	beq.n	800bc3e <__ieee754_pow+0x7de>
 800bc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	2300      	movs	r3, #0
 800bc32:	f7f4 fec3 	bl	80009bc <__aeabi_dcmplt>
 800bc36:	3800      	subs	r0, #0
 800bc38:	bf18      	it	ne
 800bc3a:	2001      	movne	r0, #1
 800bc3c:	e527      	b.n	800b68e <__ieee754_pow+0x22e>
 800bc3e:	4642      	mov	r2, r8
 800bc40:	464b      	mov	r3, r9
 800bc42:	f7f4 fa91 	bl	8000168 <__aeabi_dsub>
 800bc46:	4632      	mov	r2, r6
 800bc48:	463b      	mov	r3, r7
 800bc4a:	f7f4 fecb 	bl	80009e4 <__aeabi_dcmpge>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d1eb      	bne.n	800bc2a <__ieee754_pow+0x7ca>
 800bc52:	4b94      	ldr	r3, [pc, #592]	@ (800bea4 <__ieee754_pow+0xa44>)
 800bc54:	e003      	b.n	800bc5e <__ieee754_pow+0x7fe>
 800bc56:	4a94      	ldr	r2, [pc, #592]	@ (800bea8 <__ieee754_pow+0xa48>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	f240 80e1 	bls.w	800be20 <__ieee754_pow+0x9c0>
 800bc5e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800bc62:	151b      	asrs	r3, r3, #20
 800bc64:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800bc68:	fa4a fa03 	asr.w	sl, sl, r3
 800bc6c:	44da      	add	sl, fp
 800bc6e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bc72:	488e      	ldr	r0, [pc, #568]	@ (800beac <__ieee754_pow+0xa4c>)
 800bc74:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bc78:	4108      	asrs	r0, r1
 800bc7a:	ea00 030a 	and.w	r3, r0, sl
 800bc7e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bc82:	f1c1 0114 	rsb	r1, r1, #20
 800bc86:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	fa4a fa01 	asr.w	sl, sl, r1
 800bc90:	f1bb 0f00 	cmp.w	fp, #0
 800bc94:	4649      	mov	r1, r9
 800bc96:	f04f 0200 	mov.w	r2, #0
 800bc9a:	bfb8      	it	lt
 800bc9c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bca0:	f7f4 fa62 	bl	8000168 <__aeabi_dsub>
 800bca4:	4680      	mov	r8, r0
 800bca6:	4689      	mov	r9, r1
 800bca8:	2400      	movs	r4, #0
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	f7f4 fa5b 	bl	800016c <__adddf3>
 800bcb6:	a368      	add	r3, pc, #416	@ (adr r3, 800be58 <__ieee754_pow+0x9f8>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	460d      	mov	r5, r1
 800bcc0:	f7f4 fc0a 	bl	80004d8 <__aeabi_dmul>
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	e9cd 0100 	strd	r0, r1, [sp]
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fa4a 	bl	8000168 <__aeabi_dsub>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fa44 	bl	8000168 <__aeabi_dsub>
 800bce0:	a35f      	add	r3, pc, #380	@ (adr r3, 800be60 <__ieee754_pow+0xa00>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f7f4 fbf7 	bl	80004d8 <__aeabi_dmul>
 800bcea:	a35f      	add	r3, pc, #380	@ (adr r3, 800be68 <__ieee754_pow+0xa08>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	4689      	mov	r9, r1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 fbee 	bl	80004d8 <__aeabi_dmul>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4640      	mov	r0, r8
 800bd02:	4649      	mov	r1, r9
 800bd04:	f7f4 fa32 	bl	800016c <__adddf3>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd14:	f7f4 fa2a 	bl	800016c <__adddf3>
 800bd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	f7f4 fa22 	bl	8000168 <__aeabi_dsub>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fa1c 	bl	8000168 <__aeabi_dsub>
 800bd30:	4642      	mov	r2, r8
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	464b      	mov	r3, r9
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 fbcc 	bl	80004d8 <__aeabi_dmul>
 800bd40:	a34b      	add	r3, pc, #300	@ (adr r3, 800be70 <__ieee754_pow+0xa10>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	f7f4 fbc5 	bl	80004d8 <__aeabi_dmul>
 800bd4e:	a34a      	add	r3, pc, #296	@ (adr r3, 800be78 <__ieee754_pow+0xa18>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fa08 	bl	8000168 <__aeabi_dsub>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	f7f4 fbbc 	bl	80004d8 <__aeabi_dmul>
 800bd60:	a347      	add	r3, pc, #284	@ (adr r3, 800be80 <__ieee754_pow+0xa20>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fa01 	bl	800016c <__adddf3>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fbb3 	bl	80004d8 <__aeabi_dmul>
 800bd72:	a345      	add	r3, pc, #276	@ (adr r3, 800be88 <__ieee754_pow+0xa28>)
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 f9f6 	bl	8000168 <__aeabi_dsub>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fbaa 	bl	80004d8 <__aeabi_dmul>
 800bd84:	a342      	add	r3, pc, #264	@ (adr r3, 800be90 <__ieee754_pow+0xa30>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 f9ef 	bl	800016c <__adddf3>
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	f7f4 fba1 	bl	80004d8 <__aeabi_dmul>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f7f4 f9e3 	bl	8000168 <__aeabi_dsub>
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fb93 	bl	80004d8 <__aeabi_dmul>
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	e9cd 0100 	strd	r0, r1, [sp]
 800bdb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 f9d2 	bl	8000168 <__aeabi_dsub>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdcc:	f7f4 fcae 	bl	800072c <__aeabi_ddiv>
 800bdd0:	4632      	mov	r2, r6
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fb7c 	bl	80004d8 <__aeabi_dmul>
 800bde0:	4632      	mov	r2, r6
 800bde2:	463b      	mov	r3, r7
 800bde4:	f7f4 f9c2 	bl	800016c <__adddf3>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 f9ba 	bl	8000168 <__aeabi_dsub>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	f7f4 f9b6 	bl	8000168 <__aeabi_dsub>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	2000      	movs	r0, #0
 800be02:	492b      	ldr	r1, [pc, #172]	@ (800beb0 <__ieee754_pow+0xa50>)
 800be04:	f7f4 f9b0 	bl	8000168 <__aeabi_dsub>
 800be08:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800be0c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800be10:	da09      	bge.n	800be26 <__ieee754_pow+0x9c6>
 800be12:	4652      	mov	r2, sl
 800be14:	f000 f854 	bl	800bec0 <scalbn>
 800be18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be1c:	f7ff bb89 	b.w	800b532 <__ieee754_pow+0xd2>
 800be20:	f8dd a010 	ldr.w	sl, [sp, #16]
 800be24:	e740      	b.n	800bca8 <__ieee754_pow+0x848>
 800be26:	4621      	mov	r1, r4
 800be28:	e7f6      	b.n	800be18 <__ieee754_pow+0x9b8>
 800be2a:	2000      	movs	r0, #0
 800be2c:	4920      	ldr	r1, [pc, #128]	@ (800beb0 <__ieee754_pow+0xa50>)
 800be2e:	f7ff bb35 	b.w	800b49c <__ieee754_pow+0x3c>
 800be32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be36:	f7ff bb31 	b.w	800b49c <__ieee754_pow+0x3c>
 800be3a:	4650      	mov	r0, sl
 800be3c:	4659      	mov	r1, fp
 800be3e:	f7ff bb2d 	b.w	800b49c <__ieee754_pow+0x3c>
 800be42:	460c      	mov	r4, r1
 800be44:	f7ff bb87 	b.w	800b556 <__ieee754_pow+0xf6>
 800be48:	2400      	movs	r4, #0
 800be4a:	f7ff bb69 	b.w	800b520 <__ieee754_pow+0xc0>
 800be4e:	bf00      	nop
 800be50:	652b82fe 	.word	0x652b82fe
 800be54:	3c971547 	.word	0x3c971547
 800be58:	00000000 	.word	0x00000000
 800be5c:	3fe62e43 	.word	0x3fe62e43
 800be60:	fefa39ef 	.word	0xfefa39ef
 800be64:	3fe62e42 	.word	0x3fe62e42
 800be68:	0ca86c39 	.word	0x0ca86c39
 800be6c:	be205c61 	.word	0xbe205c61
 800be70:	72bea4d0 	.word	0x72bea4d0
 800be74:	3e663769 	.word	0x3e663769
 800be78:	c5d26bf1 	.word	0xc5d26bf1
 800be7c:	3ebbbd41 	.word	0x3ebbbd41
 800be80:	af25de2c 	.word	0xaf25de2c
 800be84:	3f11566a 	.word	0x3f11566a
 800be88:	16bebd93 	.word	0x16bebd93
 800be8c:	3f66c16c 	.word	0x3f66c16c
 800be90:	5555553e 	.word	0x5555553e
 800be94:	3fc55555 	.word	0x3fc55555
 800be98:	40900000 	.word	0x40900000
 800be9c:	4090cbff 	.word	0x4090cbff
 800bea0:	3f6f3400 	.word	0x3f6f3400
 800bea4:	4090cc00 	.word	0x4090cc00
 800bea8:	3fe00000 	.word	0x3fe00000
 800beac:	fff00000 	.word	0xfff00000
 800beb0:	3ff00000 	.word	0x3ff00000

0800beb4 <fabs>:
 800beb4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800beb8:	4619      	mov	r1, r3
 800beba:	4770      	bx	lr
 800bebc:	0000      	movs	r0, r0
	...

0800bec0 <scalbn>:
 800bec0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bec4:	4616      	mov	r6, r2
 800bec6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800beca:	4683      	mov	fp, r0
 800becc:	468c      	mov	ip, r1
 800bece:	460b      	mov	r3, r1
 800bed0:	b982      	cbnz	r2, 800bef4 <scalbn+0x34>
 800bed2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bed6:	4303      	orrs	r3, r0
 800bed8:	d035      	beq.n	800bf46 <scalbn+0x86>
 800beda:	4b2d      	ldr	r3, [pc, #180]	@ (800bf90 <scalbn+0xd0>)
 800bedc:	2200      	movs	r2, #0
 800bede:	f7f4 fafb 	bl	80004d8 <__aeabi_dmul>
 800bee2:	4b2c      	ldr	r3, [pc, #176]	@ (800bf94 <scalbn+0xd4>)
 800bee4:	4683      	mov	fp, r0
 800bee6:	429e      	cmp	r6, r3
 800bee8:	468c      	mov	ip, r1
 800beea:	da0d      	bge.n	800bf08 <scalbn+0x48>
 800beec:	a324      	add	r3, pc, #144	@ (adr r3, 800bf80 <scalbn+0xc0>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	e019      	b.n	800bf28 <scalbn+0x68>
 800bef4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bef8:	42ba      	cmp	r2, r7
 800befa:	d109      	bne.n	800bf10 <scalbn+0x50>
 800befc:	4602      	mov	r2, r0
 800befe:	f7f4 f935 	bl	800016c <__adddf3>
 800bf02:	4683      	mov	fp, r0
 800bf04:	468c      	mov	ip, r1
 800bf06:	e01e      	b.n	800bf46 <scalbn+0x86>
 800bf08:	460b      	mov	r3, r1
 800bf0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf0e:	3a36      	subs	r2, #54	@ 0x36
 800bf10:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bf14:	428e      	cmp	r6, r1
 800bf16:	dd0a      	ble.n	800bf2e <scalbn+0x6e>
 800bf18:	a31b      	add	r3, pc, #108	@ (adr r3, 800bf88 <scalbn+0xc8>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	4665      	mov	r5, ip
 800bf20:	f363 051e 	bfi	r5, r3, #0, #31
 800bf24:	4629      	mov	r1, r5
 800bf26:	481c      	ldr	r0, [pc, #112]	@ (800bf98 <scalbn+0xd8>)
 800bf28:	f7f4 fad6 	bl	80004d8 <__aeabi_dmul>
 800bf2c:	e7e9      	b.n	800bf02 <scalbn+0x42>
 800bf2e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bf32:	4432      	add	r2, r6
 800bf34:	428a      	cmp	r2, r1
 800bf36:	dcef      	bgt.n	800bf18 <scalbn+0x58>
 800bf38:	2a00      	cmp	r2, #0
 800bf3a:	dd08      	ble.n	800bf4e <scalbn+0x8e>
 800bf3c:	f36f 531e 	bfc	r3, #20, #11
 800bf40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf44:	46ac      	mov	ip, r5
 800bf46:	4658      	mov	r0, fp
 800bf48:	4661      	mov	r1, ip
 800bf4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800bf4e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bf52:	da09      	bge.n	800bf68 <scalbn+0xa8>
 800bf54:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800bf58:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800bf5c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800bf60:	480e      	ldr	r0, [pc, #56]	@ (800bf9c <scalbn+0xdc>)
 800bf62:	f041 011f 	orr.w	r1, r1, #31
 800bf66:	e7c1      	b.n	800beec <scalbn+0x2c>
 800bf68:	3236      	adds	r2, #54	@ 0x36
 800bf6a:	f36f 531e 	bfc	r3, #20, #11
 800bf6e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf72:	4658      	mov	r0, fp
 800bf74:	4629      	mov	r1, r5
 800bf76:	2200      	movs	r2, #0
 800bf78:	4b09      	ldr	r3, [pc, #36]	@ (800bfa0 <scalbn+0xe0>)
 800bf7a:	e7d5      	b.n	800bf28 <scalbn+0x68>
 800bf7c:	f3af 8000 	nop.w
 800bf80:	c2f8f359 	.word	0xc2f8f359
 800bf84:	01a56e1f 	.word	0x01a56e1f
 800bf88:	8800759c 	.word	0x8800759c
 800bf8c:	7e37e43c 	.word	0x7e37e43c
 800bf90:	43500000 	.word	0x43500000
 800bf94:	ffff3cb0 	.word	0xffff3cb0
 800bf98:	8800759c 	.word	0x8800759c
 800bf9c:	c2f8f359 	.word	0xc2f8f359
 800bfa0:	3c900000 	.word	0x3c900000

0800bfa4 <with_errno>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	4616      	mov	r6, r2
 800bfac:	f7fe fd64 	bl	800aa78 <__errno>
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	6006      	str	r6, [r0, #0]
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}

0800bfb8 <xflow>:
 800bfb8:	b513      	push	{r0, r1, r4, lr}
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	b10c      	cbz	r4, 800bfc6 <xflow+0xe>
 800bfc2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bfc6:	e9cd 2300 	strd	r2, r3, [sp]
 800bfca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfce:	f7f4 fa83 	bl	80004d8 <__aeabi_dmul>
 800bfd2:	2222      	movs	r2, #34	@ 0x22
 800bfd4:	b002      	add	sp, #8
 800bfd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfda:	f7ff bfe3 	b.w	800bfa4 <with_errno>

0800bfde <__math_uflow>:
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bfe4:	f7ff bfe8 	b.w	800bfb8 <xflow>

0800bfe8 <__math_oflow>:
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800bfee:	f7ff bfe3 	b.w	800bfb8 <xflow>
	...

0800bff4 <__ieee754_sqrt>:
 800bff4:	4a65      	ldr	r2, [pc, #404]	@ (800c18c <__ieee754_sqrt+0x198>)
 800bff6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffa:	438a      	bics	r2, r1
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	460b      	mov	r3, r1
 800c002:	4604      	mov	r4, r0
 800c004:	d10e      	bne.n	800c024 <__ieee754_sqrt+0x30>
 800c006:	4602      	mov	r2, r0
 800c008:	f7f4 fa66 	bl	80004d8 <__aeabi_dmul>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4630      	mov	r0, r6
 800c012:	4639      	mov	r1, r7
 800c014:	f7f4 f8aa 	bl	800016c <__adddf3>
 800c018:	4606      	mov	r6, r0
 800c01a:	460f      	mov	r7, r1
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	2900      	cmp	r1, #0
 800c026:	dc0c      	bgt.n	800c042 <__ieee754_sqrt+0x4e>
 800c028:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c02c:	4302      	orrs	r2, r0
 800c02e:	d0f5      	beq.n	800c01c <__ieee754_sqrt+0x28>
 800c030:	b189      	cbz	r1, 800c056 <__ieee754_sqrt+0x62>
 800c032:	4602      	mov	r2, r0
 800c034:	f7f4 f898 	bl	8000168 <__aeabi_dsub>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	f7f4 fb76 	bl	800072c <__aeabi_ddiv>
 800c040:	e7ea      	b.n	800c018 <__ieee754_sqrt+0x24>
 800c042:	150a      	asrs	r2, r1, #20
 800c044:	d115      	bne.n	800c072 <__ieee754_sqrt+0x7e>
 800c046:	2100      	movs	r1, #0
 800c048:	e009      	b.n	800c05e <__ieee754_sqrt+0x6a>
 800c04a:	0ae3      	lsrs	r3, r4, #11
 800c04c:	3a15      	subs	r2, #21
 800c04e:	0564      	lsls	r4, r4, #21
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0fa      	beq.n	800c04a <__ieee754_sqrt+0x56>
 800c054:	e7f7      	b.n	800c046 <__ieee754_sqrt+0x52>
 800c056:	460a      	mov	r2, r1
 800c058:	e7fa      	b.n	800c050 <__ieee754_sqrt+0x5c>
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	3101      	adds	r1, #1
 800c05e:	02d8      	lsls	r0, r3, #11
 800c060:	d5fb      	bpl.n	800c05a <__ieee754_sqrt+0x66>
 800c062:	1e48      	subs	r0, r1, #1
 800c064:	1a12      	subs	r2, r2, r0
 800c066:	f1c1 0020 	rsb	r0, r1, #32
 800c06a:	fa24 f000 	lsr.w	r0, r4, r0
 800c06e:	4303      	orrs	r3, r0
 800c070:	408c      	lsls	r4, r1
 800c072:	2700      	movs	r7, #0
 800c074:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800c078:	2116      	movs	r1, #22
 800c07a:	07d2      	lsls	r2, r2, #31
 800c07c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c080:	463a      	mov	r2, r7
 800c082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c08a:	bf5c      	itt	pl
 800c08c:	005b      	lslpl	r3, r3, #1
 800c08e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c092:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c096:	bf58      	it	pl
 800c098:	0064      	lslpl	r4, r4, #1
 800c09a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c09e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0a2:	0064      	lsls	r4, r4, #1
 800c0a4:	1815      	adds	r5, r2, r0
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	bfde      	ittt	le
 800c0aa:	182a      	addle	r2, r5, r0
 800c0ac:	1b5b      	suble	r3, r3, r5
 800c0ae:	183f      	addle	r7, r7, r0
 800c0b0:	0fe5      	lsrs	r5, r4, #31
 800c0b2:	3901      	subs	r1, #1
 800c0b4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c0b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c0bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c0c0:	d1f0      	bne.n	800c0a4 <__ieee754_sqrt+0xb0>
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	2620      	movs	r6, #32
 800c0c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	eb00 0c01 	add.w	ip, r0, r1
 800c0d0:	dc02      	bgt.n	800c0d8 <__ieee754_sqrt+0xe4>
 800c0d2:	d113      	bne.n	800c0fc <__ieee754_sqrt+0x108>
 800c0d4:	45a4      	cmp	ip, r4
 800c0d6:	d811      	bhi.n	800c0fc <__ieee754_sqrt+0x108>
 800c0d8:	f1bc 0f00 	cmp.w	ip, #0
 800c0dc:	eb0c 0100 	add.w	r1, ip, r0
 800c0e0:	da3e      	bge.n	800c160 <__ieee754_sqrt+0x16c>
 800c0e2:	2900      	cmp	r1, #0
 800c0e4:	db3c      	blt.n	800c160 <__ieee754_sqrt+0x16c>
 800c0e6:	f102 0e01 	add.w	lr, r2, #1
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	4672      	mov	r2, lr
 800c0ee:	45a4      	cmp	ip, r4
 800c0f0:	bf88      	it	hi
 800c0f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c0f6:	eba4 040c 	sub.w	r4, r4, ip
 800c0fa:	4405      	add	r5, r0
 800c0fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c100:	3e01      	subs	r6, #1
 800c102:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c106:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c10a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c10e:	d1dc      	bne.n	800c0ca <__ieee754_sqrt+0xd6>
 800c110:	431c      	orrs	r4, r3
 800c112:	d01a      	beq.n	800c14a <__ieee754_sqrt+0x156>
 800c114:	4c1e      	ldr	r4, [pc, #120]	@ (800c190 <__ieee754_sqrt+0x19c>)
 800c116:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c194 <__ieee754_sqrt+0x1a0>
 800c11a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c11e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c122:	f7f4 f821 	bl	8000168 <__aeabi_dsub>
 800c126:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4650      	mov	r0, sl
 800c130:	4659      	mov	r1, fp
 800c132:	f7f4 fc4d 	bl	80009d0 <__aeabi_dcmple>
 800c136:	b140      	cbz	r0, 800c14a <__ieee754_sqrt+0x156>
 800c138:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c13c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c140:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c144:	d10e      	bne.n	800c164 <__ieee754_sqrt+0x170>
 800c146:	4635      	mov	r5, r6
 800c148:	3701      	adds	r7, #1
 800c14a:	107b      	asrs	r3, r7, #1
 800c14c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c150:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c154:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800c158:	086b      	lsrs	r3, r5, #1
 800c15a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800c15e:	e75b      	b.n	800c018 <__ieee754_sqrt+0x24>
 800c160:	4696      	mov	lr, r2
 800c162:	e7c2      	b.n	800c0ea <__ieee754_sqrt+0xf6>
 800c164:	f7f4 f802 	bl	800016c <__adddf3>
 800c168:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	4650      	mov	r0, sl
 800c172:	4659      	mov	r1, fp
 800c174:	f7f4 fc22 	bl	80009bc <__aeabi_dcmplt>
 800c178:	b120      	cbz	r0, 800c184 <__ieee754_sqrt+0x190>
 800c17a:	1cab      	adds	r3, r5, #2
 800c17c:	bf08      	it	eq
 800c17e:	3701      	addeq	r7, #1
 800c180:	3502      	adds	r5, #2
 800c182:	e7e2      	b.n	800c14a <__ieee754_sqrt+0x156>
 800c184:	1c6b      	adds	r3, r5, #1
 800c186:	f023 0501 	bic.w	r5, r3, #1
 800c18a:	e7de      	b.n	800c14a <__ieee754_sqrt+0x156>
 800c18c:	7ff00000 	.word	0x7ff00000
 800c190:	0800d918 	.word	0x0800d918
 800c194:	0800d910 	.word	0x0800d910

0800c198 <_init>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	bf00      	nop
 800c19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19e:	bc08      	pop	{r3}
 800c1a0:	469e      	mov	lr, r3
 800c1a2:	4770      	bx	lr

0800c1a4 <_fini>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr
