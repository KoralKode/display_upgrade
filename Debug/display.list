
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017b0  08015ee8  08015ee8  00016ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017698  08017698  0001922c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017698  08017698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176a0  080176a0  0001922c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176a0  080176a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080176a4  080176a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  080176a8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000230  080178d4  00019230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e60  080178d4  00019e60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001922c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddf5  00000000  00000000  00019255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000523c  00000000  00000000  0003704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e7  00000000  00000000  0003e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd25  00000000  00000000  0003f70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f35  00000000  00000000  0005c434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009978e  00000000  00000000  00080369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086c8  00000000  00000000  00119b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00122204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08015ed0 	.word	0x08015ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08015ed0 	.word	0x08015ed0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_ldivmod>:
 8000a88:	b97b      	cbnz	r3, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8a:	b972      	cbnz	r2, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bfbe      	ittt	lt
 8000a90:	2000      	movlt	r0, #0
 8000a92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a96:	e006      	blt.n	8000aa6 <__aeabi_ldivmod+0x1e>
 8000a98:	bf08      	it	eq
 8000a9a:	2800      	cmpeq	r0, #0
 8000a9c:	bf1c      	itt	ne
 8000a9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aa2:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa6:	f000 b9d7 	b.w	8000e58 <__aeabi_idiv0>
 8000aaa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	db09      	blt.n	8000aca <__aeabi_ldivmod+0x42>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db1a      	blt.n	8000af0 <__aeabi_ldivmod+0x68>
 8000aba:	f000 f84d 	bl	8000b58 <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4770      	bx	lr
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db1b      	blt.n	8000b0c <__aeabi_ldivmod+0x84>
 8000ad4:	f000 f840 	bl	8000b58 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	4252      	negs	r2, r2
 8000aea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aee:	4770      	bx	lr
 8000af0:	4252      	negs	r2, r2
 8000af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af6:	f000 f82f 	bl	8000b58 <__udivmoddi4>
 8000afa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b02:	b004      	add	sp, #16
 8000b04:	4240      	negs	r0, r0
 8000b06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0a:	4770      	bx	lr
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	f000 f821 	bl	8000b58 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4252      	negs	r2, r2
 8000b22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b98c 	b.w	8000e58 <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9d08      	ldr	r5, [sp, #32]
 8000b5e:	468e      	mov	lr, r1
 8000b60:	4604      	mov	r4, r0
 8000b62:	4688      	mov	r8, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14a      	bne.n	8000bfe <__udivmoddi4+0xa6>
 8000b68:	428a      	cmp	r2, r1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	d962      	bls.n	8000c34 <__udivmoddi4+0xdc>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	b14e      	cbz	r6, 8000b88 <__udivmoddi4+0x30>
 8000b74:	f1c6 0320 	rsb	r3, r6, #32
 8000b78:	fa01 f806 	lsl.w	r8, r1, r6
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	40b7      	lsls	r7, r6
 8000b82:	ea43 0808 	orr.w	r8, r3, r8
 8000b86:	40b4      	lsls	r4, r6
 8000b88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b90:	fa1f fc87 	uxth.w	ip, r7
 8000b94:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b98:	fb01 f20c 	mul.w	r2, r1, ip
 8000b9c:	0c23      	lsrs	r3, r4, #16
 8000b9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x62>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bac:	f080 80eb 	bcs.w	8000d86 <__udivmoddi4+0x22e>
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f240 80e8 	bls.w	8000d86 <__udivmoddi4+0x22e>
 8000bb6:	3902      	subs	r1, #2
 8000bb8:	443b      	add	r3, r7
 8000bba:	1a9a      	subs	r2, r3, r2
 8000bbc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc8:	b2a3      	uxth	r3, r4
 8000bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bce:	459c      	cmp	ip, r3
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0x8e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	f080 80d7 	bcs.w	8000d8a <__udivmoddi4+0x232>
 8000bdc:	459c      	cmp	ip, r3
 8000bde:	f240 80d4 	bls.w	8000d8a <__udivmoddi4+0x232>
 8000be2:	443b      	add	r3, r7
 8000be4:	3802      	subs	r0, #2
 8000be6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bea:	2100      	movs	r1, #0
 8000bec:	eba3 030c 	sub.w	r3, r3, ip
 8000bf0:	b11d      	cbz	r5, 8000bfa <__udivmoddi4+0xa2>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	40f3      	lsrs	r3, r6
 8000bf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d905      	bls.n	8000c0e <__udivmoddi4+0xb6>
 8000c02:	b10d      	cbz	r5, 8000c08 <__udivmoddi4+0xb0>
 8000c04:	e9c5 0100 	strd	r0, r1, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e7f5      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000c0e:	fab3 f183 	clz	r1, r3
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d146      	bne.n	8000ca4 <__udivmoddi4+0x14c>
 8000c16:	4573      	cmp	r3, lr
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xc8>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 8108 	bhi.w	8000e30 <__udivmoddi4+0x2d8>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	4690      	mov	r8, r2
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e5      	beq.n	8000bfa <__udivmoddi4+0xa2>
 8000c2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c32:	e7e2      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f000 8091 	beq.w	8000d5c <__udivmoddi4+0x204>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f040 80a5 	bne.w	8000d8e <__udivmoddi4+0x236>
 8000c44:	1a8a      	subs	r2, r1, r2
 8000c46:	2101      	movs	r1, #1
 8000c48:	0c03      	lsrs	r3, r0, #16
 8000c4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4e:	b280      	uxth	r0, r0
 8000c50:	b2bc      	uxth	r4, r7
 8000c52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x11e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x11c>
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f200 80e3 	bhi.w	8000e3a <__udivmoddi4+0x2e2>
 8000c74:	46c4      	mov	ip, r8
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c80:	fb02 f404 	mul.w	r4, r2, r4
 8000c84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x144>
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x142>
 8000c94:	429c      	cmp	r4, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2dc>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ca2:	e7a5      	b.n	8000bf0 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0620 	rsb	r6, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cae:	431f      	orrs	r7, r3
 8000cb0:	fa2e fa06 	lsr.w	sl, lr, r6
 8000cb4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cb8:	fbba f8f9 	udiv	r8, sl, r9
 8000cbc:	fa0e fe01 	lsl.w	lr, lr, r1
 8000cc0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cc4:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	ea43 030e 	orr.w	r3, r3, lr
 8000cd0:	fa00 fe01 	lsl.w	lr, r0, r1
 8000cd4:	fb08 f00c 	mul.w	r0, r8, ip
 8000cd8:	0c1c      	lsrs	r4, r3, #16
 8000cda:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cde:	42a0      	cmp	r0, r4
 8000ce0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x1a4>
 8000ce6:	193c      	adds	r4, r7, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 809e 	bcs.w	8000e2c <__udivmoddi4+0x2d4>
 8000cf0:	42a0      	cmp	r0, r4
 8000cf2:	f240 809b 	bls.w	8000e2c <__udivmoddi4+0x2d4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	1a24      	subs	r4, r4, r0
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d10:	45a4      	cmp	ip, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1d0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d1a:	f080 8085 	bcs.w	8000e28 <__udivmoddi4+0x2d0>
 8000d1e:	45a4      	cmp	ip, r4
 8000d20:	f240 8082 	bls.w	8000e28 <__udivmoddi4+0x2d0>
 8000d24:	3b02      	subs	r3, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	fba0 8c02 	umull	r8, ip, r0, r2
 8000d34:	4564      	cmp	r4, ip
 8000d36:	4643      	mov	r3, r8
 8000d38:	46e1      	mov	r9, ip
 8000d3a:	d364      	bcc.n	8000e06 <__udivmoddi4+0x2ae>
 8000d3c:	d061      	beq.n	8000e02 <__udivmoddi4+0x2aa>
 8000d3e:	b15d      	cbz	r5, 8000d58 <__udivmoddi4+0x200>
 8000d40:	ebbe 0203 	subs.w	r2, lr, r3
 8000d44:	eb64 0409 	sbc.w	r4, r4, r9
 8000d48:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4c:	fa22 f301 	lsr.w	r3, r2, r1
 8000d50:	431e      	orrs	r6, r3
 8000d52:	40cc      	lsrs	r4, r1
 8000d54:	e9c5 6400 	strd	r6, r4, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e74e      	b.n	8000bfa <__udivmoddi4+0xa2>
 8000d5c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d60:	0c01      	lsrs	r1, r0, #16
 8000d62:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d66:	b280      	uxth	r0, r0
 8000d68:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d72:	4638      	mov	r0, r7
 8000d74:	463c      	mov	r4, r7
 8000d76:	46b8      	mov	r8, r7
 8000d78:	46be      	mov	lr, r7
 8000d7a:	2620      	movs	r6, #32
 8000d7c:	eba2 0208 	sub.w	r2, r2, r8
 8000d80:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d84:	e765      	b.n	8000c52 <__udivmoddi4+0xfa>
 8000d86:	4601      	mov	r1, r0
 8000d88:	e717      	b.n	8000bba <__udivmoddi4+0x62>
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	e72b      	b.n	8000be6 <__udivmoddi4+0x8e>
 8000d8e:	f1c6 0120 	rsb	r1, r6, #32
 8000d92:	fa2e fc01 	lsr.w	ip, lr, r1
 8000d96:	40b7      	lsls	r7, r6
 8000d98:	fa0e fe06 	lsl.w	lr, lr, r6
 8000d9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000da0:	ea41 010e 	orr.w	r1, r1, lr
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fbbc f8fe 	udiv	r8, ip, lr
 8000dac:	b2bc      	uxth	r4, r7
 8000dae:	fb0e cc18 	mls	ip, lr, r8, ip
 8000db2:	fb08 f904 	mul.w	r9, r8, r4
 8000db6:	0c0a      	lsrs	r2, r1, #16
 8000db8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000dbc:	40b0      	lsls	r0, r6
 8000dbe:	4591      	cmp	r9, r2
 8000dc0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dc4:	b280      	uxth	r0, r0
 8000dc6:	d93e      	bls.n	8000e46 <__udivmoddi4+0x2ee>
 8000dc8:	18ba      	adds	r2, r7, r2
 8000dca:	f108 3cff 	add.w	ip, r8, #4294967295
 8000dce:	d201      	bcs.n	8000dd4 <__udivmoddi4+0x27c>
 8000dd0:	4591      	cmp	r9, r2
 8000dd2:	d81f      	bhi.n	8000e14 <__udivmoddi4+0x2bc>
 8000dd4:	eba2 0209 	sub.w	r2, r2, r9
 8000dd8:	fbb2 f9fe 	udiv	r9, r2, lr
 8000ddc:	fb09 f804 	mul.w	r8, r9, r4
 8000de0:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000de4:	b28a      	uxth	r2, r1
 8000de6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000dea:	4542      	cmp	r2, r8
 8000dec:	d229      	bcs.n	8000e42 <__udivmoddi4+0x2ea>
 8000dee:	18ba      	adds	r2, r7, r2
 8000df0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000df4:	d2c2      	bcs.n	8000d7c <__udivmoddi4+0x224>
 8000df6:	4542      	cmp	r2, r8
 8000df8:	d2c0      	bcs.n	8000d7c <__udivmoddi4+0x224>
 8000dfa:	f1a9 0102 	sub.w	r1, r9, #2
 8000dfe:	443a      	add	r2, r7
 8000e00:	e7bc      	b.n	8000d7c <__udivmoddi4+0x224>
 8000e02:	45c6      	cmp	lr, r8
 8000e04:	d29b      	bcs.n	8000d3e <__udivmoddi4+0x1e6>
 8000e06:	ebb8 0302 	subs.w	r3, r8, r2
 8000e0a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	46e1      	mov	r9, ip
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e6>
 8000e14:	eba7 0909 	sub.w	r9, r7, r9
 8000e18:	444a      	add	r2, r9
 8000e1a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e1e:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e22:	fb09 f804 	mul.w	r8, r9, r4
 8000e26:	e7db      	b.n	8000de0 <__udivmoddi4+0x288>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	e77d      	b.n	8000d28 <__udivmoddi4+0x1d0>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e765      	b.n	8000cfc <__udivmoddi4+0x1a4>
 8000e30:	4608      	mov	r0, r1
 8000e32:	e6fa      	b.n	8000c2a <__udivmoddi4+0xd2>
 8000e34:	443b      	add	r3, r7
 8000e36:	3a02      	subs	r2, #2
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x144>
 8000e3a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	e719      	b.n	8000c76 <__udivmoddi4+0x11e>
 8000e42:	4649      	mov	r1, r9
 8000e44:	e79a      	b.n	8000d7c <__udivmoddi4+0x224>
 8000e46:	eba2 0209 	sub.w	r2, r2, r9
 8000e4a:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e4e:	46c4      	mov	ip, r8
 8000e50:	fb09 f804 	mul.w	r8, r9, r4
 8000e54:	e7c4      	b.n	8000de0 <__udivmoddi4+0x288>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <set_freqq>:
static void MX_I2C2_Init(void);
static void MX_TIM2_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void set_freqq(uint8_t ch){
 8000e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e60:	b09a      	sub	sp, #104	@ 0x68
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(ch==0){
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d135      	bne.n	8000ede <set_freqq+0x82>
		si5351_set_freq(freq[0]*1000*100ULL, SI5351_CLK0);
 8000e72:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <set_freqq+0x184>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	17da      	asrs	r2, r3, #31
 8000e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000e82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000e84:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8000e88:	4642      	mov	r2, r8
 8000e8a:	464b      	mov	r3, r9
 8000e8c:	1891      	adds	r1, r2, r2
 8000e8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000e90:	415b      	adcs	r3, r3
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000e98:	4641      	mov	r1, r8
 8000e9a:	1854      	adds	r4, r2, r1
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	eb43 0501 	adc.w	r5, r3, r1
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	016b      	lsls	r3, r5, #5
 8000eac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000eb0:	0162      	lsls	r2, r4, #5
 8000eb2:	18a1      	adds	r1, r4, r2
 8000eb4:	6239      	str	r1, [r7, #32]
 8000eb6:	eb45 0303 	adc.w	r3, r5, r3
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ebc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4642      	mov	r2, r8
 8000ec4:	189b      	adds	r3, r3, r2
 8000ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ec8:	464b      	mov	r3, r9
 8000eca:	460a      	mov	r2, r1
 8000ecc:	eb42 0303 	adc.w	r3, r2, r3
 8000ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8000ed8:	f001 fc72 	bl	80027c0 <si5351_set_freq>
	}else if(ch==1){
		si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
	}else{
		si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
	}
}
 8000edc:	e07a      	b.n	8000fd4 <set_freqq+0x178>
	}else if(ch==1){
 8000ede:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d13b      	bne.n	8000f5e <set_freqq+0x102>
		si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe0 <set_freqq+0x184>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	17da      	asrs	r2, r3, #31
 8000ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ef6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000ef8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000efc:	4622      	mov	r2, r4
 8000efe:	462b      	mov	r3, r5
 8000f00:	1891      	adds	r1, r2, r2
 8000f02:	61b9      	str	r1, [r7, #24]
 8000f04:	415b      	adcs	r3, r3
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	4629      	mov	r1, r5
 8000f10:	4604      	mov	r4, r0
 8000f12:	eb12 0a04 	adds.w	sl, r2, r4
 8000f16:	460c      	mov	r4, r1
 8000f18:	eb43 0b04 	adc.w	fp, r3, r4
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000f28:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000f2c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000f30:	eb1a 0402 	adds.w	r4, sl, r2
 8000f34:	613c      	str	r4, [r7, #16]
 8000f36:	eb4b 0303 	adc.w	r3, fp, r3
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000f40:	4623      	mov	r3, r4
 8000f42:	4602      	mov	r2, r0
 8000f44:	189b      	adds	r3, r3, r2
 8000f46:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f48:	460b      	mov	r3, r1
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	eb42 0303 	adc.w	r3, r2, r3
 8000f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f52:	2201      	movs	r2, #1
 8000f54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000f58:	f001 fc32 	bl	80027c0 <si5351_set_freq>
}
 8000f5c:	e03a      	b.n	8000fd4 <set_freqq+0x178>
		si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <set_freqq+0x184>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	17da      	asrs	r2, r3, #31
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000f70:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000f74:	4622      	mov	r2, r4
 8000f76:	462b      	mov	r3, r5
 8000f78:	1891      	adds	r1, r2, r2
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	415b      	adcs	r3, r3
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	4604      	mov	r4, r0
 8000f8a:	eb12 0804 	adds.w	r8, r2, r4
 8000f8e:	460c      	mov	r4, r1
 8000f90:	eb43 0904 	adc.w	r9, r3, r4
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000fa0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000fa4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000fa8:	eb18 0402 	adds.w	r4, r8, r2
 8000fac:	603c      	str	r4, [r7, #0]
 8000fae:	eb49 0303 	adc.w	r3, r9, r3
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	4602      	mov	r2, r0
 8000fbc:	189b      	adds	r3, r3, r2
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	eb42 0303 	adc.w	r3, r2, r3
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fca:	2202      	movs	r2, #2
 8000fcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000fd0:	f001 fbf6 	bl	80027c0 <si5351_set_freq>
}
 8000fd4:	bf00      	nop
 8000fd6:	3768      	adds	r7, #104	@ 0x68
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003dc 	.word	0x200003dc

08000fe4 <int_to_str>:
void int_to_str(int num, char *str) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    char tmp[12]; // Временный буфер
    int i = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]

    // Обрабатываем 0 отдельно
    if (num == 0) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d125      	bne.n	8001044 <int_to_str+0x60>
        str[0] = '0';
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e039      	b.n	800107c <int_to_str+0x98>
        return;
    }

    // Записываем цифры в обратном порядке
    while (num > 0) {
        tmp[i++] = '0' + (num % 10);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <int_to_str+0xa0>)
 800100c:	fb83 1302 	smull	r1, r3, r3, r2
 8001010:	1099      	asrs	r1, r3, #2
 8001012:	17d3      	asrs	r3, r2, #31
 8001014:	1ac9      	subs	r1, r1, r3
 8001016:	460b      	mov	r3, r1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	1ad1      	subs	r1, r2, r3
 8001020:	b2ca      	uxtb	r2, r1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	1c59      	adds	r1, r3, #1
 8001026:	61f9      	str	r1, [r7, #28]
 8001028:	3230      	adds	r2, #48	@ 0x30
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	3320      	adds	r3, #32
 800102e:	443b      	add	r3, r7
 8001030:	f803 2c14 	strb.w	r2, [r3, #-20]
        num /= 10;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <int_to_str+0xa0>)
 8001038:	fb82 1203 	smull	r1, r2, r2, r3
 800103c:	1092      	asrs	r2, r2, #2
 800103e:	17db      	asrs	r3, r3, #31
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	607b      	str	r3, [r7, #4]
    while (num > 0) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dcde      	bgt.n	8001008 <int_to_str+0x24>
    }

    // Разворачиваем строку
    int j = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
    while (i-- > 0) {
 800104e:	e00b      	b.n	8001068 <int_to_str+0x84>
        str[j++] = tmp[i];
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	61ba      	str	r2, [r7, #24]
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	f107 010c 	add.w	r1, r7, #12
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	440a      	add	r2, r1
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	701a      	strb	r2, [r3, #0]
    while (i-- > 0) {
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	61fa      	str	r2, [r7, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dcee      	bgt.n	8001050 <int_to_str+0x6c>
    }
    str[j] = '\0';
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	66666667 	.word	0x66666667

08001088 <Is_Flash_Valid>:

char Is_Flash_Valid() {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
    // Чтение метки из Flash
    uint32_t magic = *(__IO uint32_t*)FLASH_USER_START_ADDR;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <Is_Flash_Valid+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	607b      	str	r3, [r7, #4]
    if(magic == FLASH_MAGIC_NUMBER){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <Is_Flash_Valid+0x28>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <Is_Flash_Valid+0x18>
    	return 1;
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <Is_Flash_Valid+0x1a>
    }else{
    	return 0;
 80010a0:	2300      	movs	r3, #0
    }
    //return (magic == FLASH_MAGIC_NUMBER);
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	0801fc00 	.word	0x0801fc00
 80010b0:	deadbeef 	.word	0xdeadbeef

080010b4 <Read_Flash_Array>:

void Read_Flash_Array(int32_t *output) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    if (!Is_Flash_Valid()) {
 80010bc:	f7ff ffe4 	bl	8001088 <Is_Flash_Valid>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <Read_Flash_Array+0x1e>
        // Данные не валидны (первый запуск)
        memset(output, 0, ARRAY_SIZE * sizeof(int32_t));
 80010c6:	220c      	movs	r2, #12
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f013 fbec 	bl	80148a8 <memset>
        return;
 80010d0:	e008      	b.n	80010e4 <Read_Flash_Array+0x30>
    }

    // Чтение данных (пропускаем метку)
    FlashData *flash_data = (FlashData*)FLASH_USER_START_ADDR;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <Read_Flash_Array+0x38>)
 80010d4:	60fb      	str	r3, [r7, #12]
    memcpy(output, flash_data->data, ARRAY_SIZE * sizeof(int32_t));
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	220c      	movs	r2, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f013 fc4e 	bl	8014980 <memcpy>
}
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0801fc00 	.word	0x0801fc00

080010f0 <Write_Flash_Array>:

void Write_Flash_Array(int32_t *data) {
 80010f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f4:	b090      	sub	sp, #64	@ 0x40
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 80010fa:	f004 fb0f 	bl	800571c <HAL_FLASH_Unlock>

    // Стирание страницы
    FLASH_EraseInitTypeDef erase;
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    erase.PageAddress = FLASH_USER_START_ADDR;
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <Write_Flash_Array+0xb4>)
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    erase.NbPages = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t page_error;
    HAL_FLASHEx_Erase(&erase, &page_error);
 800110a:	f107 0218 	add.w	r2, r7, #24
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fbe9 	bl	80058ec <HAL_FLASHEx_Erase>

    // Запись структуры (метка + данные)
    FlashData flash_data;
    flash_data.magic = FLASH_MAGIC_NUMBER;
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <Write_Flash_Array+0xb8>)
 800111c:	60bb      	str	r3, [r7, #8]
    memcpy(flash_data.data, data, ARRAY_SIZE * sizeof(int32_t));
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	3304      	adds	r3, #4
 8001124:	220c      	movs	r2, #12
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fc29 	bl	8014980 <memcpy>

    // Запись по 16-битным полусловам
    uint32_t addr = FLASH_USER_START_ADDR;
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <Write_Flash_Array+0xb4>)
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t *ptr = (uint32_t*)&flash_data;
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t size = sizeof(FlashData) / 2; // Количество 16-битных слов
 8001138:	2308      	movs	r3, #8
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint32_t i = 0; i < size; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001140:	e024      	b.n	800118c <Write_Flash_Array+0x9c>
        uint32_t value = ptr[i];
 8001142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr, value & 0xFFFF);
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	2200      	movs	r2, #0
 8001152:	469a      	mov	sl, r3
 8001154:	4693      	mov	fp, r2
 8001156:	fa1f f48a 	uxth.w	r4, sl
 800115a:	2500      	movs	r5, #0
 800115c:	4622      	mov	r2, r4
 800115e:	462b      	mov	r3, r5
 8001160:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001162:	2001      	movs	r0, #1
 8001164:	f004 f978 	bl	8005458 <HAL_FLASH_Program>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + 2, (value >> 16) & 0xFFFF);
 8001168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800116a:	1c99      	adds	r1, r3, #2
 800116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	2200      	movs	r2, #0
 8001172:	4698      	mov	r8, r3
 8001174:	4691      	mov	r9, r2
 8001176:	4642      	mov	r2, r8
 8001178:	464b      	mov	r3, r9
 800117a:	2001      	movs	r0, #1
 800117c:	f004 f96c 	bl	8005458 <HAL_FLASH_Program>
        addr += 4;
 8001180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001182:	3304      	adds	r3, #4
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint32_t i = 0; i < size; i++) {
 8001186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001188:	3301      	adds	r3, #1
 800118a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800118c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800118e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001190:	429a      	cmp	r2, r3
 8001192:	d3d6      	bcc.n	8001142 <Write_Flash_Array+0x52>
    }

    HAL_FLASH_Lock();
 8001194:	f004 fae8 	bl	8005768 <HAL_FLASH_Lock>
}
 8001198:	bf00      	nop
 800119a:	3740      	adds	r7, #64	@ 0x40
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011a2:	bf00      	nop
 80011a4:	0801fc00 	.word	0x0801fc00
 80011a8:	deadbeef 	.word	0xdeadbeef

080011ac <get_encoder>:


int get_encoder(){
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	return (int)TIM1->CNT/4;//для энкодера использующегося в проекте
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <get_encoder+0x18>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da00      	bge.n	80011ba <get_encoder+0xe>
 80011b8:	3303      	adds	r3, #3
 80011ba:	109b      	asrs	r3, r3, #2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <set_encoder>:

void set_encoder(int e){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	TIM1->CNT=e*4;//для энкодера использующегося в проекте
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	009a      	lsls	r2, r3, #2
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <set_encoder+0x1c>)
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00

080011e8 <print_interface_mode0>:


void print_interface_mode0(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af02      	add	r7, sp, #8
	//далее 3 строки обычного вывода на дисплей строки
	ssd1306_SetCursor(1, 1);//установка курсора
 80011ee:	2101      	movs	r1, #1
 80011f0:	2001      	movs	r0, #1
 80011f2:	f003 fecd 	bl	8004f90 <ssd1306_SetCursor>
	ssd1306_Fill(Black);//заполнение экрана чёрным(типа стирание)
 80011f6:	2000      	movs	r0, #0
 80011f8:	f003 fd80 	bl	8004cfc <ssd1306_Fill>
	ssd1306_WriteString(num_string[0], Font_7x10, White);//отправка строки
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <print_interface_mode0+0xac>)
 80011fe:	2201      	movs	r2, #1
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001204:	4824      	ldr	r0, [pc, #144]	@ (8001298 <print_interface_mode0+0xb0>)
 8001206:	f003 fe9d 	bl	8004f44 <ssd1306_WriteString>
	//далее выводятся строки, чтобы частоты каналов отображались корректно
	ssd1306_WriteString("   ", Font_7x10, White);
 800120a:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <print_interface_mode0+0xac>)
 800120c:	2201      	movs	r2, #1
 800120e:	9200      	str	r2, [sp, #0]
 8001210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001212:	4822      	ldr	r0, [pc, #136]	@ (800129c <print_interface_mode0+0xb4>)
 8001214:	f003 fe96 	bl	8004f44 <ssd1306_WriteString>
	ssd1306_WriteString(num_string[1], Font_7x10, White);
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <print_interface_mode0+0xac>)
 800121a:	2201      	movs	r2, #1
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	481f      	ldr	r0, [pc, #124]	@ (80012a0 <print_interface_mode0+0xb8>)
 8001222:	f003 fe8f 	bl	8004f44 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 10);//для переноса на следующую строку
 8001226:	210a      	movs	r1, #10
 8001228:	2001      	movs	r0, #1
 800122a:	f003 feb1 	bl	8004f90 <ssd1306_SetCursor>
	ssd1306_WriteString(num_string[2], Font_7x10, White);
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <print_interface_mode0+0xac>)
 8001230:	2201      	movs	r2, #1
 8001232:	9200      	str	r2, [sp, #0]
 8001234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001236:	481b      	ldr	r0, [pc, #108]	@ (80012a4 <print_interface_mode0+0xbc>)
 8001238:	f003 fe84 	bl	8004f44 <ssd1306_WriteString>
	ssd1306_WriteString("   ", Font_7x10, White);
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <print_interface_mode0+0xac>)
 800123e:	2201      	movs	r2, #1
 8001240:	9200      	str	r2, [sp, #0]
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	4815      	ldr	r0, [pc, #84]	@ (800129c <print_interface_mode0+0xb4>)
 8001246:	f003 fe7d 	bl	8004f44 <ssd1306_WriteString>
	if(choiced_channel==0){
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <print_interface_mode0+0xc0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <print_interface_mode0+0x7a>
		ssd1306_WriteString("ch0", Font_7x10, White);
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <print_interface_mode0+0xac>)
 8001254:	2201      	movs	r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125a:	4814      	ldr	r0, [pc, #80]	@ (80012ac <print_interface_mode0+0xc4>)
 800125c:	f003 fe72 	bl	8004f44 <ssd1306_WriteString>
 8001260:	e012      	b.n	8001288 <print_interface_mode0+0xa0>
	}else if(choiced_channel==1){
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <print_interface_mode0+0xc0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <print_interface_mode0+0x92>
		ssd1306_WriteString("ch1", Font_7x10, White);
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <print_interface_mode0+0xac>)
 800126c:	2201      	movs	r2, #1
 800126e:	9200      	str	r2, [sp, #0]
 8001270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001272:	480f      	ldr	r0, [pc, #60]	@ (80012b0 <print_interface_mode0+0xc8>)
 8001274:	f003 fe66 	bl	8004f44 <ssd1306_WriteString>
 8001278:	e006      	b.n	8001288 <print_interface_mode0+0xa0>
	}else{
		ssd1306_WriteString("ch2", Font_7x10, White);
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <print_interface_mode0+0xac>)
 800127c:	2201      	movs	r2, #1
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001282:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <print_interface_mode0+0xcc>)
 8001284:	f003 fe5e 	bl	8004f44 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();//самая важная функция, без которой что было отправлено на дисплей не отобразится
 8001288:	f003 fd50 	bl	8004d2c <ssd1306_UpdateScreen>
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	080174f8 	.word	0x080174f8
 8001298:	200003f0 	.word	0x200003f0
 800129c:	08015ee8 	.word	0x08015ee8
 80012a0:	200003f7 	.word	0x200003f7
 80012a4:	200003fe 	.word	0x200003fe
 80012a8:	20000406 	.word	0x20000406
 80012ac:	08015eec 	.word	0x08015eec
 80012b0:	08015ef0 	.word	0x08015ef0
 80012b4:	08015ef4 	.word	0x08015ef4

080012b8 <print_interface_mode1>:

void print_interface_mode1(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
	//смысл такой-же, как и в mode0, но здесь цифра большего размера показывает, что она выбрана, а ^ указывает на изменение этой цифры
	ssd1306_SetCursor(1, 1);
 80012be:	2101      	movs	r1, #1
 80012c0:	2001      	movs	r0, #1
 80012c2:	f003 fe65 	bl	8004f90 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f003 fd18 	bl	8004cfc <ssd1306_Fill>
	if(choiced_num==0){
 80012cc:	4b7d      	ldr	r3, [pc, #500]	@ (80014c4 <print_interface_mode1+0x20c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d139      	bne.n	8001348 <print_interface_mode1+0x90>
		uint16_t size=strlen(num_string[choiced_channel]);
 80012d4:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <print_interface_mode1+0x210>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	4a7a      	ldr	r2, [pc, #488]	@ (80014cc <print_interface_mode1+0x214>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff33 	bl	8000150 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	813b      	strh	r3, [r7, #8]
		for(int i=size;i<6;++i){
 80012ee:	893b      	ldrh	r3, [r7, #8]
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <print_interface_mode1+0x50>
			ssd1306_WriteString("0", Font_7x10, White);
 80012f4:	4b76      	ldr	r3, [pc, #472]	@ (80014d0 <print_interface_mode1+0x218>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	4875      	ldr	r0, [pc, #468]	@ (80014d4 <print_interface_mode1+0x21c>)
 80012fe:	f003 fe21 	bl	8004f44 <ssd1306_WriteString>
		for(int i=size;i<6;++i){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b05      	cmp	r3, #5
 800130c:	ddf2      	ble.n	80012f4 <print_interface_mode1+0x3c>
		}
		ssd1306_WriteString(num_string[choiced_channel], Font_7x10, White);
 800130e:	4b6e      	ldr	r3, [pc, #440]	@ (80014c8 <print_interface_mode1+0x210>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	4a6c      	ldr	r2, [pc, #432]	@ (80014cc <print_interface_mode1+0x214>)
 800131c:	1898      	adds	r0, r3, r2
 800131e:	4b6c      	ldr	r3, [pc, #432]	@ (80014d0 <print_interface_mode1+0x218>)
 8001320:	2201      	movs	r2, #1
 8001322:	9200      	str	r2, [sp, #0]
 8001324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001326:	f003 fe0d 	bl	8004f44 <ssd1306_WriteString>


		ssd1306_WriteString("   ", Font_7x10, White);
 800132a:	4b69      	ldr	r3, [pc, #420]	@ (80014d0 <print_interface_mode1+0x218>)
 800132c:	2201      	movs	r2, #1
 800132e:	9200      	str	r2, [sp, #0]
 8001330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001332:	4869      	ldr	r0, [pc, #420]	@ (80014d8 <print_interface_mode1+0x220>)
 8001334:	f003 fe06 	bl	8004f44 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_11x18, White);
 8001338:	4b68      	ldr	r3, [pc, #416]	@ (80014dc <print_interface_mode1+0x224>)
 800133a:	2201      	movs	r2, #1
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001340:	4867      	ldr	r0, [pc, #412]	@ (80014e0 <print_interface_mode1+0x228>)
 8001342:	f003 fdff 	bl	8004f44 <ssd1306_WriteString>
 8001346:	e08f      	b.n	8001468 <print_interface_mode1+0x1b0>
	}else{
		uint16_t size=strlen(num_string[choiced_channel]);
 8001348:	4b5f      	ldr	r3, [pc, #380]	@ (80014c8 <print_interface_mode1+0x210>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	4a5d      	ldr	r2, [pc, #372]	@ (80014cc <print_interface_mode1+0x214>)
 8001356:	4413      	add	r3, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe fef9 	bl	8000150 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	817b      	strh	r3, [r7, #10]
		for(int i=5;i>size-1;--i){
 8001362:	2305      	movs	r3, #5
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	e017      	b.n	8001398 <print_interface_mode1+0xe0>
			if(i==choiced_num-1){
 8001368:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <print_interface_mode1+0x20c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <print_interface_mode1+0xcc>
				ssd1306_WriteString("0", Font_11x18, White);
 8001374:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <print_interface_mode1+0x224>)
 8001376:	2201      	movs	r2, #1
 8001378:	9200      	str	r2, [sp, #0]
 800137a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137c:	4855      	ldr	r0, [pc, #340]	@ (80014d4 <print_interface_mode1+0x21c>)
 800137e:	f003 fde1 	bl	8004f44 <ssd1306_WriteString>
 8001382:	e006      	b.n	8001392 <print_interface_mode1+0xda>
			}else{
				ssd1306_WriteString("0", Font_7x10, White);
 8001384:	4b52      	ldr	r3, [pc, #328]	@ (80014d0 <print_interface_mode1+0x218>)
 8001386:	2201      	movs	r2, #1
 8001388:	9200      	str	r2, [sp, #0]
 800138a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138c:	4851      	ldr	r0, [pc, #324]	@ (80014d4 <print_interface_mode1+0x21c>)
 800138e:	f003 fdd9 	bl	8004f44 <ssd1306_WriteString>
		for(int i=5;i>size-1;--i){
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	3b01      	subs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	429a      	cmp	r2, r3
 800139e:	dae3      	bge.n	8001368 <print_interface_mode1+0xb0>
			}
		}
		for(int i=0;i<size;++i){
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e034      	b.n	8001410 <print_interface_mode1+0x158>
			if(i==size-choiced_num){
 80013a6:	897b      	ldrh	r3, [r7, #10]
 80013a8:	4a46      	ldr	r2, [pc, #280]	@ (80014c4 <print_interface_mode1+0x20c>)
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d115      	bne.n	80013e0 <print_interface_mode1+0x128>

				char str[2] = {num_string[choiced_channel][i], '\0'};
 80013b4:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <print_interface_mode1+0x210>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4a44      	ldr	r2, [pc, #272]	@ (80014cc <print_interface_mode1+0x214>)
 80013bc:	460b      	mov	r3, r1
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a5b      	subs	r3, r3, r1
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	713b      	strb	r3, [r7, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	717b      	strb	r3, [r7, #5]
				ssd1306_WriteString(str, Font_11x18, White);
 80013d0:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <print_interface_mode1+0x224>)
 80013d2:	1d38      	adds	r0, r7, #4
 80013d4:	2201      	movs	r2, #1
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013da:	f003 fdb3 	bl	8004f44 <ssd1306_WriteString>
 80013de:	e014      	b.n	800140a <print_interface_mode1+0x152>
			}else{

				char str[2] = {num_string[choiced_channel][i], '\0'};
 80013e0:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <print_interface_mode1+0x210>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4a39      	ldr	r2, [pc, #228]	@ (80014cc <print_interface_mode1+0x214>)
 80013e8:	460b      	mov	r3, r1
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a5b      	subs	r3, r3, r1
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	703b      	strb	r3, [r7, #0]
 80013f8:	2300      	movs	r3, #0
 80013fa:	707b      	strb	r3, [r7, #1]
				ssd1306_WriteString(str, Font_7x10, White);
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <print_interface_mode1+0x218>)
 80013fe:	4638      	mov	r0, r7
 8001400:	2201      	movs	r2, #1
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001406:	f003 fd9d 	bl	8004f44 <ssd1306_WriteString>
		for(int i=0;i<size;++i){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbc6      	blt.n	80013a6 <print_interface_mode1+0xee>
			}
		}
		ssd1306_WriteString("   ", Font_7x10, White);
 8001418:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <print_interface_mode1+0x218>)
 800141a:	2201      	movs	r2, #1
 800141c:	9200      	str	r2, [sp, #0]
 800141e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001420:	482d      	ldr	r0, [pc, #180]	@ (80014d8 <print_interface_mode1+0x220>)
 8001422:	f003 fd8f 	bl	8004f44 <ssd1306_WriteString>
		ssd1306_WriteString("send", Font_7x10, White);
 8001426:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <print_interface_mode1+0x218>)
 8001428:	2201      	movs	r2, #1
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142e:	482c      	ldr	r0, [pc, #176]	@ (80014e0 <print_interface_mode1+0x228>)
 8001430:	f003 fd88 	bl	8004f44 <ssd1306_WriteString>
		if(choice==1){
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <print_interface_mode1+0x22c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d115      	bne.n	8001468 <print_interface_mode1+0x1b0>
			ssd1306_SetCursor(1+((6-choiced_num)*7), 18);
 800143c:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <print_interface_mode1+0x20c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f1c3 0306 	rsb	r3, r3, #6
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3301      	adds	r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2112      	movs	r1, #18
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fd9b 	bl	8004f90 <ssd1306_SetCursor>
			ssd1306_WriteString("^", Font_7x10, White);
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <print_interface_mode1+0x218>)
 800145c:	2201      	movs	r2, #1
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001462:	4821      	ldr	r0, [pc, #132]	@ (80014e8 <print_interface_mode1+0x230>)
 8001464:	f003 fd6e 	bl	8004f44 <ssd1306_WriteString>
		}


	}
	//проверка пределов значений частот и соответствуещие напоминания об этом
	if(freq[choiced_channel]==160000){
 8001468:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <print_interface_mode1+0x210>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <print_interface_mode1+0x234>)
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <print_interface_mode1+0x238>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10b      	bne.n	8001492 <print_interface_mode1+0x1da>
		ssd1306_SetCursor(77, 18);
 800147a:	2112      	movs	r1, #18
 800147c:	204d      	movs	r0, #77	@ 0x4d
 800147e:	f003 fd87 	bl	8004f90 <ssd1306_SetCursor>
		ssd1306_WriteString("MAX", Font_7x10, White);
 8001482:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <print_interface_mode1+0x218>)
 8001484:	2201      	movs	r2, #1
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <print_interface_mode1+0x23c>)
 800148c:	f003 fd5a 	bl	8004f44 <ssd1306_WriteString>
 8001490:	e012      	b.n	80014b8 <print_interface_mode1+0x200>
	}else if(freq[choiced_channel]==8){
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <print_interface_mode1+0x210>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <print_interface_mode1+0x234>)
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d10a      	bne.n	80014b8 <print_interface_mode1+0x200>
		ssd1306_SetCursor(77, 18);
 80014a2:	2112      	movs	r1, #18
 80014a4:	204d      	movs	r0, #77	@ 0x4d
 80014a6:	f003 fd73 	bl	8004f90 <ssd1306_SetCursor>
		ssd1306_WriteString("MIN", Font_7x10, White);
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <print_interface_mode1+0x218>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	4811      	ldr	r0, [pc, #68]	@ (80014f8 <print_interface_mode1+0x240>)
 80014b4:	f003 fd46 	bl	8004f44 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80014b8:	f003 fc38 	bl	8004d2c <ssd1306_UpdateScreen>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000405 	.word	0x20000405
 80014c8:	20000406 	.word	0x20000406
 80014cc:	200003f0 	.word	0x200003f0
 80014d0:	080174f8 	.word	0x080174f8
 80014d4:	08015ef8 	.word	0x08015ef8
 80014d8:	08015ee8 	.word	0x08015ee8
 80014dc:	08017504 	.word	0x08017504
 80014e0:	08015efc 	.word	0x08015efc
 80014e4:	200003ec 	.word	0x200003ec
 80014e8:	08015f04 	.word	0x08015f04
 80014ec:	200003dc 	.word	0x200003dc
 80014f0:	00027100 	.word	0x00027100
 80014f4:	08015f08 	.word	0x08015f08
 80014f8:	08015f0c 	.word	0x08015f0c

080014fc <int_mode_0>:

void int_mode_0(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001500:	2101      	movs	r1, #1
 8001502:	481d      	ldr	r0, [pc, #116]	@ (8001578 <int_mode_0+0x7c>)
 8001504:	f004 fc1e 	bl	8005d44 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <int_mode_0+0x18>
		choice=1;
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <int_mode_0+0x80>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 8001514:	bf00      	nop
 8001516:	2101      	movs	r1, #1
 8001518:	4817      	ldr	r0, [pc, #92]	@ (8001578 <int_mode_0+0x7c>)
 800151a:	f004 fc13 	bl	8005d44 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f8      	beq.n	8001516 <int_mode_0+0x1a>
	if(choice==0){
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <int_mode_0+0x80>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d111      	bne.n	8001550 <int_mode_0+0x54>
		//кнопка не нажата, смотрим значение энкодера и его остаток от деления даёт выбранный канал
		choiced_channel=get_encoder()%3;
 800152c:	f7ff fe3e 	bl	80011ac <get_encoder>
 8001530:	4602      	mov	r2, r0
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <int_mode_0+0x84>)
 8001534:	fb83 3102 	smull	r3, r1, r3, r2
 8001538:	17d3      	asrs	r3, r2, #31
 800153a:	1ac9      	subs	r1, r1, r3
 800153c:	460b      	mov	r3, r1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	440b      	add	r3, r1
 8001542:	1ad1      	subs	r1, r2, r3
 8001544:	b2ca      	uxtb	r2, r1
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <int_mode_0+0x88>)
 8001548:	701a      	strb	r2, [r3, #0]
		print_interface_mode0();
 800154a:	f7ff fe4d 	bl	80011e8 <print_interface_mode0>
		interface_mode=1;
		choice=0;
		print_interface_mode1();
	}

}
 800154e:	e011      	b.n	8001574 <int_mode_0+0x78>
	}else if(choice==1){
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <int_mode_0+0x80>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10d      	bne.n	8001574 <int_mode_0+0x78>
		set_encoder(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fe35 	bl	80011c8 <set_encoder>
		choiced_num=1;//потому что есть send который будем считать за 0 положение
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <int_mode_0+0x8c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
		interface_mode=1;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <int_mode_0+0x90>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
		choice=0;
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <int_mode_0+0x80>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001570:	f7ff fea2 	bl	80012b8 <print_interface_mode1>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010800 	.word	0x40010800
 800157c:	200003ec 	.word	0x200003ec
 8001580:	55555556 	.word	0x55555556
 8001584:	20000406 	.word	0x20000406
 8001588:	20000405 	.word	0x20000405
 800158c:	20000407 	.word	0x20000407

08001590 <min_freq>:


//функция выставления минимальной частоты
void min_freq(){
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='8';
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <min_freq+0x38>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <min_freq+0x3c>)
 800159c:	460b      	mov	r3, r1
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a5b      	subs	r3, r3, r1
 80015a2:	4413      	add	r3, r2
 80015a4:	2238      	movs	r2, #56	@ 0x38
 80015a6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='\0';
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <min_freq+0x38>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <min_freq+0x3c>)
 80015b0:	460b      	mov	r3, r1
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a5b      	subs	r3, r3, r1
 80015b6:	4413      	add	r3, r2
 80015b8:	3301      	adds	r3, #1
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000406 	.word	0x20000406
 80015cc:	200003f0 	.word	0x200003f0

080015d0 <max_freq>:
//функция выставления максимальной частоты
void max_freq(){
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	num_string[choiced_channel][0]='1';
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <max_freq+0xa4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <max_freq+0xa8>)
 80015dc:	460b      	mov	r3, r1
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	1a5b      	subs	r3, r3, r1
 80015e2:	4413      	add	r3, r2
 80015e4:	2231      	movs	r2, #49	@ 0x31
 80015e6:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][1]='6';
 80015e8:	4b22      	ldr	r3, [pc, #136]	@ (8001674 <max_freq+0xa4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <max_freq+0xa8>)
 80015f0:	460b      	mov	r3, r1
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	4413      	add	r3, r2
 80015f8:	3301      	adds	r3, #1
 80015fa:	2236      	movs	r2, #54	@ 0x36
 80015fc:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][2]='0';
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <max_freq+0xa4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <max_freq+0xa8>)
 8001606:	460b      	mov	r3, r1
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	4413      	add	r3, r2
 800160e:	3302      	adds	r3, #2
 8001610:	2230      	movs	r2, #48	@ 0x30
 8001612:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][3]='0';
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <max_freq+0xa4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <max_freq+0xa8>)
 800161c:	460b      	mov	r3, r1
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a5b      	subs	r3, r3, r1
 8001622:	4413      	add	r3, r2
 8001624:	3303      	adds	r3, #3
 8001626:	2230      	movs	r2, #48	@ 0x30
 8001628:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][4]='0';
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <max_freq+0xa4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	4a11      	ldr	r2, [pc, #68]	@ (8001678 <max_freq+0xa8>)
 8001632:	460b      	mov	r3, r1
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	4413      	add	r3, r2
 800163a:	3304      	adds	r3, #4
 800163c:	2230      	movs	r2, #48	@ 0x30
 800163e:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][5]='0';
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <max_freq+0xa4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <max_freq+0xa8>)
 8001648:	460b      	mov	r3, r1
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a5b      	subs	r3, r3, r1
 800164e:	4413      	add	r3, r2
 8001650:	3305      	adds	r3, #5
 8001652:	2230      	movs	r2, #48	@ 0x30
 8001654:	701a      	strb	r2, [r3, #0]
	num_string[choiced_channel][6]='\0';
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <max_freq+0xa4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <max_freq+0xa8>)
 800165e:	460b      	mov	r3, r1
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	1a5b      	subs	r3, r3, r1
 8001664:	4413      	add	r3, r2
 8001666:	3306      	adds	r3, #6
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	20000406 	.word	0x20000406
 8001678:	200003f0 	.word	0x200003f0

0800167c <int_mode_1>:

void int_mode_1(){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {  // Если кнопка нажата (подтяжка к VCC)
 8001682:	2101      	movs	r1, #1
 8001684:	4899      	ldr	r0, [pc, #612]	@ (80018ec <int_mode_1+0x270>)
 8001686:	f004 fb5d 	bl	8005d44 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d11b      	bne.n	80016c8 <int_mode_1+0x4c>
		//поменялось с 0 на 1 значит начали редактирование цифры, а если был выбран send(0), то происходит отправка частоты и изменение интерфейса на mode0
		if(choice==0){
 8001690:	4b97      	ldr	r3, [pc, #604]	@ (80018f0 <int_mode_1+0x274>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10f      	bne.n	80016b8 <int_mode_1+0x3c>

			choice=1;
 8001698:	4b95      	ldr	r3, [pc, #596]	@ (80018f0 <int_mode_1+0x274>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
			if(choiced_num!=0){
 800169e:	4b95      	ldr	r3, [pc, #596]	@ (80018f4 <int_mode_1+0x278>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <int_mode_1+0x4c>
				prev_encoder=1000;
 80016a6:	4b94      	ldr	r3, [pc, #592]	@ (80018f8 <int_mode_1+0x27c>)
 80016a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016ac:	601a      	str	r2, [r3, #0]
				set_encoder(1000);
 80016ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b2:	f7ff fd89 	bl	80011c8 <set_encoder>
 80016b6:	e007      	b.n	80016c8 <int_mode_1+0x4c>

			}
		}else{
			//закончили редактирование цифры, устанавливаем энкодер на выбранную цифру(номер)
			choice=0;
 80016b8:	4b8d      	ldr	r3, [pc, #564]	@ (80018f0 <int_mode_1+0x274>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
			set_encoder(choiced_num);
 80016be:	4b8d      	ldr	r3, [pc, #564]	@ (80018f4 <int_mode_1+0x278>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fd80 	bl	80011c8 <set_encoder>
		}

	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET);  // Ждём отпускания
 80016c8:	bf00      	nop
 80016ca:	2101      	movs	r1, #1
 80016cc:	4887      	ldr	r0, [pc, #540]	@ (80018ec <int_mode_1+0x270>)
 80016ce:	f004 fb39 	bl	8005d44 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f8      	beq.n	80016ca <int_mode_1+0x4e>
	if(choice==0){
 80016d8:	4b85      	ldr	r3, [pc, #532]	@ (80018f0 <int_mode_1+0x274>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d113      	bne.n	8001708 <int_mode_1+0x8c>
		choiced_num=get_encoder()%7;
 80016e0:	f7ff fd64 	bl	80011ac <get_encoder>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b85      	ldr	r3, [pc, #532]	@ (80018fc <int_mode_1+0x280>)
 80016e8:	fb83 1302 	smull	r1, r3, r3, r2
 80016ec:	4413      	add	r3, r2
 80016ee:	1099      	asrs	r1, r3, #2
 80016f0:	17d3      	asrs	r3, r2, #31
 80016f2:	1ac9      	subs	r1, r1, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	1a5b      	subs	r3, r3, r1
 80016fa:	1ad1      	subs	r1, r2, r3
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	4b7d      	ldr	r3, [pc, #500]	@ (80018f4 <int_mode_1+0x278>)
 8001700:	701a      	strb	r2, [r3, #0]
		print_interface_mode1();
 8001702:	f7ff fdd9 	bl	80012b8 <print_interface_mode1>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);//обновляем строку с выбранной частотой
			print_interface_mode1();

		}
	}
}
 8001706:	e0ec      	b.n	80018e2 <int_mode_1+0x266>
	}else if(choice==1){
 8001708:	4b79      	ldr	r3, [pc, #484]	@ (80018f0 <int_mode_1+0x274>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	f040 80e8 	bne.w	80018e2 <int_mode_1+0x266>
		if(choiced_num==0){
 8001712:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <int_mode_1+0x278>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <int_mode_1+0xca>
			choice=0;
 800171a:	4b75      	ldr	r3, [pc, #468]	@ (80018f0 <int_mode_1+0x274>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
			interface_mode=0;
 8001720:	4b77      	ldr	r3, [pc, #476]	@ (8001900 <int_mode_1+0x284>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			set_freqq(choiced_channel);
 8001726:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <int_mode_1+0x288>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fb96 	bl	8000e5c <set_freqq>
			Write_Flash_Array(freq);//обновляем значение в памяти
 8001730:	4875      	ldr	r0, [pc, #468]	@ (8001908 <int_mode_1+0x28c>)
 8001732:	f7ff fcdd 	bl	80010f0 <Write_Flash_Array>
			set_encoder(choiced_channel);
 8001736:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <int_mode_1+0x288>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd44 	bl	80011c8 <set_encoder>
			print_interface_mode0();
 8001740:	f7ff fd52 	bl	80011e8 <print_interface_mode0>
}
 8001744:	e0cd      	b.n	80018e2 <int_mode_1+0x266>
			int delta = get_encoder();//минимизируем вызов функции
 8001746:	f7ff fd31 	bl	80011ac <get_encoder>
 800174a:	6078      	str	r0, [r7, #4]
			freq[choiced_channel]+=(delta-prev_encoder)*pow(10,choiced_num-1);//сразу меняем частоту при изменении энкодера
 800174c:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <int_mode_1+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe55 	bl	8000404 <__aeabi_i2d>
 800175a:	4604      	mov	r4, r0
 800175c:	460d      	mov	r5, r1
 800175e:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <int_mode_1+0x278>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	3b01      	subs	r3, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe4d 	bl	8000404 <__aeabi_i2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	4966      	ldr	r1, [pc, #408]	@ (800190c <int_mode_1+0x290>)
 8001774:	f013 fca0 	bl	80150b8 <pow>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe feaa 	bl	80004d8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <int_mode_1+0x288>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <int_mode_1+0x28c>)
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe33 	bl	8000404 <__aeabi_i2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fce1 	bl	800016c <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4955      	ldr	r1, [pc, #340]	@ (8001904 <int_mode_1+0x288>)
 80017b0:	7809      	ldrb	r1, [r1, #0]
 80017b2:	460c      	mov	r4, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f93e 	bl	8000a38 <__aeabi_d2iz>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <int_mode_1+0x28c>)
 80017c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			if(freq[choiced_channel]<0){
 80017c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001904 <int_mode_1+0x288>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001908 <int_mode_1+0x28c>)
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da10      	bge.n	80017f6 <int_mode_1+0x17a>
				freq[choiced_channel]=160000+freq[choiced_channel];//если частота очень мала делаем её почти максимальной
 80017d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <int_mode_1+0x288>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <int_mode_1+0x28c>)
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	4a48      	ldr	r2, [pc, #288]	@ (8001904 <int_mode_1+0x288>)
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80017ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80017ee:	4a46      	ldr	r2, [pc, #280]	@ (8001908 <int_mode_1+0x28c>)
 80017f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80017f4:	e03a      	b.n	800186c <int_mode_1+0x1f0>
			}else if(freq[choiced_channel]>999999){
 80017f6:	4b43      	ldr	r3, [pc, #268]	@ (8001904 <int_mode_1+0x288>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b42      	ldr	r3, [pc, #264]	@ (8001908 <int_mode_1+0x28c>)
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	4a43      	ldr	r2, [pc, #268]	@ (8001910 <int_mode_1+0x294>)
 8001804:	4293      	cmp	r3, r2
 8001806:	dd31      	ble.n	800186c <int_mode_1+0x1f0>
				freq[choiced_channel]=(7+(delta-prev_encoder)*pow(10,choiced_num-1));//если частота очень большая, то делаем её почти минимальной
 8001808:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <int_mode_1+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdf7 	bl	8000404 <__aeabi_i2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <int_mode_1+0x278>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fdef 	bl	8000404 <__aeabi_i2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	4937      	ldr	r1, [pc, #220]	@ (800190c <int_mode_1+0x290>)
 8001830:	f013 fc42 	bl	80150b8 <pow>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fe4c 	bl	80004d8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <int_mode_1+0x298>)
 800184e:	f7fe fc8d 	bl	800016c <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	492b      	ldr	r1, [pc, #172]	@ (8001904 <int_mode_1+0x288>)
 8001858:	7809      	ldrb	r1, [r1, #0]
 800185a:	460c      	mov	r4, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f8ea 	bl	8000a38 <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	4a28      	ldr	r2, [pc, #160]	@ (8001908 <int_mode_1+0x28c>)
 8001868:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			prev_encoder=delta;
 800186c:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <int_mode_1+0x27c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
			if(freq[choiced_channel]<8){
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <int_mode_1+0x288>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <int_mode_1+0x28c>)
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	2b07      	cmp	r3, #7
 8001880:	dc09      	bgt.n	8001896 <int_mode_1+0x21a>
				freq[choiced_channel]=8;
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <int_mode_1+0x288>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <int_mode_1+0x28c>)
 800188a:	2208      	movs	r2, #8
 800188c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				min_freq();
 8001890:	f7ff fe7e 	bl	8001590 <min_freq>
 8001894:	e011      	b.n	80018ba <int_mode_1+0x23e>
			}else if(freq[choiced_channel]>160000){
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <int_mode_1+0x288>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <int_mode_1+0x28c>)
 800189e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <int_mode_1+0x29c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	dd08      	ble.n	80018ba <int_mode_1+0x23e>
				freq[choiced_channel]=160000;
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <int_mode_1+0x288>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <int_mode_1+0x28c>)
 80018b0:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <int_mode_1+0x29c>)
 80018b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				max_freq();
 80018b6:	f7ff fe8b 	bl	80015d0 <max_freq>
			int_to_str(freq[choiced_channel],num_string[choiced_channel]);//обновляем строку с выбранной частотой
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <int_mode_1+0x288>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <int_mode_1+0x28c>)
 80018c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <int_mode_1+0x288>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a5b      	subs	r3, r3, r1
 80018d2:	4912      	ldr	r1, [pc, #72]	@ (800191c <int_mode_1+0x2a0>)
 80018d4:	440b      	add	r3, r1
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f7ff fb83 	bl	8000fe4 <int_to_str>
			print_interface_mode1();
 80018de:	f7ff fceb 	bl	80012b8 <print_interface_mode1>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40010800 	.word	0x40010800
 80018f0:	200003ec 	.word	0x200003ec
 80018f4:	20000405 	.word	0x20000405
 80018f8:	200003e8 	.word	0x200003e8
 80018fc:	92492493 	.word	0x92492493
 8001900:	20000407 	.word	0x20000407
 8001904:	20000406 	.word	0x20000406
 8001908:	200003dc 	.word	0x200003dc
 800190c:	40240000 	.word	0x40240000
 8001910:	000f423f 	.word	0x000f423f
 8001914:	401c0000 	.word	0x401c0000
 8001918:	00027100 	.word	0x00027100
 800191c:	200003f0 	.word	0x200003f0

08001920 <str_to_int>:
uint32_t str_to_int(char* str){
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    uint32_t ans = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	72fb      	strb	r3, [r7, #11]

    // Обрабатываем цифры
    while(str[i] >= '0' && str[i] <= '9'){
 8001930:	e00f      	b.n	8001952 <str_to_int+0x32>
        ans = ans * 10 + (str[i] - '0');
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4619      	mov	r1, r3
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	440b      	add	r3, r1
 8001948:	3b30      	subs	r3, #48	@ 0x30
 800194a:	60fb      	str	r3, [r7, #12]
        i++;
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	3301      	adds	r3, #1
 8001950:	72fb      	strb	r3, [r7, #11]
    while(str[i] >= '0' && str[i] <= '9'){
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b2f      	cmp	r3, #47	@ 0x2f
 800195c:	d905      	bls.n	800196a <str_to_int+0x4a>
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b39      	cmp	r3, #57	@ 0x39
 8001968:	d9e3      	bls.n	8001932 <str_to_int+0x12>
    }

    return ans;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <W5500_Select>:
//ethernet код
void W5500_Select(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2110      	movs	r1, #16
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <W5500_Select+0x14>)
 8001982:	f004 f9f6 	bl	8005d72 <HAL_GPIO_WritePin>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40010800 	.word	0x40010800

08001990 <W5500_Unselect>:

void W5500_Unselect(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	2110      	movs	r1, #16
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <W5500_Unselect+0x14>)
 800199a:	f004 f9ea 	bl	8005d72 <HAL_GPIO_WritePin>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010800 	.word	0x40010800

080019a8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1,buff,len,HAL_MAX_DELAY);
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <W5500_ReadBuff+0x24>)
 80019be:	f009 fccd 	bl	800b35c <HAL_SPI_Receive>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002f4 	.word	0x200002f4

080019d0 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff,uint16_t len){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1,buff,len,HAL_MAX_DELAY);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <W5500_WriteBuff+0x24>)
 80019e6:	f009 fb75 	bl	800b0d4 <HAL_SPI_Transmit>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002f4 	.word	0x200002f4

080019f8 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ffd0 	bl	80019a8 <W5500_ReadBuff>
	return byte;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte){
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8001a1c:	1dfb      	adds	r3, r7, #7
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ffd5 	bl	80019d0 <W5500_WriteBuff>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <Callback_IPAssigned>:
volatile bool ip_assigned = false;
void Callback_IPAssigned(void) {
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    ip_assigned = true;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <Callback_IPAssigned+0x14>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000409 	.word	0x20000409

08001a48 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    ip_assigned = false;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <Callback_IPConflict+0x14>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000409 	.word	0x20000409

08001a60 <process_client_connection>:
uint8_t dhcp_buffer[1024];
uint8_t stat;
// Функция обработки клиентского подключения
void process_client_connection(uint8_t sn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001a6e:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001a72:	701a      	strb	r2, [r3, #0]
    uint8_t received_data[1024];



    // Главный цикл обработки соединения
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001a74:	e08e      	b.n	8001b94 <process_client_connection+0x134>
    {
        // Проверяем есть ли данные для чтения
        uint16_t available = getSn_RX_RSR(sn);
 8001a76:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001a7a:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00d fca8 	bl	800f3d6 <getSn_RX_RSR>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416

        if(available > 0)
 8001a8c:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d072      	beq.n	8001b7a <process_client_connection+0x11a>
        {
            // Читаем данные
            received_len = recv(sn, received_data, sizeof(received_data)-1);
 8001a94:	f107 0108 	add.w	r1, r7, #8
 8001a98:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001a9c:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00e f9aa 	bl	800fe00 <recv>
 8001aac:	f8c7 0410 	str.w	r0, [r7, #1040]	@ 0x410

            if(received_len > 0)
 8001ab0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	dd60      	ble.n	8001b7a <process_client_connection+0x11a>
            {
            	received_data[received_len] = '\0';
 8001ab8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001abc:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8001ac0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
                if(strstr((char*)received_data, "EXIT") != NULL)
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493d      	ldr	r1, [pc, #244]	@ (8001bc4 <process_client_connection+0x164>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f012 ff03 	bl	80148dc <strstr>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <process_client_connection+0x92>
                {
                    send(sn, (uint8_t*)"Goodbye!\r\n", 10);
 8001adc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001ae0:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	4937      	ldr	r1, [pc, #220]	@ (8001bc8 <process_client_connection+0x168>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00e f834 	bl	800fb58 <send>

                    break;
 8001af0:	e062      	b.n	8001bb8 <process_client_connection+0x158>
                }

                uint32_t r=str_to_int((char*)received_data);
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff12 	bl	8001920 <str_to_int>
 8001afc:	f8c7 040c 	str.w	r0, [r7, #1036]	@ 0x40c
                if(r>7 && r<=160000){
 8001b00:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	d90c      	bls.n	8001b22 <process_client_connection+0xc2>
 8001b08:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bcc <process_client_connection+0x16c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d807      	bhi.n	8001b22 <process_client_connection+0xc2>
                	freq[choiced_channel]=r;
 8001b12:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <process_client_connection+0x170>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd4 <process_client_connection+0x174>)
 8001b1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                }
                int_to_str(freq[choiced_channel], num_string[choiced_channel]);
 8001b22:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <process_client_connection+0x170>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <process_client_connection+0x174>)
 8001b2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b2e:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <process_client_connection+0x170>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a5b      	subs	r3, r3, r1
 8001b3a:	4927      	ldr	r1, [pc, #156]	@ (8001bd8 <process_client_connection+0x178>)
 8001b3c:	440b      	add	r3, r1
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f7ff fa4f 	bl	8000fe4 <int_to_str>
                set_freqq(choiced_channel);//устанвливаем частоту введённую через ethernet
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <process_client_connection+0x170>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f986 	bl	8000e5c <set_freqq>
                Write_Flash_Array(freq);
 8001b50:	4820      	ldr	r0, [pc, #128]	@ (8001bd4 <process_client_connection+0x174>)
 8001b52:	f7ff facd 	bl	80010f0 <Write_Flash_Array>
                print_interface_mode0();
 8001b56:	f7ff fb47 	bl	80011e8 <print_interface_mode0>
                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b60:	481e      	ldr	r0, [pc, #120]	@ (8001bdc <process_client_connection+0x17c>)
 8001b62:	f004 f906 	bl	8005d72 <HAL_GPIO_WritePin>
                send(sn, (uint8_t*)"OK\r\n", 4);
 8001b66:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001b6a:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2204      	movs	r2, #4
 8001b72:	491b      	ldr	r1, [pc, #108]	@ (8001be0 <process_client_connection+0x180>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00d ffef 	bl	800fb58 <send>


            }
        }
  	  uint32_t t=HAL_GetTick();
 8001b7a:	f003 faab 	bl	80050d4 <HAL_GetTick>
 8001b7e:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408

  	  while(t>HAL_GetTick()-10);
 8001b82:	bf00      	nop
 8001b84:	f003 faa6 	bl	80050d4 <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	3b0a      	subs	r3, #10
 8001b8c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <process_client_connection+0x124>
    while(getSn_SR(sn) == SOCK_ESTABLISHED)
 8001b94:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001b98:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00d fa71 	bl	800f090 <WIZCHIP_READ>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b17      	cmp	r3, #23
 8001bb2:	f43f af60 	beq.w	8001a76 <process_client_connection+0x16>
        // Небольшая задержка
    }

}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08015f10 	.word	0x08015f10
 8001bc8:	08015f18 	.word	0x08015f18
 8001bcc:	00027100 	.word	0x00027100
 8001bd0:	20000406 	.word	0x20000406
 8001bd4:	200003dc 	.word	0x200003dc
 8001bd8:	200003f0 	.word	0x200003f0
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	08015f24 	.word	0x08015f24

08001be4 <init_server>:
// Функция инициализации сервера
uint8_t init_server(uint8_t sn, uint16_t port)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	80bb      	strh	r3, [r7, #4]
    // Закрываем сокет если был открыт
    if(getSn_SR(sn) != SOCK_CLOSED) {
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00d fa45 	bl	800f090 <WIZCHIP_READ>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <init_server+0x30>
        close(sn);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00d fe58 	bl	800f8c4 <close>
    }

    // Создаем сокет
    if((stat = socket(sn, Sn_MR_TCP, port, 0)) != sn) {
 8001c14:	88ba      	ldrh	r2, [r7, #4]
 8001c16:	79f8      	ldrb	r0, [r7, #7]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	f00d fd1e 	bl	800f65c <socket>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <init_server+0x80>)
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <init_server+0x80>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <init_server+0x52>

        return 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e012      	b.n	8001c5c <init_server+0x78>
    }

    // Слушаем порт
    if((stat = listen(sn)) != SOCK_OK) {
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00d feb1 	bl	800f9a0 <listen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <init_server+0x80>)
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <init_server+0x80>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <init_server+0x76>
        close(sn);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00d fe37 	bl	800f8c4 <close>
        return 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <init_server+0x78>
    }

    return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000080c 	.word	0x2000080c

08001c68 <ethernet_work>:
void ethernet_work(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	// Мигание светодиодом в режиме ожидания
	          static uint32_t led_timer = 0;
	          if(HAL_GetTick() - led_timer > 500) {
 8001c6e:	f003 fa31 	bl	80050d4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <ethernet_work+0xc8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c7e:	d909      	bls.n	8001c94 <ethernet_work+0x2c>
	              HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c84:	482b      	ldr	r0, [pc, #172]	@ (8001d34 <ethernet_work+0xcc>)
 8001c86:	f004 f88c 	bl	8005da2 <HAL_GPIO_TogglePin>
	              led_timer = HAL_GetTick();
 8001c8a:	f003 fa23 	bl	80050d4 <HAL_GetTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <ethernet_work+0xc8>)
 8001c92:	6013      	str	r3, [r2, #0]
	          }

	          // Проверяем статус сокета
	          socket_status = getSn_SR(HTTP_SOCKET);
 8001c94:	f44f 7042 	mov.w	r0, #776	@ 0x308
 8001c98:	f00d f9fa 	bl	800f090 <WIZCHIP_READ>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <ethernet_work+0xd0>)
 8001ca2:	701a      	strb	r2, [r3, #0]

	          switch(socket_status)
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <ethernet_work+0xd0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b17      	cmp	r3, #23
 8001caa:	d011      	beq.n	8001cd0 <ethernet_work+0x68>
 8001cac:	2b17      	cmp	r3, #23
 8001cae:	dc32      	bgt.n	8001d16 <ethernet_work+0xae>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d025      	beq.n	8001d00 <ethernet_work+0x98>
 8001cb4:	2b14      	cmp	r3, #20
 8001cb6:	d12e      	bne.n	8001d16 <ethernet_work+0xae>
	          {
	              case SOCK_LISTEN:
	                  // Ожидаем подключения
	            	  uint32_t t=HAL_GetTick();
 8001cb8:	f003 fa0c 	bl	80050d4 <HAL_GetTick>
 8001cbc:	6078      	str	r0, [r7, #4]
	            	  while(t>HAL_GetTick()-100);
 8001cbe:	bf00      	nop
 8001cc0:	f003 fa08 	bl	80050d4 <HAL_GetTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	3b64      	subs	r3, #100	@ 0x64
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d8f8      	bhi.n	8001cc0 <ethernet_work+0x58>
	                  //HAL_Delay(100);
	                  break;
 8001cce:	e02b      	b.n	8001d28 <ethernet_work+0xc0>

	              case SOCK_ESTABLISHED:
	                  // Клиент подключен - обрабатываем
	            	  if(interface_mode==0){
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <ethernet_work+0xd4>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d126      	bne.n	8001d26 <ethernet_work+0xbe>
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cde:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <ethernet_work+0xcc>)
 8001ce0:	f004 f847 	bl	8005d72 <HAL_GPIO_WritePin>

	                  process_client_connection(HTTP_SOCKET);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff febb 	bl	8001a60 <process_client_connection>
	                  disconnect(HTTP_SOCKET);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f00d feb2 	bl	800fa54 <disconnect>
	                  close(HTTP_SOCKET);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f00d fde7 	bl	800f8c4 <close>
	                  // Переинициализируем сервер
	                  init_server(HTTP_SOCKET, 80);
 8001cf6:	2150      	movs	r1, #80	@ 0x50
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff ff73 	bl	8001be4 <init_server>
	            	  }
	                  break;
 8001cfe:	e012      	b.n	8001d26 <ethernet_work+0xbe>


	              case SOCK_CLOSED:
	                  // Сервер не запущен - пытаемся перезапустить
	                  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // LED OFF
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d06:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <ethernet_work+0xcc>)
 8001d08:	f004 f833 	bl	8005d72 <HAL_GPIO_WritePin>
	                  init_server(HTTP_SOCKET, 80);
 8001d0c:	2150      	movs	r1, #80	@ 0x50
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff ff68 	bl	8001be4 <init_server>
	                  break;
 8001d14:	e008      	b.n	8001d28 <ethernet_work+0xc0>

	              default:
	                  // Неизвестный статус - перезапускаем

	                  close(HTTP_SOCKET);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f00d fdd4 	bl	800f8c4 <close>
	                  init_server(HTTP_SOCKET, 80);
 8001d1c:	2150      	movs	r1, #80	@ 0x50
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff ff60 	bl	8001be4 <init_server>
	                  //HAL_Delay(1000);
	                  break;
 8001d24:	e000      	b.n	8001d28 <ethernet_work+0xc0>
	                  break;
 8001d26:	bf00      	nop
	          }

	          //HAL_Delay(10);
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000810 	.word	0x20000810
 8001d34:	40011000 	.word	0x40011000
 8001d38:	20000408 	.word	0x20000408
 8001d3c:	20000407 	.word	0x20000407

08001d40 <W5500Init>:

uint8_t W5500Init() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
    uint8_t retry_count = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
    uint8_t success = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73bb      	strb	r3, [r7, #14]

    // Несколько попыток инициализации
    while (retry_count < 3 && !success) {
 8001d4e:	e05e      	b.n	8001e0e <W5500Init+0xce>
        // Регистрация callback функций
        reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8001d50:	4934      	ldr	r1, [pc, #208]	@ (8001e24 <W5500Init+0xe4>)
 8001d52:	4835      	ldr	r0, [pc, #212]	@ (8001e28 <W5500Init+0xe8>)
 8001d54:	f00e fd64 	bl	8010820 <reg_wizchip_cs_cbfunc>
        reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001d58:	4934      	ldr	r1, [pc, #208]	@ (8001e2c <W5500Init+0xec>)
 8001d5a:	4835      	ldr	r0, [pc, #212]	@ (8001e30 <W5500Init+0xf0>)
 8001d5c:	f00e fd84 	bl	8010868 <reg_wizchip_spi_cbfunc>
        reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8001d60:	4934      	ldr	r1, [pc, #208]	@ (8001e34 <W5500Init+0xf4>)
 8001d62:	4835      	ldr	r0, [pc, #212]	@ (8001e38 <W5500Init+0xf8>)
 8001d64:	f00e fdac 	bl	80108c0 <reg_wizchip_spiburst_cbfunc>

        uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001d68:	4a34      	ldr	r2, [pc, #208]	@ (8001e3c <W5500Init+0xfc>)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d70:	e883 0003 	stmia.w	r3, {r0, r1}

        // Проверка инициализации W5500
        if (wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes) == 0) {
 8001d74:	463a      	mov	r2, r7
 8001d76:	463b      	mov	r3, r7
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00e fe18 	bl	80109b0 <wizchip_init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d13c      	bne.n	8001e00 <W5500Init+0xc0>
            // Установка MAC адреса
            setSHAR(net_info.mac);
 8001d86:	2206      	movs	r2, #6
 8001d88:	492d      	ldr	r1, [pc, #180]	@ (8001e40 <W5500Init+0x100>)
 8001d8a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001d8e:	f00d fa79 	bl	800f284 <WIZCHIP_WRITE_BUF>

            // Инициализация DHCP
            DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8001d92:	492c      	ldr	r1, [pc, #176]	@ (8001e44 <W5500Init+0x104>)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f010 f9bd 	bl	8012114 <DHCP_init>
            reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <W5500Init+0x108>)
 8001d9c:	492b      	ldr	r1, [pc, #172]	@ (8001e4c <W5500Init+0x10c>)
 8001d9e:	482b      	ldr	r0, [pc, #172]	@ (8001e4c <W5500Init+0x10c>)
 8001da0:	f00e ff18 	bl	8010bd4 <reg_dhcp_cbfunc>

            // Ожидание получения IP с таймаутом
            uint32_t timeout = 10000; // 10 секунд максимум
 8001da4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001da8:	60bb      	str	r3, [r7, #8]
            ip_assigned = false;
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <W5500Init+0x110>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

            while (!ip_assigned && timeout > 0) {
 8001db0:	e007      	b.n	8001dc2 <W5500Init+0x82>
                DHCP_run();
 8001db2:	f00f fff7 	bl	8011da4 <DHCP_run>
                timeout--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
                HAL_Delay(1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f003 f993 	bl	80050e8 <HAL_Delay>
            while (!ip_assigned && timeout > 0) {
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <W5500Init+0x110>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <W5500Init+0x98>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ec      	bne.n	8001db2 <W5500Init+0x72>
            }

            if (ip_assigned) {
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <W5500Init+0x110>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <W5500Init+0xc0>
                getIPfromDHCP(net_info.ip);
 8001de2:	481c      	ldr	r0, [pc, #112]	@ (8001e54 <W5500Init+0x114>)
 8001de4:	f010 fa40 	bl	8012268 <getIPfromDHCP>
                getGWfromDHCP(net_info.gw);
 8001de8:	481b      	ldr	r0, [pc, #108]	@ (8001e58 <W5500Init+0x118>)
 8001dea:	f010 fa5b 	bl	80122a4 <getGWfromDHCP>
                getSNfromDHCP(net_info.sn);
 8001dee:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <W5500Init+0x11c>)
 8001df0:	f010 fa76 	bl	80122e0 <getSNfromDHCP>
                wizchip_setnetinfo(&net_info);
 8001df4:	4812      	ldr	r0, [pc, #72]	@ (8001e40 <W5500Init+0x100>)
 8001df6:	f00e fe67 	bl	8010ac8 <wizchip_setnetinfo>
                success = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73bb      	strb	r3, [r7, #14]
                break;
 8001dfe:	e00c      	b.n	8001e1a <W5500Init+0xda>
            }
        }

        retry_count++;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
        HAL_Delay(500); // Задержка между попытками
 8001e06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e0a:	f003 f96d 	bl	80050e8 <HAL_Delay>
    while (retry_count < 3 && !success) {
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d802      	bhi.n	8001e1a <W5500Init+0xda>
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d09a      	beq.n	8001d50 <W5500Init+0x10>
    }

    return success;
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	08001991 	.word	0x08001991
 8001e28:	08001979 	.word	0x08001979
 8001e2c:	08001a13 	.word	0x08001a13
 8001e30:	080019f9 	.word	0x080019f9
 8001e34:	080019d1 	.word	0x080019d1
 8001e38:	080019a9 	.word	0x080019a9
 8001e3c:	08015f2c 	.word	0x08015f2c
 8001e40:	20000000 	.word	0x20000000
 8001e44:	2000040c 	.word	0x2000040c
 8001e48:	08001a49 	.word	0x08001a49
 8001e4c:	08001a31 	.word	0x08001a31
 8001e50:	20000409 	.word	0x20000409
 8001e54:	20000006 	.word	0x20000006
 8001e58:	2000000e 	.word	0x2000000e
 8001e5c:	2000000a 	.word	0x2000000a

08001e60 <HAL_TIM_PeriodElapsedCallback>:
//функция для работы программы во время прерываний
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e70:	d110      	bne.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x34>
    {
    	//uint8_t socket_status = getSn_SR(HTTP_SOCKET);
    	if(interface_mode==0 && socket_status!=SOCK_ESTABLISHED){
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x28>
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b17      	cmp	r3, #23
 8001e80:	d002      	beq.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x28>
    		//ethernet_work();
    		int_mode_0();
 8001e82:	f7ff fb3b 	bl	80014fc <int_mode_0>
    	}else if(interface_mode==1){
    		int_mode_1();
    	}
    }
}
 8001e86:	e005      	b.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x34>
    	}else if(interface_mode==1){
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x34>
    		int_mode_1();
 8001e90:	f7ff fbf4 	bl	800167c <int_mode_1>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000407 	.word	0x20000407
 8001ea0:	20000408 	.word	0x20000408

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea8:	b09c      	sub	sp, #112	@ 0x70
 8001eaa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eac:	f003 f8ba 	bl	8005024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb0:	f000 f940 	bl	8002134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb4:	f000 fadc 	bl	8002470 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eb8:	f000 f996 	bl	80021e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ebc:	f000 fa26 	bl	800230c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001ec0:	f000 f9c0 	bl	8002244 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001ec4:	f000 fa7a 	bl	80023bc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001ec8:	f011 fdac 	bl	8013a24 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001ecc:	f000 f9e8 	bl	80022a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001ed0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed4:	f003 f908 	bl	80050e8 <HAL_Delay>
  W5500Init();
 8001ed8:	f7ff ff32 	bl	8001d40 <W5500Init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001edc:	213c      	movs	r1, #60	@ 0x3c
 8001ede:	4888      	ldr	r0, [pc, #544]	@ (8002100 <main+0x25c>)
 8001ee0:	f00a f851 	bl	800bf86 <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001ee4:	f002 fea0 	bl	8004c28 <ssd1306_Init>
  set_encoder(0);//выставление энкодера в 0
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff f96d 	bl	80011c8 <set_encoder>
      freq[0]=8;//начальная минимальная частота канала 0
 8001eee:	4a85      	ldr	r2, [pc, #532]	@ (8002104 <main+0x260>)
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
      freq[1]=8;//начальная минимальная частота канала 1
 8001ef4:	4a83      	ldr	r2, [pc, #524]	@ (8002104 <main+0x260>)
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	6053      	str	r3, [r2, #4]
      freq[2]=8;//начальная минимальная частота канала 2
 8001efa:	4a82      	ldr	r2, [pc, #520]	@ (8002104 <main+0x260>)
 8001efc:	2308      	movs	r3, #8
 8001efe:	6093      	str	r3, [r2, #8]

      if (Is_Flash_Valid()==0) {
 8001f00:	f7ff f8c2 	bl	8001088 <Is_Flash_Valid>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <main+0x6e>
          Write_Flash_Array(freq);
 8001f0a:	487e      	ldr	r0, [pc, #504]	@ (8002104 <main+0x260>)
 8001f0c:	f7ff f8f0 	bl	80010f0 <Write_Flash_Array>
 8001f10:	e002      	b.n	8001f18 <main+0x74>
      }else{
    	  Read_Flash_Array(freq);
 8001f12:	487c      	ldr	r0, [pc, #496]	@ (8002104 <main+0x260>)
 8001f14:	f7ff f8ce 	bl	80010b4 <Read_Flash_Array>
      }
      choice=0;//переменная для считывания был ли нажат энкодер
 8001f18:	4a7b      	ldr	r2, [pc, #492]	@ (8002108 <main+0x264>)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	7013      	strb	r3, [r2, #0]
      //записываем частоты в строки для них
      int_to_str(freq[2],num_string[2]);
 8001f1e:	4b79      	ldr	r3, [pc, #484]	@ (8002104 <main+0x260>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	497a      	ldr	r1, [pc, #488]	@ (800210c <main+0x268>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f85d 	bl	8000fe4 <int_to_str>
      int_to_str(freq[1],num_string[1]);
 8001f2a:	4b76      	ldr	r3, [pc, #472]	@ (8002104 <main+0x260>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4978      	ldr	r1, [pc, #480]	@ (8002110 <main+0x26c>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f857 	bl	8000fe4 <int_to_str>
      int_to_str(freq[0],num_string[0]);
 8001f36:	4b73      	ldr	r3, [pc, #460]	@ (8002104 <main+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4976      	ldr	r1, [pc, #472]	@ (8002114 <main+0x270>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f851 	bl	8000fe4 <int_to_str>
      choiced_num=0;//переменная для определения выбранной цифры в массиве частоты
 8001f42:	4a75      	ldr	r2, [pc, #468]	@ (8002118 <main+0x274>)
 8001f44:	2300      	movs	r3, #0
 8001f46:	7013      	strb	r3, [r2, #0]
      choiced_channel=0;// номер выбранного канала
 8001f48:	4a74      	ldr	r2, [pc, #464]	@ (800211c <main+0x278>)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	7013      	strb	r3, [r2, #0]
      interface_mode=0;//переменная для определения что должно показыватиься на экране(0-значения частот, 1-редактирование частоты)
 8001f4e:	4a74      	ldr	r2, [pc, #464]	@ (8002120 <main+0x27c>)
 8001f50:	2300      	movs	r3, #0
 8001f52:	7013      	strb	r3, [r2, #0]
      prev_encoder=8;
 8001f54:	4a73      	ldr	r2, [pc, #460]	@ (8002124 <main+0x280>)
 8001f56:	2308      	movs	r3, #8
 8001f58:	6013      	str	r3, [r2, #0]
      print_interface_mode0();
 8001f5a:	f7ff f945 	bl	80011e8 <print_interface_mode0>
      HAL_TIM_Base_Start_IT(&htim2);  // Запуск таймера с прерыванием
 8001f5e:	4872      	ldr	r0, [pc, #456]	@ (8002128 <main+0x284>)
 8001f60:	f009 fece 	bl	800bd00 <HAL_TIM_Base_Start_IT>
      // Инициализация W5500




            int32_t si5351_FREQ_CORR = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	667b      	str	r3, [r7, #100]	@ 0x64
            uint8_t si5351_XTAL = 25;
 8001f68:	2319      	movs	r3, #25
 8001f6a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            si5351_init(&hi2c1, SI5351_BUS_BASE_ADDR, SI5351_CRYSTAL_LOAD_0PF, si5351_XTAL*1000000, si5351_FREQ_CORR);
 8001f6e:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8001f72:	4b6e      	ldr	r3, [pc, #440]	@ (800212c <main+0x288>)
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	2200      	movs	r2, #0
 8001f82:	2160      	movs	r1, #96	@ 0x60
 8001f84:	486a      	ldr	r0, [pc, #424]	@ (8002130 <main+0x28c>)
 8001f86:	f000 faf1 	bl	800256c <si5351_init>

            si5351_drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA);
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f001 f907 	bl	80031a0 <si5351_drive_strength>
            si5351_drive_strength(SI5351_CLK1, SI5351_DRIVE_8MA);
 8001f92:	2103      	movs	r1, #3
 8001f94:	2001      	movs	r0, #1
 8001f96:	f001 f903 	bl	80031a0 <si5351_drive_strength>
            si5351_drive_strength(SI5351_CLK2, SI5351_DRIVE_8MA);
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f001 f8ff 	bl	80031a0 <si5351_drive_strength>

            si5351_set_freq(freq[0]*1000*100ULL, SI5351_CLK0);
 8001fa2:	4b58      	ldr	r3, [pc, #352]	@ (8002104 <main+0x260>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	17da      	asrs	r2, r3, #31
 8001fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fb2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fb8:	1891      	adds	r1, r2, r2
 8001fba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fbc:	415b      	adcs	r3, r3
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001fc6:	1854      	adds	r4, r2, r1
 8001fc8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001fca:	eb43 0501 	adc.w	r5, r3, r1
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	016b      	lsls	r3, r5, #5
 8001fd8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001fdc:	0162      	lsls	r2, r4, #5
 8001fde:	18a1      	adds	r1, r4, r2
 8001fe0:	6239      	str	r1, [r7, #32]
 8001fe2:	eb45 0303 	adc.w	r3, r5, r3
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fec:	4623      	mov	r3, r4
 8001fee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	189b      	adds	r3, r3, r2
 8001ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	462a      	mov	r2, r5
 8001ffc:	eb42 0303 	adc.w	r3, r2, r3
 8002000:	657b      	str	r3, [r7, #84]	@ 0x54
 8002002:	2200      	movs	r2, #0
 8002004:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002008:	f000 fbda 	bl	80027c0 <si5351_set_freq>
            si5351_set_freq(freq[1]*1000*100ULL, SI5351_CLK1);
 800200c:	4b3d      	ldr	r3, [pc, #244]	@ (8002104 <main+0x260>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	17da      	asrs	r2, r3, #31
 800201a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800201e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002022:	4622      	mov	r2, r4
 8002024:	462b      	mov	r3, r5
 8002026:	1891      	adds	r1, r2, r2
 8002028:	61b9      	str	r1, [r7, #24]
 800202a:	415b      	adcs	r3, r3
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	4604      	mov	r4, r0
 8002038:	eb12 0a04 	adds.w	sl, r2, r4
 800203c:	460c      	mov	r4, r1
 800203e:	eb43 0b04 	adc.w	fp, r3, r4
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800204e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002052:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002056:	eb1a 0402 	adds.w	r4, sl, r2
 800205a:	613c      	str	r4, [r7, #16]
 800205c:	eb4b 0303 	adc.w	r3, fp, r3
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002066:	4623      	mov	r3, r4
 8002068:	4602      	mov	r2, r0
 800206a:	189b      	adds	r3, r3, r2
 800206c:	643b      	str	r3, [r7, #64]	@ 0x40
 800206e:	460b      	mov	r3, r1
 8002070:	462a      	mov	r2, r5
 8002072:	eb42 0303 	adc.w	r3, r2, r3
 8002076:	647b      	str	r3, [r7, #68]	@ 0x44
 8002078:	2201      	movs	r2, #1
 800207a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800207e:	f000 fb9f 	bl	80027c0 <si5351_set_freq>
            si5351_set_freq(freq[2]*1000*100ULL, SI5351_CLK2);
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <main+0x260>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	17da      	asrs	r2, r3, #31
 8002090:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002092:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002094:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002098:	4622      	mov	r2, r4
 800209a:	462b      	mov	r3, r5
 800209c:	1891      	adds	r1, r2, r2
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	415b      	adcs	r3, r3
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	4604      	mov	r4, r0
 80020ae:	eb12 0804 	adds.w	r8, r2, r4
 80020b2:	460c      	mov	r4, r1
 80020b4:	eb43 0904 	adc.w	r9, r3, r4
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80020c4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80020c8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80020cc:	eb18 0402 	adds.w	r4, r8, r2
 80020d0:	603c      	str	r4, [r7, #0]
 80020d2:	eb49 0303 	adc.w	r3, r9, r3
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020dc:	4623      	mov	r3, r4
 80020de:	4602      	mov	r2, r0
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80020e4:	460b      	mov	r3, r1
 80020e6:	462a      	mov	r2, r5
 80020e8:	eb42 0303 	adc.w	r3, r2, r3
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ee:	2202      	movs	r2, #2
 80020f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80020f4:	f000 fb64 	bl	80027c0 <si5351_set_freq>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ethernet_work();
 80020f8:	f7ff fdb6 	bl	8001c68 <ethernet_work>
 80020fc:	e7fc      	b.n	80020f8 <main+0x254>
 80020fe:	bf00      	nop
 8002100:	2000034c 	.word	0x2000034c
 8002104:	200003dc 	.word	0x200003dc
 8002108:	200003ec 	.word	0x200003ec
 800210c:	200003fe 	.word	0x200003fe
 8002110:	200003f7 	.word	0x200003f7
 8002114:	200003f0 	.word	0x200003f0
 8002118:	20000405 	.word	0x20000405
 800211c:	20000406 	.word	0x20000406
 8002120:	20000407 	.word	0x20000407
 8002124:	200003e8 	.word	0x200003e8
 8002128:	20000394 	.word	0x20000394
 800212c:	000f4240 	.word	0x000f4240
 8002130:	2000024c 	.word	0x2000024c

08002134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b094      	sub	sp, #80	@ 0x50
 8002138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213e:	2228      	movs	r2, #40	@ 0x28
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f012 fbb0 	bl	80148a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002164:	2301      	movs	r3, #1
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002172:	2301      	movs	r3, #1
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002180:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218a:	4618      	mov	r0, r3
 800218c:	f008 fa6c 	bl	800a668 <HAL_RCC_OscConfig>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002196:	f000 f9e3 	bl	8002560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219a:	230f      	movs	r3, #15
 800219c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f008 fcd8 	bl	800ab6c <HAL_RCC_ClockConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80021c2:	f000 f9cd 	bl	8002560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021c6:	2310      	movs	r3, #16
 80021c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f008 fe45 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80021dc:	f000 f9c0 	bl	8002560 <Error_Handler>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3750      	adds	r7, #80	@ 0x50
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021ee:	4a13      	ldr	r2, [pc, #76]	@ (800223c <MX_I2C1_Init+0x54>)
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021f4:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <MX_I2C1_Init+0x58>)
 80021f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800220a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002224:	4804      	ldr	r0, [pc, #16]	@ (8002238 <MX_I2C1_Init+0x50>)
 8002226:	f003 fdd5 	bl	8005dd4 <HAL_I2C_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002230:	f000 f996 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000024c 	.word	0x2000024c
 800223c:	40005400 	.word	0x40005400
 8002240:	000186a0 	.word	0x000186a0

08002244 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <MX_I2C2_Init+0x50>)
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <MX_I2C2_Init+0x54>)
 800224c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002250:	4a12      	ldr	r2, [pc, #72]	@ (800229c <MX_I2C2_Init+0x58>)
 8002252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_I2C2_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002262:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002266:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <MX_I2C2_Init+0x50>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800226e:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002274:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <MX_I2C2_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <MX_I2C2_Init+0x50>)
 8002282:	f003 fda7 	bl	8005dd4 <HAL_I2C_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800228c:	f000 f968 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200002a0 	.word	0x200002a0
 8002298:	40005800 	.word	0x40005800
 800229c:	000186a0 	.word	0x000186a0

080022a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	@ (8002308 <MX_SPI1_Init+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022d4:	2218      	movs	r2, #24
 80022d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e4:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022ec:	220a      	movs	r2, #10
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022f0:	4804      	ldr	r0, [pc, #16]	@ (8002304 <MX_SPI1_Init+0x64>)
 80022f2:	f008 fe6b 	bl	800afcc <HAL_SPI_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022fc:	f000 f930 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	200002f4 	.word	0x200002f4
 8002308:	40013000 	.word	0x40013000

0800230c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	2224      	movs	r2, #36	@ 0x24
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f012 fac4 	bl	80148a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002328:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 800232a:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <MX_TIM1_Init+0xac>)
 800232c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 800233c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002354:	2303      	movs	r3, #3
 8002356:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800235c:	2301      	movs	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800236c:	2301      	movs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 8002380:	f009 fd5f 	bl	800be42 <HAL_TIM_Encoder_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800238a:	f000 f8e9 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4806      	ldr	r0, [pc, #24]	@ (80023b4 <MX_TIM1_Init+0xa8>)
 800239c:	f00a fa72 	bl	800c884 <HAL_TIMEx_MasterConfigSynchronization>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023a6:	f000 f8db 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	3730      	adds	r7, #48	@ 0x30
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000034c 	.word	0x2000034c
 80023b8:	40012c00 	.word	0x40012c00

080023bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	@ 0x28
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	615a      	str	r2, [r3, #20]
 80023dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023de:	4b23      	ldr	r3, [pc, #140]	@ (800246c <MX_TIM2_Init+0xb0>)
 80023e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80023e6:	4b21      	ldr	r3, [pc, #132]	@ (800246c <MX_TIM2_Init+0xb0>)
 80023e8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80023ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_TIM2_Init+0xb0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <MX_TIM2_Init+0xb0>)
 80023f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_TIM2_Init+0xb0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_TIM2_Init+0xb0>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002408:	4818      	ldr	r0, [pc, #96]	@ (800246c <MX_TIM2_Init+0xb0>)
 800240a:	f009 fccb 	bl	800bda4 <HAL_TIM_PWM_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002414:	f000 f8a4 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4619      	mov	r1, r3
 8002426:	4811      	ldr	r0, [pc, #68]	@ (800246c <MX_TIM2_Init+0xb0>)
 8002428:	f00a fa2c 	bl	800c884 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002432:	f000 f895 	bl	8002560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	@ 0x60
 8002438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4807      	ldr	r0, [pc, #28]	@ (800246c <MX_TIM2_Init+0xb0>)
 800244e:	f009 ff19 	bl	800c284 <HAL_TIM_PWM_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002458:	f000 f882 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <MX_TIM2_Init+0xb0>)
 800245e:	f002 fa4d 	bl	80048fc <HAL_TIM_MspPostInit>

}
 8002462:	bf00      	nop
 8002464:	3728      	adds	r7, #40	@ 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000394 	.word	0x20000394

08002470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <MX_GPIO_Init+0xe4>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a32      	ldr	r2, [pc, #200]	@ (8002554 <MX_GPIO_Init+0xe4>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b30      	ldr	r3, [pc, #192]	@ (8002554 <MX_GPIO_Init+0xe4>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249c:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <MX_GPIO_Init+0xe4>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a26      	ldr	r2, [pc, #152]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a20      	ldr	r2, [pc, #128]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <MX_GPIO_Init+0xe4>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ea:	481b      	ldr	r0, [pc, #108]	@ (8002558 <MX_GPIO_Init+0xe8>)
 80024ec:	f003 fc41 	bl	8005d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2110      	movs	r1, #16
 80024f4:	4819      	ldr	r0, [pc, #100]	@ (800255c <MX_GPIO_Init+0xec>)
 80024f6:	f003 fc3c 	bl	8005d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2302      	movs	r3, #2
 800250a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4619      	mov	r1, r3
 8002512:	4811      	ldr	r0, [pc, #68]	@ (8002558 <MX_GPIO_Init+0xe8>)
 8002514:	f003 fa92 	bl	8005a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	4619      	mov	r1, r3
 800252a:	480c      	ldr	r0, [pc, #48]	@ (800255c <MX_GPIO_Init+0xec>)
 800252c:	f003 fa86 	bl	8005a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002530:	2310      	movs	r3, #16
 8002532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2302      	movs	r3, #2
 800253e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_GPIO_Init+0xec>)
 8002548:	f003 fa78 	bl	8005a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40011000 	.word	0x40011000
 800255c:	40010800 	.word	0x40010800

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <Error_Handler+0x8>

0800256c <si5351_init>:
 *
 * Returns a boolean that indicates whether a device was found on the desired
 * I2C address.
 *
 */
bool si5351_init(I2C_HandleTypeDef *_hi2c, uint8_t i2c_addr, uint8_t xtal_load_c, uint32_t xo_freq, int32_t corr) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	72fb      	strb	r3, [r7, #11]
 800257a:	4613      	mov	r3, r2
 800257c:	72bb      	strb	r3, [r7, #10]
	hi2c = _hi2c;
 800257e:	4a24      	ldr	r2, [pc, #144]	@ (8002610 <si5351_init+0xa4>)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6013      	str	r3, [r2, #0]
  i2c_bus_addr = i2c_addr;
 8002584:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <si5351_init+0xa8>)
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	7013      	strb	r3, [r2, #0]
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <si5351_init+0xac>)
 800258c:	4a23      	ldr	r2, [pc, #140]	@ (800261c <si5351_init+0xb0>)
 800258e:	601a      	str	r2, [r3, #0]

	// Start by using XO ref osc as default for each PLL
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <si5351_init+0xb4>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 8002596:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <si5351_init+0xb8>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
	clkin_div = SI5351_CLKIN_DIV_1;
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <si5351_init+0xbc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]

	// Check for a device on the bus, bail out if it is not there
	uint8_t reg_val = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]

	if(reg_val == 0) {
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12c      	bne.n	8002606 <si5351_init+0x9a>
		// Wait for SYS_INIT flag to be clear, indicating that device is ready
		uint8_t status_reg = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75bb      	strb	r3, [r7, #22]
		do
		{
			status_reg = si5351_read(SI5351_DEVICE_STATUS);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f001 ffc9 	bl	8004548 <si5351_read>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75bb      	strb	r3, [r7, #22]
		} while (status_reg >> 7 == 1);
 80025ba:	7dbb      	ldrb	r3, [r7, #22]
 80025bc:	09db      	lsrs	r3, r3, #7
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d0f5      	beq.n	80025b0 <si5351_init+0x44>

		// Set crystal load capacitance
		si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 80025c4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80025c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f043 0312 	orr.w	r3, r3, #18
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	20b7      	movs	r0, #183	@ 0xb7
 80025da:	f001 ff8b 	bl	80044f4 <si5351_write>

		// Set up the XO reference frequency
		if (xo_freq != 0)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <si5351_init+0x82>
		{
			set_ref_freq(xo_freq, SI5351_PLL_INPUT_XO);
 80025e4:	2100      	movs	r1, #0
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 feb4 	bl	8003354 <set_ref_freq>
 80025ec:	e003      	b.n	80025f6 <si5351_init+0x8a>
		}
		else
		{
			set_ref_freq(SI5351_XTAL_FREQ, SI5351_PLL_INPUT_XO);
 80025ee:	2100      	movs	r1, #0
 80025f0:	480a      	ldr	r0, [pc, #40]	@ (800261c <si5351_init+0xb0>)
 80025f2:	f000 feaf 	bl	8003354 <set_ref_freq>
		}

		// Set the frequency calibration for the XO
		set_correction(corr, SI5351_PLL_INPUT_XO);
 80025f6:	2100      	movs	r1, #0
 80025f8:	6a38      	ldr	r0, [r7, #32]
 80025fa:	f000 fe17 	bl	800322c <set_correction>

		si5351_reset();
 80025fe:	f000 f817 	bl	8002630 <si5351_reset>

		return true;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <si5351_init+0x9c>
	}
	else
	{
		return false;
 8002606:	2300      	movs	r3, #0
	}
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000814 	.word	0x20000814
 8002614:	20000871 	.word	0x20000871
 8002618:	2000087c 	.word	0x2000087c
 800261c:	017d7840 	.word	0x017d7840
 8002620:	2000088c 	.word	0x2000088c
 8002624:	2000088d 	.word	0x2000088d
 8002628:	20000870 	.word	0x20000870
 800262c:	00000000 	.word	0x00000000

08002630 <si5351_reset>:
 * si5351_reset(void)
 *
 * Call to reset the Si5351 to the state initialized by the library.
 *
 */
void si5351_reset(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
	// Initialize the CLK outputs according to flowchart in datasheet
	// First, turn them off
	si5351_write(16, 0x80);
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	2010      	movs	r0, #16
 800263a:	f001 ff5b 	bl	80044f4 <si5351_write>
	si5351_write(17, 0x80);
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	2011      	movs	r0, #17
 8002642:	f001 ff57 	bl	80044f4 <si5351_write>
	si5351_write(18, 0x80);
 8002646:	2180      	movs	r1, #128	@ 0x80
 8002648:	2012      	movs	r0, #18
 800264a:	f001 ff53 	bl	80044f4 <si5351_write>
	si5351_write(19, 0x80);
 800264e:	2180      	movs	r1, #128	@ 0x80
 8002650:	2013      	movs	r0, #19
 8002652:	f001 ff4f 	bl	80044f4 <si5351_write>
	si5351_write(20, 0x80);
 8002656:	2180      	movs	r1, #128	@ 0x80
 8002658:	2014      	movs	r0, #20
 800265a:	f001 ff4b 	bl	80044f4 <si5351_write>
	si5351_write(21, 0x80);
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	2015      	movs	r0, #21
 8002662:	f001 ff47 	bl	80044f4 <si5351_write>
	si5351_write(22, 0x80);
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	2016      	movs	r0, #22
 800266a:	f001 ff43 	bl	80044f4 <si5351_write>
	si5351_write(23, 0x80);
 800266e:	2180      	movs	r1, #128	@ 0x80
 8002670:	2017      	movs	r0, #23
 8002672:	f001 ff3f 	bl	80044f4 <si5351_write>

	// Turn the clocks back on...
	si5351_write(16, 0x0c);
 8002676:	210c      	movs	r1, #12
 8002678:	2010      	movs	r0, #16
 800267a:	f001 ff3b 	bl	80044f4 <si5351_write>
	si5351_write(17, 0x0c);
 800267e:	210c      	movs	r1, #12
 8002680:	2011      	movs	r0, #17
 8002682:	f001 ff37 	bl	80044f4 <si5351_write>
	si5351_write(18, 0x0c);
 8002686:	210c      	movs	r1, #12
 8002688:	2012      	movs	r0, #18
 800268a:	f001 ff33 	bl	80044f4 <si5351_write>
	si5351_write(19, 0x0c);
 800268e:	210c      	movs	r1, #12
 8002690:	2013      	movs	r0, #19
 8002692:	f001 ff2f 	bl	80044f4 <si5351_write>
	si5351_write(20, 0x0c);
 8002696:	210c      	movs	r1, #12
 8002698:	2014      	movs	r0, #20
 800269a:	f001 ff2b 	bl	80044f4 <si5351_write>
	si5351_write(21, 0x0c);
 800269e:	210c      	movs	r1, #12
 80026a0:	2015      	movs	r0, #21
 80026a2:	f001 ff27 	bl	80044f4 <si5351_write>
	si5351_write(22, 0x0c);
 80026a6:	210c      	movs	r1, #12
 80026a8:	2016      	movs	r0, #22
 80026aa:	f001 ff23 	bl	80044f4 <si5351_write>
	si5351_write(23, 0x0c);
 80026ae:	210c      	movs	r1, #12
 80026b0:	2017      	movs	r0, #23
 80026b2:	f001 ff1f 	bl	80044f4 <si5351_write>

	// Set PLLA and PLLB to 800 MHz for automatic tuning
	set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 80026b6:	2200      	movs	r2, #0
 80026b8:	a13e      	add	r1, pc, #248	@ (adr r1, 80027b4 <si5351_reset+0x184>)
 80026ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026be:	f000 fae3 	bl	8002c88 <set_pll>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
 80026c2:	2201      	movs	r2, #1
 80026c4:	a13b      	add	r1, pc, #236	@ (adr r1, 80027b4 <si5351_reset+0x184>)
 80026c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ca:	f000 fadd 	bl	8002c88 <set_pll>

	// Make PLL to CLK assignments for automatic tuning
	pll_assignment[0] = SI5351_PLLA;
 80026ce:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <si5351_reset+0x178>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	pll_assignment[1] = SI5351_PLLA;
 80026d4:	4b34      	ldr	r3, [pc, #208]	@ (80027a8 <si5351_reset+0x178>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	705a      	strb	r2, [r3, #1]
	pll_assignment[2] = SI5351_PLLA;
 80026da:	4b33      	ldr	r3, [pc, #204]	@ (80027a8 <si5351_reset+0x178>)
 80026dc:	2200      	movs	r2, #0
 80026de:	709a      	strb	r2, [r3, #2]
	pll_assignment[3] = SI5351_PLLA;
 80026e0:	4b31      	ldr	r3, [pc, #196]	@ (80027a8 <si5351_reset+0x178>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	70da      	strb	r2, [r3, #3]
	pll_assignment[4] = SI5351_PLLA;
 80026e6:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <si5351_reset+0x178>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	711a      	strb	r2, [r3, #4]
	pll_assignment[5] = SI5351_PLLA;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <si5351_reset+0x178>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	715a      	strb	r2, [r3, #5]
	pll_assignment[6] = SI5351_PLLB;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <si5351_reset+0x178>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	719a      	strb	r2, [r3, #6]
	pll_assignment[7] = SI5351_PLLB;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <si5351_reset+0x178>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	71da      	strb	r2, [r3, #7]

	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 80026fe:	2100      	movs	r1, #0
 8002700:	2000      	movs	r0, #0
 8002702:	f000 fdcd 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK1, SI5351_PLLA);
 8002706:	2100      	movs	r1, #0
 8002708:	2001      	movs	r0, #1
 800270a:	f000 fdc9 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK2, SI5351_PLLA);
 800270e:	2100      	movs	r1, #0
 8002710:	2002      	movs	r0, #2
 8002712:	f000 fdc5 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK3, SI5351_PLLA);
 8002716:	2100      	movs	r1, #0
 8002718:	2003      	movs	r0, #3
 800271a:	f000 fdc1 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK4, SI5351_PLLA);
 800271e:	2100      	movs	r1, #0
 8002720:	2004      	movs	r0, #4
 8002722:	f000 fdbd 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK5, SI5351_PLLA);
 8002726:	2100      	movs	r1, #0
 8002728:	2005      	movs	r0, #5
 800272a:	f000 fdb9 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK6, SI5351_PLLB);
 800272e:	2101      	movs	r1, #1
 8002730:	2006      	movs	r0, #6
 8002732:	f000 fdb5 	bl	80032a0 <set_ms_source>
	set_ms_source(SI5351_CLK7, SI5351_PLLB);
 8002736:	2101      	movs	r1, #1
 8002738:	2007      	movs	r0, #7
 800273a:	f000 fdb1 	bl	80032a0 <set_ms_source>

	// Reset the VCXO param
	si5351_write(SI5351_VXCO_PARAMETERS_LOW, 0);
 800273e:	2100      	movs	r1, #0
 8002740:	20a2      	movs	r0, #162	@ 0xa2
 8002742:	f001 fed7 	bl	80044f4 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_MID, 0);
 8002746:	2100      	movs	r1, #0
 8002748:	20a3      	movs	r0, #163	@ 0xa3
 800274a:	f001 fed3 	bl	80044f4 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_HIGH, 0);
 800274e:	2100      	movs	r1, #0
 8002750:	20a4      	movs	r0, #164	@ 0xa4
 8002752:	f001 fecf 	bl	80044f4 <si5351_write>

	// Then reset the PLLs
	pll_reset(SI5351_PLLA);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 fd8a 	bl	8003270 <pll_reset>
	pll_reset(SI5351_PLLB);
 800275c:	2001      	movs	r0, #1
 800275e:	f000 fd87 	bl	8003270 <pll_reset>

	// Set initial frequencies
	uint8_t i;
	for(i = 0; i < 8; i++)
 8002762:	2300      	movs	r3, #0
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	e015      	b.n	8002794 <si5351_reset+0x164>
	{
		clk_freq[i] = 0;
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	4a10      	ldr	r2, [pc, #64]	@ (80027ac <si5351_reset+0x17c>)
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	18d1      	adds	r1, r2, r3
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9c1 2300 	strd	r2, r3, [r1]
		output_enable((enum si5351_clock)i, 0);
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fcdd 	bl	8003140 <output_enable>
		clk_first_set[i] = false;
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <si5351_reset+0x180>)
 800278a:	2100      	movs	r1, #0
 800278c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 8; i++)
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	3301      	adds	r3, #1
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b07      	cmp	r3, #7
 8002798:	d9e6      	bls.n	8002768 <si5351_reset+0x138>
	}
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f3af 8000 	nop.w
 80027a8:	20000884 	.word	0x20000884
 80027ac:	20000818 	.word	0x20000818
 80027b0:	20000874 	.word	0x20000874
 80027b4:	a05f2000 	.word	0xa05f2000
 80027b8:	00000012 	.word	0x00000012
 80027bc:	00000000 	.word	0x00000000

080027c0 <si5351_set_freq>:
 * freq - Output frequency in Hz
 * clk - Clock output
 *   (use the si5351_clock enum)
 */
uint8_t si5351_set_freq(uint64_t freq, enum si5351_clock clk)
{
 80027c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c4:	b094      	sub	sp, #80	@ 0x50
 80027c6:	af04      	add	r7, sp, #16
 80027c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
	struct Si5351RegSet ms_reg;
	uint64_t pll_freq;
	uint8_t int_mode = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t div_by_4 = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint8_t r_div = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	// Check which Multisynth is being set
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	f200 8141 	bhi.w	8002a6c <si5351_set_freq+0x2ac>
	{
		// MS0 through MS5 logic
		// ---------------------

		// Lower bounds check
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 80027ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	d00b      	beq.n	800280a <si5351_set_freq+0x4a>
 80027f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027f6:	4994      	ldr	r1, [pc, #592]	@ (8002a48 <si5351_set_freq+0x288>)
 80027f8:	428a      	cmp	r2, r1
 80027fa:	f173 0300 	sbcs.w	r3, r3, #0
 80027fe:	d204      	bcs.n	800280a <si5351_set_freq+0x4a>
		{
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 8002800:	4a91      	ldr	r2, [pc, #580]	@ (8002a48 <si5351_set_freq+0x288>)
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		// Upper bounds check
		if(freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800280a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800280e:	498f      	ldr	r1, [pc, #572]	@ (8002a4c <si5351_set_freq+0x28c>)
 8002810:	428a      	cmp	r2, r1
 8002812:	f173 0305 	sbcs.w	r3, r3, #5
 8002816:	d304      	bcc.n	8002822 <si5351_set_freq+0x62>
		{
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8002818:	a389      	add	r3, pc, #548	@ (adr r3, 8002a40 <si5351_set_freq+0x280>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		// If requested freq >100 MHz and no other outputs are already >100 MHz,
		// we need to recalculate PLLA and then recalculate all other CLK outputs
		// on same PLL
		if(freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 8002822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002826:	498a      	ldr	r1, [pc, #552]	@ (8002a50 <si5351_set_freq+0x290>)
 8002828:	428a      	cmp	r2, r1
 800282a:	f173 0302 	sbcs.w	r3, r3, #2
 800282e:	f0c0 80bb 	bcc.w	80029a8 <si5351_set_freq+0x1e8>
		{
			// Check other clocks on same PLL
			uint8_t i;
			for(i = 0; i < 6; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8002838:	e020      	b.n	800287c <si5351_set_freq+0xbc>
			{
				if(clk_freq[i] > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800283a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800283e:	4a85      	ldr	r2, [pc, #532]	@ (8002a54 <si5351_set_freq+0x294>)
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	4981      	ldr	r1, [pc, #516]	@ (8002a50 <si5351_set_freq+0x290>)
 800284a:	428a      	cmp	r2, r1
 800284c:	f173 0302 	sbcs.w	r3, r3, #2
 8002850:	d30f      	bcc.n	8002872 <si5351_set_freq+0xb2>
				{
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 8002852:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	429a      	cmp	r2, r3
 800285a:	d00a      	beq.n	8002872 <si5351_set_freq+0xb2>
 800285c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002860:	4a7d      	ldr	r2, [pc, #500]	@ (8002a58 <si5351_set_freq+0x298>)
 8002862:	5cd2      	ldrb	r2, [r2, r3]
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	497c      	ldr	r1, [pc, #496]	@ (8002a58 <si5351_set_freq+0x298>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	429a      	cmp	r2, r3
 800286c:	d101      	bne.n	8002872 <si5351_set_freq+0xb2>
					{
						return 1; // won't set if any other clks already >100 MHz
 800286e:	2301      	movs	r3, #1
 8002870:	e1f2      	b.n	8002c58 <si5351_set_freq+0x498>
			for(i = 0; i < 6; i++)
 8002872:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002876:	3301      	adds	r3, #1
 8002878:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800287c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002880:	2b05      	cmp	r3, #5
 8002882:	d9da      	bls.n	800283a <si5351_set_freq+0x7a>
					}
				}
			}

			// Enable the output on first set_freq only
			if(clk_first_set[(uint8_t)clk] == false)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4a75      	ldr	r2, [pc, #468]	@ (8002a5c <si5351_set_freq+0x29c>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	f083 0301 	eor.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <si5351_set_freq+0xe6>
			{
				output_enable(clk, 1);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fc51 	bl	8003140 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a5c <si5351_set_freq+0x29c>)
 80028a2:	2101      	movs	r1, #1
 80028a4:	54d1      	strb	r1, [r2, r3]
			}

			// Set the freq in memory
			clk_freq[(uint8_t)clk] = freq;
 80028a6:	79f9      	ldrb	r1, [r7, #7]
 80028a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ac:	4869      	ldr	r0, [pc, #420]	@ (8002a54 <si5351_set_freq+0x294>)
 80028ae:	00c9      	lsls	r1, r1, #3
 80028b0:	4401      	add	r1, r0
 80028b2:	e9c1 2300 	strd	r2, r3, [r1]

			// Calculate the proper PLL frequency
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 80028b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	f001 f8f6 	bl	8003ab8 <multisynth_calc>
 80028cc:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

			// Set PLL
			set_pll(pll_freq, pll_assignment[clk]);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <si5351_set_freq+0x298>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	461a      	mov	r2, r3
 80028d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80028dc:	f000 f9d4 	bl	8002c88 <set_pll>

			// Recalculate params for other synths on same PLL
			for(i = 0; i < 6; i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80028e6:	e054      	b.n	8002992 <si5351_set_freq+0x1d2>
			{
				if(clk_freq[i] != 0)
 80028e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80028ec:	4a59      	ldr	r2, [pc, #356]	@ (8002a54 <si5351_set_freq+0x294>)
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	d046      	beq.n	8002988 <si5351_set_freq+0x1c8>
				{
					if(pll_assignment[i] == pll_assignment[clk])
 80028fa:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80028fe:	4a56      	ldr	r2, [pc, #344]	@ (8002a58 <si5351_set_freq+0x298>)
 8002900:	5cd2      	ldrb	r2, [r2, r3]
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4954      	ldr	r1, [pc, #336]	@ (8002a58 <si5351_set_freq+0x298>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	429a      	cmp	r2, r3
 800290a:	d13d      	bne.n	8002988 <si5351_set_freq+0x1c8>
					{
						struct Si5351RegSet temp_reg;
						uint64_t temp_freq;

						// Select the proper R div value
						temp_freq = clk_freq[i];
 800290c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002910:	4a50      	ldr	r2, [pc, #320]	@ (8002a54 <si5351_set_freq+0x294>)
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	e9c7 2304 	strd	r2, r3, [r7, #16]
						r_div = select_r_div(&temp_freq);
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fbba 	bl	800409c <select_r_div>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800292e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800293c:	f001 f8bc 	bl	8003ab8 <multisynth_calc>

						// If freq > 150 MHz, we need to use DIVBY4 and integer mode
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8002940:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002944:	4946      	ldr	r1, [pc, #280]	@ (8002a60 <si5351_set_freq+0x2a0>)
 8002946:	428a      	cmp	r2, r1
 8002948:	f173 0303 	sbcs.w	r3, r3, #3
 800294c:	d306      	bcc.n	800295c <si5351_set_freq+0x19c>
						{
							div_by_4 = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							int_mode = 1;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800295a:	e005      	b.n	8002968 <si5351_set_freq+0x1a8>
						}
						else
						{
							div_by_4 = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
							int_mode = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						}

						// Set multisynth registers
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 8002968:	f897 003c 	ldrb.w	r0, [r7, #60]	@ 0x3c
 800296c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f107 0318 	add.w	r3, r7, #24
 8002982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002984:	f000 fa66 	bl	8002e54 <set_ms>
			for(i = 0; i < 6; i++)
 8002988:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800298c:	3301      	adds	r3, #1
 800298e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8002992:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002996:	2b05      	cmp	r3, #5
 8002998:	d9a6      	bls.n	80028e8 <si5351_set_freq+0x128>
					}
				}
			}

			// Reset the PLL
			pll_reset(pll_assignment[clk]);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a58 <si5351_set_freq+0x298>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fc65 	bl	8003270 <pll_reset>
 80029a6:	e049      	b.n	8002a3c <si5351_set_freq+0x27c>
		}
		else
		{
			clk_freq[(uint8_t)clk] = freq;
 80029a8:	79f9      	ldrb	r1, [r7, #7]
 80029aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ae:	4829      	ldr	r0, [pc, #164]	@ (8002a54 <si5351_set_freq+0x294>)
 80029b0:	00c9      	lsls	r1, r1, #3
 80029b2:	4401      	add	r1, r0
 80029b4:	e9c1 2300 	strd	r2, r3, [r1]

			// Enable the output on first set_freq only
			if(clk_first_set[(uint8_t)clk] == false)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <si5351_set_freq+0x29c>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <si5351_set_freq+0x21a>
			{
				output_enable(clk, 1);
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fbb7 	bl	8003140 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <si5351_set_freq+0x29c>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	54d1      	strb	r1, [r2, r3]
			}

			// Select the proper R div value
			r_div = select_r_div(&freq);
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fb5c 	bl	800409c <select_r_div>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

			// Calculate the synth parameters
			if(pll_assignment[clk] == SI5351_PLLA)
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <si5351_set_freq+0x298>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <si5351_set_freq+0x24a>
			{
				multisynth_calc(freq, plla_freq, &ms_reg);
 80029f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <si5351_set_freq+0x2a4>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002a02:	9400      	str	r4, [sp, #0]
 8002a04:	f001 f858 	bl	8003ab8 <multisynth_calc>
 8002a08:	e009      	b.n	8002a1e <si5351_set_freq+0x25e>
			}
			else
			{
				multisynth_calc(freq, pllb_freq, &ms_reg);
 8002a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <si5351_set_freq+0x2a8>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002a18:	9400      	str	r4, [sp, #0]
 8002a1a:	f001 f84d 	bl	8003ab8 <multisynth_calc>
			}

			// Set multisynth registers
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 8002a1e:	79f8      	ldrb	r0, [r7, #7]
 8002a20:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a38:	f000 fa0c 	bl	8002e54 <set_ms>

			// Reset the PLL
			//pll_reset(pll_assignment[clk]);
		}

		return 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e10b      	b.n	8002c58 <si5351_set_freq+0x498>
 8002a40:	3d1ac100 	.word	0x3d1ac100
 8002a44:	00000005 	.word	0x00000005
 8002a48:	00061a80 	.word	0x00061a80
 8002a4c:	3d1ac101 	.word	0x3d1ac101
 8002a50:	540be401 	.word	0x540be401
 8002a54:	20000818 	.word	0x20000818
 8002a58:	20000884 	.word	0x20000884
 8002a5c:	20000874 	.word	0x20000874
 8002a60:	7e11d600 	.word	0x7e11d600
 8002a64:	20000858 	.word	0x20000858
 8002a68:	20000860 	.word	0x20000860
	{
		// MS6 and MS7 logic
		// -----------------

		// Lower bounds check
		if(freq > 0 && freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT)
 8002a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d00b      	beq.n	8002a8c <si5351_set_freq+0x2cc>
 8002a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a78:	497d      	ldr	r1, [pc, #500]	@ (8002c70 <si5351_set_freq+0x4b0>)
 8002a7a:	428a      	cmp	r2, r1
 8002a7c:	f173 0300 	sbcs.w	r3, r3, #0
 8002a80:	d204      	bcs.n	8002a8c <si5351_set_freq+0x2cc>
		{
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 8002a82:	4a7c      	ldr	r2, [pc, #496]	@ (8002c74 <si5351_set_freq+0x4b4>)
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		// Upper bounds check
		if(freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8002a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a90:	4979      	ldr	r1, [pc, #484]	@ (8002c78 <si5351_set_freq+0x4b8>)
 8002a92:	428a      	cmp	r2, r1
 8002a94:	f173 0303 	sbcs.w	r3, r3, #3
 8002a98:	d304      	bcc.n	8002aa4 <si5351_set_freq+0x2e4>
		{
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 8002a9a:	a373      	add	r3, pc, #460	@ (adr r3, 8002c68 <si5351_set_freq+0x4a8>)
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}

		// If one of CLK6 or CLK7 is already set when trying to set the other,
		// we have to ensure that it will also have an integer division ratio
		// with the same PLL, otherwise do not set it.
		if(clk == SI5351_CLK6)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d15f      	bne.n	8002b6a <si5351_set_freq+0x3aa>
		{
			if(clk_freq[7] != 0)
 8002aaa:	4b74      	ldr	r3, [pc, #464]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002aac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	d037      	beq.n	8002b24 <si5351_set_freq+0x364>
			{
				if(pllb_freq % freq == 0)
 8002ab4:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002abe:	f7fe f833 	bl	8000b28 <__aeabi_uldivmod>
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	d12c      	bne.n	8002b20 <si5351_set_freq+0x360>
				{
					if((pllb_freq / freq) % 2 != 0)
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002acc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad0:	f7fe f82a 	bl	8000b28 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	f002 0801 	and.w	r8, r2, #1
 8002adc:	f04f 0900 	mov.w	r9, #0
 8002ae0:	ea58 0309 	orrs.w	r3, r8, r9
 8002ae4:	d001      	beq.n	8002aea <si5351_set_freq+0x32a>
					{
						// Not an even divide ratio, no bueno
						return 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0b6      	b.n	8002c58 <si5351_set_freq+0x498>
					}
					else
					{
						// Set the freq in memory
						clk_freq[(uint8_t)clk] = freq;
 8002aea:	79f9      	ldrb	r1, [r7, #7]
 8002aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af0:	4862      	ldr	r0, [pc, #392]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002af2:	00c9      	lsls	r1, r1, #3
 8002af4:	4401      	add	r1, r0
 8002af6:	e9c1 2300 	strd	r2, r3, [r1]

						// Select the proper R div value
						r_div = select_r_div_ms67(&freq);
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 fbcc 	bl	800429c <select_r_div_ms67>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth67_calc(freq, pllb_freq, &ms_reg);
 8002b0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002b18:	9400      	str	r4, [sp, #0]
 8002b1a:	f001 f929 	bl	8003d70 <multisynth67_calc>
 8002b1e:	e085      	b.n	8002c2c <si5351_set_freq+0x46c>
					}
				}
				else
				{
					// Not an integer divide ratio, no good
					return 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e099      	b.n	8002c58 <si5351_set_freq+0x498>
			else
			{
				// No previous assignment, so set PLLB based on CLK6

				// Set the freq in memory
				clk_freq[(uint8_t)clk] = freq;
 8002b24:	79f9      	ldrb	r1, [r7, #7]
 8002b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b2a:	4854      	ldr	r0, [pc, #336]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002b2c:	00c9      	lsls	r1, r1, #3
 8002b2e:	4401      	add	r1, r0
 8002b30:	e9c1 2300 	strd	r2, r3, [r1]

				// Select the proper R div value
				r_div = select_r_div_ms67(&freq);
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fbaf 	bl	800429c <select_r_div_ms67>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 8002b44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	f001 f90b 	bl	8003d70 <multisynth67_calc>
 8002b5a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				//pllb_freq = pll_freq;
				set_pll(pll_freq, SI5351_PLLB);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b64:	f000 f890 	bl	8002c88 <set_pll>
 8002b68:	e060      	b.n	8002c2c <si5351_set_freq+0x46c>
			}
		}
		else
		{
			if(clk_freq[6] != 0)
 8002b6a:	4b44      	ldr	r3, [pc, #272]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002b6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002b70:	4313      	orrs	r3, r2
 8002b72:	d036      	beq.n	8002be2 <si5351_set_freq+0x422>
			{
				if(pllb_freq % freq == 0)
 8002b74:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b7e:	f7fd ffd3 	bl	8000b28 <__aeabi_uldivmod>
 8002b82:	4313      	orrs	r3, r2
 8002b84:	d12b      	bne.n	8002bde <si5351_set_freq+0x41e>
				{
					if((pllb_freq / freq) % 2 != 0)
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b90:	f7fd ffca 	bl	8000b28 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	f002 0401 	and.w	r4, r2, #1
 8002b9c:	2500      	movs	r5, #0
 8002b9e:	ea54 0305 	orrs.w	r3, r4, r5
 8002ba2:	d001      	beq.n	8002ba8 <si5351_set_freq+0x3e8>
					{
						// Not an even divide ratio, no bueno
						return 1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e057      	b.n	8002c58 <si5351_set_freq+0x498>
					}
					else
					{
						// Set the freq in memory
						clk_freq[(uint8_t)clk] = freq;
 8002ba8:	79f9      	ldrb	r1, [r7, #7]
 8002baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bae:	4833      	ldr	r0, [pc, #204]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002bb0:	00c9      	lsls	r1, r1, #3
 8002bb2:	4401      	add	r1, r0
 8002bb4:	e9c1 2300 	strd	r2, r3, [r1]

						// Select the proper R div value
						r_div = select_r_div_ms67(&freq);
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fb6d 	bl	800429c <select_r_div_ms67>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						multisynth67_calc(freq, pllb_freq, &ms_reg);
 8002bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c80 <si5351_set_freq+0x4c0>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002bd6:	9400      	str	r4, [sp, #0]
 8002bd8:	f001 f8ca 	bl	8003d70 <multisynth67_calc>
 8002bdc:	e026      	b.n	8002c2c <si5351_set_freq+0x46c>
					}
				}
				else
				{
					// Not an integer divide ratio, no good
					return 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e03a      	b.n	8002c58 <si5351_set_freq+0x498>
			else
			{
				// No previous assignment, so set PLLB based on CLK7

				// Set the freq in memory
				clk_freq[(uint8_t)clk] = freq;
 8002be2:	79f9      	ldrb	r1, [r7, #7]
 8002be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be8:	4824      	ldr	r0, [pc, #144]	@ (8002c7c <si5351_set_freq+0x4bc>)
 8002bea:	00c9      	lsls	r1, r1, #3
 8002bec:	4401      	add	r1, r0
 8002bee:	e9c1 2300 	strd	r2, r3, [r1]

				// Select the proper R div value
				r_div = select_r_div_ms67(&freq);
 8002bf2:	f107 0308 	add.w	r3, r7, #8
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fb50 	bl	800429c <select_r_div_ms67>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 8002c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	f001 f8ac 	bl	8003d70 <multisynth67_calc>
 8002c18:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
				//pllb_freq = pll_freq;
				set_pll(pll_freq, pll_assignment[clk]);
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <si5351_set_freq+0x4c4>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	461a      	mov	r2, r3
 8002c24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c28:	f000 f82e 	bl	8002c88 <set_pll>
			}
		}

		div_by_4 = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		int_mode = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		// Set multisynth registers (MS must be set before PLL)
		set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 8002c38:	79f8      	ldrb	r0, [r7, #7]
 8002c3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c52:	f000 f8ff 	bl	8002e54 <set_ms>

		return 0;
 8002c56:	2300      	movs	r3, #0
	}
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3740      	adds	r7, #64	@ 0x40
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	7e11d5ff 	.word	0x7e11d5ff
 8002c6c:	00000003 	.word	0x00000003
 8002c70:	001c2898 	.word	0x001c2898
 8002c74:	00061a80 	.word	0x00061a80
 8002c78:	7e11d600 	.word	0x7e11d600
 8002c7c:	20000818 	.word	0x20000818
 8002c80:	20000860 	.word	0x20000860
 8002c84:	20000884 	.word	0x20000884

08002c88 <set_pll>:
 * pll_freq - Desired PLL frequency in Hz * 100
 * target_pll - Which PLL to set
 *     (use the si5351_pll enum)
 */
void set_pll(uint64_t pll_freq, enum si5351_pll target_pll)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b092      	sub	sp, #72	@ 0x48
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
  struct Si5351RegSet pll_reg;

	if(target_pll == SI5351_PLLA)
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d111      	bne.n	8002cc0 <set_pll+0x38>
	{
		pll_calc(SI5351_PLLA, pll_freq, &pll_reg, ref_correction[plla_ref_osc], 0);
 8002c9c:	4b68      	ldr	r3, [pc, #416]	@ (8002e40 <set_pll+0x1b8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b68      	ldr	r3, [pc, #416]	@ (8002e44 <set_pll+0x1bc>)
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	9202      	str	r2, [sp, #8]
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f000 fb9d 	bl	80033f8 <pll_calc>
 8002cbe:	e010      	b.n	8002ce2 <set_pll+0x5a>
	}
	else
	{
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 8002cc0:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <set_pll+0x1c0>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <set_pll+0x1bc>)
 8002cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f000 fb8b 	bl	80033f8 <pll_calc>

  // Derive the register values to write

  // Prepare an array for parameters to be written to
  uint8_t __p[20];
  uint8_t *params = __p;
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t i = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  uint8_t temp;

  // Registers 26-27
  temp = ((pll_reg.p3 >> 8) & 0xFF);
 8002cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002d00:	461a      	mov	r2, r3
 8002d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d04:	4413      	add	r3, r2
 8002d06:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d0a:	701a      	strb	r2, [r3, #0]

  temp = (uint8_t)(pll_reg.p3  & 0xFF);
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002d12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	4413      	add	r3, r2
 8002d22:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d26:	701a      	strb	r2, [r3, #0]

  // Register 28
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002d36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002d40:	461a      	mov	r2, r3
 8002d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d44:	4413      	add	r3, r2
 8002d46:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d4a:	701a      	strb	r2, [r3, #0]

  // Registers 29-30
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002d54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	4413      	add	r3, r2
 8002d64:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d68:	701a      	strb	r2, [r3, #0]

  temp = (uint8_t)(pll_reg.p1  & 0xFF);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	4413      	add	r3, r2
 8002d80:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002d84:	701a      	strb	r2, [r3, #0]

  // Register 31
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	0b1b      	lsrs	r3, r3, #12
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	0c1b      	lsrs	r3, r3, #16
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002da4:	4413      	add	r3, r2
 8002da6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002daa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002db4:	461a      	mov	r2, r3
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	4413      	add	r3, r2
 8002dba:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002dbe:	701a      	strb	r2, [r3, #0]

  // Registers 32-33
  temp = (uint8_t)((pll_reg.p2 >> 8) & 0xFF);
 8002dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002ddc:	701a      	strb	r2, [r3, #0]

  temp = (uint8_t)(pll_reg.p2  & 0xFF);
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  params[i++] = temp;
 8002de4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8002dee:	461a      	mov	r2, r3
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	4413      	add	r3, r2
 8002df4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002df8:	701a      	strb	r2, [r3, #0]

  // Write the parameters
  if(target_pll == SI5351_PLLA)
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <set_pll+0x192>
  {
    si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
 8002e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e06:	4619      	mov	r1, r3
 8002e08:	201a      	movs	r0, #26
 8002e0a:	f001 fb47 	bl	800449c <si5351_write_bulk>
		plla_freq = pll_freq;
 8002e0e:	490f      	ldr	r1, [pc, #60]	@ (8002e4c <set_pll+0x1c4>)
 8002e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
  else if(target_pll == SI5351_PLLB)
  {
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
		pllb_freq = pll_freq;
  }
}
 8002e18:	e00e      	b.n	8002e38 <set_pll+0x1b0>
  else if(target_pll == SI5351_PLLB)
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10b      	bne.n	8002e38 <set_pll+0x1b0>
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
 8002e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e26:	4619      	mov	r1, r3
 8002e28:	2022      	movs	r0, #34	@ 0x22
 8002e2a:	f001 fb37 	bl	800449c <si5351_write_bulk>
		pllb_freq = pll_freq;
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <set_pll+0x1c8>)
 8002e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e34:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002e38:	bf00      	nop
 8002e3a:	3738      	adds	r7, #56	@ 0x38
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000088c 	.word	0x2000088c
 8002e44:	20000868 	.word	0x20000868
 8002e48:	2000088d 	.word	0x2000088d
 8002e4c:	20000858 	.word	0x20000858
 8002e50:	20000860 	.word	0x20000860

08002e54 <set_ms>:
 * r_div - Desired r_div ratio
 * div_by_4 - Set Divide By 4 mode
 *   Set to 1 to enable, 0 to disable
 */
void set_ms(enum si5351_clock clk, struct Si5351RegSet ms_reg, uint8_t int_mode, uint8_t r_div, uint8_t div_by_4)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b08d      	sub	sp, #52	@ 0x34
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002e62:	4623      	mov	r3, r4
 8002e64:	73fb      	strb	r3, [r7, #15]
	uint8_t __p[20];
	uint8_t *params = __p;
 8002e66:	f107 0310 	add.w	r3, r7, #16
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	uint8_t i = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 	uint8_t temp;
 	uint8_t reg_val;


	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	f200 809d 	bhi.w	8002fb4 <set_ms+0x160>
	{
		// Registers 42-43 for CLK0
		temp = (uint8_t)((ms_reg.p3 >> 8) & 0xFF);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e90:	4413      	add	r3, r2
 8002e92:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002e96:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t)(ms_reg.p3  & 0xFF);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	4413      	add	r3, r2
 8002eae:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002eb2:	701a      	strb	r2, [r3, #0]

		// Register 44 for CLK0
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	332c      	adds	r3, #44	@ 0x2c
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 fb42 	bl	8004548 <si5351_read>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		reg_val &= ~(0x03);
 8002eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	b25a      	sxtb	r2, r3
 8002ee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	4413      	add	r3, r2
 8002efe:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f02:	701a      	strb	r2, [r3, #0]

		// Registers 45-46 for CLK0
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002f16:	461a      	mov	r2, r3
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f20:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t)(ms_reg.p1  & 0xFF);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002f32:	461a      	mov	r2, r3
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	4413      	add	r3, r2
 8002f38:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f3c:	701a      	strb	r2, [r3, #0]

		// Register 47 for CLK0
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0b1b      	lsrs	r3, r3, #12
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f023 030f 	bic.w	r3, r3, #15
 8002f48:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	4413      	add	r3, r2
 8002f72:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f76:	701a      	strb	r2, [r3, #0]

		// Registers 48-49 for CLK0
		temp = (uint8_t)((ms_reg.p2 >> 8) & 0xFF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002f80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8e:	4413      	add	r3, r2
 8002f90:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f94:	701a      	strb	r2, [r3, #0]

		temp = (uint8_t)(ms_reg.p2  & 0xFF);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		params[i++] = temp;
 8002f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	4413      	add	r3, r2
 8002fac:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <set_ms+0x166>
	}
	else
	{
		// MS6 and MS7 only use one register
		temp = ms_reg.p1;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	// Write the parameters
	switch(clk)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b07      	cmp	r3, #7
 8002fbe:	f200 80bb 	bhi.w	8003138 <set_ms+0x2e4>
 8002fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <set_ms+0x174>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	08002fe9 	.word	0x08002fe9
 8002fcc:	08003017 	.word	0x08003017
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003073 	.word	0x08003073
 8002fd8:	080030a1 	.word	0x080030a1
 8002fdc:	080030cf 	.word	0x080030cf
 8002fe0:	080030fd 	.word	0x080030fd
 8002fe4:	0800311b 	.word	0x0800311b
	{
		case SI5351_CLK0:
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 8002fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fee:	4619      	mov	r1, r3
 8002ff0:	202a      	movs	r0, #42	@ 0x2a
 8002ff2:	f001 fa53 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 8002ff6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f980 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 8003004:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003008:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ffbe 	bl	8003f90 <ms_div>
			break;
 8003014:	e090      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK1:
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 8003016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800301a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800301c:	4619      	mov	r1, r3
 800301e:	2032      	movs	r0, #50	@ 0x32
 8003020:	f001 fa3c 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 8003024:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f969 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 8003032:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003036:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 ffa7 	bl	8003f90 <ms_div>
			break;
 8003042:	e079      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK2:
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 8003044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800304a:	4619      	mov	r1, r3
 800304c:	203a      	movs	r0, #58	@ 0x3a
 800304e:	f001 fa25 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 8003052:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f952 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 8003060:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003064:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ff90 	bl	8003f90 <ms_div>
			break;
 8003070:	e062      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK3:
			si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, params);
 8003072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003078:	4619      	mov	r1, r3
 800307a:	2042      	movs	r0, #66	@ 0x42
 800307c:	f001 fa0e 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 8003080:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f93b 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 800308e:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8003092:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 ff79 	bl	8003f90 <ms_div>
			break;
 800309e:	e04b      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK4:
			si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, params);
 80030a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030a6:	4619      	mov	r1, r3
 80030a8:	204a      	movs	r0, #74	@ 0x4a
 80030aa:	f001 f9f7 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 80030ae:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f924 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 80030bc:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80030c0:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 ff62 	bl	8003f90 <ms_div>
			break;
 80030cc:	e034      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK5:
			si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, params);
 80030ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d4:	4619      	mov	r1, r3
 80030d6:	2052      	movs	r0, #82	@ 0x52
 80030d8:	f001 f9e0 	bl	800449c <si5351_write_bulk>
			set_int(clk, int_mode);
 80030dc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f90d 	bl	8003304 <set_int>
			ms_div(clk, r_div, div_by_4);
 80030ea:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80030ee:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 ff4b 	bl	8003f90 <ms_div>
			break;
 80030fa:	e01d      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK6:
			si5351_write(SI5351_CLK6_PARAMETERS, temp);
 80030fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003100:	4619      	mov	r1, r3
 8003102:	205a      	movs	r0, #90	@ 0x5a
 8003104:	f001 f9f6 	bl	80044f4 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 8003108:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800310c:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 ff3c 	bl	8003f90 <ms_div>
			break;
 8003118:	e00e      	b.n	8003138 <set_ms+0x2e4>
		case SI5351_CLK7:
			si5351_write(SI5351_CLK7_PARAMETERS, temp);
 800311a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800311e:	4619      	mov	r1, r3
 8003120:	205b      	movs	r0, #91	@ 0x5b
 8003122:	f001 f9e7 	bl	80044f4 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 8003126:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800312a:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 ff2d 	bl	8003f90 <ms_div>
			break;
 8003136:	bf00      	nop
	}
}
 8003138:	bf00      	nop
 800313a:	3734      	adds	r7, #52	@ 0x34
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <output_enable>:
 * clk - Clock output
 *   (use the si5351_clock enum)
 * enable - Set to 1 to enable, 0 to disable
 */
void output_enable(enum si5351_clock clk, uint8_t enable)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	460a      	mov	r2, r1
 800314a:	71fb      	strb	r3, [r7, #7]
 800314c:	4613      	mov	r3, r2
 800314e:	71bb      	strb	r3, [r7, #6]
  uint8_t reg_val;

  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 8003150:	2003      	movs	r0, #3
 8003152:	f001 f9f9 	bl	8004548 <si5351_read>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]

  if(enable == 1)
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10c      	bne.n	800317a <output_enable+0x3a>
  {
    reg_val &= ~(1<<(uint8_t)clk);
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2201      	movs	r2, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	b25b      	sxtb	r3, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	b25a      	sxtb	r2, r3
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4013      	ands	r3, r2
 8003174:	b25b      	sxtb	r3, r3
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e009      	b.n	800318e <output_enable+0x4e>
  }
  else
  {
    reg_val |= (1<<(uint8_t)clk);
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	2201      	movs	r2, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	b25a      	sxtb	r2, r3
 8003184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003188:	4313      	orrs	r3, r2
 800318a:	b25b      	sxtb	r3, r3
 800318c:	73fb      	strb	r3, [r7, #15]
  }

  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	4619      	mov	r1, r3
 8003192:	2003      	movs	r0, #3
 8003194:	f001 f9ae 	bl	80044f4 <si5351_write>
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <si5351_drive_strength>:
 * clk - Clock output
 *   (use the si5351_clock enum)
 * drive - Desired drive level
 *   (use the si5351_drive enum)
 */
void si5351_drive_strength(enum si5351_clock clk, enum si5351_drive drive) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	460a      	mov	r2, r1
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71bb      	strb	r3, [r7, #6]
  uint8_t reg_val;
  const uint8_t mask = 0x03;
 80031b0:	2303      	movs	r3, #3
 80031b2:	73bb      	strb	r3, [r7, #14]

  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	3310      	adds	r3, #16
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f9c4 	bl	8004548 <si5351_read>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]
  reg_val &= ~(mask);
 80031c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	b25a      	sxtb	r2, r3
 80031cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b25b      	sxtb	r3, r3
 80031d4:	73fb      	strb	r3, [r7, #15]

  switch(drive)
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d81a      	bhi.n	8003212 <si5351_drive_strength+0x72>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <si5351_drive_strength+0x44>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003213 	.word	0x08003213
 80031e8:	080031f5 	.word	0x080031f5
 80031ec:	080031ff 	.word	0x080031ff
 80031f0:	08003209 	.word	0x08003209
  {
  case SI5351_DRIVE_2MA:
    reg_val |= 0x00;
    break;
  case SI5351_DRIVE_4MA:
   reg_val |= 0x01;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
    break;
 80031fc:	e00a      	b.n	8003214 <si5351_drive_strength+0x74>
  case SI5351_DRIVE_6MA:
    reg_val |= 0x02;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	73fb      	strb	r3, [r7, #15]
    break;
 8003206:	e005      	b.n	8003214 <si5351_drive_strength+0x74>
  case SI5351_DRIVE_8MA:
    reg_val |= 0x03;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	f043 0303 	orr.w	r3, r3, #3
 800320e:	73fb      	strb	r3, [r7, #15]
    break;
 8003210:	e000      	b.n	8003214 <si5351_drive_strength+0x74>
  default:
    break;
 8003212:	bf00      	nop
  }

  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	3310      	adds	r3, #16
 8003218:	b2db      	uxtb	r3, r3
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f968 	bl	80044f4 <si5351_write>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <set_correction>:
 * the Si5351. Once this calibration is done accurately, it
 * should not have to be done again for the same Si5351 and
 * crystal.
 */
void set_correction(int32_t corr, enum si5351_pll_input ref_osc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
	ref_correction[(uint8_t)ref_osc] = corr;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	490a      	ldr	r1, [pc, #40]	@ (8003264 <set_correction+0x38>)
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Recalculate and set PLL freqs based on correction value
	set_pll(plla_freq, SI5351_PLLA);
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <set_correction+0x3c>)
 8003244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003248:	2200      	movs	r2, #0
 800324a:	f7ff fd1d 	bl	8002c88 <set_pll>
	set_pll(pllb_freq, SI5351_PLLB);
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <set_correction+0x40>)
 8003250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003254:	2201      	movs	r2, #1
 8003256:	f7ff fd17 	bl	8002c88 <set_pll>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000868 	.word	0x20000868
 8003268:	20000858 	.word	0x20000858
 800326c:	20000860 	.word	0x20000860

08003270 <pll_reset>:
 *     (use the si5351_pll enum)
 *
 * Apply a reset to the indicated PLL.
 */
void pll_reset(enum si5351_pll target_pll)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	if(target_pll == SI5351_PLLA)
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <pll_reset+0x1a>
 	{
    	si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 8003280:	2120      	movs	r1, #32
 8003282:	20b1      	movs	r0, #177	@ 0xb1
 8003284:	f001 f936 	bl	80044f4 <si5351_write>
	}
	else if(target_pll == SI5351_PLLB)
	{
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
	}
}
 8003288:	e006      	b.n	8003298 <pll_reset+0x28>
	else if(target_pll == SI5351_PLLB)
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d103      	bne.n	8003298 <pll_reset+0x28>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 8003290:	2180      	movs	r1, #128	@ 0x80
 8003292:	20b1      	movs	r0, #177	@ 0xb1
 8003294:	f001 f92e 	bl	80044f4 <si5351_write>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <set_ms_source>:
 *     (use the si5351_pll enum)
 *
 * Set the desired PLL source for a multisynth.
 */
void set_ms_source(enum si5351_clock clk, enum si5351_pll pll)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	460a      	mov	r2, r1
 80032aa:	71fb      	strb	r3, [r7, #7]
 80032ac:	4613      	mov	r3, r2
 80032ae:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;

	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	3310      	adds	r3, #16
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f946 	bl	8004548 <si5351_read>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

	if(pll == SI5351_PLLA)
 80032c0:	79bb      	ldrb	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <set_ms_source+0x30>
	{
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	f023 0320 	bic.w	r3, r3, #32
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e006      	b.n	80032de <set_ms_source+0x3e>
	}
	else if(pll == SI5351_PLLB)
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d103      	bne.n	80032de <set_ms_source+0x3e>
	{
		reg_val |= SI5351_CLK_PLL_SELECT;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	3310      	adds	r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f903 	bl	80044f4 <si5351_write>

	pll_assignment[(uint8_t)clk] = pll;
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <set_ms_source+0x60>)
 80032f2:	79ba      	ldrb	r2, [r7, #6]
 80032f4:	54ca      	strb	r2, [r1, r3]
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000884 	.word	0x20000884

08003304 <set_int>:
 * enable - Set to 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
void set_int(enum si5351_clock clk, uint8_t enable)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	460a      	mov	r2, r1
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	4613      	mov	r3, r2
 8003312:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_val;
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	3310      	adds	r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f914 	bl	8004548 <si5351_read>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

	if(enable == 1)
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d104      	bne.n	8003334 <set_int+0x30>
	{
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e003      	b.n	800333c <set_int+0x38>
	}
	else
	{
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800333a:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	3310      	adds	r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f8d4 	bl	80044f4 <si5351_write>
		break;
	default:
		break;
	}
	*/
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <set_ref_freq>:
 *    (use the si5351_pll_input enum)
 *
 * Set the reference frequency value for the desired reference oscillator
 */
void set_ref_freq(uint32_t ref_freq, enum si5351_pll_input ref_osc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
	//reg_val = si5351_read(SI5351_PLL_INPUT_SOURCE);

	// Clear the bits first
	//reg_val &= ~(SI5351_CLKIN_DIV_MASK);

	if(ref_freq <= 30000000UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1f      	ldr	r2, [pc, #124]	@ (80033e0 <set_ref_freq+0x8c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d80b      	bhi.n	8003380 <set_ref_freq+0x2c>
	{
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	491e      	ldr	r1, [pc, #120]	@ (80033e4 <set_ref_freq+0x90>)
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//reg_val |= SI5351_CLKIN_DIV_1;
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d12d      	bne.n	80033d4 <set_ref_freq+0x80>
		{
			clkin_div = SI5351_CLKIN_DIV_1;
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <set_ref_freq+0x94>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
	{
		//reg_val |= SI5351_CLKIN_DIV_1;
	}

	//si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
}
 800337e:	e029      	b.n	80033d4 <set_ref_freq+0x80>
	else if(ref_freq > 30000000UL && ref_freq <= 60000000UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <set_ref_freq+0x8c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d910      	bls.n	80033aa <set_ref_freq+0x56>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <set_ref_freq+0x98>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d80c      	bhi.n	80033aa <set_ref_freq+0x56>
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 2;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	0852      	lsrs	r2, r2, #1
 8003396:	4913      	ldr	r1, [pc, #76]	@ (80033e4 <set_ref_freq+0x90>)
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d118      	bne.n	80033d4 <set_ref_freq+0x80>
			clkin_div = SI5351_CLKIN_DIV_2;
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <set_ref_freq+0x94>)
 80033a4:	2240      	movs	r2, #64	@ 0x40
 80033a6:	701a      	strb	r2, [r3, #0]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 80033a8:	e014      	b.n	80033d4 <set_ref_freq+0x80>
	else if(ref_freq > 60000000UL && ref_freq <= 100000000UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <set_ref_freq+0x98>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d910      	bls.n	80033d4 <set_ref_freq+0x80>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <set_ref_freq+0x9c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d80c      	bhi.n	80033d4 <set_ref_freq+0x80>
		xtal_freq[(uint8_t)ref_osc] = ref_freq / 4;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	0892      	lsrs	r2, r2, #2
 80033c0:	4908      	ldr	r1, [pc, #32]	@ (80033e4 <set_ref_freq+0x90>)
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(ref_osc == SI5351_PLL_INPUT_CLKIN)
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d103      	bne.n	80033d4 <set_ref_freq+0x80>
			clkin_div = SI5351_CLKIN_DIV_4;
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <set_ref_freq+0x94>)
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	701a      	strb	r2, [r3, #0]
}
 80033d2:	e7ff      	b.n	80033d4 <set_ref_freq+0x80>
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	01c9c380 	.word	0x01c9c380
 80033e4:	2000087c 	.word	0x2000087c
 80033e8:	20000870 	.word	0x20000870
 80033ec:	03938700 	.word	0x03938700
 80033f0:	05f5e100 	.word	0x05f5e100
 80033f4:	00000000 	.word	0x00000000

080033f8 <pll_calc>:
/*********************/
/* Private functions */
/*********************/

uint64_t pll_calc(enum si5351_pll pll, uint64_t freq, struct Si5351RegSet *reg, int32_t correction, uint8_t vcxo)
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b0de      	sub	sp, #376	@ 0x178
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4601      	mov	r1, r0
 8003402:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
 8003406:	460b      	mov	r3, r1
 8003408:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	uint64_t ref_freq;
	if(pll == SI5351_PLLA)
 800340c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8003410:	2b00      	cmp	r3, #0
 8003412:	d147      	bne.n	80034a4 <pll_calc+0xac>
	{
		ref_freq = xtal_freq[(uint8_t)plla_ref_osc] * SI5351_FREQ_MULT;
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <pll_calc+0xa4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4b21      	ldr	r3, [pc, #132]	@ (80034a0 <pll_calc+0xa8>)
 800341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003426:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800342a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	1891      	adds	r1, r2, r2
 8003434:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003438:	415b      	adcs	r3, r3
 800343a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	4604      	mov	r4, r0
 8003448:	eb12 0804 	adds.w	r8, r2, r4
 800344c:	460c      	mov	r4, r1
 800344e:	eb43 0904 	adc.w	r9, r3, r4
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800345e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003462:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003466:	eb18 0402 	adds.w	r4, r8, r2
 800346a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800346e:	eb49 0303 	adc.w	r3, r9, r3
 8003472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003476:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800347a:	4623      	mov	r3, r4
 800347c:	4602      	mov	r2, r0
 800347e:	189b      	adds	r3, r3, r2
 8003480:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003484:	460b      	mov	r3, r1
 8003486:	462a      	mov	r2, r5
 8003488:	eb42 0303 	adc.w	r3, r2, r3
 800348c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003490:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8003494:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
 8003498:	e03a      	b.n	8003510 <pll_calc+0x118>
 800349a:	bf00      	nop
 800349c:	2000088c 	.word	0x2000088c
 80034a0:	2000087c 	.word	0x2000087c
	}
	else
	{
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 80034a4:	4bb6      	ldr	r3, [pc, #728]	@ (8003780 <pll_calc+0x388>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4bb6      	ldr	r3, [pc, #728]	@ (8003784 <pll_calc+0x38c>)
 80034ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b0:	2200      	movs	r2, #0
 80034b2:	469a      	mov	sl, r3
 80034b4:	4693      	mov	fp, r2
 80034b6:	4652      	mov	r2, sl
 80034b8:	465b      	mov	r3, fp
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80034c0:	415b      	adcs	r3, r3
 80034c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80034ca:	eb12 040a 	adds.w	r4, r2, sl
 80034ce:	eb43 050b 	adc.w	r5, r3, fp
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	016b      	lsls	r3, r5, #5
 80034dc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80034e0:	0162      	lsls	r2, r4, #5
 80034e2:	18a1      	adds	r1, r4, r2
 80034e4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034f0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80034f4:	461a      	mov	r2, r3
 80034f6:	eb12 020a 	adds.w	r2, r2, sl
 80034fa:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80034fe:	4623      	mov	r3, r4
 8003500:	eb43 030b 	adc.w	r3, r3, fp
 8003504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003508:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800350c:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
	uint64_t lltmp; //, denom;

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 8003510:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003514:	17da      	asrs	r2, r3, #31
 8003516:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800351a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800351e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003522:	460b      	mov	r3, r1
 8003524:	105b      	asrs	r3, r3, #1
 8003526:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800352a:	460b      	mov	r3, r1
 800352c:	07db      	lsls	r3, r3, #31
 800352e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003532:	a38d      	add	r3, pc, #564	@ (adr r3, 8003768 <pll_calc+0x370>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800353c:	f7fd faa4 	bl	8000a88 <__aeabi_ldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003548:	fb03 f001 	mul.w	r0, r3, r1
 800354c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003550:	fb02 f101 	mul.w	r1, r2, r1
 8003554:	4408      	add	r0, r1
 8003556:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800355a:	fba1 3202 	umull	r3, r2, r1, r2
 800355e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8003562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003566:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800356a:	18c3      	adds	r3, r0, r3
 800356c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 800357c:	4621      	mov	r1, r4
 800357e:	0fca      	lsrs	r2, r1, #31
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	460c      	mov	r4, r1
 8003586:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800358a:	0fcb      	lsrs	r3, r1, #31
 800358c:	4613      	mov	r3, r2
 800358e:	17da      	asrs	r2, r3, #31
 8003590:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003594:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003598:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800359c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80035a0:	4621      	mov	r1, r4
 80035a2:	1851      	adds	r1, r2, r1
 80035a4:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb43 0101 	adc.w	r1, r3, r1
 80035ae:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 80035b2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 80035b6:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170

	// PLL bounds checking
	if (freq < SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT)
 80035ba:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80035be:	4972      	ldr	r1, [pc, #456]	@ (8003788 <pll_calc+0x390>)
 80035c0:	428a      	cmp	r2, r1
 80035c2:	f173 030d 	sbcs.w	r3, r3, #13
 80035c6:	d204      	bcs.n	80035d2 <pll_calc+0x1da>
	{
		freq = SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT;
 80035c8:	a369      	add	r3, pc, #420	@ (adr r3, 8003770 <pll_calc+0x378>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	}
	if (freq > SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT)
 80035d2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80035d6:	496d      	ldr	r1, [pc, #436]	@ (800378c <pll_calc+0x394>)
 80035d8:	428a      	cmp	r2, r1
 80035da:	f173 0314 	sbcs.w	r3, r3, #20
 80035de:	d304      	bcc.n	80035ea <pll_calc+0x1f2>
	{
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
 80035e0:	a365      	add	r3, pc, #404	@ (adr r3, 8003778 <pll_calc+0x380>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 80035ea:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80035ee:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80035f2:	f7fd fa99 	bl	8000b28 <__aeabi_uldivmod>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4613      	mov	r3, r2
 80035fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

	if (a < SI5351_PLL_A_MIN)
 8003600:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003604:	2b0e      	cmp	r3, #14
 8003606:	d816      	bhi.n	8003636 <pll_calc+0x23e>
	{
		freq = ref_freq * SI5351_PLL_A_MIN;
 8003608:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800360c:	4622      	mov	r2, r4
 800360e:	462b      	mov	r3, r5
 8003610:	f04f 0000 	mov.w	r0, #0
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	0119      	lsls	r1, r3, #4
 800361a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800361e:	0110      	lsls	r0, r2, #4
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	1b11      	subs	r1, r2, r4
 8003626:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003628:	eb63 0305 	sbc.w	r3, r3, r5
 800362c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800362e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8003632:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	}
	if (a > SI5351_PLL_A_MAX)
 8003636:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800363a:	2b5a      	cmp	r3, #90	@ 0x5a
 800363c:	d92f      	bls.n	800369e <pll_calc+0x2a6>
	{
		freq = ref_freq * SI5351_PLL_A_MAX;
 800363e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	1894      	adds	r4, r2, r2
 8003648:	673c      	str	r4, [r7, #112]	@ 0x70
 800364a:	415b      	adcs	r3, r3
 800364c:	677b      	str	r3, [r7, #116]	@ 0x74
 800364e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003652:	1814      	adds	r4, r2, r0
 8003654:	66bc      	str	r4, [r7, #104]	@ 0x68
 8003656:	414b      	adcs	r3, r1
 8003658:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003666:	4629      	mov	r1, r5
 8003668:	010b      	lsls	r3, r1, #4
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8003670:	4621      	mov	r1, r4
 8003672:	010a      	lsls	r2, r1, #4
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	4604      	mov	r4, r0
 800367a:	1b14      	subs	r4, r2, r4
 800367c:	663c      	str	r4, [r7, #96]	@ 0x60
 800367e:	eb63 0301 	sbc.w	r3, r3, r1
 8003682:	667b      	str	r3, [r7, #100]	@ 0x64
 8003684:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003696:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800369a:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	// lltmp = freq % ref_freq;
	// lltmp *= denom;
	// do_div(lltmp, ref_freq);

	//b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
	if(vcxo)
 800369e:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d076      	beq.n	8003794 <pll_calc+0x39c>
	{
		b = (((uint64_t)(freq % ref_freq)) * 1000000ULL) / ref_freq;
 80036a6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80036aa:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80036ae:	f7fd fa3b 	bl	8000b28 <__aeabi_uldivmod>
 80036b2:	4614      	mov	r4, r2
 80036b4:	461d      	mov	r5, r3
 80036b6:	4622      	mov	r2, r4
 80036b8:	462b      	mov	r3, r5
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	0159      	lsls	r1, r3, #5
 80036c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c8:	0150      	lsls	r0, r2, #5
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	1b11      	subs	r1, r2, r4
 80036d0:	6539      	str	r1, [r7, #80]	@ 0x50
 80036d2:	eb63 0305 	sbc.w	r3, r3, r5
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036e4:	4649      	mov	r1, r9
 80036e6:	024b      	lsls	r3, r1, #9
 80036e8:	46c4      	mov	ip, r8
 80036ea:	ea43 53dc 	orr.w	r3, r3, ip, lsr #23
 80036ee:	4641      	mov	r1, r8
 80036f0:	024a      	lsls	r2, r1, #9
 80036f2:	4611      	mov	r1, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	460b      	mov	r3, r1
 80036f8:	191b      	adds	r3, r3, r4
 80036fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036fc:	4613      	mov	r3, r2
 80036fe:	eb45 0303 	adc.w	r3, r5, r3
 8003702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8003710:	4649      	mov	r1, r9
 8003712:	018b      	lsls	r3, r1, #6
 8003714:	4641      	mov	r1, r8
 8003716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371a:	4641      	mov	r1, r8
 800371c:	018a      	lsls	r2, r1, #6
 800371e:	46c4      	mov	ip, r8
 8003720:	ebb2 0c0c 	subs.w	ip, r2, ip
 8003724:	f8c7 c040 	str.w	ip, [r7, #64]	@ 0x40
 8003728:	4649      	mov	r1, r9
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003730:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003734:	460b      	mov	r3, r1
 8003736:	191b      	adds	r3, r3, r4
 8003738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800373c:	4613      	mov	r3, r2
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003746:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800374a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800374e:	f7fd f9eb 	bl	8000b28 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4613      	mov	r3, r2
 8003758:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
		c = 1000000ULL;
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <pll_calc+0x398>)
 800375e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8003762:	e07b      	b.n	800385c <pll_calc+0x464>
 8003764:	f3af 8000 	nop.w
 8003768:	3b9aca00 	.word	0x3b9aca00
 800376c:	00000000 	.word	0x00000000
 8003770:	f8475800 	.word	0xf8475800
 8003774:	0000000d 	.word	0x0000000d
 8003778:	f46b0400 	.word	0xf46b0400
 800377c:	00000014 	.word	0x00000014
 8003780:	2000088d 	.word	0x2000088d
 8003784:	2000087c 	.word	0x2000087c
 8003788:	f8475800 	.word	0xf8475800
 800378c:	f46b0401 	.word	0xf46b0401
 8003790:	000f4240 	.word	0x000f4240
	}
	else
	{
		b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
 8003794:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8003798:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 800379c:	f7fd f9c4 	bl	8000b28 <__aeabi_uldivmod>
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f04f 0000 	mov.w	r0, #0
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	0159      	lsls	r1, r3, #5
 80037b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b6:	0150      	lsls	r0, r2, #5
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	1b11      	subs	r1, r2, r4
 80037be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037c0:	eb63 0305 	sbc.w	r3, r3, r5
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80037d2:	4649      	mov	r1, r9
 80037d4:	024b      	lsls	r3, r1, #9
 80037d6:	46c4      	mov	ip, r8
 80037d8:	ea43 53dc 	orr.w	r3, r3, ip, lsr #23
 80037dc:	4641      	mov	r1, r8
 80037de:	024a      	lsls	r2, r1, #9
 80037e0:	4611      	mov	r1, r2
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	191b      	adds	r3, r3, r4
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ea:	4613      	mov	r3, r2
 80037ec:	eb45 0303 	adc.w	r3, r5, r3
 80037f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80037fe:	4649      	mov	r1, r9
 8003800:	018b      	lsls	r3, r1, #6
 8003802:	4641      	mov	r1, r8
 8003804:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003808:	4641      	mov	r1, r8
 800380a:	018a      	lsls	r2, r1, #6
 800380c:	46c4      	mov	ip, r8
 800380e:	ebb2 0c0c 	subs.w	ip, r2, ip
 8003812:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8003816:	4649      	mov	r1, r9
 8003818:	eb63 0301 	sbc.w	r3, r3, r1
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003822:	460b      	mov	r3, r1
 8003824:	191b      	adds	r3, r3, r4
 8003826:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800382a:	4613      	mov	r3, r2
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003834:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8003838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800383c:	f7fd f974 	bl	8000b28 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
		c = b ? RFRAC_DENOM : 1;
 800384a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <pll_calc+0x45e>
 8003852:	4b98      	ldr	r3, [pc, #608]	@ (8003ab4 <pll_calc+0x6bc>)
 8003854:	e000      	b.n	8003858 <pll_calc+0x460>
 8003856:	2301      	movs	r3, #1
 8003858:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
	}

	// Calculate parameters
  p1 = 128 * a + ((128 * b) / c) - 512;
 800385c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003860:	01d9      	lsls	r1, r3, #7
 8003862:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003866:	01da      	lsls	r2, r3, #7
 8003868:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	440b      	add	r3, r1
 8003872:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003876:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  p2 = 128 * b - c * ((128 * b) / c);
 800387a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800387e:	01d9      	lsls	r1, r3, #7
 8003880:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003884:	fbb1 f2f3 	udiv	r2, r1, r3
 8003888:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	1acb      	subs	r3, r1, r3
 8003892:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  p3 = c;
 8003896:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800389a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

	// Recalculate frequency as fIN * (a + b/c)
	lltmp = ref_freq;
 800389e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80038a2:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	lltmp *= b;
 80038a6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80038b8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80038bc:	4622      	mov	r2, r4
 80038be:	fb02 f203 	mul.w	r2, r2, r3
 80038c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80038c6:	4629      	mov	r1, r5
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	441a      	add	r2, r3
 80038ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80038d2:	4621      	mov	r1, r4
 80038d4:	fba3 3101 	umull	r3, r1, r3, r1
 80038d8:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 80038dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80038e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80038ea:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	@ 0x118
 80038ee:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
 80038f2:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
	do_div(lltmp, c);
 80038f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80038fa:	2200      	movs	r2, #0
 80038fc:	623b      	str	r3, [r7, #32]
 80038fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8003900:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003904:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
 8003908:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800390c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8003910:	f7fd f90a 	bl	8000b28 <__aeabi_uldivmod>
 8003914:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8003918:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800391c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8003920:	f7fd f902 	bl	8000b28 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	freq = lltmp;
 800392c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8003930:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	freq += ref_freq * a;
 8003934:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003938:	2200      	movs	r2, #0
 800393a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800393e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003942:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003946:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800394a:	462a      	mov	r2, r5
 800394c:	fb02 f203 	mul.w	r2, r2, r3
 8003950:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003954:	4621      	mov	r1, r4
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	441a      	add	r2, r3
 800395c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003960:	4621      	mov	r1, r4
 8003962:	fba3 3101 	umull	r3, r1, r3, r1
 8003966:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 800396a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800396e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003978:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800397c:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8003980:	4621      	mov	r1, r4
 8003982:	1851      	adds	r1, r2, r1
 8003984:	61b9      	str	r1, [r7, #24]
 8003986:	4629      	mov	r1, r5
 8003988:	eb43 0101 	adc.w	r1, r3, r1
 800398c:	61f9      	str	r1, [r7, #28]
 800398e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003992:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130

	reg->p1 = p1;
 8003996:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800399a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800399e:	6013      	str	r3, [r2, #0]
	reg->p2 = p2;
 80039a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80039a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80039a8:	6053      	str	r3, [r2, #4]
	reg->p3 = p3;
 80039aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80039ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80039b2:	6093      	str	r3, [r2, #8]

	if(vcxo)
 80039b4:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d06e      	beq.n	8003a9a <pll_calc+0x6a2>
	{
		return (uint64_t)(128 * a * 1000000ULL + b);
 80039bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80039c0:	01db      	lsls	r3, r3, #7
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039c8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80039cc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80039d0:	4622      	mov	r2, r4
 80039d2:	462b      	mov	r3, r5
 80039d4:	f04f 0000 	mov.w	r0, #0
 80039d8:	f04f 0100 	mov.w	r1, #0
 80039dc:	0159      	lsls	r1, r3, #5
 80039de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e2:	0150      	lsls	r0, r2, #5
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4621      	mov	r1, r4
 80039ea:	1a51      	subs	r1, r2, r1
 80039ec:	6139      	str	r1, [r7, #16]
 80039ee:	4629      	mov	r1, r5
 80039f0:	eb63 0301 	sbc.w	r3, r3, r1
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003a02:	4649      	mov	r1, r9
 8003a04:	024b      	lsls	r3, r1, #9
 8003a06:	46c4      	mov	ip, r8
 8003a08:	ea43 53dc 	orr.w	r3, r3, ip, lsr #23
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	024a      	lsls	r2, r1, #9
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	4622      	mov	r2, r4
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	462a      	mov	r2, r5
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003a32:	4649      	mov	r1, r9
 8003a34:	018b      	lsls	r3, r1, #6
 8003a36:	4641      	mov	r1, r8
 8003a38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	018a      	lsls	r2, r1, #6
 8003a40:	46c4      	mov	ip, r8
 8003a42:	ebb2 0c0c 	subs.w	ip, r2, ip
 8003a46:	f8c7 c000 	str.w	ip, [r7]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a56:	4603      	mov	r3, r0
 8003a58:	4622      	mov	r2, r4
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a60:	462b      	mov	r3, r5
 8003a62:	460a      	mov	r2, r1
 8003a64:	eb42 0303 	adc.w	r3, r2, r3
 8003a68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a76:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a7a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8003a7e:	4623      	mov	r3, r4
 8003a80:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003a84:	4602      	mov	r2, r0
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	462a      	mov	r2, r5
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003a98:	e003      	b.n	8003aa2 <pll_calc+0x6aa>
	}
	else
	{
		return freq;
 8003a9a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003a9e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	}
}
 8003aa2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab4:	000f4240 	.word	0x000f4240

08003ab8 <multisynth_calc>:

uint64_t multisynth_calc(uint64_t freq, uint64_t pll_freq, struct Si5351RegSet *reg)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b098      	sub	sp, #96	@ 0x60
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003ac4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t lltmp;
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4 = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t ret_val = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 8003ad4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad8:	49a1      	ldr	r1, [pc, #644]	@ (8003d60 <multisynth_calc+0x2a8>)
 8003ada:	428a      	cmp	r2, r1
 8003adc:	f173 0305 	sbcs.w	r3, r3, #5
 8003ae0:	d304      	bcc.n	8003aec <multisynth_calc+0x34>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 8003ae2:	a399      	add	r3, pc, #612	@ (adr r3, 8003d48 <multisynth_calc+0x290>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 8003aec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003af0:	499c      	ldr	r1, [pc, #624]	@ (8003d64 <multisynth_calc+0x2ac>)
 8003af2:	428a      	cmp	r2, r1
 8003af4:	f173 0300 	sbcs.w	r3, r3, #0
 8003af8:	d204      	bcs.n	8003b04 <multisynth_calc+0x4c>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 8003afa:	a395      	add	r3, pc, #596	@ (adr r3, 8003d50 <multisynth_calc+0x298>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 8003b04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b08:	4997      	ldr	r1, [pc, #604]	@ (8003d68 <multisynth_calc+0x2b0>)
 8003b0a:	428a      	cmp	r2, r1
 8003b0c:	f173 0303 	sbcs.w	r3, r3, #3
 8003b10:	d302      	bcc.n	8003b18 <multisynth_calc+0x60>
	{
		divby4 = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(pll_freq == 0)
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d158      	bne.n	8003bd2 <multisynth_calc+0x11a>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		if(divby4 == 0)
 8003b20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d134      	bne.n	8003b92 <multisynth_calc+0xda>
		{
			lltmp = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT; // margin needed?
 8003b28:	a38b      	add	r3, pc, #556	@ (adr r3, 8003d58 <multisynth_calc+0x2a0>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			do_div(lltmp, freq);
 8003b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b36:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8003b3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b42:	f7fc fff1 	bl	8000b28 <__aeabi_uldivmod>
 8003b46:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003b4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003b52:	f7fc ffe9 	bl	8000b28 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			if(lltmp == 5)
 8003b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b62:	1f51      	subs	r1, r2, #5
 8003b64:	430b      	orrs	r3, r1
 8003b66:	d106      	bne.n	8003b76 <multisynth_calc+0xbe>
			{
				lltmp = 4;
 8003b68:	f04f 0204 	mov.w	r2, #4
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8003b74:	e00a      	b.n	8003b8c <multisynth_calc+0xd4>
			}
			else if(lltmp == 7)
 8003b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b7a:	1fd1      	subs	r1, r2, #7
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	d105      	bne.n	8003b8c <multisynth_calc+0xd4>
			{
				lltmp = 6;
 8003b80:	f04f 0206 	mov.w	r2, #6
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
			}
			a = (uint32_t)lltmp;
 8003b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b90:	e001      	b.n	8003b96 <multisynth_calc+0xde>
		}
		else
		{
			a = 4;
 8003b92:	2304      	movs	r3, #4
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		b = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	653b      	str	r3, [r7, #80]	@ 0x50
		c = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		pll_freq = a * freq;
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	617a      	str	r2, [r7, #20]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003bac:	4642      	mov	r2, r8
 8003bae:	fb02 f203 	mul.w	r2, r2, r3
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	fba2 4501 	umull	r4, r5, r2, r1
 8003bc4:	442b      	add	r3, r5
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003bcc:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003bd0:	e07d      	b.n	8003cce <multisynth_calc+0x216>
	}
	else
	{
		// Preset PLL, so return the actual freq for these params instead of PLL freq
		ret_val = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		// Determine integer part of feedback equation
		a = pll_freq / freq;
 8003bd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003be0:	f7fc ffa2 	bl	8000b28 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	657b      	str	r3, [r7, #84]	@ 0x54

		if (a < SI5351_MULTISYNTH_A_MIN)
 8003bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d80b      	bhi.n	8003c0a <multisynth_calc+0x152>
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 8003bf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bf6:	f04f 0206 	mov.w	r2, #6
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	f7fc ff93 	bl	8000b28 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		if (a > SI5351_MULTISYNTH_A_MAX)
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8003c10:	d90b      	bls.n	8003c2a <multisynth_calc+0x172>
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 8003c12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c16:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f7fc ff83 	bl	8000b28 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 8003c2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c32:	f7fc ff79 	bl	8000b28 <__aeabi_uldivmod>
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	f04f 0500 	mov.w	r5, #0
 8003c46:	015d      	lsls	r5, r3, #5
 8003c48:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003c4c:	0154      	lsls	r4, r2, #5
 8003c4e:	4622      	mov	r2, r4
 8003c50:	462b      	mov	r3, r5
 8003c52:	ebb2 0800 	subs.w	r8, r2, r0
 8003c56:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003c66:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003c6a:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	eb18 0a00 	adds.w	sl, r8, r0
 8003c76:	eb49 0b01 	adc.w	fp, r9, r1
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c86:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c8a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c8e:	ebb2 040a 	subs.w	r4, r2, sl
 8003c92:	603c      	str	r4, [r7, #0]
 8003c94:	eb63 030b 	sbc.w	r3, r3, fp
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	181b      	adds	r3, r3, r0
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	eb41 0303 	adc.w	r3, r1, r3
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cb4:	f7fc ff38 	bl	8000b28 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	653b      	str	r3, [r7, #80]	@ 0x50
		c = b ? RFRAC_DENOM : 1;
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <multisynth_calc+0x212>
 8003cc6:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <multisynth_calc+0x2b4>)
 8003cc8:	e000      	b.n	8003ccc <multisynth_calc+0x214>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	// Calculate parameters
	if (divby4 == 1)
 8003cce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <multisynth_calc+0x22c>
	{
		p3 = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
		p2 = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	647b      	str	r3, [r7, #68]	@ 0x44
		p1 = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce2:	e016      	b.n	8003d12 <multisynth_calc+0x25a>
	}
	else
	{
    p1 = 128 * a + ((128 * b) / c) - 512;
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	01da      	lsls	r2, r3, #7
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cea:	01d9      	lsls	r1, r3, #7
 8003cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
    p2 = 128 * b - c * ((128 * b) / c);
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfc:	01db      	lsls	r3, r3, #7
 8003cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d00:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d04:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003d06:	fb01 f202 	mul.w	r2, r1, r2
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	647b      	str	r3, [r7, #68]	@ 0x44
    p3 = c;
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d10:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	reg->p1 = p1;
 8003d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d18:	601a      	str	r2, [r3, #0]
	reg->p2 = p2;
 8003d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d20:	605a      	str	r2, [r3, #4]
	reg->p3 = p3;
 8003d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d28:	609a      	str	r2, [r3, #8]

	if(ret_val == 0)
 8003d2a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <multisynth_calc+0x280>
	{
		return pll_freq;
 8003d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d36:	e001      	b.n	8003d3c <multisynth_calc+0x284>
	}
	else
	{
		return freq;
 8003d38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
	}
}
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	3760      	adds	r7, #96	@ 0x60
 8003d42:	46bd      	mov	sp, r7
 8003d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d48:	3d1ac100 	.word	0x3d1ac100
 8003d4c:	00000005 	.word	0x00000005
 8003d50:	02faf080 	.word	0x02faf080
 8003d54:	00000000 	.word	0x00000000
 8003d58:	f46b0400 	.word	0xf46b0400
 8003d5c:	00000014 	.word	0x00000014
 8003d60:	3d1ac101 	.word	0x3d1ac101
 8003d64:	02faf080 	.word	0x02faf080
 8003d68:	7e11d600 	.word	0x7e11d600
 8003d6c:	000f4240 	.word	0x000f4240

08003d70 <multisynth67_calc>:

uint64_t multisynth67_calc(uint64_t freq, uint64_t pll_freq, struct Si5351RegSet *reg)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b092      	sub	sp, #72	@ 0x48
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// uint8_t ret_val = 0;
	uint32_t a;
	uint64_t lltmp;

	// Multisynth bounds checking
	if(freq > SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT)
 8003d80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d84:	497e      	ldr	r1, [pc, #504]	@ (8003f80 <multisynth67_calc+0x210>)
 8003d86:	428a      	cmp	r2, r1
 8003d88:	f173 0303 	sbcs.w	r3, r3, #3
 8003d8c:	d304      	bcc.n	8003d98 <multisynth67_calc+0x28>
	{
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
 8003d8e:	a376      	add	r3, pc, #472	@ (adr r3, 8003f68 <multisynth67_calc+0x1f8>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}
	if(freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 8003d98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9c:	4979      	ldr	r1, [pc, #484]	@ (8003f84 <multisynth67_calc+0x214>)
 8003d9e:	428a      	cmp	r2, r1
 8003da0:	f173 0300 	sbcs.w	r3, r3, #0
 8003da4:	d204      	bcs.n	8003db0 <multisynth67_calc+0x40>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 8003da6:	a372      	add	r3, pc, #456	@ (adr r3, 8003f70 <multisynth67_calc+0x200>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	if(pll_freq == 0)
 8003db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f040 809e 	bne.w	8003ef6 <multisynth67_calc+0x186>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		lltmp = (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) - 100000000UL; // margin needed?
 8003dba:	a36f      	add	r3, pc, #444	@ (adr r3, 8003f78 <multisynth67_calc+0x208>)
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		do_div(lltmp, freq);
 8003dc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8003dcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003dd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003dd4:	f7fc fea8 	bl	8000b28 <__aeabi_uldivmod>
 8003dd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8003ddc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003de0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003de4:	f7fc fea0 	bl	8000b28 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		a = (uint32_t)lltmp;
 8003df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44

		// Divisor has to be even
		if(a % 2 != 0)
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <multisynth67_calc+0x94>
		{
			a++;
 8003dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e00:	3301      	adds	r3, #1
 8003e02:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		// Divisor bounds check
		if(a < SI5351_MULTISYNTH_A_MIN)
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d801      	bhi.n	8003e0e <multisynth67_calc+0x9e>
		{
			a = SI5351_MULTISYNTH_A_MIN;
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if(a > SI5351_MULTISYNTH67_A_MAX)
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e10:	2bfe      	cmp	r3, #254	@ 0xfe
 8003e12:	d901      	bls.n	8003e18 <multisynth67_calc+0xa8>
		{
			a = SI5351_MULTISYNTH67_A_MAX;
 8003e14:	23fe      	movs	r3, #254	@ 0xfe
 8003e16:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		pll_freq = a * freq;
 8003e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	617a      	str	r2, [r7, #20]
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e26:	4602      	mov	r2, r0
 8003e28:	fb02 f203 	mul.w	r2, r2, r3
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	6939      	ldr	r1, [r7, #16]
 8003e3c:	fba2 ab01 	umull	sl, fp, r2, r1
 8003e40:	445b      	add	r3, fp
 8003e42:	469b      	mov	fp, r3
 8003e44:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8003e48:	e9c7 ab06 	strd	sl, fp, [r7, #24]

		// PLL bounds checking
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 8003e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e50:	494d      	ldr	r1, [pc, #308]	@ (8003f88 <multisynth67_calc+0x218>)
 8003e52:	428a      	cmp	r2, r1
 8003e54:	f173 0314 	sbcs.w	r3, r3, #20
 8003e58:	d31c      	bcc.n	8003e94 <multisynth67_calc+0x124>
		{
			a -= 2;
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e5c:	3b02      	subs	r3, #2
 8003e5e:	647b      	str	r3, [r7, #68]	@ 0x44
			pll_freq = a * freq;
 8003e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e62:	2200      	movs	r2, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	60fa      	str	r2, [r7, #12]
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e6e:	4622      	mov	r2, r4
 8003e70:	fb02 f203 	mul.w	r2, r2, r3
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	4629      	mov	r1, r5
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	4621      	mov	r1, r4
 8003e82:	fba2 8901 	umull	r8, r9, r2, r1
 8003e86:	444b      	add	r3, r9
 8003e88:	4699      	mov	r9, r3
 8003e8a:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8003e8e:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8003e92:	e022      	b.n	8003eda <multisynth67_calc+0x16a>
		}
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
 8003e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e98:	493c      	ldr	r1, [pc, #240]	@ (8003f8c <multisynth67_calc+0x21c>)
 8003e9a:	428a      	cmp	r2, r1
 8003e9c:	f173 030d 	sbcs.w	r3, r3, #13
 8003ea0:	d21b      	bcs.n	8003eda <multisynth67_calc+0x16a>
		{
			a += 2;
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	647b      	str	r3, [r7, #68]	@ 0x44
			pll_freq = a * freq;
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eaa:	2200      	movs	r2, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	fb02 f203 	mul.w	r2, r2, r3
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	4641      	mov	r1, r8
 8003eca:	fba2 4501 	umull	r4, r5, r2, r1
 8003ece:	442b      	add	r3, r5
 8003ed0:	461d      	mov	r5, r3
 8003ed2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003ed6:	e9c7 4506 	strd	r4, r5, [r7, #24]
		}

		reg->p1 = (uint8_t)a;
 8003eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee2:	601a      	str	r2, [r3, #0]
		reg->p2 = 0;
 8003ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
		reg->p3 = 0;
 8003eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
		return pll_freq;
 8003ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef4:	e030      	b.n	8003f58 <multisynth67_calc+0x1e8>
	}
	else
	{
		// Multisynth frequency must be integer division of PLL
		if(pll_freq % freq)
 8003ef6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003efe:	f7fc fe13 	bl	8000b28 <__aeabi_uldivmod>
 8003f02:	4313      	orrs	r3, r2
 8003f04:	d004      	beq.n	8003f10 <multisynth67_calc+0x1a0>
		{
			// No good
			return 0;
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e023      	b.n	8003f58 <multisynth67_calc+0x1e8>
		}
		else
		{
			a = pll_freq / freq;
 8003f10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003f18:	f7fc fe06 	bl	8000b28 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44

			// Division ratio bounds check
			if(a < SI5351_MULTISYNTH_A_MIN || a > SI5351_MULTISYNTH67_A_MAX)
 8003f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d902      	bls.n	8003f30 <multisynth67_calc+0x1c0>
 8003f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2c:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f2e:	d904      	bls.n	8003f3a <multisynth67_calc+0x1ca>
			{
				// No bueno
				return 0;
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e00e      	b.n	8003f58 <multisynth67_calc+0x1e8>
			}
			else
			{
				reg->p1 = (uint8_t)a;
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f42:	601a      	str	r2, [r3, #0]
				reg->p2 = 0;
 8003f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f46:	2200      	movs	r2, #0
 8003f48:	605a      	str	r2, [r3, #4]
				reg->p3 = 0;
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
				return 1;
 8003f50:	f04f 0201 	mov.w	r2, #1
 8003f54:	f04f 0300 	mov.w	r3, #0
			}
		}
	}
}
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	3748      	adds	r7, #72	@ 0x48
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f64:	f3af 8000 	nop.w
 8003f68:	7e11d600 	.word	0x7e11d600
 8003f6c:	00000003 	.word	0x00000003
 8003f70:	02faf080 	.word	0x02faf080
 8003f74:	00000000 	.word	0x00000000
 8003f78:	ee752300 	.word	0xee752300
 8003f7c:	00000014 	.word	0x00000014
 8003f80:	7e11d601 	.word	0x7e11d601
 8003f84:	02faf080 	.word	0x02faf080
 8003f88:	f46b0401 	.word	0xf46b0401
 8003f8c:	f8475800 	.word	0xf8475800

08003f90 <ms_div>:
  int_status->LOL_A_STKY = (reg_val >> 5) & 0x01;
  int_status->LOS_STKY = (reg_val >> 4) & 0x01;
}

void ms_div(enum si5351_clock clk, uint8_t r_div, uint8_t div_by_4)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	71bb      	strb	r3, [r7, #6]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	717b      	strb	r3, [r7, #5]
	uint8_t reg_val = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
    uint8_t reg_addr = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73bb      	strb	r3, [r7, #14]

	switch(clk)
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d82b      	bhi.n	8004008 <ms_div+0x78>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <ms_div+0x28>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003fdf 	.word	0x08003fdf
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003feb 	.word	0x08003feb
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08003ffd 	.word	0x08003ffd
 8003fd4:	08004003 	.word	0x08004003
	{
		case SI5351_CLK0:
			reg_addr = SI5351_CLK0_PARAMETERS + 2;
 8003fd8:	232c      	movs	r3, #44	@ 0x2c
 8003fda:	73bb      	strb	r3, [r7, #14]
			break;
 8003fdc:	e014      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK1:
			reg_addr = SI5351_CLK1_PARAMETERS + 2;
 8003fde:	2334      	movs	r3, #52	@ 0x34
 8003fe0:	73bb      	strb	r3, [r7, #14]
			break;
 8003fe2:	e011      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK2:
			reg_addr = SI5351_CLK2_PARAMETERS + 2;
 8003fe4:	233c      	movs	r3, #60	@ 0x3c
 8003fe6:	73bb      	strb	r3, [r7, #14]
			break;
 8003fe8:	e00e      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK3:
			reg_addr = SI5351_CLK3_PARAMETERS + 2;
 8003fea:	2344      	movs	r3, #68	@ 0x44
 8003fec:	73bb      	strb	r3, [r7, #14]
			break;
 8003fee:	e00b      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK4:
			reg_addr = SI5351_CLK4_PARAMETERS + 2;
 8003ff0:	234c      	movs	r3, #76	@ 0x4c
 8003ff2:	73bb      	strb	r3, [r7, #14]
			break;
 8003ff4:	e008      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK5:
			reg_addr = SI5351_CLK5_PARAMETERS + 2;
 8003ff6:	2354      	movs	r3, #84	@ 0x54
 8003ff8:	73bb      	strb	r3, [r7, #14]
			break;
 8003ffa:	e005      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK6:
			reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
 8003ffc:	235c      	movs	r3, #92	@ 0x5c
 8003ffe:	73bb      	strb	r3, [r7, #14]
			break;
 8004000:	e002      	b.n	8004008 <ms_div+0x78>
		case SI5351_CLK7:
			reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
 8004002:	235c      	movs	r3, #92	@ 0x5c
 8004004:	73bb      	strb	r3, [r7, #14]
			break;
 8004006:	bf00      	nop
	}

	reg_val = si5351_read(reg_addr);
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fa9c 	bl	8004548 <si5351_read>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

	if(clk <= (uint8_t)SI5351_CLK5)
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d819      	bhi.n	800404e <ms_div+0xbe>
	{
		// Clear the relevant bits
		reg_val &= ~(0x7c);
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8004020:	73fb      	strb	r3, [r7, #15]

		if(div_by_4 == 0)
 8004022:	797b      	ldrb	r3, [r7, #5]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <ms_div+0xa2>
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	f023 030c 	bic.w	r3, r3, #12
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e003      	b.n	800403a <ms_div+0xaa>
		}
		else
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	f043 030c 	orr.w	r3, r3, #12
 8004038:	73fb      	strb	r3, [r7, #15]
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 800403a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	b25a      	sxtb	r2, r3
 8004042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004046:	4313      	orrs	r3, r2
 8004048:	b25b      	sxtb	r3, r3
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e01b      	b.n	8004086 <ms_div+0xf6>
	}
	else if(clk == SI5351_CLK6)
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b06      	cmp	r3, #6
 8004052:	d108      	bne.n	8004066 <ms_div+0xd6>
	{
		// Clear the relevant bits
		reg_val &= ~(0x07);
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	73fb      	strb	r3, [r7, #15]

		reg_val |= r_div;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	79bb      	ldrb	r3, [r7, #6]
 8004060:	4313      	orrs	r3, r2
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e00f      	b.n	8004086 <ms_div+0xf6>
	}
	else if(clk == SI5351_CLK7)
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b07      	cmp	r3, #7
 800406a:	d10c      	bne.n	8004086 <ms_div+0xf6>
	{
		// Clear the relevant bits
		reg_val &= ~(0x70);
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004072:	73fb      	strb	r3, [r7, #15]

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 8004074:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	b25a      	sxtb	r2, r3
 800407c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004080:	4313      	orrs	r3, r2
 8004082:	b25b      	sxtb	r3, r3
 8004084:	73fb      	strb	r3, [r7, #15]
	}

	si5351_write(reg_addr, reg_val);
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fa31 	bl	80044f4 <si5351_write>
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop

0800409c <select_r_div>:

uint8_t select_r_div(uint64_t *freq)
{
 800409c:	b4b0      	push	{r4, r5, r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	4973      	ldr	r1, [pc, #460]	@ (800427c <select_r_div+0x1e0>)
 80040b0:	428a      	cmp	r2, r1
 80040b2:	f173 0300 	sbcs.w	r3, r3, #0
 80040b6:	d318      	bcc.n	80040ea <select_r_div+0x4e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	4970      	ldr	r1, [pc, #448]	@ (8004280 <select_r_div+0x1e4>)
 80040c0:	428a      	cmp	r2, r1
 80040c2:	f173 0300 	sbcs.w	r3, r3, #0
 80040c6:	d210      	bcs.n	80040ea <select_r_div+0x4e>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 80040c8:	2307      	movs	r3, #7
 80040ca:	73fb      	strb	r3, [r7, #15]
		*freq *= 128ULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	01cb      	lsls	r3, r1, #7
 80040dc:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80040e0:	01c2      	lsls	r2, r0, #7
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	e9c1 2300 	strd	r2, r3, [r1]
 80040e8:	e0c1      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	4963      	ldr	r1, [pc, #396]	@ (8004280 <select_r_div+0x1e4>)
 80040f2:	428a      	cmp	r2, r1
 80040f4:	f173 0300 	sbcs.w	r3, r3, #0
 80040f8:	d318      	bcc.n	800412c <select_r_div+0x90>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	4960      	ldr	r1, [pc, #384]	@ (8004284 <select_r_div+0x1e8>)
 8004102:	428a      	cmp	r2, r1
 8004104:	f173 0300 	sbcs.w	r3, r3, #0
 8004108:	d210      	bcs.n	800412c <select_r_div+0x90>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800410a:	2306      	movs	r3, #6
 800410c:	73fb      	strb	r3, [r7, #15]
		*freq *= 64ULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	018b      	lsls	r3, r1, #6
 800411e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004122:	0182      	lsls	r2, r0, #6
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	e9c1 2300 	strd	r2, r3, [r1]
 800412a:	e0a0      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	4954      	ldr	r1, [pc, #336]	@ (8004284 <select_r_div+0x1e8>)
 8004134:	428a      	cmp	r2, r1
 8004136:	f173 0300 	sbcs.w	r3, r3, #0
 800413a:	d318      	bcc.n	800416e <select_r_div+0xd2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	4951      	ldr	r1, [pc, #324]	@ (8004288 <select_r_div+0x1ec>)
 8004144:	428a      	cmp	r2, r1
 8004146:	f173 0300 	sbcs.w	r3, r3, #0
 800414a:	d210      	bcs.n	800416e <select_r_div+0xd2>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800414c:	2305      	movs	r3, #5
 800414e:	73fb      	strb	r3, [r7, #15]
		*freq *= 32ULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	014b      	lsls	r3, r1, #5
 8004160:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004164:	0142      	lsls	r2, r0, #5
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	e9c1 2300 	strd	r2, r3, [r1]
 800416c:	e07f      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	4944      	ldr	r1, [pc, #272]	@ (8004288 <select_r_div+0x1ec>)
 8004176:	428a      	cmp	r2, r1
 8004178:	f173 0300 	sbcs.w	r3, r3, #0
 800417c:	d318      	bcc.n	80041b0 <select_r_div+0x114>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	4941      	ldr	r1, [pc, #260]	@ (800428c <select_r_div+0x1f0>)
 8004186:	428a      	cmp	r2, r1
 8004188:	f173 0300 	sbcs.w	r3, r3, #0
 800418c:	d210      	bcs.n	80041b0 <select_r_div+0x114>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800418e:	2304      	movs	r3, #4
 8004190:	73fb      	strb	r3, [r7, #15]
		*freq *= 16ULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	010b      	lsls	r3, r1, #4
 80041a2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80041a6:	0102      	lsls	r2, r0, #4
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	e9c1 2300 	strd	r2, r3, [r1]
 80041ae:	e05e      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	4935      	ldr	r1, [pc, #212]	@ (800428c <select_r_div+0x1f0>)
 80041b8:	428a      	cmp	r2, r1
 80041ba:	f173 0300 	sbcs.w	r3, r3, #0
 80041be:	d318      	bcc.n	80041f2 <select_r_div+0x156>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	4932      	ldr	r1, [pc, #200]	@ (8004290 <select_r_div+0x1f4>)
 80041c8:	428a      	cmp	r2, r1
 80041ca:	f173 0300 	sbcs.w	r3, r3, #0
 80041ce:	d210      	bcs.n	80041f2 <select_r_div+0x156>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 80041d0:	2303      	movs	r3, #3
 80041d2:	73fb      	strb	r3, [r7, #15]
		*freq *= 8ULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	00cb      	lsls	r3, r1, #3
 80041e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80041e8:	00c2      	lsls	r2, r0, #3
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	e9c1 2300 	strd	r2, r3, [r1]
 80041f0:	e03d      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	4925      	ldr	r1, [pc, #148]	@ (8004290 <select_r_div+0x1f4>)
 80041fa:	428a      	cmp	r2, r1
 80041fc:	f173 0300 	sbcs.w	r3, r3, #0
 8004200:	d318      	bcc.n	8004234 <select_r_div+0x198>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	4922      	ldr	r1, [pc, #136]	@ (8004294 <select_r_div+0x1f8>)
 800420a:	428a      	cmp	r2, r1
 800420c:	f173 0300 	sbcs.w	r3, r3, #0
 8004210:	d210      	bcs.n	8004234 <select_r_div+0x198>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 8004212:	2302      	movs	r3, #2
 8004214:	73fb      	strb	r3, [r7, #15]
		*freq *= 4ULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	008b      	lsls	r3, r1, #2
 8004226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800422a:	0082      	lsls	r2, r0, #2
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	e9c1 2300 	strd	r2, r3, [r1]
 8004232:	e01c      	b.n	800426e <select_r_div+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	4916      	ldr	r1, [pc, #88]	@ (8004294 <select_r_div+0x1f8>)
 800423c:	428a      	cmp	r2, r1
 800423e:	f173 0300 	sbcs.w	r3, r3, #0
 8004242:	d314      	bcc.n	800426e <select_r_div+0x1d2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	4913      	ldr	r1, [pc, #76]	@ (8004298 <select_r_div+0x1fc>)
 800424c:	428a      	cmp	r2, r1
 800424e:	f173 0300 	sbcs.w	r3, r3, #0
 8004252:	d20c      	bcs.n	800426e <select_r_div+0x1d2>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
		*freq *= 2ULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	1894      	adds	r4, r2, r2
 8004260:	eb43 0503 	adc.w	r5, r3, r3
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return r_div;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	bcb0      	pop	{r4, r5, r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	00061a80 	.word	0x00061a80
 8004280:	000c3500 	.word	0x000c3500
 8004284:	00186a00 	.word	0x00186a00
 8004288:	0030d400 	.word	0x0030d400
 800428c:	0061a800 	.word	0x0061a800
 8004290:	00c35000 	.word	0x00c35000
 8004294:	0186a000 	.word	0x0186a000
 8004298:	030d4000 	.word	0x030d4000

0800429c <select_r_div_ms67>:

uint8_t select_r_div_ms67(uint64_t *freq)
{
 800429c:	b4b0      	push	{r4, r5, r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	4973      	ldr	r1, [pc, #460]	@ (800447c <select_r_div_ms67+0x1e0>)
 80042b0:	428a      	cmp	r2, r1
 80042b2:	f173 0300 	sbcs.w	r3, r3, #0
 80042b6:	d318      	bcc.n	80042ea <select_r_div_ms67+0x4e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	4970      	ldr	r1, [pc, #448]	@ (8004480 <select_r_div_ms67+0x1e4>)
 80042c0:	428a      	cmp	r2, r1
 80042c2:	f173 0300 	sbcs.w	r3, r3, #0
 80042c6:	d210      	bcs.n	80042ea <select_r_div_ms67+0x4e>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 80042c8:	2307      	movs	r3, #7
 80042ca:	73fb      	strb	r3, [r7, #15]
		*freq *= 128ULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	01cb      	lsls	r3, r1, #7
 80042dc:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80042e0:	01c2      	lsls	r2, r0, #7
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	e9c1 2300 	strd	r2, r3, [r1]
 80042e8:	e0c1      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	4963      	ldr	r1, [pc, #396]	@ (8004480 <select_r_div_ms67+0x1e4>)
 80042f2:	428a      	cmp	r2, r1
 80042f4:	f173 0300 	sbcs.w	r3, r3, #0
 80042f8:	d318      	bcc.n	800432c <select_r_div_ms67+0x90>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	4960      	ldr	r1, [pc, #384]	@ (8004484 <select_r_div_ms67+0x1e8>)
 8004302:	428a      	cmp	r2, r1
 8004304:	f173 0300 	sbcs.w	r3, r3, #0
 8004308:	d210      	bcs.n	800432c <select_r_div_ms67+0x90>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800430a:	2306      	movs	r3, #6
 800430c:	73fb      	strb	r3, [r7, #15]
		*freq *= 64ULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	018b      	lsls	r3, r1, #6
 800431e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004322:	0182      	lsls	r2, r0, #6
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	e9c1 2300 	strd	r2, r3, [r1]
 800432a:	e0a0      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	4954      	ldr	r1, [pc, #336]	@ (8004484 <select_r_div_ms67+0x1e8>)
 8004334:	428a      	cmp	r2, r1
 8004336:	f173 0300 	sbcs.w	r3, r3, #0
 800433a:	d318      	bcc.n	800436e <select_r_div_ms67+0xd2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	4951      	ldr	r1, [pc, #324]	@ (8004488 <select_r_div_ms67+0x1ec>)
 8004344:	428a      	cmp	r2, r1
 8004346:	f173 0300 	sbcs.w	r3, r3, #0
 800434a:	d210      	bcs.n	800436e <select_r_div_ms67+0xd2>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800434c:	2305      	movs	r3, #5
 800434e:	73fb      	strb	r3, [r7, #15]
		*freq *= 32ULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004364:	0142      	lsls	r2, r0, #5
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	e9c1 2300 	strd	r2, r3, [r1]
 800436c:	e07f      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	4944      	ldr	r1, [pc, #272]	@ (8004488 <select_r_div_ms67+0x1ec>)
 8004376:	428a      	cmp	r2, r1
 8004378:	f173 0300 	sbcs.w	r3, r3, #0
 800437c:	d318      	bcc.n	80043b0 <select_r_div_ms67+0x114>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	4941      	ldr	r1, [pc, #260]	@ (800448c <select_r_div_ms67+0x1f0>)
 8004386:	428a      	cmp	r2, r1
 8004388:	f173 0300 	sbcs.w	r3, r3, #0
 800438c:	d210      	bcs.n	80043b0 <select_r_div_ms67+0x114>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800438e:	2304      	movs	r3, #4
 8004390:	73fb      	strb	r3, [r7, #15]
		*freq *= 16ULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	010b      	lsls	r3, r1, #4
 80043a2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80043a6:	0102      	lsls	r2, r0, #4
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	e9c1 2300 	strd	r2, r3, [r1]
 80043ae:	e05e      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	4935      	ldr	r1, [pc, #212]	@ (800448c <select_r_div_ms67+0x1f0>)
 80043b8:	428a      	cmp	r2, r1
 80043ba:	f173 0300 	sbcs.w	r3, r3, #0
 80043be:	d318      	bcc.n	80043f2 <select_r_div_ms67+0x156>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	4932      	ldr	r1, [pc, #200]	@ (8004490 <select_r_div_ms67+0x1f4>)
 80043c8:	428a      	cmp	r2, r1
 80043ca:	f173 0300 	sbcs.w	r3, r3, #0
 80043ce:	d210      	bcs.n	80043f2 <select_r_div_ms67+0x156>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 80043d0:	2303      	movs	r3, #3
 80043d2:	73fb      	strb	r3, [r7, #15]
		*freq *= 8ULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80043e8:	00c2      	lsls	r2, r0, #3
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	e9c1 2300 	strd	r2, r3, [r1]
 80043f0:	e03d      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	4925      	ldr	r1, [pc, #148]	@ (8004490 <select_r_div_ms67+0x1f4>)
 80043fa:	428a      	cmp	r2, r1
 80043fc:	f173 0300 	sbcs.w	r3, r3, #0
 8004400:	d318      	bcc.n	8004434 <select_r_div_ms67+0x198>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	4922      	ldr	r1, [pc, #136]	@ (8004494 <select_r_div_ms67+0x1f8>)
 800440a:	428a      	cmp	r2, r1
 800440c:	f173 0300 	sbcs.w	r3, r3, #0
 8004410:	d210      	bcs.n	8004434 <select_r_div_ms67+0x198>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 8004412:	2302      	movs	r3, #2
 8004414:	73fb      	strb	r3, [r7, #15]
		*freq *= 4ULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	008b      	lsls	r3, r1, #2
 8004426:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800442a:	0082      	lsls	r2, r0, #2
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	e9c1 2300 	strd	r2, r3, [r1]
 8004432:	e01c      	b.n	800446e <select_r_div_ms67+0x1d2>
	}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 128))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4916      	ldr	r1, [pc, #88]	@ (8004494 <select_r_div_ms67+0x1f8>)
 800443c:	428a      	cmp	r2, r1
 800443e:	f173 0300 	sbcs.w	r3, r3, #0
 8004442:	d314      	bcc.n	800446e <select_r_div_ms67+0x1d2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	4913      	ldr	r1, [pc, #76]	@ (8004498 <select_r_div_ms67+0x1fc>)
 800444c:	428a      	cmp	r2, r1
 800444e:	f173 0300 	sbcs.w	r3, r3, #0
 8004452:	d20c      	bcs.n	800446e <select_r_div_ms67+0x1d2>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
		*freq *= 2ULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	1894      	adds	r4, r2, r2
 8004460:	eb43 0503 	adc.w	r5, r3, r3
 8004464:	4622      	mov	r2, r4
 8004466:	462b      	mov	r3, r5
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	e9c1 2300 	strd	r2, r3, [r1]
	}

	return r_div;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bcb0      	pop	{r4, r5, r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	001c2898 	.word	0x001c2898
 8004480:	00385130 	.word	0x00385130
 8004484:	0070a260 	.word	0x0070a260
 8004488:	00e144c0 	.word	0x00e144c0
 800448c:	01c28980 	.word	0x01c28980
 8004490:	03851300 	.word	0x03851300
 8004494:	070a2600 	.word	0x070a2600
 8004498:	0e144c00 	.word	0x0e144c00

0800449c <si5351_write_bulk>:
 * @param regAddr Register address to write to
 * @param length Count Bytes
 * @param data Value to write
 * @return Status of operation (true = success)
 */
uint8_t si5351_write_bulk(uint8_t regAddr, uint8_t length, uint8_t *data) {
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	4603      	mov	r3, r0
 80044a4:	603a      	str	r2, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
 80044a8:	460b      	mov	r3, r1
 80044aa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, i2c_bus_addr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, sizeof(uint8_t)*length, 500);
 80044ac:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <si5351_write_bulk+0x50>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4b0f      	ldr	r3, [pc, #60]	@ (80044f0 <si5351_write_bulk+0x54>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	b299      	uxth	r1, r3
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	79bb      	ldrb	r3, [r7, #6]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
 80044c4:	9402      	str	r4, [sp, #8]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2301      	movs	r3, #1
 80044ce:	f002 f943 	bl	8006758 <HAL_I2C_Mem_Write>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
  return status == HAL_OK;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000814 	.word	0x20000814
 80044f0:	20000871 	.word	0x20000871

080044f4 <si5351_write>:
/** Write single byte to an 8-bit device register.
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
uint8_t si5351_write(uint8_t regAddr, uint8_t data) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	4603      	mov	r3, r0
 80044fc:	460a      	mov	r2, r1
 80044fe:	71fb      	strb	r3, [r7, #7]
 8004500:	4613      	mov	r3, r2
 8004502:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(hi2c, i2c_bus_addr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, sizeof data, 500);
 8004504:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <si5351_write+0x4c>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <si5351_write+0x50>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	b299      	uxth	r1, r3
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	b29a      	uxth	r2, r3
 8004514:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	2301      	movs	r3, #1
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	1dbb      	adds	r3, r7, #6
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2301      	movs	r3, #1
 8004524:	f002 f918 	bl	8006758 <HAL_I2C_Mem_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]
  return status == HAL_OK;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000814 	.word	0x20000814
 8004544:	20000871 	.word	0x20000871

08004548 <si5351_read>:

uint8_t si5351_read(uint8_t regAddr) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(hi2c, i2c_bus_addr << 1, &regAddr, 1, 100);
 8004556:	4b11      	ldr	r3, [pc, #68]	@ (800459c <si5351_read+0x54>)
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <si5351_read+0x58>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	b299      	uxth	r1, r3
 8004562:	1dfa      	adds	r2, r7, #7
 8004564:	2364      	movs	r3, #100	@ 0x64
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2301      	movs	r3, #1
 800456a:	f001 fd8b 	bl	8006084 <HAL_I2C_Master_Transmit>

  if (HAL_I2C_Master_Receive(hi2c, i2c_bus_addr << 1, &reg_val, sizeof(uint8_t), 100) == HAL_OK) {
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <si5351_read+0x54>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <si5351_read+0x58>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	b299      	uxth	r1, r3
 800457a:	f107 020f 	add.w	r2, r7, #15
 800457e:	2364      	movs	r3, #100	@ 0x64
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	f001 fe7c 	bl	8006280 <HAL_I2C_Master_Receive>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <si5351_read+0x4a>
    return reg_val;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	e000      	b.n	8004594 <si5351_read+0x4c>
  }

  return 0;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000814 	.word	0x20000814
 80045a0:	20000871 	.word	0x20000871

080045a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80045aa:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_MspInit+0x8c>)
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	4a20      	ldr	r2, [pc, #128]	@ (8004630 <HAL_MspInit+0x8c>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6193      	str	r3, [r2, #24]
 80045b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004630 <HAL_MspInit+0x8c>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_MspInit+0x8c>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004630 <HAL_MspInit+0x8c>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
 80045ce:	4b18      	ldr	r3, [pc, #96]	@ (8004630 <HAL_MspInit+0x8c>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2100      	movs	r1, #0
 80045de:	2001      	movs	r0, #1
 80045e0:	f000 fe7d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f000 fe96 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2100      	movs	r1, #0
 80045ee:	2004      	movs	r0, #4
 80045f0:	f000 fe75 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80045f4:	2004      	movs	r0, #4
 80045f6:	f000 fe8e 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	2005      	movs	r0, #5
 8004600:	f000 fe6d 	bl	80052de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004604:	2005      	movs	r0, #5
 8004606:	f000 fe86 	bl	8005316 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_MspInit+0x90>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <HAL_MspInit+0x90>)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40010000 	.word	0x40010000

08004638 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	@ 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 0318 	add.w	r3, r7, #24
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3b      	ldr	r2, [pc, #236]	@ (8004740 <HAL_I2C_MspInit+0x108>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d134      	bne.n	80046c2 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004658:	4b3a      	ldr	r3, [pc, #232]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	4a39      	ldr	r2, [pc, #228]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 800465e:	f043 0308 	orr.w	r3, r3, #8
 8004662:	6193      	str	r3, [r2, #24]
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004670:	23c0      	movs	r3, #192	@ 0xc0
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004674:	2312      	movs	r3, #18
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800467c:	f107 0318 	add.w	r3, r7, #24
 8004680:	4619      	mov	r1, r3
 8004682:	4831      	ldr	r0, [pc, #196]	@ (8004748 <HAL_I2C_MspInit+0x110>)
 8004684:	f001 f9da 	bl	8005a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004688:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4a2d      	ldr	r2, [pc, #180]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 800468e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004692:	61d3      	str	r3, [r2, #28]
 8004694:	4b2b      	ldr	r3, [pc, #172]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	201f      	movs	r0, #31
 80046a6:	f000 fe1a 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80046aa:	201f      	movs	r0, #31
 80046ac:	f000 fe33 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	2020      	movs	r0, #32
 80046b6:	f000 fe12 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046ba:	2020      	movs	r0, #32
 80046bc:	f000 fe2b 	bl	8005316 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80046c0:	e039      	b.n	8004736 <HAL_I2C_MspInit+0xfe>
  else if(hi2c->Instance==I2C2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a21      	ldr	r2, [pc, #132]	@ (800474c <HAL_I2C_MspInit+0x114>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d134      	bne.n	8004736 <HAL_I2C_MspInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 80046d2:	f043 0308 	orr.w	r3, r3, #8
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80046e4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046ea:	2312      	movs	r3, #18
 80046ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ee:	2303      	movs	r3, #3
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f2:	f107 0318 	add.w	r3, r7, #24
 80046f6:	4619      	mov	r1, r3
 80046f8:	4813      	ldr	r0, [pc, #76]	@ (8004748 <HAL_I2C_MspInit+0x110>)
 80046fa:	f001 f99f 	bl	8005a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046fe:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 8004704:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004708:	61d3      	str	r3, [r2, #28]
 800470a:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <HAL_I2C_MspInit+0x10c>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2021      	movs	r0, #33	@ 0x21
 800471c:	f000 fddf 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004720:	2021      	movs	r0, #33	@ 0x21
 8004722:	f000 fdf8 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	2022      	movs	r0, #34	@ 0x22
 800472c:	f000 fdd7 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004730:	2022      	movs	r0, #34	@ 0x22
 8004732:	f000 fdf0 	bl	8005316 <HAL_NVIC_EnableIRQ>
}
 8004736:	bf00      	nop
 8004738:	3728      	adds	r7, #40	@ 0x28
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40005400 	.word	0x40005400
 8004744:	40021000 	.word	0x40021000
 8004748:	40010c00 	.word	0x40010c00
 800474c:	40005800 	.word	0x40005800

08004750 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <HAL_SPI_MspInit+0x98>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d137      	bne.n	80047e0 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004770:	4b1e      	ldr	r3, [pc, #120]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 8004776:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800477a:	6193      	str	r3, [r2, #24]
 800477c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004788:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6193      	str	r3, [r2, #24]
 8004794:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <HAL_SPI_MspInit+0x9c>)
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80047a0:	23a0      	movs	r3, #160	@ 0xa0
 80047a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a4:	2302      	movs	r3, #2
 80047a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a8:	2303      	movs	r3, #3
 80047aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ac:	f107 0310 	add.w	r3, r7, #16
 80047b0:	4619      	mov	r1, r3
 80047b2:	480f      	ldr	r0, [pc, #60]	@ (80047f0 <HAL_SPI_MspInit+0xa0>)
 80047b4:	f001 f942 	bl	8005a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047b8:	2340      	movs	r3, #64	@ 0x40
 80047ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c4:	f107 0310 	add.w	r3, r7, #16
 80047c8:	4619      	mov	r1, r3
 80047ca:	4809      	ldr	r0, [pc, #36]	@ (80047f0 <HAL_SPI_MspInit+0xa0>)
 80047cc:	f001 f936 	bl	8005a3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	2023      	movs	r0, #35	@ 0x23
 80047d6:	f000 fd82 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80047da:	2023      	movs	r0, #35	@ 0x23
 80047dc:	f000 fd9b 	bl	8005316 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40013000 	.word	0x40013000
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40010800 	.word	0x40010800

080047f4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d144      	bne.n	800489e <HAL_TIM_Encoder_MspInit+0xaa>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004814:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 800481a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482c:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4a1e      	ldr	r2, [pc, #120]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6193      	str	r3, [r2, #24]
 8004838:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_TIM_Encoder_MspInit+0xb8>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004844:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	4619      	mov	r1, r3
 8004858:	4815      	ldr	r0, [pc, #84]	@ (80048b0 <HAL_TIM_Encoder_MspInit+0xbc>)
 800485a:	f001 f8ef 	bl	8005a3c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	2018      	movs	r0, #24
 8004864:	f000 fd3b 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004868:	2018      	movs	r0, #24
 800486a:	f000 fd54 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	2100      	movs	r1, #0
 8004872:	2019      	movs	r0, #25
 8004874:	f000 fd33 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004878:	2019      	movs	r0, #25
 800487a:	f000 fd4c 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	2100      	movs	r1, #0
 8004882:	201a      	movs	r0, #26
 8004884:	f000 fd2b 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004888:	201a      	movs	r0, #26
 800488a:	f000 fd44 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	201b      	movs	r0, #27
 8004894:	f000 fd23 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004898:	201b      	movs	r0, #27
 800489a:	f000 fd3c 	bl	8005316 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800489e:	bf00      	nop
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40010800 	.word	0x40010800

080048b4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c4:	d113      	bne.n	80048ee <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048c6:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <HAL_TIM_PWM_MspInit+0x44>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	4a0b      	ldr	r2, [pc, #44]	@ (80048f8 <HAL_TIM_PWM_MspInit+0x44>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	61d3      	str	r3, [r2, #28]
 80048d2:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <HAL_TIM_PWM_MspInit+0x44>)
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	201c      	movs	r0, #28
 80048e4:	f000 fcfb 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048e8:	201c      	movs	r0, #28
 80048ea:	f000 fd14 	bl	8005316 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d12a      	bne.n	8004972 <HAL_TIM_MspPostInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491c:	4b17      	ldr	r3, [pc, #92]	@ (800497c <HAL_TIM_MspPostInit+0x80>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4a16      	ldr	r2, [pc, #88]	@ (800497c <HAL_TIM_MspPostInit+0x80>)
 8004922:	f043 0304 	orr.w	r3, r3, #4
 8004926:	6193      	str	r3, [r2, #24]
 8004928:	4b14      	ldr	r3, [pc, #80]	@ (800497c <HAL_TIM_MspPostInit+0x80>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493a:	2302      	movs	r3, #2
 800493c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493e:	2302      	movs	r3, #2
 8004940:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004942:	f107 030c 	add.w	r3, r7, #12
 8004946:	4619      	mov	r1, r3
 8004948:	480d      	ldr	r0, [pc, #52]	@ (8004980 <HAL_TIM_MspPostInit+0x84>)
 800494a:	f001 f877 	bl	8005a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <HAL_TIM_MspPostInit+0x88>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	4a05      	ldr	r2, [pc, #20]	@ (8004984 <HAL_TIM_MspPostInit+0x88>)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	6053      	str	r3, [r2, #4]
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004972:	bf00      	nop
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000
 8004980:	40010800 	.word	0x40010800
 8004984:	40010000 	.word	0x40010000

08004988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <NMI_Handler+0x4>

08004990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <HardFault_Handler+0x4>

08004998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <MemManage_Handler+0x4>

080049a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <BusFault_Handler+0x4>

080049a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <UsageFault_Handler+0x4>

080049b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049d8:	f000 fb6a 	bl	80050b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}

080049e0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80049e4:	f005 fe28 	bl	800a638 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}

080049ec <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80049f0:	f000 fda2 	bl	8005538 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004a08:	4802      	ldr	r0, [pc, #8]	@ (8004a14 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8004a0a:	f004 f9d0 	bl	8008dae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20001820 	.word	0x20001820

08004a18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004a1c:	4802      	ldr	r0, [pc, #8]	@ (8004a28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004a1e:	f004 f9c6 	bl	8008dae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20001820 	.word	0x20001820

08004a2c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a30:	4802      	ldr	r0, [pc, #8]	@ (8004a3c <TIM1_BRK_IRQHandler+0x10>)
 8004a32:	f007 fb36 	bl	800c0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2000034c 	.word	0x2000034c

08004a40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a44:	4802      	ldr	r0, [pc, #8]	@ (8004a50 <TIM1_UP_IRQHandler+0x10>)
 8004a46:	f007 fb2c 	bl	800c0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2000034c 	.word	0x2000034c

08004a54 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a58:	4802      	ldr	r0, [pc, #8]	@ (8004a64 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004a5a:	f007 fb22 	bl	800c0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	2000034c 	.word	0x2000034c

08004a68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a6c:	4802      	ldr	r0, [pc, #8]	@ (8004a78 <TIM1_CC_IRQHandler+0x10>)
 8004a6e:	f007 fb18 	bl	800c0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000034c 	.word	0x2000034c

08004a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <TIM2_IRQHandler+0x10>)
 8004a82:	f007 fb0e 	bl	800c0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000394 	.word	0x20000394

08004a90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a94:	4802      	ldr	r0, [pc, #8]	@ (8004aa0 <I2C1_EV_IRQHandler+0x10>)
 8004a96:	f001 ff59 	bl	800694c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000024c 	.word	0x2000024c

08004aa4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004aa8:	4802      	ldr	r0, [pc, #8]	@ (8004ab4 <I2C1_ER_IRQHandler+0x10>)
 8004aaa:	f002 f8c0 	bl	8006c2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000024c 	.word	0x2000024c

08004ab8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004abc:	4802      	ldr	r0, [pc, #8]	@ (8004ac8 <I2C2_EV_IRQHandler+0x10>)
 8004abe:	f001 ff45 	bl	800694c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200002a0 	.word	0x200002a0

08004acc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004ad0:	4802      	ldr	r0, [pc, #8]	@ (8004adc <I2C2_ER_IRQHandler+0x10>)
 8004ad2:	f002 f8ac 	bl	8006c2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200002a0 	.word	0x200002a0

08004ae0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <SPI1_IRQHandler+0x10>)
 8004ae6:	f006 fefb 	bl	800b8e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200002f4 	.word	0x200002f4

08004af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004afc:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <_sbrk+0x5c>)
 8004afe:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <_sbrk+0x60>)
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <_sbrk+0x64>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <_sbrk+0x64>)
 8004b12:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <_sbrk+0x68>)
 8004b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b16:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <_sbrk+0x64>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d207      	bcs.n	8004b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b24:	f00f ff00 	bl	8014928 <__errno>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b32:	e009      	b.n	8004b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <_sbrk+0x64>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b3a:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <_sbrk+0x64>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	4a05      	ldr	r2, [pc, #20]	@ (8004b58 <_sbrk+0x64>)
 8004b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20005000 	.word	0x20005000
 8004b54:	00000400 	.word	0x00000400
 8004b58:	20000890 	.word	0x20000890
 8004b5c:	20001e60 	.word	0x20001e60

08004b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b6c:	f7ff fff8 	bl	8004b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b70:	480b      	ldr	r0, [pc, #44]	@ (8004ba0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004b72:	490c      	ldr	r1, [pc, #48]	@ (8004ba4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004b74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b78:	e002      	b.n	8004b80 <LoopCopyDataInit>

08004b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b7e:	3304      	adds	r3, #4

08004b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b84:	d3f9      	bcc.n	8004b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b86:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004b88:	4c09      	ldr	r4, [pc, #36]	@ (8004bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b8c:	e001      	b.n	8004b92 <LoopFillZerobss>

08004b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b90:	3204      	adds	r2, #4

08004b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b94:	d3fb      	bcc.n	8004b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b96:	f00f fecd 	bl	8014934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b9a:	f7fd f983 	bl	8001ea4 <main>
  bx lr
 8004b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8004ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ba4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8004ba8:	080176a8 	.word	0x080176a8
  ldr r2, =_sbss
 8004bac:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004bb0:	20001e60 	.word	0x20001e60

08004bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bb4:	e7fe      	b.n	8004bb4 <ADC1_2_IRQHandler>

08004bb6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004bba:	bf00      	nop
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
	...

08004bc4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	9302      	str	r3, [sp, #8]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	2200      	movs	r2, #0
 8004be0:	2178      	movs	r1, #120	@ 0x78
 8004be2:	4803      	ldr	r0, [pc, #12]	@ (8004bf0 <ssd1306_WriteCommand+0x2c>)
 8004be4:	f001 fdb8 	bl	8006758 <HAL_I2C_Mem_Write>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	200002a0 	.word	0x200002a0

08004bf4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2240      	movs	r2, #64	@ 0x40
 8004c12:	2178      	movs	r1, #120	@ 0x78
 8004c14:	4803      	ldr	r0, [pc, #12]	@ (8004c24 <ssd1306_WriteData+0x30>)
 8004c16:	f001 fd9f 	bl	8006758 <HAL_I2C_Mem_Write>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200002a0 	.word	0x200002a0

08004c28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004c2c:	f7ff ffc3 	bl	8004bb6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004c30:	2064      	movs	r0, #100	@ 0x64
 8004c32:	f000 fa59 	bl	80050e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004c36:	2000      	movs	r0, #0
 8004c38:	f000 f9d6 	bl	8004fe8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004c3c:	2020      	movs	r0, #32
 8004c3e:	f7ff ffc1 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004c42:	2000      	movs	r0, #0
 8004c44:	f7ff ffbe 	bl	8004bc4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004c48:	20b0      	movs	r0, #176	@ 0xb0
 8004c4a:	f7ff ffbb 	bl	8004bc4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004c4e:	20c8      	movs	r0, #200	@ 0xc8
 8004c50:	f7ff ffb8 	bl	8004bc4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7ff ffb5 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004c5a:	2010      	movs	r0, #16
 8004c5c:	f7ff ffb2 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004c60:	2040      	movs	r0, #64	@ 0x40
 8004c62:	f7ff ffaf 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004c66:	20ff      	movs	r0, #255	@ 0xff
 8004c68:	f000 f9aa 	bl	8004fc0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004c6c:	20a1      	movs	r0, #161	@ 0xa1
 8004c6e:	f7ff ffa9 	bl	8004bc4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004c72:	20a6      	movs	r0, #166	@ 0xa6
 8004c74:	f7ff ffa6 	bl	8004bc4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c78:	20a8      	movs	r0, #168	@ 0xa8
 8004c7a:	f7ff ffa3 	bl	8004bc4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8004c7e:	201f      	movs	r0, #31
 8004c80:	f7ff ffa0 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004c84:	20a4      	movs	r0, #164	@ 0xa4
 8004c86:	f7ff ff9d 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004c8a:	20d3      	movs	r0, #211	@ 0xd3
 8004c8c:	f7ff ff9a 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004c90:	2000      	movs	r0, #0
 8004c92:	f7ff ff97 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004c96:	20d5      	movs	r0, #213	@ 0xd5
 8004c98:	f7ff ff94 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004c9c:	20f0      	movs	r0, #240	@ 0xf0
 8004c9e:	f7ff ff91 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004ca2:	20d9      	movs	r0, #217	@ 0xd9
 8004ca4:	f7ff ff8e 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004ca8:	2022      	movs	r0, #34	@ 0x22
 8004caa:	f7ff ff8b 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004cae:	20da      	movs	r0, #218	@ 0xda
 8004cb0:	f7ff ff88 	bl	8004bc4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8004cb4:	2002      	movs	r0, #2
 8004cb6:	f7ff ff85 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004cba:	20db      	movs	r0, #219	@ 0xdb
 8004cbc:	f7ff ff82 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004cc0:	2020      	movs	r0, #32
 8004cc2:	f7ff ff7f 	bl	8004bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004cc6:	208d      	movs	r0, #141	@ 0x8d
 8004cc8:	f7ff ff7c 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004ccc:	2014      	movs	r0, #20
 8004cce:	f7ff ff79 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f000 f988 	bl	8004fe8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f000 f80f 	bl	8004cfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004cde:	f000 f825 	bl	8004d2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004ce2:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <ssd1306_Init+0xd0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	@ (8004cf8 <ssd1306_Init+0xd0>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004cee:	4b02      	ldr	r3, [pc, #8]	@ (8004cf8 <ssd1306_Init+0xd0>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	711a      	strb	r2, [r3, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000a94 	.word	0x20000a94

08004cfc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <ssd1306_Fill+0x14>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <ssd1306_Fill+0x16>
 8004d10:	23ff      	movs	r3, #255	@ 0xff
 8004d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d16:	4619      	mov	r1, r3
 8004d18:	4803      	ldr	r0, [pc, #12]	@ (8004d28 <ssd1306_Fill+0x2c>)
 8004d1a:	f00f fdc5 	bl	80148a8 <memset>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000894 	.word	0x20000894

08004d2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004d32:	2300      	movs	r3, #0
 8004d34:	71fb      	strb	r3, [r7, #7]
 8004d36:	e016      	b.n	8004d66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	3b50      	subs	r3, #80	@ 0x50
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff40 	bl	8004bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7ff ff3d 	bl	8004bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004d4a:	2010      	movs	r0, #16
 8004d4c:	f7ff ff3a 	bl	8004bc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	01db      	lsls	r3, r3, #7
 8004d54:	4a08      	ldr	r2, [pc, #32]	@ (8004d78 <ssd1306_UpdateScreen+0x4c>)
 8004d56:	4413      	add	r3, r2
 8004d58:	2180      	movs	r1, #128	@ 0x80
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff ff4a 	bl	8004bf4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	3301      	adds	r3, #1
 8004d64:	71fb      	strb	r3, [r7, #7]
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d9e5      	bls.n	8004d38 <ssd1306_UpdateScreen+0xc>
    }
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000894 	.word	0x20000894

08004d7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
 8004d86:	460b      	mov	r3, r1
 8004d88:	71bb      	strb	r3, [r7, #6]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	db3d      	blt.n	8004e12 <ssd1306_DrawPixel+0x96>
 8004d96:	79bb      	ldrb	r3, [r7, #6]
 8004d98:	2b1f      	cmp	r3, #31
 8004d9a:	d83a      	bhi.n	8004e12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004d9c:	797b      	ldrb	r3, [r7, #5]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d11a      	bne.n	8004dd8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004da2:	79fa      	ldrb	r2, [r7, #7]
 8004da4:	79bb      	ldrb	r3, [r7, #6]
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	b2d8      	uxtb	r0, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4413      	add	r3, r2
 8004db0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <ssd1306_DrawPixel+0xa0>)
 8004db2:	5cd3      	ldrb	r3, [r2, r3]
 8004db4:	b25a      	sxtb	r2, r3
 8004db6:	79bb      	ldrb	r3, [r7, #6]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b259      	sxtb	r1, r3
 8004dc8:	79fa      	ldrb	r2, [r7, #7]
 8004dca:	4603      	mov	r3, r0
 8004dcc:	01db      	lsls	r3, r3, #7
 8004dce:	4413      	add	r3, r2
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <ssd1306_DrawPixel+0xa0>)
 8004dd4:	54d1      	strb	r1, [r2, r3]
 8004dd6:	e01d      	b.n	8004e14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004dd8:	79fa      	ldrb	r2, [r7, #7]
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	b2d8      	uxtb	r0, r3
 8004de0:	4603      	mov	r3, r0
 8004de2:	01db      	lsls	r3, r3, #7
 8004de4:	4413      	add	r3, r2
 8004de6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <ssd1306_DrawPixel+0xa0>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	b25a      	sxtb	r2, r3
 8004dec:	79bb      	ldrb	r3, [r7, #6]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	2101      	movs	r1, #1
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	b25b      	sxtb	r3, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	4013      	ands	r3, r2
 8004e00:	b259      	sxtb	r1, r3
 8004e02:	79fa      	ldrb	r2, [r7, #7]
 8004e04:	4603      	mov	r3, r0
 8004e06:	01db      	lsls	r3, r3, #7
 8004e08:	4413      	add	r3, r2
 8004e0a:	b2c9      	uxtb	r1, r1
 8004e0c:	4a03      	ldr	r2, [pc, #12]	@ (8004e1c <ssd1306_DrawPixel+0xa0>)
 8004e0e:	54d1      	strb	r1, [r2, r3]
 8004e10:	e000      	b.n	8004e14 <ssd1306_DrawPixel+0x98>
        return;
 8004e12:	bf00      	nop
    }
}
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	20000894 	.word	0x20000894

08004e20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b089      	sub	sp, #36	@ 0x24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4638      	mov	r0, r7
 8004e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004e2e:	4623      	mov	r3, r4
 8004e30:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b1f      	cmp	r3, #31
 8004e36:	d902      	bls.n	8004e3e <ssd1306_WriteChar+0x1e>
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e3c:	d901      	bls.n	8004e42 <ssd1306_WriteChar+0x22>
        return 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e079      	b.n	8004f36 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <ssd1306_WriteChar+0x34>
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3b20      	subs	r3, #32
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	e000      	b.n	8004e56 <ssd1306_WriteChar+0x36>
 8004e54:	783b      	ldrb	r3, [r7, #0]
 8004e56:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004e58:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	4413      	add	r3, r2
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	dc06      	bgt.n	8004e74 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004e66:	4b36      	ldr	r3, [pc, #216]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	dd01      	ble.n	8004e78 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e05e      	b.n	8004f36 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e04d      	b.n	8004f1a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	3b20      	subs	r3, #32
 8004e84:	7879      	ldrb	r1, [r7, #1]
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	440b      	add	r3, r1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e036      	b.n	8004f0c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d013      	beq.n	8004ed6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	b2d8      	uxtb	r0, r3
 8004ebc:	4b20      	ldr	r3, [pc, #128]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004ebe:	885b      	ldrh	r3, [r3, #2]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f7ff ff54 	bl	8004d7c <ssd1306_DrawPixel>
 8004ed4:	e017      	b.n	8004f06 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	b2d8      	uxtb	r0, r3
 8004ee4:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004ee6:	885b      	ldrh	r3, [r3, #2]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	b2d9      	uxtb	r1, r3
 8004ef2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	f7ff ff3b 	bl	8004d7c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d3c4      	bcc.n	8004e9e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	787b      	ldrb	r3, [r7, #1]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d3ac      	bcc.n	8004e7e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8004f24:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004f26:	881a      	ldrh	r2, [r3, #0]
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	4b03      	ldr	r3, [pc, #12]	@ (8004f40 <ssd1306_WriteChar+0x120>)
 8004f32:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3724      	adds	r7, #36	@ 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd90      	pop	{r4, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000a94 	.word	0x20000a94

08004f44 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004f52:	e013      	b.n	8004f7c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	7818      	ldrb	r0, [r3, #0]
 8004f58:	7e3b      	ldrb	r3, [r7, #24]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f60:	f7ff ff5e 	bl	8004e20 <ssd1306_WriteChar>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d002      	beq.n	8004f76 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	e008      	b.n	8004f88 <ssd1306_WriteString+0x44>
        }
        str++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e7      	bne.n	8004f54 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	781b      	ldrb	r3, [r3, #0]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	460a      	mov	r2, r1
 8004f9a:	71fb      	strb	r3, [r7, #7]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <ssd1306_SetCursor+0x2c>)
 8004fa6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004fa8:	79bb      	ldrb	r3, [r7, #6]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <ssd1306_SetCursor+0x2c>)
 8004fae:	805a      	strh	r2, [r3, #2]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000a94 	.word	0x20000a94

08004fc0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004fca:	2381      	movs	r3, #129	@ 0x81
 8004fcc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fdf7 	bl	8004bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fdf3 	bl	8004bc4 <ssd1306_WriteCommand>
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004ff8:	23af      	movs	r3, #175	@ 0xaf
 8004ffa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004ffc:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <ssd1306_SetDisplayOn+0x38>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	715a      	strb	r2, [r3, #5]
 8005002:	e004      	b.n	800500e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005004:	23ae      	movs	r3, #174	@ 0xae
 8005006:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <ssd1306_SetDisplayOn+0x38>)
 800500a:	2200      	movs	r2, #0
 800500c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fdd7 	bl	8004bc4 <ssd1306_WriteCommand>
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000a94 	.word	0x20000a94

08005024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005028:	4b08      	ldr	r3, [pc, #32]	@ (800504c <HAL_Init+0x28>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a07      	ldr	r2, [pc, #28]	@ (800504c <HAL_Init+0x28>)
 800502e:	f043 0310 	orr.w	r3, r3, #16
 8005032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005034:	2003      	movs	r0, #3
 8005036:	f000 f947 	bl	80052c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800503a:	200f      	movs	r0, #15
 800503c:	f000 f808 	bl	8005050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005040:	f7ff fab0 	bl	80045a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40022000 	.word	0x40022000

08005050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005058:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <HAL_InitTick+0x54>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_InitTick+0x58>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005066:	fbb3 f3f1 	udiv	r3, r3, r1
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f95f 	bl	8005332 <HAL_SYSTICK_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e00e      	b.n	800509c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b0f      	cmp	r3, #15
 8005082:	d80a      	bhi.n	800509a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005084:	2200      	movs	r2, #0
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	f000 f927 	bl	80052de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005090:	4a06      	ldr	r2, [pc, #24]	@ (80050ac <HAL_InitTick+0x5c>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000018 	.word	0x20000018
 80050a8:	20000020 	.word	0x20000020
 80050ac:	2000001c 	.word	0x2000001c

080050b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050b4:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_IncTick+0x1c>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <HAL_IncTick+0x20>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4413      	add	r3, r2
 80050c0:	4a03      	ldr	r2, [pc, #12]	@ (80050d0 <HAL_IncTick+0x20>)
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	20000020 	.word	0x20000020
 80050d0:	20000a9c 	.word	0x20000a9c

080050d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return uwTick;
 80050d8:	4b02      	ldr	r3, [pc, #8]	@ (80050e4 <HAL_GetTick+0x10>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	20000a9c 	.word	0x20000a9c

080050e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_GetTick>
 80050f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d005      	beq.n	800510e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005102:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <HAL_Delay+0x44>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800510e:	bf00      	nop
 8005110:	f7ff ffe0 	bl	80050d4 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	429a      	cmp	r2, r3
 800511e:	d8f7      	bhi.n	8005110 <HAL_Delay+0x28>
  {
  }
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000020 	.word	0x20000020

08005130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800515c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005162:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <__NVIC_GetPriorityGrouping+0x18>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0307 	and.w	r3, r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db0b      	blt.n	80051be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	4906      	ldr	r1, [pc, #24]	@ (80051c8 <__NVIC_EnableIRQ+0x34>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2001      	movs	r0, #1
 80051b6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	e000e100 	.word	0xe000e100

080051cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	6039      	str	r1, [r7, #0]
 80051d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db0a      	blt.n	80051f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	490c      	ldr	r1, [pc, #48]	@ (8005218 <__NVIC_SetPriority+0x4c>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	440b      	add	r3, r1
 80051f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f4:	e00a      	b.n	800520c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4908      	ldr	r1, [pc, #32]	@ (800521c <__NVIC_SetPriority+0x50>)
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3b04      	subs	r3, #4
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	440b      	add	r3, r1
 800520a:	761a      	strb	r2, [r3, #24]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	e000e100 	.word	0xe000e100
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f1c3 0307 	rsb	r3, r3, #7
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf28      	it	cs
 800523e:	2304      	movcs	r3, #4
 8005240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3304      	adds	r3, #4
 8005246:	2b06      	cmp	r3, #6
 8005248:	d902      	bls.n	8005250 <NVIC_EncodePriority+0x30>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3b03      	subs	r3, #3
 800524e:	e000      	b.n	8005252 <NVIC_EncodePriority+0x32>
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	401a      	ands	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	43d9      	mvns	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005278:	4313      	orrs	r3, r2
         );
}
 800527a:	4618      	mov	r0, r3
 800527c:	3724      	adds	r7, #36	@ 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3b01      	subs	r3, #1
 8005290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005294:	d301      	bcc.n	800529a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005296:	2301      	movs	r3, #1
 8005298:	e00f      	b.n	80052ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800529a:	4a0a      	ldr	r2, [pc, #40]	@ (80052c4 <SysTick_Config+0x40>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a2:	210f      	movs	r1, #15
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	f7ff ff90 	bl	80051cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <SysTick_Config+0x40>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b2:	4b04      	ldr	r3, [pc, #16]	@ (80052c4 <SysTick_Config+0x40>)
 80052b4:	2207      	movs	r2, #7
 80052b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	e000e010 	.word	0xe000e010

080052c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff2d 	bl	8005130 <__NVIC_SetPriorityGrouping>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	4603      	mov	r3, r0
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052f0:	f7ff ff42 	bl	8005178 <__NVIC_GetPriorityGrouping>
 80052f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6978      	ldr	r0, [r7, #20]
 80052fc:	f7ff ff90 	bl	8005220 <NVIC_EncodePriority>
 8005300:	4602      	mov	r2, r0
 8005302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff5f 	bl	80051cc <__NVIC_SetPriority>
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff35 	bl	8005194 <__NVIC_EnableIRQ>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ffa2 	bl	8005284 <SysTick_Config>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d005      	beq.n	8005370 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2204      	movs	r2, #4
 8005368:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e051      	b.n	8005414 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 020e 	bic.w	r2, r2, #14
 800537e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <HAL_DMA_Abort_IT+0xd4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d029      	beq.n	80053ee <HAL_DMA_Abort_IT+0xa2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <HAL_DMA_Abort_IT+0xd8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_DMA_Abort_IT+0x9e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_DMA_Abort_IT+0xdc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01a      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x98>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <HAL_DMA_Abort_IT+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d012      	beq.n	80053de <HAL_DMA_Abort_IT+0x92>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <HAL_DMA_Abort_IT+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00a      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x8c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005434 <HAL_DMA_Abort_IT+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d102      	bne.n	80053d2 <HAL_DMA_Abort_IT+0x86>
 80053cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80053d0:	e00e      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053d6:	e00b      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053dc:	e008      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053e2:	e005      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053e8:	e002      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053ea:	2310      	movs	r3, #16
 80053ec:	e000      	b.n	80053f0 <HAL_DMA_Abort_IT+0xa4>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4a11      	ldr	r2, [pc, #68]	@ (8005438 <HAL_DMA_Abort_IT+0xec>)
 80053f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
    } 
  }
  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40020008 	.word	0x40020008
 8005424:	4002001c 	.word	0x4002001c
 8005428:	40020030 	.word	0x40020030
 800542c:	40020044 	.word	0x40020044
 8005430:	40020058 	.word	0x40020058
 8005434:	4002006c 	.word	0x4002006c
 8005438:	40020000 	.word	0x40020000

0800543c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800544a:	b2db      	uxtb	r3, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
	...

08005458 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005472:	4b2f      	ldr	r3, [pc, #188]	@ (8005530 <HAL_FLASH_Program+0xd8>)
 8005474:	7e1b      	ldrb	r3, [r3, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_FLASH_Program+0x26>
 800547a:	2302      	movs	r3, #2
 800547c:	e054      	b.n	8005528 <HAL_FLASH_Program+0xd0>
 800547e:	4b2c      	ldr	r3, [pc, #176]	@ (8005530 <HAL_FLASH_Program+0xd8>)
 8005480:	2201      	movs	r2, #1
 8005482:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005484:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005488:	f000 f99a 	bl	80057c0 <FLASH_WaitForLastOperation>
 800548c:	4603      	mov	r3, r0
 800548e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d144      	bne.n	8005520 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d102      	bne.n	80054a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800549c:	2301      	movs	r3, #1
 800549e:	757b      	strb	r3, [r7, #21]
 80054a0:	e007      	b.n	80054b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d102      	bne.n	80054ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80054a8:	2302      	movs	r3, #2
 80054aa:	757b      	strb	r3, [r7, #21]
 80054ac:	e001      	b.n	80054b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80054ae:	2304      	movs	r3, #4
 80054b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	75bb      	strb	r3, [r7, #22]
 80054b6:	e02d      	b.n	8005514 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80054b8:	7dbb      	ldrb	r3, [r7, #22]
 80054ba:	005a      	lsls	r2, r3, #1
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	eb02 0c03 	add.w	ip, r2, r3
 80054c2:	7dbb      	ldrb	r3, [r7, #22]
 80054c4:	0119      	lsls	r1, r3, #4
 80054c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ca:	f1c1 0620 	rsb	r6, r1, #32
 80054ce:	f1a1 0020 	sub.w	r0, r1, #32
 80054d2:	fa22 f401 	lsr.w	r4, r2, r1
 80054d6:	fa03 f606 	lsl.w	r6, r3, r6
 80054da:	4334      	orrs	r4, r6
 80054dc:	fa23 f000 	lsr.w	r0, r3, r0
 80054e0:	4304      	orrs	r4, r0
 80054e2:	fa23 f501 	lsr.w	r5, r3, r1
 80054e6:	b2a3      	uxth	r3, r4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4660      	mov	r0, ip
 80054ec:	f000 f94c 	bl	8005788 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80054f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80054f4:	f000 f964 	bl	80057c0 <FLASH_WaitForLastOperation>
 80054f8:	4603      	mov	r3, r0
 80054fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80054fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <HAL_FLASH_Program+0xdc>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4a0c      	ldr	r2, [pc, #48]	@ (8005534 <HAL_FLASH_Program+0xdc>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800550e:	7dbb      	ldrb	r3, [r7, #22]
 8005510:	3301      	adds	r3, #1
 8005512:	75bb      	strb	r3, [r7, #22]
 8005514:	7dba      	ldrb	r2, [r7, #22]
 8005516:	7d7b      	ldrb	r3, [r7, #21]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3cd      	bcc.n	80054b8 <HAL_FLASH_Program+0x60>
 800551c:	e000      	b.n	8005520 <HAL_FLASH_Program+0xc8>
      {
        break;
 800551e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005520:	4b03      	ldr	r3, [pc, #12]	@ (8005530 <HAL_FLASH_Program+0xd8>)
 8005522:	2200      	movs	r2, #0
 8005524:	761a      	strb	r2, [r3, #24]

  return status;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
}
 8005528:	4618      	mov	r0, r3
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005530:	20000aa0 	.word	0x20000aa0
 8005534:	40022000 	.word	0x40022000

08005538 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005542:	4b6b      	ldr	r3, [pc, #428]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d105      	bne.n	800555a <HAL_FLASH_IRQHandler+0x22>
 800554e:	4b68      	ldr	r3, [pc, #416]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800555a:	4b66      	ldr	r3, [pc, #408]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8005560:	4b64      	ldr	r3, [pc, #400]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005562:	f04f 32ff 	mov.w	r2, #4294967295
 8005566:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8005568:	f000 f970 	bl	800584c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8cc 	bl	800570a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005572:	4b60      	ldr	r3, [pc, #384]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005578:	4b5d      	ldr	r3, [pc, #372]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a0 	beq.w	80056c6 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005586:	4b5a      	ldr	r3, [pc, #360]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 8005588:	2220      	movs	r2, #32
 800558a:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800558c:	4b59      	ldr	r3, [pc, #356]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8097 	beq.w	80056c6 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8005598:	4b56      	ldr	r3, [pc, #344]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d12d      	bne.n	80055fe <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80055a2:	4b54      	ldr	r3, [pc, #336]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a52      	ldr	r2, [pc, #328]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055aa:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80055ac:	4b51      	ldr	r3, [pc, #324]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d017      	beq.n	80055e4 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80055b4:	4b4f      	ldr	r3, [pc, #316]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f89c 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80055c0:	4b4c      	ldr	r3, [pc, #304]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055c8:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80055ca:	4a4a      	ldr	r2, [pc, #296]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80055d0:	4b47      	ldr	r3, [pc, #284]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	4a46      	ldr	r2, [pc, #280]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80055d6:	f023 0302 	bic.w	r3, r3, #2
 80055da:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa0d 	bl	80059fc <FLASH_PageErase>
 80055e2:	e070      	b.n	80056c6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	4a42      	ldr	r2, [pc, #264]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80055f0:	4b40      	ldr	r3, [pc, #256]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f87e 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>
 80055fc:	e063      	b.n	80056c6 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80055fe:	4b3d      	ldr	r3, [pc, #244]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d10c      	bne.n	8005622 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005608:	4b39      	ldr	r3, [pc, #228]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	4a38      	ldr	r2, [pc, #224]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 800560e:	f023 0304 	bic.w	r3, r3, #4
 8005612:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8005614:	2000      	movs	r0, #0
 8005616:	f000 f86f 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800561a:	4b36      	ldr	r3, [pc, #216]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e051      	b.n	80056c6 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8005622:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	4a32      	ldr	r2, [pc, #200]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800562a:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800562c:	4b31      	ldr	r3, [pc, #196]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d024      	beq.n	800567e <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8005634:	4b2f      	ldr	r3, [pc, #188]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	3302      	adds	r3, #2
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800563c:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 800563e:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8005644:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005646:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	0c02      	lsrs	r2, r0, #16
 8005654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005658:	0c0b      	lsrs	r3, r1, #16
 800565a:	4926      	ldr	r1, [pc, #152]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800565c:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005660:	4b23      	ldr	r3, [pc, #140]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	4a22      	ldr	r2, [pc, #136]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 800566c:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800566e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005672:	b293      	uxth	r3, r2
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f886 	bl	8005788 <FLASH_Program_HalfWord>
 800567c:	e023      	b.n	80056c6 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d105      	bne.n	8005694 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 f833 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>
 8005692:	e011      	b.n	80056b8 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b04      	cmp	r3, #4
 800569c:	d106      	bne.n	80056ac <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800569e:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	3b02      	subs	r3, #2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f827 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>
 80056aa:	e005      	b.n	80056b8 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80056ac:	4b11      	ldr	r3, [pc, #68]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	3b06      	subs	r3, #6
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f820 	bl	80056f8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80056b8:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80056c0:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <HAL_FLASH_IRQHandler+0x1bc>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80056d0:	4b07      	ldr	r3, [pc, #28]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4a06      	ldr	r2, [pc, #24]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	4a03      	ldr	r2, [pc, #12]	@ (80056f0 <HAL_FLASH_IRQHandler+0x1b8>)
 80056e2:	f423 53a0 	bic.w	r3, r3, #5120	@ 0x1400
 80056e6:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

  }
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40022000 	.word	0x40022000
 80056f4:	20000aa0 	.word	0x20000aa0

080056f8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005726:	4b0d      	ldr	r3, [pc, #52]	@ (800575c <HAL_FLASH_Unlock+0x40>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005732:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <HAL_FLASH_Unlock+0x40>)
 8005734:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_FLASH_Unlock+0x44>)
 8005736:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005738:	4b08      	ldr	r3, [pc, #32]	@ (800575c <HAL_FLASH_Unlock+0x40>)
 800573a:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <HAL_FLASH_Unlock+0x48>)
 800573c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800573e:	4b07      	ldr	r3, [pc, #28]	@ (800575c <HAL_FLASH_Unlock+0x40>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800574e:	79fb      	ldrb	r3, [r7, #7]
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40022000 	.word	0x40022000
 8005760:	45670123 	.word	0x45670123
 8005764:	cdef89ab 	.word	0xcdef89ab

08005768 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_FLASH_Lock+0x1c>)
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <HAL_FLASH_Lock+0x1c>)
 8005772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005776:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40022000 	.word	0x40022000

08005788 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005794:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <FLASH_Program_HalfWord+0x30>)
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800579a:	4b08      	ldr	r3, [pc, #32]	@ (80057bc <FLASH_Program_HalfWord+0x34>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	4a07      	ldr	r2, [pc, #28]	@ (80057bc <FLASH_Program_HalfWord+0x34>)
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	801a      	strh	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000aa0 	.word	0x20000aa0
 80057bc:	40022000 	.word	0x40022000

080057c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7ff fc84 	bl	80050d4 <HAL_GetTick>
 80057cc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80057ce:	e010      	b.n	80057f2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d00c      	beq.n	80057f2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <FLASH_WaitForLastOperation+0x2e>
 80057de:	f7ff fc79 	bl	80050d4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d201      	bcs.n	80057f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e025      	b.n	800583e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80057f2:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e8      	bne.n	80057d0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 800580c:	2220      	movs	r2, #32
 800580e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005810:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005828:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <FLASH_WaitForLastOperation+0x88>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005834:	f000 f80a 	bl	800584c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40022000 	.word	0x40022000

0800584c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005856:	4b23      	ldr	r3, [pc, #140]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005862:	4b21      	ldr	r3, [pc, #132]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f043 0302 	orr.w	r3, r3, #2
 800586a:	4a1f      	ldr	r2, [pc, #124]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 800586c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f043 0310 	orr.w	r3, r3, #16
 8005874:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005876:	4b1b      	ldr	r3, [pc, #108]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005882:	4b19      	ldr	r3, [pc, #100]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 800588c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005896:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80058a2:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f043 0304 	orr.w	r3, r3, #4
 80058aa:	4a0f      	ldr	r2, [pc, #60]	@ (80058e8 <FLASH_SetErrorCode+0x9c>)
 80058ac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f240 1201 	movw	r2, #257	@ 0x101
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d106      	bne.n	80058d2 <FLASH_SetErrorCode+0x86>
 80058c4:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4a06      	ldr	r2, [pc, #24]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	61d3      	str	r3, [r2, #28]
}  
 80058d0:	e002      	b.n	80058d8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80058d2:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <FLASH_SetErrorCode+0x98>)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60d3      	str	r3, [r2, #12]
}  
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40022000 	.word	0x40022000
 80058e8:	20000aa0 	.word	0x20000aa0

080058ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058fe:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <HAL_FLASHEx_Erase+0xd0>)
 8005900:	7e1b      	ldrb	r3, [r3, #24]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_FLASHEx_Erase+0x1e>
 8005906:	2302      	movs	r3, #2
 8005908:	e053      	b.n	80059b2 <HAL_FLASHEx_Erase+0xc6>
 800590a:	4b2c      	ldr	r3, [pc, #176]	@ (80059bc <HAL_FLASHEx_Erase+0xd0>)
 800590c:	2201      	movs	r2, #1
 800590e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d116      	bne.n	8005946 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005918:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800591c:	f7ff ff50 	bl	80057c0 <FLASH_WaitForLastOperation>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d141      	bne.n	80059aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005926:	2001      	movs	r0, #1
 8005928:	f000 f84c 	bl	80059c4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800592c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005930:	f7ff ff46 	bl	80057c0 <FLASH_WaitForLastOperation>
 8005934:	4603      	mov	r3, r0
 8005936:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005938:	4b21      	ldr	r3, [pc, #132]	@ (80059c0 <HAL_FLASHEx_Erase+0xd4>)
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <HAL_FLASHEx_Erase+0xd4>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	6113      	str	r3, [r2, #16]
 8005944:	e031      	b.n	80059aa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005946:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800594a:	f7ff ff39 	bl	80057c0 <FLASH_WaitForLastOperation>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d12a      	bne.n	80059aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	e019      	b.n	8005998 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005964:	68b8      	ldr	r0, [r7, #8]
 8005966:	f000 f849 	bl	80059fc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800596a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800596e:	f7ff ff27 	bl	80057c0 <FLASH_WaitForLastOperation>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005976:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <HAL_FLASHEx_Erase+0xd4>)
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <HAL_FLASHEx_Erase+0xd4>)
 800597c:	f023 0302 	bic.w	r3, r3, #2
 8005980:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	601a      	str	r2, [r3, #0]
            break;
 800598e:	e00c      	b.n	80059aa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005996:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	029a      	lsls	r2, r3, #10
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	4413      	add	r3, r2
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3dc      	bcc.n	8005964 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059aa:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <HAL_FLASHEx_Erase+0xd0>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	761a      	strb	r2, [r3, #24]

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000aa0 	.word	0x20000aa0
 80059c0:	40022000 	.word	0x40022000

080059c4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <FLASH_MassErase+0x30>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80059d2:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <FLASH_MassErase+0x34>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4a08      	ldr	r2, [pc, #32]	@ (80059f8 <FLASH_MassErase+0x34>)
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <FLASH_MassErase+0x34>)
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	4a05      	ldr	r2, [pc, #20]	@ (80059f8 <FLASH_MassErase+0x34>)
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	20000aa0 	.word	0x20000aa0
 80059f8:	40022000 	.word	0x40022000

080059fc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a04:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <FLASH_PageErase+0x38>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <FLASH_PageErase+0x3c>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <FLASH_PageErase+0x3c>)
 8005a10:	f043 0302 	orr.w	r3, r3, #2
 8005a14:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <FLASH_PageErase+0x3c>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <FLASH_PageErase+0x3c>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	4a05      	ldr	r2, [pc, #20]	@ (8005a38 <FLASH_PageErase+0x3c>)
 8005a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a26:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000aa0 	.word	0x20000aa0
 8005a38:	40022000 	.word	0x40022000

08005a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b08b      	sub	sp, #44	@ 0x2c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a4e:	e169      	b.n	8005d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a50:	2201      	movs	r2, #1
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	f040 8158 	bne.w	8005d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4a9a      	ldr	r2, [pc, #616]	@ (8005cdc <HAL_GPIO_Init+0x2a0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d05e      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
 8005a78:	4a98      	ldr	r2, [pc, #608]	@ (8005cdc <HAL_GPIO_Init+0x2a0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d875      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005a7e:	4a98      	ldr	r2, [pc, #608]	@ (8005ce0 <HAL_GPIO_Init+0x2a4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d058      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
 8005a84:	4a96      	ldr	r2, [pc, #600]	@ (8005ce0 <HAL_GPIO_Init+0x2a4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d86f      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005a8a:	4a96      	ldr	r2, [pc, #600]	@ (8005ce4 <HAL_GPIO_Init+0x2a8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d052      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
 8005a90:	4a94      	ldr	r2, [pc, #592]	@ (8005ce4 <HAL_GPIO_Init+0x2a8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d869      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005a96:	4a94      	ldr	r2, [pc, #592]	@ (8005ce8 <HAL_GPIO_Init+0x2ac>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04c      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
 8005a9c:	4a92      	ldr	r2, [pc, #584]	@ (8005ce8 <HAL_GPIO_Init+0x2ac>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d863      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005aa2:	4a92      	ldr	r2, [pc, #584]	@ (8005cec <HAL_GPIO_Init+0x2b0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d046      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
 8005aa8:	4a90      	ldr	r2, [pc, #576]	@ (8005cec <HAL_GPIO_Init+0x2b0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d85d      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005aae:	2b12      	cmp	r3, #18
 8005ab0:	d82a      	bhi.n	8005b08 <HAL_GPIO_Init+0xcc>
 8005ab2:	2b12      	cmp	r3, #18
 8005ab4:	d859      	bhi.n	8005b6a <HAL_GPIO_Init+0x12e>
 8005ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8005abc <HAL_GPIO_Init+0x80>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005b37 	.word	0x08005b37
 8005ac0:	08005b11 	.word	0x08005b11
 8005ac4:	08005b23 	.word	0x08005b23
 8005ac8:	08005b65 	.word	0x08005b65
 8005acc:	08005b6b 	.word	0x08005b6b
 8005ad0:	08005b6b 	.word	0x08005b6b
 8005ad4:	08005b6b 	.word	0x08005b6b
 8005ad8:	08005b6b 	.word	0x08005b6b
 8005adc:	08005b6b 	.word	0x08005b6b
 8005ae0:	08005b6b 	.word	0x08005b6b
 8005ae4:	08005b6b 	.word	0x08005b6b
 8005ae8:	08005b6b 	.word	0x08005b6b
 8005aec:	08005b6b 	.word	0x08005b6b
 8005af0:	08005b6b 	.word	0x08005b6b
 8005af4:	08005b6b 	.word	0x08005b6b
 8005af8:	08005b6b 	.word	0x08005b6b
 8005afc:	08005b6b 	.word	0x08005b6b
 8005b00:	08005b19 	.word	0x08005b19
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	4a79      	ldr	r2, [pc, #484]	@ (8005cf0 <HAL_GPIO_Init+0x2b4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b0e:	e02c      	b.n	8005b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	623b      	str	r3, [r7, #32]
          break;
 8005b16:	e029      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	623b      	str	r3, [r7, #32]
          break;
 8005b20:	e024      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	3308      	adds	r3, #8
 8005b28:	623b      	str	r3, [r7, #32]
          break;
 8005b2a:	e01f      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	330c      	adds	r3, #12
 8005b32:	623b      	str	r3, [r7, #32]
          break;
 8005b34:	e01a      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b3e:	2304      	movs	r3, #4
 8005b40:	623b      	str	r3, [r7, #32]
          break;
 8005b42:	e013      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d105      	bne.n	8005b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	611a      	str	r2, [r3, #16]
          break;
 8005b56:	e009      	b.n	8005b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b58:	2308      	movs	r3, #8
 8005b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	615a      	str	r2, [r3, #20]
          break;
 8005b62:	e003      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b64:	2300      	movs	r3, #0
 8005b66:	623b      	str	r3, [r7, #32]
          break;
 8005b68:	e000      	b.n	8005b6c <HAL_GPIO_Init+0x130>
          break;
 8005b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2bff      	cmp	r3, #255	@ 0xff
 8005b70:	d801      	bhi.n	8005b76 <HAL_GPIO_Init+0x13a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	e001      	b.n	8005b7a <HAL_GPIO_Init+0x13e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2bff      	cmp	r3, #255	@ 0xff
 8005b80:	d802      	bhi.n	8005b88 <HAL_GPIO_Init+0x14c>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	e002      	b.n	8005b8e <HAL_GPIO_Init+0x152>
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	3b08      	subs	r3, #8
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	210f      	movs	r1, #15
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	6a39      	ldr	r1, [r7, #32]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80b1 	beq.w	8005d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8005cf4 <HAL_GPIO_Init+0x2b8>)
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8005cf4 <HAL_GPIO_Init+0x2b8>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	6193      	str	r3, [r2, #24]
 8005bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8005cf4 <HAL_GPIO_Init+0x2b8>)
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005bd4:	4a48      	ldr	r2, [pc, #288]	@ (8005cf8 <HAL_GPIO_Init+0x2bc>)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	3302      	adds	r3, #2
 8005bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	220f      	movs	r2, #15
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	@ (8005cfc <HAL_GPIO_Init+0x2c0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <HAL_GPIO_Init+0x1ec>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3f      	ldr	r2, [pc, #252]	@ (8005d00 <HAL_GPIO_Init+0x2c4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00d      	beq.n	8005c24 <HAL_GPIO_Init+0x1e8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d04 <HAL_GPIO_Init+0x2c8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <HAL_GPIO_Init+0x1e4>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	@ (8005d08 <HAL_GPIO_Init+0x2cc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d101      	bne.n	8005c1c <HAL_GPIO_Init+0x1e0>
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <HAL_GPIO_Init+0x1ee>
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	e004      	b.n	8005c2a <HAL_GPIO_Init+0x1ee>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e002      	b.n	8005c2a <HAL_GPIO_Init+0x1ee>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_GPIO_Init+0x1ee>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2c:	f002 0203 	and.w	r2, r2, #3
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	4093      	lsls	r3, r2
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c3a:	492f      	ldr	r1, [pc, #188]	@ (8005cf8 <HAL_GPIO_Init+0x2bc>)
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	3302      	adds	r3, #2
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d006      	beq.n	8005c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c54:	4b2d      	ldr	r3, [pc, #180]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	492c      	ldr	r1, [pc, #176]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	608b      	str	r3, [r1, #8]
 8005c60:	e006      	b.n	8005c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c62:	4b2a      	ldr	r3, [pc, #168]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	4928      	ldr	r1, [pc, #160]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c7c:	4b23      	ldr	r3, [pc, #140]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	4922      	ldr	r1, [pc, #136]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60cb      	str	r3, [r1, #12]
 8005c88:	e006      	b.n	8005c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c8a:	4b20      	ldr	r3, [pc, #128]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	491e      	ldr	r1, [pc, #120]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005ca4:	4b19      	ldr	r3, [pc, #100]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4918      	ldr	r1, [pc, #96]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	604b      	str	r3, [r1, #4]
 8005cb0:	e006      	b.n	8005cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cb2:	4b16      	ldr	r3, [pc, #88]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	4914      	ldr	r1, [pc, #80]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d021      	beq.n	8005d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	490e      	ldr	r1, [pc, #56]	@ (8005d0c <HAL_GPIO_Init+0x2d0>)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	e021      	b.n	8005d1e <HAL_GPIO_Init+0x2e2>
 8005cda:	bf00      	nop
 8005cdc:	10320000 	.word	0x10320000
 8005ce0:	10310000 	.word	0x10310000
 8005ce4:	10220000 	.word	0x10220000
 8005ce8:	10210000 	.word	0x10210000
 8005cec:	10120000 	.word	0x10120000
 8005cf0:	10110000 	.word	0x10110000
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010800 	.word	0x40010800
 8005d00:	40010c00 	.word	0x40010c00
 8005d04:	40011000 	.word	0x40011000
 8005d08:	40011400 	.word	0x40011400
 8005d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_GPIO_Init+0x304>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	43db      	mvns	r3, r3
 8005d18:	4909      	ldr	r1, [pc, #36]	@ (8005d40 <HAL_GPIO_Init+0x304>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	3301      	adds	r3, #1
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f47f ae8e 	bne.w	8005a50 <HAL_GPIO_Init+0x14>
  }
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	372c      	adds	r7, #44	@ 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	40010400 	.word	0x40010400

08005d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	887b      	ldrh	r3, [r7, #2]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e001      	b.n	8005d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	807b      	strh	r3, [r7, #2]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d82:	787b      	ldrb	r3, [r7, #1]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d88:	887a      	ldrh	r2, [r7, #2]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d8e:	e003      	b.n	8005d98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	041a      	lsls	r2, r3, #16
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005db4:	887a      	ldrh	r2, [r7, #2]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4013      	ands	r3, r2
 8005dba:	041a      	lsls	r2, r3, #16
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	43d9      	mvns	r1, r3
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e12b      	b.n	800603e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe fc1c 	bl	8004638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2224      	movs	r2, #36	@ 0x24
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e38:	f004 ffe0 	bl	800adfc <HAL_RCC_GetPCLK1Freq>
 8005e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a81      	ldr	r2, [pc, #516]	@ (8006048 <HAL_I2C_Init+0x274>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d807      	bhi.n	8005e58 <HAL_I2C_Init+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a80      	ldr	r2, [pc, #512]	@ (800604c <HAL_I2C_Init+0x278>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bf94      	ite	ls
 8005e50:	2301      	movls	r3, #1
 8005e52:	2300      	movhi	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e006      	b.n	8005e66 <HAL_I2C_Init+0x92>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a7d      	ldr	r2, [pc, #500]	@ (8006050 <HAL_I2C_Init+0x27c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bf94      	ite	ls
 8005e60:	2301      	movls	r3, #1
 8005e62:	2300      	movhi	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0e7      	b.n	800603e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a78      	ldr	r2, [pc, #480]	@ (8006054 <HAL_I2C_Init+0x280>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0c9b      	lsrs	r3, r3, #18
 8005e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8006048 <HAL_I2C_Init+0x274>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <HAL_I2C_Init+0xd4>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	e009      	b.n	8005ebc <HAL_I2C_Init+0xe8>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	4a69      	ldr	r2, [pc, #420]	@ (8006058 <HAL_I2C_Init+0x284>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	3301      	adds	r3, #1
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ece:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	495c      	ldr	r1, [pc, #368]	@ (8006048 <HAL_I2C_Init+0x274>)
 8005ed8:	428b      	cmp	r3, r1
 8005eda:	d819      	bhi.n	8005f10 <HAL_I2C_Init+0x13c>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1e59      	subs	r1, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_I2C_Init+0x138>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1e59      	subs	r1, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f04:	3301      	adds	r3, #1
 8005f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0a:	e051      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	e04f      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d111      	bne.n	8005f3c <HAL_I2C_Init+0x168>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1e58      	subs	r0, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6859      	ldr	r1, [r3, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	440b      	add	r3, r1
 8005f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e012      	b.n	8005f62 <HAL_I2C_Init+0x18e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	0099      	lsls	r1, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f52:	3301      	adds	r3, #1
 8005f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Init+0x196>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e022      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10e      	bne.n	8005f90 <HAL_I2C_Init+0x1bc>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1e58      	subs	r0, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	440b      	add	r3, r1
 8005f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f84:	3301      	adds	r3, #1
 8005f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f8e:	e00f      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1e58      	subs	r0, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	0099      	lsls	r1, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	6809      	ldr	r1, [r1, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005fde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6911      	ldr	r1, [r2, #16]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68d2      	ldr	r2, [r2, #12]
 8005fea:	4311      	orrs	r1, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	000186a0 	.word	0x000186a0
 800604c:	001e847f 	.word	0x001e847f
 8006050:	003d08ff 	.word	0x003d08ff
 8006054:	431bde83 	.word	0x431bde83
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b80      	cmp	r3, #128	@ 0x80
 8006070:	d103      	bne.n	800607a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	611a      	str	r2, [r3, #16]
  }
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	461a      	mov	r2, r3
 8006090:	460b      	mov	r3, r1
 8006092:	817b      	strh	r3, [r7, #10]
 8006094:	4613      	mov	r3, r2
 8006096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006098:	f7ff f81c 	bl	80050d4 <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 80e0 	bne.w	800626c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2319      	movs	r3, #25
 80060b2:	2201      	movs	r2, #1
 80060b4:	4970      	ldr	r1, [pc, #448]	@ (8006278 <HAL_I2C_Master_Transmit+0x1f4>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f002 fadc 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0d3      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2C_Master_Transmit+0x50>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0cc      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d007      	beq.n	80060fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2221      	movs	r2, #33	@ 0x21
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2210      	movs	r2, #16
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a50      	ldr	r2, [pc, #320]	@ (800627c <HAL_I2C_Master_Transmit+0x1f8>)
 800613a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f002 f808 	bl	8008158 <I2C_MasterRequestWrite>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e08d      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006168:	e066      	b.n	8006238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6a39      	ldr	r1, [r7, #32]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f002 fb9a 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	2b04      	cmp	r3, #4
 8006180:	d107      	bne.n	8006192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e06b      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d11b      	bne.n	800620c <HAL_I2C_Master_Transmit+0x188>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f002 fb91 	bl	8008938 <I2C_WaitOnBTFFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	2b04      	cmp	r3, #4
 8006222:	d107      	bne.n	8006234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e01a      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d194      	bne.n	800616a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800624e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	00100002 	.word	0x00100002
 800627c:	ffff0000 	.word	0xffff0000

08006280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	@ 0x30
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	4613      	mov	r3, r2
 8006292:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006298:	f7fe ff1c 	bl	80050d4 <HAL_GetTick>
 800629c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	f040 824b 	bne.w	8006742 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2319      	movs	r3, #25
 80062b2:	2201      	movs	r2, #1
 80062b4:	497f      	ldr	r1, [pc, #508]	@ (80064b4 <HAL_I2C_Master_Receive+0x234>)
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f002 f9dc 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
 80062c4:	e23e      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_I2C_Master_Receive+0x54>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e237      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d007      	beq.n	80062fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2222      	movs	r2, #34	@ 0x22
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2210      	movs	r2, #16
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	893a      	ldrh	r2, [r7, #8]
 800632a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a5f      	ldr	r2, [pc, #380]	@ (80064b8 <HAL_I2C_Master_Receive+0x238>)
 800633a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800633c:	8979      	ldrh	r1, [r7, #10]
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f001 ff8a 	bl	800825c <I2C_MasterRequestRead>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1f8      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e1cc      	b.n	800671c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11e      	bne.n	80063c8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800639a:	b672      	cpsid	i
}
 800639c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063c4:	b662      	cpsie	i
}
 80063c6:	e035      	b.n	8006434 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d11e      	bne.n	800640e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063e0:	b672      	cpsid	i
}
 80063e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006408:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800640a:	b662      	cpsie	i
}
 800640c:	e012      	b.n	8006434 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800641c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641e:	2300      	movs	r3, #0
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006434:	e172      	b.n	800671c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643a:	2b03      	cmp	r3, #3
 800643c:	f200 811f 	bhi.w	800667e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006444:	2b01      	cmp	r3, #1
 8006446:	d123      	bne.n	8006490 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f002 faed 	bl	8008a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e173      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800648e:	e145      	b.n	800671c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006494:	2b02      	cmp	r3, #2
 8006496:	d152      	bne.n	800653e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	2200      	movs	r2, #0
 80064a0:	4906      	ldr	r1, [pc, #24]	@ (80064bc <HAL_I2C_Master_Receive+0x23c>)
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f002 f8e6 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e148      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
 80064b2:	bf00      	nop
 80064b4:	00100002 	.word	0x00100002
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80064c0:	b672      	cpsid	i
}
 80064c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006506:	b662      	cpsie	i
}
 8006508:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800653c:	e0ee      	b.n	800671c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	4981      	ldr	r1, [pc, #516]	@ (800674c <HAL_I2C_Master_Receive+0x4cc>)
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f002 f893 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0f5      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006568:	b672      	cpsid	i
}
 800656a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800659e:	4b6c      	ldr	r3, [pc, #432]	@ (8006750 <HAL_I2C_Master_Receive+0x4d0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	08db      	lsrs	r3, r3, #3
 80065a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006754 <HAL_I2C_Master_Receive+0x4d4>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	0a1a      	lsrs	r2, r3, #8
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	00da      	lsls	r2, r3, #3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d118      	bne.n	80065f6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065e6:	b662      	cpsie	i
}
 80065e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0a6      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b04      	cmp	r3, #4
 8006602:	d1d9      	bne.n	80065b8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006646:	b662      	cpsie	i
}
 8006648:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800667c:	e04e      	b.n	800671c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800667e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006680:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f002 f9d2 	bl	8008a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e058      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d124      	bne.n	800671c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d107      	bne.n	80066ea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006720:	2b00      	cmp	r3, #0
 8006722:	f47f ae88 	bne.w	8006436 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3728      	adds	r7, #40	@ 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	00010004 	.word	0x00010004
 8006750:	20000018 	.word	0x20000018
 8006754:	14f8b589 	.word	0x14f8b589

08006758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	460b      	mov	r3, r1
 800676c:	813b      	strh	r3, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006772:	f7fe fcaf 	bl	80050d4 <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b20      	cmp	r3, #32
 8006782:	f040 80d9 	bne.w	8006938 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	2319      	movs	r3, #25
 800678c:	2201      	movs	r2, #1
 800678e:	496d      	ldr	r1, [pc, #436]	@ (8006944 <HAL_I2C_Mem_Write+0x1ec>)
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 ff6f 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
 800679e:	e0cc      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_I2C_Mem_Write+0x56>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e0c5      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d007      	beq.n	80067d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2221      	movs	r2, #33	@ 0x21
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2240      	movs	r2, #64	@ 0x40
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a4d      	ldr	r2, [pc, #308]	@ (8006948 <HAL_I2C_Mem_Write+0x1f0>)
 8006814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006816:	88f8      	ldrh	r0, [r7, #6]
 8006818:	893a      	ldrh	r2, [r7, #8]
 800681a:	8979      	ldrh	r1, [r7, #10]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 fde6 	bl	80083f8 <I2C_RequestMemoryWrite>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d052      	beq.n	80068d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e081      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f002 f834 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684a:	2b04      	cmp	r3, #4
 800684c:	d107      	bne.n	800685e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800685c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e06b      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b04      	cmp	r3, #4
 800689e:	d11b      	bne.n	80068d8 <HAL_I2C_Mem_Write+0x180>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d017      	beq.n	80068d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1aa      	bne.n	8006836 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f002 f827 	bl	8008938 <I2C_WaitOnBTFFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d107      	bne.n	8006908 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006906:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e016      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e000      	b.n	800693a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006938:	2302      	movs	r3, #2
  }
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	00100002 	.word	0x00100002
 8006948:	ffff0000 	.word	0xffff0000

0800694c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800696c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006974:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d003      	beq.n	8006984 <HAL_I2C_EV_IRQHandler+0x38>
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	f040 80c1 	bne.w	8006b06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <HAL_I2C_EV_IRQHandler+0x6e>
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80069a4:	d003      	beq.n	80069ae <HAL_I2C_EV_IRQHandler+0x62>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80069ac:	d101      	bne.n	80069b2 <HAL_I2C_EV_IRQHandler+0x66>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <HAL_I2C_EV_IRQHandler+0x68>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f000 8132 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x92>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f002 f8b6 	bl	8008b42 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fd99 	bl	800750e <I2C_Master_SB>
 80069dc:	e092      	b.n	8006b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	08db      	lsrs	r3, r3, #3
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_I2C_EV_IRQHandler+0xb2>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	0a5b      	lsrs	r3, r3, #9
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fe0e 	bl	8007618 <I2C_Master_ADD10>
 80069fc:	e082      	b.n	8006b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <HAL_I2C_EV_IRQHandler+0xd2>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	0a5b      	lsrs	r3, r3, #9
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fe27 	bl	800766a <I2C_Master_ADDR>
 8006a1c:	e072      	b.n	8006b04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03b      	beq.n	8006aa2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a38:	f000 80f3 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	09db      	lsrs	r3, r3, #7
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	0a9b      	lsrs	r3, r3, #10
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9f1 	bl	8006e48 <I2C_MasterTransmit_TXE>
 8006a66:	e04d      	b.n	8006b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80d6 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	0a5b      	lsrs	r3, r3, #9
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80cf 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b21      	cmp	r3, #33	@ 0x21
 8006a88:	d103      	bne.n	8006a92 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa78 	bl	8006f80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a90:	e0c7      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b40      	cmp	r3, #64	@ 0x40
 8006a96:	f040 80c4 	bne.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fae6 	bl	800706c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa0:	e0bf      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab0:	f000 80b7 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	099b      	lsrs	r3, r3, #6
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00f      	beq.n	8006ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	0a9b      	lsrs	r3, r3, #10
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <HAL_I2C_EV_IRQHandler+0x194>
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	089b      	lsrs	r3, r3, #2
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fb5f 	bl	800719c <I2C_MasterReceive_RXNE>
 8006ade:	e011      	b.n	8006b04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 809a 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8093 	beq.w	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc15 	bl	800732c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b02:	e08e      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b04:	e08d      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	e007      	b.n	8006b28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d012      	beq.n	8006b5a <HAL_I2C_EV_IRQHandler+0x20e>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	0a5b      	lsrs	r3, r3, #9
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 ffe0 	bl	8007b18 <I2C_Slave_ADDR>
 8006b58:	e066      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_I2C_EV_IRQHandler+0x22e>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	0a5b      	lsrs	r3, r3, #9
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f81a 	bl	8007bac <I2C_Slave_STOPF>
 8006b78:	e056      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b21      	cmp	r3, #33	@ 0x21
 8006b7e:	d002      	beq.n	8006b86 <HAL_I2C_EV_IRQHandler+0x23a>
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	2b29      	cmp	r3, #41	@ 0x29
 8006b84:	d125      	bne.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	09db      	lsrs	r3, r3, #7
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	0a9b      	lsrs	r3, r3, #10
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d009      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x266>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fef8 	bl	80079a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb0:	e039      	b.n	8006c26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	089b      	lsrs	r3, r3, #2
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d033      	beq.n	8006c26 <HAL_I2C_EV_IRQHandler+0x2da>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d02d      	beq.n	8006c26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 ff25 	bl	8007a1a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd0:	e029      	b.n	8006c26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	099b      	lsrs	r3, r3, #6
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	0a9b      	lsrs	r3, r3, #10
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 ff2f 	bl	8007a5a <I2C_SlaveReceive_RXNE>
 8006bfc:	e014      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	0a5b      	lsrs	r3, r3, #9
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 ff5d 	bl	8007ad6 <I2C_SlaveReceive_BTF>
 8006c1c:	e004      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006c1e:	bf00      	nop
 8006c20:	e002      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b08a      	sub	sp, #40	@ 0x28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	0a1b      	lsrs	r3, r3, #8
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d016      	beq.n	8006c8c <HAL_I2C_ER_IRQHandler+0x5e>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d010      	beq.n	8006c8c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006c7a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c8a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	0a5b      	lsrs	r3, r3, #9
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00e      	beq.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x88>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	f043 0302 	orr.w	r3, r3, #2
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006cb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	0a9b      	lsrs	r3, r3, #10
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d03f      	beq.n	8006d42 <HAL_I2C_ER_IRQHandler+0x114>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	0a1b      	lsrs	r3, r3, #8
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d039      	beq.n	8006d42 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8006cce:	7efb      	ldrb	r3, [r7, #27]
 8006cd0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ce8:	7ebb      	ldrb	r3, [r7, #26]
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d112      	bne.n	8006d14 <HAL_I2C_ER_IRQHandler+0xe6>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10f      	bne.n	8006d14 <HAL_I2C_ER_IRQHandler+0xe6>
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	2b21      	cmp	r3, #33	@ 0x21
 8006cf8:	d008      	beq.n	8006d0c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006cfa:	7cfb      	ldrb	r3, [r7, #19]
 8006cfc:	2b29      	cmp	r3, #41	@ 0x29
 8006cfe:	d005      	beq.n	8006d0c <HAL_I2C_ER_IRQHandler+0xde>
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b28      	cmp	r3, #40	@ 0x28
 8006d04:	d106      	bne.n	8006d14 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b21      	cmp	r3, #33	@ 0x21
 8006d0a:	d103      	bne.n	8006d14 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f87d 	bl	8007e0c <I2C_Slave_AF>
 8006d12:	e016      	b.n	8006d42 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d1c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d26:	7efb      	ldrb	r3, [r7, #27]
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d002      	beq.n	8006d32 <HAL_I2C_ER_IRQHandler+0x104>
 8006d2c:	7efb      	ldrb	r3, [r7, #27]
 8006d2e:	2b40      	cmp	r3, #64	@ 0x40
 8006d30:	d107      	bne.n	8006d42 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d40:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	0adb      	lsrs	r3, r3, #11
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <HAL_I2C_ER_IRQHandler+0x13e>
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	f043 0308 	orr.w	r3, r3, #8
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006d6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 f8b8 	bl	8007ef4 <I2C_ITError>
  }
}
 8006d84:	bf00      	nop
 8006d86:	3728      	adds	r7, #40	@ 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
 8006de0:	4613      	mov	r3, r2
 8006de2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr

08006e36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d150      	bne.n	8006f10 <I2C_MasterTransmit_TXE+0xc8>
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b21      	cmp	r3, #33	@ 0x21
 8006e72:	d14d      	bne.n	8006f10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d01d      	beq.n	8006eb6 <I2C_MasterTransmit_TXE+0x6e>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d01a      	beq.n	8006eb6 <I2C_MasterTransmit_TXE+0x6e>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e86:	d016      	beq.n	8006eb6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2211      	movs	r2, #17
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff ff6c 	bl	8006d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006eb4:	e060      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ec4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b40      	cmp	r3, #64	@ 0x40
 8006eee:	d107      	bne.n	8006f00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff81 	bl	8006e00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006efe:	e03b      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff3f 	bl	8006d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f0e:	e033      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b21      	cmp	r3, #33	@ 0x21
 8006f14:	d005      	beq.n	8006f22 <I2C_MasterTransmit_TXE+0xda>
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	d12d      	bne.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b22      	cmp	r3, #34	@ 0x22
 8006f20:	d12a      	bne.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d108      	bne.n	8006f3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f3c:	e01c      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b40      	cmp	r3, #64	@ 0x40
 8006f48:	d103      	bne.n	8006f52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f88e 	bl	800706c <I2C_MemoryTransmit_TXE_BTF>
}
 8006f50:	e012      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f76:	e7ff      	b.n	8006f78 <I2C_MasterTransmit_TXE+0x130>
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b21      	cmp	r3, #33	@ 0x21
 8006f98:	d164      	bne.n	8007064 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d012      	beq.n	8006fca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fc8:	e04c      	b.n	8007064 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d01d      	beq.n	800700c <I2C_MasterTransmit_BTF+0x8c>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d01a      	beq.n	800700c <I2C_MasterTransmit_BTF+0x8c>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fdc:	d016      	beq.n	800700c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2211      	movs	r2, #17
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fec1 	bl	8006d8c <HAL_I2C_MasterTxCpltCallback>
}
 800700a:	e02b      	b.n	8007064 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800701a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800702a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b40      	cmp	r3, #64	@ 0x40
 8007044:	d107      	bne.n	8007056 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fed6 	bl	8006e00 <HAL_I2C_MemTxCpltCallback>
}
 8007054:	e006      	b.n	8007064 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fe94 	bl	8006d8c <HAL_I2C_MasterTxCpltCallback>
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11d      	bne.n	80070c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d10b      	bne.n	80070a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80070a2:	e077      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	121b      	asrs	r3, r3, #8
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80070be:	e069      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d10b      	bne.n	80070e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80070de:	e059      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d152      	bne.n	800718e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b22      	cmp	r3, #34	@ 0x22
 80070ec:	d10d      	bne.n	800710a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007108:	e044      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	2b21      	cmp	r3, #33	@ 0x21
 8007118:	d112      	bne.n	8007140 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800713e:	e029      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d124      	bne.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b21      	cmp	r3, #33	@ 0x21
 800714e:	d121      	bne.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800715e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800716e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fe3a 	bl	8006e00 <HAL_I2C_MemTxCpltCallback>
}
 800718c:	e002      	b.n	8007194 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fe ff64 	bl	800605c <I2C_Flush_DR>
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b22      	cmp	r3, #34	@ 0x22
 80071ae:	f040 80b9 	bne.w	8007324 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d921      	bls.n	800720a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	f040 8096 	bne.w	8007324 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007206:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007208:	e08c      	b.n	8007324 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	2b02      	cmp	r3, #2
 8007210:	d07f      	beq.n	8007312 <I2C_MasterReceive_RXNE+0x176>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d002      	beq.n	800721e <I2C_MasterReceive_RXNE+0x82>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d179      	bne.n	8007312 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fbd2 	bl	80089c8 <I2C_WaitOnSTOPRequestThroughIT>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d14c      	bne.n	80072c4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007238:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007248:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b40      	cmp	r3, #64	@ 0x40
 8007282:	d10a      	bne.n	800729a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fdbd 	bl	8006e12 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007298:	e044      	b.n	8007324 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d002      	beq.n	80072ae <I2C_MasterReceive_RXNE+0x112>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d103      	bne.n	80072b6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80072b4:	e002      	b.n	80072bc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2212      	movs	r2, #18
 80072ba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fd6e 	bl	8006d9e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072c2:	e02f      	b.n	8007324 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80072d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff fd8a 	bl	8006e24 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007310:	e008      	b.n	8007324 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007320:	605a      	str	r2, [r3, #4]
}
 8007322:	e7ff      	b.n	8007324 <I2C_MasterReceive_RXNE+0x188>
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007338:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b04      	cmp	r3, #4
 8007342:	d11b      	bne.n	800737c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007352:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800737a:	e0c4      	b.n	8007506 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b03      	cmp	r3, #3
 8007384:	d129      	bne.n	80073da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007394:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d00a      	beq.n	80073b2 <I2C_MasterReceive_BTF+0x86>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d007      	beq.n	80073b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80073d8:	e095      	b.n	8007506 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d17d      	bne.n	80074e0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d002      	beq.n	80073f0 <I2C_MasterReceive_BTF+0xc4>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d108      	bne.n	8007402 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e016      	b.n	8007430 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d002      	beq.n	800740e <I2C_MasterReceive_BTF+0xe2>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d108      	bne.n	8007420 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e007      	b.n	8007430 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800742e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800748a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b40      	cmp	r3, #64	@ 0x40
 800749e:	d10a      	bne.n	80074b6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fcaf 	bl	8006e12 <HAL_I2C_MemRxCpltCallback>
}
 80074b4:	e027      	b.n	8007506 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d002      	beq.n	80074ca <I2C_MasterReceive_BTF+0x19e>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d103      	bne.n	80074d2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80074d0:	e002      	b.n	80074d8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2212      	movs	r2, #18
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fc60 	bl	8006d9e <HAL_I2C_MasterRxCpltCallback>
}
 80074de:	e012      	b.n	8007506 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b40      	cmp	r3, #64	@ 0x40
 8007520:	d117      	bne.n	8007552 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800753a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800753c:	e067      	b.n	800760e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	b2da      	uxtb	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	611a      	str	r2, [r3, #16]
}
 8007550:	e05d      	b.n	800760e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800755a:	d133      	bne.n	80075c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b21      	cmp	r3, #33	@ 0x21
 8007566:	d109      	bne.n	800757c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	e008      	b.n	800758e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <I2C_Master_SB+0x92>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d032      	beq.n	800760e <I2C_Master_SB+0x100>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02d      	beq.n	800760e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075c0:	605a      	str	r2, [r3, #4]
}
 80075c2:	e024      	b.n	800760e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10e      	bne.n	80075ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	11db      	asrs	r3, r3, #7
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0306 	and.w	r3, r3, #6
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f063 030f 	orn	r3, r3, #15
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	611a      	str	r2, [r3, #16]
}
 80075e8:	e011      	b.n	800760e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10d      	bne.n	800760e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	11db      	asrs	r3, r3, #7
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f003 0306 	and.w	r3, r3, #6
 8007600:	b2db      	uxtb	r3, r3
 8007602:	f063 030e 	orn	r3, r3, #14
 8007606:	b2da      	uxtb	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	611a      	str	r2, [r3, #16]
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007624:	b2da      	uxtb	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <I2C_Master_ADD10+0x26>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d108      	bne.n	8007650 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00c      	beq.n	8007660 <I2C_Master_ADD10+0x48>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764c:	2b00      	cmp	r3, #0
 800764e:	d007      	beq.n	8007660 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800765e:	605a      	str	r2, [r3, #4]
  }
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800766a:	b480      	push	{r7}
 800766c:	b091      	sub	sp, #68	@ 0x44
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007678:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b22      	cmp	r3, #34	@ 0x22
 8007692:	f040 8174 	bne.w	800797e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10f      	bne.n	80076be <I2C_Master_ADDR+0x54>
 800769e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80076a2:	2b40      	cmp	r3, #64	@ 0x40
 80076a4:	d10b      	bne.n	80076be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a6:	2300      	movs	r3, #0
 80076a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	e16b      	b.n	8007996 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11d      	bne.n	8007702 <I2C_Master_ADDR+0x98>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80076ce:	d118      	bne.n	8007702 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d0:	2300      	movs	r3, #0
 80076d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007700:	e149      	b.n	8007996 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d113      	bne.n	8007734 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770c:	2300      	movs	r3, #0
 800770e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e120      	b.n	8007976 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b01      	cmp	r3, #1
 800773c:	f040 808a 	bne.w	8007854 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007746:	d137      	bne.n	80077b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007756:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007766:	d113      	bne.n	8007790 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007776:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	627b      	str	r3, [r7, #36]	@ 0x24
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	e0f2      	b.n	8007976 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007790:	2300      	movs	r3, #0
 8007792:	623b      	str	r3, [r7, #32]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	623b      	str	r3, [r7, #32]
 80077a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e0de      	b.n	8007976 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	2b08      	cmp	r3, #8
 80077bc:	d02e      	beq.n	800781c <I2C_Master_ADDR+0x1b2>
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d02b      	beq.n	800781c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80077c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c6:	2b12      	cmp	r3, #18
 80077c8:	d102      	bne.n	80077d0 <I2C_Master_ADDR+0x166>
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d125      	bne.n	800781c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d00e      	beq.n	80077f4 <I2C_Master_ADDR+0x18a>
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d00b      	beq.n	80077f4 <I2C_Master_ADDR+0x18a>
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d008      	beq.n	80077f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e007      	b.n	8007804 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007802:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	e0ac      	b.n	8007976 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800782a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e090      	b.n	8007976 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d158      	bne.n	8007910 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	2b04      	cmp	r3, #4
 8007862:	d021      	beq.n	80078a8 <I2C_Master_ADDR+0x23e>
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	2b02      	cmp	r3, #2
 8007868:	d01e      	beq.n	80078a8 <I2C_Master_ADDR+0x23e>
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	2b10      	cmp	r3, #16
 800786e:	d01b      	beq.n	80078a8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800787e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e012      	b.n	80078ce <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80078b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078dc:	d14b      	bne.n	8007976 <I2C_Master_ADDR+0x30c>
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078e4:	d00b      	beq.n	80078fe <I2C_Master_ADDR+0x294>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d008      	beq.n	80078fe <I2C_Master_ADDR+0x294>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d005      	beq.n	80078fe <I2C_Master_ADDR+0x294>
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d002      	beq.n	80078fe <I2C_Master_ADDR+0x294>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d13b      	bne.n	8007976 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	e032      	b.n	8007976 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800791e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800792e:	d117      	bne.n	8007960 <I2C_Master_ADDR+0x2f6>
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007936:	d00b      	beq.n	8007950 <I2C_Master_ADDR+0x2e6>
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	2b01      	cmp	r3, #1
 800793c:	d008      	beq.n	8007950 <I2C_Master_ADDR+0x2e6>
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	2b08      	cmp	r3, #8
 8007942:	d005      	beq.n	8007950 <I2C_Master_ADDR+0x2e6>
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	2b10      	cmp	r3, #16
 8007948:	d002      	beq.n	8007950 <I2C_Master_ADDR+0x2e6>
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	2b20      	cmp	r3, #32
 800794e:	d107      	bne.n	8007960 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800795e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800797c:	e00b      	b.n	8007996 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797e:	2300      	movs	r3, #0
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	68bb      	ldr	r3, [r7, #8]
}
 8007994:	e7ff      	b.n	8007996 <I2C_Master_ADDR+0x32c>
 8007996:	bf00      	nop
 8007998:	3744      	adds	r7, #68	@ 0x44
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d02b      	beq.n	8007a12 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d114      	bne.n	8007a12 <I2C_SlaveTransmit_TXE+0x72>
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b29      	cmp	r3, #41	@ 0x29
 80079ec:	d111      	bne.n	8007a12 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2221      	movs	r2, #33	@ 0x21
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2228      	movs	r2, #40	@ 0x28
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff f9cf 	bl	8006db0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d011      	beq.n	8007a50 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d02c      	beq.n	8007ace <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d114      	bne.n	8007ace <I2C_SlaveReceive_RXNE+0x74>
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa8:	d111      	bne.n	8007ace <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ab8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2222      	movs	r2, #34	@ 0x22
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2228      	movs	r2, #40	@ 0x28
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff f97a 	bl	8006dc2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691a      	ldr	r2, [r3, #16]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b32:	2b28      	cmp	r3, #40	@ 0x28
 8007b34:	d127      	bne.n	8007b86 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b44:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	089b      	lsrs	r3, r3, #2
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	09db      	lsrs	r3, r3, #7
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	81bb      	strh	r3, [r7, #12]
 8007b68:	e002      	b.n	8007b70 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b78:	89ba      	ldrh	r2, [r7, #12]
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff f928 	bl	8006dd4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b84:	e00e      	b.n	8007ba4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b86:	2300      	movs	r3, #0
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007bca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	60bb      	str	r3, [r7, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bf8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c08:	d172      	bne.n	8007cf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b22      	cmp	r3, #34	@ 0x22
 8007c0e:	d002      	beq.n	8007c16 <I2C_Slave_STOPF+0x6a>
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c14:	d135      	bne.n	8007c82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	f043 0204 	orr.w	r2, r3, #4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd fbf4 	bl	800543c <HAL_DMA_GetState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d049      	beq.n	8007cee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	4a69      	ldr	r2, [pc, #420]	@ (8007e04 <I2C_Slave_STOPF+0x258>)
 8007c60:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fb70 	bl	800534c <HAL_DMA_Abort_IT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d03d      	beq.n	8007cee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c80:	e035      	b.n	8007cee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	f043 0204 	orr.w	r2, r3, #4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd fbbe 	bl	800543c <HAL_DMA_GetState>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d014      	beq.n	8007cf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cca:	4a4e      	ldr	r2, [pc, #312]	@ (8007e04 <I2C_Slave_STOPF+0x258>)
 8007ccc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fd fb3a 	bl	800534c <HAL_DMA_Abort_IT>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d008      	beq.n	8007cf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	e000      	b.n	8007cf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d03e      	beq.n	8007d78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d112      	bne.n	8007d2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d38:	2b40      	cmp	r3, #64	@ 0x40
 8007d3a:	d112      	bne.n	8007d62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d70:	f043 0204 	orr.w	r2, r3, #4
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f8b7 	bl	8007ef4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d86:	e039      	b.n	8007dfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d8c:	d109      	bne.n	8007da2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2228      	movs	r2, #40	@ 0x28
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff f810 	bl	8006dc2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b28      	cmp	r3, #40	@ 0x28
 8007dac:	d111      	bne.n	8007dd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a15      	ldr	r2, [pc, #84]	@ (8007e08 <I2C_Slave_STOPF+0x25c>)
 8007db2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff f80f 	bl	8006dee <HAL_I2C_ListenCpltCallback>
}
 8007dd0:	e014      	b.n	8007dfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd6:	2b22      	cmp	r3, #34	@ 0x22
 8007dd8:	d002      	beq.n	8007de0 <I2C_Slave_STOPF+0x234>
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	2b22      	cmp	r3, #34	@ 0x22
 8007dde:	d10d      	bne.n	8007dfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe ffe3 	bl	8006dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	08008525 	.word	0x08008525
 8007e08:	ffff0000 	.word	0xffff0000

08007e0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d002      	beq.n	8007e2e <I2C_Slave_AF+0x22>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d129      	bne.n	8007e82 <I2C_Slave_AF+0x76>
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b28      	cmp	r3, #40	@ 0x28
 8007e32:	d126      	bne.n	8007e82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a2e      	ldr	r2, [pc, #184]	@ (8007ef0 <I2C_Slave_AF+0xe4>)
 8007e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007e52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fe ffb7 	bl	8006dee <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007e80:	e031      	b.n	8007ee6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b21      	cmp	r3, #33	@ 0x21
 8007e86:	d129      	bne.n	8007edc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a19      	ldr	r2, [pc, #100]	@ (8007ef0 <I2C_Slave_AF+0xe4>)
 8007e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2221      	movs	r2, #33	@ 0x21
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007eb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ebc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ecc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fe f8c4 	bl	800605c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7fe ff6b 	bl	8006db0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007eda:	e004      	b.n	8007ee6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ee4:	615a      	str	r2, [r3, #20]
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	ffff0000 	.word	0xffff0000

08007ef4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d002      	beq.n	8007f18 <I2C_ITError+0x24>
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d10a      	bne.n	8007f2e <I2C_ITError+0x3a>
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b22      	cmp	r3, #34	@ 0x22
 8007f1c:	d107      	bne.n	8007f2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f34:	2b28      	cmp	r3, #40	@ 0x28
 8007f36:	d107      	bne.n	8007f48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2228      	movs	r2, #40	@ 0x28
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f46:	e015      	b.n	8007f74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f56:	d00a      	beq.n	8007f6e <I2C_ITError+0x7a>
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b60      	cmp	r3, #96	@ 0x60
 8007f5c:	d007      	beq.n	8007f6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f82:	d162      	bne.n	800804a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d020      	beq.n	8007fe4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8008150 <I2C_ITError+0x25c>)
 8007fa8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd f9cc 	bl	800534c <HAL_DMA_Abort_IT>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8089 	beq.w	80080ce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4798      	blx	r3
 8007fe2:	e074      	b.n	80080ce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe8:	4a59      	ldr	r2, [pc, #356]	@ (8008150 <I2C_ITError+0x25c>)
 8007fea:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd f9ab 	bl	800534c <HAL_DMA_Abort_IT>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d068      	beq.n	80080ce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008006:	2b40      	cmp	r3, #64	@ 0x40
 8008008:	d10b      	bne.n	8008022 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	e041      	b.n	80080ce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b60      	cmp	r3, #96	@ 0x60
 8008054:	d125      	bne.n	80080a2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806e:	2b40      	cmp	r3, #64	@ 0x40
 8008070:	d10b      	bne.n	800808a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe fecb 	bl	8006e36 <HAL_I2C_AbortCpltCallback>
 80080a0:	e015      	b.n	80080ce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ac:	2b40      	cmp	r3, #64	@ 0x40
 80080ae:	d10b      	bne.n	80080c8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7fe feab 	bl	8006e24 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10e      	bne.n	80080fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008112:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d113      	bne.n	8008148 <I2C_ITError+0x254>
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b28      	cmp	r3, #40	@ 0x28
 8008124:	d110      	bne.n	8008148 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a0a      	ldr	r2, [pc, #40]	@ (8008154 <I2C_ITError+0x260>)
 800812a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe fe53 	bl	8006dee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08008525 	.word	0x08008525
 8008154:	ffff0000 	.word	0xffff0000

08008158 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af02      	add	r7, sp, #8
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	460b      	mov	r3, r1
 8008166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d006      	beq.n	8008182 <I2C_MasterRequestWrite+0x2a>
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d003      	beq.n	8008182 <I2C_MasterRequestWrite+0x2a>
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008180:	d108      	bne.n	8008194 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e00b      	b.n	80081ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008198:	2b12      	cmp	r3, #18
 800819a:	d107      	bne.n	80081ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fa5b 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00d      	beq.n	80081e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081d2:	d103      	bne.n	80081dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e035      	b.n	800824c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081e8:	d108      	bne.n	80081fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081ea:	897b      	ldrh	r3, [r7, #10]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	e01b      	b.n	8008234 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081fc:	897b      	ldrh	r3, [r7, #10]
 80081fe:	11db      	asrs	r3, r3, #7
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0306 	and.w	r3, r3, #6
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f063 030f 	orn	r3, r3, #15
 800820c:	b2da      	uxtb	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	490e      	ldr	r1, [pc, #56]	@ (8008254 <I2C_MasterRequestWrite+0xfc>)
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 faa4 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e010      	b.n	800824c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800822a:	897b      	ldrh	r3, [r7, #10]
 800822c:	b2da      	uxtb	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4907      	ldr	r1, [pc, #28]	@ (8008258 <I2C_MasterRequestWrite+0x100>)
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fa94 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	00010008 	.word	0x00010008
 8008258:	00010002 	.word	0x00010002

0800825c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	460b      	mov	r3, r1
 800826a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008280:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b08      	cmp	r3, #8
 8008286:	d006      	beq.n	8008296 <I2C_MasterRequestRead+0x3a>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d003      	beq.n	8008296 <I2C_MasterRequestRead+0x3a>
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008294:	d108      	bne.n	80082a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	e00b      	b.n	80082c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	2b11      	cmp	r3, #17
 80082ae:	d107      	bne.n	80082c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f9d1 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e6:	d103      	bne.n	80082f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e079      	b.n	80083e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fc:	d108      	bne.n	8008310 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082fe:	897b      	ldrh	r3, [r7, #10]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	611a      	str	r2, [r3, #16]
 800830e:	e05f      	b.n	80083d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008310:	897b      	ldrh	r3, [r7, #10]
 8008312:	11db      	asrs	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f003 0306 	and.w	r3, r3, #6
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f063 030f 	orn	r3, r3, #15
 8008320:	b2da      	uxtb	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4930      	ldr	r1, [pc, #192]	@ (80083f0 <I2C_MasterRequestRead+0x194>)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fa1a 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e054      	b.n	80083e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800833e:	897b      	ldrh	r3, [r7, #10]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4929      	ldr	r1, [pc, #164]	@ (80083f4 <I2C_MasterRequestRead+0x198>)
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa0a 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e044      	b.n	80083e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008382:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f96f 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00d      	beq.n	80083b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083aa:	d103      	bne.n	80083b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e017      	b.n	80083e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80083b8:	897b      	ldrh	r3, [r7, #10]
 80083ba:	11db      	asrs	r3, r3, #7
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0306 	and.w	r3, r3, #6
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f063 030e 	orn	r3, r3, #14
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4907      	ldr	r1, [pc, #28]	@ (80083f4 <I2C_MasterRequestRead+0x198>)
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f9c6 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	00010008 	.word	0x00010008
 80083f4:	00010002 	.word	0x00010002

080083f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	4603      	mov	r3, r0
 8008408:	817b      	strh	r3, [r7, #10]
 800840a:	460b      	mov	r3, r1
 800840c:	813b      	strh	r3, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2200      	movs	r2, #0
 800842a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 f920 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008448:	d103      	bne.n	8008452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e05f      	b.n	8008516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008456:	897b      	ldrh	r3, [r7, #10]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	6a3a      	ldr	r2, [r7, #32]
 800846a:	492d      	ldr	r1, [pc, #180]	@ (8008520 <I2C_RequestMemoryWrite+0x128>)
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f97b 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e04c      	b.n	8008516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008494:	6a39      	ldr	r1, [r7, #32]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fa06 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d107      	bne.n	80084ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e02b      	b.n	8008516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d105      	bne.n	80084d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084c4:	893b      	ldrh	r3, [r7, #8]
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	611a      	str	r2, [r3, #16]
 80084ce:	e021      	b.n	8008514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084d0:	893b      	ldrh	r3, [r7, #8]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e0:	6a39      	ldr	r1, [r7, #32]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f9e0 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d107      	bne.n	8008506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e005      	b.n	8008516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800850a:	893b      	ldrh	r3, [r7, #8]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	00010002 	.word	0x00010002

08008524 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800853c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800853e:	4b4b      	ldr	r3, [pc, #300]	@ (800866c <I2C_DMAAbort+0x148>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	08db      	lsrs	r3, r3, #3
 8008544:	4a4a      	ldr	r2, [pc, #296]	@ (8008670 <I2C_DMAAbort+0x14c>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	0a1a      	lsrs	r2, r3, #8
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	00da      	lsls	r2, r3, #3
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	f043 0220 	orr.w	r2, r3, #32
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800856a:	e00a      	b.n	8008582 <I2C_DMAAbort+0x5e>
    }
    count--;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3b01      	subs	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800857c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008580:	d0ea      	beq.n	8008558 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858e:	2200      	movs	r2, #0
 8008590:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859e:	2200      	movs	r2, #0
 80085a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2200      	movs	r2, #0
 80085b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c4:	2200      	movs	r2, #0
 80085c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d4:	2200      	movs	r2, #0
 80085d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0201 	bic.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b60      	cmp	r3, #96	@ 0x60
 80085f2:	d10e      	bne.n	8008612 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2200      	movs	r2, #0
 8008608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800860a:	6978      	ldr	r0, [r7, #20]
 800860c:	f7fe fc13 	bl	8006e36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008610:	e027      	b.n	8008662 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008612:	7cfb      	ldrb	r3, [r7, #19]
 8008614:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008618:	2b28      	cmp	r3, #40	@ 0x28
 800861a:	d117      	bne.n	800864c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800863a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2228      	movs	r2, #40	@ 0x28
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800864a:	e007      	b.n	800865c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800865c:	6978      	ldr	r0, [r7, #20]
 800865e:	f7fe fbe1 	bl	8006e24 <HAL_I2C_ErrorCallback>
}
 8008662:	bf00      	nop
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000018 	.word	0x20000018
 8008670:	14f8b589 	.word	0x14f8b589

08008674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008684:	e048      	b.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d044      	beq.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800868e:	f7fc fd21 	bl	80050d4 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d139      	bne.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	0c1b      	lsrs	r3, r3, #16
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10d      	bne.n	80086ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	43da      	mvns	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4013      	ands	r3, r2
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	e00c      	b.n	80086e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	43da      	mvns	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4013      	ands	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d116      	bne.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e023      	b.n	8008760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10d      	bne.n	800873e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	43da      	mvns	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	e00c      	b.n	8008758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	43da      	mvns	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	d093      	beq.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008776:	e071      	b.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008786:	d123      	bne.n	80087d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087bc:	f043 0204 	orr.w	r2, r3, #4
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e067      	b.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d041      	beq.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d8:	f7fc fc7c 	bl	80050d4 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d136      	bne.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d10c      	bne.n	8008812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	43da      	mvns	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4013      	ands	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	bf14      	ite	ne
 800880a:	2301      	movne	r3, #1
 800880c:	2300      	moveq	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	e00b      	b.n	800882a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	43da      	mvns	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4013      	ands	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	bf14      	ite	ne
 8008824:	2301      	movne	r3, #1
 8008826:	2300      	moveq	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d016      	beq.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e021      	b.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10c      	bne.n	8008880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	43da      	mvns	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4013      	ands	r3, r2
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	bf14      	ite	ne
 8008878:	2301      	movne	r3, #1
 800887a:	2300      	moveq	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	e00b      	b.n	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf14      	ite	ne
 8008892:	2301      	movne	r3, #1
 8008894:	2300      	moveq	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	f47f af6d 	bne.w	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088b4:	e034      	b.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f915 	bl	8008ae6 <I2C_IsAcknowledgeFailed>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e034      	b.n	8008930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d028      	beq.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ce:	f7fc fc01 	bl	80050d4 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11d      	bne.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ee:	2b80      	cmp	r3, #128	@ 0x80
 80088f0:	d016      	beq.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e007      	b.n	8008930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b80      	cmp	r3, #128	@ 0x80
 800892c:	d1c3      	bne.n	80088b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008944:	e034      	b.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f8cd 	bl	8008ae6 <I2C_IsAcknowledgeFailed>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e034      	b.n	80089c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d028      	beq.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7fc fbb9 	bl	80050d4 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11d      	bne.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	2b04      	cmp	r3, #4
 8008980:	d016      	beq.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e007      	b.n	80089c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d1c3      	bne.n	8008946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80089d4:	4b13      	ldr	r3, [pc, #76]	@ (8008a24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	4a13      	ldr	r2, [pc, #76]	@ (8008a28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80089dc:	fba2 2303 	umull	r2, r3, r2, r3
 80089e0:	0a1a      	lsrs	r2, r3, #8
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fa:	f043 0220 	orr.w	r2, r3, #32
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e008      	b.n	8008a18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a14:	d0e9      	beq.n	80089ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000018 	.word	0x20000018
 8008a28:	14f8b589 	.word	0x14f8b589

08008a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a38:	e049      	b.n	8008ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d119      	bne.n	8008a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0210 	mvn.w	r2, #16
 8008a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e030      	b.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7c:	f7fc fb2a 	bl	80050d4 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d11d      	bne.n	8008ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	d016      	beq.n	8008ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aba:	f043 0220 	orr.w	r2, r3, #32
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e007      	b.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad8:	2b40      	cmp	r3, #64	@ 0x40
 8008ada:	d1ae      	bne.n	8008a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afc:	d11b      	bne.n	8008b36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b22:	f043 0204 	orr.w	r2, r3, #4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008b52:	d103      	bne.n	8008b5c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b5a:	e007      	b.n	8008b6c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008b64:	d102      	bne.n	8008b6c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2208      	movs	r2, #8
 8008b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0e8      	b.n	8008d5a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00b fa65 	bl	801406c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f003 fef8 	bl	800c9aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bc4:	f003 fece 	bl	800c964 <USB_CoreInit>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e0bf      	b.n	8008d5a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f003 fefc 	bl	800c9de <USB_SetCurrentMode>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e0b0      	b.n	8008d5a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
 8008bfc:	e03e      	b.n	8008c7c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008bfe:	7bfa      	ldrb	r2, [r7, #15]
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3311      	adds	r3, #17
 8008c0e:	2201      	movs	r2, #1
 8008c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c12:	7bfa      	ldrb	r2, [r7, #15]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	440b      	add	r3, r1
 8008c20:	3310      	adds	r3, #16
 8008c22:	7bfa      	ldrb	r2, [r7, #15]
 8008c24:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c26:	7bfa      	ldrb	r2, [r7, #15]
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	3313      	adds	r3, #19
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c3a:	7bfa      	ldrb	r2, [r7, #15]
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	440b      	add	r3, r1
 8008c48:	3320      	adds	r3, #32
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c4e:	7bfa      	ldrb	r2, [r7, #15]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	440b      	add	r3, r1
 8008c5c:	3324      	adds	r3, #36	@ 0x24
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	440b      	add	r3, r1
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	791b      	ldrb	r3, [r3, #4]
 8008c80:	7bfa      	ldrb	r2, [r7, #15]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d3bb      	bcc.n	8008bfe <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
 8008c8a:	e044      	b.n	8008d16 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c8c:	7bfa      	ldrb	r2, [r7, #15]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	440b      	add	r3, r1
 8008c9a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008ca2:	7bfa      	ldrb	r2, [r7, #15]
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	440b      	add	r3, r1
 8008cb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008cb8:	7bfa      	ldrb	r2, [r7, #15]
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008cce:	7bfa      	ldrb	r2, [r7, #15]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	440b      	add	r3, r1
 8008cdc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ce4:	7bfa      	ldrb	r2, [r7, #15]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008cfa:	7bfa      	ldrb	r2, [r7, #15]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	440b      	add	r3, r1
 8008d08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	3301      	adds	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	7bfa      	ldrb	r2, [r7, #15]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d3b5      	bcc.n	8008c8c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3304      	adds	r3, #4
 8008d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d2a:	f003 fe64 	bl	800c9f6 <USB_DevInit>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e00c      	b.n	8008d5a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f006 f8e3 	bl	800ef1e <USB_DevDisconnect>

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <HAL_PCD_Start+0x16>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e016      	b.n	8008da6 <HAL_PCD_Start+0x44>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f003 fdfa 	bl	800c97e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f00b fbe8 	bl	8014562 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f006 f8b7 	bl	800ef0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b088      	sub	sp, #32
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f006 f8b9 	bl	800ef32 <USB_ReadInterrupts>
 8008dc0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb1a 	bl	8009406 <PCD_EP_ISR_Handler>

    return;
 8008dd2:	e119      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d013      	beq.n	8008e06 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008df0:	b292      	uxth	r2, r2
 8008df2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f00b f9bb 	bl	8014172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f905 	bl	800900e <HAL_PCD_SetAddress>

    return;
 8008e04:	e100      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e22:	b292      	uxth	r2, r2
 8008e24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e28:	e0ee      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00c      	beq.n	8008e4e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e46:	b292      	uxth	r2, r2
 8008e48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e4c:	e0dc      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d027      	beq.n	8008ea8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0204 	bic.w	r2, r2, #4
 8008e6a:	b292      	uxth	r2, r2
 8008e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0208 	bic.w	r2, r2, #8
 8008e82:	b292      	uxth	r2, r2
 8008e84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f00b f9ab 	bl	80141e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008ea6:	e0af      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8083 	beq.w	8008fba <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	77fb      	strb	r3, [r7, #31]
 8008eb8:	e010      	b.n	8008edc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	7ffb      	ldrb	r3, [r7, #31]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
 8008ec8:	8812      	ldrh	r2, [r2, #0]
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	3320      	adds	r3, #32
 8008ed0:	443b      	add	r3, r7
 8008ed2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8008ed6:	7ffb      	ldrb	r3, [r7, #31]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	7ffb      	ldrb	r3, [r7, #31]
 8008ede:	2b07      	cmp	r3, #7
 8008ee0:	d9eb      	bls.n	8008eba <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f042 0201 	orr.w	r2, r2, #1
 8008ef4:	b292      	uxth	r2, r2
 8008ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0201 	bic.w	r2, r2, #1
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008f12:	bf00      	nop
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f6      	beq.n	8008f14 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f38:	b292      	uxth	r2, r2
 8008f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	77fb      	strb	r3, [r7, #31]
 8008f42:	e00f      	b.n	8008f64 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8008f44:	7ffb      	ldrb	r3, [r7, #31]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	7ffa      	ldrb	r2, [r7, #31]
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	440a      	add	r2, r1
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	3320      	adds	r3, #32
 8008f56:	443b      	add	r3, r7
 8008f58:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008f5c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8008f5e:	7ffb      	ldrb	r3, [r7, #31]
 8008f60:	3301      	adds	r3, #1
 8008f62:	77fb      	strb	r3, [r7, #31]
 8008f64:	7ffb      	ldrb	r3, [r7, #31]
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	d9ec      	bls.n	8008f44 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	b292      	uxth	r2, r2
 8008f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f94:	b292      	uxth	r2, r2
 8008f96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f042 0204 	orr.w	r2, r2, #4
 8008fac:	b292      	uxth	r2, r2
 8008fae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f00b f8fc 	bl	80141b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008fb8:	e026      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00f      	beq.n	8008fe4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008fd6:	b292      	uxth	r2, r2
 8008fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f00b f8ba 	bl	8014156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008fe2:	e011      	b.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009000:	b292      	uxth	r2, r2
 8009002:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009006:	bf00      	nop
  }
}
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_PCD_SetAddress+0x1a>
 8009024:	2302      	movs	r3, #2
 8009026:	e012      	b.n	800904e <HAL_PCD_SetAddress+0x40>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	4611      	mov	r1, r2
 800903e:	4618      	mov	r0, r3
 8009040:	f005 ff50 	bl	800eee4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	4608      	mov	r0, r1
 8009060:	4611      	mov	r1, r2
 8009062:	461a      	mov	r2, r3
 8009064:	4603      	mov	r3, r0
 8009066:	70fb      	strb	r3, [r7, #3]
 8009068:	460b      	mov	r3, r1
 800906a:	803b      	strh	r3, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009078:	2b00      	cmp	r3, #0
 800907a:	da0e      	bge.n	800909a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	f003 0207 	and.w	r2, r3, #7
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	3310      	adds	r3, #16
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	705a      	strb	r2, [r3, #1]
 8009098:	e00e      	b.n	80090b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	f003 0207 	and.w	r2, r3, #7
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	4413      	add	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80090c4:	883a      	ldrh	r2, [r7, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	78ba      	ldrb	r2, [r7, #2]
 80090ce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80090d0:	78bb      	ldrb	r3, [r7, #2]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d102      	bne.n	80090dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_PCD_EP_Open+0x94>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e00e      	b.n	8009108 <HAL_PCD_EP_Open+0xb2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f003 fc99 	bl	800ca30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8009106:	7afb      	ldrb	r3, [r7, #11]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800911c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009120:	2b00      	cmp	r3, #0
 8009122:	da0e      	bge.n	8009142 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009124:	78fb      	ldrb	r3, [r7, #3]
 8009126:	f003 0207 	and.w	r2, r3, #7
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	3310      	adds	r3, #16
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	4413      	add	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	705a      	strb	r2, [r3, #1]
 8009140:	e00e      	b.n	8009160 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	f003 0207 	and.w	r2, r3, #7
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	4413      	add	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_PCD_EP_Close+0x6a>
 8009176:	2302      	movs	r3, #2
 8009178:	e00e      	b.n	8009198 <HAL_PCD_EP_Close+0x88>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	4618      	mov	r0, r3
 800918a:	f004 f811 	bl	800d1b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	460b      	mov	r3, r1
 80091ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	f003 0207 	and.w	r2, r3, #7
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2200      	movs	r2, #0
 80091d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2200      	movs	r2, #0
 80091de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f004 f9c8 	bl	800d588 <USB_EPStartXfer>

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	f003 0207 	and.w	r2, r3, #7
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	440b      	add	r3, r1
 8009220:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8009224:	681b      	ldr	r3, [r3, #0]
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	460b      	mov	r3, r1
 800923e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009240:	7afb      	ldrb	r3, [r7, #11]
 8009242:	f003 0207 	and.w	r2, r3, #7
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	3310      	adds	r3, #16
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2200      	movs	r2, #0
 8009274:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2201      	movs	r2, #1
 800927a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	b2da      	uxtb	r2, r3
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6979      	ldr	r1, [r7, #20]
 800928e:	4618      	mov	r0, r3
 8009290:	f004 f97a 	bl	800d588 <USB_EPStartXfer>

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7912      	ldrb	r2, [r2, #4]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d901      	bls.n	80092bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e04c      	b.n	8009356 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da0e      	bge.n	80092e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092c4:	78fb      	ldrb	r3, [r7, #3]
 80092c6:	f003 0207 	and.w	r2, r3, #7
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	3310      	adds	r3, #16
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4413      	add	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	705a      	strb	r2, [r3, #1]
 80092e0:	e00c      	b.n	80092fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	4413      	add	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	b2da      	uxtb	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_PCD_EP_SetStall+0x7e>
 8009318:	2302      	movs	r3, #2
 800931a:	e01c      	b.n	8009356 <HAL_PCD_EP_SetStall+0xb8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	4618      	mov	r0, r3
 800932c:	f005 fcdd 	bl	800ecea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d108      	bne.n	800934c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f005 fe02 	bl	800ef50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7912      	ldrb	r2, [r2, #4]
 8009374:	4293      	cmp	r3, r2
 8009376:	d901      	bls.n	800937c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e040      	b.n	80093fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800937c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009380:	2b00      	cmp	r3, #0
 8009382:	da0e      	bge.n	80093a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 0207 	and.w	r2, r3, #7
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	3310      	adds	r3, #16
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	4413      	add	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	705a      	strb	r2, [r3, #1]
 80093a0:	e00e      	b.n	80093c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f003 0207 	and.w	r2, r3, #7
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4413      	add	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_PCD_EP_ClrStall+0x82>
 80093dc:	2302      	movs	r3, #2
 80093de:	e00e      	b.n	80093fe <HAL_PCD_EP_ClrStall+0xa0>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68f9      	ldr	r1, [r7, #12]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f005 fccb 	bl	800ed8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b096      	sub	sp, #88	@ 0x58
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800940e:	e3bb      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009418:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800941c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800942a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 8175 	bne.w	800971e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b00      	cmp	r3, #0
 800943e:	d14e      	bne.n	80094de <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800944c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009450:	81fb      	strh	r3, [r7, #14]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009460:	b29b      	uxth	r3, r3
 8009462:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3310      	adds	r3, #16
 8009468:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009472:	b29b      	uxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4413      	add	r3, r2
 800947e:	3302      	adds	r3, #2
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009494:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009498:	695a      	ldr	r2, [r3, #20]
 800949a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	441a      	add	r2, r3
 80094a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f00a fe3b 	bl	8014122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7b5b      	ldrb	r3, [r3, #13]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8368 	beq.w	8009b88 <PCD_EP_ISR_Handler+0x782>
 80094b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f040 8363 	bne.w	8009b88 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7b5b      	ldrb	r3, [r3, #13]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	735a      	strb	r2, [r3, #13]
 80094dc:	e354      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094e4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80094f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80094f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d034      	beq.n	8009566 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009504:	b29b      	uxth	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	3306      	adds	r3, #6
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009526:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8009532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009534:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009538:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800953a:	b29b      	uxth	r3, r3
 800953c:	f005 fd59 	bl	800eff2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29a      	uxth	r2, r3
 8009548:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800954c:	4013      	ands	r3, r2
 800954e:	823b      	strh	r3, [r7, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	8a3a      	ldrh	r2, [r7, #16]
 8009556:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800955a:	b292      	uxth	r2, r2
 800955c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f00a fdb2 	bl	80140c8 <HAL_PCD_SetupStageCallback>
 8009564:	e310      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009566:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800956a:	2b00      	cmp	r3, #0
 800956c:	f280 830c 	bge.w	8009b88 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29a      	uxth	r2, r3
 8009578:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800957c:	4013      	ands	r3, r2
 800957e:	83fb      	strh	r3, [r7, #30]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	8bfa      	ldrh	r2, [r7, #30]
 8009586:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800958a:	b292      	uxth	r2, r2
 800958c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009596:	b29b      	uxth	r3, r3
 8009598:	461a      	mov	r2, r3
 800959a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	3306      	adds	r3, #6
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80095ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d019      	beq.n	80095f6 <PCD_EP_ISR_Handler+0x1f0>
 80095c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d015      	beq.n	80095f6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d0:	6959      	ldr	r1, [r3, #20]
 80095d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80095d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f005 fd09 	bl	800eff2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80095e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e2:	695a      	ldr	r2, [r3, #20]
 80095e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	441a      	add	r2, r3
 80095ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f00a fd7b 	bl	80140ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009600:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009608:	2b00      	cmp	r3, #0
 800960a:	f040 82bd 	bne.w	8009b88 <PCD_EP_ISR_Handler+0x782>
 800960e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009612:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800961a:	f000 82b5 	beq.w	8009b88 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800962c:	b29b      	uxth	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	4413      	add	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009648:	b29a      	uxth	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b3e      	cmp	r3, #62	@ 0x3e
 8009654:	d91d      	bls.n	8009692 <PCD_EP_ISR_Handler+0x28c>
 8009656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	647b      	str	r3, [r7, #68]	@ 0x44
 800965e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 031f 	and.w	r3, r3, #31
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <PCD_EP_ISR_Handler+0x26a>
 800966a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966c:	3b01      	subs	r3, #1
 800966e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29a      	uxth	r2, r3
 8009676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009678:	b29b      	uxth	r3, r3
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	b29b      	uxth	r3, r3
 800967e:	4313      	orrs	r3, r2
 8009680:	b29b      	uxth	r3, r3
 8009682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968a:	b29a      	uxth	r2, r3
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	801a      	strh	r2, [r3, #0]
 8009690:	e026      	b.n	80096e0 <PCD_EP_ISR_Handler+0x2da>
 8009692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <PCD_EP_ISR_Handler+0x2aa>
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	801a      	strh	r2, [r3, #0]
 80096ae:	e017      	b.n	80096e0 <PCD_EP_ISR_Handler+0x2da>
 80096b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	085b      	lsrs	r3, r3, #1
 80096b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <PCD_EP_ISR_Handler+0x2c4>
 80096c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c6:	3301      	adds	r3, #1
 80096c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	029b      	lsls	r3, r3, #10
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	4313      	orrs	r3, r2
 80096da:	b29a      	uxth	r2, r3
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096f0:	827b      	strh	r3, [r7, #18]
 80096f2:	8a7b      	ldrh	r3, [r7, #18]
 80096f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80096f8:	827b      	strh	r3, [r7, #18]
 80096fa:	8a7b      	ldrh	r3, [r7, #18]
 80096fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009700:	827b      	strh	r3, [r7, #18]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	8a7b      	ldrh	r3, [r7, #18]
 8009708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800970c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009718:	b29b      	uxth	r3, r3
 800971a:	8013      	strh	r3, [r2, #0]
 800971c:	e234      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009732:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8009736:	2b00      	cmp	r3, #0
 8009738:	f280 80fc 	bge.w	8009934 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29a      	uxth	r2, r3
 800974e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009752:	4013      	ands	r3, r2
 8009754:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800976a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800976e:	b292      	uxth	r2, r2
 8009770:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009772:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800978a:	7b1b      	ldrb	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d125      	bne.n	80097dc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009798:	b29b      	uxth	r3, r3
 800979a:	461a      	mov	r2, r3
 800979c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	3306      	adds	r3, #6
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80097bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8092 	beq.w	80098ea <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097cc:	6959      	ldr	r1, [r3, #20]
 80097ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d0:	88da      	ldrh	r2, [r3, #6]
 80097d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80097d6:	f005 fc0c 	bl	800eff2 <USB_ReadPMA>
 80097da:	e086      	b.n	80098ea <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80097dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097de:	78db      	ldrb	r3, [r3, #3]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d10a      	bne.n	80097fa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80097e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80097e8:	461a      	mov	r2, r3
 80097ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f9d9 	bl	8009ba4 <HAL_PCD_EP_DB_Receive>
 80097f2:	4603      	mov	r3, r0
 80097f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80097f8:	e077      	b.n	80098ea <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009814:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	441a      	add	r2, r3
 8009826:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d024      	beq.n	80098a2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009860:	b29b      	uxth	r3, r3
 8009862:	461a      	mov	r2, r3
 8009864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	3302      	adds	r3, #2
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	6812      	ldr	r2, [r2, #0]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009880:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009884:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02e      	beq.n	80098ea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009892:	6959      	ldr	r1, [r3, #20]
 8009894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009896:	891a      	ldrh	r2, [r3, #8]
 8009898:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800989c:	f005 fba9 	bl	800eff2 <USB_ReadPMA>
 80098a0:	e023      	b.n	80098ea <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	4413      	add	r3, r2
 80098b6:	3306      	adds	r3, #6
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80098ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098dc:	6959      	ldr	r1, [r3, #20]
 80098de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098e0:	895a      	ldrh	r2, [r3, #10]
 80098e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098e6:	f005 fb84 	bl	800eff2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80098ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ec:	69da      	ldr	r2, [r3, #28]
 80098ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098f2:	441a      	add	r2, r3
 80098f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80098f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098fa:	695a      	ldr	r2, [r3, #20]
 80098fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009900:	441a      	add	r2, r3
 8009902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009904:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <PCD_EP_ISR_Handler+0x514>
 800990e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	429a      	cmp	r2, r3
 8009918:	d206      	bcs.n	8009928 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800991a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f00a fbe3 	bl	80140ec <HAL_PCD_DataOutStageCallback>
 8009926:	e005      	b.n	8009934 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800992e:	4618      	mov	r0, r3
 8009930:	f003 fe2a 	bl	800d588 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8123 	beq.w	8009b88 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8009942:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	00db      	lsls	r3, r3, #3
 800994e:	3310      	adds	r3, #16
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	4413      	add	r3, r2
 8009954:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29b      	uxth	r3, r3
 8009968:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800996c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009970:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	441a      	add	r2, r3
 8009982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998e:	b29b      	uxth	r3, r3
 8009990:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009994:	78db      	ldrb	r3, [r3, #3]
 8009996:	2b01      	cmp	r3, #1
 8009998:	f040 80a2 	bne.w	8009ae0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800999c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800999e:	2200      	movs	r2, #0
 80099a0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80099a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a4:	7b1b      	ldrb	r3, [r3, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8093 	beq.w	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80099ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80099b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d046      	beq.n	8009a46 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80099b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d126      	bne.n	8009a0e <PCD_EP_ISR_Handler+0x608>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	4413      	add	r3, r2
 80099d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	011a      	lsls	r2, r3, #4
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	4413      	add	r3, r2
 80099e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099e6:	623b      	str	r3, [r7, #32]
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	801a      	strh	r2, [r3, #0]
 8009a0c:	e061      	b.n	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d15d      	bne.n	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	4413      	add	r3, r2
 8009a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	011a      	lsls	r2, r3, #4
 8009a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a36:	4413      	add	r3, r2
 8009a38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	2200      	movs	r2, #0
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	e045      	b.n	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d126      	bne.n	8009aa2 <PCD_EP_ISR_Handler+0x69c>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a68:	4413      	add	r3, r2
 8009a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	011a      	lsls	r2, r3, #4
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	4413      	add	r3, r2
 8009a76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	801a      	strh	r2, [r3, #0]
 8009aa0:	e017      	b.n	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
 8009aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d113      	bne.n	8009ad2 <PCD_EP_ISR_Handler+0x6cc>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab8:	4413      	add	r3, r2
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	011a      	lsls	r2, r3, #4
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	2200      	movs	r2, #0
 8009ad0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f00a fb22 	bl	8014122 <HAL_PCD_DataInStageCallback>
 8009ade:	e053      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d146      	bne.n	8009b7a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	4413      	add	r3, r2
 8009b00:	3302      	adds	r3, #2
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	6812      	ldr	r2, [r2, #0]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b14:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b1a:	699a      	ldr	r2, [r3, #24]
 8009b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d907      	bls.n	8009b34 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8009b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b26:	699a      	ldr	r2, [r3, #24]
 8009b28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b2c:	1ad2      	subs	r2, r2, r3
 8009b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b30:	619a      	str	r2, [r3, #24]
 8009b32:	e002      	b.n	8009b3a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8009b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b36:	2200      	movs	r2, #0
 8009b38:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f00a faea 	bl	8014122 <HAL_PCD_DataInStageCallback>
 8009b4e:	e01b      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b52:	695a      	ldr	r2, [r3, #20]
 8009b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b58:	441a      	add	r2, r3
 8009b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b60:	69da      	ldr	r2, [r3, #28]
 8009b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b66:	441a      	add	r2, r3
 8009b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b6a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b72:	4618      	mov	r0, r3
 8009b74:	f003 fd08 	bl	800d588 <USB_EPStartXfer>
 8009b78:	e006      	b.n	8009b88 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009b7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f91b 	bl	8009dbe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	b21b      	sxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f6ff ac3b 	blt.w	8009410 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3758      	adds	r7, #88	@ 0x58
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009bb2:	88fb      	ldrh	r3, [r7, #6]
 8009bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d07e      	beq.n	8009cba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	00db      	lsls	r3, r3, #3
 8009bce:	4413      	add	r3, r2
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	6812      	ldr	r2, [r2, #0]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009be4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	699a      	ldr	r2, [r3, #24]
 8009bea:	8b7b      	ldrh	r3, [r7, #26]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d306      	bcc.n	8009bfe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	8b7b      	ldrh	r3, [r7, #26]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	619a      	str	r2, [r3, #24]
 8009bfc:	e002      	b.n	8009c04 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d123      	bne.n	8009c54 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c26:	833b      	strh	r3, [r7, #24]
 8009c28:	8b3b      	ldrh	r3, [r7, #24]
 8009c2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009c2e:	833b      	strh	r3, [r7, #24]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	461a      	mov	r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	441a      	add	r2, r3
 8009c3e:	8b3b      	ldrh	r3, [r7, #24]
 8009c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01f      	beq.n	8009c9e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c78:	82fb      	strh	r3, [r7, #22]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	441a      	add	r2, r3
 8009c88:	8afb      	ldrh	r3, [r7, #22]
 8009c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009c9e:	8b7b      	ldrh	r3, [r7, #26]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8087 	beq.w	8009db4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6959      	ldr	r1, [r3, #20]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	891a      	ldrh	r2, [r3, #8]
 8009cb2:	8b7b      	ldrh	r3, [r7, #26]
 8009cb4:	f005 f99d 	bl	800eff2 <USB_ReadPMA>
 8009cb8:	e07c      	b.n	8009db4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4413      	add	r3, r2
 8009cce:	3306      	adds	r3, #6
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	6812      	ldr	r2, [r2, #0]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ce2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	8b7b      	ldrh	r3, [r7, #26]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d306      	bcc.n	8009cfc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	8b7b      	ldrh	r3, [r7, #26]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	619a      	str	r2, [r3, #24]
 8009cfa:	e002      	b.n	8009d02 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d123      	bne.n	8009d52 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d24:	83fb      	strh	r3, [r7, #30]
 8009d26:	8bfb      	ldrh	r3, [r7, #30]
 8009d28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d2c:	83fb      	strh	r3, [r7, #30]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	441a      	add	r2, r3
 8009d3c:	8bfb      	ldrh	r3, [r7, #30]
 8009d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d11f      	bne.n	8009d9c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d76:	83bb      	strh	r3, [r7, #28]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	441a      	add	r2, r3
 8009d86:	8bbb      	ldrh	r3, [r7, #28]
 8009d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009d9c:	8b7b      	ldrh	r3, [r7, #26]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	6959      	ldr	r1, [r3, #20]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	895a      	ldrh	r2, [r3, #10]
 8009dae:	8b7b      	ldrh	r3, [r7, #26]
 8009db0:	f005 f91f 	bl	800eff2 <USB_ReadPMA>
    }
  }

  return count;
 8009db4:	8b7b      	ldrh	r3, [r7, #26]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b0a4      	sub	sp, #144	@ 0x90
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 81dd 	beq.w	800a192 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	461a      	mov	r2, r3
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	3302      	adds	r3, #2
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d907      	bls.n	8009e20 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	619a      	str	r2, [r3, #24]
 8009e1e:	e002      	b.n	8009e26 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2200      	movs	r2, #0
 8009e24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 80b9 	bne.w	8009fa2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d126      	bne.n	8009e86 <HAL_PCD_EP_DB_Transmit+0xc8>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	4413      	add	r3, r2
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	011a      	lsls	r2, r3, #4
 8009e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e58:	4413      	add	r3, r2
 8009e5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	801a      	strh	r2, [r3, #0]
 8009e84:	e01a      	b.n	8009ebc <HAL_PCD_EP_DB_Transmit+0xfe>
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d116      	bne.n	8009ebc <HAL_PCD_EP_DB_Transmit+0xfe>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea2:	4413      	add	r3, r2
 8009ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	011a      	lsls	r2, r3, #4
 8009eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eae:	4413      	add	r3, r2
 8009eb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2200      	movs	r2, #0
 8009eba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d126      	bne.n	8009f18 <HAL_PCD_EP_DB_Transmit+0x15a>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	61fb      	str	r3, [r7, #28]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	4413      	add	r3, r2
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	011a      	lsls	r2, r3, #4
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	4413      	add	r3, r2
 8009eec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e017      	b.n	8009f48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d113      	bne.n	8009f48 <HAL_PCD_EP_DB_Transmit+0x18a>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	4413      	add	r3, r2
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	011a      	lsls	r2, r3, #4
 8009f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f40:	623b      	str	r3, [r7, #32]
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	2200      	movs	r2, #0
 8009f46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f00a f8e7 	bl	8014122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f54:	88fb      	ldrh	r3, [r7, #6]
 8009f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 82fc 	beq.w	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7a:	82fb      	strh	r3, [r7, #22]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	441a      	add	r2, r3
 8009f8a:	8afb      	ldrh	r3, [r7, #22]
 8009f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	8013      	strh	r3, [r2, #0]
 8009fa0:	e2da      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009fa2:	88fb      	ldrh	r3, [r7, #6]
 8009fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d021      	beq.n	8009ff0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	441a      	add	r2, r3
 8009fd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	f040 82ae 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	695a      	ldr	r2, [r3, #20]
 800a000:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a004:	441a      	add	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	69da      	ldr	r2, [r3, #28]
 800a00e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a012:	441a      	add	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6a1a      	ldr	r2, [r3, #32]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	429a      	cmp	r2, r3
 800a022:	d30b      	bcc.n	800a03c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6a1a      	ldr	r2, [r3, #32]
 800a030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a034:	1ad2      	subs	r2, r2, r3
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	621a      	str	r2, [r3, #32]
 800a03a:	e017      	b.n	800a06c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d108      	bne.n	800a056 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800a044:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a054:	e00a      	b.n	800a06c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d165      	bne.n	800a140 <HAL_PCD_EP_DB_Transmit+0x382>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a082:	b29b      	uxth	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a088:	4413      	add	r3, r2
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	011a      	lsls	r2, r3, #4
 800a092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a094:	4413      	add	r3, r2
 800a096:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a09a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0b2:	d91d      	bls.n	800a0f0 <HAL_PCD_EP_DB_Transmit+0x332>
 800a0b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0c0:	f003 031f 	and.w	r3, r3, #31
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <HAL_PCD_EP_DB_Transmit+0x310>
 800a0c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	029b      	lsls	r3, r3, #10
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	801a      	strh	r2, [r3, #0]
 800a0ee:	e044      	b.n	800a17a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <HAL_PCD_EP_DB_Transmit+0x350>
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a106:	b29a      	uxth	r2, r3
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	801a      	strh	r2, [r3, #0]
 800a10c:	e035      	b.n	800a17a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_PCD_EP_DB_Transmit+0x36a>
 800a122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a124:	3301      	adds	r3, #1
 800a126:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a130:	b29b      	uxth	r3, r3
 800a132:	029b      	lsls	r3, r3, #10
 800a134:	b29b      	uxth	r3, r3
 800a136:	4313      	orrs	r3, r2
 800a138:	b29a      	uxth	r2, r3
 800a13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13c:	801a      	strh	r2, [r3, #0]
 800a13e:	e01c      	b.n	800a17a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	785b      	ldrb	r3, [r3, #1]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d118      	bne.n	800a17a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a156:	b29b      	uxth	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a15c:	4413      	add	r3, r2
 800a15e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	011a      	lsls	r2, r3, #4
 800a166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a168:	4413      	add	r3, r2
 800a16a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a16e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a174:	b29a      	uxth	r2, r3
 800a176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a178:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6959      	ldr	r1, [r3, #20]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	891a      	ldrh	r2, [r3, #8]
 800a186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f004 feeb 	bl	800ef66 <USB_WritePMA>
 800a190:	e1e2      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	3306      	adds	r3, #6
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d307      	bcc.n	800a1da <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	619a      	str	r2, [r3, #24]
 800a1d8:	e002      	b.n	800a1e0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f040 80c0 	bne.w	800a36a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d126      	bne.n	800a240 <HAL_PCD_EP_DB_Transmit+0x482>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a206:	4413      	add	r3, r2
 800a208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	011a      	lsls	r2, r3, #4
 800a210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a212:	4413      	add	r3, r2
 800a214:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a218:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a224:	b29a      	uxth	r2, r3
 800a226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a228:	801a      	strh	r2, [r3, #0]
 800a22a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a238:	b29a      	uxth	r2, r3
 800a23a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a23c:	801a      	strh	r2, [r3, #0]
 800a23e:	e01a      	b.n	800a276 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d116      	bne.n	800a276 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a256:	b29b      	uxth	r3, r3
 800a258:	461a      	mov	r2, r3
 800a25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a25c:	4413      	add	r3, r2
 800a25e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	011a      	lsls	r2, r3, #4
 800a266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a268:	4413      	add	r3, r2
 800a26a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a26e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a272:	2200      	movs	r2, #0
 800a274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d12b      	bne.n	800a2dc <HAL_PCD_EP_DB_Transmit+0x51e>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a292:	b29b      	uxth	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a298:	4413      	add	r3, r2
 800a29a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	011a      	lsls	r2, r3, #4
 800a2a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a2aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e017      	b.n	800a30c <HAL_PCD_EP_DB_Transmit+0x54e>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d113      	bne.n	800a30c <HAL_PCD_EP_DB_Transmit+0x54e>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2f2:	4413      	add	r3, r2
 800a2f4:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	011a      	lsls	r2, r3, #4
 800a2fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2fe:	4413      	add	r3, r2
 800a300:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a304:	673b      	str	r3, [r7, #112]	@ 0x70
 800a306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a308:	2200      	movs	r2, #0
 800a30a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	4619      	mov	r1, r3
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f009 ff05 	bl	8014122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 811a 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	441a      	add	r2, r3
 800a350:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800a354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a35c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a364:	b29b      	uxth	r3, r3
 800a366:	8013      	strh	r3, [r2, #0]
 800a368:	e0f6      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d121      	bne.n	800a3b8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a38e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	441a      	add	r2, r3
 800a3a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a3a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	f040 80ca 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	695a      	ldr	r2, [r3, #20]
 800a3c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a3da:	441a      	add	r2, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d30b      	bcc.n	800a404 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3fc:	1ad2      	subs	r2, r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	621a      	str	r2, [r3, #32]
 800a402:	e017      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d108      	bne.n	800a41e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a40c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a41c:	e00a      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	657b      	str	r3, [r7, #84]	@ 0x54
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d165      	bne.n	800a50e <HAL_PCD_EP_DB_Transmit+0x750>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a450:	b29b      	uxth	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a456:	4413      	add	r3, r2
 800a458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	011a      	lsls	r2, r3, #4
 800a460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a462:	4413      	add	r3, r2
 800a464:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a46a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a474:	b29a      	uxth	r2, r3
 800a476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a47e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a480:	d91d      	bls.n	800a4be <HAL_PCD_EP_DB_Transmit+0x700>
 800a482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a486:	095b      	lsrs	r3, r3, #5
 800a488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <HAL_PCD_EP_DB_Transmit+0x6de>
 800a496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a498:	3b01      	subs	r3, #1
 800a49a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a49c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	029b      	lsls	r3, r3, #10
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	e041      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x784>
 800a4be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_PCD_EP_DB_Transmit+0x71e>
 800a4c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	e032      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x784>
 800a4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_PCD_EP_DB_Transmit+0x738>
 800a4f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	029b      	lsls	r3, r3, #10
 800a502:	b29b      	uxth	r3, r3
 800a504:	4313      	orrs	r3, r2
 800a506:	b29a      	uxth	r2, r3
 800a508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a50a:	801a      	strh	r2, [r3, #0]
 800a50c:	e019      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x784>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d115      	bne.n	800a542 <HAL_PCD_EP_DB_Transmit+0x784>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51e:	b29b      	uxth	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a524:	4413      	add	r3, r2
 800a526:	657b      	str	r3, [r7, #84]	@ 0x54
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	011a      	lsls	r2, r3, #4
 800a52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a530:	4413      	add	r3, r2
 800a532:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a536:	653b      	str	r3, [r7, #80]	@ 0x50
 800a538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a540:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6959      	ldr	r1, [r3, #20]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	895a      	ldrh	r2, [r3, #10]
 800a54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a552:	b29b      	uxth	r3, r3
 800a554:	f004 fd07 	bl	800ef66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a56e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a572:	82bb      	strh	r3, [r7, #20]
 800a574:	8abb      	ldrh	r3, [r7, #20]
 800a576:	f083 0310 	eor.w	r3, r3, #16
 800a57a:	82bb      	strh	r3, [r7, #20]
 800a57c:	8abb      	ldrh	r3, [r7, #20]
 800a57e:	f083 0320 	eor.w	r3, r3, #32
 800a582:	82bb      	strh	r3, [r7, #20]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	8abb      	ldrh	r3, [r7, #20]
 800a594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3790      	adds	r7, #144	@ 0x90
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	607b      	str	r3, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	817b      	strh	r3, [r7, #10]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a5c4:	897b      	ldrh	r3, [r7, #10]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5d0:	897b      	ldrh	r3, [r7, #10]
 800a5d2:	f003 0207 	and.w	r2, r3, #7
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	3310      	adds	r3, #16
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e009      	b.n	800a5fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a5e8:	897a      	ldrh	r2, [r7, #10]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a5fc:	893b      	ldrh	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d107      	bne.n	800a612 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2200      	movs	r2, #0
 800a606:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	80da      	strh	r2, [r3, #6]
 800a610:	e00b      	b.n	800a62a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2201      	movs	r2, #1
 800a616:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	b29a      	uxth	r2, r3
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	bc80      	pop	{r7}
 800a634:	4770      	bx	lr
	...

0800a638 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800a63c:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a648:	f000 f808 	bl	800a65c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a64c:	4b02      	ldr	r3, [pc, #8]	@ (800a658 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a64e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a652:	615a      	str	r2, [r3, #20]
  }
}
 800a654:	bf00      	nop
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40010400 	.word	0x40010400

0800a65c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800a660:	bf00      	nop
 800a662:	46bd      	mov	sp, r7
 800a664:	bc80      	pop	{r7}
 800a666:	4770      	bx	lr

0800a668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e272      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8087 	beq.w	800a796 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a688:	4b92      	ldr	r3, [pc, #584]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f003 030c 	and.w	r3, r3, #12
 800a690:	2b04      	cmp	r3, #4
 800a692:	d00c      	beq.n	800a6ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a694:	4b8f      	ldr	r3, [pc, #572]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	f003 030c 	and.w	r3, r3, #12
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d112      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x5e>
 800a6a0:	4b8c      	ldr	r3, [pc, #560]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ac:	d10b      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ae:	4b89      	ldr	r3, [pc, #548]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d06c      	beq.n	800a794 <HAL_RCC_OscConfig+0x12c>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d168      	bne.n	800a794 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e24c      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ce:	d106      	bne.n	800a6de <HAL_RCC_OscConfig+0x76>
 800a6d0:	4b80      	ldr	r3, [pc, #512]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a7f      	ldr	r2, [pc, #508]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	e02e      	b.n	800a73c <HAL_RCC_OscConfig+0xd4>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <HAL_RCC_OscConfig+0x98>
 800a6e6:	4b7b      	ldr	r3, [pc, #492]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a7a      	ldr	r2, [pc, #488]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	4b78      	ldr	r3, [pc, #480]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a77      	ldr	r2, [pc, #476]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a6f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	e01d      	b.n	800a73c <HAL_RCC_OscConfig+0xd4>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a708:	d10c      	bne.n	800a724 <HAL_RCC_OscConfig+0xbc>
 800a70a:	4b72      	ldr	r3, [pc, #456]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a71      	ldr	r2, [pc, #452]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	4b6f      	ldr	r3, [pc, #444]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a6e      	ldr	r2, [pc, #440]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a71c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e00b      	b.n	800a73c <HAL_RCC_OscConfig+0xd4>
 800a724:	4b6b      	ldr	r3, [pc, #428]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a6a      	ldr	r2, [pc, #424]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a72a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	4b68      	ldr	r3, [pc, #416]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a67      	ldr	r2, [pc, #412]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a73a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d013      	beq.n	800a76c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a744:	f7fa fcc6 	bl	80050d4 <HAL_GetTick>
 800a748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a74c:	f7fa fcc2 	bl	80050d4 <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b64      	cmp	r3, #100	@ 0x64
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e200      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a75e:	4b5d      	ldr	r3, [pc, #372]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f0      	beq.n	800a74c <HAL_RCC_OscConfig+0xe4>
 800a76a:	e014      	b.n	800a796 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a76c:	f7fa fcb2 	bl	80050d4 <HAL_GetTick>
 800a770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a774:	f7fa fcae 	bl	80050d4 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	@ 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e1ec      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a786:	4b53      	ldr	r3, [pc, #332]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f0      	bne.n	800a774 <HAL_RCC_OscConfig+0x10c>
 800a792:	e000      	b.n	800a796 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d063      	beq.n	800a86a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7a2:	4b4c      	ldr	r3, [pc, #304]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f003 030c 	and.w	r3, r3, #12
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a7ae:	4b49      	ldr	r3, [pc, #292]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f003 030c 	and.w	r3, r3, #12
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d11c      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x18c>
 800a7ba:	4b46      	ldr	r3, [pc, #280]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d116      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7c6:	4b43      	ldr	r3, [pc, #268]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <HAL_RCC_OscConfig+0x176>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d001      	beq.n	800a7de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e1c0      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7de:	4b3d      	ldr	r3, [pc, #244]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4939      	ldr	r1, [pc, #228]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7f2:	e03a      	b.n	800a86a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d020      	beq.n	800a83e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7fc:	4b36      	ldr	r3, [pc, #216]	@ (800a8d8 <HAL_RCC_OscConfig+0x270>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a802:	f7fa fc67 	bl	80050d4 <HAL_GetTick>
 800a806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a808:	e008      	b.n	800a81c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a80a:	f7fa fc63 	bl	80050d4 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d901      	bls.n	800a81c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e1a1      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a81c:	4b2d      	ldr	r3, [pc, #180]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a828:	4b2a      	ldr	r3, [pc, #168]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	4927      	ldr	r1, [pc, #156]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	600b      	str	r3, [r1, #0]
 800a83c:	e015      	b.n	800a86a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a83e:	4b26      	ldr	r3, [pc, #152]	@ (800a8d8 <HAL_RCC_OscConfig+0x270>)
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a844:	f7fa fc46 	bl	80050d4 <HAL_GetTick>
 800a848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a84a:	e008      	b.n	800a85e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a84c:	f7fa fc42 	bl	80050d4 <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b02      	cmp	r3, #2
 800a858:	d901      	bls.n	800a85e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e180      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a85e:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1f0      	bne.n	800a84c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b00      	cmp	r3, #0
 800a874:	d03a      	beq.n	800a8ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d019      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a87e:	4b17      	ldr	r3, [pc, #92]	@ (800a8dc <HAL_RCC_OscConfig+0x274>)
 800a880:	2201      	movs	r2, #1
 800a882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a884:	f7fa fc26 	bl	80050d4 <HAL_GetTick>
 800a888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a88c:	f7fa fc22 	bl	80050d4 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e160      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a89e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <HAL_RCC_OscConfig+0x26c>)
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0f0      	beq.n	800a88c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	f000 faba 	bl	800ae24 <RCC_Delay>
 800a8b0:	e01c      	b.n	800a8ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8dc <HAL_RCC_OscConfig+0x274>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8b8:	f7fa fc0c 	bl	80050d4 <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8be:	e00f      	b.n	800a8e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8c0:	f7fa fc08 	bl	80050d4 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d908      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e146      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
 800a8d2:	bf00      	nop
 800a8d4:	40021000 	.word	0x40021000
 800a8d8:	42420000 	.word	0x42420000
 800a8dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8e0:	4b92      	ldr	r3, [pc, #584]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e9      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 80a6 	beq.w	800aa46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8fe:	4b8b      	ldr	r3, [pc, #556]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10d      	bne.n	800a926 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a90a:	4b88      	ldr	r3, [pc, #544]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	4a87      	ldr	r2, [pc, #540]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a914:	61d3      	str	r3, [r2, #28]
 800a916:	4b85      	ldr	r3, [pc, #532]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a91e:	60bb      	str	r3, [r7, #8]
 800a920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a922:	2301      	movs	r3, #1
 800a924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a926:	4b82      	ldr	r3, [pc, #520]	@ (800ab30 <HAL_RCC_OscConfig+0x4c8>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d118      	bne.n	800a964 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a932:	4b7f      	ldr	r3, [pc, #508]	@ (800ab30 <HAL_RCC_OscConfig+0x4c8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a7e      	ldr	r2, [pc, #504]	@ (800ab30 <HAL_RCC_OscConfig+0x4c8>)
 800a938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a93c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a93e:	f7fa fbc9 	bl	80050d4 <HAL_GetTick>
 800a942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a946:	f7fa fbc5 	bl	80050d4 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b64      	cmp	r3, #100	@ 0x64
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e103      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a958:	4b75      	ldr	r3, [pc, #468]	@ (800ab30 <HAL_RCC_OscConfig+0x4c8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a960:	2b00      	cmp	r3, #0
 800a962:	d0f0      	beq.n	800a946 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d106      	bne.n	800a97a <HAL_RCC_OscConfig+0x312>
 800a96c:	4b6f      	ldr	r3, [pc, #444]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	4a6e      	ldr	r2, [pc, #440]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a972:	f043 0301 	orr.w	r3, r3, #1
 800a976:	6213      	str	r3, [r2, #32]
 800a978:	e02d      	b.n	800a9d6 <HAL_RCC_OscConfig+0x36e>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10c      	bne.n	800a99c <HAL_RCC_OscConfig+0x334>
 800a982:	4b6a      	ldr	r3, [pc, #424]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	4a69      	ldr	r2, [pc, #420]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a988:	f023 0301 	bic.w	r3, r3, #1
 800a98c:	6213      	str	r3, [r2, #32]
 800a98e:	4b67      	ldr	r3, [pc, #412]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	4a66      	ldr	r2, [pc, #408]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a994:	f023 0304 	bic.w	r3, r3, #4
 800a998:	6213      	str	r3, [r2, #32]
 800a99a:	e01c      	b.n	800a9d6 <HAL_RCC_OscConfig+0x36e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d10c      	bne.n	800a9be <HAL_RCC_OscConfig+0x356>
 800a9a4:	4b61      	ldr	r3, [pc, #388]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	4a60      	ldr	r2, [pc, #384]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9aa:	f043 0304 	orr.w	r3, r3, #4
 800a9ae:	6213      	str	r3, [r2, #32]
 800a9b0:	4b5e      	ldr	r3, [pc, #376]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	4a5d      	ldr	r2, [pc, #372]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	6213      	str	r3, [r2, #32]
 800a9bc:	e00b      	b.n	800a9d6 <HAL_RCC_OscConfig+0x36e>
 800a9be:	4b5b      	ldr	r3, [pc, #364]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	4a5a      	ldr	r2, [pc, #360]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9c4:	f023 0301 	bic.w	r3, r3, #1
 800a9c8:	6213      	str	r3, [r2, #32]
 800a9ca:	4b58      	ldr	r3, [pc, #352]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	4a57      	ldr	r2, [pc, #348]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9d0:	f023 0304 	bic.w	r3, r3, #4
 800a9d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d015      	beq.n	800aa0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9de:	f7fa fb79 	bl	80050d4 <HAL_GetTick>
 800a9e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9e4:	e00a      	b.n	800a9fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9e6:	f7fa fb75 	bl	80050d4 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d901      	bls.n	800a9fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e0b1      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9fc:	4b4b      	ldr	r3, [pc, #300]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0ee      	beq.n	800a9e6 <HAL_RCC_OscConfig+0x37e>
 800aa08:	e014      	b.n	800aa34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa0a:	f7fa fb63 	bl	80050d4 <HAL_GetTick>
 800aa0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa10:	e00a      	b.n	800aa28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa12:	f7fa fb5f 	bl	80050d4 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d901      	bls.n	800aa28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e09b      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa28:	4b40      	ldr	r3, [pc, #256]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1ee      	bne.n	800aa12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d105      	bne.n	800aa46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa3a:	4b3c      	ldr	r3, [pc, #240]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 8087 	beq.w	800ab5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa50:	4b36      	ldr	r3, [pc, #216]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f003 030c 	and.w	r3, r3, #12
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d061      	beq.n	800ab20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d146      	bne.n	800aaf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa64:	4b33      	ldr	r3, [pc, #204]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa6a:	f7fa fb33 	bl	80050d4 <HAL_GetTick>
 800aa6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa70:	e008      	b.n	800aa84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa72:	f7fa fb2f 	bl	80050d4 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d901      	bls.n	800aa84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e06d      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa84:	4b29      	ldr	r3, [pc, #164]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1f0      	bne.n	800aa72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa98:	d108      	bne.n	800aaac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aa9a:	4b24      	ldr	r3, [pc, #144]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	4921      	ldr	r1, [pc, #132]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aaac:	4b1f      	ldr	r3, [pc, #124]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a19      	ldr	r1, [r3, #32]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabc:	430b      	orrs	r3, r1
 800aabe:	491b      	ldr	r1, [pc, #108]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aac4:	4b1b      	ldr	r3, [pc, #108]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaca:	f7fa fb03 	bl	80050d4 <HAL_GetTick>
 800aace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aad0:	e008      	b.n	800aae4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aad2:	f7fa faff 	bl	80050d4 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d901      	bls.n	800aae4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e03d      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aae4:	4b11      	ldr	r3, [pc, #68]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0f0      	beq.n	800aad2 <HAL_RCC_OscConfig+0x46a>
 800aaf0:	e035      	b.n	800ab5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf2:	4b10      	ldr	r3, [pc, #64]	@ (800ab34 <HAL_RCC_OscConfig+0x4cc>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf8:	f7fa faec 	bl	80050d4 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab00:	f7fa fae8 	bl	80050d4 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e026      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab12:	4b06      	ldr	r3, [pc, #24]	@ (800ab2c <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1f0      	bne.n	800ab00 <HAL_RCC_OscConfig+0x498>
 800ab1e:	e01e      	b.n	800ab5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d107      	bne.n	800ab38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e019      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
 800ab2c:	40021000 	.word	0x40021000
 800ab30:	40007000 	.word	0x40007000
 800ab34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ab38:	4b0b      	ldr	r3, [pc, #44]	@ (800ab68 <HAL_RCC_OscConfig+0x500>)
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d106      	bne.n	800ab5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d001      	beq.n	800ab5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e000      	b.n	800ab60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	40021000 	.word	0x40021000

0800ab6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e0d0      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab80:	4b6a      	ldr	r3, [pc, #424]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d910      	bls.n	800abb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab8e:	4b67      	ldr	r3, [pc, #412]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f023 0207 	bic.w	r2, r3, #7
 800ab96:	4965      	ldr	r1, [pc, #404]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9e:	4b63      	ldr	r3, [pc, #396]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d001      	beq.n	800abb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e0b8      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0302 	and.w	r3, r3, #2
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d020      	beq.n	800abfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0304 	and.w	r3, r3, #4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abc8:	4b59      	ldr	r3, [pc, #356]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	4a58      	ldr	r2, [pc, #352]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800abd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abe0:	4b53      	ldr	r3, [pc, #332]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	4a52      	ldr	r2, [pc, #328]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abe6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800abea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abec:	4b50      	ldr	r3, [pc, #320]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	494d      	ldr	r1, [pc, #308]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d040      	beq.n	800ac8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d107      	bne.n	800ac22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac12:	4b47      	ldr	r3, [pc, #284]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d115      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e07f      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d107      	bne.n	800ac3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac2a:	4b41      	ldr	r3, [pc, #260]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d109      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e073      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac3a:	4b3d      	ldr	r3, [pc, #244]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e06b      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac4a:	4b39      	ldr	r3, [pc, #228]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f023 0203 	bic.w	r2, r3, #3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	4936      	ldr	r1, [pc, #216]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac5c:	f7fa fa3a 	bl	80050d4 <HAL_GetTick>
 800ac60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac62:	e00a      	b.n	800ac7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac64:	f7fa fa36 	bl	80050d4 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e053      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f003 020c 	and.w	r2, r3, #12
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d1eb      	bne.n	800ac64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac8c:	4b27      	ldr	r3, [pc, #156]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d210      	bcs.n	800acbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9a:	4b24      	ldr	r3, [pc, #144]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f023 0207 	bic.w	r2, r3, #7
 800aca2:	4922      	ldr	r1, [pc, #136]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acaa:	4b20      	ldr	r3, [pc, #128]	@ (800ad2c <HAL_RCC_ClockConfig+0x1c0>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d001      	beq.n	800acbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e032      	b.n	800ad22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d008      	beq.n	800acda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acc8:	4b19      	ldr	r3, [pc, #100]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	4916      	ldr	r1, [pc, #88]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ace6:	4b12      	ldr	r3, [pc, #72]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	490e      	ldr	r1, [pc, #56]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800acfa:	f000 f821 	bl	800ad40 <HAL_RCC_GetSysClockFreq>
 800acfe:	4602      	mov	r2, r0
 800ad00:	4b0b      	ldr	r3, [pc, #44]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c4>)
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	091b      	lsrs	r3, r3, #4
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	490a      	ldr	r1, [pc, #40]	@ (800ad34 <HAL_RCC_ClockConfig+0x1c8>)
 800ad0c:	5ccb      	ldrb	r3, [r1, r3]
 800ad0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad12:	4a09      	ldr	r2, [pc, #36]	@ (800ad38 <HAL_RCC_ClockConfig+0x1cc>)
 800ad14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad16:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <HAL_RCC_ClockConfig+0x1d0>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fa f998 	bl	8005050 <HAL_InitTick>

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40022000 	.word	0x40022000
 800ad30:	40021000 	.word	0x40021000
 800ad34:	08016018 	.word	0x08016018
 800ad38:	20000018 	.word	0x20000018
 800ad3c:	2000001c 	.word	0x2000001c

0800ad40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	2300      	movs	r3, #0
 800ad54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ad5a:	4b1e      	ldr	r3, [pc, #120]	@ (800add4 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f003 030c 	and.w	r3, r3, #12
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d002      	beq.n	800ad70 <HAL_RCC_GetSysClockFreq+0x30>
 800ad6a:	2b08      	cmp	r3, #8
 800ad6c:	d003      	beq.n	800ad76 <HAL_RCC_GetSysClockFreq+0x36>
 800ad6e:	e027      	b.n	800adc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ad70:	4b19      	ldr	r3, [pc, #100]	@ (800add8 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad72:	613b      	str	r3, [r7, #16]
      break;
 800ad74:	e027      	b.n	800adc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	0c9b      	lsrs	r3, r3, #18
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	4a17      	ldr	r2, [pc, #92]	@ (800addc <HAL_RCC_GetSysClockFreq+0x9c>)
 800ad80:	5cd3      	ldrb	r3, [r2, r3]
 800ad82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d010      	beq.n	800adb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ad8e:	4b11      	ldr	r3, [pc, #68]	@ (800add4 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	0c5b      	lsrs	r3, r3, #17
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	4a11      	ldr	r2, [pc, #68]	@ (800ade0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ad9a:	5cd3      	ldrb	r3, [r2, r3]
 800ad9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a0d      	ldr	r2, [pc, #52]	@ (800add8 <HAL_RCC_GetSysClockFreq+0x98>)
 800ada2:	fb03 f202 	mul.w	r2, r3, r2
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	e004      	b.n	800adba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a0c      	ldr	r2, [pc, #48]	@ (800ade4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
 800adb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	613b      	str	r3, [r7, #16]
      break;
 800adbe:	e002      	b.n	800adc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800adc0:	4b05      	ldr	r3, [pc, #20]	@ (800add8 <HAL_RCC_GetSysClockFreq+0x98>)
 800adc2:	613b      	str	r3, [r7, #16]
      break;
 800adc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adc6:	693b      	ldr	r3, [r7, #16]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	371c      	adds	r7, #28
 800adcc:	46bd      	mov	sp, r7
 800adce:	bc80      	pop	{r7}
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	40021000 	.word	0x40021000
 800add8:	007a1200 	.word	0x007a1200
 800addc:	08017510 	.word	0x08017510
 800ade0:	08017520 	.word	0x08017520
 800ade4:	003d0900 	.word	0x003d0900

0800ade8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800adec:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <HAL_RCC_GetHCLKFreq+0x10>)
 800adee:	681b      	ldr	r3, [r3, #0]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr
 800adf8:	20000018 	.word	0x20000018

0800adfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae00:	f7ff fff2 	bl	800ade8 <HAL_RCC_GetHCLKFreq>
 800ae04:	4602      	mov	r2, r0
 800ae06:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	4903      	ldr	r1, [pc, #12]	@ (800ae20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae12:	5ccb      	ldrb	r3, [r1, r3]
 800ae14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40021000 	.word	0x40021000
 800ae20:	08016028 	.word	0x08016028

0800ae24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <RCC_Delay+0x34>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	@ (800ae5c <RCC_Delay+0x38>)
 800ae32:	fba2 2303 	umull	r2, r3, r2, r3
 800ae36:	0a5b      	lsrs	r3, r3, #9
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ae40:	bf00      	nop
  }
  while (Delay --);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	1e5a      	subs	r2, r3, #1
 800ae46:	60fa      	str	r2, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f9      	bne.n	800ae40 <RCC_Delay+0x1c>
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr
 800ae58:	20000018 	.word	0x20000018
 800ae5c:	10624dd3 	.word	0x10624dd3

0800ae60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d07d      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae80:	4b4f      	ldr	r3, [pc, #316]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10d      	bne.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae8c:	4b4c      	ldr	r3, [pc, #304]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	4a4b      	ldr	r2, [pc, #300]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae96:	61d3      	str	r3, [r2, #28]
 800ae98:	4b49      	ldr	r3, [pc, #292]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aea4:	2301      	movs	r3, #1
 800aea6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aea8:	4b46      	ldr	r3, [pc, #280]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d118      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aeb4:	4b43      	ldr	r3, [pc, #268]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a42      	ldr	r2, [pc, #264]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aeba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aebe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aec0:	f7fa f908 	bl	80050d4 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aec6:	e008      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aec8:	f7fa f904 	bl	80050d4 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b64      	cmp	r3, #100	@ 0x64
 800aed4:	d901      	bls.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e06d      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aeda:	4b3a      	ldr	r3, [pc, #232]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aee6:	4b36      	ldr	r3, [pc, #216]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aeee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d02e      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	429a      	cmp	r2, r3
 800af02:	d027      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af04:	4b2e      	ldr	r3, [pc, #184]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af06:	6a1b      	ldr	r3, [r3, #32]
 800af08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800af0e:	4b2e      	ldr	r3, [pc, #184]	@ (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800af14:	4b2c      	ldr	r3, [pc, #176]	@ (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800af1a:	4a29      	ldr	r2, [pc, #164]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d014      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af2a:	f7fa f8d3 	bl	80050d4 <HAL_GetTick>
 800af2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af30:	e00a      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af32:	f7fa f8cf 	bl	80050d4 <HAL_GetTick>
 800af36:	4602      	mov	r2, r0
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af40:	4293      	cmp	r3, r2
 800af42:	d901      	bls.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800af44:	2303      	movs	r3, #3
 800af46:	e036      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af48:	4b1d      	ldr	r3, [pc, #116]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0ee      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af54:	4b1a      	ldr	r3, [pc, #104]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	4917      	ldr	r1, [pc, #92]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af62:	4313      	orrs	r3, r2
 800af64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d105      	bne.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af6c:	4b14      	ldr	r3, [pc, #80]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	4a13      	ldr	r2, [pc, #76]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0302 	and.w	r3, r3, #2
 800af80:	2b00      	cmp	r3, #0
 800af82:	d008      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af84:	4b0e      	ldr	r3, [pc, #56]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	490b      	ldr	r1, [pc, #44]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af92:	4313      	orrs	r3, r2
 800af94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0310 	and.w	r3, r3, #16
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800afa2:	4b07      	ldr	r3, [pc, #28]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	4904      	ldr	r1, [pc, #16]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	40021000 	.word	0x40021000
 800afc4:	40007000 	.word	0x40007000
 800afc8:	42420440 	.word	0x42420440

0800afcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e076      	b.n	800b0cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d108      	bne.n	800aff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afee:	d009      	beq.n	800b004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	61da      	str	r2, [r3, #28]
 800aff6:	e005      	b.n	800b004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7f9 fb96 	bl	8004750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b03a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b04c:	431a      	orrs	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b056:	431a      	orrs	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	431a      	orrs	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b074:	431a      	orrs	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b088:	ea42 0103 	orr.w	r1, r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b090:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	430a      	orrs	r2, r1
 800b09a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	0c1a      	lsrs	r2, r3, #16
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f002 0204 	and.w	r2, r2, #4
 800b0aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	69da      	ldr	r2, [r3, #28]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b0ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0e4:	f7f9 fff6 	bl	80050d4 <HAL_GetTick>
 800b0e8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b0ea:	88fb      	ldrh	r3, [r7, #6]
 800b0ec:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d001      	beq.n	800b0fe <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e12a      	b.n	800b354 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <HAL_SPI_Transmit+0x36>
 800b104:	88fb      	ldrh	r3, [r7, #6]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e122      	b.n	800b354 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b114:	2b01      	cmp	r3, #1
 800b116:	d101      	bne.n	800b11c <HAL_SPI_Transmit+0x48>
 800b118:	2302      	movs	r3, #2
 800b11a:	e11b      	b.n	800b354 <HAL_SPI_Transmit+0x280>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2203      	movs	r2, #3
 800b128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	88fa      	ldrh	r2, [r7, #6]
 800b13c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b16a:	d10f      	bne.n	800b18c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b17a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b18a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b196:	2b40      	cmp	r3, #64	@ 0x40
 800b198:	d007      	beq.n	800b1aa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1b2:	d152      	bne.n	800b25a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <HAL_SPI_Transmit+0xee>
 800b1bc:	8b7b      	ldrh	r3, [r7, #26]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d145      	bne.n	800b24e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d2:	1c9a      	adds	r2, r3, #2
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1e6:	e032      	b.n	800b24e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 0302 	and.w	r3, r3, #2
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d112      	bne.n	800b21c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1fa:	881a      	ldrh	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b206:	1c9a      	adds	r2, r3, #2
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b210:	b29b      	uxth	r3, r3
 800b212:	3b01      	subs	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b21a:	e018      	b.n	800b24e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b21c:	f7f9 ff5a 	bl	80050d4 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d803      	bhi.n	800b234 <HAL_SPI_Transmit+0x160>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d102      	bne.n	800b23a <HAL_SPI_Transmit+0x166>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e082      	b.n	800b354 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b252:	b29b      	uxth	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1c7      	bne.n	800b1e8 <HAL_SPI_Transmit+0x114>
 800b258:	e053      	b.n	800b302 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <HAL_SPI_Transmit+0x194>
 800b262:	8b7b      	ldrh	r3, [r7, #26]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d147      	bne.n	800b2f8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	330c      	adds	r3, #12
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	b29a      	uxth	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b28e:	e033      	b.n	800b2f8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d113      	bne.n	800b2c6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	330c      	adds	r3, #12
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b2c4:	e018      	b.n	800b2f8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2c6:	f7f9 ff05 	bl	80050d4 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d803      	bhi.n	800b2de <HAL_SPI_Transmit+0x20a>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d102      	bne.n	800b2e4 <HAL_SPI_Transmit+0x210>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d109      	bne.n	800b2f8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e02d      	b.n	800b354 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1c6      	bne.n	800b290 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 fcc8 	bl	800bc9c <SPI_EndRxTxTransaction>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2220      	movs	r2, #32
 800b316:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b320:	2300      	movs	r3, #0
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b352:	2300      	movs	r3, #0
  }
}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	4613      	mov	r3, r2
 800b36a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b01      	cmp	r3, #1
 800b376:	d001      	beq.n	800b37c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b378:	2302      	movs	r3, #2
 800b37a:	e104      	b.n	800b586 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b384:	d112      	bne.n	800b3ac <HAL_SPI_Receive+0x50>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10e      	bne.n	800b3ac <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2204      	movs	r2, #4
 800b392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b396:	88fa      	ldrh	r2, [r7, #6]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	68b9      	ldr	r1, [r7, #8]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 f8f3 	bl	800b58e <HAL_SPI_TransmitReceive>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	e0ec      	b.n	800b586 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ac:	f7f9 fe92 	bl	80050d4 <HAL_GetTick>
 800b3b0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <HAL_SPI_Receive+0x62>
 800b3b8:	88fb      	ldrh	r3, [r7, #6]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e0e1      	b.n	800b586 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d101      	bne.n	800b3d0 <HAL_SPI_Receive+0x74>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e0da      	b.n	800b586 <HAL_SPI_Receive+0x22a>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2204      	movs	r2, #4
 800b3dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	88fa      	ldrh	r2, [r7, #6]
 800b3f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	88fa      	ldrh	r2, [r7, #6]
 800b3f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b41e:	d10f      	bne.n	800b440 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b42e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b43e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44a:	2b40      	cmp	r3, #64	@ 0x40
 800b44c:	d007      	beq.n	800b45e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b45c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d170      	bne.n	800b548 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b466:	e035      	b.n	800b4d4 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b01      	cmp	r3, #1
 800b474:	d115      	bne.n	800b4a2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f103 020c 	add.w	r2, r3, #12
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b496:	b29b      	uxth	r3, r3
 800b498:	3b01      	subs	r3, #1
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b4a0:	e018      	b.n	800b4d4 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4a2:	f7f9 fe17 	bl	80050d4 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d803      	bhi.n	800b4ba <HAL_SPI_Receive+0x15e>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b8:	d102      	bne.n	800b4c0 <HAL_SPI_Receive+0x164>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d109      	bne.n	800b4d4 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e058      	b.n	800b586 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1c4      	bne.n	800b468 <HAL_SPI_Receive+0x10c>
 800b4de:	e038      	b.n	800b552 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d113      	bne.n	800b516 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f8:	b292      	uxth	r2, r2
 800b4fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b500:	1c9a      	adds	r2, r3, #2
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	3b01      	subs	r3, #1
 800b50e:	b29a      	uxth	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b514:	e018      	b.n	800b548 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b516:	f7f9 fddd 	bl	80050d4 <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d803      	bhi.n	800b52e <HAL_SPI_Receive+0x1d2>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d102      	bne.n	800b534 <HAL_SPI_Receive+0x1d8>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e01e      	b.n	800b586 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1c6      	bne.n	800b4e0 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fb4e 	bl	800bbf8 <SPI_EndRxTransaction>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2220      	movs	r2, #32
 800b566:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b584:	2300      	movs	r3, #0
  }
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b08a      	sub	sp, #40	@ 0x28
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b59c:	2301      	movs	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5a0:	f7f9 fd98 	bl	80050d4 <HAL_GetTick>
 800b5a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b5ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b5b4:	887b      	ldrh	r3, [r7, #2]
 800b5b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b5b8:	7ffb      	ldrb	r3, [r7, #31]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d00c      	beq.n	800b5d8 <HAL_SPI_TransmitReceive+0x4a>
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b5c4:	d106      	bne.n	800b5d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <HAL_SPI_TransmitReceive+0x46>
 800b5ce:	7ffb      	ldrb	r3, [r7, #31]
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d001      	beq.n	800b5d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e17f      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d005      	beq.n	800b5ea <HAL_SPI_TransmitReceive+0x5c>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <HAL_SPI_TransmitReceive+0x5c>
 800b5e4:	887b      	ldrh	r3, [r7, #2]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e174      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_SPI_TransmitReceive+0x6e>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e16d      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d003      	beq.n	800b618 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2205      	movs	r2, #5
 800b614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	887a      	ldrh	r2, [r7, #2]
 800b628:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	887a      	ldrh	r2, [r7, #2]
 800b62e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	887a      	ldrh	r2, [r7, #2]
 800b63a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	887a      	ldrh	r2, [r7, #2]
 800b640:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b658:	2b40      	cmp	r3, #64	@ 0x40
 800b65a:	d007      	beq.n	800b66c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b66a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b674:	d17e      	bne.n	800b774 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <HAL_SPI_TransmitReceive+0xf6>
 800b67e:	8afb      	ldrh	r3, [r7, #22]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d16c      	bne.n	800b75e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b688:	881a      	ldrh	r2, [r3, #0]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b694:	1c9a      	adds	r2, r3, #2
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6a8:	e059      	b.n	800b75e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d11b      	bne.n	800b6f0 <HAL_SPI_TransmitReceive+0x162>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d016      	beq.n	800b6f0 <HAL_SPI_TransmitReceive+0x162>
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d113      	bne.n	800b6f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6cc:	881a      	ldrh	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d8:	1c9a      	adds	r2, r3, #2
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d119      	bne.n	800b732 <HAL_SPI_TransmitReceive+0x1a4>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b702:	b29b      	uxth	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d014      	beq.n	800b732 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b712:	b292      	uxth	r2, r2
 800b714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b71a:	1c9a      	adds	r2, r3, #2
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b724:	b29b      	uxth	r3, r3
 800b726:	3b01      	subs	r3, #1
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b72e:	2301      	movs	r3, #1
 800b730:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b732:	f7f9 fccf 	bl	80050d4 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b73e:	429a      	cmp	r2, r3
 800b740:	d80d      	bhi.n	800b75e <HAL_SPI_TransmitReceive+0x1d0>
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d009      	beq.n	800b75e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e0bc      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1a0      	bne.n	800b6aa <HAL_SPI_TransmitReceive+0x11c>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d19b      	bne.n	800b6aa <HAL_SPI_TransmitReceive+0x11c>
 800b772:	e082      	b.n	800b87a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <HAL_SPI_TransmitReceive+0x1f4>
 800b77c:	8afb      	ldrh	r3, [r7, #22]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d171      	bne.n	800b866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	330c      	adds	r3, #12
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7a8:	e05d      	b.n	800b866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d11c      	bne.n	800b7f2 <HAL_SPI_TransmitReceive+0x264>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d017      	beq.n	800b7f2 <HAL_SPI_TransmitReceive+0x264>
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d114      	bne.n	800b7f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	330c      	adds	r3, #12
 800b7d2:	7812      	ldrb	r2, [r2, #0]
 800b7d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d119      	bne.n	800b834 <HAL_SPI_TransmitReceive+0x2a6>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b804:	b29b      	uxth	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d014      	beq.n	800b834 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68da      	ldr	r2, [r3, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b814:	b2d2      	uxtb	r2, r2
 800b816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b826:	b29b      	uxth	r3, r3
 800b828:	3b01      	subs	r3, #1
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b830:	2301      	movs	r3, #1
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b834:	f7f9 fc4e 	bl	80050d4 <HAL_GetTick>
 800b838:	4602      	mov	r2, r0
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b840:	429a      	cmp	r2, r3
 800b842:	d803      	bhi.n	800b84c <HAL_SPI_TransmitReceive+0x2be>
 800b844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84a:	d102      	bne.n	800b852 <HAL_SPI_TransmitReceive+0x2c4>
 800b84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e038      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d19c      	bne.n	800b7aa <HAL_SPI_TransmitReceive+0x21c>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b874:	b29b      	uxth	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d197      	bne.n	800b7aa <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b87a:	6a3a      	ldr	r2, [r7, #32]
 800b87c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f000 fa0c 	bl	800bc9c <SPI_EndRxTxTransaction>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d008      	beq.n	800b89c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2220      	movs	r2, #32
 800b88e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e01d      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
  }
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3728      	adds	r7, #40	@ 0x28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	099b      	lsrs	r3, r3, #6
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10f      	bne.n	800b924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	099b      	lsrs	r3, r3, #6
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	4798      	blx	r3
    return;
 800b922:	e0be      	b.n	800baa2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	f003 0301 	and.w	r3, r3, #1
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <HAL_SPI_IRQHandler+0x66>
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	09db      	lsrs	r3, r3, #7
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	4798      	blx	r3
    return;
 800b944:	e0ad      	b.n	800baa2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	095b      	lsrs	r3, r3, #5
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_SPI_IRQHandler+0x80>
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	099b      	lsrs	r3, r3, #6
 800b956:	f003 0301 	and.w	r3, r3, #1
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 80a1 	beq.w	800baa2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	095b      	lsrs	r3, r3, #5
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 809a 	beq.w	800baa2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	099b      	lsrs	r3, r3, #6
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	d023      	beq.n	800b9c2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b03      	cmp	r3, #3
 800b984:	d011      	beq.n	800b9aa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b98a:	f043 0204 	orr.w	r2, r3, #4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	e00b      	b.n	800b9c2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	613b      	str	r3, [r7, #16]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	613b      	str	r3, [r7, #16]
 800b9be:	693b      	ldr	r3, [r7, #16]
        return;
 800b9c0:	e06f      	b.n	800baa2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	095b      	lsrs	r3, r3, #5
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d014      	beq.n	800b9f8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d2:	f043 0201 	orr.w	r2, r3, #1
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d04f      	beq.n	800baa0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ba0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d104      	bne.n	800ba2c <HAL_SPI_IRQHandler+0x14c>
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d034      	beq.n	800ba96 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f022 0203 	bic.w	r2, r2, #3
 800ba3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d011      	beq.n	800ba68 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba48:	4a17      	ldr	r2, [pc, #92]	@ (800baa8 <HAL_SPI_IRQHandler+0x1c8>)
 800ba4a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f9 fc7b 	bl	800534c <HAL_DMA_Abort_IT>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d016      	beq.n	800ba9e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba74:	4a0c      	ldr	r2, [pc, #48]	@ (800baa8 <HAL_SPI_IRQHandler+0x1c8>)
 800ba76:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f9 fc65 	bl	800534c <HAL_DMA_Abort_IT>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800ba94:	e003      	b.n	800ba9e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f808 	bl	800baac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ba9c:	e000      	b.n	800baa0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800ba9e:	bf00      	nop
    return;
 800baa0:	bf00      	nop
  }
}
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	0800babf 	.word	0x0800babf

0800baac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	bc80      	pop	{r7}
 800babc:	4770      	bx	lr

0800babe <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff ffe7 	bl	800baac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	4613      	mov	r3, r2
 800baf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800baf8:	f7f9 faec 	bl	80050d4 <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb00:	1a9b      	subs	r3, r3, r2
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	4413      	add	r3, r2
 800bb06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bb08:	f7f9 fae4 	bl	80050d4 <HAL_GetTick>
 800bb0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bb0e:	4b39      	ldr	r3, [pc, #228]	@ (800bbf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	015b      	lsls	r3, r3, #5
 800bb14:	0d1b      	lsrs	r3, r3, #20
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
 800bb1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb1e:	e054      	b.n	800bbca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb26:	d050      	beq.n	800bbca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb28:	f7f9 fad4 	bl	80050d4 <HAL_GetTick>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d902      	bls.n	800bb3e <SPI_WaitFlagStateUntilTimeout+0x56>
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d13d      	bne.n	800bbba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bb4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb56:	d111      	bne.n	800bb7c <SPI_WaitFlagStateUntilTimeout+0x94>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb60:	d004      	beq.n	800bb6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb6a:	d107      	bne.n	800bb7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb84:	d10f      	bne.n	800bba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	e017      	b.n	800bbea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	bf0c      	ite	eq
 800bbda:	2301      	moveq	r3, #1
 800bbdc:	2300      	movne	r3, #0
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d19b      	bne.n	800bb20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3720      	adds	r7, #32
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000018 	.word	0x20000018

0800bbf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc0c:	d111      	bne.n	800bc32 <SPI_EndRxTransaction+0x3a>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc16:	d004      	beq.n	800bc22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc20:	d107      	bne.n	800bc32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc30:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc3a:	d117      	bne.n	800bc6c <SPI_EndRxTransaction+0x74>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc44:	d112      	bne.n	800bc6c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2101      	movs	r1, #1
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7ff ff49 	bl	800bae8 <SPI_WaitFlagStateUntilTimeout>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01a      	beq.n	800bc92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc60:	f043 0220 	orr.w	r2, r3, #32
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e013      	b.n	800bc94 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	2200      	movs	r2, #0
 800bc74:	2180      	movs	r1, #128	@ 0x80
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff ff36 	bl	800bae8 <SPI_WaitFlagStateUntilTimeout>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc86:	f043 0220 	orr.w	r2, r3, #32
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e000      	b.n	800bc94 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	2102      	movs	r1, #2
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff ff18 	bl	800bae8 <SPI_WaitFlagStateUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d007      	beq.n	800bcce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcc2:	f043 0220 	orr.w	r2, r3, #32
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e013      	b.n	800bcf6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2180      	movs	r1, #128	@ 0x80
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff ff05 	bl	800bae8 <SPI_WaitFlagStateUntilTimeout>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce8:	f043 0220 	orr.w	r2, r3, #32
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e000      	b.n	800bcf6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d001      	beq.n	800bd18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e03a      	b.n	800bd8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68da      	ldr	r2, [r3, #12]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0201 	orr.w	r2, r2, #1
 800bd2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a18      	ldr	r2, [pc, #96]	@ (800bd98 <HAL_TIM_Base_Start_IT+0x98>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00e      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x58>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd42:	d009      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x58>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a14      	ldr	r2, [pc, #80]	@ (800bd9c <HAL_TIM_Base_Start_IT+0x9c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d004      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x58>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a13      	ldr	r2, [pc, #76]	@ (800bda0 <HAL_TIM_Base_Start_IT+0xa0>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d111      	bne.n	800bd7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b06      	cmp	r3, #6
 800bd68:	d010      	beq.n	800bd8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f042 0201 	orr.w	r2, r2, #1
 800bd78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd7a:	e007      	b.n	800bd8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0201 	orr.w	r2, r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bc80      	pop	{r7}
 800bd96:	4770      	bx	lr
 800bd98:	40012c00 	.word	0x40012c00
 800bd9c:	40000400 	.word	0x40000400
 800bda0:	40000800 	.word	0x40000800

0800bda4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e041      	b.n	800be3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d106      	bne.n	800bdd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7f8 fd72 	bl	80048b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f000 fb34 	bl	800c450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b086      	sub	sp, #24
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e093      	b.n	800bf7e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7f8 fcc2 	bl	80047f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6812      	ldr	r2, [r2, #0]
 800be82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be86:	f023 0307 	bic.w	r3, r3, #7
 800be8a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3304      	adds	r3, #4
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	f000 fada 	bl	800c450 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bec4:	f023 0303 	bic.w	r3, r3, #3
 800bec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	4313      	orrs	r3, r2
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	4313      	orrs	r3, r2
 800beda:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bee2:	f023 030c 	bic.w	r3, r3, #12
 800bee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800beee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	4313      	orrs	r3, r2
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	011a      	lsls	r2, r3, #4
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	031b      	lsls	r3, r3, #12
 800bf12:	4313      	orrs	r3, r2
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bf20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	011b      	lsls	r3, r3, #4
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3718      	adds	r7, #24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bf96:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bf9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfa6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bfae:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d110      	bne.n	800bfd8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d102      	bne.n	800bfc2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bfbc:	7b7b      	ldrb	r3, [r7, #13]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d001      	beq.n	800bfc6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e069      	b.n	800c09a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2202      	movs	r2, #2
 800bfca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bfd6:	e031      	b.n	800c03c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	d110      	bne.n	800c000 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d102      	bne.n	800bfea <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bfe4:	7b3b      	ldrb	r3, [r7, #12]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d001      	beq.n	800bfee <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e055      	b.n	800c09a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2202      	movs	r2, #2
 800bff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2202      	movs	r2, #2
 800bffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bffe:	e01d      	b.n	800c03c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d108      	bne.n	800c018 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d105      	bne.n	800c018 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c00c:	7b7b      	ldrb	r3, [r7, #13]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d102      	bne.n	800c018 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c012:	7b3b      	ldrb	r3, [r7, #12]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d001      	beq.n	800c01c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e03e      	b.n	800c09a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2202      	movs	r2, #2
 800c038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_TIM_Encoder_Start+0xc4>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b04      	cmp	r3, #4
 800c046:	d008      	beq.n	800c05a <HAL_TIM_Encoder_Start+0xd4>
 800c048:	e00f      	b.n	800c06a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2201      	movs	r2, #1
 800c050:	2100      	movs	r1, #0
 800c052:	4618      	mov	r0, r3
 800c054:	f000 fbf2 	bl	800c83c <TIM_CCxChannelCmd>
      break;
 800c058:	e016      	b.n	800c088 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2201      	movs	r2, #1
 800c060:	2104      	movs	r1, #4
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fbea 	bl	800c83c <TIM_CCxChannelCmd>
      break;
 800c068:	e00e      	b.n	800c088 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2201      	movs	r2, #1
 800c070:	2100      	movs	r1, #0
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fbe2 	bl	800c83c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2201      	movs	r2, #1
 800c07e:	2104      	movs	r1, #4
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fbdb 	bl	800c83c <TIM_CCxChannelCmd>
      break;
 800c086:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f042 0201 	orr.w	r2, r2, #1
 800c096:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f003 0302 	and.w	r3, r3, #2
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d020      	beq.n	800c106 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d01b      	beq.n	800c106 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f06f 0202 	mvn.w	r2, #2
 800c0d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	f003 0303 	and.w	r3, r3, #3
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f994 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c0f2:	e005      	b.n	800c100 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f987 	bl	800c408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f996 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d020      	beq.n	800c152 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f003 0304 	and.w	r3, r3, #4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d01b      	beq.n	800c152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f06f 0204 	mvn.w	r2, #4
 800c122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f96e 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c13e:	e005      	b.n	800c14c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f961 	bl	800c408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f970 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f003 0308 	and.w	r3, r3, #8
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d020      	beq.n	800c19e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f003 0308 	and.w	r3, r3, #8
 800c162:	2b00      	cmp	r3, #0
 800c164:	d01b      	beq.n	800c19e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f06f 0208 	mvn.w	r2, #8
 800c16e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2204      	movs	r2, #4
 800c174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f948 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c18a:	e005      	b.n	800c198 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f93b 	bl	800c408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f94a 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d020      	beq.n	800c1ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f003 0310 	and.w	r3, r3, #16
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d01b      	beq.n	800c1ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f06f 0210 	mvn.w	r2, #16
 800c1ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2208      	movs	r2, #8
 800c1c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d003      	beq.n	800c1d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f922 	bl	800c41a <HAL_TIM_IC_CaptureCallback>
 800c1d6:	e005      	b.n	800c1e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f915 	bl	800c408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f924 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00c      	beq.n	800c20e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d007      	beq.n	800c20e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f06f 0201 	mvn.w	r2, #1
 800c206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7f5 fe29 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00c      	beq.n	800c232 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d007      	beq.n	800c232 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fb90 	bl	800c952 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00c      	beq.n	800c256 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	d007      	beq.n	800c256 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f8f4 	bl	800c43e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00c      	beq.n	800c27a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f06f 0220 	mvn.w	r2, #32
 800c272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fb63 	bl	800c940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c27a:	bf00      	nop
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d101      	bne.n	800c2a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e0ae      	b.n	800c400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b0c      	cmp	r3, #12
 800c2ae:	f200 809f 	bhi.w	800c3f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c2ed 	.word	0x0800c2ed
 800c2bc:	0800c3f1 	.word	0x0800c3f1
 800c2c0:	0800c3f1 	.word	0x0800c3f1
 800c2c4:	0800c3f1 	.word	0x0800c3f1
 800c2c8:	0800c32d 	.word	0x0800c32d
 800c2cc:	0800c3f1 	.word	0x0800c3f1
 800c2d0:	0800c3f1 	.word	0x0800c3f1
 800c2d4:	0800c3f1 	.word	0x0800c3f1
 800c2d8:	0800c36f 	.word	0x0800c36f
 800c2dc:	0800c3f1 	.word	0x0800c3f1
 800c2e0:	0800c3f1 	.word	0x0800c3f1
 800c2e4:	0800c3f1 	.word	0x0800c3f1
 800c2e8:	0800c3af 	.word	0x0800c3af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68b9      	ldr	r1, [r7, #8]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 f91a 	bl	800c52c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	699a      	ldr	r2, [r3, #24]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 0208 	orr.w	r2, r2, #8
 800c306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0204 	bic.w	r2, r2, #4
 800c316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6999      	ldr	r1, [r3, #24]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	691a      	ldr	r2, [r3, #16]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	430a      	orrs	r2, r1
 800c328:	619a      	str	r2, [r3, #24]
      break;
 800c32a:	e064      	b.n	800c3f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68b9      	ldr	r1, [r7, #8]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f960 	bl	800c5f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	699a      	ldr	r2, [r3, #24]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	699a      	ldr	r2, [r3, #24]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6999      	ldr	r1, [r3, #24]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	021a      	lsls	r2, r3, #8
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	619a      	str	r2, [r3, #24]
      break;
 800c36c:	e043      	b.n	800c3f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f9a9 	bl	800c6cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f042 0208 	orr.w	r2, r2, #8
 800c388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	69da      	ldr	r2, [r3, #28]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0204 	bic.w	r2, r2, #4
 800c398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69d9      	ldr	r1, [r3, #28]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	691a      	ldr	r2, [r3, #16]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	61da      	str	r2, [r3, #28]
      break;
 800c3ac:	e023      	b.n	800c3f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f9f3 	bl	800c7a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69da      	ldr	r2, [r3, #28]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c3c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	69da      	ldr	r2, [r3, #28]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c3d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	69d9      	ldr	r1, [r3, #28]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	021a      	lsls	r2, r3, #8
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	61da      	str	r2, [r3, #28]
      break;
 800c3ee:	e002      	b.n	800c3f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c3f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	bc80      	pop	{r7}
 800c418:	4770      	bx	lr

0800c41a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b083      	sub	sp, #12
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c422:	bf00      	nop
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	bc80      	pop	{r7}
 800c42a:	4770      	bx	lr

0800c42c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	bc80      	pop	{r7}
 800c43c:	4770      	bx	lr

0800c43e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c43e:	b480      	push	{r7}
 800c440:	b083      	sub	sp, #12
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c446:	bf00      	nop
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr

0800c450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a2f      	ldr	r2, [pc, #188]	@ (800c520 <TIM_Base_SetConfig+0xd0>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d00b      	beq.n	800c480 <TIM_Base_SetConfig+0x30>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46e:	d007      	beq.n	800c480 <TIM_Base_SetConfig+0x30>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a2c      	ldr	r2, [pc, #176]	@ (800c524 <TIM_Base_SetConfig+0xd4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d003      	beq.n	800c480 <TIM_Base_SetConfig+0x30>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a2b      	ldr	r2, [pc, #172]	@ (800c528 <TIM_Base_SetConfig+0xd8>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d108      	bne.n	800c492 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	4313      	orrs	r3, r2
 800c490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a22      	ldr	r2, [pc, #136]	@ (800c520 <TIM_Base_SetConfig+0xd0>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d00b      	beq.n	800c4b2 <TIM_Base_SetConfig+0x62>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4a0:	d007      	beq.n	800c4b2 <TIM_Base_SetConfig+0x62>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c524 <TIM_Base_SetConfig+0xd4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d003      	beq.n	800c4b2 <TIM_Base_SetConfig+0x62>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a1e      	ldr	r2, [pc, #120]	@ (800c528 <TIM_Base_SetConfig+0xd8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d108      	bne.n	800c4c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a0d      	ldr	r2, [pc, #52]	@ (800c520 <TIM_Base_SetConfig+0xd0>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d103      	bne.n	800c4f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	691a      	ldr	r2, [r3, #16]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d005      	beq.n	800c516 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f023 0201 	bic.w	r2, r3, #1
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	611a      	str	r2, [r3, #16]
  }
}
 800c516:	bf00      	nop
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bc80      	pop	{r7}
 800c51e:	4770      	bx	lr
 800c520:	40012c00 	.word	0x40012c00
 800c524:	40000400 	.word	0x40000400
 800c528:	40000800 	.word	0x40000800

0800c52c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	f023 0201 	bic.w	r2, r3, #1
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 0303 	bic.w	r3, r3, #3
 800c562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f023 0302 	bic.w	r3, r3, #2
 800c574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a1c      	ldr	r2, [pc, #112]	@ (800c5f4 <TIM_OC1_SetConfig+0xc8>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d10c      	bne.n	800c5a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f023 0308 	bic.w	r3, r3, #8
 800c58e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	697a      	ldr	r2, [r7, #20]
 800c596:	4313      	orrs	r3, r2
 800c598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f023 0304 	bic.w	r3, r3, #4
 800c5a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a13      	ldr	r2, [pc, #76]	@ (800c5f4 <TIM_OC1_SetConfig+0xc8>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d111      	bne.n	800c5ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c5b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	621a      	str	r2, [r3, #32]
}
 800c5e8:	bf00      	nop
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	40012c00 	.word	0x40012c00

0800c5f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	f023 0210 	bic.w	r2, r3, #16
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	021b      	lsls	r3, r3, #8
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	4313      	orrs	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0320 	bic.w	r3, r3, #32
 800c642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a1d      	ldr	r2, [pc, #116]	@ (800c6c8 <TIM_OC2_SetConfig+0xd0>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d10d      	bne.n	800c674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c65e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	011b      	lsls	r3, r3, #4
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	4313      	orrs	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a14      	ldr	r2, [pc, #80]	@ (800c6c8 <TIM_OC2_SetConfig+0xd0>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d113      	bne.n	800c6a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c68a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	695b      	ldr	r3, [r3, #20]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	693a      	ldr	r2, [r7, #16]
 800c694:	4313      	orrs	r3, r2
 800c696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	621a      	str	r2, [r3, #32]
}
 800c6be:	bf00      	nop
 800c6c0:	371c      	adds	r7, #28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bc80      	pop	{r7}
 800c6c6:	4770      	bx	lr
 800c6c8:	40012c00 	.word	0x40012c00

0800c6cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 0303 	bic.w	r3, r3, #3
 800c702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	021b      	lsls	r3, r3, #8
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4313      	orrs	r3, r2
 800c720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a1d      	ldr	r2, [pc, #116]	@ (800c79c <TIM_OC3_SetConfig+0xd0>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d10d      	bne.n	800c746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a14      	ldr	r2, [pc, #80]	@ (800c79c <TIM_OC3_SetConfig+0xd0>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d113      	bne.n	800c776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4313      	orrs	r3, r2
 800c774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	621a      	str	r2, [r3, #32]
}
 800c790:	bf00      	nop
 800c792:	371c      	adds	r7, #28
 800c794:	46bd      	mov	sp, r7
 800c796:	bc80      	pop	{r7}
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	40012c00 	.word	0x40012c00

0800c7a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	031b      	lsls	r3, r3, #12
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a0f      	ldr	r2, [pc, #60]	@ (800c838 <TIM_OC4_SetConfig+0x98>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d109      	bne.n	800c814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	019b      	lsls	r3, r3, #6
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	621a      	str	r2, [r3, #32]
}
 800c82e:	bf00      	nop
 800c830:	371c      	adds	r7, #28
 800c832:	46bd      	mov	sp, r7
 800c834:	bc80      	pop	{r7}
 800c836:	4770      	bx	lr
 800c838:	40012c00 	.word	0x40012c00

0800c83c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f003 031f 	and.w	r3, r3, #31
 800c84e:	2201      	movs	r2, #1
 800c850:	fa02 f303 	lsl.w	r3, r2, r3
 800c854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6a1a      	ldr	r2, [r3, #32]
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	43db      	mvns	r3, r3
 800c85e:	401a      	ands	r2, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6a1a      	ldr	r2, [r3, #32]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f003 031f 	and.w	r3, r3, #31
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	fa01 f303 	lsl.w	r3, r1, r3
 800c874:	431a      	orrs	r2, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	621a      	str	r2, [r3, #32]
}
 800c87a:	bf00      	nop
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	bc80      	pop	{r7}
 800c882:	4770      	bx	lr

0800c884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c898:	2302      	movs	r3, #2
 800c89a:	e046      	b.n	800c92a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a16      	ldr	r2, [pc, #88]	@ (800c934 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d00e      	beq.n	800c8fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8e8:	d009      	beq.n	800c8fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a12      	ldr	r2, [pc, #72]	@ (800c938 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d004      	beq.n	800c8fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a10      	ldr	r2, [pc, #64]	@ (800c93c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d10c      	bne.n	800c918 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	bc80      	pop	{r7}
 800c932:	4770      	bx	lr
 800c934:	40012c00 	.word	0x40012c00
 800c938:	40000400 	.word	0x40000400
 800c93c:	40000800 	.word	0x40000800

0800c940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr

0800c952 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c95a:	bf00      	nop
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	bc80      	pop	{r7}
 800c962:	4770      	bx	lr

0800c964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	4638      	mov	r0, r7
 800c96e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr

0800c97e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c98e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800c992:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr

0800c9aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c9b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800c9b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr

0800c9de <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bc80      	pop	{r7}
 800c9f4:	4770      	bx	lr

0800c9f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	4638      	mov	r0, r7
 800ca00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bc80      	pop	{r7}
 800ca2e:	4770      	bx	lr

0800ca30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b09d      	sub	sp, #116	@ 0x74
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800ca52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	78db      	ldrb	r3, [r3, #3]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d81f      	bhi.n	800caa2 <USB_ActivateEndpoint+0x72>
 800ca62:	a201      	add	r2, pc, #4	@ (adr r2, 800ca68 <USB_ActivateEndpoint+0x38>)
 800ca64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800ca95 	.word	0x0800ca95
 800ca70:	0800caab 	.word	0x0800caab
 800ca74:	0800ca87 	.word	0x0800ca87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ca78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ca7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ca80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800ca84:	e012      	b.n	800caac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ca86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ca8a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ca8e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800ca92:	e00b      	b.n	800caac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ca94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ca98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800caa0:	e004      	b.n	800caac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800caa8:	e000      	b.n	800caac <USB_ActivateEndpoint+0x7c>
      break;
 800caaa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	441a      	add	r2, r3
 800cab6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800caba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cabe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caca:	b29b      	uxth	r3, r3
 800cacc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	7812      	ldrb	r2, [r2, #0]
 800caea:	4313      	orrs	r3, r2
 800caec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	441a      	add	r2, r3
 800cafa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800cafe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	7b1b      	ldrb	r3, [r3, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f040 8178 	bne.w	800ce0c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 8084 	beq.w	800cc2e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	61bb      	str	r3, [r7, #24]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	461a      	mov	r2, r3
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	4413      	add	r3, r2
 800cb38:	61bb      	str	r3, [r7, #24]
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	011a      	lsls	r2, r3, #4
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	4413      	add	r3, r2
 800cb44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cb48:	617b      	str	r3, [r7, #20]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	88db      	ldrh	r3, [r3, #6]
 800cb4e:	085b      	lsrs	r3, r3, #1
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	827b      	strh	r3, [r7, #18]
 800cb68:	8a7b      	ldrh	r3, [r7, #18]
 800cb6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d01b      	beq.n	800cbaa <USB_ActivateEndpoint+0x17a>
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb88:	823b      	strh	r3, [r7, #16]
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	441a      	add	r2, r3
 800cb94:	8a3b      	ldrh	r3, [r7, #16]
 800cb96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cba2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	78db      	ldrb	r3, [r3, #3]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d020      	beq.n	800cbf4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbc8:	81bb      	strh	r3, [r7, #12]
 800cbca:	89bb      	ldrh	r3, [r7, #12]
 800cbcc:	f083 0320 	eor.w	r3, r3, #32
 800cbd0:	81bb      	strh	r3, [r7, #12]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	441a      	add	r2, r3
 800cbdc:	89bb      	ldrh	r3, [r7, #12]
 800cbde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	8013      	strh	r3, [r2, #0]
 800cbf2:	e2d5      	b.n	800d1a0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc0a:	81fb      	strh	r3, [r7, #14]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	89fb      	ldrh	r3, [r7, #14]
 800cc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	8013      	strh	r3, [r2, #0]
 800cc2c:	e2b8      	b.n	800d1a0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3e:	4413      	add	r3, r2
 800cc40:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	011a      	lsls	r2, r3, #4
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800cc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	88db      	ldrh	r3, [r3, #6]
 800cc56:	085b      	lsrs	r3, r3, #1
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	461a      	mov	r2, r3
 800cc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc72:	4413      	add	r3, r2
 800cc74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	011a      	lsls	r2, r3, #4
 800cc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7e:	4413      	add	r3, r2
 800cc80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800cc84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc9c:	d91d      	bls.n	800ccda <USB_ActivateEndpoint+0x2aa>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	095b      	lsrs	r3, r3, #5
 800cca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	f003 031f 	and.w	r3, r3, #31
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d102      	bne.n	800ccb8 <USB_ActivateEndpoint+0x288>
 800ccb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	029b      	lsls	r3, r3, #10
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	801a      	strh	r2, [r3, #0]
 800ccd8:	e026      	b.n	800cd28 <USB_ActivateEndpoint+0x2f8>
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <USB_ActivateEndpoint+0x2c8>
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf4:	801a      	strh	r2, [r3, #0]
 800ccf6:	e017      	b.n	800cd28 <USB_ActivateEndpoint+0x2f8>
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	085b      	lsrs	r3, r3, #1
 800ccfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <USB_ActivateEndpoint+0x2e2>
 800cd0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd0e:	3301      	adds	r3, #1
 800cd10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	029b      	lsls	r3, r3, #10
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4313      	orrs	r3, r2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cd36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01b      	beq.n	800cd78 <USB_ActivateEndpoint+0x348>
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd56:	843b      	strh	r3, [r7, #32]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	441a      	add	r2, r3
 800cd62:	8c3b      	ldrh	r3, [r7, #32]
 800cd64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d124      	bne.n	800cdca <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cd92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd96:	83bb      	strh	r3, [r7, #28]
 800cd98:	8bbb      	ldrh	r3, [r7, #28]
 800cd9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cd9e:	83bb      	strh	r3, [r7, #28]
 800cda0:	8bbb      	ldrh	r3, [r7, #28]
 800cda2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cda6:	83bb      	strh	r3, [r7, #28]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	441a      	add	r2, r3
 800cdb2:	8bbb      	ldrh	r3, [r7, #28]
 800cdb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	8013      	strh	r3, [r2, #0]
 800cdc8:	e1ea      	b.n	800d1a0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cde0:	83fb      	strh	r3, [r7, #30]
 800cde2:	8bfb      	ldrh	r3, [r7, #30]
 800cde4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cde8:	83fb      	strh	r3, [r7, #30]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	441a      	add	r2, r3
 800cdf4:	8bfb      	ldrh	r3, [r7, #30]
 800cdf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	8013      	strh	r3, [r2, #0]
 800ce0a:	e1c9      	b.n	800d1a0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	78db      	ldrb	r3, [r3, #3]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d11e      	bne.n	800ce52 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce2a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	441a      	add	r2, r3
 800ce38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ce3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce44:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ce48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	8013      	strh	r3, [r2, #0]
 800ce50:	e01d      	b.n	800ce8e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ce64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce68:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	441a      	add	r2, r3
 800ce76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ce7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce9e:	4413      	add	r3, r2
 800cea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	011a      	lsls	r2, r3, #4
 800cea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ceb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	891b      	ldrh	r3, [r3, #8]
 800ceb6:	085b      	lsrs	r3, r3, #1
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cecc:	b29b      	uxth	r3, r3
 800cece:	461a      	mov	r2, r3
 800ced0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ced2:	4413      	add	r3, r2
 800ced4:	657b      	str	r3, [r7, #84]	@ 0x54
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	011a      	lsls	r2, r3, #4
 800cedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800cee4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	895b      	ldrh	r3, [r3, #10]
 800ceea:	085b      	lsrs	r3, r3, #1
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	785b      	ldrb	r3, [r3, #1]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f040 8093 	bne.w	800d026 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800cf10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cf14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01b      	beq.n	800cf54 <USB_ActivateEndpoint+0x524>
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf32:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	441a      	add	r2, r3
 800cf3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cf40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800cf62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cf64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d01b      	beq.n	800cfa4 <USB_ActivateEndpoint+0x574>
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf82:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	441a      	add	r2, r3
 800cf8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cfb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfba:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cfbc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cfbe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cfc2:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cfc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cfc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cfca:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	441a      	add	r2, r3
 800cfd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cfd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d002:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	441a      	add	r2, r3
 800d00e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d020:	b29b      	uxth	r3, r3
 800d022:	8013      	strh	r3, [r2, #0]
 800d024:	e0bc      	b.n	800d1a0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d036:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d03a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01d      	beq.n	800d07e <USB_ActivateEndpoint+0x64e>
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d058:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	441a      	add	r2, r3
 800d066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800d06a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d06e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d072:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800d08e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d096:	2b00      	cmp	r3, #0
 800d098:	d01d      	beq.n	800d0d6 <USB_ActivateEndpoint+0x6a6>
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0b0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	441a      	add	r2, r3
 800d0be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d0c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	78db      	ldrb	r3, [r3, #3]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d024      	beq.n	800d128 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d0f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d0fc:	f083 0320 	eor.w	r3, r3, #32
 800d100:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	441a      	add	r2, r3
 800d10e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d11a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d11e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d122:	b29b      	uxth	r3, r3
 800d124:	8013      	strh	r3, [r2, #0]
 800d126:	e01d      	b.n	800d164 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	b29b      	uxth	r3, r3
 800d136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d13a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d13e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	441a      	add	r2, r3
 800d14c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d154:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d160:	b29b      	uxth	r3, r3
 800d162:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4413      	add	r3, r2
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	b29b      	uxth	r3, r3
 800d172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d17a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	441a      	add	r2, r3
 800d188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d18c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d1a0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3774      	adds	r7, #116	@ 0x74
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bc80      	pop	{r7}
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop

0800d1b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b08d      	sub	sp, #52	@ 0x34
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	7b1b      	ldrb	r3, [r3, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f040 808e 	bne.w	800d2e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d044      	beq.n	800d256 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	81bb      	strh	r3, [r7, #12]
 800d1da:	89bb      	ldrh	r3, [r7, #12]
 800d1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01b      	beq.n	800d21c <USB_DeactivateEndpoint+0x6c>
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1fa:	817b      	strh	r3, [r7, #10]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	441a      	add	r2, r3
 800d206:	897b      	ldrh	r3, [r7, #10]
 800d208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d20c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d218:	b29b      	uxth	r3, r3
 800d21a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d22e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d232:	813b      	strh	r3, [r7, #8]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	441a      	add	r2, r3
 800d23e:	893b      	ldrh	r3, [r7, #8]
 800d240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d24c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d250:	b29b      	uxth	r3, r3
 800d252:	8013      	strh	r3, [r2, #0]
 800d254:	e192      	b.n	800d57c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	827b      	strh	r3, [r7, #18]
 800d264:	8a7b      	ldrh	r3, [r7, #18]
 800d266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d01b      	beq.n	800d2a6 <USB_DeactivateEndpoint+0xf6>
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d284:	823b      	strh	r3, [r7, #16]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	441a      	add	r2, r3
 800d290:	8a3b      	ldrh	r3, [r7, #16]
 800d292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d29a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d29e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2bc:	81fb      	strh	r3, [r7, #14]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	441a      	add	r2, r3
 800d2c8:	89fb      	ldrh	r3, [r7, #14]
 800d2ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	8013      	strh	r3, [r2, #0]
 800d2de:	e14d      	b.n	800d57c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	785b      	ldrb	r3, [r3, #1]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f040 80a5 	bne.w	800d434 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	843b      	strh	r3, [r7, #32]
 800d2f8:	8c3b      	ldrh	r3, [r7, #32]
 800d2fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d01b      	beq.n	800d33a <USB_DeactivateEndpoint+0x18a>
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d318:	83fb      	strh	r3, [r7, #30]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	441a      	add	r2, r3
 800d324:	8bfb      	ldrh	r3, [r7, #30]
 800d326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d32a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d32e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d336:	b29b      	uxth	r3, r3
 800d338:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	881b      	ldrh	r3, [r3, #0]
 800d346:	83bb      	strh	r3, [r7, #28]
 800d348:	8bbb      	ldrh	r3, [r7, #28]
 800d34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d01b      	beq.n	800d38a <USB_DeactivateEndpoint+0x1da>
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d368:	837b      	strh	r3, [r7, #26]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	441a      	add	r2, r3
 800d374:	8b7b      	ldrh	r3, [r7, #26]
 800d376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d37a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d37e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d382:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d386:	b29b      	uxth	r3, r3
 800d388:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d39c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3a0:	833b      	strh	r3, [r7, #24]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	441a      	add	r2, r3
 800d3ac:	8b3b      	ldrh	r3, [r7, #24]
 800d3ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3d8:	82fb      	strh	r3, [r7, #22]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	441a      	add	r2, r3
 800d3e4:	8afb      	ldrh	r3, [r7, #22]
 800d3e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
 800d408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d40c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d410:	82bb      	strh	r3, [r7, #20]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	441a      	add	r2, r3
 800d41c:	8abb      	ldrh	r3, [r7, #20]
 800d41e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d42a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42e:	b29b      	uxth	r3, r3
 800d430:	8013      	strh	r3, [r2, #0]
 800d432:	e0a3      	b.n	800d57c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d442:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01b      	beq.n	800d484 <USB_DeactivateEndpoint+0x2d4>
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d462:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	441a      	add	r2, r3
 800d46e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d47c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d480:	b29b      	uxth	r3, r3
 800d482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d492:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01b      	beq.n	800d4d4 <USB_DeactivateEndpoint+0x324>
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	441a      	add	r2, r3
 800d4be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	441a      	add	r2, r3
 800d4f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d4f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d508:	b29b      	uxth	r3, r3
 800d50a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d51e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d522:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	441a      	add	r2, r3
 800d52e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d53c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d540:	b29b      	uxth	r3, r3
 800d542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	b29b      	uxth	r3, r3
 800d552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d55a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	441a      	add	r2, r3
 800d566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d56c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d578:	b29b      	uxth	r3, r3
 800d57a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3734      	adds	r7, #52	@ 0x34
 800d582:	46bd      	mov	sp, r7
 800d584:	bc80      	pop	{r7}
 800d586:	4770      	bx	lr

0800d588 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b0c2      	sub	sp, #264	@ 0x108
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d596:	6018      	str	r0, [r3, #0]
 800d598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d5a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	785b      	ldrb	r3, [r3, #1]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	f040 86b7 	bne.w	800e322 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	699a      	ldr	r2, [r3, #24]
 800d5c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d908      	bls.n	800d5e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d5e0:	e007      	b.n	800d5f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	7b1b      	ldrb	r3, [r3, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d13a      	bne.n	800d678 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6959      	ldr	r1, [r3, #20]
 800d60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	88da      	ldrh	r2, [r3, #6]
 800d61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61e:	b29b      	uxth	r3, r3
 800d620:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d624:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d628:	6800      	ldr	r0, [r0, #0]
 800d62a:	f001 fc9c 	bl	800ef66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	613b      	str	r3, [r7, #16]
 800d63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d648:	b29b      	uxth	r3, r3
 800d64a:	461a      	mov	r2, r3
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	4413      	add	r3, r2
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	011a      	lsls	r2, r3, #4
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	4413      	add	r3, r2
 800d664:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d66e:	b29a      	uxth	r2, r3
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	801a      	strh	r2, [r3, #0]
 800d674:	f000 be1f 	b.w	800e2b6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	78db      	ldrb	r3, [r3, #3]
 800d684:	2b02      	cmp	r3, #2
 800d686:	f040 8462 	bne.w	800df4e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6a1a      	ldr	r2, [r3, #32]
 800d696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	f240 83df 	bls.w	800de66 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d6a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	441a      	add	r2, r3
 800d6ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d6f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6f8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d700:	b29b      	uxth	r3, r3
 800d702:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	6a1a      	ldr	r2, [r3, #32]
 800d710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d714:	1ad2      	subs	r2, r2, r3
 800d716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4413      	add	r3, r2
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 81c7 	beq.w	800dad8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	633b      	str	r3, [r7, #48]	@ 0x30
 800d756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	785b      	ldrb	r3, [r3, #1]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d177      	bne.n	800d856 <USB_EPStartXfer+0x2ce>
 800d766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d780:	b29b      	uxth	r3, r3
 800d782:	461a      	mov	r2, r3
 800d784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d786:	4413      	add	r3, r2
 800d788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	011a      	lsls	r2, r3, #4
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	4413      	add	r3, r2
 800d79c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800d7a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b0:	801a      	strh	r2, [r3, #0]
 800d7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7b8:	d921      	bls.n	800d7fe <USB_EPStartXfer+0x276>
 800d7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7be:	095b      	lsrs	r3, r3, #5
 800d7c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d104      	bne.n	800d7da <USB_EPStartXfer+0x252>
 800d7d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	029b      	lsls	r3, r3, #10
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fa:	801a      	strh	r2, [r3, #0]
 800d7fc:	e050      	b.n	800d8a0 <USB_EPStartXfer+0x318>
 800d7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10a      	bne.n	800d81c <USB_EPStartXfer+0x294>
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d814:	b29a      	uxth	r2, r3
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	801a      	strh	r2, [r3, #0]
 800d81a:	e041      	b.n	800d8a0 <USB_EPStartXfer+0x318>
 800d81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d820:	085b      	lsrs	r3, r3, #1
 800d822:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d82a:	f003 0301 	and.w	r3, r3, #1
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <USB_EPStartXfer+0x2b4>
 800d832:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d836:	3301      	adds	r3, #1
 800d838:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29a      	uxth	r2, r3
 800d842:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d846:	b29b      	uxth	r3, r3
 800d848:	029b      	lsls	r3, r3, #10
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4313      	orrs	r3, r2
 800d84e:	b29a      	uxth	r2, r3
 800d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d852:	801a      	strh	r2, [r3, #0]
 800d854:	e024      	b.n	800d8a0 <USB_EPStartXfer+0x318>
 800d856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	785b      	ldrb	r3, [r3, #1]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d11c      	bne.n	800d8a0 <USB_EPStartXfer+0x318>
 800d866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d86a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d874:	b29b      	uxth	r3, r3
 800d876:	461a      	mov	r2, r3
 800d878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87a:	4413      	add	r3, r2
 800d87c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	011a      	lsls	r2, r3, #4
 800d88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88e:	4413      	add	r3, r2
 800d890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800d894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d8a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	895b      	ldrh	r3, [r3, #10]
 800d8ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6959      	ldr	r1, [r3, #20]
 800d8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d8c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d8ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d8ce:	6800      	ldr	r0, [r0, #0]
 800d8d0:	f001 fb49 	bl	800ef66 <USB_WritePMA>
            ep->xfer_buff += len;
 800d8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	695a      	ldr	r2, [r3, #20]
 800d8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8e4:	441a      	add	r2, r3
 800d8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d90f      	bls.n	800d92e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6a1a      	ldr	r2, [r3, #32]
 800d91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	621a      	str	r2, [r3, #32]
 800d92c:	e00e      	b.n	800d94c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d177      	bne.n	800da4c <USB_EPStartXfer+0x4c4>
 800d95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	61bb      	str	r3, [r7, #24]
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d976:	b29b      	uxth	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	4413      	add	r3, r2
 800d97e:	61bb      	str	r3, [r7, #24]
 800d980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	011a      	lsls	r2, r3, #4
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	4413      	add	r3, r2
 800d992:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d996:	617b      	str	r3, [r7, #20]
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	801a      	strh	r2, [r3, #0]
 800d9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9ae:	d921      	bls.n	800d9f4 <USB_EPStartXfer+0x46c>
 800d9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b4:	095b      	lsrs	r3, r3, #5
 800d9b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9be:	f003 031f 	and.w	r3, r3, #31
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d104      	bne.n	800d9d0 <USB_EPStartXfer+0x448>
 800d9c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	881b      	ldrh	r3, [r3, #0]
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	029b      	lsls	r3, r3, #10
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ec:	b29a      	uxth	r2, r3
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	801a      	strh	r2, [r3, #0]
 800d9f2:	e056      	b.n	800daa2 <USB_EPStartXfer+0x51a>
 800d9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10a      	bne.n	800da12 <USB_EPStartXfer+0x48a>
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	801a      	strh	r2, [r3, #0]
 800da10:	e047      	b.n	800daa2 <USB_EPStartXfer+0x51a>
 800da12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800da1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	d004      	beq.n	800da32 <USB_EPStartXfer+0x4aa>
 800da28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da2c:	3301      	adds	r3, #1
 800da2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	b29a      	uxth	r2, r3
 800da38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	029b      	lsls	r3, r3, #10
 800da40:	b29b      	uxth	r3, r3
 800da42:	4313      	orrs	r3, r2
 800da44:	b29a      	uxth	r2, r3
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	801a      	strh	r2, [r3, #0]
 800da4a:	e02a      	b.n	800daa2 <USB_EPStartXfer+0x51a>
 800da4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	785b      	ldrb	r3, [r3, #1]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d122      	bne.n	800daa2 <USB_EPStartXfer+0x51a>
 800da5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	623b      	str	r3, [r7, #32]
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da76:	b29b      	uxth	r3, r3
 800da78:	461a      	mov	r2, r3
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	4413      	add	r3, r2
 800da7e:	623b      	str	r3, [r7, #32]
 800da80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	011a      	lsls	r2, r3, #4
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	4413      	add	r3, r2
 800da92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800da96:	61fb      	str	r3, [r7, #28]
 800da98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	891b      	ldrh	r3, [r3, #8]
 800daae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6959      	ldr	r1, [r3, #20]
 800dabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dac8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dacc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dad0:	6800      	ldr	r0, [r0, #0]
 800dad2:	f001 fa48 	bl	800ef66 <USB_WritePMA>
 800dad6:	e3ee      	b.n	800e2b6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	785b      	ldrb	r3, [r3, #1]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d177      	bne.n	800dbd8 <USB_EPStartXfer+0x650>
 800dae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800daf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db02:	b29b      	uxth	r3, r3
 800db04:	461a      	mov	r2, r3
 800db06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db08:	4413      	add	r3, r2
 800db0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	011a      	lsls	r2, r3, #4
 800db1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db1c:	4413      	add	r3, r2
 800db1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800db22:	647b      	str	r3, [r7, #68]	@ 0x44
 800db24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db2e:	b29a      	uxth	r2, r3
 800db30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db38:	2b3e      	cmp	r3, #62	@ 0x3e
 800db3a:	d921      	bls.n	800db80 <USB_EPStartXfer+0x5f8>
 800db3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db40:	095b      	lsrs	r3, r3, #5
 800db42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800db46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db4a:	f003 031f 	and.w	r3, r3, #31
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d104      	bne.n	800db5c <USB_EPStartXfer+0x5d4>
 800db52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800db56:	3b01      	subs	r3, #1
 800db58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800db5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	b29a      	uxth	r2, r3
 800db62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800db66:	b29b      	uxth	r3, r3
 800db68:	029b      	lsls	r3, r3, #10
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4313      	orrs	r3, r2
 800db6e:	b29b      	uxth	r3, r3
 800db70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db78:	b29a      	uxth	r2, r3
 800db7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db7c:	801a      	strh	r2, [r3, #0]
 800db7e:	e056      	b.n	800dc2e <USB_EPStartXfer+0x6a6>
 800db80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10a      	bne.n	800db9e <USB_EPStartXfer+0x616>
 800db88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db96:	b29a      	uxth	r2, r3
 800db98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db9a:	801a      	strh	r2, [r3, #0]
 800db9c:	e047      	b.n	800dc2e <USB_EPStartXfer+0x6a6>
 800db9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dba2:	085b      	lsrs	r3, r3, #1
 800dba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <USB_EPStartXfer+0x636>
 800dbb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dbb8:	3301      	adds	r3, #1
 800dbba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	029b      	lsls	r3, r3, #10
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbd4:	801a      	strh	r2, [r3, #0]
 800dbd6:	e02a      	b.n	800dc2e <USB_EPStartXfer+0x6a6>
 800dbd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d122      	bne.n	800dc2e <USB_EPStartXfer+0x6a6>
 800dbe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dbf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	461a      	mov	r2, r3
 800dc06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc08:	4413      	add	r3, r2
 800dc0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	011a      	lsls	r2, r3, #4
 800dc1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800dc22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	891b      	ldrh	r3, [r3, #8]
 800dc3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6959      	ldr	r1, [r3, #20]
 800dc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dc54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc5c:	6800      	ldr	r0, [r0, #0]
 800dc5e:	f001 f982 	bl	800ef66 <USB_WritePMA>
            ep->xfer_buff += len;
 800dc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	695a      	ldr	r2, [r3, #20]
 800dc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc72:	441a      	add	r2, r3
 800dc74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dc80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6a1a      	ldr	r2, [r3, #32]
 800dc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d90f      	bls.n	800dcbc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800dc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6a1a      	ldr	r2, [r3, #32]
 800dca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcac:	1ad2      	subs	r2, r2, r3
 800dcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	621a      	str	r2, [r3, #32]
 800dcba:	e00e      	b.n	800dcda <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800dcbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
 800dcc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800dccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dcda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	785b      	ldrb	r3, [r3, #1]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d177      	bne.n	800dde6 <USB_EPStartXfer+0x85e>
 800dcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	461a      	mov	r2, r3
 800dd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd16:	4413      	add	r3, r2
 800dd18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	011a      	lsls	r2, r3, #4
 800dd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800dd30:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd40:	801a      	strh	r2, [r3, #0]
 800dd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd46:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd48:	d921      	bls.n	800dd8e <USB_EPStartXfer+0x806>
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	095b      	lsrs	r3, r3, #5
 800dd50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd58:	f003 031f 	and.w	r3, r3, #31
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d104      	bne.n	800dd6a <USB_EPStartXfer+0x7e2>
 800dd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd64:	3b01      	subs	r3, #1
 800dd66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6c:	881b      	ldrh	r3, [r3, #0]
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	029b      	lsls	r3, r3, #10
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8a:	801a      	strh	r2, [r3, #0]
 800dd8c:	e050      	b.n	800de30 <USB_EPStartXfer+0x8a8>
 800dd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10a      	bne.n	800ddac <USB_EPStartXfer+0x824>
 800dd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dda0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dda8:	801a      	strh	r2, [r3, #0]
 800ddaa:	e041      	b.n	800de30 <USB_EPStartXfer+0x8a8>
 800ddac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb0:	085b      	lsrs	r3, r3, #1
 800ddb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ddb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d004      	beq.n	800ddcc <USB_EPStartXfer+0x844>
 800ddc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ddcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	029b      	lsls	r3, r3, #10
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4313      	orrs	r3, r2
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dde2:	801a      	strh	r2, [r3, #0]
 800dde4:	e024      	b.n	800de30 <USB_EPStartXfer+0x8a8>
 800dde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d11c      	bne.n	800de30 <USB_EPStartXfer+0x8a8>
 800ddf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de04:	b29b      	uxth	r3, r3
 800de06:	461a      	mov	r2, r3
 800de08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de0a:	4413      	add	r3, r2
 800de0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800de0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	011a      	lsls	r2, r3, #4
 800de1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de1e:	4413      	add	r3, r2
 800de20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800de24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800de30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6959      	ldr	r1, [r3, #20]
 800de4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de50:	b29b      	uxth	r3, r3
 800de52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800de56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800de5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800de5e:	6800      	ldr	r0, [r0, #0]
 800de60:	f001 f881 	bl	800ef66 <USB_WritePMA>
 800de64:	e227      	b.n	800e2b6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800de66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800de76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	b29b      	uxth	r3, r3
 800de94:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800de98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de9c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800dea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	441a      	add	r2, r3
 800deba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800debe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800deca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dece:	b29b      	uxth	r3, r3
 800ded0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ded2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800deec:	b29b      	uxth	r3, r3
 800deee:	461a      	mov	r2, r3
 800def0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800def2:	4413      	add	r3, r2
 800def4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800def6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800defa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	011a      	lsls	r2, r3, #4
 800df04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df06:	4413      	add	r3, r2
 800df08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800df0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df12:	b29a      	uxth	r2, r3
 800df14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800df18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	891b      	ldrh	r3, [r3, #8]
 800df24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6959      	ldr	r1, [r3, #20]
 800df34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df38:	b29b      	uxth	r3, r3
 800df3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800df3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800df42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800df46:	6800      	ldr	r0, [r0, #0]
 800df48:	f001 f80d 	bl	800ef66 <USB_WritePMA>
 800df4c:	e1b3      	b.n	800e2b6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800df4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6a1a      	ldr	r2, [r3, #32]
 800df5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5e:	1ad2      	subs	r2, r2, r3
 800df60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800df6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4413      	add	r3, r2
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df8e:	2b00      	cmp	r3, #0
 800df90:	f000 80c6 	beq.w	800e120 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800df94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800dfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	785b      	ldrb	r3, [r3, #1]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d177      	bne.n	800e0a0 <USB_EPStartXfer+0xb18>
 800dfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfd0:	4413      	add	r3, r2
 800dfd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	011a      	lsls	r2, r3, #4
 800dfe2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800dfea:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dffa:	801a      	strh	r2, [r3, #0]
 800dffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e000:	2b3e      	cmp	r3, #62	@ 0x3e
 800e002:	d921      	bls.n	800e048 <USB_EPStartXfer+0xac0>
 800e004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e008:	095b      	lsrs	r3, r3, #5
 800e00a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e012:	f003 031f 	and.w	r3, r3, #31
 800e016:	2b00      	cmp	r3, #0
 800e018:	d104      	bne.n	800e024 <USB_EPStartXfer+0xa9c>
 800e01a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e01e:	3b01      	subs	r3, #1
 800e020:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e02e:	b29b      	uxth	r3, r3
 800e030:	029b      	lsls	r3, r3, #10
 800e032:	b29b      	uxth	r3, r3
 800e034:	4313      	orrs	r3, r2
 800e036:	b29b      	uxth	r3, r3
 800e038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e03c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e040:	b29a      	uxth	r2, r3
 800e042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	e050      	b.n	800e0ea <USB_EPStartXfer+0xb62>
 800e048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10a      	bne.n	800e066 <USB_EPStartXfer+0xade>
 800e050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	b29b      	uxth	r3, r3
 800e056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e05a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e05e:	b29a      	uxth	r2, r3
 800e060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e062:	801a      	strh	r2, [r3, #0]
 800e064:	e041      	b.n	800e0ea <USB_EPStartXfer+0xb62>
 800e066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e06a:	085b      	lsrs	r3, r3, #1
 800e06c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d004      	beq.n	800e086 <USB_EPStartXfer+0xafe>
 800e07c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e080:	3301      	adds	r3, #1
 800e082:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e090:	b29b      	uxth	r3, r3
 800e092:	029b      	lsls	r3, r3, #10
 800e094:	b29b      	uxth	r3, r3
 800e096:	4313      	orrs	r3, r2
 800e098:	b29a      	uxth	r2, r3
 800e09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e09c:	801a      	strh	r2, [r3, #0]
 800e09e:	e024      	b.n	800e0ea <USB_EPStartXfer+0xb62>
 800e0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d11c      	bne.n	800e0ea <USB_EPStartXfer+0xb62>
 800e0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0c4:	4413      	add	r3, r2
 800e0c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800e0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	011a      	lsls	r2, r3, #4
 800e0d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0d8:	4413      	add	r3, r2
 800e0da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e0de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	895b      	ldrh	r3, [r3, #10]
 800e0f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6959      	ldr	r1, [r3, #20]
 800e106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e110:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e114:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e118:	6800      	ldr	r0, [r0, #0]
 800e11a:	f000 ff24 	bl	800ef66 <USB_WritePMA>
 800e11e:	e0ca      	b.n	800e2b6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	785b      	ldrb	r3, [r3, #1]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d177      	bne.n	800e220 <USB_EPStartXfer+0xc98>
 800e130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	461a      	mov	r2, r3
 800e14e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e150:	4413      	add	r3, r2
 800e152:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	011a      	lsls	r2, r3, #4
 800e162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e164:	4413      	add	r3, r2
 800e166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e16a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e16c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e16e:	881b      	ldrh	r3, [r3, #0]
 800e170:	b29b      	uxth	r3, r3
 800e172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e176:	b29a      	uxth	r2, r3
 800e178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e17a:	801a      	strh	r2, [r3, #0]
 800e17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e180:	2b3e      	cmp	r3, #62	@ 0x3e
 800e182:	d921      	bls.n	800e1c8 <USB_EPStartXfer+0xc40>
 800e184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e188:	095b      	lsrs	r3, r3, #5
 800e18a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e192:	f003 031f 	and.w	r3, r3, #31
 800e196:	2b00      	cmp	r3, #0
 800e198:	d104      	bne.n	800e1a4 <USB_EPStartXfer+0xc1c>
 800e19a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	029b      	lsls	r3, r3, #10
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1c4:	801a      	strh	r2, [r3, #0]
 800e1c6:	e05c      	b.n	800e282 <USB_EPStartXfer+0xcfa>
 800e1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10a      	bne.n	800e1e6 <USB_EPStartXfer+0xc5e>
 800e1d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1e2:	801a      	strh	r2, [r3, #0]
 800e1e4:	e04d      	b.n	800e282 <USB_EPStartXfer+0xcfa>
 800e1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ea:	085b      	lsrs	r3, r3, #1
 800e1ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f4:	f003 0301 	and.w	r3, r3, #1
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <USB_EPStartXfer+0xc7e>
 800e1fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e200:	3301      	adds	r3, #1
 800e202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e210:	b29b      	uxth	r3, r3
 800e212:	029b      	lsls	r3, r3, #10
 800e214:	b29b      	uxth	r3, r3
 800e216:	4313      	orrs	r3, r2
 800e218:	b29a      	uxth	r2, r3
 800e21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e21c:	801a      	strh	r2, [r3, #0]
 800e21e:	e030      	b.n	800e282 <USB_EPStartXfer+0xcfa>
 800e220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	785b      	ldrb	r3, [r3, #1]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d128      	bne.n	800e282 <USB_EPStartXfer+0xcfa>
 800e230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e242:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	461a      	mov	r2, r3
 800e250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e254:	4413      	add	r3, r2
 800e256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	011a      	lsls	r2, r3, #4
 800e268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e26c:	4413      	add	r3, r2
 800e26e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e280:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	891b      	ldrh	r3, [r3, #8]
 800e28e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	6959      	ldr	r1, [r3, #20]
 800e29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e2a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e2ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e2b0:	6800      	ldr	r0, [r0, #0]
 800e2b2:	f000 fe58 	bl	800ef66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2dc:	817b      	strh	r3, [r7, #10]
 800e2de:	897b      	ldrh	r3, [r7, #10]
 800e2e0:	f083 0310 	eor.w	r3, r3, #16
 800e2e4:	817b      	strh	r3, [r7, #10]
 800e2e6:	897b      	ldrh	r3, [r7, #10]
 800e2e8:	f083 0320 	eor.w	r3, r3, #32
 800e2ec:	817b      	strh	r3, [r7, #10]
 800e2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	441a      	add	r2, r3
 800e308:	897b      	ldrh	r3, [r7, #10]
 800e30a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e30e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	8013      	strh	r3, [r2, #0]
 800e31e:	f000 bcde 	b.w	800ecde <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	7b1b      	ldrb	r3, [r3, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f040 80bb 	bne.w	800e4aa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	699a      	ldr	r2, [r3, #24]
 800e340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d917      	bls.n	800e380 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800e360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	699a      	ldr	r2, [r3, #24]
 800e36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e370:	1ad2      	subs	r2, r2, r3
 800e372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	619a      	str	r2, [r3, #24]
 800e37e:	e00e      	b.n	800e39e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2200      	movs	r2, #0
 800e39c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	461a      	mov	r2, r3
 800e3be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	011a      	lsls	r2, r3, #4
 800e3d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e3da:	4413      	add	r3, r2
 800e3dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e3e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e3e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e3f6:	801a      	strh	r2, [r3, #0]
 800e3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800e3fe:	d924      	bls.n	800e44a <USB_EPStartXfer+0xec2>
 800e400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e404:	095b      	lsrs	r3, r3, #5
 800e406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e40e:	f003 031f 	and.w	r3, r3, #31
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <USB_EPStartXfer+0xe98>
 800e416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e41a:	3b01      	subs	r3, #1
 800e41c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	b29a      	uxth	r2, r3
 800e428:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	029b      	lsls	r3, r3, #10
 800e430:	b29b      	uxth	r3, r3
 800e432:	4313      	orrs	r3, r2
 800e434:	b29b      	uxth	r3, r3
 800e436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e43e:	b29a      	uxth	r2, r3
 800e440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e444:	801a      	strh	r2, [r3, #0]
 800e446:	f000 bc10 	b.w	800ec6a <USB_EPStartXfer+0x16e2>
 800e44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10c      	bne.n	800e46c <USB_EPStartXfer+0xee4>
 800e452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	b29b      	uxth	r3, r3
 800e45a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e45e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e462:	b29a      	uxth	r2, r3
 800e464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e468:	801a      	strh	r2, [r3, #0]
 800e46a:	e3fe      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
 800e46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e470:	085b      	lsrs	r3, r3, #1
 800e472:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d004      	beq.n	800e48c <USB_EPStartXfer+0xf04>
 800e482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e486:	3301      	adds	r3, #1
 800e488:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	b29a      	uxth	r2, r3
 800e494:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e498:	b29b      	uxth	r3, r3
 800e49a:	029b      	lsls	r3, r3, #10
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e4a6:	801a      	strh	r2, [r3, #0]
 800e4a8:	e3df      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	78db      	ldrb	r3, [r3, #3]
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	f040 8218 	bne.w	800e8ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e4bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	785b      	ldrb	r3, [r3, #1]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f040 809d 	bne.w	800e608 <USB_EPStartXfer+0x1080>
 800e4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	011a      	lsls	r2, r3, #4
 800e506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e50a:	4413      	add	r3, r2
 800e50c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e520:	b29a      	uxth	r2, r3
 800e522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e52c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	691b      	ldr	r3, [r3, #16]
 800e534:	2b3e      	cmp	r3, #62	@ 0x3e
 800e536:	d92b      	bls.n	800e590 <USB_EPStartXfer+0x1008>
 800e538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	095b      	lsrs	r3, r3, #5
 800e546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e54e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	f003 031f 	and.w	r3, r3, #31
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d104      	bne.n	800e568 <USB_EPStartXfer+0xfe0>
 800e55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e562:	3b01      	subs	r3, #1
 800e564:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	b29a      	uxth	r2, r3
 800e570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e574:	b29b      	uxth	r3, r3
 800e576:	029b      	lsls	r3, r3, #10
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4313      	orrs	r3, r2
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e586:	b29a      	uxth	r2, r3
 800e588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e58c:	801a      	strh	r2, [r3, #0]
 800e58e:	e070      	b.n	800e672 <USB_EPStartXfer+0x10ea>
 800e590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10c      	bne.n	800e5ba <USB_EPStartXfer+0x1032>
 800e5a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5b6:	801a      	strh	r2, [r3, #0]
 800e5b8:	e05b      	b.n	800e672 <USB_EPStartXfer+0x10ea>
 800e5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d004      	beq.n	800e5ea <USB_EPStartXfer+0x1062>
 800e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e5ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	029b      	lsls	r3, r3, #10
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e604:	801a      	strh	r2, [r3, #0]
 800e606:	e034      	b.n	800e672 <USB_EPStartXfer+0x10ea>
 800e608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e60c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	785b      	ldrb	r3, [r3, #1]
 800e614:	2b01      	cmp	r3, #1
 800e616:	d12c      	bne.n	800e672 <USB_EPStartXfer+0x10ea>
 800e618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e61c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e62a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e634:	b29b      	uxth	r3, r3
 800e636:	461a      	mov	r2, r3
 800e638:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e63c:	4413      	add	r3, r2
 800e63e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	011a      	lsls	r2, r3, #4
 800e650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e654:	4413      	add	r3, r2
 800e656:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e65a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e65e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e670:	801a      	strh	r2, [r3, #0]
 800e672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	785b      	ldrb	r3, [r3, #1]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f040 809d 	bne.w	800e7cc <USB_EPStartXfer+0x1244>
 800e692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	011a      	lsls	r2, r3, #4
 800e6ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e6d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e6d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e6dc:	881b      	ldrh	r3, [r3, #0]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e6ea:	801a      	strh	r2, [r3, #0]
 800e6ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6fa:	d92b      	bls.n	800e754 <USB_EPStartXfer+0x11cc>
 800e6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	095b      	lsrs	r3, r3, #5
 800e70a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	f003 031f 	and.w	r3, r3, #31
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d104      	bne.n	800e72c <USB_EPStartXfer+0x11a4>
 800e722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e726:	3b01      	subs	r3, #1
 800e728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e72c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	b29a      	uxth	r2, r3
 800e734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e738:	b29b      	uxth	r3, r3
 800e73a:	029b      	lsls	r3, r3, #10
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	4313      	orrs	r3, r2
 800e740:	b29b      	uxth	r3, r3
 800e742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e750:	801a      	strh	r2, [r3, #0]
 800e752:	e069      	b.n	800e828 <USB_EPStartXfer+0x12a0>
 800e754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10c      	bne.n	800e77e <USB_EPStartXfer+0x11f6>
 800e764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e774:	b29a      	uxth	r2, r3
 800e776:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e77a:	801a      	strh	r2, [r3, #0]
 800e77c:	e054      	b.n	800e828 <USB_EPStartXfer+0x12a0>
 800e77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	085b      	lsrs	r3, r3, #1
 800e78c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	f003 0301 	and.w	r3, r3, #1
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <USB_EPStartXfer+0x1226>
 800e7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e7ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	029b      	lsls	r3, r3, #10
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7c8:	801a      	strh	r2, [r3, #0]
 800e7ca:	e02d      	b.n	800e828 <USB_EPStartXfer+0x12a0>
 800e7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	d125      	bne.n	800e828 <USB_EPStartXfer+0x12a0>
 800e7dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	011a      	lsls	r2, r3, #4
 800e806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e80a:	4413      	add	r3, r2
 800e80c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800e810:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	b29a      	uxth	r2, r3
 800e822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e826:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e82c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8218 	beq.w	800ec6a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e83e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e85a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e85e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e862:	2b00      	cmp	r3, #0
 800e864:	d005      	beq.n	800e872 <USB_EPStartXfer+0x12ea>
 800e866:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e86a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10d      	bne.n	800e88e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e872:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f040 81f5 	bne.w	800ec6a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e880:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f040 81ee 	bne.w	800ec6a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e89c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4413      	add	r3, r2
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	441a      	add	r2, r3
 800e8d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e8d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	8013      	strh	r3, [r2, #0]
 800e8ea:	e1be      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	78db      	ldrb	r3, [r3, #3]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	f040 81b4 	bne.w	800ec66 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	699a      	ldr	r2, [r3, #24]
 800e90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e90e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	429a      	cmp	r2, r3
 800e918:	d917      	bls.n	800e94a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e93a:	1ad2      	subs	r2, r2, r3
 800e93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	619a      	str	r2, [r3, #24]
 800e948:	e00e      	b.n	800e968 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e95e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2200      	movs	r2, #0
 800e966:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e96c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	785b      	ldrb	r3, [r3, #1]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 8085 	bne.w	800ea84 <USB_EPStartXfer+0x14fc>
 800e97a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e97e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e98c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e996:	b29b      	uxth	r3, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e99e:	4413      	add	r3, r2
 800e9a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	011a      	lsls	r2, r3, #4
 800e9b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800e9bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e9c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e9c4:	881b      	ldrh	r3, [r3, #0]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e9d2:	801a      	strh	r2, [r3, #0]
 800e9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9da:	d923      	bls.n	800ea24 <USB_EPStartXfer+0x149c>
 800e9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e0:	095b      	lsrs	r3, r3, #5
 800e9e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ea:	f003 031f 	and.w	r3, r3, #31
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d104      	bne.n	800e9fc <USB_EPStartXfer+0x1474>
 800e9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e9fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	029b      	lsls	r3, r3, #10
 800ea0c:	b29b      	uxth	r3, r3
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea20:	801a      	strh	r2, [r3, #0]
 800ea22:	e060      	b.n	800eae6 <USB_EPStartXfer+0x155e>
 800ea24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10c      	bne.n	800ea46 <USB_EPStartXfer+0x14be>
 800ea2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea30:	881b      	ldrh	r3, [r3, #0]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea42:	801a      	strh	r2, [r3, #0]
 800ea44:	e04f      	b.n	800eae6 <USB_EPStartXfer+0x155e>
 800ea46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea4a:	085b      	lsrs	r3, r3, #1
 800ea4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ea50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <USB_EPStartXfer+0x14de>
 800ea5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea60:	3301      	adds	r3, #1
 800ea62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ea66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea6a:	881b      	ldrh	r3, [r3, #0]
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	029b      	lsls	r3, r3, #10
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea80:	801a      	strh	r2, [r3, #0]
 800ea82:	e030      	b.n	800eae6 <USB_EPStartXfer+0x155e>
 800ea84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	785b      	ldrb	r3, [r3, #1]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d128      	bne.n	800eae6 <USB_EPStartXfer+0x155e>
 800ea94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	461a      	mov	r2, r3
 800eab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eab8:	4413      	add	r3, r2
 800eaba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	011a      	lsls	r2, r3, #4
 800eacc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ead0:	4413      	add	r3, r2
 800ead2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ead6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eade:	b29a      	uxth	r2, r3
 800eae0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eae4:	801a      	strh	r2, [r3, #0]
 800eae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eaf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f040 8085 	bne.w	800ec10 <USB_EPStartXfer+0x1688>
 800eb06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800eb14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800eb2a:	4413      	add	r3, r2
 800eb2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800eb30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	011a      	lsls	r2, r3, #4
 800eb3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800eb42:	4413      	add	r3, r2
 800eb44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800eb48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb5e:	801a      	strh	r2, [r3, #0]
 800eb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb64:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb66:	d923      	bls.n	800ebb0 <USB_EPStartXfer+0x1628>
 800eb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb6c:	095b      	lsrs	r3, r3, #5
 800eb6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb76:	f003 031f 	and.w	r3, r3, #31
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d104      	bne.n	800eb88 <USB_EPStartXfer+0x1600>
 800eb7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb82:	3b01      	subs	r3, #1
 800eb84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eb88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb8c:	881b      	ldrh	r3, [r3, #0]
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	029b      	lsls	r3, r3, #10
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebac:	801a      	strh	r2, [r3, #0]
 800ebae:	e05c      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
 800ebb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10c      	bne.n	800ebd2 <USB_EPStartXfer+0x164a>
 800ebb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebce:	801a      	strh	r2, [r3, #0]
 800ebd0:	e04b      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
 800ebd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebd6:	085b      	lsrs	r3, r3, #1
 800ebd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ebdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe0:	f003 0301 	and.w	r3, r3, #1
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <USB_EPStartXfer+0x166a>
 800ebe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ebec:	3301      	adds	r3, #1
 800ebee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ebf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebf6:	881b      	ldrh	r3, [r3, #0]
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	029b      	lsls	r3, r3, #10
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4313      	orrs	r3, r2
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec0c:	801a      	strh	r2, [r3, #0]
 800ec0e:	e02c      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
 800ec10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	785b      	ldrb	r3, [r3, #1]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d124      	bne.n	800ec6a <USB_EPStartXfer+0x16e2>
 800ec20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	461a      	mov	r2, r3
 800ec32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec36:	4413      	add	r3, r2
 800ec38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ec3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	011a      	lsls	r2, r3, #4
 800ec4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec4e:	4413      	add	r3, r2
 800ec50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ec54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ec58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ec62:	801a      	strh	r2, [r3, #0]
 800ec64:	e001      	b.n	800ec6a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	e03a      	b.n	800ece0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ec6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	4413      	add	r3, r2
 800ec84:	881b      	ldrh	r3, [r3, #0]
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ec94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ec98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ec9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800eca0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800eca4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eca8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ecac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	441a      	add	r2, r3
 800ecc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ecca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ecce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ecd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ecd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	785b      	ldrb	r3, [r3, #1]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d020      	beq.n	800ed3e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4413      	add	r3, r2
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed12:	81bb      	strh	r3, [r7, #12]
 800ed14:	89bb      	ldrh	r3, [r7, #12]
 800ed16:	f083 0310 	eor.w	r3, r3, #16
 800ed1a:	81bb      	strh	r3, [r7, #12]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	441a      	add	r2, r3
 800ed26:	89bb      	ldrh	r3, [r7, #12]
 800ed28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	8013      	strh	r3, [r2, #0]
 800ed3c:	e01f      	b.n	800ed7e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed54:	81fb      	strh	r3, [r7, #14]
 800ed56:	89fb      	ldrh	r3, [r7, #14]
 800ed58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ed5c:	81fb      	strh	r3, [r7, #14]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	441a      	add	r2, r3
 800ed68:	89fb      	ldrh	r3, [r7, #14]
 800ed6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ed6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ed72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3714      	adds	r7, #20
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bc80      	pop	{r7}
 800ed88:	4770      	bx	lr

0800ed8a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b087      	sub	sp, #28
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	7b1b      	ldrb	r3, [r3, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f040 809d 	bne.w	800eed8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	785b      	ldrb	r3, [r3, #1]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d04c      	beq.n	800ee40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	823b      	strh	r3, [r7, #16]
 800edb4:	8a3b      	ldrh	r3, [r7, #16]
 800edb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d01b      	beq.n	800edf6 <USB_EPClearStall+0x6c>
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	4413      	add	r3, r2
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800edd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edd4:	81fb      	strh	r3, [r7, #14]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	441a      	add	r2, r3
 800ede0:	89fb      	ldrh	r3, [r7, #14]
 800ede2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ede6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800edea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	78db      	ldrb	r3, [r3, #3]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d06c      	beq.n	800eed8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	4413      	add	r3, r2
 800ee08:	881b      	ldrh	r3, [r3, #0]
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee14:	81bb      	strh	r3, [r7, #12]
 800ee16:	89bb      	ldrh	r3, [r7, #12]
 800ee18:	f083 0320 	eor.w	r3, r3, #32
 800ee1c:	81bb      	strh	r3, [r7, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	441a      	add	r2, r3
 800ee28:	89bb      	ldrh	r3, [r7, #12]
 800ee2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	8013      	strh	r3, [r2, #0]
 800ee3e:	e04b      	b.n	800eed8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	82fb      	strh	r3, [r7, #22]
 800ee4e:	8afb      	ldrh	r3, [r7, #22]
 800ee50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d01b      	beq.n	800ee90 <USB_EPClearStall+0x106>
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee6e:	82bb      	strh	r3, [r7, #20]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	441a      	add	r2, r3
 800ee7a:	8abb      	ldrh	r3, [r7, #20]
 800ee7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ee88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4413      	add	r3, r2
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eea6:	827b      	strh	r3, [r7, #18]
 800eea8:	8a7b      	ldrh	r3, [r7, #18]
 800eeaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eeae:	827b      	strh	r3, [r7, #18]
 800eeb0:	8a7b      	ldrh	r3, [r7, #18]
 800eeb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eeb6:	827b      	strh	r3, [r7, #18]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	441a      	add	r2, r3
 800eec2:	8a7b      	ldrh	r3, [r7, #18]
 800eec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800eed8:	2300      	movs	r3, #0
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	371c      	adds	r7, #28
 800eede:	46bd      	mov	sp, r7
 800eee0:	bc80      	pop	{r7}
 800eee2:	4770      	bx	lr

0800eee4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	460b      	mov	r3, r1
 800eeee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eef0:	78fb      	ldrb	r3, [r7, #3]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d103      	bne.n	800eefe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2280      	movs	r2, #128	@ 0x80
 800eefa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	370c      	adds	r7, #12
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bc80      	pop	{r7}
 800ef08:	4770      	bx	lr

0800ef0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	b083      	sub	sp, #12
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bc80      	pop	{r7}
 800ef1c:	4770      	bx	lr

0800ef1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b083      	sub	sp, #12
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bc80      	pop	{r7}
 800ef30:	4770      	bx	lr

0800ef32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b085      	sub	sp, #20
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ef44:	68fb      	ldr	r3, [r7, #12]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bc80      	pop	{r7}
 800ef4e:	4770      	bx	lr

0800ef50 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bc80      	pop	{r7}
 800ef64:	4770      	bx	lr

0800ef66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b08b      	sub	sp, #44	@ 0x2c
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	60f8      	str	r0, [r7, #12]
 800ef6e:	60b9      	str	r1, [r7, #8]
 800ef70:	4611      	mov	r1, r2
 800ef72:	461a      	mov	r2, r3
 800ef74:	460b      	mov	r3, r1
 800ef76:	80fb      	strh	r3, [r7, #6]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ef7c:	88bb      	ldrh	r3, [r7, #4]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	085b      	lsrs	r3, r3, #1
 800ef82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ef8c:	88fb      	ldrh	r3, [r7, #6]
 800ef8e:	005a      	lsls	r2, r3, #1
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef9e:	e01f      	b.n	800efe0 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	3301      	adds	r3, #1
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	b21b      	sxth	r3, r3
 800efae:	021b      	lsls	r3, r3, #8
 800efb0:	b21a      	sxth	r2, r3
 800efb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	b21b      	sxth	r3, r3
 800efba:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	8a7a      	ldrh	r2, [r7, #18]
 800efc0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	3302      	adds	r3, #2
 800efc6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	3302      	adds	r3, #2
 800efcc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	3301      	adds	r3, #1
 800efd2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	3301      	adds	r3, #1
 800efd8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800efda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efdc:	3b01      	subs	r3, #1
 800efde:	627b      	str	r3, [r7, #36]	@ 0x24
 800efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1dc      	bne.n	800efa0 <USB_WritePMA+0x3a>
  }
}
 800efe6:	bf00      	nop
 800efe8:	bf00      	nop
 800efea:	372c      	adds	r7, #44	@ 0x2c
 800efec:	46bd      	mov	sp, r7
 800efee:	bc80      	pop	{r7}
 800eff0:	4770      	bx	lr

0800eff2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eff2:	b480      	push	{r7}
 800eff4:	b08b      	sub	sp, #44	@ 0x2c
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	60b9      	str	r1, [r7, #8]
 800effc:	4611      	mov	r1, r2
 800effe:	461a      	mov	r2, r3
 800f000:	460b      	mov	r3, r1
 800f002:	80fb      	strh	r3, [r7, #6]
 800f004:	4613      	mov	r3, r2
 800f006:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f008:	88bb      	ldrh	r3, [r7, #4]
 800f00a:	085b      	lsrs	r3, r3, #1
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f018:	88fb      	ldrh	r3, [r7, #6]
 800f01a:	005a      	lsls	r2, r3, #1
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	4413      	add	r3, r2
 800f020:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f024:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	627b      	str	r3, [r7, #36]	@ 0x24
 800f02a:	e01b      	b.n	800f064 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	b29b      	uxth	r3, r3
 800f032:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f034:	6a3b      	ldr	r3, [r7, #32]
 800f036:	3302      	adds	r3, #2
 800f038:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	3301      	adds	r3, #1
 800f046:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	0a1b      	lsrs	r3, r3, #8
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	3301      	adds	r3, #1
 800f056:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800f058:	6a3b      	ldr	r3, [r7, #32]
 800f05a:	3302      	adds	r3, #2
 800f05c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800f05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f060:	3b01      	subs	r3, #1
 800f062:	627b      	str	r3, [r7, #36]	@ 0x24
 800f064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1e0      	bne.n	800f02c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f06a:	88bb      	ldrh	r3, [r7, #4]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	b29b      	uxth	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d007      	beq.n	800f086 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	881b      	ldrh	r3, [r3, #0]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	b2da      	uxtb	r2, r3
 800f082:	69fb      	ldr	r3, [r7, #28]
 800f084:	701a      	strb	r2, [r3, #0]
  }
}
 800f086:	bf00      	nop
 800f088:	372c      	adds	r7, #44	@ 0x2c
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bc80      	pop	{r7}
 800f08e:	4770      	bx	lr

0800f090 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800f098:	4b22      	ldr	r3, [pc, #136]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800f09e:	4b21      	ldr	r3, [pc, #132]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800f0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <WIZCHIP_READ+0x24>
 800f0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d114      	bne.n	800f0de <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800f0b4:	4b1b      	ldr	r3, [pc, #108]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	0c12      	lsrs	r2, r2, #16
 800f0bc:	b2d2      	uxtb	r2, r2
 800f0be:	4610      	mov	r0, r2
 800f0c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800f0c2:	4b18      	ldr	r3, [pc, #96]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0c4:	6a1b      	ldr	r3, [r3, #32]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	0a12      	lsrs	r2, r2, #8
 800f0ca:	b2d2      	uxtb	r2, r2
 800f0cc:	4610      	mov	r0, r2
 800f0ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800f0d0:	4b14      	ldr	r3, [pc, #80]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	b2d2      	uxtb	r2, r2
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
 800f0dc:	e011      	b.n	800f102 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	0c1b      	lsrs	r3, r3, #16
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	0a1b      	lsrs	r3, r3, #8
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800f0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f8:	f107 020c 	add.w	r2, r7, #12
 800f0fc:	2103      	movs	r1, #3
 800f0fe:	4610      	mov	r0, r2
 800f100:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800f102:	4b08      	ldr	r3, [pc, #32]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f104:	69db      	ldr	r3, [r3, #28]
 800f106:	4798      	blx	r3
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800f10c:	4b05      	ldr	r3, [pc, #20]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800f112:	4b04      	ldr	r3, [pc, #16]	@ (800f124 <WIZCHIP_READ+0x94>)
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	4798      	blx	r3
   return ret;
 800f118:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	20000024 	.word	0x20000024

0800f128 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	460b      	mov	r3, r1
 800f132:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800f134:	4b22      	ldr	r3, [pc, #136]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	4798      	blx	r3
   WIZCHIP.CS._select();
 800f13a:	4b21      	ldr	r3, [pc, #132]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f13c:	695b      	ldr	r3, [r3, #20]
 800f13e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f043 0304 	orr.w	r3, r3, #4
 800f146:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800f148:	4b1d      	ldr	r3, [pc, #116]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d119      	bne.n	800f184 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800f150:	4b1b      	ldr	r3, [pc, #108]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f152:	6a1b      	ldr	r3, [r3, #32]
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	0c12      	lsrs	r2, r2, #16
 800f158:	b2d2      	uxtb	r2, r2
 800f15a:	4610      	mov	r0, r2
 800f15c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800f15e:	4b18      	ldr	r3, [pc, #96]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	0a12      	lsrs	r2, r2, #8
 800f166:	b2d2      	uxtb	r2, r2
 800f168:	4610      	mov	r0, r2
 800f16a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800f16c:	4b14      	ldr	r3, [pc, #80]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f16e:	6a1b      	ldr	r3, [r3, #32]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	b2d2      	uxtb	r2, r2
 800f174:	4610      	mov	r0, r2
 800f176:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800f178:	4b11      	ldr	r3, [pc, #68]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f17a:	6a1b      	ldr	r3, [r3, #32]
 800f17c:	78fa      	ldrb	r2, [r7, #3]
 800f17e:	4610      	mov	r0, r2
 800f180:	4798      	blx	r3
 800f182:	e013      	b.n	800f1ac <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	0c1b      	lsrs	r3, r3, #16
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	0a1b      	lsrs	r3, r3, #8
 800f190:	b2db      	uxtb	r3, r3
 800f192:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	b2db      	uxtb	r3, r3
 800f198:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800f19a:	78fb      	ldrb	r3, [r7, #3]
 800f19c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800f19e:	4b08      	ldr	r3, [pc, #32]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a2:	f107 020c 	add.w	r2, r7, #12
 800f1a6:	2104      	movs	r1, #4
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800f1ac:	4b04      	ldr	r3, [pc, #16]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f1ae:	699b      	ldr	r3, [r3, #24]
 800f1b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800f1b2:	4b03      	ldr	r3, [pc, #12]	@ (800f1c0 <WIZCHIP_WRITE+0x98>)
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	4798      	blx	r3
}
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20000024 	.word	0x20000024

0800f1c4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800f1d2:	4b2b      	ldr	r3, [pc, #172]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 800f1d8:	4b29      	ldr	r3, [pc, #164]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1da:	695b      	ldr	r3, [r3, #20]
 800f1dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800f1de:	4b28      	ldr	r3, [pc, #160]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <WIZCHIP_READ_BUF+0x2a>
 800f1e6:	4b26      	ldr	r3, [pc, #152]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d126      	bne.n	800f23c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800f1ee:	4b24      	ldr	r3, [pc, #144]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	0c12      	lsrs	r2, r2, #16
 800f1f6:	b2d2      	uxtb	r2, r2
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800f1fc:	4b20      	ldr	r3, [pc, #128]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f1fe:	6a1b      	ldr	r3, [r3, #32]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	0a12      	lsrs	r2, r2, #8
 800f204:	b2d2      	uxtb	r2, r2
 800f206:	4610      	mov	r0, r2
 800f208:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800f20a:	4b1d      	ldr	r3, [pc, #116]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	b2d2      	uxtb	r2, r2
 800f212:	4610      	mov	r0, r2
 800f214:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800f216:	2300      	movs	r3, #0
 800f218:	82fb      	strh	r3, [r7, #22]
 800f21a:	e00a      	b.n	800f232 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800f21c:	4b18      	ldr	r3, [pc, #96]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	8afa      	ldrh	r2, [r7, #22]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	188c      	adds	r4, r1, r2
 800f226:	4798      	blx	r3
 800f228:	4603      	mov	r3, r0
 800f22a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800f22c:	8afb      	ldrh	r3, [r7, #22]
 800f22e:	3301      	adds	r3, #1
 800f230:	82fb      	strh	r3, [r7, #22]
 800f232:	8afa      	ldrh	r2, [r7, #22]
 800f234:	88fb      	ldrh	r3, [r7, #6]
 800f236:	429a      	cmp	r2, r3
 800f238:	d3f0      	bcc.n	800f21c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800f23a:	e017      	b.n	800f26c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	0c1b      	lsrs	r3, r3, #16
 800f240:	b2db      	uxtb	r3, r3
 800f242:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	0a1b      	lsrs	r3, r3, #8
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800f252:	4b0b      	ldr	r3, [pc, #44]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f256:	f107 0210 	add.w	r2, r7, #16
 800f25a:	2103      	movs	r1, #3
 800f25c:	4610      	mov	r0, r2
 800f25e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800f260:	4b07      	ldr	r3, [pc, #28]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f264:	88fa      	ldrh	r2, [r7, #6]
 800f266:	4611      	mov	r1, r2
 800f268:	68b8      	ldr	r0, [r7, #8]
 800f26a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800f26c:	4b04      	ldr	r3, [pc, #16]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800f272:	4b03      	ldr	r3, [pc, #12]	@ (800f280 <WIZCHIP_READ_BUF+0xbc>)
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	4798      	blx	r3
}
 800f278:	bf00      	nop
 800f27a:	371c      	adds	r7, #28
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd90      	pop	{r4, r7, pc}
 800f280:	20000024 	.word	0x20000024

0800f284 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4613      	mov	r3, r2
 800f290:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800f292:	4b2b      	ldr	r3, [pc, #172]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	4798      	blx	r3
   WIZCHIP.CS._select();
 800f298:	4b29      	ldr	r3, [pc, #164]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f043 0304 	orr.w	r3, r3, #4
 800f2a4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800f2a6:	4b26      	ldr	r3, [pc, #152]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d126      	bne.n	800f2fc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800f2ae:	4b24      	ldr	r3, [pc, #144]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	0c12      	lsrs	r2, r2, #16
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800f2bc:	4b20      	ldr	r3, [pc, #128]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f2be:	6a1b      	ldr	r3, [r3, #32]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	0a12      	lsrs	r2, r2, #8
 800f2c4:	b2d2      	uxtb	r2, r2
 800f2c6:	4610      	mov	r0, r2
 800f2c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800f2ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f2cc:	6a1b      	ldr	r3, [r3, #32]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	b2d2      	uxtb	r2, r2
 800f2d2:	4610      	mov	r0, r2
 800f2d4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	82fb      	strh	r3, [r7, #22]
 800f2da:	e00a      	b.n	800f2f2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800f2dc:	4b18      	ldr	r3, [pc, #96]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f2de:	6a1b      	ldr	r3, [r3, #32]
 800f2e0:	8afa      	ldrh	r2, [r7, #22]
 800f2e2:	68b9      	ldr	r1, [r7, #8]
 800f2e4:	440a      	add	r2, r1
 800f2e6:	7812      	ldrb	r2, [r2, #0]
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800f2ec:	8afb      	ldrh	r3, [r7, #22]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	82fb      	strh	r3, [r7, #22]
 800f2f2:	8afa      	ldrh	r2, [r7, #22]
 800f2f4:	88fb      	ldrh	r3, [r7, #6]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d3f0      	bcc.n	800f2dc <WIZCHIP_WRITE_BUF+0x58>
 800f2fa:	e017      	b.n	800f32c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	0c1b      	lsrs	r3, r3, #16
 800f300:	b2db      	uxtb	r3, r3
 800f302:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	0a1b      	lsrs	r3, r3, #8
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800f312:	4b0b      	ldr	r3, [pc, #44]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f316:	f107 0210 	add.w	r2, r7, #16
 800f31a:	2103      	movs	r1, #3
 800f31c:	4610      	mov	r0, r2
 800f31e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800f320:	4b07      	ldr	r3, [pc, #28]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	4611      	mov	r1, r2
 800f328:	68b8      	ldr	r0, [r7, #8]
 800f32a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800f32c:	4b04      	ldr	r3, [pc, #16]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800f332:	4b03      	ldr	r3, [pc, #12]	@ (800f340 <WIZCHIP_WRITE_BUF+0xbc>)
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	4798      	blx	r3
}
 800f338:	bf00      	nop
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	20000024 	.word	0x20000024

0800f344 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800f344:	b590      	push	{r4, r7, lr}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800f34e:	2300      	movs	r3, #0
 800f350:	81fb      	strh	r3, [r7, #14]
 800f352:	2300      	movs	r3, #0
 800f354:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800f356:	79fb      	ldrb	r3, [r7, #7]
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	3301      	adds	r3, #1
 800f35c:	00db      	lsls	r3, r3, #3
 800f35e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f362:	4618      	mov	r0, r3
 800f364:	f7ff fe94 	bl	800f090 <WIZCHIP_READ>
 800f368:	4603      	mov	r3, r0
 800f36a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800f36c:	89bb      	ldrh	r3, [r7, #12]
 800f36e:	021b      	lsls	r3, r3, #8
 800f370:	b29c      	uxth	r4, r3
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	3301      	adds	r3, #1
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fe86 	bl	800f090 <WIZCHIP_READ>
 800f384:	4603      	mov	r3, r0
 800f386:	4423      	add	r3, r4
 800f388:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800f38a:	89bb      	ldrh	r3, [r7, #12]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d019      	beq.n	800f3c4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	3301      	adds	r3, #1
 800f396:	00db      	lsls	r3, r3, #3
 800f398:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7ff fe77 	bl	800f090 <WIZCHIP_READ>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800f3a6:	89fb      	ldrh	r3, [r7, #14]
 800f3a8:	021b      	lsls	r3, r3, #8
 800f3aa:	b29c      	uxth	r4, r3
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff fe69 	bl	800f090 <WIZCHIP_READ>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	4423      	add	r3, r4
 800f3c2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800f3c4:	89fa      	ldrh	r2, [r7, #14]
 800f3c6:	89bb      	ldrh	r3, [r7, #12]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d1c4      	bne.n	800f356 <getSn_TX_FSR+0x12>
   return val;
 800f3cc:	89fb      	ldrh	r3, [r7, #14]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}

0800f3d6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800f3d6:	b590      	push	{r4, r7, lr}
 800f3d8:	b085      	sub	sp, #20
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	4603      	mov	r3, r0
 800f3de:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	81fb      	strh	r3, [r7, #14]
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff fe4b 	bl	800f090 <WIZCHIP_READ>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800f3fe:	89bb      	ldrh	r3, [r7, #12]
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	b29c      	uxth	r4, r3
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	3301      	adds	r3, #1
 800f40a:	00db      	lsls	r3, r3, #3
 800f40c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fe3d 	bl	800f090 <WIZCHIP_READ>
 800f416:	4603      	mov	r3, r0
 800f418:	4423      	add	r3, r4
 800f41a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800f41c:	89bb      	ldrh	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d019      	beq.n	800f456 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	3301      	adds	r3, #1
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff fe2e 	bl	800f090 <WIZCHIP_READ>
 800f434:	4603      	mov	r3, r0
 800f436:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800f438:	89fb      	ldrh	r3, [r7, #14]
 800f43a:	021b      	lsls	r3, r3, #8
 800f43c:	b29c      	uxth	r4, r3
 800f43e:	79fb      	ldrb	r3, [r7, #7]
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	3301      	adds	r3, #1
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff fe20 	bl	800f090 <WIZCHIP_READ>
 800f450:	4603      	mov	r3, r0
 800f452:	4423      	add	r3, r4
 800f454:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800f456:	89fa      	ldrh	r2, [r7, #14]
 800f458:	89bb      	ldrh	r3, [r7, #12]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d1c4      	bne.n	800f3e8 <getSn_RX_RSR+0x12>
   return val;
 800f45e:	89fb      	ldrh	r3, [r7, #14]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	bd90      	pop	{r4, r7, pc}

0800f468 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	6039      	str	r1, [r7, #0]
 800f472:	71fb      	strb	r3, [r7, #7]
 800f474:	4613      	mov	r3, r2
 800f476:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800f478:	2300      	movs	r3, #0
 800f47a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800f47c:	2300      	movs	r3, #0
 800f47e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800f480:	88bb      	ldrh	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d046      	beq.n	800f514 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	3301      	adds	r3, #1
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff fdfc 	bl	800f090 <WIZCHIP_READ>
 800f498:	4603      	mov	r3, r0
 800f49a:	021b      	lsls	r3, r3, #8
 800f49c:	b29c      	uxth	r4, r3
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7ff fdf0 	bl	800f090 <WIZCHIP_READ>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	4423      	add	r3, r4
 800f4b4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800f4b6:	89fb      	ldrh	r3, [r7, #14]
 800f4b8:	021a      	lsls	r2, r3, #8
 800f4ba:	79fb      	ldrb	r3, [r7, #7]
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	3302      	adds	r3, #2
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800f4c6:	88bb      	ldrh	r3, [r7, #4]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	68b8      	ldr	r0, [r7, #8]
 800f4ce:	f7ff fed9 	bl	800f284 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800f4d2:	89fa      	ldrh	r2, [r7, #14]
 800f4d4:	88bb      	ldrh	r3, [r7, #4]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800f4da:	79fb      	ldrb	r3, [r7, #7]
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	3301      	adds	r3, #1
 800f4e0:	00db      	lsls	r3, r3, #3
 800f4e2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	89fb      	ldrh	r3, [r7, #14]
 800f4ea:	0a1b      	lsrs	r3, r3, #8
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	4610      	mov	r0, r2
 800f4f4:	f7ff fe18 	bl	800f128 <WIZCHIP_WRITE>
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800f504:	461a      	mov	r2, r3
 800f506:	89fb      	ldrh	r3, [r7, #14]
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	4619      	mov	r1, r3
 800f50c:	4610      	mov	r0, r2
 800f50e:	f7ff fe0b 	bl	800f128 <WIZCHIP_WRITE>
 800f512:	e000      	b.n	800f516 <wiz_send_data+0xae>
   if(len == 0)  return;
 800f514:	bf00      	nop
}
 800f516:	3714      	adds	r7, #20
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}

0800f51c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	71fb      	strb	r3, [r7, #7]
 800f528:	4613      	mov	r3, r2
 800f52a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800f534:	88bb      	ldrh	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d046      	beq.n	800f5c8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	3301      	adds	r3, #1
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800f546:	4618      	mov	r0, r3
 800f548:	f7ff fda2 	bl	800f090 <WIZCHIP_READ>
 800f54c:	4603      	mov	r3, r0
 800f54e:	021b      	lsls	r3, r3, #8
 800f550:	b29c      	uxth	r4, r3
 800f552:	79fb      	ldrb	r3, [r7, #7]
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	3301      	adds	r3, #1
 800f558:	00db      	lsls	r3, r3, #3
 800f55a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fd96 	bl	800f090 <WIZCHIP_READ>
 800f564:	4603      	mov	r3, r0
 800f566:	4423      	add	r3, r4
 800f568:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800f56a:	89fb      	ldrh	r3, [r7, #14]
 800f56c:	021a      	lsls	r2, r3, #8
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	3303      	adds	r3, #3
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	4413      	add	r3, r2
 800f578:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800f57a:	88bb      	ldrh	r3, [r7, #4]
 800f57c:	461a      	mov	r2, r3
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	68b8      	ldr	r0, [r7, #8]
 800f582:	f7ff fe1f 	bl	800f1c4 <WIZCHIP_READ_BUF>
   ptr += len;
 800f586:	89fa      	ldrh	r2, [r7, #14]
 800f588:	88bb      	ldrh	r3, [r7, #4]
 800f58a:	4413      	add	r3, r2
 800f58c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	3301      	adds	r3, #1
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800f59a:	461a      	mov	r2, r3
 800f59c:	89fb      	ldrh	r3, [r7, #14]
 800f59e:	0a1b      	lsrs	r3, r3, #8
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	f7ff fdbe 	bl	800f128 <WIZCHIP_WRITE>
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	89fb      	ldrh	r3, [r7, #14]
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	4619      	mov	r1, r3
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	f7ff fdb1 	bl	800f128 <WIZCHIP_WRITE>
 800f5c6:	e000      	b.n	800f5ca <wiz_recv_data+0xae>
   if(len == 0) return;
 800f5c8:	bf00      	nop
}
 800f5ca:	3714      	adds	r7, #20
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd90      	pop	{r4, r7, pc}

0800f5d0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800f5d0:	b590      	push	{r4, r7, lr}
 800f5d2:	b085      	sub	sp, #20
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	460a      	mov	r2, r1
 800f5da:	71fb      	strb	r3, [r7, #7]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff fd4d 	bl	800f090 <WIZCHIP_READ>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	021b      	lsls	r3, r3, #8
 800f5fa:	b29c      	uxth	r4, r3
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	3301      	adds	r3, #1
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fd41 	bl	800f090 <WIZCHIP_READ>
 800f60e:	4603      	mov	r3, r0
 800f610:	4423      	add	r3, r4
 800f612:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 800f614:	89fa      	ldrh	r2, [r7, #14]
 800f616:	88bb      	ldrh	r3, [r7, #4]
 800f618:	4413      	add	r3, r2
 800f61a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800f61c:	79fb      	ldrb	r3, [r7, #7]
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	3301      	adds	r3, #1
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800f628:	461a      	mov	r2, r3
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	0a1b      	lsrs	r3, r3, #8
 800f62e:	b29b      	uxth	r3, r3
 800f630:	b2db      	uxtb	r3, r3
 800f632:	4619      	mov	r1, r3
 800f634:	4610      	mov	r0, r2
 800f636:	f7ff fd77 	bl	800f128 <WIZCHIP_WRITE>
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	3301      	adds	r3, #1
 800f640:	00db      	lsls	r3, r3, #3
 800f642:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800f646:	461a      	mov	r2, r3
 800f648:	89fb      	ldrh	r3, [r7, #14]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	4619      	mov	r1, r3
 800f64e:	4610      	mov	r0, r2
 800f650:	f7ff fd6a 	bl	800f128 <WIZCHIP_WRITE>
}
 800f654:	bf00      	nop
 800f656:	3714      	adds	r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd90      	pop	{r4, r7, pc}

0800f65c <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 800f65c:	b590      	push	{r4, r7, lr}
 800f65e:	b089      	sub	sp, #36	@ 0x24
 800f660:	af00      	add	r7, sp, #0
 800f662:	4604      	mov	r4, r0
 800f664:	4608      	mov	r0, r1
 800f666:	4611      	mov	r1, r2
 800f668:	461a      	mov	r2, r3
 800f66a:	4623      	mov	r3, r4
 800f66c:	71fb      	strb	r3, [r7, #7]
 800f66e:	4603      	mov	r3, r0
 800f670:	71bb      	strb	r3, [r7, #6]
 800f672:	460b      	mov	r3, r1
 800f674:	80bb      	strh	r3, [r7, #4]
 800f676:	4613      	mov	r3, r2
 800f678:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800f67e:	79fb      	ldrb	r3, [r7, #7]
 800f680:	2b07      	cmp	r3, #7
 800f682:	d902      	bls.n	800f68a <socket+0x2e>
 800f684:	f04f 33ff 	mov.w	r3, #4294967295
 800f688:	e10d      	b.n	800f8a6 <socket+0x24a>
   switch (protocol & 0x0F)
 800f68a:	79bb      	ldrb	r3, [r7, #6]
 800f68c:	f003 030f 	and.w	r3, r3, #15
 800f690:	3b01      	subs	r3, #1
 800f692:	2b0d      	cmp	r3, #13
 800f694:	d82c      	bhi.n	800f6f0 <socket+0x94>
 800f696:	a201      	add	r2, pc, #4	@ (adr r2, 800f69c <socket+0x40>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f6d5 	.word	0x0800f6d5
 800f6a0:	0800f6f7 	.word	0x0800f6f7
 800f6a4:	0800f6f7 	.word	0x0800f6f7
 800f6a8:	0800f6f7 	.word	0x0800f6f7
 800f6ac:	0800f6f1 	.word	0x0800f6f1
 800f6b0:	0800f6f1 	.word	0x0800f6f1
 800f6b4:	0800f6f1 	.word	0x0800f6f1
 800f6b8:	0800f6f1 	.word	0x0800f6f1
 800f6bc:	0800f6f1 	.word	0x0800f6f1
 800f6c0:	0800f6f7 	.word	0x0800f6f7
 800f6c4:	0800f6f7 	.word	0x0800f6f7
 800f6c8:	0800f6f1 	.word	0x0800f6f1
 800f6cc:	0800f6f1 	.word	0x0800f6f1
 800f6d0:	0800f6f7 	.word	0x0800f6f7
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 800f6d4:	f107 0308 	add.w	r3, r7, #8
 800f6d8:	2204      	movs	r2, #4
 800f6da:	4619      	mov	r1, r3
 800f6dc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800f6e0:	f7ff fd70 	bl	800f1c4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d107      	bne.n	800f6fa <socket+0x9e>
 800f6ea:	f06f 0302 	mvn.w	r3, #2
 800f6ee:	e0da      	b.n	800f8a6 <socket+0x24a>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 800f6f0:	f06f 0304 	mvn.w	r3, #4
 800f6f4:	e0d7      	b.n	800f8a6 <socket+0x24a>
         break; 
 800f6f6:	bf00      	nop
 800f6f8:	e000      	b.n	800f6fc <socket+0xa0>
            break;
 800f6fa:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800f6fc:	78fb      	ldrb	r3, [r7, #3]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <socket+0xb0>
 800f706:	f06f 0305 	mvn.w	r3, #5
 800f70a:	e0cc      	b.n	800f8a6 <socket+0x24a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d028      	beq.n	800f764 <socket+0x108>
   {
      switch(protocol)
 800f712:	79bb      	ldrb	r3, [r7, #6]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d002      	beq.n	800f71e <socket+0xc2>
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d008      	beq.n	800f72e <socket+0xd2>
         break;

#endif 

         default:
            break;
 800f71c:	e022      	b.n	800f764 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800f71e:	78fb      	ldrb	r3, [r7, #3]
 800f720:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800f724:	2b00      	cmp	r3, #0
 800f726:	d11a      	bne.n	800f75e <socket+0x102>
 800f728:	f06f 0305 	mvn.w	r3, #5
 800f72c:	e0bb      	b.n	800f8a6 <socket+0x24a>
   	      if(flag & SF_IGMP_VER2)
 800f72e:	78fb      	ldrb	r3, [r7, #3]
 800f730:	f003 0320 	and.w	r3, r3, #32
 800f734:	2b00      	cmp	r3, #0
 800f736:	d006      	beq.n	800f746 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800f738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	db02      	blt.n	800f746 <socket+0xea>
 800f740:	f06f 0305 	mvn.w	r3, #5
 800f744:	e0af      	b.n	800f8a6 <socket+0x24a>
      	      if(flag & SF_UNI_BLOCK)
 800f746:	78fb      	ldrb	r3, [r7, #3]
 800f748:	f003 0310 	and.w	r3, r3, #16
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d008      	beq.n	800f762 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800f750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f754:	2b00      	cmp	r3, #0
 800f756:	db04      	blt.n	800f762 <socket+0x106>
 800f758:	f06f 0305 	mvn.w	r3, #5
 800f75c:	e0a3      	b.n	800f8a6 <socket+0x24a>
   	      break;
 800f75e:	bf00      	nop
 800f760:	e000      	b.n	800f764 <socket+0x108>
         break;
 800f762:	bf00      	nop
      }
   }
   close(sn);
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	4618      	mov	r0, r3
 800f768:	f000 f8ac 	bl	800f8c4 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800f76c:	79fb      	ldrb	r3, [r7, #7]
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	3301      	adds	r3, #1
 800f772:	00d8      	lsls	r0, r3, #3
 800f774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f778:	f023 030f 	bic.w	r3, r3, #15
 800f77c:	b25a      	sxtb	r2, r3
 800f77e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f782:	4313      	orrs	r3, r2
 800f784:	b25b      	sxtb	r3, r3
 800f786:	b2db      	uxtb	r3, r3
 800f788:	4619      	mov	r1, r3
 800f78a:	f7ff fccd 	bl	800f128 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 800f78e:	88bb      	ldrh	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d110      	bne.n	800f7b6 <socket+0x15a>
   {
      port = sock_any_port++;
 800f794:	4b46      	ldr	r3, [pc, #280]	@ (800f8b0 <socket+0x254>)
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	b291      	uxth	r1, r2
 800f79c:	4a44      	ldr	r2, [pc, #272]	@ (800f8b0 <socket+0x254>)
 800f79e:	8011      	strh	r1, [r2, #0]
 800f7a0:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800f7a2:	4b43      	ldr	r3, [pc, #268]	@ (800f8b0 <socket+0x254>)
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d103      	bne.n	800f7b6 <socket+0x15a>
 800f7ae:	4b40      	ldr	r3, [pc, #256]	@ (800f8b0 <socket+0x254>)
 800f7b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f7b4:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	00db      	lsls	r3, r3, #3
 800f7be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	88bb      	ldrh	r3, [r7, #4]
 800f7c6:	0a1b      	lsrs	r3, r3, #8
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	f7ff fcaa 	bl	800f128 <WIZCHIP_WRITE>
 800f7d4:	79fb      	ldrb	r3, [r7, #7]
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	3301      	adds	r3, #1
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	88bb      	ldrh	r3, [r7, #4]
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	f7ff fc9d 	bl	800f128 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800f7ee:	79fb      	ldrb	r3, [r7, #7]
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff fc93 	bl	800f128 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800f802:	bf00      	nop
 800f804:	79fb      	ldrb	r3, [r7, #7]
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	3301      	adds	r3, #1
 800f80a:	00db      	lsls	r3, r3, #3
 800f80c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff fc3d 	bl	800f090 <WIZCHIP_READ>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1f3      	bne.n	800f804 <socket+0x1a8>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	2201      	movs	r2, #1
 800f820:	fa02 f303 	lsl.w	r3, r2, r3
 800f824:	b21b      	sxth	r3, r3
 800f826:	43db      	mvns	r3, r3
 800f828:	b21a      	sxth	r2, r3
 800f82a:	4b22      	ldr	r3, [pc, #136]	@ (800f8b4 <socket+0x258>)
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	b21b      	sxth	r3, r3
 800f830:	4013      	ands	r3, r2
 800f832:	b21b      	sxth	r3, r3
 800f834:	b29a      	uxth	r2, r3
 800f836:	4b1f      	ldr	r3, [pc, #124]	@ (800f8b4 <socket+0x258>)
 800f838:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800f83a:	78fb      	ldrb	r3, [r7, #3]
 800f83c:	f003 0201 	and.w	r2, r3, #1
 800f840:	79fb      	ldrb	r3, [r7, #7]
 800f842:	fa02 f303 	lsl.w	r3, r2, r3
 800f846:	b21a      	sxth	r2, r3
 800f848:	4b1a      	ldr	r3, [pc, #104]	@ (800f8b4 <socket+0x258>)
 800f84a:	881b      	ldrh	r3, [r3, #0]
 800f84c:	b21b      	sxth	r3, r3
 800f84e:	4313      	orrs	r3, r2
 800f850:	b21b      	sxth	r3, r3
 800f852:	b29a      	uxth	r2, r3
 800f854:	4b17      	ldr	r3, [pc, #92]	@ (800f8b4 <socket+0x258>)
 800f856:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	2201      	movs	r2, #1
 800f85c:	fa02 f303 	lsl.w	r3, r2, r3
 800f860:	b21b      	sxth	r3, r3
 800f862:	43db      	mvns	r3, r3
 800f864:	b21a      	sxth	r2, r3
 800f866:	4b14      	ldr	r3, [pc, #80]	@ (800f8b8 <socket+0x25c>)
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b21b      	sxth	r3, r3
 800f86c:	4013      	ands	r3, r2
 800f86e:	b21b      	sxth	r3, r3
 800f870:	b29a      	uxth	r2, r3
 800f872:	4b11      	ldr	r3, [pc, #68]	@ (800f8b8 <socket+0x25c>)
 800f874:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	4a10      	ldr	r2, [pc, #64]	@ (800f8bc <socket+0x260>)
 800f87a:	2100      	movs	r1, #0
 800f87c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	4a0f      	ldr	r2, [pc, #60]	@ (800f8c0 <socket+0x264>)
 800f884:	2100      	movs	r1, #0
 800f886:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800f888:	bf00      	nop
 800f88a:	79fb      	ldrb	r3, [r7, #7]
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	3301      	adds	r3, #1
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800f896:	4618      	mov	r0, r3
 800f898:	f7ff fbfa 	bl	800f090 <WIZCHIP_READ>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d0f3      	beq.n	800f88a <socket+0x22e>
   return (int8_t)sn;
 800f8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3724      	adds	r7, #36	@ 0x24
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd90      	pop	{r4, r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	20000022 	.word	0x20000022
 800f8b4:	20000ac0 	.word	0x20000ac0
 800f8b8:	20000ac2 	.word	0x20000ac2
 800f8bc:	20000ac4 	.word	0x20000ac4
 800f8c0:	20000ad4 	.word	0x20000ad4

0800f8c4 <close>:

int8_t close(uint8_t sn)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	2b07      	cmp	r3, #7
 800f8d2:	d902      	bls.n	800f8da <close+0x16>
 800f8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d8:	e055      	b.n	800f986 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	3301      	adds	r3, #1
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f8e6:	2110      	movs	r1, #16
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7ff fc1d 	bl	800f128 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800f8ee:	bf00      	nop
 800f8f0:	79fb      	ldrb	r3, [r7, #7]
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	00db      	lsls	r3, r3, #3
 800f8f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7ff fbc7 	bl	800f090 <WIZCHIP_READ>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f3      	bne.n	800f8f0 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 800f908:	79fb      	ldrb	r3, [r7, #7]
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	3301      	adds	r3, #1
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f914:	211f      	movs	r1, #31
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff fc06 	bl	800f128 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	2201      	movs	r2, #1
 800f920:	fa02 f303 	lsl.w	r3, r2, r3
 800f924:	b21b      	sxth	r3, r3
 800f926:	43db      	mvns	r3, r3
 800f928:	b21a      	sxth	r2, r3
 800f92a:	4b19      	ldr	r3, [pc, #100]	@ (800f990 <close+0xcc>)
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	b21b      	sxth	r3, r3
 800f930:	4013      	ands	r3, r2
 800f932:	b21b      	sxth	r3, r3
 800f934:	b29a      	uxth	r2, r3
 800f936:	4b16      	ldr	r3, [pc, #88]	@ (800f990 <close+0xcc>)
 800f938:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 800f93a:	79fb      	ldrb	r3, [r7, #7]
 800f93c:	2201      	movs	r2, #1
 800f93e:	fa02 f303 	lsl.w	r3, r2, r3
 800f942:	b21b      	sxth	r3, r3
 800f944:	43db      	mvns	r3, r3
 800f946:	b21a      	sxth	r2, r3
 800f948:	4b12      	ldr	r3, [pc, #72]	@ (800f994 <close+0xd0>)
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	b21b      	sxth	r3, r3
 800f94e:	4013      	ands	r3, r2
 800f950:	b21b      	sxth	r3, r3
 800f952:	b29a      	uxth	r2, r3
 800f954:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <close+0xd0>)
 800f956:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	4a0f      	ldr	r2, [pc, #60]	@ (800f998 <close+0xd4>)
 800f95c:	2100      	movs	r1, #0
 800f95e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800f962:	79fb      	ldrb	r3, [r7, #7]
 800f964:	4a0d      	ldr	r2, [pc, #52]	@ (800f99c <close+0xd8>)
 800f966:	2100      	movs	r1, #0
 800f968:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 800f96a:	bf00      	nop
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	3301      	adds	r3, #1
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff fb89 	bl	800f090 <WIZCHIP_READ>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d1f3      	bne.n	800f96c <close+0xa8>
   return SOCK_OK;
 800f984:	2301      	movs	r3, #1
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20000ac0 	.word	0x20000ac0
 800f994:	20000ac2 	.word	0x20000ac2
 800f998:	20000ac4 	.word	0x20000ac4
 800f99c:	20000ad4 	.word	0x20000ad4

0800f9a0 <listen>:

int8_t listen(uint8_t sn)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	2b07      	cmp	r3, #7
 800f9ae:	d902      	bls.n	800f9b6 <listen+0x16>
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	e049      	b.n	800fa4a <listen+0xaa>
   CHECK_TCPMODE(); 
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff fb66 	bl	800f090 <WIZCHIP_READ>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	f003 0303 	and.w	r3, r3, #3
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d002      	beq.n	800f9d4 <listen+0x34>
 800f9ce:	f06f 0304 	mvn.w	r3, #4
 800f9d2:	e03a      	b.n	800fa4a <listen+0xaa>
   CHECK_SOCKINIT();
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	3301      	adds	r3, #1
 800f9da:	00db      	lsls	r3, r3, #3
 800f9dc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff fb55 	bl	800f090 <WIZCHIP_READ>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b13      	cmp	r3, #19
 800f9ea:	d002      	beq.n	800f9f2 <listen+0x52>
 800f9ec:	f06f 0302 	mvn.w	r3, #2
 800f9f0:	e02b      	b.n	800fa4a <listen+0xaa>
   setSn_CR(sn,Sn_CR_LISTEN);
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	00db      	lsls	r3, r3, #3
 800f9fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f9fe:	2102      	movs	r1, #2
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7ff fb91 	bl	800f128 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800fa06:	bf00      	nop
 800fa08:	79fb      	ldrb	r3, [r7, #7]
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	00db      	lsls	r3, r3, #3
 800fa10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fb3b 	bl	800f090 <WIZCHIP_READ>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1f3      	bne.n	800fa08 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800fa20:	e006      	b.n	800fa30 <listen+0x90>
   {
      close(sn);
 800fa22:	79fb      	ldrb	r3, [r7, #7]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff ff4d 	bl	800f8c4 <close>
      return SOCKERR_SOCKCLOSED;
 800fa2a:	f06f 0303 	mvn.w	r3, #3
 800fa2e:	e00c      	b.n	800fa4a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800fa30:	79fb      	ldrb	r3, [r7, #7]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	3301      	adds	r3, #1
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff fb27 	bl	800f090 <WIZCHIP_READ>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b14      	cmp	r3, #20
 800fa46:	d1ec      	bne.n	800fa22 <listen+0x82>
   }
   return SOCK_OK;
 800fa48:	2301      	movs	r3, #1
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
	...

0800fa54 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	2b07      	cmp	r3, #7
 800fa62:	d902      	bls.n	800fa6a <disconnect+0x16>
 800fa64:	f04f 33ff 	mov.w	r3, #4294967295
 800fa68:	e06e      	b.n	800fb48 <disconnect+0xf4>
   CHECK_TCPMODE();
 800fa6a:	79fb      	ldrb	r3, [r7, #7]
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	3301      	adds	r3, #1
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7ff fb0c 	bl	800f090 <WIZCHIP_READ>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	f003 0303 	and.w	r3, r3, #3
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d002      	beq.n	800fa88 <disconnect+0x34>
 800fa82:	f06f 0304 	mvn.w	r3, #4
 800fa86:	e05f      	b.n	800fb48 <disconnect+0xf4>
   if(getSn_SR(sn) != SOCK_CLOSED)
 800fa88:	79fb      	ldrb	r3, [r7, #7]
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff fafb 	bl	800f090 <WIZCHIP_READ>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d052      	beq.n	800fb46 <disconnect+0xf2>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	3301      	adds	r3, #1
 800faa6:	00db      	lsls	r3, r3, #3
 800faa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800faac:	2108      	movs	r1, #8
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff fb3a 	bl	800f128 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 800fab4:	bf00      	nop
 800fab6:	79fb      	ldrb	r3, [r7, #7]
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	3301      	adds	r3, #1
 800fabc:	00db      	lsls	r3, r3, #3
 800fabe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff fae4 	bl	800f090 <WIZCHIP_READ>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1f3      	bne.n	800fab6 <disconnect+0x62>
	   sock_is_sending &= ~(1<<sn);
 800face:	79fb      	ldrb	r3, [r7, #7]
 800fad0:	2201      	movs	r2, #1
 800fad2:	fa02 f303 	lsl.w	r3, r2, r3
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	43db      	mvns	r3, r3
 800fada:	b21a      	sxth	r2, r3
 800fadc:	4b1c      	ldr	r3, [pc, #112]	@ (800fb50 <disconnect+0xfc>)
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	b21b      	sxth	r3, r3
 800fae2:	4013      	ands	r3, r2
 800fae4:	b21b      	sxth	r3, r3
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	4b19      	ldr	r3, [pc, #100]	@ (800fb50 <disconnect+0xfc>)
 800faea:	801a      	strh	r2, [r3, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800faec:	4b19      	ldr	r3, [pc, #100]	@ (800fb54 <disconnect+0x100>)
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	461a      	mov	r2, r3
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	fa42 f303 	asr.w	r3, r2, r3
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d016      	beq.n	800fb2e <disconnect+0xda>
 800fb00:	2300      	movs	r3, #0
 800fb02:	e021      	b.n	800fb48 <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800fb04:	79fb      	ldrb	r3, [r7, #7]
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	3301      	adds	r3, #1
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fabd 	bl	800f090 <WIZCHIP_READ>
 800fb16:	4603      	mov	r3, r0
 800fb18:	f003 0308 	and.w	r3, r3, #8
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d006      	beq.n	800fb2e <disconnect+0xda>
         {
            close(sn);
 800fb20:	79fb      	ldrb	r3, [r7, #7]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fece 	bl	800f8c4 <close>
            return SOCKERR_TIMEOUT;
 800fb28:	f06f 030c 	mvn.w	r3, #12
 800fb2c:	e00c      	b.n	800fb48 <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	3301      	adds	r3, #1
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff faa8 	bl	800f090 <WIZCHIP_READ>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1de      	bne.n	800fb04 <disconnect+0xb0>
         }
      }
   }
   return SOCK_OK;
 800fb46:	2301      	movs	r3, #1
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000ac2 	.word	0x20000ac2
 800fb54:	20000ac0 	.word	0x20000ac0

0800fb58 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	6039      	str	r1, [r7, #0]
 800fb62:	71fb      	strb	r3, [r7, #7]
 800fb64:	4613      	mov	r3, r2
 800fb66:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 800fb70:	79fb      	ldrb	r3, [r7, #7]
 800fb72:	2b07      	cmp	r3, #7
 800fb74:	d902      	bls.n	800fb7c <send+0x24>
 800fb76:	f04f 33ff 	mov.w	r3, #4294967295
 800fb7a:	e138      	b.n	800fdee <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	3301      	adds	r3, #1
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff fa83 	bl	800f090 <WIZCHIP_READ>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	f003 030f 	and.w	r3, r3, #15
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d002      	beq.n	800fb9a <send+0x42>
 800fb94:	f06f 0304 	mvn.w	r3, #4
 800fb98:	e129      	b.n	800fdee <send+0x296>
   CHECK_SOCKDATA();
 800fb9a:	88bb      	ldrh	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <send+0x4e>
 800fba0:	f06f 030d 	mvn.w	r3, #13
 800fba4:	e123      	b.n	800fdee <send+0x296>
   tmp = getSn_SR(sn);
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	3301      	adds	r3, #1
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fa6c 	bl	800f090 <WIZCHIP_READ>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800fbbc:	7bfb      	ldrb	r3, [r7, #15]
 800fbbe:	2b17      	cmp	r3, #23
 800fbc0:	d005      	beq.n	800fbce <send+0x76>
 800fbc2:	7bfb      	ldrb	r3, [r7, #15]
 800fbc4:	2b1c      	cmp	r3, #28
 800fbc6:	d002      	beq.n	800fbce <send+0x76>
 800fbc8:	f06f 0306 	mvn.w	r3, #6
 800fbcc:	e10f      	b.n	800fdee <send+0x296>
   if( sock_is_sending & (1<<sn) )
 800fbce:	4b8a      	ldr	r3, [pc, #552]	@ (800fdf8 <send+0x2a0>)
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	79fb      	ldrb	r3, [r7, #7]
 800fbd6:	fa42 f303 	asr.w	r3, r2, r3
 800fbda:	f003 0301 	and.w	r3, r3, #1
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d039      	beq.n	800fc56 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800fbe2:	79fb      	ldrb	r3, [r7, #7]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	00db      	lsls	r3, r3, #3
 800fbea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff fa4e 	bl	800f090 <WIZCHIP_READ>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	f003 031f 	and.w	r3, r3, #31
 800fbfa:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800fbfc:	7bfb      	ldrb	r3, [r7, #15]
 800fbfe:	f003 0310 	and.w	r3, r3, #16
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d019      	beq.n	800fc3a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800fc06:	79fb      	ldrb	r3, [r7, #7]
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fc12:	2110      	movs	r1, #16
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fa87 	bl	800f128 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc22:	b21b      	sxth	r3, r3
 800fc24:	43db      	mvns	r3, r3
 800fc26:	b21a      	sxth	r2, r3
 800fc28:	4b73      	ldr	r3, [pc, #460]	@ (800fdf8 <send+0x2a0>)
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	b21b      	sxth	r3, r3
 800fc2e:	4013      	ands	r3, r2
 800fc30:	b21b      	sxth	r3, r3
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	4b70      	ldr	r3, [pc, #448]	@ (800fdf8 <send+0x2a0>)
 800fc36:	801a      	strh	r2, [r3, #0]
 800fc38:	e00d      	b.n	800fc56 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
 800fc3c:	f003 0308 	and.w	r3, r3, #8
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d006      	beq.n	800fc52 <send+0xfa>
      {
         close(sn);
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fe3c 	bl	800f8c4 <close>
         return SOCKERR_TIMEOUT;
 800fc4c:	f06f 030c 	mvn.w	r3, #12
 800fc50:	e0cd      	b.n	800fdee <send+0x296>
      }
      else return SOCK_BUSY;
 800fc52:	2300      	movs	r3, #0
 800fc54:	e0cb      	b.n	800fdee <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 800fc56:	79fb      	ldrb	r3, [r7, #7]
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	00db      	lsls	r3, r3, #3
 800fc5e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7ff fa14 	bl	800f090 <WIZCHIP_READ>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	029b      	lsls	r3, r3, #10
 800fc6c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800fc6e:	88ba      	ldrh	r2, [r7, #4]
 800fc70:	89bb      	ldrh	r3, [r7, #12]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d901      	bls.n	800fc7a <send+0x122>
 800fc76:	89bb      	ldrh	r3, [r7, #12]
 800fc78:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 800fc7a:	79fb      	ldrb	r3, [r7, #7]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fb61 	bl	800f344 <getSn_TX_FSR>
 800fc82:	4603      	mov	r3, r0
 800fc84:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7ff f9fc 	bl	800f090 <WIZCHIP_READ>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800fc9c:	7bfb      	ldrb	r3, [r7, #15]
 800fc9e:	2b17      	cmp	r3, #23
 800fca0:	d00c      	beq.n	800fcbc <send+0x164>
 800fca2:	7bfb      	ldrb	r3, [r7, #15]
 800fca4:	2b1c      	cmp	r3, #28
 800fca6:	d009      	beq.n	800fcbc <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d103      	bne.n	800fcb6 <send+0x15e>
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff fe07 	bl	800f8c4 <close>
         return SOCKERR_SOCKSTATUS;
 800fcb6:	f06f 0306 	mvn.w	r3, #6
 800fcba:	e098      	b.n	800fdee <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 800fcbc:	4b4f      	ldr	r3, [pc, #316]	@ (800fdfc <send+0x2a4>)
 800fcbe:	881b      	ldrh	r3, [r3, #0]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	fa42 f303 	asr.w	r3, r2, r3
 800fcc8:	f003 0301 	and.w	r3, r3, #1
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d005      	beq.n	800fcdc <send+0x184>
 800fcd0:	88ba      	ldrh	r2, [r7, #4]
 800fcd2:	89bb      	ldrh	r3, [r7, #12]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d901      	bls.n	800fcdc <send+0x184>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	e088      	b.n	800fdee <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 800fcdc:	88ba      	ldrh	r2, [r7, #4]
 800fcde:	89bb      	ldrh	r3, [r7, #12]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d900      	bls.n	800fce6 <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 800fce4:	e7c9      	b.n	800fc7a <send+0x122>
      if(len <= freesize) break;
 800fce6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800fce8:	88ba      	ldrh	r2, [r7, #4]
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff fbba 	bl	800f468 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 800fcf4:	4b40      	ldr	r3, [pc, #256]	@ (800fdf8 <send+0x2a0>)
 800fcf6:	881b      	ldrh	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	fa42 f303 	asr.w	r3, r2, r3
 800fd00:	f003 0301 	and.w	r3, r3, #1
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d04d      	beq.n	800fda4 <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 800fd08:	e034      	b.n	800fd74 <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 800fd0a:	79fb      	ldrb	r3, [r7, #7]
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	3301      	adds	r3, #1
 800fd10:	00db      	lsls	r3, r3, #3
 800fd12:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff f9ba 	bl	800f090 <WIZCHIP_READ>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	2b17      	cmp	r3, #23
 800fd24:	d01a      	beq.n	800fd5c <send+0x204>
 800fd26:	7bfb      	ldrb	r3, [r7, #15]
 800fd28:	2b1c      	cmp	r3, #28
 800fd2a:	d017      	beq.n	800fd5c <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 800fd2c:	7bfb      	ldrb	r3, [r7, #15]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00d      	beq.n	800fd4e <send+0x1f6>
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	3301      	adds	r3, #1
 800fd38:	00db      	lsls	r3, r3, #3
 800fd3a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff f9a6 	bl	800f090 <WIZCHIP_READ>
 800fd44:	4603      	mov	r3, r0
 800fd46:	f003 0308 	and.w	r3, r3, #8
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <send+0x1fe>
 800fd4e:	79fb      	ldrb	r3, [r7, #7]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff fdb7 	bl	800f8c4 <close>
            return SOCKERR_SOCKSTATUS;
 800fd56:	f06f 0306 	mvn.w	r3, #6
 800fd5a:	e048      	b.n	800fdee <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800fd5c:	4b27      	ldr	r3, [pc, #156]	@ (800fdfc <send+0x2a4>)
 800fd5e:	881b      	ldrh	r3, [r3, #0]
 800fd60:	461a      	mov	r2, r3
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	fa42 f303 	asr.w	r3, r2, r3
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d001      	beq.n	800fd74 <send+0x21c>
 800fd70:	2300      	movs	r3, #0
 800fd72:	e03c      	b.n	800fdee <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	3301      	adds	r3, #1
 800fd7a:	00db      	lsls	r3, r3, #3
 800fd7c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff f985 	bl	800f090 <WIZCHIP_READ>
 800fd86:	4603      	mov	r3, r0
 800fd88:	f003 0310 	and.w	r3, r3, #16
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d0bc      	beq.n	800fd0a <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 800fd90:	79fb      	ldrb	r3, [r7, #7]
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	3301      	adds	r3, #1
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fd9c:	2110      	movs	r1, #16
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff f9c2 	bl	800f128 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	3301      	adds	r3, #1
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fdb0:	2120      	movs	r1, #32
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff f9b8 	bl	800f128 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 800fdb8:	bf00      	nop
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff f962 	bl	800f090 <WIZCHIP_READ>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1f3      	bne.n	800fdba <send+0x262>
   sock_is_sending |= (1<<sn);
 800fdd2:	79fb      	ldrb	r3, [r7, #7]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	fa02 f303 	lsl.w	r3, r2, r3
 800fdda:	b21a      	sxth	r2, r3
 800fddc:	4b06      	ldr	r3, [pc, #24]	@ (800fdf8 <send+0x2a0>)
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	b21b      	sxth	r3, r3
 800fde2:	4313      	orrs	r3, r2
 800fde4:	b21b      	sxth	r3, r3
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	4b03      	ldr	r3, [pc, #12]	@ (800fdf8 <send+0x2a0>)
 800fdea:	801a      	strh	r2, [r3, #0]
 
   return len;
 800fdec:	88bb      	ldrh	r3, [r7, #4]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20000ac2 	.word	0x20000ac2
 800fdfc:	20000ac0 	.word	0x20000ac0

0800fe00 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 800fe00:	b590      	push	{r4, r7, lr}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	6039      	str	r1, [r7, #0]
 800fe0a:	71fb      	strb	r3, [r7, #7]
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800fe18:	79fb      	ldrb	r3, [r7, #7]
 800fe1a:	2b07      	cmp	r3, #7
 800fe1c:	d902      	bls.n	800fe24 <recv+0x24>
 800fe1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe22:	e098      	b.n	800ff56 <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	3301      	adds	r3, #1
 800fe2a:	00db      	lsls	r3, r3, #3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff f92f 	bl	800f090 <WIZCHIP_READ>
 800fe32:	4603      	mov	r3, r0
 800fe34:	f003 030f 	and.w	r3, r3, #15
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d002      	beq.n	800fe42 <recv+0x42>
 800fe3c:	f06f 0304 	mvn.w	r3, #4
 800fe40:	e089      	b.n	800ff56 <recv+0x156>
   CHECK_SOCKDATA();
 800fe42:	88bb      	ldrh	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d102      	bne.n	800fe4e <recv+0x4e>
 800fe48:	f06f 030d 	mvn.w	r3, #13
 800fe4c:	e083      	b.n	800ff56 <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	3301      	adds	r3, #1
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff f918 	bl	800f090 <WIZCHIP_READ>
 800fe60:	4603      	mov	r3, r0
 800fe62:	029b      	lsls	r3, r3, #10
 800fe64:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800fe66:	89ba      	ldrh	r2, [r7, #12]
 800fe68:	88bb      	ldrh	r3, [r7, #4]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d201      	bcs.n	800fe72 <recv+0x72>
 800fe6e:	89bb      	ldrh	r3, [r7, #12]
 800fe70:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff faae 	bl	800f3d6 <getSn_RX_RSR>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	3301      	adds	r3, #1
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7ff f900 	bl	800f090 <WIZCHIP_READ>
 800fe90:	4603      	mov	r3, r0
 800fe92:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
 800fe96:	2b17      	cmp	r3, #23
 800fe98:	d026      	beq.n	800fee8 <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 800fe9a:	7bfb      	ldrb	r3, [r7, #15]
 800fe9c:	2b1c      	cmp	r3, #28
 800fe9e:	d11c      	bne.n	800feda <recv+0xda>
         {
            if(recvsize != 0) break;
 800fea0:	89bb      	ldrh	r3, [r7, #12]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d130      	bne.n	800ff08 <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7ff fa4b 	bl	800f344 <getSn_TX_FSR>
 800feae:	4603      	mov	r3, r0
 800feb0:	461c      	mov	r4, r3
 800feb2:	79fb      	ldrb	r3, [r7, #7]
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	3301      	adds	r3, #1
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff f8e6 	bl	800f090 <WIZCHIP_READ>
 800fec4:	4603      	mov	r3, r0
 800fec6:	029b      	lsls	r3, r3, #10
 800fec8:	429c      	cmp	r4, r3
 800feca:	d10d      	bne.n	800fee8 <recv+0xe8>
            {
               close(sn);
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff fcf8 	bl	800f8c4 <close>
               return SOCKERR_SOCKSTATUS;
 800fed4:	f06f 0306 	mvn.w	r3, #6
 800fed8:	e03d      	b.n	800ff56 <recv+0x156>
            }
         }
         else
         {
            close(sn);
 800feda:	79fb      	ldrb	r3, [r7, #7]
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff fcf1 	bl	800f8c4 <close>
            return SOCKERR_SOCKSTATUS;
 800fee2:	f06f 0306 	mvn.w	r3, #6
 800fee6:	e036      	b.n	800ff56 <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800fee8:	4b1d      	ldr	r3, [pc, #116]	@ (800ff60 <recv+0x160>)
 800feea:	881b      	ldrh	r3, [r3, #0]
 800feec:	461a      	mov	r2, r3
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	fa42 f303 	asr.w	r3, r2, r3
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d001      	beq.n	800ff00 <recv+0x100>
 800fefc:	2300      	movs	r3, #0
 800fefe:	e02a      	b.n	800ff56 <recv+0x156>
      if(recvsize != 0) break;
 800ff00:	89bb      	ldrh	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d102      	bne.n	800ff0c <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800ff06:	e7b4      	b.n	800fe72 <recv+0x72>
            if(recvsize != 0) break;
 800ff08:	bf00      	nop
 800ff0a:	e000      	b.n	800ff0e <recv+0x10e>
      if(recvsize != 0) break;
 800ff0c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 800ff0e:	89ba      	ldrh	r2, [r7, #12]
 800ff10:	88bb      	ldrh	r3, [r7, #4]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d201      	bcs.n	800ff1a <recv+0x11a>
 800ff16:	89bb      	ldrh	r3, [r7, #12]
 800ff18:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 800ff1a:	88ba      	ldrh	r2, [r7, #4]
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff fafb 	bl	800f51c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ff32:	2140      	movs	r1, #64	@ 0x40
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7ff f8f7 	bl	800f128 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 800ff3a:	bf00      	nop
 800ff3c:	79fb      	ldrb	r3, [r7, #7]
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	3301      	adds	r3, #1
 800ff42:	00db      	lsls	r3, r3, #3
 800ff44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff f8a1 	bl	800f090 <WIZCHIP_READ>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d1f3      	bne.n	800ff3c <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800ff54:	88bb      	ldrh	r3, [r7, #4]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3714      	adds	r7, #20
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd90      	pop	{r4, r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	20000ac0 	.word	0x20000ac0

0800ff64 <sendto_W5x00>:


int32_t sendto_W5x00(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port ){
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af02      	add	r7, sp, #8
 800ff6a:	60b9      	str	r1, [r7, #8]
 800ff6c:	607b      	str	r3, [r7, #4]
 800ff6e:	4603      	mov	r3, r0
 800ff70:	73fb      	strb	r3, [r7, #15]
 800ff72:	4613      	mov	r3, r2
 800ff74:	81bb      	strh	r3, [r7, #12]
   //static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
   // printf("sendto_W5x00\r\n" ) ;
   return sendto_IO_6(sn,   buf,  len,   addr,  port,4);
 800ff76:	89ba      	ldrh	r2, [r7, #12]
 800ff78:	7bf8      	ldrb	r0, [r7, #15]
 800ff7a:	2304      	movs	r3, #4
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	8b3b      	ldrh	r3, [r7, #24]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	f000 f805 	bl	800ff94 <sendto_IO_6>
 800ff8a:	4603      	mov	r3, r0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <sendto_IO_6>:
   //static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
   return sendto_IO_6( sn,  buf,  len,   addr,  port, addrlen);
}

static int32_t sendto_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port, uint8_t addrlen)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	607b      	str	r3, [r7, #4]
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73fb      	strb	r3, [r7, #15]
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	75fb      	strb	r3, [r7, #23]
   uint8_t tcmd = Sn_CR_SEND;
 800ffaa:	2320      	movs	r3, #32
 800ffac:	75bb      	strb	r3, [r7, #22]
   uint16_t freesize = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   /* 
    * The below codes can be omitted for optmization of speed
    */
   CHECK_SOCKNUM();
 800ffb2:	7bfb      	ldrb	r3, [r7, #15]
 800ffb4:	2b07      	cmp	r3, #7
 800ffb6:	d902      	bls.n	800ffbe <sendto_IO_6+0x2a>
 800ffb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffbc:	e177      	b.n	80102ae <sendto_IO_6+0x31a>
   //CHECK_DGRAMMODE();
   /************/
   switch(getSn_MR(sn) & 0x0F)
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	00db      	lsls	r3, r3, #3
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff f862 	bl	800f090 <WIZCHIP_READ>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	f003 030f 	and.w	r3, r3, #15
 800ffd2:	2b04      	cmp	r3, #4
 800ffd4:	dc02      	bgt.n	800ffdc <sendto_IO_6+0x48>
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	da05      	bge.n	800ffe6 <sendto_IO_6+0x52>
 800ffda:	e001      	b.n	800ffe0 <sendto_IO_6+0x4c>
 800ffdc:	2b0b      	cmp	r3, #11
 800ffde:	d002      	beq.n	800ffe6 <sendto_IO_6+0x52>
      case Sn_MR_IPRAW:
      case Sn_MR_IPRAW6:    
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800ffe0:	f06f 0304 	mvn.w	r3, #4
 800ffe4:	e163      	b.n	80102ae <sendto_IO_6+0x31a>
         break;
 800ffe6:	bf00      	nop
   }
   tmp = getSn_MR(sn);
 800ffe8:	7bfb      	ldrb	r3, [r7, #15]
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	3301      	adds	r3, #1
 800ffee:	00db      	lsls	r3, r3, #3
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff f84d 	bl	800f090 <WIZCHIP_READ>
 800fff6:	4603      	mov	r3, r0
 800fff8:	75fb      	strb	r3, [r7, #23]
   if(tmp != Sn_MR_MACRAW)
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	2b04      	cmp	r3, #4
 800fffe:	d024      	beq.n	801004a <sendto_IO_6+0xb6>
   {
       if (addrlen == 16)      // addrlen=16, Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)), IPRAW6(1011)
 8010000:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010004:	2b10      	cmp	r3, #16
 8010006:	d102      	bne.n	801000e <sendto_IO_6+0x7a>
            setSn_DIP6R(sn,addr);
            tcmd = Sn_CR_SEND6;
         }
         else
#endif 
         return SOCKERR_SOCKMODE;
 8010008:	f06f 0304 	mvn.w	r3, #4
 801000c:	e14f      	b.n	80102ae <sendto_IO_6+0x31a>
      } 
      else if(addrlen == 4)      // addrlen=4, Sn_MR_UDP4(0010), Sn_MR_UDPD(1110), IPRAW4(0011)
 801000e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010012:	2b04      	cmp	r3, #4
 8010014:	d116      	bne.n	8010044 <sendto_IO_6+0xb0>
      {
         if(tmp == Sn_MR_UDP6 || tmp == Sn_MR_IPRAW6) return SOCKERR_SOCKMODE;
 8010016:	7dfb      	ldrb	r3, [r7, #23]
 8010018:	2b0a      	cmp	r3, #10
 801001a:	d002      	beq.n	8010022 <sendto_IO_6+0x8e>
 801001c:	7dfb      	ldrb	r3, [r7, #23]
 801001e:	2b0b      	cmp	r3, #11
 8010020:	d102      	bne.n	8010028 <sendto_IO_6+0x94>
 8010022:	f06f 0304 	mvn.w	r3, #4
 8010026:	e142      	b.n	80102ae <sendto_IO_6+0x31a>
         setSn_DIPR(sn,addr);
 8010028:	7bfb      	ldrb	r3, [r7, #15]
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	3301      	adds	r3, #1
 801002e:	00db      	lsls	r3, r3, #3
 8010030:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8010034:	2204      	movs	r2, #4
 8010036:	6879      	ldr	r1, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff f923 	bl	800f284 <WIZCHIP_WRITE_BUF>
         tcmd = Sn_CR_SEND;
 801003e:	2320      	movs	r3, #32
 8010040:	75bb      	strb	r3, [r7, #22]
 8010042:	e002      	b.n	801004a <sendto_IO_6+0xb6>
      }
      else return SOCKERR_IPINVALID;
 8010044:	f06f 030b 	mvn.w	r3, #11
 8010048:	e131      	b.n	80102ae <sendto_IO_6+0x31a>
   }
   if((tmp & 0x03)==0x02)     // Sn_MR_UPD4(0010), Sn_MR_UDP6(1010), Sn_MR_UDPD(1110)
 801004a:	7dfb      	ldrb	r3, [r7, #23]
 801004c:	f003 0303 	and.w	r3, r3, #3
 8010050:	2b02      	cmp	r3, #2
 8010052:	d122      	bne.n	801009a <sendto_IO_6+0x106>
   {
      if(port){ setSn_DPORTR(sn, port);}
 8010054:	8c3b      	ldrh	r3, [r7, #32]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01c      	beq.n	8010094 <sendto_IO_6+0x100>
 801005a:	7bfb      	ldrb	r3, [r7, #15]
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	3301      	adds	r3, #1
 8010060:	00db      	lsls	r3, r3, #3
 8010062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010066:	461a      	mov	r2, r3
 8010068:	8c3b      	ldrh	r3, [r7, #32]
 801006a:	0a1b      	lsrs	r3, r3, #8
 801006c:	b29b      	uxth	r3, r3
 801006e:	b2db      	uxtb	r3, r3
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7ff f858 	bl	800f128 <WIZCHIP_WRITE>
 8010078:	7bfb      	ldrb	r3, [r7, #15]
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	3301      	adds	r3, #1
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8010084:	461a      	mov	r2, r3
 8010086:	8c3b      	ldrh	r3, [r7, #32]
 8010088:	b2db      	uxtb	r3, r3
 801008a:	4619      	mov	r1, r3
 801008c:	4610      	mov	r0, r2
 801008e:	f7ff f84b 	bl	800f128 <WIZCHIP_WRITE>
 8010092:	e002      	b.n	801009a <sendto_IO_6+0x106>
      else   return SOCKERR_PORTZERO;
 8010094:	f06f 030a 	mvn.w	r3, #10
 8010098:	e109      	b.n	80102ae <sendto_IO_6+0x31a>
   }
#ifndef IPV6_AVAILABLE
   CHECK_SOCKDATA();
 801009a:	89bb      	ldrh	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d102      	bne.n	80100a6 <sendto_IO_6+0x112>
 80100a0:	f06f 030d 	mvn.w	r3, #13
 80100a4:	e103      	b.n	80102ae <sendto_IO_6+0x31a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	021b      	lsls	r3, r3, #8
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	3201      	adds	r2, #1
 80100b4:	7812      	ldrb	r2, [r2, #0]
 80100b6:	4413      	add	r3, r2
 80100b8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	021b      	lsls	r3, r3, #8
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	3202      	adds	r2, #2
 80100c2:	7812      	ldrb	r2, [r2, #0]
 80100c4:	4413      	add	r3, r2
 80100c6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	3203      	adds	r2, #3
 80100d0:	7812      	ldrb	r2, [r2, #0]
 80100d2:	4413      	add	r3, r2
 80100d4:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d10e      	bne.n	80100fa <sendto_IO_6+0x166>
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	3301      	adds	r3, #1
 80100e2:	00db      	lsls	r3, r3, #3
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe ffd3 	bl	800f090 <WIZCHIP_READ>
 80100ea:	4603      	mov	r3, r0
 80100ec:	f003 0304 	and.w	r3, r3, #4
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d002      	beq.n	80100fa <sendto_IO_6+0x166>
 80100f4:	f06f 030b 	mvn.w	r3, #11
 80100f8:	e0d9      	b.n	80102ae <sendto_IO_6+0x31a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80100fa:	8c3b      	ldrh	r3, [r7, #32]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10e      	bne.n	801011e <sendto_IO_6+0x18a>
 8010100:	7bfb      	ldrb	r3, [r7, #15]
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	3301      	adds	r3, #1
 8010106:	00db      	lsls	r3, r3, #3
 8010108:	4618      	mov	r0, r3
 801010a:	f7fe ffc1 	bl	800f090 <WIZCHIP_READ>
 801010e:	4603      	mov	r3, r0
 8010110:	f003 0304 	and.w	r3, r3, #4
 8010114:	2b04      	cmp	r3, #4
 8010116:	d002      	beq.n	801011e <sendto_IO_6+0x18a>
 8010118:	f06f 030a 	mvn.w	r3, #10
 801011c:	e0c7      	b.n	80102ae <sendto_IO_6+0x31a>
   tmp = getSn_SR(sn);
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	3301      	adds	r3, #1
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801012a:	4618      	mov	r0, r3
 801012c:	f7fe ffb0 	bl	800f090 <WIZCHIP_READ>
 8010130:	4603      	mov	r3, r0
 8010132:	75fb      	strb	r3, [r7, #23]
   //#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8010134:	7dfb      	ldrb	r3, [r7, #23]
 8010136:	2b42      	cmp	r3, #66	@ 0x42
 8010138:	d008      	beq.n	801014c <sendto_IO_6+0x1b8>
 801013a:	7dfb      	ldrb	r3, [r7, #23]
 801013c:	2b22      	cmp	r3, #34	@ 0x22
 801013e:	d005      	beq.n	801014c <sendto_IO_6+0x1b8>
 8010140:	7dfb      	ldrb	r3, [r7, #23]
 8010142:	2b32      	cmp	r3, #50	@ 0x32
 8010144:	d002      	beq.n	801014c <sendto_IO_6+0x1b8>
 8010146:	f06f 0306 	mvn.w	r3, #6
 801014a:	e0b0      	b.n	80102ae <sendto_IO_6+0x31a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 801014c:	7bfb      	ldrb	r3, [r7, #15]
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	3301      	adds	r3, #1
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8010158:	2204      	movs	r2, #4
 801015a:	6879      	ldr	r1, [r7, #4]
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff f891 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);   
 8010162:	7bfb      	ldrb	r3, [r7, #15]
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	3301      	adds	r3, #1
 8010168:	00db      	lsls	r3, r3, #3
 801016a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801016e:	461a      	mov	r2, r3
 8010170:	8c3b      	ldrh	r3, [r7, #32]
 8010172:	0a1b      	lsrs	r3, r3, #8
 8010174:	b29b      	uxth	r3, r3
 8010176:	b2db      	uxtb	r3, r3
 8010178:	4619      	mov	r1, r3
 801017a:	4610      	mov	r0, r2
 801017c:	f7fe ffd4 	bl	800f128 <WIZCHIP_WRITE>
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	3301      	adds	r3, #1
 8010186:	00db      	lsls	r3, r3, #3
 8010188:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 801018c:	461a      	mov	r2, r3
 801018e:	8c3b      	ldrh	r3, [r7, #32]
 8010190:	b2db      	uxtb	r3, r3
 8010192:	4619      	mov	r1, r3
 8010194:	4610      	mov	r0, r2
 8010196:	f7fe ffc7 	bl	800f128 <WIZCHIP_WRITE>
#endif 

   freesize = getSn_TxMAX(sn);
 801019a:	7bfb      	ldrb	r3, [r7, #15]
 801019c:	009b      	lsls	r3, r3, #2
 801019e:	3301      	adds	r3, #1
 80101a0:	00db      	lsls	r3, r3, #3
 80101a2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fe ff72 	bl	800f090 <WIZCHIP_READ>
 80101ac:	4603      	mov	r3, r0
 80101ae:	029b      	lsls	r3, r3, #10
 80101b0:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80101b2:	89ba      	ldrh	r2, [r7, #12]
 80101b4:	8abb      	ldrh	r3, [r7, #20]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d901      	bls.n	80101be <sendto_IO_6+0x22a>
 80101ba:	8abb      	ldrh	r3, [r7, #20]
 80101bc:	81bb      	strh	r3, [r7, #12]
  
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80101be:	7bfb      	ldrb	r3, [r7, #15]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7ff f8bf 	bl	800f344 <getSn_TX_FSR>
 80101c6:	4603      	mov	r3, r0
 80101c8:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80101ca:	7bfb      	ldrb	r3, [r7, #15]
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	3301      	adds	r3, #1
 80101d0:	00db      	lsls	r3, r3, #3
 80101d2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe ff5a 	bl	800f090 <WIZCHIP_READ>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d102      	bne.n	80101e8 <sendto_IO_6+0x254>
 80101e2:	f06f 0303 	mvn.w	r3, #3
 80101e6:	e062      	b.n	80102ae <sendto_IO_6+0x31a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; 
 80101e8:	4b33      	ldr	r3, [pc, #204]	@ (80102b8 <sendto_IO_6+0x324>)
 80101ea:	881b      	ldrh	r3, [r3, #0]
 80101ec:	461a      	mov	r2, r3
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
 80101f0:	fa42 f303 	asr.w	r3, r2, r3
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d005      	beq.n	8010208 <sendto_IO_6+0x274>
 80101fc:	89ba      	ldrh	r2, [r7, #12]
 80101fe:	8abb      	ldrh	r3, [r7, #20]
 8010200:	429a      	cmp	r2, r3
 8010202:	d901      	bls.n	8010208 <sendto_IO_6+0x274>
 8010204:	2300      	movs	r3, #0
 8010206:	e052      	b.n	80102ae <sendto_IO_6+0x31a>
      if(len <= freesize) break;
 8010208:	89ba      	ldrh	r2, [r7, #12]
 801020a:	8abb      	ldrh	r3, [r7, #20]
 801020c:	429a      	cmp	r2, r3
 801020e:	d900      	bls.n	8010212 <sendto_IO_6+0x27e>
      freesize = getSn_TX_FSR(sn);
 8010210:	e7d5      	b.n	80101be <sendto_IO_6+0x22a>
      if(len <= freesize) break;
 8010212:	bf00      	nop
   };
   wiz_send_data(sn, buf, len);
 8010214:	89ba      	ldrh	r2, [r7, #12]
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	68b9      	ldr	r1, [r7, #8]
 801021a:	4618      	mov	r0, r3
 801021c:	f7ff f924 	bl	800f468 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
   setSn_CR(sn,Sn_CR_SEND);
 8010220:	7bfb      	ldrb	r3, [r7, #15]
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	3301      	adds	r3, #1
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801022c:	2120      	movs	r1, #32
 801022e:	4618      	mov	r0, r3
 8010230:	f7fe ff7a 	bl	800f128 <WIZCHIP_WRITE>
#endif 
   /* wait to process the command... */
   while(getSn_CR(sn));
 8010234:	bf00      	nop
 8010236:	7bfb      	ldrb	r3, [r7, #15]
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	3301      	adds	r3, #1
 801023c:	00db      	lsls	r3, r3, #3
 801023e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010242:	4618      	mov	r0, r3
 8010244:	f7fe ff24 	bl	800f090 <WIZCHIP_READ>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1f3      	bne.n	8010236 <sendto_IO_6+0x2a2>
   while(1)
   {
      tmp = getSn_IR(sn);
 801024e:	7bfb      	ldrb	r3, [r7, #15]
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	3301      	adds	r3, #1
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801025a:	4618      	mov	r0, r3
 801025c:	f7fe ff18 	bl	800f090 <WIZCHIP_READ>
 8010260:	4603      	mov	r3, r0
 8010262:	f003 031f 	and.w	r3, r3, #31
 8010266:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8010268:	7dfb      	ldrb	r3, [r7, #23]
 801026a:	f003 0310 	and.w	r3, r3, #16
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00c      	beq.n	801028c <sendto_IO_6+0x2f8>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8010272:	7bfb      	ldrb	r3, [r7, #15]
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	3301      	adds	r3, #1
 8010278:	00db      	lsls	r3, r3, #3
 801027a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801027e:	2110      	movs	r1, #16
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe ff51 	bl	800f128 <WIZCHIP_WRITE>
         break;
 8010286:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8010288:	89bb      	ldrh	r3, [r7, #12]
 801028a:	e010      	b.n	80102ae <sendto_IO_6+0x31a>
      else if(tmp & Sn_IR_TIMEOUT)
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	f003 0308 	and.w	r3, r3, #8
 8010292:	2b00      	cmp	r3, #0
 8010294:	d0db      	beq.n	801024e <sendto_IO_6+0x2ba>
         setSn_IR(sn, Sn_IR_TIMEOUT);   
 8010296:	7bfb      	ldrb	r3, [r7, #15]
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	3301      	adds	r3, #1
 801029c:	00db      	lsls	r3, r3, #3
 801029e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80102a2:	2108      	movs	r1, #8
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe ff3f 	bl	800f128 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80102aa:	f06f 030c 	mvn.w	r3, #12
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20000ac0 	.word	0x20000ac0

080102bc <recvfrom_W5x00>:



int32_t recvfrom_W5x00(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port){
 80102bc:	b580      	push	{r7, lr}
 80102be:	b088      	sub	sp, #32
 80102c0:	af02      	add	r7, sp, #8
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	607b      	str	r3, [r7, #4]
 80102c6:	4603      	mov	r3, r0
 80102c8:	73fb      	strb	r3, [r7, #15]
 80102ca:	4613      	mov	r3, r2
 80102cc:	81bb      	strh	r3, [r7, #12]
   //int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
   // printf("recvfrom_W5x00\r\n" ) ;
   uint8_t addrlen = 4; //M20150601 : For W5300
 80102ce:	2304      	movs	r3, #4
 80102d0:	74fb      	strb	r3, [r7, #19]
   uint8_t *dummy = &addrlen;
 80102d2:	f107 0313 	add.w	r3, r7, #19
 80102d6:	617b      	str	r3, [r7, #20]
   return recvfrom_IO_6(sn,   buf,  len,   addr,  port, dummy);
 80102d8:	89ba      	ldrh	r2, [r7, #12]
 80102da:	7bf8      	ldrb	r0, [r7, #15]
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	68b9      	ldr	r1, [r7, #8]
 80102e8:	f000 f806 	bl	80102f8 <recvfrom_IO_6>
 80102ec:	4603      	mov	r3, r0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
	...

080102f8 <recvfrom_IO_6>:
   // printf("recvfrom_W6x00\r\n" ) ;
   //int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
   return recvfrom_IO_6( sn,  buf,  len,   addr,  port, addrlen);
}
static int32_t recvfrom_IO_6(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port, uint8_t *addrlen) //TODO : WILL BE IMPROVED
{ 
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60b9      	str	r1, [r7, #8]
 8010300:	607b      	str	r3, [r7, #4]
 8010302:	4603      	mov	r3, r0
 8010304:	73fb      	strb	r3, [r7, #15]
 8010306:	4613      	mov	r3, r2
 8010308:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
   uint16_t pack_len=0;
 801030a:	2300      	movs	r3, #0
 801030c:	83fb      	strh	r3, [r7, #30]

   /* 
    * The below codes can be omitted for optmization of speed
    */
   CHECK_SOCKNUM();
 801030e:	7bfb      	ldrb	r3, [r7, #15]
 8010310:	2b07      	cmp	r3, #7
 8010312:	d902      	bls.n	801031a <recvfrom_IO_6+0x22>
 8010314:	f04f 33ff 	mov.w	r3, #4294967295
 8010318:	e1f5      	b.n	8010706 <recvfrom_IO_6+0x40e>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 801031a:	7bfb      	ldrb	r3, [r7, #15]
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	3301      	adds	r3, #1
 8010320:	00db      	lsls	r3, r3, #3
 8010322:	4618      	mov	r0, r3
 8010324:	f7fe feb4 	bl	800f090 <WIZCHIP_READ>
 8010328:	4603      	mov	r3, r0
 801032a:	777b      	strb	r3, [r7, #29]
 801032c:	7f7b      	ldrb	r3, [r7, #29]
 801032e:	f003 030f 	and.w	r3, r3, #15
 8010332:	2b04      	cmp	r3, #4
 8010334:	dc02      	bgt.n	801033c <recvfrom_IO_6+0x44>
 8010336:	2b02      	cmp	r3, #2
 8010338:	da05      	bge.n	8010346 <recvfrom_IO_6+0x4e>
 801033a:	e001      	b.n	8010340 <recvfrom_IO_6+0x48>
 801033c:	2b0b      	cmp	r3, #11
 801033e:	d002      	beq.n	8010346 <recvfrom_IO_6+0x4e>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8010340:	f06f 0304 	mvn.w	r3, #4
 8010344:	e1df      	b.n	8010706 <recvfrom_IO_6+0x40e>
         break;
 8010346:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8010348:	89bb      	ldrh	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <recvfrom_IO_6+0x5c>
 801034e:	f06f 030d 	mvn.w	r3, #13
 8010352:	e1d8      	b.n	8010706 <recvfrom_IO_6+0x40e>
   if(sock_remained_size[sn] == 0)
 8010354:	7bfb      	ldrb	r3, [r7, #15]
 8010356:	4a96      	ldr	r2, [pc, #600]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d128      	bne.n	80103b2 <recvfrom_IO_6+0xba>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff f837 	bl	800f3d6 <getSn_RX_RSR>
 8010368:	4603      	mov	r3, r0
 801036a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801036c:	7bfb      	ldrb	r3, [r7, #15]
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	3301      	adds	r3, #1
 8010372:	00db      	lsls	r3, r3, #3
 8010374:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8010378:	4618      	mov	r0, r3
 801037a:	f7fe fe89 	bl	800f090 <WIZCHIP_READ>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <recvfrom_IO_6+0x92>
 8010384:	f06f 0303 	mvn.w	r3, #3
 8010388:	e1bd      	b.n	8010706 <recvfrom_IO_6+0x40e>
#ifndef IPV6_AVAILABLE
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801038a:	4b8a      	ldr	r3, [pc, #552]	@ (80105b4 <recvfrom_IO_6+0x2bc>)
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	7bfb      	ldrb	r3, [r7, #15]
 8010392:	fa42 f303 	asr.w	r3, r2, r3
 8010396:	f003 0301 	and.w	r3, r3, #1
 801039a:	2b00      	cmp	r3, #0
 801039c:	d004      	beq.n	80103a8 <recvfrom_IO_6+0xb0>
 801039e:	8bfb      	ldrh	r3, [r7, #30]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <recvfrom_IO_6+0xb0>
 80103a4:	2300      	movs	r3, #0
 80103a6:	e1ae      	b.n	8010706 <recvfrom_IO_6+0x40e>
         if(pack_len != 0) break;
 80103a8:	8bfb      	ldrh	r3, [r7, #30]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d100      	bne.n	80103b0 <recvfrom_IO_6+0xb8>
         pack_len = getSn_RX_RSR(sn);
 80103ae:	e7d7      	b.n	8010360 <recvfrom_IO_6+0x68>
         if(pack_len != 0) break;
 80103b0:	bf00      	nop
      pack_len = head[0] & 0x07;
      pack_len = (pack_len << 8) + head[1];
   #endif 
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80103b2:	7f7b      	ldrb	r3, [r7, #29]
 80103b4:	f003 0307 	and.w	r3, r3, #7
 80103b8:	2b0e      	cmp	r3, #14
 80103ba:	bf8c      	ite	hi
 80103bc:	2201      	movhi	r2, #1
 80103be:	2200      	movls	r2, #0
 80103c0:	b2d2      	uxtb	r2, r2
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	f040 815b 	bne.w	801067e <recvfrom_IO_6+0x386>
 80103c8:	2201      	movs	r2, #1
 80103ca:	fa02 f303 	lsl.w	r3, r2, r3
 80103ce:	f244 4204 	movw	r2, #17412	@ 0x4404
 80103d2:	401a      	ands	r2, r3
 80103d4:	2a00      	cmp	r2, #0
 80103d6:	bf14      	ite	ne
 80103d8:	2201      	movne	r2, #1
 80103da:	2200      	moveq	r2, #0
 80103dc:	b2d2      	uxtb	r2, r2
 80103de:	2a00      	cmp	r2, #0
 80103e0:	d114      	bne.n	801040c <recvfrom_IO_6+0x114>
 80103e2:	f640 0208 	movw	r2, #2056	@ 0x808
 80103e6:	401a      	ands	r2, r3
 80103e8:	2a00      	cmp	r2, #0
 80103ea:	bf14      	ite	ne
 80103ec:	2201      	movne	r2, #1
 80103ee:	2200      	moveq	r2, #0
 80103f0:	b2d2      	uxtb	r2, r2
 80103f2:	2a00      	cmp	r2, #0
 80103f4:	f040 80e2 	bne.w	80105bc <recvfrom_IO_6+0x2c4>
 80103f8:	f003 0310 	and.w	r3, r3, #16
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	bf14      	ite	ne
 8010400:	2301      	movne	r3, #1
 8010402:	2300      	moveq	r3, #0
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	d170      	bne.n	80104ec <recvfrom_IO_6+0x1f4>
 801040a:	e138      	b.n	801067e <recvfrom_IO_6+0x386>
            setSn_CR(sn,Sn_CR_RECV);

            while(getSn_CR(sn));

#else    
         if(sock_remained_size[sn] == 0)
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	4a68      	ldr	r2, [pc, #416]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d151      	bne.n	80104bc <recvfrom_IO_6+0x1c4>
         {
            wiz_recv_data(sn, head, 8);
 8010418:	f107 0114 	add.w	r1, r7, #20
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	2208      	movs	r2, #8
 8010420:	4618      	mov	r0, r3
 8010422:	f7ff f87b 	bl	800f51c <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	3301      	adds	r3, #1
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010432:	2140      	movs	r1, #64	@ 0x40
 8010434:	4618      	mov	r0, r3
 8010436:	f7fe fe77 	bl	800f128 <WIZCHIP_WRITE>
            while(getSn_CR(sn));
 801043a:	bf00      	nop
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	3301      	adds	r3, #1
 8010442:	00db      	lsls	r3, r3, #3
 8010444:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010448:	4618      	mov	r0, r3
 801044a:	f7fe fe21 	bl	800f090 <WIZCHIP_READ>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1f3      	bne.n	801043c <recvfrom_IO_6+0x144>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
            addr[0] = head[0];      
 8010454:	7d3a      	ldrb	r2, [r7, #20]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	701a      	strb	r2, [r3, #0]
            addr[1] = head[1];
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	3301      	adds	r3, #1
 801045e:	7d7a      	ldrb	r2, [r7, #21]
 8010460:	701a      	strb	r2, [r3, #0]
            addr[2] = head[2];
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	3302      	adds	r3, #2
 8010466:	7dba      	ldrb	r2, [r7, #22]
 8010468:	701a      	strb	r2, [r3, #0]
            addr[3] = head[3];
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3303      	adds	r3, #3
 801046e:	7dfa      	ldrb	r2, [r7, #23]
 8010470:	701a      	strb	r2, [r3, #0]
            *port = head[4];
 8010472:	7e3b      	ldrb	r3, [r7, #24]
 8010474:	461a      	mov	r2, r3
 8010476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010478:	801a      	strh	r2, [r3, #0]
            *port = (*port << 8) + head[5];
 801047a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	021b      	lsls	r3, r3, #8
 8010480:	b29b      	uxth	r3, r3
 8010482:	7e7a      	ldrb	r2, [r7, #25]
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801048a:	801a      	strh	r2, [r3, #0]
            sock_remained_size[sn] = head[6];
 801048c:	7eba      	ldrb	r2, [r7, #26]
 801048e:	7bfb      	ldrb	r3, [r7, #15]
 8010490:	4611      	mov	r1, r2
 8010492:	4a47      	ldr	r2, [pc, #284]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8010498:	7bfb      	ldrb	r3, [r7, #15]
 801049a:	4a45      	ldr	r2, [pc, #276]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 801049c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104a0:	021b      	lsls	r3, r3, #8
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	7efb      	ldrb	r3, [r7, #27]
 80104a6:	4619      	mov	r1, r3
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	440a      	add	r2, r1
 80104ac:	b291      	uxth	r1, r2
 80104ae:	4a40      	ldr	r2, [pc, #256]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 80104b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
            sock_pack_info[sn] = PACK_FIRST;
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	4a40      	ldr	r2, [pc, #256]	@ (80105b8 <recvfrom_IO_6+0x2c0>)
 80104b8:	2180      	movs	r1, #128	@ 0x80
 80104ba:	54d1      	strb	r1, [r2, r3]
         }
			if(len < sock_remained_size[sn]) pack_len = len;
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	4a3c      	ldr	r2, [pc, #240]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 80104c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104c4:	89ba      	ldrh	r2, [r7, #12]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d202      	bcs.n	80104d0 <recvfrom_IO_6+0x1d8>
 80104ca:	89bb      	ldrh	r3, [r7, #12]
 80104cc:	83fb      	strh	r3, [r7, #30]
 80104ce:	e004      	b.n	80104da <recvfrom_IO_6+0x1e2>
			else pack_len = sock_remained_size[sn];
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
 80104d2:	4a37      	ldr	r2, [pc, #220]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 80104d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104d8:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80104da:	8bfb      	ldrh	r3, [r7, #30]
 80104dc:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80104de:	8bfa      	ldrh	r2, [r7, #30]
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
 80104e2:	68b9      	ldr	r1, [r7, #8]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7ff f819 	bl	800f51c <wiz_recv_data>
#endif         
            break;
 80104ea:	e0d5      	b.n	8010698 <recvfrom_IO_6+0x3a0>
      case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
 80104ee:	4a30      	ldr	r2, [pc, #192]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 80104f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d145      	bne.n	8010584 <recvfrom_IO_6+0x28c>
	      {
   			wiz_recv_data(sn, head, 2);
 80104f8:	f107 0114 	add.w	r1, r7, #20
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	2202      	movs	r2, #2
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff f80b 	bl	800f51c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8010506:	7bfb      	ldrb	r3, [r7, #15]
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	3301      	adds	r3, #1
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010512:	2140      	movs	r1, #64	@ 0x40
 8010514:	4618      	mov	r0, r3
 8010516:	f7fe fe07 	bl	800f128 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801051a:	bf00      	nop
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	3301      	adds	r3, #1
 8010522:	00db      	lsls	r3, r3, #3
 8010524:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010528:	4618      	mov	r0, r3
 801052a:	f7fe fdb1 	bl	800f090 <WIZCHIP_READ>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1f3      	bne.n	801051c <recvfrom_IO_6+0x224>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8010534:	7d3a      	ldrb	r2, [r7, #20]
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	4611      	mov	r1, r2
 801053a:	4a1d      	ldr	r2, [pc, #116]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 801053c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	4a1b      	ldr	r2, [pc, #108]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010548:	021b      	lsls	r3, r3, #8
 801054a:	b29b      	uxth	r3, r3
 801054c:	7d7a      	ldrb	r2, [r7, #21]
 801054e:	4413      	add	r3, r2
 8010550:	b29a      	uxth	r2, r3
 8010552:	7bfb      	ldrb	r3, [r7, #15]
 8010554:	3a02      	subs	r2, #2
 8010556:	b291      	uxth	r1, r2
 8010558:	4a15      	ldr	r2, [pc, #84]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 801055a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 801055e:	7bfb      	ldrb	r3, [r7, #15]
 8010560:	4a13      	ldr	r2, [pc, #76]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010566:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 801056a:	4293      	cmp	r3, r2
 801056c:	d906      	bls.n	801057c <recvfrom_IO_6+0x284>
   			{
   			   close(sn);
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff f9a7 	bl	800f8c4 <close>
   			   return SOCKFATAL_PACKLEN;
 8010576:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 801057a:	e0c4      	b.n	8010706 <recvfrom_IO_6+0x40e>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	4a0e      	ldr	r2, [pc, #56]	@ (80105b8 <recvfrom_IO_6+0x2c0>)
 8010580:	2180      	movs	r1, #128	@ 0x80
 8010582:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4a0a      	ldr	r2, [pc, #40]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 8010588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801058c:	89ba      	ldrh	r2, [r7, #12]
 801058e:	429a      	cmp	r2, r3
 8010590:	d202      	bcs.n	8010598 <recvfrom_IO_6+0x2a0>
 8010592:	89bb      	ldrh	r3, [r7, #12]
 8010594:	83fb      	strh	r3, [r7, #30]
 8010596:	e004      	b.n	80105a2 <recvfrom_IO_6+0x2aa>
			else pack_len = sock_remained_size[sn];
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	4a05      	ldr	r2, [pc, #20]	@ (80105b0 <recvfrom_IO_6+0x2b8>)
 801059c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105a0:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80105a2:	8bfa      	ldrh	r2, [r7, #30]
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe ffb7 	bl	800f51c <wiz_recv_data>
         break; 
 80105ae:	e073      	b.n	8010698 <recvfrom_IO_6+0x3a0>
 80105b0:	20000ac4 	.word	0x20000ac4
 80105b4:	20000ac0 	.word	0x20000ac0
 80105b8:	20000ad4 	.word	0x20000ad4
   //#if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW6:
      case Sn_MR_IPRAW4 : 
         if(sock_remained_size[sn] == 0)
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	4a54      	ldr	r2, [pc, #336]	@ (8010710 <recvfrom_IO_6+0x418>)
 80105c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d166      	bne.n	8010696 <recvfrom_IO_6+0x39e>
         {
#ifndef IPV6_AVAILABLE
            wiz_recv_data(sn, head, 6);
 80105c8:	f107 0114 	add.w	r1, r7, #20
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	2206      	movs	r2, #6
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe ffa3 	bl	800f51c <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	3301      	adds	r3, #1
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80105e2:	2140      	movs	r1, #64	@ 0x40
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe fd9f 	bl	800f128 <WIZCHIP_WRITE>
            while(getSn_CR(sn));
 80105ea:	bf00      	nop
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	3301      	adds	r3, #1
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fe fd49 	bl	800f090 <WIZCHIP_READ>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1f3      	bne.n	80105ec <recvfrom_IO_6+0x2f4>
            addr[0] = head[0];
 8010604:	7d3a      	ldrb	r2, [r7, #20]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	701a      	strb	r2, [r3, #0]
            addr[1] = head[1];
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	3301      	adds	r3, #1
 801060e:	7d7a      	ldrb	r2, [r7, #21]
 8010610:	701a      	strb	r2, [r3, #0]
            addr[2] = head[2];
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3302      	adds	r3, #2
 8010616:	7dba      	ldrb	r2, [r7, #22]
 8010618:	701a      	strb	r2, [r3, #0]
            addr[3] = head[3];
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3303      	adds	r3, #3
 801061e:	7dfa      	ldrb	r2, [r7, #23]
 8010620:	701a      	strb	r2, [r3, #0]
            sock_remained_size[sn] = head[4];
 8010622:	7e3a      	ldrb	r2, [r7, #24]
 8010624:	7bfb      	ldrb	r3, [r7, #15]
 8010626:	4611      	mov	r1, r2
 8010628:	4a39      	ldr	r2, [pc, #228]	@ (8010710 <recvfrom_IO_6+0x418>)
 801062a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            //M20150401 : For Typing Error
            //sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
            sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	4a37      	ldr	r2, [pc, #220]	@ (8010710 <recvfrom_IO_6+0x418>)
 8010632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010636:	021b      	lsls	r3, r3, #8
 8010638:	b29a      	uxth	r2, r3
 801063a:	7e7b      	ldrb	r3, [r7, #25]
 801063c:	4619      	mov	r1, r3
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	440a      	add	r2, r1
 8010642:	b291      	uxth	r1, r2
 8010644:	4a32      	ldr	r2, [pc, #200]	@ (8010710 <recvfrom_IO_6+0x418>)
 8010646:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            sock_pack_info[sn] = PACK_FIRST;
 801064a:	7bfb      	ldrb	r3, [r7, #15]
 801064c:	4a31      	ldr	r2, [pc, #196]	@ (8010714 <recvfrom_IO_6+0x41c>)
 801064e:	2180      	movs	r1, #128	@ 0x80
 8010650:	54d1      	strb	r1, [r2, r3]
         //
         // Need to packet length check
         //
         if(len < sock_remained_size[sn]) pack_len = len;
 8010652:	7bfb      	ldrb	r3, [r7, #15]
 8010654:	4a2e      	ldr	r2, [pc, #184]	@ (8010710 <recvfrom_IO_6+0x418>)
 8010656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801065a:	89ba      	ldrh	r2, [r7, #12]
 801065c:	429a      	cmp	r2, r3
 801065e:	d202      	bcs.n	8010666 <recvfrom_IO_6+0x36e>
 8010660:	89bb      	ldrh	r3, [r7, #12]
 8010662:	83fb      	strh	r3, [r7, #30]
 8010664:	e004      	b.n	8010670 <recvfrom_IO_6+0x378>
         else pack_len = sock_remained_size[sn];
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	4a29      	ldr	r2, [pc, #164]	@ (8010710 <recvfrom_IO_6+0x418>)
 801066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801066e:	83fb      	strh	r3, [r7, #30]
         wiz_recv_data(sn, buf, pack_len); // data copy.
 8010670:	8bfa      	ldrh	r2, [r7, #30]
 8010672:	7bfb      	ldrb	r3, [r7, #15]
 8010674:	68b9      	ldr	r1, [r7, #8]
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe ff50 	bl	800f51c <wiz_recv_data>
            setSn_CR(sn,Sn_CR_RECV);
            while(getSn_CR(sn));
           
#endif
         }
         break;
 801067c:	e00b      	b.n	8010696 <recvfrom_IO_6+0x39e>
         default:
            wiz_recv_ignore(sn, pack_len); // data copy.
 801067e:	8bfa      	ldrh	r2, [r7, #30]
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	4611      	mov	r1, r2
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe ffa3 	bl	800f5d0 <wiz_recv_ignore>
            sock_remained_size[sn] = pack_len;
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	4920      	ldr	r1, [pc, #128]	@ (8010710 <recvfrom_IO_6+0x418>)
 801068e:	8bfa      	ldrh	r2, [r7, #30]
 8010690:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            break;
 8010694:	e000      	b.n	8010698 <recvfrom_IO_6+0x3a0>
         break;
 8010696:	bf00      	nop
      sock_remained_size[sn] -= pack_len;
      if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= PACK_REMAINED;
      else sock_pack_info[sn] |= PACK_COMPLETED;
      
#else 
	setSn_CR(sn,Sn_CR_RECV);
 8010698:	7bfb      	ldrb	r3, [r7, #15]
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	3301      	adds	r3, #1
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80106a4:	2140      	movs	r1, #64	@ 0x40
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fe fd3e 	bl	800f128 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80106ac:	bf00      	nop
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
 80106b0:	009b      	lsls	r3, r3, #2
 80106b2:	3301      	adds	r3, #1
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fe fce8 	bl	800f090 <WIZCHIP_READ>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d1f3      	bne.n	80106ae <recvfrom_IO_6+0x3b6>
	sock_remained_size[sn] -= pack_len;
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	4a11      	ldr	r2, [pc, #68]	@ (8010710 <recvfrom_IO_6+0x418>)
 80106ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	8bfa      	ldrh	r2, [r7, #30]
 80106d2:	1a8a      	subs	r2, r1, r2
 80106d4:	b291      	uxth	r1, r2
 80106d6:	4a0e      	ldr	r2, [pc, #56]	@ (8010710 <recvfrom_IO_6+0x418>)
 80106d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	4a0c      	ldr	r2, [pc, #48]	@ (8010710 <recvfrom_IO_6+0x418>)
 80106e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d009      	beq.n	80106fc <recvfrom_IO_6+0x404>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80106e8:	7bfb      	ldrb	r3, [r7, #15]
 80106ea:	4a0a      	ldr	r2, [pc, #40]	@ (8010714 <recvfrom_IO_6+0x41c>)
 80106ec:	5cd2      	ldrb	r2, [r2, r3]
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
 80106f0:	f042 0201 	orr.w	r2, r2, #1
 80106f4:	b2d1      	uxtb	r1, r2
 80106f6:	4a07      	ldr	r2, [pc, #28]	@ (8010714 <recvfrom_IO_6+0x41c>)
 80106f8:	54d1      	strb	r1, [r2, r3]
 80106fa:	e003      	b.n	8010704 <recvfrom_IO_6+0x40c>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	4a05      	ldr	r2, [pc, #20]	@ (8010714 <recvfrom_IO_6+0x41c>)
 8010700:	2100      	movs	r1, #0
 8010702:	54d1      	strb	r1, [r2, r3]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
#endif 
   return (int32_t)pack_len;
 8010704:	8bfb      	ldrh	r3, [r7, #30]
}
 8010706:	4618      	mov	r0, r3
 8010708:	3720      	adds	r7, #32
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	20000ac4 	.word	0x20000ac4
 8010714:	20000ad4 	.word	0x20000ad4

08010718 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
 801071c:	bf00      	nop
 801071e:	46bd      	mov	sp, r7
 8010720:	bc80      	pop	{r7}
 8010722:	4770      	bx	lr

08010724 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8010724:	b480      	push	{r7}
 8010726:	af00      	add	r7, sp, #0
 8010728:	bf00      	nop
 801072a:	46bd      	mov	sp, r7
 801072c:	bc80      	pop	{r7}
 801072e:	4770      	bx	lr

08010730 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8010730:	b480      	push	{r7}
 8010732:	af00      	add	r7, sp, #0
 8010734:	bf00      	nop
 8010736:	46bd      	mov	sp, r7
 8010738:	bc80      	pop	{r7}
 801073a:	4770      	bx	lr

0801073c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 801073c:	b480      	push	{r7}
 801073e:	af00      	add	r7, sp, #0
 8010740:	bf00      	nop
 8010742:	46bd      	mov	sp, r7
 8010744:	bc80      	pop	{r7}
 8010746:	4770      	bx	lr

08010748 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	b2db      	uxtb	r3, r3
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	bc80      	pop	{r7}
 801075e:	4770      	bx	lr

08010760 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	78fa      	ldrb	r2, [r7, #3]
 8010770:	701a      	strb	r2, [r3, #0]
 8010772:	bf00      	nop
 8010774:	370c      	adds	r7, #12
 8010776:	46bd      	mov	sp, r7
 8010778:	bc80      	pop	{r7}
 801077a:	4770      	bx	lr

0801077c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801077c:	b480      	push	{r7}
 801077e:	af00      	add	r7, sp, #0
 8010780:	2300      	movs	r3, #0
 8010782:	4618      	mov	r0, r3
 8010784:	46bd      	mov	sp, r7
 8010786:	bc80      	pop	{r7}
 8010788:	4770      	bx	lr

0801078a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801078a:	b480      	push	{r7}
 801078c:	b083      	sub	sp, #12
 801078e:	af00      	add	r7, sp, #0
 8010790:	4603      	mov	r3, r0
 8010792:	71fb      	strb	r3, [r7, #7]
 8010794:	bf00      	nop
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	bc80      	pop	{r7}
 801079c:	4770      	bx	lr
	...

080107a0 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 80107a0:	b590      	push	{r4, r7, lr}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	460b      	mov	r3, r1
 80107aa:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 80107ac:	2300      	movs	r3, #0
 80107ae:	81fb      	strh	r3, [r7, #14]
 80107b0:	e00a      	b.n	80107c8 <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 80107b2:	4b0a      	ldr	r3, [pc, #40]	@ (80107dc <wizchip_spi_readburst+0x3c>)
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	687c      	ldr	r4, [r7, #4]
 80107b8:	1c62      	adds	r2, r4, #1
 80107ba:	607a      	str	r2, [r7, #4]
 80107bc:	4798      	blx	r3
 80107be:	4603      	mov	r3, r0
 80107c0:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 80107c2:	89fb      	ldrh	r3, [r7, #14]
 80107c4:	3301      	adds	r3, #1
 80107c6:	81fb      	strh	r3, [r7, #14]
 80107c8:	89fa      	ldrh	r2, [r7, #14]
 80107ca:	887b      	ldrh	r3, [r7, #2]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d3f0      	bcc.n	80107b2 <wizchip_spi_readburst+0x12>
	}
}
 80107d0:	bf00      	nop
 80107d2:	bf00      	nop
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd90      	pop	{r4, r7, pc}
 80107da:	bf00      	nop
 80107dc:	20000024 	.word	0x20000024

080107e0 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 80107ec:	2300      	movs	r3, #0
 80107ee:	81fb      	strh	r3, [r7, #14]
 80107f0:	e00a      	b.n	8010808 <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 80107f2:	4b0a      	ldr	r3, [pc, #40]	@ (801081c <wizchip_spi_writeburst+0x3c>)
 80107f4:	6a1a      	ldr	r2, [r3, #32]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	1c59      	adds	r1, r3, #1
 80107fa:	6079      	str	r1, [r7, #4]
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	4618      	mov	r0, r3
 8010800:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8010802:	89fb      	ldrh	r3, [r7, #14]
 8010804:	3301      	adds	r3, #1
 8010806:	81fb      	strh	r3, [r7, #14]
 8010808:	89fa      	ldrh	r2, [r7, #14]
 801080a:	887b      	ldrh	r3, [r7, #2]
 801080c:	429a      	cmp	r2, r3
 801080e:	d3f0      	bcc.n	80107f2 <wizchip_spi_writeburst+0x12>
	}
}
 8010810:	bf00      	nop
 8010812:	bf00      	nop
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20000024 	.word	0x20000024

08010820 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <reg_wizchip_cs_cbfunc+0x16>
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d106      	bne.n	8010844 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8010836:	4b09      	ldr	r3, [pc, #36]	@ (801085c <reg_wizchip_cs_cbfunc+0x3c>)
 8010838:	4a09      	ldr	r2, [pc, #36]	@ (8010860 <reg_wizchip_cs_cbfunc+0x40>)
 801083a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801083c:	4b07      	ldr	r3, [pc, #28]	@ (801085c <reg_wizchip_cs_cbfunc+0x3c>)
 801083e:	4a09      	ldr	r2, [pc, #36]	@ (8010864 <reg_wizchip_cs_cbfunc+0x44>)
 8010840:	619a      	str	r2, [r3, #24]
 8010842:	e006      	b.n	8010852 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8010844:	4a05      	ldr	r2, [pc, #20]	@ (801085c <reg_wizchip_cs_cbfunc+0x3c>)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801084a:	4a04      	ldr	r2, [pc, #16]	@ (801085c <reg_wizchip_cs_cbfunc+0x3c>)
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	6193      	str	r3, [r2, #24]
   }
}
 8010850:	bf00      	nop
 8010852:	bf00      	nop
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	bc80      	pop	{r7}
 801085a:	4770      	bx	lr
 801085c:	20000024 	.word	0x20000024
 8010860:	08010731 	.word	0x08010731
 8010864:	0801073d 	.word	0x0801073d

08010868 <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8010872:	bf00      	nop
 8010874:	4b0f      	ldr	r3, [pc, #60]	@ (80108b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801087c:	2b00      	cmp	r3, #0
 801087e:	d0f9      	beq.n	8010874 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d002      	beq.n	801088c <reg_wizchip_spi_cbfunc+0x24>
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d106      	bne.n	801089a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801088c:	4b09      	ldr	r3, [pc, #36]	@ (80108b4 <reg_wizchip_spi_cbfunc+0x4c>)
 801088e:	4a0a      	ldr	r2, [pc, #40]	@ (80108b8 <reg_wizchip_spi_cbfunc+0x50>)
 8010890:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8010892:	4b08      	ldr	r3, [pc, #32]	@ (80108b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8010894:	4a09      	ldr	r2, [pc, #36]	@ (80108bc <reg_wizchip_spi_cbfunc+0x54>)
 8010896:	621a      	str	r2, [r3, #32]
 8010898:	e006      	b.n	80108a8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801089a:	4a06      	ldr	r2, [pc, #24]	@ (80108b4 <reg_wizchip_spi_cbfunc+0x4c>)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80108a0:	4a04      	ldr	r2, [pc, #16]	@ (80108b4 <reg_wizchip_spi_cbfunc+0x4c>)
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	6213      	str	r3, [r2, #32]
   }
}
 80108a6:	bf00      	nop
 80108a8:	bf00      	nop
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bc80      	pop	{r7}
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop
 80108b4:	20000024 	.word	0x20000024
 80108b8:	0801077d 	.word	0x0801077d
 80108bc:	0801078b 	.word	0x0801078b

080108c0 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80108ca:	bf00      	nop
 80108cc:	4b0f      	ldr	r3, [pc, #60]	@ (801090c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d0f9      	beq.n	80108cc <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d002      	beq.n	80108e4 <reg_wizchip_spiburst_cbfunc+0x24>
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d106      	bne.n	80108f2 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80108e4:	4b09      	ldr	r3, [pc, #36]	@ (801090c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80108e6:	4a0a      	ldr	r2, [pc, #40]	@ (8010910 <reg_wizchip_spiburst_cbfunc+0x50>)
 80108e8:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80108ea:	4b08      	ldr	r3, [pc, #32]	@ (801090c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80108ec:	4a09      	ldr	r2, [pc, #36]	@ (8010914 <reg_wizchip_spiburst_cbfunc+0x54>)
 80108ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80108f0:	e006      	b.n	8010900 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80108f2:	4a06      	ldr	r2, [pc, #24]	@ (801090c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80108f8:	4a04      	ldr	r2, [pc, #16]	@ (801090c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 80108fe:	bf00      	nop
 8010900:	bf00      	nop
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	bc80      	pop	{r7}
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	20000024 	.word	0x20000024
 8010910:	080107a1 	.word	0x080107a1
 8010914:	080107e1 	.word	0x080107e1

08010918 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b086      	sub	sp, #24
 801091c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801091e:	1d3b      	adds	r3, r7, #4
 8010920:	2206      	movs	r2, #6
 8010922:	4619      	mov	r1, r3
 8010924:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010928:	f7fe fc4c 	bl	800f1c4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801092c:	f107 0314 	add.w	r3, r7, #20
 8010930:	2204      	movs	r2, #4
 8010932:	4619      	mov	r1, r3
 8010934:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010938:	f7fe fc44 	bl	800f1c4 <WIZCHIP_READ_BUF>
 801093c:	f107 0310 	add.w	r3, r7, #16
 8010940:	2204      	movs	r2, #4
 8010942:	4619      	mov	r1, r3
 8010944:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8010948:	f7fe fc3c 	bl	800f1c4 <WIZCHIP_READ_BUF>
 801094c:	f107 030c 	add.w	r3, r7, #12
 8010950:	2204      	movs	r2, #4
 8010952:	4619      	mov	r1, r3
 8010954:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8010958:	f7fe fc34 	bl	800f1c4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801095c:	2180      	movs	r1, #128	@ 0x80
 801095e:	2000      	movs	r0, #0
 8010960:	f7fe fbe2 	bl	800f128 <WIZCHIP_WRITE>
   getMR(); // for delay
 8010964:	2000      	movs	r0, #0
 8010966:	f7fe fb93 	bl	800f090 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801096a:	1d3b      	adds	r3, r7, #4
 801096c:	2206      	movs	r2, #6
 801096e:	4619      	mov	r1, r3
 8010970:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010974:	f7fe fc86 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8010978:	f107 0314 	add.w	r3, r7, #20
 801097c:	2204      	movs	r2, #4
 801097e:	4619      	mov	r1, r3
 8010980:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010984:	f7fe fc7e 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8010988:	f107 0310 	add.w	r3, r7, #16
 801098c:	2204      	movs	r2, #4
 801098e:	4619      	mov	r1, r3
 8010990:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8010994:	f7fe fc76 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8010998:	f107 030c 	add.w	r3, r7, #12
 801099c:	2204      	movs	r2, #4
 801099e:	4619      	mov	r1, r3
 80109a0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80109a4:	f7fe fc6e 	bl	800f284 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 80109a8:	bf00      	nop
 80109aa:	3718      	adds	r7, #24
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80109be:	f7ff ffab 	bl	8010918 <wizchip_sw_reset>
   if(txsize)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d03b      	beq.n	8010a40 <wizchip_init+0x90>
   {
      tmp = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80109cc:	2300      	movs	r3, #0
 80109ce:	73fb      	strb	r3, [r7, #15]
 80109d0:	e015      	b.n	80109fe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80109d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	4413      	add	r3, r2
 80109da:	781a      	ldrb	r2, [r3, #0]
 80109dc:	7bbb      	ldrb	r3, [r7, #14]
 80109de:	4413      	add	r3, r2
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80109e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109e8:	2b10      	cmp	r3, #16
 80109ea:	dd02      	ble.n	80109f2 <wizchip_init+0x42>
 80109ec:	f04f 33ff 	mov.w	r3, #4294967295
 80109f0:	e066      	b.n	8010ac0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80109f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	3301      	adds	r3, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	73fb      	strb	r3, [r7, #15]
 80109fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a02:	2b07      	cmp	r3, #7
 8010a04:	dde5      	ble.n	80109d2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010a06:	2300      	movs	r3, #0
 8010a08:	73fb      	strb	r3, [r7, #15]
 8010a0a:	e015      	b.n	8010a38 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8010a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	3301      	adds	r3, #1
 8010a14:	00db      	lsls	r3, r3, #3
 8010a16:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	4413      	add	r3, r2
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	4619      	mov	r1, r3
 8010a28:	f7fe fb7e 	bl	800f128 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	3301      	adds	r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	73fb      	strb	r3, [r7, #15]
 8010a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a3c:	2b07      	cmp	r3, #7
 8010a3e:	dde5      	ble.n	8010a0c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d03b      	beq.n	8010abe <wizchip_init+0x10e>
   {
      tmp = 0;
 8010a46:	2300      	movs	r3, #0
 8010a48:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	73fb      	strb	r3, [r7, #15]
 8010a4e:	e015      	b.n	8010a7c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8010a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	4413      	add	r3, r2
 8010a58:	781a      	ldrb	r2, [r3, #0]
 8010a5a:	7bbb      	ldrb	r3, [r7, #14]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8010a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a66:	2b10      	cmp	r3, #16
 8010a68:	dd02      	ble.n	8010a70 <wizchip_init+0xc0>
 8010a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6e:	e027      	b.n	8010ac0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	3301      	adds	r3, #1
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	73fb      	strb	r3, [r7, #15]
 8010a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a80:	2b07      	cmp	r3, #7
 8010a82:	dde5      	ble.n	8010a50 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010a84:	2300      	movs	r3, #0
 8010a86:	73fb      	strb	r3, [r7, #15]
 8010a88:	e015      	b.n	8010ab6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8010a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	3301      	adds	r3, #1
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a9e:	683a      	ldr	r2, [r7, #0]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f7fe fb3f 	bl	800f128 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8010aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	73fb      	strb	r3, [r7, #15]
 8010ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aba:	2b07      	cmp	r3, #7
 8010abc:	dde5      	ble.n	8010a8a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2206      	movs	r2, #6
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010ada:	f7fe fbd3 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	330e      	adds	r3, #14
 8010ae2:	2204      	movs	r2, #4
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010aea:	f7fe fbcb 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	330a      	adds	r3, #10
 8010af2:	2204      	movs	r2, #4
 8010af4:	4619      	mov	r1, r3
 8010af6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8010afa:	f7fe fbc3 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3306      	adds	r3, #6
 8010b02:	2204      	movs	r2, #4
 8010b04:	4619      	mov	r1, r3
 8010b06:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8010b0a:	f7fe fbbb 	bl	800f284 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7c9a      	ldrb	r2, [r3, #18]
 8010b12:	4b0b      	ldr	r3, [pc, #44]	@ (8010b40 <wizchip_setnetinfo+0x78>)
 8010b14:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	7cda      	ldrb	r2, [r3, #19]
 8010b1a:	4b09      	ldr	r3, [pc, #36]	@ (8010b40 <wizchip_setnetinfo+0x78>)
 8010b1c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	7d1a      	ldrb	r2, [r3, #20]
 8010b22:	4b07      	ldr	r3, [pc, #28]	@ (8010b40 <wizchip_setnetinfo+0x78>)
 8010b24:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	7d5a      	ldrb	r2, [r3, #21]
 8010b2a:	4b05      	ldr	r3, [pc, #20]	@ (8010b40 <wizchip_setnetinfo+0x78>)
 8010b2c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	7d9a      	ldrb	r2, [r3, #22]
 8010b32:	4b04      	ldr	r3, [pc, #16]	@ (8010b44 <wizchip_setnetinfo+0x7c>)
 8010b34:	701a      	strb	r2, [r3, #0]
}
 8010b36:	bf00      	nop
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	20000adc 	.word	0x20000adc
 8010b44:	20000ae0 	.word	0x20000ae0

08010b48 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8010b4c:	2204      	movs	r2, #4
 8010b4e:	4909      	ldr	r1, [pc, #36]	@ (8010b74 <default_ip_assign+0x2c>)
 8010b50:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8010b54:	f7fe fb96 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8010b58:	2204      	movs	r2, #4
 8010b5a:	4907      	ldr	r1, [pc, #28]	@ (8010b78 <default_ip_assign+0x30>)
 8010b5c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8010b60:	f7fe fb90 	bl	800f284 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8010b64:	2204      	movs	r2, #4
 8010b66:	4905      	ldr	r1, [pc, #20]	@ (8010b7c <default_ip_assign+0x34>)
 8010b68:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8010b6c:	f7fe fb8a 	bl	800f284 <WIZCHIP_WRITE_BUF>
}
 8010b70:	bf00      	nop
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	20000af0 	.word	0x20000af0
 8010b78:	20000af8 	.word	0x20000af8
 8010b7c:	20000af4 	.word	0x20000af4

08010b80 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	af00      	add	r7, sp, #0
	CHIPUNLOCK();
	setSYCR0(SYCR0_RST);
	CHIPLOCK();
	getSYSR();
#else
	setMR(MR_RST);
 8010b84:	2180      	movs	r1, #128	@ 0x80
 8010b86:	2000      	movs	r0, #0
 8010b88:	f7fe face 	bl	800f128 <WIZCHIP_WRITE>
	getMR(); // for delay
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f7fe fa7f 	bl	800f090 <WIZCHIP_READ>
#endif
#else
   setMR(MR_RST);
   getMR(); // for delay
#endif
   default_ip_assign();
 8010b92:	f7ff ffd9 	bl	8010b48 <default_ip_assign>
#if _WIZCHIP_ == W6100
	NETUNLOCK();
	setSHAR(DHCP_CHADDR);    
	NETLOCK();
#else
   	setSHAR(DHCP_CHADDR);
 8010b96:	2206      	movs	r2, #6
 8010b98:	4903      	ldr	r1, [pc, #12]	@ (8010ba8 <default_ip_update+0x28>)
 8010b9a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010b9e:	f7fe fb71 	bl	800f284 <WIZCHIP_WRITE_BUF>
#endif   
}
 8010ba2:	bf00      	nop
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20000b10 	.word	0x20000b10

08010bac <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	af00      	add	r7, sp, #0
	CHIPUNLOCK();
	setSYCR0(SYCR0_RST);
	CHIPLOCK();
	getSYSR();
#else
	setMR(MR_RST);
 8010bb0:	2180      	movs	r1, #128	@ 0x80
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	f7fe fab8 	bl	800f128 <WIZCHIP_WRITE>
	getMR(); // for delay
 8010bb8:	2000      	movs	r0, #0
 8010bba:	f7fe fa69 	bl	800f090 <WIZCHIP_READ>
#if _WIZCHIP_ == W6100
	NETUNLOCK();
	setSHAR(DHCP_CHADDR);    
	NETLOCK();
#else
	setSHAR(DHCP_CHADDR);
 8010bbe:	2206      	movs	r2, #6
 8010bc0:	4903      	ldr	r1, [pc, #12]	@ (8010bd0 <default_ip_conflict+0x24>)
 8010bc2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010bc6:	f7fe fb5d 	bl	800f284 <WIZCHIP_WRITE_BUF>
#endif   
}
 8010bca:	bf00      	nop
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20000b10 	.word	0x20000b10

08010bd4 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b085      	sub	sp, #20
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8010be0:	4b0f      	ldr	r3, [pc, #60]	@ (8010c20 <reg_dhcp_cbfunc+0x4c>)
 8010be2:	4a10      	ldr	r2, [pc, #64]	@ (8010c24 <reg_dhcp_cbfunc+0x50>)
 8010be4:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8010be6:	4b10      	ldr	r3, [pc, #64]	@ (8010c28 <reg_dhcp_cbfunc+0x54>)
 8010be8:	4a10      	ldr	r2, [pc, #64]	@ (8010c2c <reg_dhcp_cbfunc+0x58>)
 8010bea:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8010bec:	4b10      	ldr	r3, [pc, #64]	@ (8010c30 <reg_dhcp_cbfunc+0x5c>)
 8010bee:	4a11      	ldr	r2, [pc, #68]	@ (8010c34 <reg_dhcp_cbfunc+0x60>)
 8010bf0:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <reg_dhcp_cbfunc+0x2a>
 8010bf8:	4a09      	ldr	r2, [pc, #36]	@ (8010c20 <reg_dhcp_cbfunc+0x4c>)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <reg_dhcp_cbfunc+0x36>
 8010c04:	4a08      	ldr	r2, [pc, #32]	@ (8010c28 <reg_dhcp_cbfunc+0x54>)
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <reg_dhcp_cbfunc+0x42>
 8010c10:	4a07      	ldr	r2, [pc, #28]	@ (8010c30 <reg_dhcp_cbfunc+0x5c>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6013      	str	r3, [r2, #0]
}
 8010c16:	bf00      	nop
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bc80      	pop	{r7}
 8010c1e:	4770      	bx	lr
 8010c20:	20000060 	.word	0x20000060
 8010c24:	08010b49 	.word	0x08010b49
 8010c28:	20000064 	.word	0x20000064
 8010c2c:	08010b81 	.word	0x08010b81
 8010c30:	20000068 	.word	0x20000068
 8010c34:	08010bad 	.word	0x08010bad

08010c38 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8010c3e:	463b      	mov	r3, r7
 8010c40:	2206      	movs	r2, #6
 8010c42:	4619      	mov	r1, r3
 8010c44:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8010c48:	f7fe fabc 	bl	800f1c4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8010c4c:	4b72      	ldr	r3, [pc, #456]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2201      	movs	r2, #1
 8010c52:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8010c54:	4b70      	ldr	r3, [pc, #448]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2201      	movs	r2, #1
 8010c5a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8010c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2206      	movs	r2, #6
 8010c62:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8010c64:	4b6c      	ldr	r3, [pc, #432]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8010c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	3304      	adds	r3, #4
 8010c72:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8010c74:	4b69      	ldr	r3, [pc, #420]	@ (8010e1c <makeDHCPMSG+0x1e4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	0e1b      	lsrs	r3, r3, #24
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8010c80:	4b66      	ldr	r3, [pc, #408]	@ (8010e1c <makeDHCPMSG+0x1e4>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	0c1a      	lsrs	r2, r3, #16
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	3301      	adds	r3, #1
 8010c8a:	b2d2      	uxtb	r2, r2
 8010c8c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8010c8e:	4b63      	ldr	r3, [pc, #396]	@ (8010e1c <makeDHCPMSG+0x1e4>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	0a1a      	lsrs	r2, r3, #8
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3302      	adds	r3, #2
 8010c98:	b2d2      	uxtb	r2, r2
 8010c9a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8010c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8010e1c <makeDHCPMSG+0x1e4>)
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	3303      	adds	r3, #3
 8010ca4:	b2d2      	uxtb	r2, r2
 8010ca6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8010ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2200      	movs	r2, #0
 8010cae:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8010cb0:	4b59      	ldr	r3, [pc, #356]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	330a      	adds	r3, #10
 8010cb6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	2280      	movs	r2, #128	@ 0x80
 8010cbc:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8010cc6:	4b54      	ldr	r3, [pc, #336]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8010cce:	4b52      	ldr	r3, [pc, #328]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8010cd6:	4b50      	ldr	r3, [pc, #320]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8010cde:	4b4e      	ldr	r3, [pc, #312]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8010ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2200      	movs	r2, #0
 8010cec:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8010cee:	4b4a      	ldr	r3, [pc, #296]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8010cf6:	4b48      	ldr	r3, [pc, #288]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8010cfe:	4b46      	ldr	r3, [pc, #280]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2200      	movs	r2, #0
 8010d04:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8010d06:	4b44      	ldr	r3, [pc, #272]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8010d0e:	4b42      	ldr	r3, [pc, #264]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2200      	movs	r2, #0
 8010d14:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8010d16:	4b40      	ldr	r3, [pc, #256]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8010d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2200      	movs	r2, #0
 8010d24:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8010d26:	4b3c      	ldr	r3, [pc, #240]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8010d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2200      	movs	r2, #0
 8010d34:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8010d36:	4b38      	ldr	r3, [pc, #224]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8010d3e:	4b36      	ldr	r3, [pc, #216]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2200      	movs	r2, #0
 8010d44:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8010d46:	4b34      	ldr	r3, [pc, #208]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a35      	ldr	r2, [pc, #212]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d4c:	7812      	ldrb	r2, [r2, #0]
 8010d4e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8010d50:	4b31      	ldr	r3, [pc, #196]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a32      	ldr	r2, [pc, #200]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d56:	7852      	ldrb	r2, [r2, #1]
 8010d58:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8010d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a30      	ldr	r2, [pc, #192]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d60:	7892      	ldrb	r2, [r2, #2]
 8010d62:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8010d64:	4b2c      	ldr	r3, [pc, #176]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a2d      	ldr	r2, [pc, #180]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d6a:	78d2      	ldrb	r2, [r2, #3]
 8010d6c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8010d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a2b      	ldr	r2, [pc, #172]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d74:	7912      	ldrb	r2, [r2, #4]
 8010d76:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8010d7a:	4b27      	ldr	r3, [pc, #156]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4a28      	ldr	r2, [pc, #160]	@ (8010e20 <makeDHCPMSG+0x1e8>)
 8010d80:	7952      	ldrb	r2, [r2, #5]
 8010d82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8010d86:	2306      	movs	r3, #6
 8010d88:	73fb      	strb	r3, [r7, #15]
 8010d8a:	e008      	b.n	8010d9e <makeDHCPMSG+0x166>
 8010d8c:	4b22      	ldr	r3, [pc, #136]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
 8010d92:	4413      	add	r3, r2
 8010d94:	2200      	movs	r2, #0
 8010d96:	771a      	strb	r2, [r3, #28]
 8010d98:	7bfb      	ldrb	r3, [r7, #15]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	73fb      	strb	r3, [r7, #15]
 8010d9e:	7bfb      	ldrb	r3, [r7, #15]
 8010da0:	2b0f      	cmp	r3, #15
 8010da2:	d9f3      	bls.n	8010d8c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	73fb      	strb	r3, [r7, #15]
 8010da8:	e009      	b.n	8010dbe <makeDHCPMSG+0x186>
 8010daa:	4b1b      	ldr	r3, [pc, #108]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	7bfb      	ldrb	r3, [r7, #15]
 8010db0:	4413      	add	r3, r2
 8010db2:	2200      	movs	r2, #0
 8010db4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	73fb      	strb	r3, [r7, #15]
 8010dbe:	7bfb      	ldrb	r3, [r7, #15]
 8010dc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8010dc2:	d9f2      	bls.n	8010daa <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	73fb      	strb	r3, [r7, #15]
 8010dc8:	e009      	b.n	8010dde <makeDHCPMSG+0x1a6>
 8010dca:	4b13      	ldr	r3, [pc, #76]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	73fb      	strb	r3, [r7, #15]
 8010dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	daf1      	bge.n	8010dca <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8010de6:	4b0c      	ldr	r3, [pc, #48]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2263      	movs	r2, #99	@ 0x63
 8010dec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8010df0:	4b09      	ldr	r3, [pc, #36]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2282      	movs	r2, #130	@ 0x82
 8010df6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8010dfa:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2253      	movs	r2, #83	@ 0x53
 8010e00:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8010e04:	4b04      	ldr	r3, [pc, #16]	@ (8010e18 <makeDHCPMSG+0x1e0>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2263      	movs	r2, #99	@ 0x63
 8010e0a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8010e0e:	bf00      	nop
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20000b0c 	.word	0x20000b0c
 8010e1c:	20000b08 	.word	0x20000b08
 8010e20:	20000b10 	.word	0x20000b10

08010e24 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8010e24:	b5b0      	push	{r4, r5, r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8010e2e:	f7ff ff03 	bl	8010c38 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8010e32:	4b56      	ldr	r3, [pc, #344]	@ (8010f8c <send_DHCP_DISCOVER+0x168>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8010e38:	4b54      	ldr	r3, [pc, #336]	@ (8010f8c <send_DHCP_DISCOVER+0x168>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8010e3e:	4b53      	ldr	r3, [pc, #332]	@ (8010f8c <send_DHCP_DISCOVER+0x168>)
 8010e40:	2200      	movs	r2, #0
 8010e42:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8010e44:	4b51      	ldr	r3, [pc, #324]	@ (8010f8c <send_DHCP_DISCOVER+0x168>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8010e4a:	4b51      	ldr	r3, [pc, #324]	@ (8010f90 <send_DHCP_DISCOVER+0x16c>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8010e50:	4b4f      	ldr	r3, [pc, #316]	@ (8010f90 <send_DHCP_DISCOVER+0x16c>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8010e56:	4b4e      	ldr	r3, [pc, #312]	@ (8010f90 <send_DHCP_DISCOVER+0x16c>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8010e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8010f90 <send_DHCP_DISCOVER+0x16c>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8010e62:	2304      	movs	r3, #4
 8010e64:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8010e66:	4b4b      	ldr	r3, [pc, #300]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	88bb      	ldrh	r3, [r7, #4]
 8010e6c:	1c59      	adds	r1, r3, #1
 8010e6e:	80b9      	strh	r1, [r7, #4]
 8010e70:	4413      	add	r3, r2
 8010e72:	2235      	movs	r2, #53	@ 0x35
 8010e74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8010e78:	4b46      	ldr	r3, [pc, #280]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010e7a:	681a      	ldr	r2, [r3, #0]
 8010e7c:	88bb      	ldrh	r3, [r7, #4]
 8010e7e:	1c59      	adds	r1, r3, #1
 8010e80:	80b9      	strh	r1, [r7, #4]
 8010e82:	4413      	add	r3, r2
 8010e84:	2201      	movs	r2, #1
 8010e86:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8010e8a:	4b42      	ldr	r3, [pc, #264]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	88bb      	ldrh	r3, [r7, #4]
 8010e90:	1c59      	adds	r1, r3, #1
 8010e92:	80b9      	strh	r1, [r7, #4]
 8010e94:	4413      	add	r3, r2
 8010e96:	2201      	movs	r2, #1
 8010e98:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8010e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	88bb      	ldrh	r3, [r7, #4]
 8010ea2:	1c59      	adds	r1, r3, #1
 8010ea4:	80b9      	strh	r1, [r7, #4]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	223d      	movs	r2, #61	@ 0x3d
 8010eaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8010eae:	4b39      	ldr	r3, [pc, #228]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	88bb      	ldrh	r3, [r7, #4]
 8010eb4:	1c59      	adds	r1, r3, #1
 8010eb6:	80b9      	strh	r1, [r7, #4]
 8010eb8:	4413      	add	r3, r2
 8010eba:	2207      	movs	r2, #7
 8010ebc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8010ec0:	4b34      	ldr	r3, [pc, #208]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	88bb      	ldrh	r3, [r7, #4]
 8010ec6:	1c59      	adds	r1, r3, #1
 8010ec8:	80b9      	strh	r1, [r7, #4]
 8010eca:	4413      	add	r3, r2
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8010ed2:	4b30      	ldr	r3, [pc, #192]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	88bb      	ldrh	r3, [r7, #4]
 8010ed8:	1c59      	adds	r1, r3, #1
 8010eda:	80b9      	strh	r1, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	4b2e      	ldr	r3, [pc, #184]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010ee0:	7819      	ldrb	r1, [r3, #0]
 8010ee2:	1813      	adds	r3, r2, r0
 8010ee4:	460a      	mov	r2, r1
 8010ee6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8010eea:	4b2a      	ldr	r3, [pc, #168]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	88bb      	ldrh	r3, [r7, #4]
 8010ef0:	1c59      	adds	r1, r3, #1
 8010ef2:	80b9      	strh	r1, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	4b28      	ldr	r3, [pc, #160]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010ef8:	7859      	ldrb	r1, [r3, #1]
 8010efa:	1813      	adds	r3, r2, r0
 8010efc:	460a      	mov	r2, r1
 8010efe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8010f02:	4b24      	ldr	r3, [pc, #144]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	88bb      	ldrh	r3, [r7, #4]
 8010f08:	1c59      	adds	r1, r3, #1
 8010f0a:	80b9      	strh	r1, [r7, #4]
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	4b22      	ldr	r3, [pc, #136]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010f10:	7899      	ldrb	r1, [r3, #2]
 8010f12:	1813      	adds	r3, r2, r0
 8010f14:	460a      	mov	r2, r1
 8010f16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8010f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	88bb      	ldrh	r3, [r7, #4]
 8010f20:	1c59      	adds	r1, r3, #1
 8010f22:	80b9      	strh	r1, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	4b1c      	ldr	r3, [pc, #112]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010f28:	78d9      	ldrb	r1, [r3, #3]
 8010f2a:	1813      	adds	r3, r2, r0
 8010f2c:	460a      	mov	r2, r1
 8010f2e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8010f32:	4b18      	ldr	r3, [pc, #96]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	88bb      	ldrh	r3, [r7, #4]
 8010f38:	1c59      	adds	r1, r3, #1
 8010f3a:	80b9      	strh	r1, [r7, #4]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	4b16      	ldr	r3, [pc, #88]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010f40:	7919      	ldrb	r1, [r3, #4]
 8010f42:	1813      	adds	r3, r2, r0
 8010f44:	460a      	mov	r2, r1
 8010f46:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8010f4a:	4b12      	ldr	r3, [pc, #72]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	88bb      	ldrh	r3, [r7, #4]
 8010f50:	1c59      	adds	r1, r3, #1
 8010f52:	80b9      	strh	r1, [r7, #4]
 8010f54:	4618      	mov	r0, r3
 8010f56:	4b10      	ldr	r3, [pc, #64]	@ (8010f98 <send_DHCP_DISCOVER+0x174>)
 8010f58:	7959      	ldrb	r1, [r3, #5]
 8010f5a:	1813      	adds	r3, r2, r0
 8010f5c:	460a      	mov	r2, r1
 8010f5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8010f62:	4b0c      	ldr	r3, [pc, #48]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	88bb      	ldrh	r3, [r7, #4]
 8010f68:	1c59      	adds	r1, r3, #1
 8010f6a:	80b9      	strh	r1, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	220c      	movs	r2, #12
 8010f70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8010f74:	4b07      	ldr	r3, [pc, #28]	@ (8010f94 <send_DHCP_DISCOVER+0x170>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	88bb      	ldrh	r3, [r7, #4]
 8010f7a:	1c59      	adds	r1, r3, #1
 8010f7c:	80b9      	strh	r1, [r7, #4]
 8010f7e:	4413      	add	r3, r2
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8010f86:	2300      	movs	r3, #0
 8010f88:	80fb      	strh	r3, [r7, #6]
 8010f8a:	e017      	b.n	8010fbc <send_DHCP_DISCOVER+0x198>
 8010f8c:	20000ae4 	.word	0x20000ae4
 8010f90:	20000ae8 	.word	0x20000ae8
 8010f94:	20000b0c 	.word	0x20000b0c
 8010f98:	20000b10 	.word	0x20000b10
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8010f9c:	88f9      	ldrh	r1, [r7, #6]
 8010f9e:	4b80      	ldr	r3, [pc, #512]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	88bb      	ldrh	r3, [r7, #4]
 8010fa4:	1c58      	adds	r0, r3, #1
 8010fa6:	80b8      	strh	r0, [r7, #4]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	4b7e      	ldr	r3, [pc, #504]	@ (80111a4 <send_DHCP_DISCOVER+0x380>)
 8010fac:	5c59      	ldrb	r1, [r3, r1]
 8010fae:	1813      	adds	r3, r2, r0
 8010fb0:	460a      	mov	r2, r1
 8010fb2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8010fb6:	88fb      	ldrh	r3, [r7, #6]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	80fb      	strh	r3, [r7, #6]
 8010fbc:	88fb      	ldrh	r3, [r7, #6]
 8010fbe:	4a79      	ldr	r2, [pc, #484]	@ (80111a4 <send_DHCP_DISCOVER+0x380>)
 8010fc0:	5cd3      	ldrb	r3, [r2, r3]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1ea      	bne.n	8010f9c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8010fc6:	4b78      	ldr	r3, [pc, #480]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 8010fc8:	78db      	ldrb	r3, [r3, #3]
 8010fca:	091b      	lsrs	r3, r3, #4
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4b74      	ldr	r3, [pc, #464]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8010fd0:	681c      	ldr	r4, [r3, #0]
 8010fd2:	88bb      	ldrh	r3, [r7, #4]
 8010fd4:	1c59      	adds	r1, r3, #1
 8010fd6:	80b9      	strh	r1, [r7, #4]
 8010fd8:	461d      	mov	r5, r3
 8010fda:	4610      	mov	r0, r2
 8010fdc:	f001 f99e 	bl	801231c <NibbleToHex>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	1963      	adds	r3, r4, r5
 8010fe6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8010fea:	4b6f      	ldr	r3, [pc, #444]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 8010fec:	78da      	ldrb	r2, [r3, #3]
 8010fee:	4b6c      	ldr	r3, [pc, #432]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8010ff0:	681c      	ldr	r4, [r3, #0]
 8010ff2:	88bb      	ldrh	r3, [r7, #4]
 8010ff4:	1c59      	adds	r1, r3, #1
 8010ff6:	80b9      	strh	r1, [r7, #4]
 8010ff8:	461d      	mov	r5, r3
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	f001 f98e 	bl	801231c <NibbleToHex>
 8011000:	4603      	mov	r3, r0
 8011002:	461a      	mov	r2, r3
 8011004:	1963      	adds	r3, r4, r5
 8011006:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801100a:	4b67      	ldr	r3, [pc, #412]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 801100c:	791b      	ldrb	r3, [r3, #4]
 801100e:	091b      	lsrs	r3, r3, #4
 8011010:	b2da      	uxtb	r2, r3
 8011012:	4b63      	ldr	r3, [pc, #396]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011014:	681c      	ldr	r4, [r3, #0]
 8011016:	88bb      	ldrh	r3, [r7, #4]
 8011018:	1c59      	adds	r1, r3, #1
 801101a:	80b9      	strh	r1, [r7, #4]
 801101c:	461d      	mov	r5, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f001 f97c 	bl	801231c <NibbleToHex>
 8011024:	4603      	mov	r3, r0
 8011026:	461a      	mov	r2, r3
 8011028:	1963      	adds	r3, r4, r5
 801102a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801102e:	4b5e      	ldr	r3, [pc, #376]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 8011030:	791a      	ldrb	r2, [r3, #4]
 8011032:	4b5b      	ldr	r3, [pc, #364]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011034:	681c      	ldr	r4, [r3, #0]
 8011036:	88bb      	ldrh	r3, [r7, #4]
 8011038:	1c59      	adds	r1, r3, #1
 801103a:	80b9      	strh	r1, [r7, #4]
 801103c:	461d      	mov	r5, r3
 801103e:	4610      	mov	r0, r2
 8011040:	f001 f96c 	bl	801231c <NibbleToHex>
 8011044:	4603      	mov	r3, r0
 8011046:	461a      	mov	r2, r3
 8011048:	1963      	adds	r3, r4, r5
 801104a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801104e:	4b56      	ldr	r3, [pc, #344]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 8011050:	795b      	ldrb	r3, [r3, #5]
 8011052:	091b      	lsrs	r3, r3, #4
 8011054:	b2da      	uxtb	r2, r3
 8011056:	4b52      	ldr	r3, [pc, #328]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011058:	681c      	ldr	r4, [r3, #0]
 801105a:	88bb      	ldrh	r3, [r7, #4]
 801105c:	1c59      	adds	r1, r3, #1
 801105e:	80b9      	strh	r1, [r7, #4]
 8011060:	461d      	mov	r5, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f001 f95a 	bl	801231c <NibbleToHex>
 8011068:	4603      	mov	r3, r0
 801106a:	461a      	mov	r2, r3
 801106c:	1963      	adds	r3, r4, r5
 801106e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8011072:	4b4d      	ldr	r3, [pc, #308]	@ (80111a8 <send_DHCP_DISCOVER+0x384>)
 8011074:	795a      	ldrb	r2, [r3, #5]
 8011076:	4b4a      	ldr	r3, [pc, #296]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011078:	681c      	ldr	r4, [r3, #0]
 801107a:	88bb      	ldrh	r3, [r7, #4]
 801107c:	1c59      	adds	r1, r3, #1
 801107e:	80b9      	strh	r1, [r7, #4]
 8011080:	461d      	mov	r5, r3
 8011082:	4610      	mov	r0, r2
 8011084:	f001 f94a 	bl	801231c <NibbleToHex>
 8011088:	4603      	mov	r3, r0
 801108a:	461a      	mov	r2, r3
 801108c:	1963      	adds	r3, r4, r5
 801108e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8011092:	88fb      	ldrh	r3, [r7, #6]
 8011094:	b2d9      	uxtb	r1, r3
 8011096:	4b42      	ldr	r3, [pc, #264]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	88b8      	ldrh	r0, [r7, #4]
 801109c:	88fb      	ldrh	r3, [r7, #6]
 801109e:	3307      	adds	r3, #7
 80110a0:	1ac3      	subs	r3, r0, r3
 80110a2:	3106      	adds	r1, #6
 80110a4:	b2c9      	uxtb	r1, r1
 80110a6:	4413      	add	r3, r2
 80110a8:	460a      	mov	r2, r1
 80110aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80110ae:	4b3c      	ldr	r3, [pc, #240]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	88bb      	ldrh	r3, [r7, #4]
 80110b4:	1c59      	adds	r1, r3, #1
 80110b6:	80b9      	strh	r1, [r7, #4]
 80110b8:	4413      	add	r3, r2
 80110ba:	2237      	movs	r2, #55	@ 0x37
 80110bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80110c0:	4b37      	ldr	r3, [pc, #220]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	88bb      	ldrh	r3, [r7, #4]
 80110c6:	1c59      	adds	r1, r3, #1
 80110c8:	80b9      	strh	r1, [r7, #4]
 80110ca:	4413      	add	r3, r2
 80110cc:	2206      	movs	r2, #6
 80110ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80110d2:	4b33      	ldr	r3, [pc, #204]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	88bb      	ldrh	r3, [r7, #4]
 80110d8:	1c59      	adds	r1, r3, #1
 80110da:	80b9      	strh	r1, [r7, #4]
 80110dc:	4413      	add	r3, r2
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80110e4:	4b2e      	ldr	r3, [pc, #184]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	88bb      	ldrh	r3, [r7, #4]
 80110ea:	1c59      	adds	r1, r3, #1
 80110ec:	80b9      	strh	r1, [r7, #4]
 80110ee:	4413      	add	r3, r2
 80110f0:	2203      	movs	r2, #3
 80110f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80110f6:	4b2a      	ldr	r3, [pc, #168]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	88bb      	ldrh	r3, [r7, #4]
 80110fc:	1c59      	adds	r1, r3, #1
 80110fe:	80b9      	strh	r1, [r7, #4]
 8011100:	4413      	add	r3, r2
 8011102:	2206      	movs	r2, #6
 8011104:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8011108:	4b25      	ldr	r3, [pc, #148]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	88bb      	ldrh	r3, [r7, #4]
 801110e:	1c59      	adds	r1, r3, #1
 8011110:	80b9      	strh	r1, [r7, #4]
 8011112:	4413      	add	r3, r2
 8011114:	220f      	movs	r2, #15
 8011116:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801111a:	4b21      	ldr	r3, [pc, #132]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	88bb      	ldrh	r3, [r7, #4]
 8011120:	1c59      	adds	r1, r3, #1
 8011122:	80b9      	strh	r1, [r7, #4]
 8011124:	4413      	add	r3, r2
 8011126:	223a      	movs	r2, #58	@ 0x3a
 8011128:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801112c:	4b1c      	ldr	r3, [pc, #112]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	88bb      	ldrh	r3, [r7, #4]
 8011132:	1c59      	adds	r1, r3, #1
 8011134:	80b9      	strh	r1, [r7, #4]
 8011136:	4413      	add	r3, r2
 8011138:	223b      	movs	r2, #59	@ 0x3b
 801113a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801113e:	4b18      	ldr	r3, [pc, #96]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	88bb      	ldrh	r3, [r7, #4]
 8011144:	1c59      	adds	r1, r3, #1
 8011146:	80b9      	strh	r1, [r7, #4]
 8011148:	4413      	add	r3, r2
 801114a:	22ff      	movs	r2, #255	@ 0xff
 801114c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8011150:	88bb      	ldrh	r3, [r7, #4]
 8011152:	80fb      	strh	r3, [r7, #6]
 8011154:	e009      	b.n	801116a <send_DHCP_DISCOVER+0x346>
 8011156:	4b12      	ldr	r3, [pc, #72]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	88fb      	ldrh	r3, [r7, #6]
 801115c:	4413      	add	r3, r2
 801115e:	2200      	movs	r2, #0
 8011160:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8011164:	88fb      	ldrh	r3, [r7, #6]
 8011166:	3301      	adds	r3, #1
 8011168:	80fb      	strh	r3, [r7, #6]
 801116a:	88fb      	ldrh	r3, [r7, #6]
 801116c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8011170:	d3f1      	bcc.n	8011156 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8011172:	23ff      	movs	r3, #255	@ 0xff
 8011174:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8011176:	23ff      	movs	r3, #255	@ 0xff
 8011178:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801117a:	23ff      	movs	r3, #255	@ 0xff
 801117c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801117e:	23ff      	movs	r3, #255	@ 0xff
 8011180:	70fb      	strb	r3, [r7, #3]
#if 1
	// 20231016 taylor//teddy 240122
#if ((_WIZCHIP_ == 6100)|| (_WIZCHIP_ == 6300))
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT, 4);
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8011182:	4b0a      	ldr	r3, [pc, #40]	@ (80111ac <send_DHCP_DISCOVER+0x388>)
 8011184:	7818      	ldrb	r0, [r3, #0]
 8011186:	4b06      	ldr	r3, [pc, #24]	@ (80111a0 <send_DHCP_DISCOVER+0x37c>)
 8011188:	6819      	ldr	r1, [r3, #0]
 801118a:	463b      	mov	r3, r7
 801118c:	2243      	movs	r2, #67	@ 0x43
 801118e:	9200      	str	r2, [sp, #0]
 8011190:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8011194:	f7fe fee6 	bl	800ff64 <sendto_W5x00>
#endif
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
#endif
}
 8011198:	bf00      	nop
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bdb0      	pop	{r4, r5, r7, pc}
 80111a0:	20000b0c 	.word	0x20000b0c
 80111a4:	20000058 	.word	0x20000058
 80111a8:	20000b10 	.word	0x20000b10
 80111ac:	20000ae1 	.word	0x20000ae1

080111b0 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80111b0:	b5b0      	push	{r4, r5, r7, lr}
 80111b2:	b086      	sub	sp, #24
 80111b4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80111ba:	f7ff fd3d 	bl	8010c38 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80111be:	4b1b      	ldr	r3, [pc, #108]	@ (801122c <send_DHCP_REQUEST+0x7c>)
 80111c0:	f993 3000 	ldrsb.w	r3, [r3]
 80111c4:	2b03      	cmp	r3, #3
 80111c6:	d004      	beq.n	80111d2 <send_DHCP_REQUEST+0x22>
 80111c8:	4b18      	ldr	r3, [pc, #96]	@ (801122c <send_DHCP_REQUEST+0x7c>)
 80111ca:	f993 3000 	ldrsb.w	r3, [r3]
 80111ce:	2b04      	cmp	r3, #4
 80111d0:	d134      	bne.n	801123c <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80111d2:	4b17      	ldr	r3, [pc, #92]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	330a      	adds	r3, #10
 80111d8:	2200      	movs	r2, #0
 80111da:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80111dc:	4b14      	ldr	r3, [pc, #80]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	330a      	adds	r3, #10
 80111e2:	3301      	adds	r3, #1
 80111e4:	2200      	movs	r2, #0
 80111e6:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80111e8:	4b11      	ldr	r3, [pc, #68]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4a11      	ldr	r2, [pc, #68]	@ (8011234 <send_DHCP_REQUEST+0x84>)
 80111ee:	7812      	ldrb	r2, [r2, #0]
 80111f0:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80111f2:	4b0f      	ldr	r3, [pc, #60]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4a0f      	ldr	r2, [pc, #60]	@ (8011234 <send_DHCP_REQUEST+0x84>)
 80111f8:	7852      	ldrb	r2, [r2, #1]
 80111fa:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80111fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4a0c      	ldr	r2, [pc, #48]	@ (8011234 <send_DHCP_REQUEST+0x84>)
 8011202:	7892      	ldrb	r2, [r2, #2]
 8011204:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8011206:	4b0a      	ldr	r3, [pc, #40]	@ (8011230 <send_DHCP_REQUEST+0x80>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4a0a      	ldr	r2, [pc, #40]	@ (8011234 <send_DHCP_REQUEST+0x84>)
 801120c:	78d2      	ldrb	r2, [r2, #3]
 801120e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8011210:	4b09      	ldr	r3, [pc, #36]	@ (8011238 <send_DHCP_REQUEST+0x88>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8011216:	4b08      	ldr	r3, [pc, #32]	@ (8011238 <send_DHCP_REQUEST+0x88>)
 8011218:	785b      	ldrb	r3, [r3, #1]
 801121a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801121c:	4b06      	ldr	r3, [pc, #24]	@ (8011238 <send_DHCP_REQUEST+0x88>)
 801121e:	789b      	ldrb	r3, [r3, #2]
 8011220:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8011222:	4b05      	ldr	r3, [pc, #20]	@ (8011238 <send_DHCP_REQUEST+0x88>)
 8011224:	78db      	ldrb	r3, [r3, #3]
 8011226:	71fb      	strb	r3, [r7, #7]
 8011228:	e010      	b.n	801124c <send_DHCP_REQUEST+0x9c>
 801122a:	bf00      	nop
 801122c:	20000b00 	.word	0x20000b00
 8011230:	20000b0c 	.word	0x20000b0c
 8011234:	20000af0 	.word	0x20000af0
 8011238:	20000ae4 	.word	0x20000ae4
   }
   else
   {
   	ip[0] = 255;
 801123c:	23ff      	movs	r3, #255	@ 0xff
 801123e:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8011240:	23ff      	movs	r3, #255	@ 0xff
 8011242:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8011244:	23ff      	movs	r3, #255	@ 0xff
 8011246:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8011248:	23ff      	movs	r3, #255	@ 0xff
 801124a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801124c:	2304      	movs	r3, #4
 801124e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8011250:	4b8d      	ldr	r3, [pc, #564]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	897b      	ldrh	r3, [r7, #10]
 8011256:	1c59      	adds	r1, r3, #1
 8011258:	8179      	strh	r1, [r7, #10]
 801125a:	4413      	add	r3, r2
 801125c:	2235      	movs	r2, #53	@ 0x35
 801125e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8011262:	4b89      	ldr	r3, [pc, #548]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	897b      	ldrh	r3, [r7, #10]
 8011268:	1c59      	adds	r1, r3, #1
 801126a:	8179      	strh	r1, [r7, #10]
 801126c:	4413      	add	r3, r2
 801126e:	2201      	movs	r2, #1
 8011270:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8011274:	4b84      	ldr	r3, [pc, #528]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	897b      	ldrh	r3, [r7, #10]
 801127a:	1c59      	adds	r1, r3, #1
 801127c:	8179      	strh	r1, [r7, #10]
 801127e:	4413      	add	r3, r2
 8011280:	2203      	movs	r2, #3
 8011282:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8011286:	4b80      	ldr	r3, [pc, #512]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	897b      	ldrh	r3, [r7, #10]
 801128c:	1c59      	adds	r1, r3, #1
 801128e:	8179      	strh	r1, [r7, #10]
 8011290:	4413      	add	r3, r2
 8011292:	223d      	movs	r2, #61	@ 0x3d
 8011294:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8011298:	4b7b      	ldr	r3, [pc, #492]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	897b      	ldrh	r3, [r7, #10]
 801129e:	1c59      	adds	r1, r3, #1
 80112a0:	8179      	strh	r1, [r7, #10]
 80112a2:	4413      	add	r3, r2
 80112a4:	2207      	movs	r2, #7
 80112a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80112aa:	4b77      	ldr	r3, [pc, #476]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	897b      	ldrh	r3, [r7, #10]
 80112b0:	1c59      	adds	r1, r3, #1
 80112b2:	8179      	strh	r1, [r7, #10]
 80112b4:	4413      	add	r3, r2
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80112bc:	4b72      	ldr	r3, [pc, #456]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	897b      	ldrh	r3, [r7, #10]
 80112c2:	1c59      	adds	r1, r3, #1
 80112c4:	8179      	strh	r1, [r7, #10]
 80112c6:	4618      	mov	r0, r3
 80112c8:	4b70      	ldr	r3, [pc, #448]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 80112ca:	7819      	ldrb	r1, [r3, #0]
 80112cc:	1813      	adds	r3, r2, r0
 80112ce:	460a      	mov	r2, r1
 80112d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80112d4:	4b6c      	ldr	r3, [pc, #432]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	897b      	ldrh	r3, [r7, #10]
 80112da:	1c59      	adds	r1, r3, #1
 80112dc:	8179      	strh	r1, [r7, #10]
 80112de:	4618      	mov	r0, r3
 80112e0:	4b6a      	ldr	r3, [pc, #424]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 80112e2:	7859      	ldrb	r1, [r3, #1]
 80112e4:	1813      	adds	r3, r2, r0
 80112e6:	460a      	mov	r2, r1
 80112e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80112ec:	4b66      	ldr	r3, [pc, #408]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	897b      	ldrh	r3, [r7, #10]
 80112f2:	1c59      	adds	r1, r3, #1
 80112f4:	8179      	strh	r1, [r7, #10]
 80112f6:	4618      	mov	r0, r3
 80112f8:	4b64      	ldr	r3, [pc, #400]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 80112fa:	7899      	ldrb	r1, [r3, #2]
 80112fc:	1813      	adds	r3, r2, r0
 80112fe:	460a      	mov	r2, r1
 8011300:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8011304:	4b60      	ldr	r3, [pc, #384]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	897b      	ldrh	r3, [r7, #10]
 801130a:	1c59      	adds	r1, r3, #1
 801130c:	8179      	strh	r1, [r7, #10]
 801130e:	4618      	mov	r0, r3
 8011310:	4b5e      	ldr	r3, [pc, #376]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 8011312:	78d9      	ldrb	r1, [r3, #3]
 8011314:	1813      	adds	r3, r2, r0
 8011316:	460a      	mov	r2, r1
 8011318:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801131c:	4b5a      	ldr	r3, [pc, #360]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 801131e:	681a      	ldr	r2, [r3, #0]
 8011320:	897b      	ldrh	r3, [r7, #10]
 8011322:	1c59      	adds	r1, r3, #1
 8011324:	8179      	strh	r1, [r7, #10]
 8011326:	4618      	mov	r0, r3
 8011328:	4b58      	ldr	r3, [pc, #352]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 801132a:	7919      	ldrb	r1, [r3, #4]
 801132c:	1813      	adds	r3, r2, r0
 801132e:	460a      	mov	r2, r1
 8011330:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8011334:	4b54      	ldr	r3, [pc, #336]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	897b      	ldrh	r3, [r7, #10]
 801133a:	1c59      	adds	r1, r3, #1
 801133c:	8179      	strh	r1, [r7, #10]
 801133e:	4618      	mov	r0, r3
 8011340:	4b52      	ldr	r3, [pc, #328]	@ (801148c <send_DHCP_REQUEST+0x2dc>)
 8011342:	7959      	ldrb	r1, [r3, #5]
 8011344:	1813      	adds	r3, r2, r0
 8011346:	460a      	mov	r2, r1
 8011348:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801134c:	79fb      	ldrb	r3, [r7, #7]
 801134e:	2bff      	cmp	r3, #255	@ 0xff
 8011350:	f040 8084 	bne.w	801145c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8011354:	4b4c      	ldr	r3, [pc, #304]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011356:	681a      	ldr	r2, [r3, #0]
 8011358:	897b      	ldrh	r3, [r7, #10]
 801135a:	1c59      	adds	r1, r3, #1
 801135c:	8179      	strh	r1, [r7, #10]
 801135e:	4413      	add	r3, r2
 8011360:	2232      	movs	r2, #50	@ 0x32
 8011362:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8011366:	4b48      	ldr	r3, [pc, #288]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	897b      	ldrh	r3, [r7, #10]
 801136c:	1c59      	adds	r1, r3, #1
 801136e:	8179      	strh	r1, [r7, #10]
 8011370:	4413      	add	r3, r2
 8011372:	2204      	movs	r2, #4
 8011374:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8011378:	4b43      	ldr	r3, [pc, #268]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	897b      	ldrh	r3, [r7, #10]
 801137e:	1c59      	adds	r1, r3, #1
 8011380:	8179      	strh	r1, [r7, #10]
 8011382:	4618      	mov	r0, r3
 8011384:	4b42      	ldr	r3, [pc, #264]	@ (8011490 <send_DHCP_REQUEST+0x2e0>)
 8011386:	7819      	ldrb	r1, [r3, #0]
 8011388:	1813      	adds	r3, r2, r0
 801138a:	460a      	mov	r2, r1
 801138c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8011390:	4b3d      	ldr	r3, [pc, #244]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	897b      	ldrh	r3, [r7, #10]
 8011396:	1c59      	adds	r1, r3, #1
 8011398:	8179      	strh	r1, [r7, #10]
 801139a:	4618      	mov	r0, r3
 801139c:	4b3c      	ldr	r3, [pc, #240]	@ (8011490 <send_DHCP_REQUEST+0x2e0>)
 801139e:	7859      	ldrb	r1, [r3, #1]
 80113a0:	1813      	adds	r3, r2, r0
 80113a2:	460a      	mov	r2, r1
 80113a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80113a8:	4b37      	ldr	r3, [pc, #220]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	897b      	ldrh	r3, [r7, #10]
 80113ae:	1c59      	adds	r1, r3, #1
 80113b0:	8179      	strh	r1, [r7, #10]
 80113b2:	4618      	mov	r0, r3
 80113b4:	4b36      	ldr	r3, [pc, #216]	@ (8011490 <send_DHCP_REQUEST+0x2e0>)
 80113b6:	7899      	ldrb	r1, [r3, #2]
 80113b8:	1813      	adds	r3, r2, r0
 80113ba:	460a      	mov	r2, r1
 80113bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80113c0:	4b31      	ldr	r3, [pc, #196]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80113c2:	681a      	ldr	r2, [r3, #0]
 80113c4:	897b      	ldrh	r3, [r7, #10]
 80113c6:	1c59      	adds	r1, r3, #1
 80113c8:	8179      	strh	r1, [r7, #10]
 80113ca:	4618      	mov	r0, r3
 80113cc:	4b30      	ldr	r3, [pc, #192]	@ (8011490 <send_DHCP_REQUEST+0x2e0>)
 80113ce:	78d9      	ldrb	r1, [r3, #3]
 80113d0:	1813      	adds	r3, r2, r0
 80113d2:	460a      	mov	r2, r1
 80113d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80113d8:	4b2b      	ldr	r3, [pc, #172]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	897b      	ldrh	r3, [r7, #10]
 80113de:	1c59      	adds	r1, r3, #1
 80113e0:	8179      	strh	r1, [r7, #10]
 80113e2:	4413      	add	r3, r2
 80113e4:	2236      	movs	r2, #54	@ 0x36
 80113e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80113ea:	4b27      	ldr	r3, [pc, #156]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	897b      	ldrh	r3, [r7, #10]
 80113f0:	1c59      	adds	r1, r3, #1
 80113f2:	8179      	strh	r1, [r7, #10]
 80113f4:	4413      	add	r3, r2
 80113f6:	2204      	movs	r2, #4
 80113f8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80113fc:	4b22      	ldr	r3, [pc, #136]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	897b      	ldrh	r3, [r7, #10]
 8011402:	1c59      	adds	r1, r3, #1
 8011404:	8179      	strh	r1, [r7, #10]
 8011406:	4618      	mov	r0, r3
 8011408:	4b22      	ldr	r3, [pc, #136]	@ (8011494 <send_DHCP_REQUEST+0x2e4>)
 801140a:	7819      	ldrb	r1, [r3, #0]
 801140c:	1813      	adds	r3, r2, r0
 801140e:	460a      	mov	r2, r1
 8011410:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8011414:	4b1c      	ldr	r3, [pc, #112]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	897b      	ldrh	r3, [r7, #10]
 801141a:	1c59      	adds	r1, r3, #1
 801141c:	8179      	strh	r1, [r7, #10]
 801141e:	4618      	mov	r0, r3
 8011420:	4b1c      	ldr	r3, [pc, #112]	@ (8011494 <send_DHCP_REQUEST+0x2e4>)
 8011422:	7859      	ldrb	r1, [r3, #1]
 8011424:	1813      	adds	r3, r2, r0
 8011426:	460a      	mov	r2, r1
 8011428:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801142c:	4b16      	ldr	r3, [pc, #88]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	897b      	ldrh	r3, [r7, #10]
 8011432:	1c59      	adds	r1, r3, #1
 8011434:	8179      	strh	r1, [r7, #10]
 8011436:	4618      	mov	r0, r3
 8011438:	4b16      	ldr	r3, [pc, #88]	@ (8011494 <send_DHCP_REQUEST+0x2e4>)
 801143a:	7899      	ldrb	r1, [r3, #2]
 801143c:	1813      	adds	r3, r2, r0
 801143e:	460a      	mov	r2, r1
 8011440:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8011444:	4b10      	ldr	r3, [pc, #64]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	897b      	ldrh	r3, [r7, #10]
 801144a:	1c59      	adds	r1, r3, #1
 801144c:	8179      	strh	r1, [r7, #10]
 801144e:	4618      	mov	r0, r3
 8011450:	4b10      	ldr	r3, [pc, #64]	@ (8011494 <send_DHCP_REQUEST+0x2e4>)
 8011452:	78d9      	ldrb	r1, [r3, #3]
 8011454:	1813      	adds	r3, r2, r0
 8011456:	460a      	mov	r2, r1
 8011458:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801145c:	4b0a      	ldr	r3, [pc, #40]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	897b      	ldrh	r3, [r7, #10]
 8011462:	1c59      	adds	r1, r3, #1
 8011464:	8179      	strh	r1, [r7, #10]
 8011466:	4413      	add	r3, r2
 8011468:	220c      	movs	r2, #12
 801146a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801146e:	4b06      	ldr	r3, [pc, #24]	@ (8011488 <send_DHCP_REQUEST+0x2d8>)
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	897b      	ldrh	r3, [r7, #10]
 8011474:	1c59      	adds	r1, r3, #1
 8011476:	8179      	strh	r1, [r7, #10]
 8011478:	4413      	add	r3, r2
 801147a:	2200      	movs	r2, #0
 801147c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8011480:	2300      	movs	r3, #0
 8011482:	60fb      	str	r3, [r7, #12]
 8011484:	e019      	b.n	80114ba <send_DHCP_REQUEST+0x30a>
 8011486:	bf00      	nop
 8011488:	20000b0c 	.word	0x20000b0c
 801148c:	20000b10 	.word	0x20000b10
 8011490:	20000af0 	.word	0x20000af0
 8011494:	20000ae4 	.word	0x20000ae4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8011498:	4b86      	ldr	r3, [pc, #536]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	897b      	ldrh	r3, [r7, #10]
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	8179      	strh	r1, [r7, #10]
 80114a2:	4618      	mov	r0, r3
 80114a4:	4984      	ldr	r1, [pc, #528]	@ (80116b8 <send_DHCP_REQUEST+0x508>)
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	440b      	add	r3, r1
 80114aa:	7819      	ldrb	r1, [r3, #0]
 80114ac:	1813      	adds	r3, r2, r0
 80114ae:	460a      	mov	r2, r1
 80114b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	3301      	adds	r3, #1
 80114b8:	60fb      	str	r3, [r7, #12]
 80114ba:	4a7f      	ldr	r2, [pc, #508]	@ (80116b8 <send_DHCP_REQUEST+0x508>)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	4413      	add	r3, r2
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d1e8      	bne.n	8011498 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80114c6:	4b7d      	ldr	r3, [pc, #500]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 80114c8:	78db      	ldrb	r3, [r3, #3]
 80114ca:	091b      	lsrs	r3, r3, #4
 80114cc:	b2da      	uxtb	r2, r3
 80114ce:	4b79      	ldr	r3, [pc, #484]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80114d0:	681c      	ldr	r4, [r3, #0]
 80114d2:	897b      	ldrh	r3, [r7, #10]
 80114d4:	1c59      	adds	r1, r3, #1
 80114d6:	8179      	strh	r1, [r7, #10]
 80114d8:	461d      	mov	r5, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f000 ff1e 	bl	801231c <NibbleToHex>
 80114e0:	4603      	mov	r3, r0
 80114e2:	461a      	mov	r2, r3
 80114e4:	1963      	adds	r3, r4, r5
 80114e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80114ea:	4b74      	ldr	r3, [pc, #464]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 80114ec:	78da      	ldrb	r2, [r3, #3]
 80114ee:	4b71      	ldr	r3, [pc, #452]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80114f0:	681c      	ldr	r4, [r3, #0]
 80114f2:	897b      	ldrh	r3, [r7, #10]
 80114f4:	1c59      	adds	r1, r3, #1
 80114f6:	8179      	strh	r1, [r7, #10]
 80114f8:	461d      	mov	r5, r3
 80114fa:	4610      	mov	r0, r2
 80114fc:	f000 ff0e 	bl	801231c <NibbleToHex>
 8011500:	4603      	mov	r3, r0
 8011502:	461a      	mov	r2, r3
 8011504:	1963      	adds	r3, r4, r5
 8011506:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801150a:	4b6c      	ldr	r3, [pc, #432]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 801150c:	791b      	ldrb	r3, [r3, #4]
 801150e:	091b      	lsrs	r3, r3, #4
 8011510:	b2da      	uxtb	r2, r3
 8011512:	4b68      	ldr	r3, [pc, #416]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011514:	681c      	ldr	r4, [r3, #0]
 8011516:	897b      	ldrh	r3, [r7, #10]
 8011518:	1c59      	adds	r1, r3, #1
 801151a:	8179      	strh	r1, [r7, #10]
 801151c:	461d      	mov	r5, r3
 801151e:	4610      	mov	r0, r2
 8011520:	f000 fefc 	bl	801231c <NibbleToHex>
 8011524:	4603      	mov	r3, r0
 8011526:	461a      	mov	r2, r3
 8011528:	1963      	adds	r3, r4, r5
 801152a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801152e:	4b63      	ldr	r3, [pc, #396]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 8011530:	791a      	ldrb	r2, [r3, #4]
 8011532:	4b60      	ldr	r3, [pc, #384]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011534:	681c      	ldr	r4, [r3, #0]
 8011536:	897b      	ldrh	r3, [r7, #10]
 8011538:	1c59      	adds	r1, r3, #1
 801153a:	8179      	strh	r1, [r7, #10]
 801153c:	461d      	mov	r5, r3
 801153e:	4610      	mov	r0, r2
 8011540:	f000 feec 	bl	801231c <NibbleToHex>
 8011544:	4603      	mov	r3, r0
 8011546:	461a      	mov	r2, r3
 8011548:	1963      	adds	r3, r4, r5
 801154a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801154e:	4b5b      	ldr	r3, [pc, #364]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 8011550:	795b      	ldrb	r3, [r3, #5]
 8011552:	091b      	lsrs	r3, r3, #4
 8011554:	b2da      	uxtb	r2, r3
 8011556:	4b57      	ldr	r3, [pc, #348]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011558:	681c      	ldr	r4, [r3, #0]
 801155a:	897b      	ldrh	r3, [r7, #10]
 801155c:	1c59      	adds	r1, r3, #1
 801155e:	8179      	strh	r1, [r7, #10]
 8011560:	461d      	mov	r5, r3
 8011562:	4610      	mov	r0, r2
 8011564:	f000 feda 	bl	801231c <NibbleToHex>
 8011568:	4603      	mov	r3, r0
 801156a:	461a      	mov	r2, r3
 801156c:	1963      	adds	r3, r4, r5
 801156e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8011572:	4b52      	ldr	r3, [pc, #328]	@ (80116bc <send_DHCP_REQUEST+0x50c>)
 8011574:	795a      	ldrb	r2, [r3, #5]
 8011576:	4b4f      	ldr	r3, [pc, #316]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011578:	681c      	ldr	r4, [r3, #0]
 801157a:	897b      	ldrh	r3, [r7, #10]
 801157c:	1c59      	adds	r1, r3, #1
 801157e:	8179      	strh	r1, [r7, #10]
 8011580:	461d      	mov	r5, r3
 8011582:	4610      	mov	r0, r2
 8011584:	f000 feca 	bl	801231c <NibbleToHex>
 8011588:	4603      	mov	r3, r0
 801158a:	461a      	mov	r2, r3
 801158c:	1963      	adds	r3, r4, r5
 801158e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	b2d9      	uxtb	r1, r3
 8011596:	4b47      	ldr	r3, [pc, #284]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	8978      	ldrh	r0, [r7, #10]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	3307      	adds	r3, #7
 80115a0:	1ac3      	subs	r3, r0, r3
 80115a2:	3106      	adds	r1, #6
 80115a4:	b2c9      	uxtb	r1, r1
 80115a6:	4413      	add	r3, r2
 80115a8:	460a      	mov	r2, r1
 80115aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80115ae:	4b41      	ldr	r3, [pc, #260]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	897b      	ldrh	r3, [r7, #10]
 80115b4:	1c59      	adds	r1, r3, #1
 80115b6:	8179      	strh	r1, [r7, #10]
 80115b8:	4413      	add	r3, r2
 80115ba:	2237      	movs	r2, #55	@ 0x37
 80115bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80115c0:	4b3c      	ldr	r3, [pc, #240]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	897b      	ldrh	r3, [r7, #10]
 80115c6:	1c59      	adds	r1, r3, #1
 80115c8:	8179      	strh	r1, [r7, #10]
 80115ca:	4413      	add	r3, r2
 80115cc:	2208      	movs	r2, #8
 80115ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80115d2:	4b38      	ldr	r3, [pc, #224]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	897b      	ldrh	r3, [r7, #10]
 80115d8:	1c59      	adds	r1, r3, #1
 80115da:	8179      	strh	r1, [r7, #10]
 80115dc:	4413      	add	r3, r2
 80115de:	2201      	movs	r2, #1
 80115e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80115e4:	4b33      	ldr	r3, [pc, #204]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	897b      	ldrh	r3, [r7, #10]
 80115ea:	1c59      	adds	r1, r3, #1
 80115ec:	8179      	strh	r1, [r7, #10]
 80115ee:	4413      	add	r3, r2
 80115f0:	2203      	movs	r2, #3
 80115f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80115f6:	4b2f      	ldr	r3, [pc, #188]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	897b      	ldrh	r3, [r7, #10]
 80115fc:	1c59      	adds	r1, r3, #1
 80115fe:	8179      	strh	r1, [r7, #10]
 8011600:	4413      	add	r3, r2
 8011602:	2206      	movs	r2, #6
 8011604:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8011608:	4b2a      	ldr	r3, [pc, #168]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	897b      	ldrh	r3, [r7, #10]
 801160e:	1c59      	adds	r1, r3, #1
 8011610:	8179      	strh	r1, [r7, #10]
 8011612:	4413      	add	r3, r2
 8011614:	220f      	movs	r2, #15
 8011616:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801161a:	4b26      	ldr	r3, [pc, #152]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	897b      	ldrh	r3, [r7, #10]
 8011620:	1c59      	adds	r1, r3, #1
 8011622:	8179      	strh	r1, [r7, #10]
 8011624:	4413      	add	r3, r2
 8011626:	223a      	movs	r2, #58	@ 0x3a
 8011628:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801162c:	4b21      	ldr	r3, [pc, #132]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	897b      	ldrh	r3, [r7, #10]
 8011632:	1c59      	adds	r1, r3, #1
 8011634:	8179      	strh	r1, [r7, #10]
 8011636:	4413      	add	r3, r2
 8011638:	223b      	movs	r2, #59	@ 0x3b
 801163a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801163e:	4b1d      	ldr	r3, [pc, #116]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	897b      	ldrh	r3, [r7, #10]
 8011644:	1c59      	adds	r1, r3, #1
 8011646:	8179      	strh	r1, [r7, #10]
 8011648:	4413      	add	r3, r2
 801164a:	221f      	movs	r2, #31
 801164c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8011650:	4b18      	ldr	r3, [pc, #96]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	897b      	ldrh	r3, [r7, #10]
 8011656:	1c59      	adds	r1, r3, #1
 8011658:	8179      	strh	r1, [r7, #10]
 801165a:	4413      	add	r3, r2
 801165c:	2221      	movs	r2, #33	@ 0x21
 801165e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8011662:	4b14      	ldr	r3, [pc, #80]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	897b      	ldrh	r3, [r7, #10]
 8011668:	1c59      	adds	r1, r3, #1
 801166a:	8179      	strh	r1, [r7, #10]
 801166c:	4413      	add	r3, r2
 801166e:	22ff      	movs	r2, #255	@ 0xff
 8011670:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8011674:	897b      	ldrh	r3, [r7, #10]
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e009      	b.n	801168e <send_DHCP_REQUEST+0x4de>
 801167a:	4b0e      	ldr	r3, [pc, #56]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	4413      	add	r3, r2
 8011682:	33ec      	adds	r3, #236	@ 0xec
 8011684:	2200      	movs	r2, #0
 8011686:	701a      	strb	r2, [r3, #0]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	3301      	adds	r3, #1
 801168c:	60fb      	str	r3, [r7, #12]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8011694:	dbf1      	blt.n	801167a <send_DHCP_REQUEST+0x4ca>
#if 1
	// 20231016 taylor//teddy 240122
#if ((_WIZCHIP_ == 6100) || (_WIZCHIP_ == 6300))
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT, 4);
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8011696:	4b0a      	ldr	r3, [pc, #40]	@ (80116c0 <send_DHCP_REQUEST+0x510>)
 8011698:	7818      	ldrb	r0, [r3, #0]
 801169a:	4b06      	ldr	r3, [pc, #24]	@ (80116b4 <send_DHCP_REQUEST+0x504>)
 801169c:	6819      	ldr	r1, [r3, #0]
 801169e:	1d3b      	adds	r3, r7, #4
 80116a0:	2243      	movs	r2, #67	@ 0x43
 80116a2:	9200      	str	r2, [sp, #0]
 80116a4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80116a8:	f7fe fc5c 	bl	800ff64 <sendto_W5x00>
#endif
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
#endif

}
 80116ac:	bf00      	nop
 80116ae:	3710      	adds	r7, #16
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bdb0      	pop	{r4, r5, r7, pc}
 80116b4:	20000b0c 	.word	0x20000b0c
 80116b8:	20000058 	.word	0x20000058
 80116bc:	20000b10 	.word	0x20000b10
 80116c0:	20000ae1 	.word	0x20000ae1

080116c4 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b086      	sub	sp, #24
 80116c8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80116ce:	f7ff fab3 	bl	8010c38 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80116d2:	2304      	movs	r3, #4
 80116d4:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80116d6:	4b9f      	ldr	r3, [pc, #636]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	330a      	adds	r3, #10
 80116dc:	2200      	movs	r2, #0
 80116de:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80116e0:	4b9c      	ldr	r3, [pc, #624]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	330a      	adds	r3, #10
 80116e6:	3301      	adds	r3, #1
 80116e8:	2200      	movs	r2, #0
 80116ea:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80116ec:	4b99      	ldr	r3, [pc, #612]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	897b      	ldrh	r3, [r7, #10]
 80116f2:	1c59      	adds	r1, r3, #1
 80116f4:	8179      	strh	r1, [r7, #10]
 80116f6:	4413      	add	r3, r2
 80116f8:	2235      	movs	r2, #53	@ 0x35
 80116fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80116fe:	4b95      	ldr	r3, [pc, #596]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	897b      	ldrh	r3, [r7, #10]
 8011704:	1c59      	adds	r1, r3, #1
 8011706:	8179      	strh	r1, [r7, #10]
 8011708:	4413      	add	r3, r2
 801170a:	2201      	movs	r2, #1
 801170c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8011710:	4b90      	ldr	r3, [pc, #576]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	897b      	ldrh	r3, [r7, #10]
 8011716:	1c59      	adds	r1, r3, #1
 8011718:	8179      	strh	r1, [r7, #10]
 801171a:	4413      	add	r3, r2
 801171c:	2204      	movs	r2, #4
 801171e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8011722:	4b8c      	ldr	r3, [pc, #560]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	897b      	ldrh	r3, [r7, #10]
 8011728:	1c59      	adds	r1, r3, #1
 801172a:	8179      	strh	r1, [r7, #10]
 801172c:	4413      	add	r3, r2
 801172e:	223d      	movs	r2, #61	@ 0x3d
 8011730:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8011734:	4b87      	ldr	r3, [pc, #540]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	897b      	ldrh	r3, [r7, #10]
 801173a:	1c59      	adds	r1, r3, #1
 801173c:	8179      	strh	r1, [r7, #10]
 801173e:	4413      	add	r3, r2
 8011740:	2207      	movs	r2, #7
 8011742:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8011746:	4b83      	ldr	r3, [pc, #524]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	897b      	ldrh	r3, [r7, #10]
 801174c:	1c59      	adds	r1, r3, #1
 801174e:	8179      	strh	r1, [r7, #10]
 8011750:	4413      	add	r3, r2
 8011752:	2201      	movs	r2, #1
 8011754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8011758:	4b7e      	ldr	r3, [pc, #504]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	897b      	ldrh	r3, [r7, #10]
 801175e:	1c59      	adds	r1, r3, #1
 8011760:	8179      	strh	r1, [r7, #10]
 8011762:	4618      	mov	r0, r3
 8011764:	4b7c      	ldr	r3, [pc, #496]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 8011766:	7819      	ldrb	r1, [r3, #0]
 8011768:	1813      	adds	r3, r2, r0
 801176a:	460a      	mov	r2, r1
 801176c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8011770:	4b78      	ldr	r3, [pc, #480]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	897b      	ldrh	r3, [r7, #10]
 8011776:	1c59      	adds	r1, r3, #1
 8011778:	8179      	strh	r1, [r7, #10]
 801177a:	4618      	mov	r0, r3
 801177c:	4b76      	ldr	r3, [pc, #472]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 801177e:	7859      	ldrb	r1, [r3, #1]
 8011780:	1813      	adds	r3, r2, r0
 8011782:	460a      	mov	r2, r1
 8011784:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8011788:	4b72      	ldr	r3, [pc, #456]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	897b      	ldrh	r3, [r7, #10]
 801178e:	1c59      	adds	r1, r3, #1
 8011790:	8179      	strh	r1, [r7, #10]
 8011792:	4618      	mov	r0, r3
 8011794:	4b70      	ldr	r3, [pc, #448]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 8011796:	7899      	ldrb	r1, [r3, #2]
 8011798:	1813      	adds	r3, r2, r0
 801179a:	460a      	mov	r2, r1
 801179c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80117a0:	4b6c      	ldr	r3, [pc, #432]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	897b      	ldrh	r3, [r7, #10]
 80117a6:	1c59      	adds	r1, r3, #1
 80117a8:	8179      	strh	r1, [r7, #10]
 80117aa:	4618      	mov	r0, r3
 80117ac:	4b6a      	ldr	r3, [pc, #424]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 80117ae:	78d9      	ldrb	r1, [r3, #3]
 80117b0:	1813      	adds	r3, r2, r0
 80117b2:	460a      	mov	r2, r1
 80117b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80117b8:	4b66      	ldr	r3, [pc, #408]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	897b      	ldrh	r3, [r7, #10]
 80117be:	1c59      	adds	r1, r3, #1
 80117c0:	8179      	strh	r1, [r7, #10]
 80117c2:	4618      	mov	r0, r3
 80117c4:	4b64      	ldr	r3, [pc, #400]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 80117c6:	7919      	ldrb	r1, [r3, #4]
 80117c8:	1813      	adds	r3, r2, r0
 80117ca:	460a      	mov	r2, r1
 80117cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80117d0:	4b60      	ldr	r3, [pc, #384]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	897b      	ldrh	r3, [r7, #10]
 80117d6:	1c59      	adds	r1, r3, #1
 80117d8:	8179      	strh	r1, [r7, #10]
 80117da:	4618      	mov	r0, r3
 80117dc:	4b5e      	ldr	r3, [pc, #376]	@ (8011958 <send_DHCP_DECLINE+0x294>)
 80117de:	7959      	ldrb	r1, [r3, #5]
 80117e0:	1813      	adds	r3, r2, r0
 80117e2:	460a      	mov	r2, r1
 80117e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80117e8:	4b5a      	ldr	r3, [pc, #360]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	897b      	ldrh	r3, [r7, #10]
 80117ee:	1c59      	adds	r1, r3, #1
 80117f0:	8179      	strh	r1, [r7, #10]
 80117f2:	4413      	add	r3, r2
 80117f4:	2232      	movs	r2, #50	@ 0x32
 80117f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80117fa:	4b56      	ldr	r3, [pc, #344]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	897b      	ldrh	r3, [r7, #10]
 8011800:	1c59      	adds	r1, r3, #1
 8011802:	8179      	strh	r1, [r7, #10]
 8011804:	4413      	add	r3, r2
 8011806:	2204      	movs	r2, #4
 8011808:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801180c:	4b51      	ldr	r3, [pc, #324]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	897b      	ldrh	r3, [r7, #10]
 8011812:	1c59      	adds	r1, r3, #1
 8011814:	8179      	strh	r1, [r7, #10]
 8011816:	4618      	mov	r0, r3
 8011818:	4b50      	ldr	r3, [pc, #320]	@ (801195c <send_DHCP_DECLINE+0x298>)
 801181a:	7819      	ldrb	r1, [r3, #0]
 801181c:	1813      	adds	r3, r2, r0
 801181e:	460a      	mov	r2, r1
 8011820:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8011824:	4b4b      	ldr	r3, [pc, #300]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	897b      	ldrh	r3, [r7, #10]
 801182a:	1c59      	adds	r1, r3, #1
 801182c:	8179      	strh	r1, [r7, #10]
 801182e:	4618      	mov	r0, r3
 8011830:	4b4a      	ldr	r3, [pc, #296]	@ (801195c <send_DHCP_DECLINE+0x298>)
 8011832:	7859      	ldrb	r1, [r3, #1]
 8011834:	1813      	adds	r3, r2, r0
 8011836:	460a      	mov	r2, r1
 8011838:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801183c:	4b45      	ldr	r3, [pc, #276]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	897b      	ldrh	r3, [r7, #10]
 8011842:	1c59      	adds	r1, r3, #1
 8011844:	8179      	strh	r1, [r7, #10]
 8011846:	4618      	mov	r0, r3
 8011848:	4b44      	ldr	r3, [pc, #272]	@ (801195c <send_DHCP_DECLINE+0x298>)
 801184a:	7899      	ldrb	r1, [r3, #2]
 801184c:	1813      	adds	r3, r2, r0
 801184e:	460a      	mov	r2, r1
 8011850:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8011854:	4b3f      	ldr	r3, [pc, #252]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011856:	681a      	ldr	r2, [r3, #0]
 8011858:	897b      	ldrh	r3, [r7, #10]
 801185a:	1c59      	adds	r1, r3, #1
 801185c:	8179      	strh	r1, [r7, #10]
 801185e:	4618      	mov	r0, r3
 8011860:	4b3e      	ldr	r3, [pc, #248]	@ (801195c <send_DHCP_DECLINE+0x298>)
 8011862:	78d9      	ldrb	r1, [r3, #3]
 8011864:	1813      	adds	r3, r2, r0
 8011866:	460a      	mov	r2, r1
 8011868:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801186c:	4b39      	ldr	r3, [pc, #228]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	897b      	ldrh	r3, [r7, #10]
 8011872:	1c59      	adds	r1, r3, #1
 8011874:	8179      	strh	r1, [r7, #10]
 8011876:	4413      	add	r3, r2
 8011878:	2236      	movs	r2, #54	@ 0x36
 801187a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801187e:	4b35      	ldr	r3, [pc, #212]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	897b      	ldrh	r3, [r7, #10]
 8011884:	1c59      	adds	r1, r3, #1
 8011886:	8179      	strh	r1, [r7, #10]
 8011888:	4413      	add	r3, r2
 801188a:	2204      	movs	r2, #4
 801188c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8011890:	4b30      	ldr	r3, [pc, #192]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	897b      	ldrh	r3, [r7, #10]
 8011896:	1c59      	adds	r1, r3, #1
 8011898:	8179      	strh	r1, [r7, #10]
 801189a:	4618      	mov	r0, r3
 801189c:	4b30      	ldr	r3, [pc, #192]	@ (8011960 <send_DHCP_DECLINE+0x29c>)
 801189e:	7819      	ldrb	r1, [r3, #0]
 80118a0:	1813      	adds	r3, r2, r0
 80118a2:	460a      	mov	r2, r1
 80118a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80118a8:	4b2a      	ldr	r3, [pc, #168]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	897b      	ldrh	r3, [r7, #10]
 80118ae:	1c59      	adds	r1, r3, #1
 80118b0:	8179      	strh	r1, [r7, #10]
 80118b2:	4618      	mov	r0, r3
 80118b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011960 <send_DHCP_DECLINE+0x29c>)
 80118b6:	7859      	ldrb	r1, [r3, #1]
 80118b8:	1813      	adds	r3, r2, r0
 80118ba:	460a      	mov	r2, r1
 80118bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80118c0:	4b24      	ldr	r3, [pc, #144]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	897b      	ldrh	r3, [r7, #10]
 80118c6:	1c59      	adds	r1, r3, #1
 80118c8:	8179      	strh	r1, [r7, #10]
 80118ca:	4618      	mov	r0, r3
 80118cc:	4b24      	ldr	r3, [pc, #144]	@ (8011960 <send_DHCP_DECLINE+0x29c>)
 80118ce:	7899      	ldrb	r1, [r3, #2]
 80118d0:	1813      	adds	r3, r2, r0
 80118d2:	460a      	mov	r2, r1
 80118d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80118d8:	4b1e      	ldr	r3, [pc, #120]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	897b      	ldrh	r3, [r7, #10]
 80118de:	1c59      	adds	r1, r3, #1
 80118e0:	8179      	strh	r1, [r7, #10]
 80118e2:	4618      	mov	r0, r3
 80118e4:	4b1e      	ldr	r3, [pc, #120]	@ (8011960 <send_DHCP_DECLINE+0x29c>)
 80118e6:	78d9      	ldrb	r1, [r3, #3]
 80118e8:	1813      	adds	r3, r2, r0
 80118ea:	460a      	mov	r2, r1
 80118ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80118f0:	4b18      	ldr	r3, [pc, #96]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	897b      	ldrh	r3, [r7, #10]
 80118f6:	1c59      	adds	r1, r3, #1
 80118f8:	8179      	strh	r1, [r7, #10]
 80118fa:	4413      	add	r3, r2
 80118fc:	22ff      	movs	r2, #255	@ 0xff
 80118fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8011902:	897b      	ldrh	r3, [r7, #10]
 8011904:	60fb      	str	r3, [r7, #12]
 8011906:	e009      	b.n	801191c <send_DHCP_DECLINE+0x258>
 8011908:	4b12      	ldr	r3, [pc, #72]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4413      	add	r3, r2
 8011910:	33ec      	adds	r3, #236	@ 0xec
 8011912:	2200      	movs	r2, #0
 8011914:	701a      	strb	r2, [r3, #0]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	3301      	adds	r3, #1
 801191a:	60fb      	str	r3, [r7, #12]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8011922:	dbf1      	blt.n	8011908 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8011924:	23ff      	movs	r3, #255	@ 0xff
 8011926:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8011928:	23ff      	movs	r3, #255	@ 0xff
 801192a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801192c:	23ff      	movs	r3, #255	@ 0xff
 801192e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8011930:	23ff      	movs	r3, #255	@ 0xff
 8011932:	71fb      	strb	r3, [r7, #7]
#if 1
	// 20231016 taylor//teddy 240122
#if ((_WIZCHIP_ == 6100) || (_WIZCHIP_ == 6300))
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT, 4);
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8011934:	4b0b      	ldr	r3, [pc, #44]	@ (8011964 <send_DHCP_DECLINE+0x2a0>)
 8011936:	7818      	ldrb	r0, [r3, #0]
 8011938:	4b06      	ldr	r3, [pc, #24]	@ (8011954 <send_DHCP_DECLINE+0x290>)
 801193a:	6819      	ldr	r1, [r3, #0]
 801193c:	1d3b      	adds	r3, r7, #4
 801193e:	2243      	movs	r2, #67	@ 0x43
 8011940:	9200      	str	r2, [sp, #0]
 8011942:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8011946:	f7fe fb0d 	bl	800ff64 <sendto_W5x00>
#endif
#else
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
#endif
}
 801194a:	bf00      	nop
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	20000b0c 	.word	0x20000b0c
 8011958:	20000b10 	.word	0x20000b10
 801195c:	20000af0 	.word	0x20000af0
 8011960:	20000ae4 	.word	0x20000ae4
 8011964:	20000ae1 	.word	0x20000ae1

08011968 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8011968:	b590      	push	{r4, r7, lr}
 801196a:	b089      	sub	sp, #36	@ 0x24
 801196c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	74fb      	strb	r3, [r7, #19]
#if 1
	// 20231019 taylor
	uint8_t addr_len;
#endif
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8011972:	4ba1      	ldr	r3, [pc, #644]	@ (8011bf8 <parseDHCPMSG+0x290>)
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	4618      	mov	r0, r3
 8011978:	f7fd fd2d 	bl	800f3d6 <getSn_RX_RSR>
 801197c:	4603      	mov	r3, r0
 801197e:	823b      	strh	r3, [r7, #16]
 8011980:	8a3b      	ldrh	r3, [r7, #16]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d011      	beq.n	80119aa <parseDHCPMSG+0x42>
#if 1
	   // 20231019 taylor//teddy 240122
#if ((_WIZCHIP_ == 6100) || (_WIZCHIP_ == 6300))
	   len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port, &addr_len);
#else
	   len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8011986:	4b9c      	ldr	r3, [pc, #624]	@ (8011bf8 <parseDHCPMSG+0x290>)
 8011988:	7818      	ldrb	r0, [r3, #0]
 801198a:	4b9c      	ldr	r3, [pc, #624]	@ (8011bfc <parseDHCPMSG+0x294>)
 801198c:	6819      	ldr	r1, [r3, #0]
 801198e:	1d3c      	adds	r4, r7, #4
 8011990:	8a3a      	ldrh	r2, [r7, #16]
 8011992:	1cbb      	adds	r3, r7, #2
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	4623      	mov	r3, r4
 8011998:	f7fe fc90 	bl	80102bc <recvfrom_W5x00>
 801199c:	4603      	mov	r3, r0
 801199e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80119a0:	887b      	ldrh	r3, [r7, #2]
 80119a2:	2b43      	cmp	r3, #67	@ 0x43
 80119a4:	f040 81ed 	bne.w	8011d82 <parseDHCPMSG+0x41a>
 80119a8:	e001      	b.n	80119ae <parseDHCPMSG+0x46>
   else return 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	e1eb      	b.n	8011d86 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80119ae:	4b93      	ldr	r3, [pc, #588]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	7f1a      	ldrb	r2, [r3, #28]
 80119b4:	4b92      	ldr	r3, [pc, #584]	@ (8011c00 <parseDHCPMSG+0x298>)
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d124      	bne.n	8011a06 <parseDHCPMSG+0x9e>
 80119bc:	4b8f      	ldr	r3, [pc, #572]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	7f5a      	ldrb	r2, [r3, #29]
 80119c2:	4b8f      	ldr	r3, [pc, #572]	@ (8011c00 <parseDHCPMSG+0x298>)
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d11d      	bne.n	8011a06 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80119ca:	4b8c      	ldr	r3, [pc, #560]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	7f9a      	ldrb	r2, [r3, #30]
 80119d0:	4b8b      	ldr	r3, [pc, #556]	@ (8011c00 <parseDHCPMSG+0x298>)
 80119d2:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d116      	bne.n	8011a06 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80119d8:	4b88      	ldr	r3, [pc, #544]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	7fda      	ldrb	r2, [r3, #31]
 80119de:	4b88      	ldr	r3, [pc, #544]	@ (8011c00 <parseDHCPMSG+0x298>)
 80119e0:	78db      	ldrb	r3, [r3, #3]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d10f      	bne.n	8011a06 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80119e6:	4b85      	ldr	r3, [pc, #532]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f893 2020 	ldrb.w	r2, [r3, #32]
 80119ee:	4b84      	ldr	r3, [pc, #528]	@ (8011c00 <parseDHCPMSG+0x298>)
 80119f0:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d107      	bne.n	8011a06 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80119f6:	4b81      	ldr	r3, [pc, #516]	@ (8011bfc <parseDHCPMSG+0x294>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80119fe:	4b80      	ldr	r3, [pc, #512]	@ (8011c00 <parseDHCPMSG+0x298>)
 8011a00:	795b      	ldrb	r3, [r3, #5]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d001      	beq.n	8011a0a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e1bd      	b.n	8011d86 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8011a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d10b      	bne.n	8011a2a <parseDHCPMSG+0xc2>
 8011a12:	4b7c      	ldr	r3, [pc, #496]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a14:	785b      	ldrb	r3, [r3, #1]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d107      	bne.n	8011a2a <parseDHCPMSG+0xc2>
 8011a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a1c:	789b      	ldrb	r3, [r3, #2]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d103      	bne.n	8011a2a <parseDHCPMSG+0xc2>
 8011a22:	4b78      	ldr	r3, [pc, #480]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a24:	78db      	ldrb	r3, [r3, #3]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d029      	beq.n	8011a7e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8011a2a:	793a      	ldrb	r2, [r7, #4]
 8011a2c:	4b75      	ldr	r3, [pc, #468]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d10e      	bne.n	8011a52 <parseDHCPMSG+0xea>
 8011a34:	797a      	ldrb	r2, [r7, #5]
 8011a36:	4b73      	ldr	r3, [pc, #460]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a38:	785b      	ldrb	r3, [r3, #1]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d109      	bne.n	8011a52 <parseDHCPMSG+0xea>
 8011a3e:	79ba      	ldrb	r2, [r7, #6]
 8011a40:	4b70      	ldr	r3, [pc, #448]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a42:	789b      	ldrb	r3, [r3, #2]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d104      	bne.n	8011a52 <parseDHCPMSG+0xea>
 8011a48:	79fa      	ldrb	r2, [r7, #7]
 8011a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8011c04 <parseDHCPMSG+0x29c>)
 8011a4c:	78db      	ldrb	r3, [r3, #3]
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d015      	beq.n	8011a7e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8011a52:	793a      	ldrb	r2, [r7, #4]
 8011a54:	4b6c      	ldr	r3, [pc, #432]	@ (8011c08 <parseDHCPMSG+0x2a0>)
 8011a56:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d10e      	bne.n	8011a7a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8011a5c:	797a      	ldrb	r2, [r7, #5]
 8011a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8011c08 <parseDHCPMSG+0x2a0>)
 8011a60:	785b      	ldrb	r3, [r3, #1]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d109      	bne.n	8011a7a <parseDHCPMSG+0x112>
 8011a66:	79ba      	ldrb	r2, [r7, #6]
 8011a68:	4b67      	ldr	r3, [pc, #412]	@ (8011c08 <parseDHCPMSG+0x2a0>)
 8011a6a:	789b      	ldrb	r3, [r3, #2]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d104      	bne.n	8011a7a <parseDHCPMSG+0x112>
 8011a70:	79fa      	ldrb	r2, [r7, #7]
 8011a72:	4b65      	ldr	r3, [pc, #404]	@ (8011c08 <parseDHCPMSG+0x2a0>)
 8011a74:	78db      	ldrb	r3, [r3, #3]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d001      	beq.n	8011a7e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	e183      	b.n	8011d86 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8011a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8011bfc <parseDHCPMSG+0x294>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	33f0      	adds	r3, #240	@ 0xf0
 8011a88:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8011a8a:	8a3b      	ldrh	r3, [r7, #16]
 8011a8c:	3bf0      	subs	r3, #240	@ 0xf0
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	4413      	add	r3, r2
 8011a92:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8011a94:	e170      	b.n	8011d78 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	2b36      	cmp	r3, #54	@ 0x36
 8011a9c:	dc76      	bgt.n	8011b8c <parseDHCPMSG+0x224>
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f2c0 815d 	blt.w	8011d5e <parseDHCPMSG+0x3f6>
 8011aa4:	2b36      	cmp	r3, #54	@ 0x36
 8011aa6:	f200 815a 	bhi.w	8011d5e <parseDHCPMSG+0x3f6>
 8011aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8011ab0 <parseDHCPMSG+0x148>)
 8011aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab0:	08011b99 	.word	0x08011b99
 8011ab4:	08011bb9 	.word	0x08011bb9
 8011ab8:	08011d5f 	.word	0x08011d5f
 8011abc:	08011c11 	.word	0x08011c11
 8011ac0:	08011d5f 	.word	0x08011d5f
 8011ac4:	08011d5f 	.word	0x08011d5f
 8011ac8:	08011c5d 	.word	0x08011c5d
 8011acc:	08011d5f 	.word	0x08011d5f
 8011ad0:	08011d5f 	.word	0x08011d5f
 8011ad4:	08011d5f 	.word	0x08011d5f
 8011ad8:	08011d5f 	.word	0x08011d5f
 8011adc:	08011d5f 	.word	0x08011d5f
 8011ae0:	08011d5f 	.word	0x08011d5f
 8011ae4:	08011d5f 	.word	0x08011d5f
 8011ae8:	08011d5f 	.word	0x08011d5f
 8011aec:	08011d5f 	.word	0x08011d5f
 8011af0:	08011d5f 	.word	0x08011d5f
 8011af4:	08011d5f 	.word	0x08011d5f
 8011af8:	08011d5f 	.word	0x08011d5f
 8011afc:	08011d5f 	.word	0x08011d5f
 8011b00:	08011d5f 	.word	0x08011d5f
 8011b04:	08011d5f 	.word	0x08011d5f
 8011b08:	08011d5f 	.word	0x08011d5f
 8011b0c:	08011d5f 	.word	0x08011d5f
 8011b10:	08011d5f 	.word	0x08011d5f
 8011b14:	08011d5f 	.word	0x08011d5f
 8011b18:	08011d5f 	.word	0x08011d5f
 8011b1c:	08011d5f 	.word	0x08011d5f
 8011b20:	08011d5f 	.word	0x08011d5f
 8011b24:	08011d5f 	.word	0x08011d5f
 8011b28:	08011d5f 	.word	0x08011d5f
 8011b2c:	08011d5f 	.word	0x08011d5f
 8011b30:	08011d5f 	.word	0x08011d5f
 8011b34:	08011d5f 	.word	0x08011d5f
 8011b38:	08011d5f 	.word	0x08011d5f
 8011b3c:	08011d5f 	.word	0x08011d5f
 8011b40:	08011d5f 	.word	0x08011d5f
 8011b44:	08011d5f 	.word	0x08011d5f
 8011b48:	08011d5f 	.word	0x08011d5f
 8011b4c:	08011d5f 	.word	0x08011d5f
 8011b50:	08011d5f 	.word	0x08011d5f
 8011b54:	08011d5f 	.word	0x08011d5f
 8011b58:	08011d5f 	.word	0x08011d5f
 8011b5c:	08011d5f 	.word	0x08011d5f
 8011b60:	08011d5f 	.word	0x08011d5f
 8011b64:	08011d5f 	.word	0x08011d5f
 8011b68:	08011d5f 	.word	0x08011d5f
 8011b6c:	08011d5f 	.word	0x08011d5f
 8011b70:	08011d5f 	.word	0x08011d5f
 8011b74:	08011d5f 	.word	0x08011d5f
 8011b78:	08011d5f 	.word	0x08011d5f
 8011b7c:	08011ca9 	.word	0x08011ca9
 8011b80:	08011d5f 	.word	0x08011d5f
 8011b84:	08011ba1 	.word	0x08011ba1
 8011b88:	08011d05 	.word	0x08011d05
 8011b8c:	2bff      	cmp	r3, #255	@ 0xff
 8011b8e:	f040 80e6 	bne.w	8011d5e <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	617b      	str	r3, [r7, #20]
   				break;
 8011b96:	e0ef      	b.n	8011d78 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	617b      	str	r3, [r7, #20]
   				break;
 8011b9e:	e0eb      	b.n	8011d78 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	617b      	str	r3, [r7, #20]
   				p++;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	1c5a      	adds	r2, r3, #1
 8011bb0:	617a      	str	r2, [r7, #20]
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	74fb      	strb	r3, [r7, #19]
   				break;
 8011bb6:	e0df      	b.n	8011d78 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	617b      	str	r3, [r7, #20]
   				p++;
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	1c5a      	adds	r2, r3, #1
 8011bc8:	617a      	str	r2, [r7, #20]
 8011bca:	781a      	ldrb	r2, [r3, #0]
 8011bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8011c0c <parseDHCPMSG+0x2a4>)
 8011bce:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	617a      	str	r2, [r7, #20]
 8011bd6:	781a      	ldrb	r2, [r3, #0]
 8011bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8011c0c <parseDHCPMSG+0x2a4>)
 8011bda:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	1c5a      	adds	r2, r3, #1
 8011be0:	617a      	str	r2, [r7, #20]
 8011be2:	781a      	ldrb	r2, [r3, #0]
 8011be4:	4b09      	ldr	r3, [pc, #36]	@ (8011c0c <parseDHCPMSG+0x2a4>)
 8011be6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	1c5a      	adds	r2, r3, #1
 8011bec:	617a      	str	r2, [r7, #20]
 8011bee:	781a      	ldrb	r2, [r3, #0]
 8011bf0:	4b06      	ldr	r3, [pc, #24]	@ (8011c0c <parseDHCPMSG+0x2a4>)
 8011bf2:	70da      	strb	r2, [r3, #3]
   				break;
 8011bf4:	e0c0      	b.n	8011d78 <parseDHCPMSG+0x410>
 8011bf6:	bf00      	nop
 8011bf8:	20000ae1 	.word	0x20000ae1
 8011bfc:	20000b0c 	.word	0x20000b0c
 8011c00:	20000b10 	.word	0x20000b10
 8011c04:	20000ae4 	.word	0x20000ae4
 8011c08:	20000ae8 	.word	0x20000ae8
 8011c0c:	20000af8 	.word	0x20000af8
   			case routersOnSubnet :
   				p++;
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	3301      	adds	r3, #1
 8011c14:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	617a      	str	r2, [r7, #20]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	617a      	str	r2, [r7, #20]
 8011c26:	781a      	ldrb	r2, [r3, #0]
 8011c28:	4b59      	ldr	r3, [pc, #356]	@ (8011d90 <parseDHCPMSG+0x428>)
 8011c2a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	1c5a      	adds	r2, r3, #1
 8011c30:	617a      	str	r2, [r7, #20]
 8011c32:	781a      	ldrb	r2, [r3, #0]
 8011c34:	4b56      	ldr	r3, [pc, #344]	@ (8011d90 <parseDHCPMSG+0x428>)
 8011c36:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	617a      	str	r2, [r7, #20]
 8011c3e:	781a      	ldrb	r2, [r3, #0]
 8011c40:	4b53      	ldr	r3, [pc, #332]	@ (8011d90 <parseDHCPMSG+0x428>)
 8011c42:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	617a      	str	r2, [r7, #20]
 8011c4a:	781a      	ldrb	r2, [r3, #0]
 8011c4c:	4b50      	ldr	r3, [pc, #320]	@ (8011d90 <parseDHCPMSG+0x428>)
 8011c4e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8011c50:	7afb      	ldrb	r3, [r7, #11]
 8011c52:	3b04      	subs	r3, #4
 8011c54:	697a      	ldr	r2, [r7, #20]
 8011c56:	4413      	add	r3, r2
 8011c58:	617b      	str	r3, [r7, #20]
   				break;
 8011c5a:	e08d      	b.n	8011d78 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	617a      	str	r2, [r7, #20]
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	1c5a      	adds	r2, r3, #1
 8011c70:	617a      	str	r2, [r7, #20]
 8011c72:	781a      	ldrb	r2, [r3, #0]
 8011c74:	4b47      	ldr	r3, [pc, #284]	@ (8011d94 <parseDHCPMSG+0x42c>)
 8011c76:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	617a      	str	r2, [r7, #20]
 8011c7e:	781a      	ldrb	r2, [r3, #0]
 8011c80:	4b44      	ldr	r3, [pc, #272]	@ (8011d94 <parseDHCPMSG+0x42c>)
 8011c82:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	1c5a      	adds	r2, r3, #1
 8011c88:	617a      	str	r2, [r7, #20]
 8011c8a:	781a      	ldrb	r2, [r3, #0]
 8011c8c:	4b41      	ldr	r3, [pc, #260]	@ (8011d94 <parseDHCPMSG+0x42c>)
 8011c8e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	617a      	str	r2, [r7, #20]
 8011c96:	781a      	ldrb	r2, [r3, #0]
 8011c98:	4b3e      	ldr	r3, [pc, #248]	@ (8011d94 <parseDHCPMSG+0x42c>)
 8011c9a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8011c9c:	7afb      	ldrb	r3, [r7, #11]
 8011c9e:	3b04      	subs	r3, #4
 8011ca0:	697a      	ldr	r2, [r7, #20]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	617b      	str	r3, [r7, #20]
   				break;
 8011ca6:	e067      	b.n	8011d78 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	3301      	adds	r3, #1
 8011cac:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	1c5a      	adds	r2, r3, #1
 8011cb2:	617a      	str	r2, [r7, #20]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	1c5a      	adds	r2, r3, #1
 8011cbc:	617a      	str	r2, [r7, #20]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	4b35      	ldr	r3, [pc, #212]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cc4:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8011cc6:	4b34      	ldr	r3, [pc, #208]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	021a      	lsls	r2, r3, #8
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	1c59      	adds	r1, r3, #1
 8011cd0:	6179      	str	r1, [r7, #20]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	4a30      	ldr	r2, [pc, #192]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cd8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8011cda:	4b2f      	ldr	r3, [pc, #188]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	021a      	lsls	r2, r3, #8
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	1c59      	adds	r1, r3, #1
 8011ce4:	6179      	str	r1, [r7, #20]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	4413      	add	r3, r2
 8011cea:	4a2b      	ldr	r2, [pc, #172]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8011cee:	4b2a      	ldr	r3, [pc, #168]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	021a      	lsls	r2, r3, #8
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	1c59      	adds	r1, r3, #1
 8011cf8:	6179      	str	r1, [r7, #20]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	4a26      	ldr	r2, [pc, #152]	@ (8011d98 <parseDHCPMSG+0x430>)
 8011d00:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8011d02:	e039      	b.n	8011d78 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	3301      	adds	r3, #1
 8011d08:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	1c5a      	adds	r2, r3, #1
 8011d0e:	617a      	str	r2, [r7, #20]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	1c5a      	adds	r2, r3, #1
 8011d18:	617a      	str	r2, [r7, #20]
 8011d1a:	781a      	ldrb	r2, [r3, #0]
 8011d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8011d9c <parseDHCPMSG+0x434>)
 8011d1e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	1c5a      	adds	r2, r3, #1
 8011d24:	617a      	str	r2, [r7, #20]
 8011d26:	781a      	ldrb	r2, [r3, #0]
 8011d28:	4b1c      	ldr	r3, [pc, #112]	@ (8011d9c <parseDHCPMSG+0x434>)
 8011d2a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	1c5a      	adds	r2, r3, #1
 8011d30:	617a      	str	r2, [r7, #20]
 8011d32:	781a      	ldrb	r2, [r3, #0]
 8011d34:	4b19      	ldr	r3, [pc, #100]	@ (8011d9c <parseDHCPMSG+0x434>)
 8011d36:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	1c5a      	adds	r2, r3, #1
 8011d3c:	617a      	str	r2, [r7, #20]
 8011d3e:	781a      	ldrb	r2, [r3, #0]
 8011d40:	4b16      	ldr	r3, [pc, #88]	@ (8011d9c <parseDHCPMSG+0x434>)
 8011d42:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8011d44:	793a      	ldrb	r2, [r7, #4]
 8011d46:	4b16      	ldr	r3, [pc, #88]	@ (8011da0 <parseDHCPMSG+0x438>)
 8011d48:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8011d4a:	797a      	ldrb	r2, [r7, #5]
 8011d4c:	4b14      	ldr	r3, [pc, #80]	@ (8011da0 <parseDHCPMSG+0x438>)
 8011d4e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8011d50:	79ba      	ldrb	r2, [r7, #6]
 8011d52:	4b13      	ldr	r3, [pc, #76]	@ (8011da0 <parseDHCPMSG+0x438>)
 8011d54:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8011d56:	79fa      	ldrb	r2, [r7, #7]
 8011d58:	4b11      	ldr	r3, [pc, #68]	@ (8011da0 <parseDHCPMSG+0x438>)
 8011d5a:	70da      	strb	r2, [r3, #3]
   				break;
 8011d5c:	e00c      	b.n	8011d78 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	3301      	adds	r3, #1
 8011d62:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	1c5a      	adds	r2, r3, #1
 8011d68:	617a      	str	r2, [r7, #20]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8011d6e:	7afb      	ldrb	r3, [r7, #11]
 8011d70:	697a      	ldr	r2, [r7, #20]
 8011d72:	4413      	add	r3, r2
 8011d74:	617b      	str	r3, [r7, #20]
   				break;
 8011d76:	bf00      	nop
		while ( p < e ) {
 8011d78:	697a      	ldr	r2, [r7, #20]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	f4ff ae8a 	bcc.w	8011a96 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8011d82:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	371c      	adds	r7, #28
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd90      	pop	{r4, r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20000af4 	.word	0x20000af4
 8011d94:	20000afc 	.word	0x20000afc
 8011d98:	20000050 	.word	0x20000050
 8011d9c:	20000ae4 	.word	0x20000ae4
 8011da0:	20000ae8 	.word	0x20000ae8

08011da4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8011daa:	4b7f      	ldr	r3, [pc, #508]	@ (8011fa8 <DHCP_run+0x204>)
 8011dac:	f993 3000 	ldrsb.w	r3, [r3]
 8011db0:	2b06      	cmp	r3, #6
 8011db2:	d101      	bne.n	8011db8 <DHCP_run+0x14>
 8011db4:	2305      	movs	r3, #5
 8011db6:	e0f3      	b.n	8011fa0 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8011db8:	4b7c      	ldr	r3, [pc, #496]	@ (8011fac <DHCP_run+0x208>)
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fd f962 	bl	800f090 <WIZCHIP_READ>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b22      	cmp	r3, #34	@ 0x22
 8011dd0:	d006      	beq.n	8011de0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8011dd2:	4b76      	ldr	r3, [pc, #472]	@ (8011fac <DHCP_run+0x208>)
 8011dd4:	7818      	ldrb	r0, [r3, #0]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	2244      	movs	r2, #68	@ 0x44
 8011dda:	2102      	movs	r1, #2
 8011ddc:	f7fd fc3e 	bl	800f65c <socket>

	ret = DHCP_RUNNING;
 8011de0:	2301      	movs	r3, #1
 8011de2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8011de4:	f7ff fdc0 	bl	8011968 <parseDHCPMSG>
 8011de8:	4603      	mov	r3, r0
 8011dea:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8011dec:	4b6e      	ldr	r3, [pc, #440]	@ (8011fa8 <DHCP_run+0x204>)
 8011dee:	f993 3000 	ldrsb.w	r3, [r3]
 8011df2:	2b04      	cmp	r3, #4
 8011df4:	f200 80d0 	bhi.w	8011f98 <DHCP_run+0x1f4>
 8011df8:	a201      	add	r2, pc, #4	@ (adr r2, 8011e00 <DHCP_run+0x5c>)
 8011dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dfe:	bf00      	nop
 8011e00:	08011e15 	.word	0x08011e15
 8011e04:	08011e39 	.word	0x08011e39
 8011e08:	08011e7d 	.word	0x08011e7d
 8011e0c:	08011ecd 	.word	0x08011ecd
 8011e10:	08011f27 	.word	0x08011f27
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8011e14:	4b66      	ldr	r3, [pc, #408]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e16:	2200      	movs	r2, #0
 8011e18:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8011e1a:	4b65      	ldr	r3, [pc, #404]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8011e20:	4b63      	ldr	r3, [pc, #396]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e22:	2200      	movs	r2, #0
 8011e24:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8011e26:	4b62      	ldr	r3, [pc, #392]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e28:	2200      	movs	r2, #0
 8011e2a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8011e2c:	f7fe fffa 	bl	8010e24 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8011e30:	4b5d      	ldr	r3, [pc, #372]	@ (8011fa8 <DHCP_run+0x204>)
 8011e32:	2201      	movs	r2, #1
 8011e34:	701a      	strb	r2, [r3, #0]
   		break;
 8011e36:	e0b2      	b.n	8011f9e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8011e38:	79bb      	ldrb	r3, [r7, #6]
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	d119      	bne.n	8011e72 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8011e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8011fb4 <DHCP_run+0x210>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	7c1a      	ldrb	r2, [r3, #16]
 8011e44:	4b5a      	ldr	r3, [pc, #360]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e46:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8011e48:	4b5a      	ldr	r3, [pc, #360]	@ (8011fb4 <DHCP_run+0x210>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	7c5a      	ldrb	r2, [r3, #17]
 8011e4e:	4b58      	ldr	r3, [pc, #352]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e50:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8011e52:	4b58      	ldr	r3, [pc, #352]	@ (8011fb4 <DHCP_run+0x210>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	7c9a      	ldrb	r2, [r3, #18]
 8011e58:	4b55      	ldr	r3, [pc, #340]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e5a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8011e5c:	4b55      	ldr	r3, [pc, #340]	@ (8011fb4 <DHCP_run+0x210>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	7cda      	ldrb	r2, [r3, #19]
 8011e62:	4b53      	ldr	r3, [pc, #332]	@ (8011fb0 <DHCP_run+0x20c>)
 8011e64:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8011e66:	f7ff f9a3 	bl	80111b0 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8011e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8011fa8 <DHCP_run+0x204>)
 8011e6c:	2202      	movs	r2, #2
 8011e6e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8011e70:	e095      	b.n	8011f9e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8011e72:	f000 f8b1 	bl	8011fd8 <check_DHCP_timeout>
 8011e76:	4603      	mov	r3, r0
 8011e78:	71fb      	strb	r3, [r7, #7]
         break;
 8011e7a:	e090      	b.n	8011f9e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8011e7c:	79bb      	ldrb	r3, [r7, #6]
 8011e7e:	2b05      	cmp	r3, #5
 8011e80:	d116      	bne.n	8011eb0 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8011e82:	f000 f909 	bl	8012098 <check_DHCP_leasedIP>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d008      	beq.n	8011e9e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8011e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8011fb8 <DHCP_run+0x214>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4798      	blx	r3
					reset_DHCP_timeout();
 8011e92:	f000 f9d3 	bl	801223c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8011e96:	4b44      	ldr	r3, [pc, #272]	@ (8011fa8 <DHCP_run+0x204>)
 8011e98:	2203      	movs	r2, #3
 8011e9a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8011e9c:	e07f      	b.n	8011f9e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8011e9e:	f000 f9cd 	bl	801223c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8011ea2:	4b46      	ldr	r3, [pc, #280]	@ (8011fbc <DHCP_run+0x218>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8011ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8011fa8 <DHCP_run+0x204>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	701a      	strb	r2, [r3, #0]
		break;
 8011eae:	e076      	b.n	8011f9e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8011eb0:	79bb      	ldrb	r3, [r7, #6]
 8011eb2:	2b06      	cmp	r3, #6
 8011eb4:	d105      	bne.n	8011ec2 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8011eb6:	f000 f9c1 	bl	801223c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8011eba:	4b3b      	ldr	r3, [pc, #236]	@ (8011fa8 <DHCP_run+0x204>)
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	701a      	strb	r2, [r3, #0]
		break;
 8011ec0:	e06d      	b.n	8011f9e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8011ec2:	f000 f889 	bl	8011fd8 <check_DHCP_timeout>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	71fb      	strb	r3, [r7, #7]
		break;
 8011eca:	e068      	b.n	8011f9e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8011ecc:	2304      	movs	r3, #4
 8011ece:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8011ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8011fc0 <DHCP_run+0x21c>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed8:	d060      	beq.n	8011f9c <DHCP_run+0x1f8>
 8011eda:	4b39      	ldr	r3, [pc, #228]	@ (8011fc0 <DHCP_run+0x21c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	085a      	lsrs	r2, r3, #1
 8011ee0:	4b38      	ldr	r3, [pc, #224]	@ (8011fc4 <DHCP_run+0x220>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d259      	bcs.n	8011f9c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8011eec:	4b30      	ldr	r3, [pc, #192]	@ (8011fb0 <DHCP_run+0x20c>)
 8011eee:	781a      	ldrb	r2, [r3, #0]
 8011ef0:	4b35      	ldr	r3, [pc, #212]	@ (8011fc8 <DHCP_run+0x224>)
 8011ef2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8011ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8011fb0 <DHCP_run+0x20c>)
 8011ef6:	785a      	ldrb	r2, [r3, #1]
 8011ef8:	4b33      	ldr	r3, [pc, #204]	@ (8011fc8 <DHCP_run+0x224>)
 8011efa:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8011efc:	4b2c      	ldr	r3, [pc, #176]	@ (8011fb0 <DHCP_run+0x20c>)
 8011efe:	789a      	ldrb	r2, [r3, #2]
 8011f00:	4b31      	ldr	r3, [pc, #196]	@ (8011fc8 <DHCP_run+0x224>)
 8011f02:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8011f04:	4b2a      	ldr	r3, [pc, #168]	@ (8011fb0 <DHCP_run+0x20c>)
 8011f06:	78da      	ldrb	r2, [r3, #3]
 8011f08:	4b2f      	ldr	r3, [pc, #188]	@ (8011fc8 <DHCP_run+0x224>)
 8011f0a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8011f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8011fcc <DHCP_run+0x228>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	3301      	adds	r3, #1
 8011f12:	4a2e      	ldr	r2, [pc, #184]	@ (8011fcc <DHCP_run+0x228>)
 8011f14:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8011f16:	f7ff f94b 	bl	80111b0 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8011f1a:	f000 f98f 	bl	801223c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8011f1e:	4b22      	ldr	r3, [pc, #136]	@ (8011fa8 <DHCP_run+0x204>)
 8011f20:	2204      	movs	r2, #4
 8011f22:	701a      	strb	r2, [r3, #0]
			}
		break;
 8011f24:	e03a      	b.n	8011f9c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8011f26:	2304      	movs	r3, #4
 8011f28:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8011f2a:	79bb      	ldrb	r3, [r7, #6]
 8011f2c:	2b05      	cmp	r3, #5
 8011f2e:	d125      	bne.n	8011f7c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8011f30:	4b27      	ldr	r3, [pc, #156]	@ (8011fd0 <DHCP_run+0x22c>)
 8011f32:	2200      	movs	r2, #0
 8011f34:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8011f36:	4b24      	ldr	r3, [pc, #144]	@ (8011fc8 <DHCP_run+0x224>)
 8011f38:	781a      	ldrb	r2, [r3, #0]
 8011f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8011fb0 <DHCP_run+0x20c>)
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d111      	bne.n	8011f66 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8011f42:	4b21      	ldr	r3, [pc, #132]	@ (8011fc8 <DHCP_run+0x224>)
 8011f44:	785a      	ldrb	r2, [r3, #1]
 8011f46:	4b1a      	ldr	r3, [pc, #104]	@ (8011fb0 <DHCP_run+0x20c>)
 8011f48:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d10b      	bne.n	8011f66 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8011f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8011fc8 <DHCP_run+0x224>)
 8011f50:	789a      	ldrb	r2, [r3, #2]
 8011f52:	4b17      	ldr	r3, [pc, #92]	@ (8011fb0 <DHCP_run+0x20c>)
 8011f54:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d105      	bne.n	8011f66 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8011f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8011fc8 <DHCP_run+0x224>)
 8011f5c:	78da      	ldrb	r2, [r3, #3]
 8011f5e:	4b14      	ldr	r3, [pc, #80]	@ (8011fb0 <DHCP_run+0x20c>)
 8011f60:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d004      	beq.n	8011f70 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8011f66:	2303      	movs	r3, #3
 8011f68:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8011f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8011fd4 <DHCP_run+0x230>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8011f70:	f000 f964 	bl	801223c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8011f74:	4b0c      	ldr	r3, [pc, #48]	@ (8011fa8 <DHCP_run+0x204>)
 8011f76:	2203      	movs	r2, #3
 8011f78:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8011f7a:	e010      	b.n	8011f9e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8011f7c:	79bb      	ldrb	r3, [r7, #6]
 8011f7e:	2b06      	cmp	r3, #6
 8011f80:	d105      	bne.n	8011f8e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8011f82:	f000 f95b 	bl	801223c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8011f86:	4b08      	ldr	r3, [pc, #32]	@ (8011fa8 <DHCP_run+0x204>)
 8011f88:	2201      	movs	r2, #1
 8011f8a:	701a      	strb	r2, [r3, #0]
	   	break;
 8011f8c:	e007      	b.n	8011f9e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8011f8e:	f000 f823 	bl	8011fd8 <check_DHCP_timeout>
 8011f92:	4603      	mov	r3, r0
 8011f94:	71fb      	strb	r3, [r7, #7]
	   	break;
 8011f96:	e002      	b.n	8011f9e <DHCP_run+0x1fa>
		default :
   		break;
 8011f98:	bf00      	nop
 8011f9a:	e000      	b.n	8011f9e <DHCP_run+0x1fa>
		break;
 8011f9c:	bf00      	nop
	}

	return ret;
 8011f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	20000b00 	.word	0x20000b00
 8011fac:	20000ae1 	.word	0x20000ae1
 8011fb0:	20000af0 	.word	0x20000af0
 8011fb4:	20000b0c 	.word	0x20000b0c
 8011fb8:	20000060 	.word	0x20000060
 8011fbc:	20000068 	.word	0x20000068
 8011fc0:	20000050 	.word	0x20000050
 8011fc4:	20000b04 	.word	0x20000b04
 8011fc8:	20000aec 	.word	0x20000aec
 8011fcc:	20000b08 	.word	0x20000b08
 8011fd0:	20000b01 	.word	0x20000b01
 8011fd4:	20000064 	.word	0x20000064

08011fd8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8011fe2:	4b29      	ldr	r3, [pc, #164]	@ (8012088 <check_DHCP_timeout+0xb0>)
 8011fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	dc2d      	bgt.n	8012048 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8011fec:	4b27      	ldr	r3, [pc, #156]	@ (801208c <check_DHCP_timeout+0xb4>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	4b27      	ldr	r3, [pc, #156]	@ (8012090 <check_DHCP_timeout+0xb8>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d242      	bcs.n	801207e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8011ff8:	4b26      	ldr	r3, [pc, #152]	@ (8012094 <check_DHCP_timeout+0xbc>)
 8011ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	d00c      	beq.n	801201c <check_DHCP_timeout+0x44>
 8012002:	2b04      	cmp	r3, #4
 8012004:	dc0d      	bgt.n	8012022 <check_DHCP_timeout+0x4a>
 8012006:	2b01      	cmp	r3, #1
 8012008:	d002      	beq.n	8012010 <check_DHCP_timeout+0x38>
 801200a:	2b02      	cmp	r3, #2
 801200c:	d003      	beq.n	8012016 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801200e:	e008      	b.n	8012022 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8012010:	f7fe ff08 	bl	8010e24 <send_DHCP_DISCOVER>
				break;
 8012014:	e006      	b.n	8012024 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8012016:	f7ff f8cb 	bl	80111b0 <send_DHCP_REQUEST>
				break;
 801201a:	e003      	b.n	8012024 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801201c:	f7ff f8c8 	bl	80111b0 <send_DHCP_REQUEST>
				break;
 8012020:	e000      	b.n	8012024 <check_DHCP_timeout+0x4c>
				break;
 8012022:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8012024:	4b1a      	ldr	r3, [pc, #104]	@ (8012090 <check_DHCP_timeout+0xb8>)
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801202a:	4b19      	ldr	r3, [pc, #100]	@ (8012090 <check_DHCP_timeout+0xb8>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	330a      	adds	r3, #10
 8012030:	4a16      	ldr	r2, [pc, #88]	@ (801208c <check_DHCP_timeout+0xb4>)
 8012032:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8012034:	4b14      	ldr	r3, [pc, #80]	@ (8012088 <check_DHCP_timeout+0xb0>)
 8012036:	f993 3000 	ldrsb.w	r3, [r3]
 801203a:	b2db      	uxtb	r3, r3
 801203c:	3301      	adds	r3, #1
 801203e:	b2db      	uxtb	r3, r3
 8012040:	b25a      	sxtb	r2, r3
 8012042:	4b11      	ldr	r3, [pc, #68]	@ (8012088 <check_DHCP_timeout+0xb0>)
 8012044:	701a      	strb	r2, [r3, #0]
 8012046:	e01a      	b.n	801207e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8012048:	4b12      	ldr	r3, [pc, #72]	@ (8012094 <check_DHCP_timeout+0xbc>)
 801204a:	f993 3000 	ldrsb.w	r3, [r3]
 801204e:	2b04      	cmp	r3, #4
 8012050:	d00c      	beq.n	801206c <check_DHCP_timeout+0x94>
 8012052:	2b04      	cmp	r3, #4
 8012054:	dc10      	bgt.n	8012078 <check_DHCP_timeout+0xa0>
 8012056:	2b01      	cmp	r3, #1
 8012058:	d002      	beq.n	8012060 <check_DHCP_timeout+0x88>
 801205a:	2b02      	cmp	r3, #2
 801205c:	d006      	beq.n	801206c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 801205e:	e00b      	b.n	8012078 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8012060:	4b0c      	ldr	r3, [pc, #48]	@ (8012094 <check_DHCP_timeout+0xbc>)
 8012062:	2200      	movs	r2, #0
 8012064:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8012066:	2300      	movs	r3, #0
 8012068:	71fb      	strb	r3, [r7, #7]
				break;
 801206a:	e006      	b.n	801207a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 801206c:	f7fe feda 	bl	8010e24 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8012070:	4b08      	ldr	r3, [pc, #32]	@ (8012094 <check_DHCP_timeout+0xbc>)
 8012072:	2201      	movs	r2, #1
 8012074:	701a      	strb	r2, [r3, #0]
				break;
 8012076:	e000      	b.n	801207a <check_DHCP_timeout+0xa2>
				break;
 8012078:	bf00      	nop
		}
		reset_DHCP_timeout();
 801207a:	f000 f8df 	bl	801223c <reset_DHCP_timeout>
	}
	return ret;
 801207e:	79fb      	ldrb	r3, [r7, #7]
}
 8012080:	4618      	mov	r0, r3
 8012082:	3708      	adds	r7, #8
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	20000b01 	.word	0x20000b01
 801208c:	20000054 	.word	0x20000054
 8012090:	20000b04 	.word	0x20000b04
 8012094:	20000b00 	.word	0x20000b00

08012098 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801209e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80120a2:	f7fc fff5 	bl	800f090 <WIZCHIP_READ>
 80120a6:	4603      	mov	r3, r0
 80120a8:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80120aa:	2103      	movs	r1, #3
 80120ac:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80120b0:	f7fd f83a 	bl	800f128 <WIZCHIP_WRITE>
#if 1
	// 20231016 taylor//teddy 240122
#if ((_WIZCHIP_ == 6100) || (_WIZCHIP_ == 6300))
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000, 4);
#else
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80120b4:	4b13      	ldr	r3, [pc, #76]	@ (8012104 <check_DHCP_leasedIP+0x6c>)
 80120b6:	7818      	ldrb	r0, [r3, #0]
 80120b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	4b12      	ldr	r3, [pc, #72]	@ (8012108 <check_DHCP_leasedIP+0x70>)
 80120c0:	2211      	movs	r2, #17
 80120c2:	4912      	ldr	r1, [pc, #72]	@ (801210c <check_DHCP_leasedIP+0x74>)
 80120c4:	f7fd ff4e 	bl	800ff64 <sendto_W5x00>
 80120c8:	6038      	str	r0, [r7, #0]
#else
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
#endif

	// RCR value restore
	setRCR(tmp);
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	4619      	mov	r1, r3
 80120ce:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80120d2:	f7fd f829 	bl	800f128 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	f113 0f0d 	cmn.w	r3, #13
 80120dc:	d101      	bne.n	80120e2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80120de:	2301      	movs	r3, #1
 80120e0:	e00c      	b.n	80120fc <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80120e2:	f7ff faef 	bl	80116c4 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80120e6:	4b0a      	ldr	r3, [pc, #40]	@ (8012110 <check_DHCP_leasedIP+0x78>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80120ec:	bf00      	nop
 80120ee:	4b08      	ldr	r3, [pc, #32]	@ (8012110 <check_DHCP_leasedIP+0x78>)
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d9f9      	bls.n	80120ee <check_DHCP_leasedIP+0x56>

		return 0;
 80120fa:	2300      	movs	r3, #0
	}
}	
 80120fc:	4618      	mov	r0, r3
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	20000ae1 	.word	0x20000ae1
 8012108:	20000af0 	.word	0x20000af0
 801210c:	08015f34 	.word	0x08015f34
 8012110:	20000b04 	.word	0x20000b04

08012114 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	4603      	mov	r3, r0
 801211c:	6039      	str	r1, [r7, #0]
 801211e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8012120:	2300      	movs	r3, #0
 8012122:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8012124:	2206      	movs	r2, #6
 8012126:	493f      	ldr	r1, [pc, #252]	@ (8012224 <DHCP_init+0x110>)
 8012128:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801212c:	f7fd f84a 	bl	800f1c4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8012130:	4b3c      	ldr	r3, [pc, #240]	@ (8012224 <DHCP_init+0x110>)
 8012132:	781a      	ldrb	r2, [r3, #0]
 8012134:	4b3b      	ldr	r3, [pc, #236]	@ (8012224 <DHCP_init+0x110>)
 8012136:	785b      	ldrb	r3, [r3, #1]
 8012138:	4313      	orrs	r3, r2
 801213a:	b2da      	uxtb	r2, r3
 801213c:	4b39      	ldr	r3, [pc, #228]	@ (8012224 <DHCP_init+0x110>)
 801213e:	789b      	ldrb	r3, [r3, #2]
 8012140:	4313      	orrs	r3, r2
 8012142:	b2da      	uxtb	r2, r3
 8012144:	4b37      	ldr	r3, [pc, #220]	@ (8012224 <DHCP_init+0x110>)
 8012146:	78db      	ldrb	r3, [r3, #3]
 8012148:	4313      	orrs	r3, r2
 801214a:	b2da      	uxtb	r2, r3
 801214c:	4b35      	ldr	r3, [pc, #212]	@ (8012224 <DHCP_init+0x110>)
 801214e:	791b      	ldrb	r3, [r3, #4]
 8012150:	4313      	orrs	r3, r2
 8012152:	b2da      	uxtb	r2, r3
 8012154:	4b33      	ldr	r3, [pc, #204]	@ (8012224 <DHCP_init+0x110>)
 8012156:	795b      	ldrb	r3, [r3, #5]
 8012158:	4313      	orrs	r3, r2
 801215a:	b2db      	uxtb	r3, r3
 801215c:	2b00      	cmp	r3, #0
 801215e:	d117      	bne.n	8012190 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8012160:	4b30      	ldr	r3, [pc, #192]	@ (8012224 <DHCP_init+0x110>)
 8012162:	2200      	movs	r2, #0
 8012164:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8012166:	4b2f      	ldr	r3, [pc, #188]	@ (8012224 <DHCP_init+0x110>)
 8012168:	2208      	movs	r2, #8
 801216a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801216c:	4b2d      	ldr	r3, [pc, #180]	@ (8012224 <DHCP_init+0x110>)
 801216e:	22dc      	movs	r2, #220	@ 0xdc
 8012170:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8012172:	4b2c      	ldr	r3, [pc, #176]	@ (8012224 <DHCP_init+0x110>)
 8012174:	2200      	movs	r2, #0
 8012176:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8012178:	4b2a      	ldr	r3, [pc, #168]	@ (8012224 <DHCP_init+0x110>)
 801217a:	2200      	movs	r2, #0
 801217c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801217e:	4b29      	ldr	r3, [pc, #164]	@ (8012224 <DHCP_init+0x110>)
 8012180:	2200      	movs	r2, #0
 8012182:	715a      	strb	r2, [r3, #5]
      #if _WIZCHIP_ == W6100
      	NETUNLOCK();
      	setSHAR(DHCP_CHADDR);    
      	NETLOCK();
      #else
      	setSHAR(DHCP_CHADDR);
 8012184:	2206      	movs	r2, #6
 8012186:	4927      	ldr	r1, [pc, #156]	@ (8012224 <DHCP_init+0x110>)
 8012188:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801218c:	f7fd f87a 	bl	800f284 <WIZCHIP_WRITE_BUF>
      #endif     
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8012190:	4a25      	ldr	r2, [pc, #148]	@ (8012228 <DHCP_init+0x114>)
 8012192:	79fb      	ldrb	r3, [r7, #7]
 8012194:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8012196:	4a25      	ldr	r2, [pc, #148]	@ (801222c <DHCP_init+0x118>)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801219c:	4b24      	ldr	r3, [pc, #144]	@ (8012230 <DHCP_init+0x11c>)
 801219e:	4a25      	ldr	r2, [pc, #148]	@ (8012234 <DHCP_init+0x120>)
 80121a0:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80121a2:	4b20      	ldr	r3, [pc, #128]	@ (8012224 <DHCP_init+0x110>)
 80121a4:	78db      	ldrb	r3, [r3, #3]
 80121a6:	461a      	mov	r2, r3
 80121a8:	4b21      	ldr	r3, [pc, #132]	@ (8012230 <DHCP_init+0x11c>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4413      	add	r3, r2
 80121ae:	4a20      	ldr	r2, [pc, #128]	@ (8012230 <DHCP_init+0x11c>)
 80121b0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80121b2:	4b1c      	ldr	r3, [pc, #112]	@ (8012224 <DHCP_init+0x110>)
 80121b4:	791b      	ldrb	r3, [r3, #4]
 80121b6:	461a      	mov	r2, r3
 80121b8:	4b1d      	ldr	r3, [pc, #116]	@ (8012230 <DHCP_init+0x11c>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	4413      	add	r3, r2
 80121be:	4a1c      	ldr	r2, [pc, #112]	@ (8012230 <DHCP_init+0x11c>)
 80121c0:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80121c2:	4b18      	ldr	r3, [pc, #96]	@ (8012224 <DHCP_init+0x110>)
 80121c4:	795b      	ldrb	r3, [r3, #5]
 80121c6:	461a      	mov	r2, r3
 80121c8:	4b19      	ldr	r3, [pc, #100]	@ (8012230 <DHCP_init+0x11c>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4413      	add	r3, r2
 80121ce:	4a18      	ldr	r2, [pc, #96]	@ (8012230 <DHCP_init+0x11c>)
 80121d0:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80121d2:	4b14      	ldr	r3, [pc, #80]	@ (8012224 <DHCP_init+0x110>)
 80121d4:	78da      	ldrb	r2, [r3, #3]
 80121d6:	4b13      	ldr	r3, [pc, #76]	@ (8012224 <DHCP_init+0x110>)
 80121d8:	791b      	ldrb	r3, [r3, #4]
 80121da:	4053      	eors	r3, r2
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	4b11      	ldr	r3, [pc, #68]	@ (8012224 <DHCP_init+0x110>)
 80121e0:	795b      	ldrb	r3, [r3, #5]
 80121e2:	4053      	eors	r3, r2
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	461a      	mov	r2, r3
 80121e8:	4b11      	ldr	r3, [pc, #68]	@ (8012230 <DHCP_init+0x11c>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4413      	add	r3, r2
 80121ee:	4a10      	ldr	r2, [pc, #64]	@ (8012230 <DHCP_init+0x11c>)
 80121f0:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80121f2:	f107 030c 	add.w	r3, r7, #12
 80121f6:	2204      	movs	r2, #4
 80121f8:	4619      	mov	r1, r3
 80121fa:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80121fe:	f7fd f841 	bl	800f284 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8012202:	f107 030c 	add.w	r3, r7, #12
 8012206:	2204      	movs	r2, #4
 8012208:	4619      	mov	r1, r3
 801220a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801220e:	f7fd f839 	bl	800f284 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8012212:	f000 f813 	bl	801223c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8012216:	4b08      	ldr	r3, [pc, #32]	@ (8012238 <DHCP_init+0x124>)
 8012218:	2200      	movs	r2, #0
 801221a:	701a      	strb	r2, [r3, #0]
}
 801221c:	bf00      	nop
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	20000b10 	.word	0x20000b10
 8012228:	20000ae1 	.word	0x20000ae1
 801222c:	20000b0c 	.word	0x20000b0c
 8012230:	20000b08 	.word	0x20000b08
 8012234:	12345678 	.word	0x12345678
 8012238:	20000b00 	.word	0x20000b00

0801223c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801223c:	b480      	push	{r7}
 801223e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8012240:	4b06      	ldr	r3, [pc, #24]	@ (801225c <reset_DHCP_timeout+0x20>)
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8012246:	4b06      	ldr	r3, [pc, #24]	@ (8012260 <reset_DHCP_timeout+0x24>)
 8012248:	220a      	movs	r2, #10
 801224a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801224c:	4b05      	ldr	r3, [pc, #20]	@ (8012264 <reset_DHCP_timeout+0x28>)
 801224e:	2200      	movs	r2, #0
 8012250:	701a      	strb	r2, [r3, #0]
}
 8012252:	bf00      	nop
 8012254:	46bd      	mov	sp, r7
 8012256:	bc80      	pop	{r7}
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	20000b04 	.word	0x20000b04
 8012260:	20000054 	.word	0x20000054
 8012264:	20000b01 	.word	0x20000b01

08012268 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8012270:	4b0b      	ldr	r3, [pc, #44]	@ (80122a0 <getIPfromDHCP+0x38>)
 8012272:	781a      	ldrb	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	3301      	adds	r3, #1
 801227c:	4a08      	ldr	r2, [pc, #32]	@ (80122a0 <getIPfromDHCP+0x38>)
 801227e:	7852      	ldrb	r2, [r2, #1]
 8012280:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	3302      	adds	r3, #2
 8012286:	4a06      	ldr	r2, [pc, #24]	@ (80122a0 <getIPfromDHCP+0x38>)
 8012288:	7892      	ldrb	r2, [r2, #2]
 801228a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	3303      	adds	r3, #3
 8012290:	4a03      	ldr	r2, [pc, #12]	@ (80122a0 <getIPfromDHCP+0x38>)
 8012292:	78d2      	ldrb	r2, [r2, #3]
 8012294:	701a      	strb	r2, [r3, #0]
}
 8012296:	bf00      	nop
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	bc80      	pop	{r7}
 801229e:	4770      	bx	lr
 80122a0:	20000af0 	.word	0x20000af0

080122a4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80122ac:	4b0b      	ldr	r3, [pc, #44]	@ (80122dc <getGWfromDHCP+0x38>)
 80122ae:	781a      	ldrb	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	3301      	adds	r3, #1
 80122b8:	4a08      	ldr	r2, [pc, #32]	@ (80122dc <getGWfromDHCP+0x38>)
 80122ba:	7852      	ldrb	r2, [r2, #1]
 80122bc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	3302      	adds	r3, #2
 80122c2:	4a06      	ldr	r2, [pc, #24]	@ (80122dc <getGWfromDHCP+0x38>)
 80122c4:	7892      	ldrb	r2, [r2, #2]
 80122c6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	3303      	adds	r3, #3
 80122cc:	4a03      	ldr	r2, [pc, #12]	@ (80122dc <getGWfromDHCP+0x38>)
 80122ce:	78d2      	ldrb	r2, [r2, #3]
 80122d0:	701a      	strb	r2, [r3, #0]
}
 80122d2:	bf00      	nop
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bc80      	pop	{r7}
 80122da:	4770      	bx	lr
 80122dc:	20000af4 	.word	0x20000af4

080122e0 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80122e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012318 <getSNfromDHCP+0x38>)
 80122ea:	781a      	ldrb	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	3301      	adds	r3, #1
 80122f4:	4a08      	ldr	r2, [pc, #32]	@ (8012318 <getSNfromDHCP+0x38>)
 80122f6:	7852      	ldrb	r2, [r2, #1]
 80122f8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	3302      	adds	r3, #2
 80122fe:	4a06      	ldr	r2, [pc, #24]	@ (8012318 <getSNfromDHCP+0x38>)
 8012300:	7892      	ldrb	r2, [r2, #2]
 8012302:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3303      	adds	r3, #3
 8012308:	4a03      	ldr	r2, [pc, #12]	@ (8012318 <getSNfromDHCP+0x38>)
 801230a:	78d2      	ldrb	r2, [r2, #3]
 801230c:	701a      	strb	r2, [r3, #0]
}
 801230e:	bf00      	nop
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	bc80      	pop	{r7}
 8012316:	4770      	bx	lr
 8012318:	20000af8 	.word	0x20000af8

0801231c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	4603      	mov	r3, r0
 8012324:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8012326:	79fb      	ldrb	r3, [r7, #7]
 8012328:	f003 030f 	and.w	r3, r3, #15
 801232c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801232e:	79fb      	ldrb	r3, [r7, #7]
 8012330:	2b09      	cmp	r3, #9
 8012332:	d803      	bhi.n	801233c <NibbleToHex+0x20>
    return nibble + '0';
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	3330      	adds	r3, #48	@ 0x30
 8012338:	b2db      	uxtb	r3, r3
 801233a:	e002      	b.n	8012342 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801233c:	79fb      	ldrb	r3, [r7, #7]
 801233e:	3337      	adds	r3, #55	@ 0x37
 8012340:	b2db      	uxtb	r3, r3
}
 8012342:	4618      	mov	r0, r3
 8012344:	370c      	adds	r7, #12
 8012346:	46bd      	mov	sp, r7
 8012348:	bc80      	pop	{r7}
 801234a:	4770      	bx	lr

0801234c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	460b      	mov	r3, r1
 8012356:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8012358:	2300      	movs	r3, #0
 801235a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	7c1b      	ldrb	r3, [r3, #16]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d115      	bne.n	8012390 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012368:	2202      	movs	r2, #2
 801236a:	2181      	movs	r1, #129	@ 0x81
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f001 ffbc 	bl	80142ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2201      	movs	r2, #1
 8012376:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801237c:	2202      	movs	r2, #2
 801237e:	2101      	movs	r1, #1
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f001 ffb2 	bl	80142ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2201      	movs	r2, #1
 801238a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 801238e:	e012      	b.n	80123b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012390:	2340      	movs	r3, #64	@ 0x40
 8012392:	2202      	movs	r2, #2
 8012394:	2181      	movs	r1, #129	@ 0x81
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f001 ffa7 	bl	80142ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2201      	movs	r2, #1
 80123a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80123a2:	2340      	movs	r3, #64	@ 0x40
 80123a4:	2202      	movs	r2, #2
 80123a6:	2101      	movs	r1, #1
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f001 ff9e 	bl	80142ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2201      	movs	r2, #1
 80123b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80123b6:	2308      	movs	r3, #8
 80123b8:	2203      	movs	r2, #3
 80123ba:	2182      	movs	r1, #130	@ 0x82
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f001 ff94 	bl	80142ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2201      	movs	r2, #1
 80123c6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80123c8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80123cc:	f002 f8b4 	bl	8014538 <USBD_static_malloc>
 80123d0:	4602      	mov	r2, r0
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d102      	bne.n	80123e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80123e2:	2301      	movs	r3, #1
 80123e4:	73fb      	strb	r3, [r7, #15]
 80123e6:	e026      	b.n	8012436 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2200      	movs	r2, #0
 8012406:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	7c1b      	ldrb	r3, [r3, #16]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d109      	bne.n	8012426 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801241c:	2101      	movs	r1, #1
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f002 f853 	bl	80144ca <USBD_LL_PrepareReceive>
 8012424:	e007      	b.n	8012436 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801242c:	2340      	movs	r3, #64	@ 0x40
 801242e:	2101      	movs	r1, #1
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f002 f84a 	bl	80144ca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8012436:	7bfb      	ldrb	r3, [r7, #15]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801244c:	2300      	movs	r3, #0
 801244e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012450:	2181      	movs	r1, #129	@ 0x81
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f001 ff6f 	bl	8014336 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801245e:	2101      	movs	r1, #1
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f001 ff68 	bl	8014336 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801246e:	2182      	movs	r1, #130	@ 0x82
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f001 ff60 	bl	8014336 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00e      	beq.n	80124a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012496:	4618      	mov	r0, r3
 8012498:	f002 f85a 	bl	8014550 <USBD_static_free>
    pdev->pClassData = NULL;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b086      	sub	sp, #24
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80124c0:	2300      	movs	r3, #0
 80124c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80124c4:	2300      	movs	r3, #0
 80124c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d039      	beq.n	801254c <USBD_CDC_Setup+0x9e>
 80124d8:	2b20      	cmp	r3, #32
 80124da:	d17f      	bne.n	80125dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	88db      	ldrh	r3, [r3, #6]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d029      	beq.n	8012538 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	b25b      	sxtb	r3, r3
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	da11      	bge.n	8012512 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80124fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	88d2      	ldrh	r2, [r2, #6]
 8012500:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8012502:	6939      	ldr	r1, [r7, #16]
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	88db      	ldrh	r3, [r3, #6]
 8012508:	461a      	mov	r2, r3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f001 fa06 	bl	801391c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8012510:	e06b      	b.n	80125ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	785a      	ldrb	r2, [r3, #1]
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	88db      	ldrh	r3, [r3, #6]
 8012520:	b2da      	uxtb	r2, r3
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8012528:	6939      	ldr	r1, [r7, #16]
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	88db      	ldrh	r3, [r3, #6]
 801252e:	461a      	mov	r2, r3
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f001 fa21 	bl	8013978 <USBD_CtlPrepareRx>
      break;
 8012536:	e058      	b.n	80125ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801253e:	689b      	ldr	r3, [r3, #8]
 8012540:	683a      	ldr	r2, [r7, #0]
 8012542:	7850      	ldrb	r0, [r2, #1]
 8012544:	2200      	movs	r2, #0
 8012546:	6839      	ldr	r1, [r7, #0]
 8012548:	4798      	blx	r3
      break;
 801254a:	e04e      	b.n	80125ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	785b      	ldrb	r3, [r3, #1]
 8012550:	2b0b      	cmp	r3, #11
 8012552:	d02e      	beq.n	80125b2 <USBD_CDC_Setup+0x104>
 8012554:	2b0b      	cmp	r3, #11
 8012556:	dc38      	bgt.n	80125ca <USBD_CDC_Setup+0x11c>
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <USBD_CDC_Setup+0xb4>
 801255c:	2b0a      	cmp	r3, #10
 801255e:	d014      	beq.n	801258a <USBD_CDC_Setup+0xdc>
 8012560:	e033      	b.n	80125ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012568:	2b03      	cmp	r3, #3
 801256a:	d107      	bne.n	801257c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801256c:	f107 030c 	add.w	r3, r7, #12
 8012570:	2202      	movs	r2, #2
 8012572:	4619      	mov	r1, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f001 f9d1 	bl	801391c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801257a:	e02e      	b.n	80125da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f001 f962 	bl	8013848 <USBD_CtlError>
            ret = USBD_FAIL;
 8012584:	2302      	movs	r3, #2
 8012586:	75fb      	strb	r3, [r7, #23]
          break;
 8012588:	e027      	b.n	80125da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012590:	2b03      	cmp	r3, #3
 8012592:	d107      	bne.n	80125a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8012594:	f107 030f 	add.w	r3, r7, #15
 8012598:	2201      	movs	r2, #1
 801259a:	4619      	mov	r1, r3
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f001 f9bd 	bl	801391c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80125a2:	e01a      	b.n	80125da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f001 f94e 	bl	8013848 <USBD_CtlError>
            ret = USBD_FAIL;
 80125ac:	2302      	movs	r3, #2
 80125ae:	75fb      	strb	r3, [r7, #23]
          break;
 80125b0:	e013      	b.n	80125da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d00d      	beq.n	80125d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80125bc:	6839      	ldr	r1, [r7, #0]
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f001 f942 	bl	8013848 <USBD_CtlError>
            ret = USBD_FAIL;
 80125c4:	2302      	movs	r3, #2
 80125c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80125c8:	e006      	b.n	80125d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f001 f93b 	bl	8013848 <USBD_CtlError>
          ret = USBD_FAIL;
 80125d2:	2302      	movs	r3, #2
 80125d4:	75fb      	strb	r3, [r7, #23]
          break;
 80125d6:	e000      	b.n	80125da <USBD_CDC_Setup+0x12c>
          break;
 80125d8:	bf00      	nop
      }
      break;
 80125da:	e006      	b.n	80125ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80125dc:	6839      	ldr	r1, [r7, #0]
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f001 f932 	bl	8013848 <USBD_CtlError>
      ret = USBD_FAIL;
 80125e4:	2302      	movs	r3, #2
 80125e6:	75fb      	strb	r3, [r7, #23]
      break;
 80125e8:	bf00      	nop
  }

  return ret;
 80125ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3718      	adds	r7, #24
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	460b      	mov	r3, r1
 80125fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012606:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801260e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012616:	2b00      	cmp	r3, #0
 8012618:	d03a      	beq.n	8012690 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801261a:	78fa      	ldrb	r2, [r7, #3]
 801261c:	6879      	ldr	r1, [r7, #4]
 801261e:	4613      	mov	r3, r2
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	4413      	add	r3, r2
 8012624:	009b      	lsls	r3, r3, #2
 8012626:	440b      	add	r3, r1
 8012628:	331c      	adds	r3, #28
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d029      	beq.n	8012684 <USBD_CDC_DataIn+0x90>
 8012630:	78fa      	ldrb	r2, [r7, #3]
 8012632:	6879      	ldr	r1, [r7, #4]
 8012634:	4613      	mov	r3, r2
 8012636:	009b      	lsls	r3, r3, #2
 8012638:	4413      	add	r3, r2
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	440b      	add	r3, r1
 801263e:	331c      	adds	r3, #28
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	78f9      	ldrb	r1, [r7, #3]
 8012644:	68b8      	ldr	r0, [r7, #8]
 8012646:	460b      	mov	r3, r1
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	440b      	add	r3, r1
 801264c:	00db      	lsls	r3, r3, #3
 801264e:	4403      	add	r3, r0
 8012650:	3320      	adds	r3, #32
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	fbb2 f1f3 	udiv	r1, r2, r3
 8012658:	fb01 f303 	mul.w	r3, r1, r3
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	2b00      	cmp	r3, #0
 8012660:	d110      	bne.n	8012684 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8012662:	78fa      	ldrb	r2, [r7, #3]
 8012664:	6879      	ldr	r1, [r7, #4]
 8012666:	4613      	mov	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	440b      	add	r3, r1
 8012670:	331c      	adds	r3, #28
 8012672:	2200      	movs	r2, #0
 8012674:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012676:	78f9      	ldrb	r1, [r7, #3]
 8012678:	2300      	movs	r3, #0
 801267a:	2200      	movs	r2, #0
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f001 ff01 	bl	8014484 <USBD_LL_Transmit>
 8012682:	e003      	b.n	801268c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 801268c:	2300      	movs	r3, #0
 801268e:	e000      	b.n	8012692 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8012690:	2302      	movs	r3, #2
  }
}
 8012692:	4618      	mov	r0, r3
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}

0801269a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b084      	sub	sp, #16
 801269e:	af00      	add	r7, sp, #0
 80126a0:	6078      	str	r0, [r7, #4]
 80126a2:	460b      	mov	r3, r1
 80126a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80126ae:	78fb      	ldrb	r3, [r7, #3]
 80126b0:	4619      	mov	r1, r3
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f001 ff2c 	bl	8014510 <USBD_LL_GetRxDataSize>
 80126b8:	4602      	mov	r2, r0
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d00d      	beq.n	80126e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	68fa      	ldr	r2, [r7, #12]
 80126d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80126de:	4611      	mov	r1, r2
 80126e0:	4798      	blx	r3

    return USBD_OK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	e000      	b.n	80126e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80126e6:	2302      	movs	r3, #2
  }
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3710      	adds	r7, #16
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012706:	2b00      	cmp	r3, #0
 8012708:	d014      	beq.n	8012734 <USBD_CDC_EP0_RxReady+0x44>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012710:	2bff      	cmp	r3, #255	@ 0xff
 8012712:	d00f      	beq.n	8012734 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801271a:	689b      	ldr	r3, [r3, #8]
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8012722:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801272a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	22ff      	movs	r2, #255	@ 0xff
 8012730:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8012734:	2300      	movs	r3, #0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3710      	adds	r7, #16
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2243      	movs	r2, #67	@ 0x43
 801274c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801274e:	4b03      	ldr	r3, [pc, #12]	@ (801275c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012750:	4618      	mov	r0, r3
 8012752:	370c      	adds	r7, #12
 8012754:	46bd      	mov	sp, r7
 8012756:	bc80      	pop	{r7}
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	200000f4 	.word	0x200000f4

08012760 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2243      	movs	r2, #67	@ 0x43
 801276c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801276e:	4b03      	ldr	r3, [pc, #12]	@ (801277c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	bc80      	pop	{r7}
 8012778:	4770      	bx	lr
 801277a:	bf00      	nop
 801277c:	200000b0 	.word	0x200000b0

08012780 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2243      	movs	r2, #67	@ 0x43
 801278c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801278e:	4b03      	ldr	r3, [pc, #12]	@ (801279c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012790:	4618      	mov	r0, r3
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	bc80      	pop	{r7}
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	20000138 	.word	0x20000138

080127a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	220a      	movs	r2, #10
 80127ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80127ae:	4b03      	ldr	r3, [pc, #12]	@ (80127bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bc80      	pop	{r7}
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	2000006c 	.word	0x2000006c

080127c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80127ca:	2302      	movs	r3, #2
 80127cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d005      	beq.n	80127e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	683a      	ldr	r2, [r7, #0]
 80127d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80127dc:	2300      	movs	r3, #0
 80127de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80127e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bc80      	pop	{r7}
 80127ea:	4770      	bx	lr

080127ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b087      	sub	sp, #28
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	4613      	mov	r3, r2
 80127f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012800:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801280a:	88fa      	ldrh	r2, [r7, #6]
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8012812:	2300      	movs	r3, #0
}
 8012814:	4618      	mov	r0, r3
 8012816:	371c      	adds	r7, #28
 8012818:	46bd      	mov	sp, r7
 801281a:	bc80      	pop	{r7}
 801281c:	4770      	bx	lr

0801281e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801281e:	b480      	push	{r7}
 8012820:	b085      	sub	sp, #20
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
 8012826:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801282e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	683a      	ldr	r2, [r7, #0]
 8012834:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	3714      	adds	r7, #20
 801283e:	46bd      	mov	sp, r7
 8012840:	bc80      	pop	{r7}
 8012842:	4770      	bx	lr

08012844 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012852:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801285a:	2b00      	cmp	r3, #0
 801285c:	d01c      	beq.n	8012898 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012864:	2b00      	cmp	r3, #0
 8012866:	d115      	bne.n	8012894 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2201      	movs	r2, #1
 801286c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8012886:	b29b      	uxth	r3, r3
 8012888:	2181      	movs	r1, #129	@ 0x81
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f001 fdfa 	bl	8014484 <USBD_LL_Transmit>

      return USBD_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	e002      	b.n	801289a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8012894:	2301      	movs	r3, #1
 8012896:	e000      	b.n	801289a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8012898:	2302      	movs	r3, #2
  }
}
 801289a:	4618      	mov	r0, r3
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b084      	sub	sp, #16
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d017      	beq.n	80128ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	7c1b      	ldrb	r3, [r3, #16]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d109      	bne.n	80128d8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80128ce:	2101      	movs	r1, #1
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f001 fdfa 	bl	80144ca <USBD_LL_PrepareReceive>
 80128d6:	e007      	b.n	80128e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80128de:	2340      	movs	r3, #64	@ 0x40
 80128e0:	2101      	movs	r1, #1
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f001 fdf1 	bl	80144ca <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e000      	b.n	80128ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80128ec:	2302      	movs	r3, #2
  }
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b084      	sub	sp, #16
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	60f8      	str	r0, [r7, #12]
 80128fe:	60b9      	str	r1, [r7, #8]
 8012900:	4613      	mov	r3, r2
 8012902:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801290a:	2302      	movs	r3, #2
 801290c:	e01a      	b.n	8012944 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012914:	2b00      	cmp	r3, #0
 8012916:	d003      	beq.n	8012920 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2200      	movs	r2, #0
 801291c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d003      	beq.n	801292e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	68ba      	ldr	r2, [r7, #8]
 801292a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2201      	movs	r2, #1
 8012932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	79fa      	ldrb	r2, [r7, #7]
 801293a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f001 fc5f 	bl	8014200 <USBD_LL_Init>

  return USBD_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801294c:	b480      	push	{r7}
 801294e:	b085      	sub	sp, #20
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8012956:	2300      	movs	r3, #0
 8012958:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d006      	beq.n	801296e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	683a      	ldr	r2, [r7, #0]
 8012964:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8012968:	2300      	movs	r3, #0
 801296a:	73fb      	strb	r3, [r7, #15]
 801296c:	e001      	b.n	8012972 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801296e:	2302      	movs	r3, #2
 8012970:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012972:	7bfb      	ldrb	r3, [r7, #15]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3714      	adds	r7, #20
 8012978:	46bd      	mov	sp, r7
 801297a:	bc80      	pop	{r7}
 801297c:	4770      	bx	lr

0801297e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801297e:	b580      	push	{r7, lr}
 8012980:	b082      	sub	sp, #8
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f001 fc94 	bl	80142b4 <USBD_LL_Start>

  return USBD_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012996:	b480      	push	{r7}
 8012998:	b083      	sub	sp, #12
 801299a:	af00      	add	r7, sp, #0
 801299c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bc80      	pop	{r7}
 80129a8:	4770      	bx	lr

080129aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b084      	sub	sp, #16
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	460b      	mov	r3, r1
 80129b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80129b6:	2302      	movs	r3, #2
 80129b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00c      	beq.n	80129de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	78fa      	ldrb	r2, [r7, #3]
 80129ce:	4611      	mov	r1, r2
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	4798      	blx	r3
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80129de:	7bfb      	ldrb	r3, [r7, #15]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	460b      	mov	r3, r1
 80129f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	78fa      	ldrb	r2, [r7, #3]
 80129fe:	4611      	mov	r1, r2
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	4798      	blx	r3

  return USBD_OK;
 8012a04:	2300      	movs	r3, #0
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b082      	sub	sp, #8
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f000 fed8 	bl	80137d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012a34:	461a      	mov	r2, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8012a42:	f003 031f 	and.w	r3, r3, #31
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	d016      	beq.n	8012a78 <USBD_LL_SetupStage+0x6a>
 8012a4a:	2b02      	cmp	r3, #2
 8012a4c:	d81c      	bhi.n	8012a88 <USBD_LL_SetupStage+0x7a>
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d002      	beq.n	8012a58 <USBD_LL_SetupStage+0x4a>
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d008      	beq.n	8012a68 <USBD_LL_SetupStage+0x5a>
 8012a56:	e017      	b.n	8012a88 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8012a5e:	4619      	mov	r1, r3
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 f9cb 	bl	8012dfc <USBD_StdDevReq>
      break;
 8012a66:	e01a      	b.n	8012a9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8012a6e:	4619      	mov	r1, r3
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 fa2d 	bl	8012ed0 <USBD_StdItfReq>
      break;
 8012a76:	e012      	b.n	8012a9e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8012a7e:	4619      	mov	r1, r3
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 fa6d 	bl	8012f60 <USBD_StdEPReq>
      break;
 8012a86:	e00a      	b.n	8012a9e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8012a8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	4619      	mov	r1, r3
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f001 fc6c 	bl	8014374 <USBD_LL_StallEP>
      break;
 8012a9c:	bf00      	nop
  }

  return USBD_OK;
 8012a9e:	2300      	movs	r3, #0
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	607a      	str	r2, [r7, #4]
 8012ab4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012ab6:	7afb      	ldrb	r3, [r7, #11]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d14b      	bne.n	8012b54 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012ac2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012aca:	2b03      	cmp	r3, #3
 8012acc:	d134      	bne.n	8012b38 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	691b      	ldr	r3, [r3, #16]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d919      	bls.n	8012b0e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	68da      	ldr	r2, [r3, #12]
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	1ad2      	subs	r2, r2, r3
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	68da      	ldr	r2, [r3, #12]
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d203      	bcs.n	8012afc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	e002      	b.n	8012b02 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	461a      	mov	r2, r3
 8012b04:	6879      	ldr	r1, [r7, #4]
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f000 ff54 	bl	80139b4 <USBD_CtlContinueRx>
 8012b0c:	e038      	b.n	8012b80 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d00a      	beq.n	8012b30 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012b20:	2b03      	cmp	r3, #3
 8012b22:	d105      	bne.n	8012b30 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b2a:	691b      	ldr	r3, [r3, #16]
 8012b2c:	68f8      	ldr	r0, [r7, #12]
 8012b2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012b30:	68f8      	ldr	r0, [r7, #12]
 8012b32:	f000 ff51 	bl	80139d8 <USBD_CtlSendStatus>
 8012b36:	e023      	b.n	8012b80 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b3e:	2b05      	cmp	r3, #5
 8012b40:	d11e      	bne.n	8012b80 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2200      	movs	r2, #0
 8012b46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	68f8      	ldr	r0, [r7, #12]
 8012b4e:	f001 fc11 	bl	8014374 <USBD_LL_StallEP>
 8012b52:	e015      	b.n	8012b80 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00d      	beq.n	8012b7c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8012b66:	2b03      	cmp	r3, #3
 8012b68:	d108      	bne.n	8012b7c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b70:	699b      	ldr	r3, [r3, #24]
 8012b72:	7afa      	ldrb	r2, [r7, #11]
 8012b74:	4611      	mov	r1, r2
 8012b76:	68f8      	ldr	r0, [r7, #12]
 8012b78:	4798      	blx	r3
 8012b7a:	e001      	b.n	8012b80 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	e000      	b.n	8012b82 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012b80:	2300      	movs	r3, #0
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3718      	adds	r7, #24
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b086      	sub	sp, #24
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	60f8      	str	r0, [r7, #12]
 8012b92:	460b      	mov	r3, r1
 8012b94:	607a      	str	r2, [r7, #4]
 8012b96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012b98:	7afb      	ldrb	r3, [r7, #11]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d17f      	bne.n	8012c9e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	3314      	adds	r3, #20
 8012ba2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d15c      	bne.n	8012c68 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	68da      	ldr	r2, [r3, #12]
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d915      	bls.n	8012be6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	68da      	ldr	r2, [r3, #12]
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	1ad2      	subs	r2, r2, r3
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	461a      	mov	r2, r3
 8012bd0:	6879      	ldr	r1, [r7, #4]
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f000 febe 	bl	8013954 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012bd8:	2300      	movs	r3, #0
 8012bda:	2200      	movs	r2, #0
 8012bdc:	2100      	movs	r1, #0
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f001 fc73 	bl	80144ca <USBD_LL_PrepareReceive>
 8012be4:	e04e      	b.n	8012c84 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	689b      	ldr	r3, [r3, #8]
 8012bea:	697a      	ldr	r2, [r7, #20]
 8012bec:	6912      	ldr	r2, [r2, #16]
 8012bee:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bf2:	fb01 f202 	mul.w	r2, r1, r2
 8012bf6:	1a9b      	subs	r3, r3, r2
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d11c      	bne.n	8012c36 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	689a      	ldr	r2, [r3, #8]
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d316      	bcc.n	8012c36 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	689a      	ldr	r2, [r3, #8]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d20f      	bcs.n	8012c36 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012c16:	2200      	movs	r2, #0
 8012c18:	2100      	movs	r1, #0
 8012c1a:	68f8      	ldr	r0, [r7, #12]
 8012c1c:	f000 fe9a 	bl	8013954 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2200      	movs	r2, #0
 8012c24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c28:	2300      	movs	r3, #0
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	68f8      	ldr	r0, [r7, #12]
 8012c30:	f001 fc4b 	bl	80144ca <USBD_LL_PrepareReceive>
 8012c34:	e026      	b.n	8012c84 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d00a      	beq.n	8012c58 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012c48:	2b03      	cmp	r3, #3
 8012c4a:	d105      	bne.n	8012c58 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012c58:	2180      	movs	r1, #128	@ 0x80
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	f001 fb8a 	bl	8014374 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f000 fecc 	bl	80139fe <USBD_CtlReceiveStatus>
 8012c66:	e00d      	b.n	8012c84 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012c6e:	2b04      	cmp	r3, #4
 8012c70:	d004      	beq.n	8012c7c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d103      	bne.n	8012c84 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012c7c:	2180      	movs	r1, #128	@ 0x80
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f001 fb78 	bl	8014374 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d11d      	bne.n	8012cca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f7ff fe81 	bl	8012996 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2200      	movs	r2, #0
 8012c98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012c9c:	e015      	b.n	8012cca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ca4:	695b      	ldr	r3, [r3, #20]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00d      	beq.n	8012cc6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012cb0:	2b03      	cmp	r3, #3
 8012cb2:	d108      	bne.n	8012cc6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	7afa      	ldrb	r2, [r7, #11]
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	4798      	blx	r3
 8012cc4:	e001      	b.n	8012cca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012cc6:	2302      	movs	r3, #2
 8012cc8:	e000      	b.n	8012ccc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3718      	adds	r7, #24
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012cdc:	2340      	movs	r3, #64	@ 0x40
 8012cde:	2200      	movs	r2, #0
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f001 fb01 	bl	80142ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2240      	movs	r2, #64	@ 0x40
 8012cf4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012cf8:	2340      	movs	r3, #64	@ 0x40
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	2180      	movs	r1, #128	@ 0x80
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f001 faf3 	bl	80142ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2240      	movs	r2, #64	@ 0x40
 8012d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d009      	beq.n	8012d4c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	6852      	ldr	r2, [r2, #4]
 8012d44:	b2d2      	uxtb	r2, r2
 8012d46:	4611      	mov	r1, r2
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	4798      	blx	r3
  }

  return USBD_OK;
 8012d4c:	2300      	movs	r3, #0
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}

08012d56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012d56:	b480      	push	{r7}
 8012d58:	b083      	sub	sp, #12
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	6078      	str	r0, [r7, #4]
 8012d5e:	460b      	mov	r3, r1
 8012d60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	78fa      	ldrb	r2, [r7, #3]
 8012d66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	370c      	adds	r7, #12
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bc80      	pop	{r7}
 8012d72:	4770      	bx	lr

08012d74 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2204      	movs	r2, #4
 8012d8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bc80      	pop	{r7}
 8012d9a:	4770      	bx	lr

08012d9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012daa:	2b04      	cmp	r3, #4
 8012dac:	d105      	bne.n	8012dba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	370c      	adds	r7, #12
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bc80      	pop	{r7}
 8012dc4:	4770      	bx	lr

08012dc6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b082      	sub	sp, #8
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dd4:	2b03      	cmp	r3, #3
 8012dd6:	d10b      	bne.n	8012df0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012dde:	69db      	ldr	r3, [r3, #28]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d005      	beq.n	8012df0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012dea:	69db      	ldr	r3, [r3, #28]
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
	...

08012dfc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e06:	2300      	movs	r3, #0
 8012e08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e12:	2b40      	cmp	r3, #64	@ 0x40
 8012e14:	d005      	beq.n	8012e22 <USBD_StdDevReq+0x26>
 8012e16:	2b40      	cmp	r3, #64	@ 0x40
 8012e18:	d84f      	bhi.n	8012eba <USBD_StdDevReq+0xbe>
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d009      	beq.n	8012e32 <USBD_StdDevReq+0x36>
 8012e1e:	2b20      	cmp	r3, #32
 8012e20:	d14b      	bne.n	8012eba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	6839      	ldr	r1, [r7, #0]
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	4798      	blx	r3
      break;
 8012e30:	e048      	b.n	8012ec4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	785b      	ldrb	r3, [r3, #1]
 8012e36:	2b09      	cmp	r3, #9
 8012e38:	d839      	bhi.n	8012eae <USBD_StdDevReq+0xb2>
 8012e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e40 <USBD_StdDevReq+0x44>)
 8012e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e40:	08012e91 	.word	0x08012e91
 8012e44:	08012ea5 	.word	0x08012ea5
 8012e48:	08012eaf 	.word	0x08012eaf
 8012e4c:	08012e9b 	.word	0x08012e9b
 8012e50:	08012eaf 	.word	0x08012eaf
 8012e54:	08012e73 	.word	0x08012e73
 8012e58:	08012e69 	.word	0x08012e69
 8012e5c:	08012eaf 	.word	0x08012eaf
 8012e60:	08012e87 	.word	0x08012e87
 8012e64:	08012e7d 	.word	0x08012e7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 f9dc 	bl	8013228 <USBD_GetDescriptor>
          break;
 8012e70:	e022      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012e72:	6839      	ldr	r1, [r7, #0]
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f000 fb3f 	bl	80134f8 <USBD_SetAddress>
          break;
 8012e7a:	e01d      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012e7c:	6839      	ldr	r1, [r7, #0]
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 fb7e 	bl	8013580 <USBD_SetConfig>
          break;
 8012e84:	e018      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fc07 	bl	801369c <USBD_GetConfig>
          break;
 8012e8e:	e013      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012e90:	6839      	ldr	r1, [r7, #0]
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f000 fc37 	bl	8013706 <USBD_GetStatus>
          break;
 8012e98:	e00e      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012e9a:	6839      	ldr	r1, [r7, #0]
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 fc65 	bl	801376c <USBD_SetFeature>
          break;
 8012ea2:	e009      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012ea4:	6839      	ldr	r1, [r7, #0]
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 fc74 	bl	8013794 <USBD_ClrFeature>
          break;
 8012eac:	e004      	b.n	8012eb8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012eae:	6839      	ldr	r1, [r7, #0]
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f000 fcc9 	bl	8013848 <USBD_CtlError>
          break;
 8012eb6:	bf00      	nop
      }
      break;
 8012eb8:	e004      	b.n	8012ec4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f000 fcc3 	bl	8013848 <USBD_CtlError>
      break;
 8012ec2:	bf00      	nop
  }

  return ret;
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3710      	adds	r7, #16
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop

08012ed0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012eda:	2300      	movs	r3, #0
 8012edc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012ee6:	2b40      	cmp	r3, #64	@ 0x40
 8012ee8:	d005      	beq.n	8012ef6 <USBD_StdItfReq+0x26>
 8012eea:	2b40      	cmp	r3, #64	@ 0x40
 8012eec:	d82e      	bhi.n	8012f4c <USBD_StdItfReq+0x7c>
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <USBD_StdItfReq+0x26>
 8012ef2:	2b20      	cmp	r3, #32
 8012ef4:	d12a      	bne.n	8012f4c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012efc:	3b01      	subs	r3, #1
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	d81d      	bhi.n	8012f3e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	889b      	ldrh	r3, [r3, #4]
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d813      	bhi.n	8012f34 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	6839      	ldr	r1, [r7, #0]
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	4798      	blx	r3
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	88db      	ldrh	r3, [r3, #6]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d110      	bne.n	8012f48 <USBD_StdItfReq+0x78>
 8012f26:	7bfb      	ldrb	r3, [r7, #15]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10d      	bne.n	8012f48 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 fd53 	bl	80139d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012f32:	e009      	b.n	8012f48 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012f34:	6839      	ldr	r1, [r7, #0]
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f000 fc86 	bl	8013848 <USBD_CtlError>
          break;
 8012f3c:	e004      	b.n	8012f48 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012f3e:	6839      	ldr	r1, [r7, #0]
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 fc81 	bl	8013848 <USBD_CtlError>
          break;
 8012f46:	e000      	b.n	8012f4a <USBD_StdItfReq+0x7a>
          break;
 8012f48:	bf00      	nop
      }
      break;
 8012f4a:	e004      	b.n	8012f56 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 fc7a 	bl	8013848 <USBD_CtlError>
      break;
 8012f54:	bf00      	nop
  }

  return USBD_OK;
 8012f56:	2300      	movs	r3, #0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b084      	sub	sp, #16
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	889b      	ldrh	r3, [r3, #4]
 8012f72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012f7c:	2b40      	cmp	r3, #64	@ 0x40
 8012f7e:	d007      	beq.n	8012f90 <USBD_StdEPReq+0x30>
 8012f80:	2b40      	cmp	r3, #64	@ 0x40
 8012f82:	f200 8146 	bhi.w	8013212 <USBD_StdEPReq+0x2b2>
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d00a      	beq.n	8012fa0 <USBD_StdEPReq+0x40>
 8012f8a:	2b20      	cmp	r3, #32
 8012f8c:	f040 8141 	bne.w	8013212 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	6839      	ldr	r1, [r7, #0]
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	4798      	blx	r3
      break;
 8012f9e:	e13d      	b.n	801321c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012fa8:	2b20      	cmp	r3, #32
 8012faa:	d10a      	bne.n	8012fc2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fb2:	689b      	ldr	r3, [r3, #8]
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	4798      	blx	r3
 8012fba:	4603      	mov	r3, r0
 8012fbc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
 8012fc0:	e12d      	b.n	801321e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	785b      	ldrb	r3, [r3, #1]
 8012fc6:	2b03      	cmp	r3, #3
 8012fc8:	d007      	beq.n	8012fda <USBD_StdEPReq+0x7a>
 8012fca:	2b03      	cmp	r3, #3
 8012fcc:	f300 811b 	bgt.w	8013206 <USBD_StdEPReq+0x2a6>
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d072      	beq.n	80130ba <USBD_StdEPReq+0x15a>
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d03a      	beq.n	801304e <USBD_StdEPReq+0xee>
 8012fd8:	e115      	b.n	8013206 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fe0:	2b02      	cmp	r3, #2
 8012fe2:	d002      	beq.n	8012fea <USBD_StdEPReq+0x8a>
 8012fe4:	2b03      	cmp	r3, #3
 8012fe6:	d015      	beq.n	8013014 <USBD_StdEPReq+0xb4>
 8012fe8:	e02b      	b.n	8013042 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fea:	7bbb      	ldrb	r3, [r7, #14]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d00c      	beq.n	801300a <USBD_StdEPReq+0xaa>
 8012ff0:	7bbb      	ldrb	r3, [r7, #14]
 8012ff2:	2b80      	cmp	r3, #128	@ 0x80
 8012ff4:	d009      	beq.n	801300a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012ff6:	7bbb      	ldrb	r3, [r7, #14]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f001 f9ba 	bl	8014374 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013000:	2180      	movs	r1, #128	@ 0x80
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f001 f9b6 	bl	8014374 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013008:	e020      	b.n	801304c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801300a:	6839      	ldr	r1, [r7, #0]
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fc1b 	bl	8013848 <USBD_CtlError>
              break;
 8013012:	e01b      	b.n	801304c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	885b      	ldrh	r3, [r3, #2]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d10e      	bne.n	801303a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 801301c:	7bbb      	ldrb	r3, [r7, #14]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00b      	beq.n	801303a <USBD_StdEPReq+0xda>
 8013022:	7bbb      	ldrb	r3, [r7, #14]
 8013024:	2b80      	cmp	r3, #128	@ 0x80
 8013026:	d008      	beq.n	801303a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	88db      	ldrh	r3, [r3, #6]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d104      	bne.n	801303a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013030:	7bbb      	ldrb	r3, [r7, #14]
 8013032:	4619      	mov	r1, r3
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f001 f99d 	bl	8014374 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 fccc 	bl	80139d8 <USBD_CtlSendStatus>

              break;
 8013040:	e004      	b.n	801304c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 fbff 	bl	8013848 <USBD_CtlError>
              break;
 801304a:	bf00      	nop
          }
          break;
 801304c:	e0e0      	b.n	8013210 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013054:	2b02      	cmp	r3, #2
 8013056:	d002      	beq.n	801305e <USBD_StdEPReq+0xfe>
 8013058:	2b03      	cmp	r3, #3
 801305a:	d015      	beq.n	8013088 <USBD_StdEPReq+0x128>
 801305c:	e026      	b.n	80130ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801305e:	7bbb      	ldrb	r3, [r7, #14]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00c      	beq.n	801307e <USBD_StdEPReq+0x11e>
 8013064:	7bbb      	ldrb	r3, [r7, #14]
 8013066:	2b80      	cmp	r3, #128	@ 0x80
 8013068:	d009      	beq.n	801307e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801306a:	7bbb      	ldrb	r3, [r7, #14]
 801306c:	4619      	mov	r1, r3
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f001 f980 	bl	8014374 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013074:	2180      	movs	r1, #128	@ 0x80
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f001 f97c 	bl	8014374 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801307c:	e01c      	b.n	80130b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801307e:	6839      	ldr	r1, [r7, #0]
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 fbe1 	bl	8013848 <USBD_CtlError>
              break;
 8013086:	e017      	b.n	80130b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	885b      	ldrh	r3, [r3, #2]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d112      	bne.n	80130b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013090:	7bbb      	ldrb	r3, [r7, #14]
 8013092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013096:	2b00      	cmp	r3, #0
 8013098:	d004      	beq.n	80130a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801309a:	7bbb      	ldrb	r3, [r7, #14]
 801309c:	4619      	mov	r1, r3
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f001 f987 	bl	80143b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 fc97 	bl	80139d8 <USBD_CtlSendStatus>
              }
              break;
 80130aa:	e004      	b.n	80130b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fbca 	bl	8013848 <USBD_CtlError>
              break;
 80130b4:	e000      	b.n	80130b8 <USBD_StdEPReq+0x158>
              break;
 80130b6:	bf00      	nop
          }
          break;
 80130b8:	e0aa      	b.n	8013210 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80130c0:	2b02      	cmp	r3, #2
 80130c2:	d002      	beq.n	80130ca <USBD_StdEPReq+0x16a>
 80130c4:	2b03      	cmp	r3, #3
 80130c6:	d032      	beq.n	801312e <USBD_StdEPReq+0x1ce>
 80130c8:	e097      	b.n	80131fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80130ca:	7bbb      	ldrb	r3, [r7, #14]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d007      	beq.n	80130e0 <USBD_StdEPReq+0x180>
 80130d0:	7bbb      	ldrb	r3, [r7, #14]
 80130d2:	2b80      	cmp	r3, #128	@ 0x80
 80130d4:	d004      	beq.n	80130e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80130d6:	6839      	ldr	r1, [r7, #0]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fbb5 	bl	8013848 <USBD_CtlError>
                break;
 80130de:	e091      	b.n	8013204 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	da0b      	bge.n	8013100 <USBD_StdEPReq+0x1a0>
 80130e8:	7bbb      	ldrb	r3, [r7, #14]
 80130ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130ee:	4613      	mov	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	4413      	add	r3, r2
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	3310      	adds	r3, #16
 80130f8:	687a      	ldr	r2, [r7, #4]
 80130fa:	4413      	add	r3, r2
 80130fc:	3304      	adds	r3, #4
 80130fe:	e00b      	b.n	8013118 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013100:	7bbb      	ldrb	r3, [r7, #14]
 8013102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013106:	4613      	mov	r3, r2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	4413      	add	r3, r2
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	4413      	add	r3, r2
 8013116:	3304      	adds	r3, #4
 8013118:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	2202      	movs	r2, #2
 8013124:	4619      	mov	r1, r3
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f000 fbf8 	bl	801391c <USBD_CtlSendData>
              break;
 801312c:	e06a      	b.n	8013204 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801312e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013132:	2b00      	cmp	r3, #0
 8013134:	da11      	bge.n	801315a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013136:	7bbb      	ldrb	r3, [r7, #14]
 8013138:	f003 020f 	and.w	r2, r3, #15
 801313c:	6879      	ldr	r1, [r7, #4]
 801313e:	4613      	mov	r3, r2
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	4413      	add	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	440b      	add	r3, r1
 8013148:	3318      	adds	r3, #24
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d117      	bne.n	8013180 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013150:	6839      	ldr	r1, [r7, #0]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 fb78 	bl	8013848 <USBD_CtlError>
                  break;
 8013158:	e054      	b.n	8013204 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801315a:	7bbb      	ldrb	r3, [r7, #14]
 801315c:	f003 020f 	and.w	r2, r3, #15
 8013160:	6879      	ldr	r1, [r7, #4]
 8013162:	4613      	mov	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	4413      	add	r3, r2
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	440b      	add	r3, r1
 801316c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d104      	bne.n	8013180 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013176:	6839      	ldr	r1, [r7, #0]
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f000 fb65 	bl	8013848 <USBD_CtlError>
                  break;
 801317e:	e041      	b.n	8013204 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013184:	2b00      	cmp	r3, #0
 8013186:	da0b      	bge.n	80131a0 <USBD_StdEPReq+0x240>
 8013188:	7bbb      	ldrb	r3, [r7, #14]
 801318a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801318e:	4613      	mov	r3, r2
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	4413      	add	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	3310      	adds	r3, #16
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4413      	add	r3, r2
 801319c:	3304      	adds	r3, #4
 801319e:	e00b      	b.n	80131b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80131a0:	7bbb      	ldrb	r3, [r7, #14]
 80131a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131a6:	4613      	mov	r3, r2
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	4413      	add	r3, r2
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	4413      	add	r3, r2
 80131b6:	3304      	adds	r3, #4
 80131b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80131ba:	7bbb      	ldrb	r3, [r7, #14]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d002      	beq.n	80131c6 <USBD_StdEPReq+0x266>
 80131c0:	7bbb      	ldrb	r3, [r7, #14]
 80131c2:	2b80      	cmp	r3, #128	@ 0x80
 80131c4:	d103      	bne.n	80131ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2200      	movs	r2, #0
 80131ca:	601a      	str	r2, [r3, #0]
 80131cc:	e00e      	b.n	80131ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80131ce:	7bbb      	ldrb	r3, [r7, #14]
 80131d0:	4619      	mov	r1, r3
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f001 f90c 	bl	80143f0 <USBD_LL_IsStallEP>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2201      	movs	r2, #1
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	e002      	b.n	80131ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	2202      	movs	r2, #2
 80131f0:	4619      	mov	r1, r3
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	f000 fb92 	bl	801391c <USBD_CtlSendData>
              break;
 80131f8:	e004      	b.n	8013204 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80131fa:	6839      	ldr	r1, [r7, #0]
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f000 fb23 	bl	8013848 <USBD_CtlError>
              break;
 8013202:	bf00      	nop
          }
          break;
 8013204:	e004      	b.n	8013210 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 fb1d 	bl	8013848 <USBD_CtlError>
          break;
 801320e:	bf00      	nop
      }
      break;
 8013210:	e004      	b.n	801321c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8013212:	6839      	ldr	r1, [r7, #0]
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 fb17 	bl	8013848 <USBD_CtlError>
      break;
 801321a:	bf00      	nop
  }

  return ret;
 801321c:	7bfb      	ldrb	r3, [r7, #15]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3710      	adds	r7, #16
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
	...

08013228 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013232:	2300      	movs	r3, #0
 8013234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013236:	2300      	movs	r3, #0
 8013238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801323a:	2300      	movs	r3, #0
 801323c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	885b      	ldrh	r3, [r3, #2]
 8013242:	0a1b      	lsrs	r3, r3, #8
 8013244:	b29b      	uxth	r3, r3
 8013246:	3b01      	subs	r3, #1
 8013248:	2b06      	cmp	r3, #6
 801324a:	f200 8128 	bhi.w	801349e <USBD_GetDescriptor+0x276>
 801324e:	a201      	add	r2, pc, #4	@ (adr r2, 8013254 <USBD_GetDescriptor+0x2c>)
 8013250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013254:	08013271 	.word	0x08013271
 8013258:	08013289 	.word	0x08013289
 801325c:	080132c9 	.word	0x080132c9
 8013260:	0801349f 	.word	0x0801349f
 8013264:	0801349f 	.word	0x0801349f
 8013268:	0801343f 	.word	0x0801343f
 801326c:	0801346b 	.word	0x0801346b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	7c12      	ldrb	r2, [r2, #16]
 801327c:	f107 0108 	add.w	r1, r7, #8
 8013280:	4610      	mov	r0, r2
 8013282:	4798      	blx	r3
 8013284:	60f8      	str	r0, [r7, #12]
      break;
 8013286:	e112      	b.n	80134ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	7c1b      	ldrb	r3, [r3, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10d      	bne.n	80132ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013298:	f107 0208 	add.w	r2, r7, #8
 801329c:	4610      	mov	r0, r2
 801329e:	4798      	blx	r3
 80132a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	3301      	adds	r3, #1
 80132a6:	2202      	movs	r2, #2
 80132a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80132aa:	e100      	b.n	80134ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132b4:	f107 0208 	add.w	r2, r7, #8
 80132b8:	4610      	mov	r0, r2
 80132ba:	4798      	blx	r3
 80132bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	3301      	adds	r3, #1
 80132c2:	2202      	movs	r2, #2
 80132c4:	701a      	strb	r2, [r3, #0]
      break;
 80132c6:	e0f2      	b.n	80134ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	885b      	ldrh	r3, [r3, #2]
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	2b05      	cmp	r3, #5
 80132d0:	f200 80ac 	bhi.w	801342c <USBD_GetDescriptor+0x204>
 80132d4:	a201      	add	r2, pc, #4	@ (adr r2, 80132dc <USBD_GetDescriptor+0xb4>)
 80132d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132da:	bf00      	nop
 80132dc:	080132f5 	.word	0x080132f5
 80132e0:	08013329 	.word	0x08013329
 80132e4:	0801335d 	.word	0x0801335d
 80132e8:	08013391 	.word	0x08013391
 80132ec:	080133c5 	.word	0x080133c5
 80132f0:	080133f9 	.word	0x080133f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00b      	beq.n	8013318 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	7c12      	ldrb	r2, [r2, #16]
 801330c:	f107 0108 	add.w	r1, r7, #8
 8013310:	4610      	mov	r0, r2
 8013312:	4798      	blx	r3
 8013314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013316:	e091      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013318:	6839      	ldr	r1, [r7, #0]
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 fa94 	bl	8013848 <USBD_CtlError>
            err++;
 8013320:	7afb      	ldrb	r3, [r7, #11]
 8013322:	3301      	adds	r3, #1
 8013324:	72fb      	strb	r3, [r7, #11]
          break;
 8013326:	e089      	b.n	801343c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00b      	beq.n	801334c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	7c12      	ldrb	r2, [r2, #16]
 8013340:	f107 0108 	add.w	r1, r7, #8
 8013344:	4610      	mov	r0, r2
 8013346:	4798      	blx	r3
 8013348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801334a:	e077      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801334c:	6839      	ldr	r1, [r7, #0]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f000 fa7a 	bl	8013848 <USBD_CtlError>
            err++;
 8013354:	7afb      	ldrb	r3, [r7, #11]
 8013356:	3301      	adds	r3, #1
 8013358:	72fb      	strb	r3, [r7, #11]
          break;
 801335a:	e06f      	b.n	801343c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d00b      	beq.n	8013380 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	7c12      	ldrb	r2, [r2, #16]
 8013374:	f107 0108 	add.w	r1, r7, #8
 8013378:	4610      	mov	r0, r2
 801337a:	4798      	blx	r3
 801337c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801337e:	e05d      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013380:	6839      	ldr	r1, [r7, #0]
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 fa60 	bl	8013848 <USBD_CtlError>
            err++;
 8013388:	7afb      	ldrb	r3, [r7, #11]
 801338a:	3301      	adds	r3, #1
 801338c:	72fb      	strb	r3, [r7, #11]
          break;
 801338e:	e055      	b.n	801343c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8013396:	691b      	ldr	r3, [r3, #16]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00b      	beq.n	80133b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80133a2:	691b      	ldr	r3, [r3, #16]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	7c12      	ldrb	r2, [r2, #16]
 80133a8:	f107 0108 	add.w	r1, r7, #8
 80133ac:	4610      	mov	r0, r2
 80133ae:	4798      	blx	r3
 80133b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133b2:	e043      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133b4:	6839      	ldr	r1, [r7, #0]
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f000 fa46 	bl	8013848 <USBD_CtlError>
            err++;
 80133bc:	7afb      	ldrb	r3, [r7, #11]
 80133be:	3301      	adds	r3, #1
 80133c0:	72fb      	strb	r3, [r7, #11]
          break;
 80133c2:	e03b      	b.n	801343c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80133ca:	695b      	ldr	r3, [r3, #20]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00b      	beq.n	80133e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80133d6:	695b      	ldr	r3, [r3, #20]
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	7c12      	ldrb	r2, [r2, #16]
 80133dc:	f107 0108 	add.w	r1, r7, #8
 80133e0:	4610      	mov	r0, r2
 80133e2:	4798      	blx	r3
 80133e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133e6:	e029      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133e8:	6839      	ldr	r1, [r7, #0]
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 fa2c 	bl	8013848 <USBD_CtlError>
            err++;
 80133f0:	7afb      	ldrb	r3, [r7, #11]
 80133f2:	3301      	adds	r3, #1
 80133f4:	72fb      	strb	r3, [r7, #11]
          break;
 80133f6:	e021      	b.n	801343c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d00b      	beq.n	801341c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801340a:	699b      	ldr	r3, [r3, #24]
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	7c12      	ldrb	r2, [r2, #16]
 8013410:	f107 0108 	add.w	r1, r7, #8
 8013414:	4610      	mov	r0, r2
 8013416:	4798      	blx	r3
 8013418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801341a:	e00f      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 fa12 	bl	8013848 <USBD_CtlError>
            err++;
 8013424:	7afb      	ldrb	r3, [r7, #11]
 8013426:	3301      	adds	r3, #1
 8013428:	72fb      	strb	r3, [r7, #11]
          break;
 801342a:	e007      	b.n	801343c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801342c:	6839      	ldr	r1, [r7, #0]
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 fa0a 	bl	8013848 <USBD_CtlError>
          err++;
 8013434:	7afb      	ldrb	r3, [r7, #11]
 8013436:	3301      	adds	r3, #1
 8013438:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801343a:	e038      	b.n	80134ae <USBD_GetDescriptor+0x286>
 801343c:	e037      	b.n	80134ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	7c1b      	ldrb	r3, [r3, #16]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d109      	bne.n	801345a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801344c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801344e:	f107 0208 	add.w	r2, r7, #8
 8013452:	4610      	mov	r0, r2
 8013454:	4798      	blx	r3
 8013456:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013458:	e029      	b.n	80134ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801345a:	6839      	ldr	r1, [r7, #0]
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f000 f9f3 	bl	8013848 <USBD_CtlError>
        err++;
 8013462:	7afb      	ldrb	r3, [r7, #11]
 8013464:	3301      	adds	r3, #1
 8013466:	72fb      	strb	r3, [r7, #11]
      break;
 8013468:	e021      	b.n	80134ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	7c1b      	ldrb	r3, [r3, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d10d      	bne.n	801348e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801347a:	f107 0208 	add.w	r2, r7, #8
 801347e:	4610      	mov	r0, r2
 8013480:	4798      	blx	r3
 8013482:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	3301      	adds	r3, #1
 8013488:	2207      	movs	r2, #7
 801348a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801348c:	e00f      	b.n	80134ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801348e:	6839      	ldr	r1, [r7, #0]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 f9d9 	bl	8013848 <USBD_CtlError>
        err++;
 8013496:	7afb      	ldrb	r3, [r7, #11]
 8013498:	3301      	adds	r3, #1
 801349a:	72fb      	strb	r3, [r7, #11]
      break;
 801349c:	e007      	b.n	80134ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801349e:	6839      	ldr	r1, [r7, #0]
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f000 f9d1 	bl	8013848 <USBD_CtlError>
      err++;
 80134a6:	7afb      	ldrb	r3, [r7, #11]
 80134a8:	3301      	adds	r3, #1
 80134aa:	72fb      	strb	r3, [r7, #11]
      break;
 80134ac:	bf00      	nop
  }

  if (err != 0U)
 80134ae:	7afb      	ldrb	r3, [r7, #11]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d11c      	bne.n	80134ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80134b4:	893b      	ldrh	r3, [r7, #8]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d011      	beq.n	80134de <USBD_GetDescriptor+0x2b6>
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	88db      	ldrh	r3, [r3, #6]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d00d      	beq.n	80134de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	88da      	ldrh	r2, [r3, #6]
 80134c6:	893b      	ldrh	r3, [r7, #8]
 80134c8:	4293      	cmp	r3, r2
 80134ca:	bf28      	it	cs
 80134cc:	4613      	movcs	r3, r2
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80134d2:	893b      	ldrh	r3, [r7, #8]
 80134d4:	461a      	mov	r2, r3
 80134d6:	68f9      	ldr	r1, [r7, #12]
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f000 fa1f 	bl	801391c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	88db      	ldrh	r3, [r3, #6]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d104      	bne.n	80134f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 fa76 	bl	80139d8 <USBD_CtlSendStatus>
 80134ec:	e000      	b.n	80134f0 <USBD_GetDescriptor+0x2c8>
    return;
 80134ee:	bf00      	nop
    }
  }
}
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop

080134f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	889b      	ldrh	r3, [r3, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d130      	bne.n	801356c <USBD_SetAddress+0x74>
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	88db      	ldrh	r3, [r3, #6]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d12c      	bne.n	801356c <USBD_SetAddress+0x74>
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	885b      	ldrh	r3, [r3, #2]
 8013516:	2b7f      	cmp	r3, #127	@ 0x7f
 8013518:	d828      	bhi.n	801356c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	885b      	ldrh	r3, [r3, #2]
 801351e:	b2db      	uxtb	r3, r3
 8013520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801352c:	2b03      	cmp	r3, #3
 801352e:	d104      	bne.n	801353a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8013530:	6839      	ldr	r1, [r7, #0]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 f988 	bl	8013848 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013538:	e01d      	b.n	8013576 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	7bfa      	ldrb	r2, [r7, #15]
 801353e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013542:	7bfb      	ldrb	r3, [r7, #15]
 8013544:	4619      	mov	r1, r3
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 ff7d 	bl	8014446 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 fa43 	bl	80139d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013552:	7bfb      	ldrb	r3, [r7, #15]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d004      	beq.n	8013562 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2202      	movs	r2, #2
 801355c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013560:	e009      	b.n	8013576 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2201      	movs	r2, #1
 8013566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801356a:	e004      	b.n	8013576 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801356c:	6839      	ldr	r1, [r7, #0]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f000 f96a 	bl	8013848 <USBD_CtlError>
  }
}
 8013574:	bf00      	nop
 8013576:	bf00      	nop
 8013578:	3710      	adds	r7, #16
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
	...

08013580 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	885b      	ldrh	r3, [r3, #2]
 801358e:	b2da      	uxtb	r2, r3
 8013590:	4b41      	ldr	r3, [pc, #260]	@ (8013698 <USBD_SetConfig+0x118>)
 8013592:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013594:	4b40      	ldr	r3, [pc, #256]	@ (8013698 <USBD_SetConfig+0x118>)
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d904      	bls.n	80135a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801359c:	6839      	ldr	r1, [r7, #0]
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f000 f952 	bl	8013848 <USBD_CtlError>
 80135a4:	e075      	b.n	8013692 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135ac:	2b02      	cmp	r3, #2
 80135ae:	d002      	beq.n	80135b6 <USBD_SetConfig+0x36>
 80135b0:	2b03      	cmp	r3, #3
 80135b2:	d023      	beq.n	80135fc <USBD_SetConfig+0x7c>
 80135b4:	e062      	b.n	801367c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80135b6:	4b38      	ldr	r3, [pc, #224]	@ (8013698 <USBD_SetConfig+0x118>)
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d01a      	beq.n	80135f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80135be:	4b36      	ldr	r3, [pc, #216]	@ (8013698 <USBD_SetConfig+0x118>)
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2203      	movs	r2, #3
 80135cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80135d0:	4b31      	ldr	r3, [pc, #196]	@ (8013698 <USBD_SetConfig+0x118>)
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	4619      	mov	r1, r3
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff f9e7 	bl	80129aa <USBD_SetClassConfig>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b02      	cmp	r3, #2
 80135e0:	d104      	bne.n	80135ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80135e2:	6839      	ldr	r1, [r7, #0]
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f92f 	bl	8013848 <USBD_CtlError>
            return;
 80135ea:	e052      	b.n	8013692 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 f9f3 	bl	80139d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80135f2:	e04e      	b.n	8013692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 f9ef 	bl	80139d8 <USBD_CtlSendStatus>
        break;
 80135fa:	e04a      	b.n	8013692 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80135fc:	4b26      	ldr	r3, [pc, #152]	@ (8013698 <USBD_SetConfig+0x118>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d112      	bne.n	801362a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2202      	movs	r2, #2
 8013608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 801360c:	4b22      	ldr	r3, [pc, #136]	@ (8013698 <USBD_SetConfig+0x118>)
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	461a      	mov	r2, r3
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013616:	4b20      	ldr	r3, [pc, #128]	@ (8013698 <USBD_SetConfig+0x118>)
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	4619      	mov	r1, r3
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f7ff f9e3 	bl	80129e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 f9d8 	bl	80139d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013628:	e033      	b.n	8013692 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801362a:	4b1b      	ldr	r3, [pc, #108]	@ (8013698 <USBD_SetConfig+0x118>)
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	461a      	mov	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	429a      	cmp	r2, r3
 8013636:	d01d      	beq.n	8013674 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	b2db      	uxtb	r3, r3
 801363e:	4619      	mov	r1, r3
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7ff f9d1 	bl	80129e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013646:	4b14      	ldr	r3, [pc, #80]	@ (8013698 <USBD_SetConfig+0x118>)
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	461a      	mov	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013650:	4b11      	ldr	r3, [pc, #68]	@ (8013698 <USBD_SetConfig+0x118>)
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	4619      	mov	r1, r3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff f9a7 	bl	80129aa <USBD_SetClassConfig>
 801365c:	4603      	mov	r3, r0
 801365e:	2b02      	cmp	r3, #2
 8013660:	d104      	bne.n	801366c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f8ef 	bl	8013848 <USBD_CtlError>
            return;
 801366a:	e012      	b.n	8013692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f9b3 	bl	80139d8 <USBD_CtlSendStatus>
        break;
 8013672:	e00e      	b.n	8013692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 f9af 	bl	80139d8 <USBD_CtlSendStatus>
        break;
 801367a:	e00a      	b.n	8013692 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801367c:	6839      	ldr	r1, [r7, #0]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 f8e2 	bl	8013848 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8013684:	4b04      	ldr	r3, [pc, #16]	@ (8013698 <USBD_SetConfig+0x118>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	4619      	mov	r1, r3
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7ff f9ac 	bl	80129e8 <USBD_ClrClassConfig>
        break;
 8013690:	bf00      	nop
    }
  }
}
 8013692:	3708      	adds	r7, #8
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	20000b16 	.word	0x20000b16

0801369c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	88db      	ldrh	r3, [r3, #6]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d004      	beq.n	80136b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 f8c9 	bl	8013848 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80136b6:	e022      	b.n	80136fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136be:	2b02      	cmp	r3, #2
 80136c0:	dc02      	bgt.n	80136c8 <USBD_GetConfig+0x2c>
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	dc03      	bgt.n	80136ce <USBD_GetConfig+0x32>
 80136c6:	e015      	b.n	80136f4 <USBD_GetConfig+0x58>
 80136c8:	2b03      	cmp	r3, #3
 80136ca:	d00b      	beq.n	80136e4 <USBD_GetConfig+0x48>
 80136cc:	e012      	b.n	80136f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	3308      	adds	r3, #8
 80136d8:	2201      	movs	r2, #1
 80136da:	4619      	mov	r1, r3
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 f91d 	bl	801391c <USBD_CtlSendData>
        break;
 80136e2:	e00c      	b.n	80136fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	3304      	adds	r3, #4
 80136e8:	2201      	movs	r2, #1
 80136ea:	4619      	mov	r1, r3
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 f915 	bl	801391c <USBD_CtlSendData>
        break;
 80136f2:	e004      	b.n	80136fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f8a6 	bl	8013848 <USBD_CtlError>
        break;
 80136fc:	bf00      	nop
}
 80136fe:	bf00      	nop
 8013700:	3708      	adds	r7, #8
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}

08013706 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013706:	b580      	push	{r7, lr}
 8013708:	b082      	sub	sp, #8
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
 801370e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013716:	3b01      	subs	r3, #1
 8013718:	2b02      	cmp	r3, #2
 801371a:	d81e      	bhi.n	801375a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	88db      	ldrh	r3, [r3, #6]
 8013720:	2b02      	cmp	r3, #2
 8013722:	d004      	beq.n	801372e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013724:	6839      	ldr	r1, [r7, #0]
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 f88e 	bl	8013848 <USBD_CtlError>
        break;
 801372c:	e01a      	b.n	8013764 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801373a:	2b00      	cmp	r3, #0
 801373c:	d005      	beq.n	801374a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	f043 0202 	orr.w	r2, r3, #2
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	330c      	adds	r3, #12
 801374e:	2202      	movs	r2, #2
 8013750:	4619      	mov	r1, r3
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f000 f8e2 	bl	801391c <USBD_CtlSendData>
      break;
 8013758:	e004      	b.n	8013764 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801375a:	6839      	ldr	r1, [r7, #0]
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f000 f873 	bl	8013848 <USBD_CtlError>
      break;
 8013762:	bf00      	nop
  }
}
 8013764:	bf00      	nop
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	885b      	ldrh	r3, [r3, #2]
 801377a:	2b01      	cmp	r3, #1
 801377c:	d106      	bne.n	801378c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 f926 	bl	80139d8 <USBD_CtlSendStatus>
  }
}
 801378c:	bf00      	nop
 801378e:	3708      	adds	r7, #8
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137a4:	3b01      	subs	r3, #1
 80137a6:	2b02      	cmp	r3, #2
 80137a8:	d80b      	bhi.n	80137c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	885b      	ldrh	r3, [r3, #2]
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d10c      	bne.n	80137cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2200      	movs	r2, #0
 80137b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f000 f90c 	bl	80139d8 <USBD_CtlSendStatus>
      }
      break;
 80137c0:	e004      	b.n	80137cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80137c2:	6839      	ldr	r1, [r7, #0]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 f83f 	bl	8013848 <USBD_CtlError>
      break;
 80137ca:	e000      	b.n	80137ce <USBD_ClrFeature+0x3a>
      break;
 80137cc:	bf00      	nop
  }
}
 80137ce:	bf00      	nop
 80137d0:	3708      	adds	r7, #8
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80137d6:	b480      	push	{r7}
 80137d8:	b083      	sub	sp, #12
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
 80137de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	781a      	ldrb	r2, [r3, #0]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	785a      	ldrb	r2, [r3, #1]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	3302      	adds	r3, #2
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	461a      	mov	r2, r3
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	3303      	adds	r3, #3
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	021b      	lsls	r3, r3, #8
 8013800:	b29b      	uxth	r3, r3
 8013802:	4413      	add	r3, r2
 8013804:	b29a      	uxth	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	3304      	adds	r3, #4
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	461a      	mov	r2, r3
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	3305      	adds	r3, #5
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	021b      	lsls	r3, r3, #8
 801381a:	b29b      	uxth	r3, r3
 801381c:	4413      	add	r3, r2
 801381e:	b29a      	uxth	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	3306      	adds	r3, #6
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	461a      	mov	r2, r3
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	3307      	adds	r3, #7
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	021b      	lsls	r3, r3, #8
 8013834:	b29b      	uxth	r3, r3
 8013836:	4413      	add	r3, r2
 8013838:	b29a      	uxth	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	80da      	strh	r2, [r3, #6]

}
 801383e:	bf00      	nop
 8013840:	370c      	adds	r7, #12
 8013842:	46bd      	mov	sp, r7
 8013844:	bc80      	pop	{r7}
 8013846:	4770      	bx	lr

08013848 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8013852:	2180      	movs	r1, #128	@ 0x80
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f000 fd8d 	bl	8014374 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801385a:	2100      	movs	r1, #0
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 fd89 	bl	8014374 <USBD_LL_StallEP>
}
 8013862:	bf00      	nop
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}

0801386a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801386a:	b580      	push	{r7, lr}
 801386c:	b086      	sub	sp, #24
 801386e:	af00      	add	r7, sp, #0
 8013870:	60f8      	str	r0, [r7, #12]
 8013872:	60b9      	str	r1, [r7, #8]
 8013874:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013876:	2300      	movs	r3, #0
 8013878:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d032      	beq.n	80138e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	f000 f834 	bl	80138ee <USBD_GetLen>
 8013886:	4603      	mov	r3, r0
 8013888:	3301      	adds	r3, #1
 801388a:	b29b      	uxth	r3, r3
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	b29a      	uxth	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8013894:	7dfb      	ldrb	r3, [r7, #23]
 8013896:	1c5a      	adds	r2, r3, #1
 8013898:	75fa      	strb	r2, [r7, #23]
 801389a:	461a      	mov	r2, r3
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	4413      	add	r3, r2
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	7812      	ldrb	r2, [r2, #0]
 80138a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	75fa      	strb	r2, [r7, #23]
 80138ac:	461a      	mov	r2, r3
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	4413      	add	r3, r2
 80138b2:	2203      	movs	r2, #3
 80138b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80138b6:	e012      	b.n	80138de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	1c5a      	adds	r2, r3, #1
 80138bc:	60fa      	str	r2, [r7, #12]
 80138be:	7dfa      	ldrb	r2, [r7, #23]
 80138c0:	1c51      	adds	r1, r2, #1
 80138c2:	75f9      	strb	r1, [r7, #23]
 80138c4:	4611      	mov	r1, r2
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	440a      	add	r2, r1
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80138ce:	7dfb      	ldrb	r3, [r7, #23]
 80138d0:	1c5a      	adds	r2, r3, #1
 80138d2:	75fa      	strb	r2, [r7, #23]
 80138d4:	461a      	mov	r2, r3
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	4413      	add	r3, r2
 80138da:	2200      	movs	r2, #0
 80138dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d1e8      	bne.n	80138b8 <USBD_GetString+0x4e>
    }
  }
}
 80138e6:	bf00      	nop
 80138e8:	3718      	adds	r7, #24
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80138ee:	b480      	push	{r7}
 80138f0:	b085      	sub	sp, #20
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80138f6:	2300      	movs	r3, #0
 80138f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80138fa:	e005      	b.n	8013908 <USBD_GetLen+0x1a>
  {
    len++;
 80138fc:	7bfb      	ldrb	r3, [r7, #15]
 80138fe:	3301      	adds	r3, #1
 8013900:	73fb      	strb	r3, [r7, #15]
    buf++;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	3301      	adds	r3, #1
 8013906:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d1f5      	bne.n	80138fc <USBD_GetLen+0xe>
  }

  return len;
 8013910:	7bfb      	ldrb	r3, [r7, #15]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3714      	adds	r7, #20
 8013916:	46bd      	mov	sp, r7
 8013918:	bc80      	pop	{r7}
 801391a:	4770      	bx	lr

0801391c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	4613      	mov	r3, r2
 8013928:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2202      	movs	r2, #2
 801392e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013932:	88fa      	ldrh	r2, [r7, #6]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8013938:	88fa      	ldrh	r2, [r7, #6]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801393e:	88fb      	ldrh	r3, [r7, #6]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	2100      	movs	r1, #0
 8013944:	68f8      	ldr	r0, [r7, #12]
 8013946:	f000 fd9d 	bl	8014484 <USBD_LL_Transmit>

  return USBD_OK;
 801394a:	2300      	movs	r3, #0
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	4613      	mov	r3, r2
 8013960:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013962:	88fb      	ldrh	r3, [r7, #6]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	2100      	movs	r1, #0
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 fd8b 	bl	8014484 <USBD_LL_Transmit>

  return USBD_OK;
 801396e:	2300      	movs	r3, #0
}
 8013970:	4618      	mov	r0, r3
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	4613      	mov	r3, r2
 8013984:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2203      	movs	r2, #3
 801398a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801398e:	88fa      	ldrh	r2, [r7, #6]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8013996:	88fa      	ldrh	r2, [r7, #6]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801399e:	88fb      	ldrh	r3, [r7, #6]
 80139a0:	68ba      	ldr	r2, [r7, #8]
 80139a2:	2100      	movs	r1, #0
 80139a4:	68f8      	ldr	r0, [r7, #12]
 80139a6:	f000 fd90 	bl	80144ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3710      	adds	r7, #16
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	4613      	mov	r3, r2
 80139c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139c2:	88fb      	ldrh	r3, [r7, #6]
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	2100      	movs	r1, #0
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f000 fd7e 	bl	80144ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139ce:	2300      	movs	r3, #0
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3710      	adds	r7, #16
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}

080139d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b082      	sub	sp, #8
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2204      	movs	r2, #4
 80139e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80139e8:	2300      	movs	r3, #0
 80139ea:	2200      	movs	r2, #0
 80139ec:	2100      	movs	r1, #0
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 fd48 	bl	8014484 <USBD_LL_Transmit>

  return USBD_OK;
 80139f4:	2300      	movs	r3, #0
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b082      	sub	sp, #8
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	2205      	movs	r2, #5
 8013a0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a0e:	2300      	movs	r3, #0
 8013a10:	2200      	movs	r2, #0
 8013a12:	2100      	movs	r1, #0
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 fd58 	bl	80144ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a1a:	2300      	movs	r3, #0
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4912      	ldr	r1, [pc, #72]	@ (8013a74 <MX_USB_DEVICE_Init+0x50>)
 8013a2c:	4812      	ldr	r0, [pc, #72]	@ (8013a78 <MX_USB_DEVICE_Init+0x54>)
 8013a2e:	f7fe ff62 	bl	80128f6 <USBD_Init>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d001      	beq.n	8013a3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013a38:	f7ee fd92 	bl	8002560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013a3c:	490f      	ldr	r1, [pc, #60]	@ (8013a7c <MX_USB_DEVICE_Init+0x58>)
 8013a3e:	480e      	ldr	r0, [pc, #56]	@ (8013a78 <MX_USB_DEVICE_Init+0x54>)
 8013a40:	f7fe ff84 	bl	801294c <USBD_RegisterClass>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013a4a:	f7ee fd89 	bl	8002560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013a4e:	490c      	ldr	r1, [pc, #48]	@ (8013a80 <MX_USB_DEVICE_Init+0x5c>)
 8013a50:	4809      	ldr	r0, [pc, #36]	@ (8013a78 <MX_USB_DEVICE_Init+0x54>)
 8013a52:	f7fe feb5 	bl	80127c0 <USBD_CDC_RegisterInterface>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013a5c:	f7ee fd80 	bl	8002560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013a60:	4805      	ldr	r0, [pc, #20]	@ (8013a78 <MX_USB_DEVICE_Init+0x54>)
 8013a62:	f7fe ff8c 	bl	801297e <USBD_Start>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d001      	beq.n	8013a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013a6c:	f7ee fd78 	bl	8002560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013a70:	bf00      	nop
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	2000018c 	.word	0x2000018c
 8013a78:	20000b18 	.word	0x20000b18
 8013a7c:	20000078 	.word	0x20000078
 8013a80:	2000017c 	.word	0x2000017c

08013a84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013a88:	2200      	movs	r2, #0
 8013a8a:	4905      	ldr	r1, [pc, #20]	@ (8013aa0 <CDC_Init_FS+0x1c>)
 8013a8c:	4805      	ldr	r0, [pc, #20]	@ (8013aa4 <CDC_Init_FS+0x20>)
 8013a8e:	f7fe fead 	bl	80127ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013a92:	4905      	ldr	r1, [pc, #20]	@ (8013aa8 <CDC_Init_FS+0x24>)
 8013a94:	4803      	ldr	r0, [pc, #12]	@ (8013aa4 <CDC_Init_FS+0x20>)
 8013a96:	f7fe fec2 	bl	801281e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013a9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	200011dc 	.word	0x200011dc
 8013aa4:	20000b18 	.word	0x20000b18
 8013aa8:	20000ddc 	.word	0x20000ddc

08013aac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013aac:	b480      	push	{r7}
 8013aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013ab0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bc80      	pop	{r7}
 8013ab8:	4770      	bx	lr
	...

08013abc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	6039      	str	r1, [r7, #0]
 8013ac6:	71fb      	strb	r3, [r7, #7]
 8013ac8:	4613      	mov	r3, r2
 8013aca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013acc:	79fb      	ldrb	r3, [r7, #7]
 8013ace:	2b23      	cmp	r3, #35	@ 0x23
 8013ad0:	d84a      	bhi.n	8013b68 <CDC_Control_FS+0xac>
 8013ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8013ad8 <CDC_Control_FS+0x1c>)
 8013ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ad8:	08013b69 	.word	0x08013b69
 8013adc:	08013b69 	.word	0x08013b69
 8013ae0:	08013b69 	.word	0x08013b69
 8013ae4:	08013b69 	.word	0x08013b69
 8013ae8:	08013b69 	.word	0x08013b69
 8013aec:	08013b69 	.word	0x08013b69
 8013af0:	08013b69 	.word	0x08013b69
 8013af4:	08013b69 	.word	0x08013b69
 8013af8:	08013b69 	.word	0x08013b69
 8013afc:	08013b69 	.word	0x08013b69
 8013b00:	08013b69 	.word	0x08013b69
 8013b04:	08013b69 	.word	0x08013b69
 8013b08:	08013b69 	.word	0x08013b69
 8013b0c:	08013b69 	.word	0x08013b69
 8013b10:	08013b69 	.word	0x08013b69
 8013b14:	08013b69 	.word	0x08013b69
 8013b18:	08013b69 	.word	0x08013b69
 8013b1c:	08013b69 	.word	0x08013b69
 8013b20:	08013b69 	.word	0x08013b69
 8013b24:	08013b69 	.word	0x08013b69
 8013b28:	08013b69 	.word	0x08013b69
 8013b2c:	08013b69 	.word	0x08013b69
 8013b30:	08013b69 	.word	0x08013b69
 8013b34:	08013b69 	.word	0x08013b69
 8013b38:	08013b69 	.word	0x08013b69
 8013b3c:	08013b69 	.word	0x08013b69
 8013b40:	08013b69 	.word	0x08013b69
 8013b44:	08013b69 	.word	0x08013b69
 8013b48:	08013b69 	.word	0x08013b69
 8013b4c:	08013b69 	.word	0x08013b69
 8013b50:	08013b69 	.word	0x08013b69
 8013b54:	08013b69 	.word	0x08013b69
 8013b58:	08013b69 	.word	0x08013b69
 8013b5c:	08013b69 	.word	0x08013b69
 8013b60:	08013b69 	.word	0x08013b69
 8013b64:	08013b69 	.word	0x08013b69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013b68:	bf00      	nop
  }

  return (USBD_OK);
 8013b6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bc80      	pop	{r7}
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop

08013b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b09e      	sub	sp, #120	@ 0x78
 8013b7c:	af02      	add	r7, sp, #8
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	static char rx_buffer[64]; // Буфер для сборки команды
		static uint8_t rx_index = 0; // Индекс текуцей позиции
		    // Обработка всех принятых байт
		    for (uint32_t i = 0; i < *Len; i++) {
 8013b82:	2300      	movs	r3, #0
 8013b84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013b86:	e106      	b.n	8013d96 <CDC_Receive_FS+0x21e>
		        char byte = Buf[i]; // Чтение байта
 8013b88:	687a      	ldr	r2, [r7, #4]
 8013b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b8c:	4413      	add	r3, r2
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		        // Если конец строки или буфер переполен - заканчиваем строку
		        if (byte == '\n' || rx_index >= sizeof(rx_buffer) - 1) {
 8013b94:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8013b98:	2b0a      	cmp	r3, #10
 8013b9a:	d004      	beq.n	8013ba6 <CDC_Receive_FS+0x2e>
 8013b9c:	4b87      	ldr	r3, [pc, #540]	@ (8013dbc <CDC_Receive_FS+0x244>)
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8013ba2:	f240 80ea 	bls.w	8013d7a <CDC_Receive_FS+0x202>
		            rx_buffer[rx_index] = '\0';
 8013ba6:	4b85      	ldr	r3, [pc, #532]	@ (8013dbc <CDC_Receive_FS+0x244>)
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	4b84      	ldr	r3, [pc, #528]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013bae:	2100      	movs	r1, #0
 8013bb0:	5499      	strb	r1, [r3, r2]
		            // Обработка команды частоты: F<канал>:<частота>
		                     if (rx_buffer[0] == 'F') {
 8013bb2:	4b83      	ldr	r3, [pc, #524]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	2b46      	cmp	r3, #70	@ 0x46
 8013bb8:	d17e      	bne.n	8013cb8 <CDC_Receive_FS+0x140>
		                         uint8_t ch = rx_buffer[1] - '0';
 8013bba:	4b81      	ldr	r3, [pc, #516]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013bbc:	785b      	ldrb	r3, [r3, #1]
 8013bbe:	3b30      	subs	r3, #48	@ 0x30
 8013bc0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8013bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013bc6:	789b      	ldrb	r3, [r3, #2]
 8013bc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8013bca:	d170      	bne.n	8013cae <CDC_Receive_FS+0x136>
 8013bcc:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013bd0:	2b02      	cmp	r3, #2
 8013bd2:	d86c      	bhi.n	8013cae <CDC_Receive_FS+0x136>
		                             uint32_t freq = atoi(&rx_buffer[3]);
 8013bd4:	487b      	ldr	r0, [pc, #492]	@ (8013dc4 <CDC_Receive_FS+0x24c>)
 8013bd6:	f000 fcfb 	bl	80145d0 <atoi>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		                             uint32_t set_freq = atoi(&rx_buffer[3]);  // объявляем set_freq тут
 8013bde:	4879      	ldr	r0, [pc, #484]	@ (8013dc4 <CDC_Receive_FS+0x24c>)
 8013be0:	f000 fcf6 	bl	80145d0 <atoi>
 8013be4:	4603      	mov	r3, r0
 8013be6:	65bb      	str	r3, [r7, #88]	@ 0x58
		                             if (set_freq > 0 && set_freq < 150000000) {
 8013be8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d038      	beq.n	8013c60 <CDC_Receive_FS+0xe8>
 8013bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bf0:	4a75      	ldr	r2, [pc, #468]	@ (8013dc8 <CDC_Receive_FS+0x250>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d834      	bhi.n	8013c60 <CDC_Receive_FS+0xe8>
		                            	 //si5351_enableOutputs(0xFF);
		                            	 extern int freq[3];
		                            	 extern void print_interface_mode0(void);

		                            	 extern void int_to_str(int num, char *str);
		                            	 freq[ch] = set_freq / 1000;
 8013bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bf8:	4a74      	ldr	r2, [pc, #464]	@ (8013dcc <CDC_Receive_FS+0x254>)
 8013bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8013bfe:	099a      	lsrs	r2, r3, #6
 8013c00:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013c04:	4611      	mov	r1, r2
 8013c06:	4a72      	ldr	r2, [pc, #456]	@ (8013dd0 <CDC_Receive_FS+0x258>)
 8013c08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		                            	 int_to_str(freq[ch], num_string[ch]);
 8013c0c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013c10:	4a6f      	ldr	r2, [pc, #444]	@ (8013dd0 <CDC_Receive_FS+0x258>)
 8013c12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013c16:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	00db      	lsls	r3, r3, #3
 8013c1e:	1a9b      	subs	r3, r3, r2
 8013c20:	4a6c      	ldr	r2, [pc, #432]	@ (8013dd4 <CDC_Receive_FS+0x25c>)
 8013c22:	4413      	add	r3, r2
 8013c24:	4619      	mov	r1, r3
 8013c26:	f7ed f9dd 	bl	8000fe4 <int_to_str>
		                            	 print_interface_mode0();
 8013c2a:	f7ed fadd 	bl	80011e8 <print_interface_mode0>
		                            	 char msg[64];
		                            	 // Формируем и отправляем сообщение с установленной частотой
		                            	 snprintf(msg, sizeof(msg), "CH%u set to %lu Hz\r\n", ch, freq);
 8013c2e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013c32:	f107 000c 	add.w	r0, r7, #12
 8013c36:	4a66      	ldr	r2, [pc, #408]	@ (8013dd0 <CDC_Receive_FS+0x258>)
 8013c38:	9200      	str	r2, [sp, #0]
 8013c3a:	4a67      	ldr	r2, [pc, #412]	@ (8013dd8 <CDC_Receive_FS+0x260>)
 8013c3c:	2140      	movs	r1, #64	@ 0x40
 8013c3e:	f000 fdfd 	bl	801483c <sniprintf>
		                            	 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8013c42:	f107 030c 	add.w	r3, r7, #12
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ec fa82 	bl	8000150 <strlen>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	b29a      	uxth	r2, r3
 8013c50:	f107 030c 	add.w	r3, r7, #12
 8013c54:	4611      	mov	r1, r2
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 f8d4 	bl	8013e04 <CDC_Transmit_FS>
		                             if (set_freq > 0 && set_freq < 150000000) {
 8013c5c:	bf00      	nop
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8013c5e:	e088      	b.n	8013d72 <CDC_Receive_FS+0x1fa>
		                             } else if (freq == 0) {
 8013c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d11e      	bne.n	8013ca4 <CDC_Receive_FS+0x12c>
		                            	 // Если частота = 0 - отключение выходного канала
		                                 uint8_t disable_mask = ~(1 << ch);
 8013c66:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	43db      	mvns	r3, r3
 8013c74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		                                 //si5351_enableOutputs(disable_mask);
		                                 char msg[32];
		                                 snprintf(msg, sizeof(msg), "CH%u disabled\r\n", ch);
 8013c78:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013c7c:	f107 000c 	add.w	r0, r7, #12
 8013c80:	4a56      	ldr	r2, [pc, #344]	@ (8013ddc <CDC_Receive_FS+0x264>)
 8013c82:	2120      	movs	r1, #32
 8013c84:	f000 fdda 	bl	801483c <sniprintf>
		                                 CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8013c88:	f107 030c 	add.w	r3, r7, #12
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7ec fa5f 	bl	8000150 <strlen>
 8013c92:	4603      	mov	r3, r0
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	f107 030c 	add.w	r3, r7, #12
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 f8b1 	bl	8013e04 <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8013ca2:	e066      	b.n	8013d72 <CDC_Receive_FS+0x1fa>
		                             } else {
		                            	 // Проверка неправильного ввода частоты
		                                 CDC_Transmit_FS((uint8_t*)"Invalid frequency\r\n", 20);
 8013ca4:	2114      	movs	r1, #20
 8013ca6:	484e      	ldr	r0, [pc, #312]	@ (8013de0 <CDC_Receive_FS+0x268>)
 8013ca8:	f000 f8ac 	bl	8013e04 <CDC_Transmit_FS>
		                         if (rx_buffer[2] == ':' && ch < 3) {
 8013cac:	e061      	b.n	8013d72 <CDC_Receive_FS+0x1fa>
		                             }
		                         } else {
		                        	 // Проверка неправильного формата команды
		                             CDC_Transmit_FS((uint8_t*)"Invalid format\r\n", 17);
 8013cae:	2111      	movs	r1, #17
 8013cb0:	484c      	ldr	r0, [pc, #304]	@ (8013de4 <CDC_Receive_FS+0x26c>)
 8013cb2:	f000 f8a7 	bl	8013e04 <CDC_Transmit_FS>
 8013cb6:	e05c      	b.n	8013d72 <CDC_Receive_FS+0x1fa>
		                         }
		                     }
		            else if (strncmp(rx_buffer, "Condition", 4) == 0) {
 8013cb8:	2204      	movs	r2, #4
 8013cba:	494b      	ldr	r1, [pc, #300]	@ (8013de8 <CDC_Receive_FS+0x270>)
 8013cbc:	4840      	ldr	r0, [pc, #256]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013cbe:	f000 fdfb 	bl	80148b8 <strncmp>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d116      	bne.n	8013cf6 <CDC_Receive_FS+0x17e>
		                // Команда проверки связи
		                char msg[] = "Normally\r\n";
 8013cc8:	4a48      	ldr	r2, [pc, #288]	@ (8013dec <CDC_Receive_FS+0x274>)
 8013cca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cd0:	c303      	stmia	r3!, {r0, r1}
 8013cd2:	801a      	strh	r2, [r3, #0]
 8013cd4:	3302      	adds	r3, #2
 8013cd6:	0c12      	lsrs	r2, r2, #16
 8013cd8:	701a      	strb	r2, [r3, #0]
		                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8013cda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ec fa36 	bl	8000150 <strlen>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f000 f888 	bl	8013e04 <CDC_Transmit_FS>
 8013cf4:	e03d      	b.n	8013d72 <CDC_Receive_FS+0x1fa>
		            }
		            else if (strncmp(rx_buffer, "STATUS", 6) == 0) {
 8013cf6:	2206      	movs	r2, #6
 8013cf8:	493d      	ldr	r1, [pc, #244]	@ (8013df0 <CDC_Receive_FS+0x278>)
 8013cfa:	4831      	ldr	r0, [pc, #196]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013cfc:	f000 fddc 	bl	80148b8 <strncmp>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d135      	bne.n	8013d72 <CDC_Receive_FS+0x1fa>
		                extern int freq[3];  // частоты каналов, кГц
		                char msg[64];
		                for (uint8_t ch = 0; ch < 3; ch++) {
 8013d06:	2300      	movs	r3, #0
 8013d08:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8013d0c:	e02d      	b.n	8013d6a <CDC_Receive_FS+0x1f2>
		                    const char* state = (freq[ch] > 0) ? "ON" : "OFF";
 8013d0e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8013d12:	4a2f      	ldr	r2, [pc, #188]	@ (8013dd0 <CDC_Receive_FS+0x258>)
 8013d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dd01      	ble.n	8013d20 <CDC_Receive_FS+0x1a8>
 8013d1c:	4b35      	ldr	r3, [pc, #212]	@ (8013df4 <CDC_Receive_FS+0x27c>)
 8013d1e:	e000      	b.n	8013d22 <CDC_Receive_FS+0x1aa>
 8013d20:	4b35      	ldr	r3, [pc, #212]	@ (8013df8 <CDC_Receive_FS+0x280>)
 8013d22:	667b      	str	r3, [r7, #100]	@ 0x64
		                    snprintf(msg, sizeof(msg), "CH%u: %s, %lu kHz\r\n", ch, state, freq[ch]);
 8013d24:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8013d28:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8013d2c:	4928      	ldr	r1, [pc, #160]	@ (8013dd0 <CDC_Receive_FS+0x258>)
 8013d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013d32:	f107 000c 	add.w	r0, r7, #12
 8013d36:	9301      	str	r3, [sp, #4]
 8013d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8013dfc <CDC_Receive_FS+0x284>)
 8013d40:	2140      	movs	r1, #64	@ 0x40
 8013d42:	f000 fd7b 	bl	801483c <sniprintf>
		                    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8013d46:	f107 030c 	add.w	r3, r7, #12
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ec fa00 	bl	8000150 <strlen>
 8013d50:	4603      	mov	r3, r0
 8013d52:	b29a      	uxth	r2, r3
 8013d54:	f107 030c 	add.w	r3, r7, #12
 8013d58:	4611      	mov	r1, r2
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f000 f852 	bl	8013e04 <CDC_Transmit_FS>
		                for (uint8_t ch = 0; ch < 3; ch++) {
 8013d60:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8013d64:	3301      	adds	r3, #1
 8013d66:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8013d6a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8013d6e:	2b02      	cmp	r3, #2
 8013d70:	d9cd      	bls.n	8013d0e <CDC_Receive_FS+0x196>
		                }
		            }
		            rx_index = 0; // Очищаем буфер
 8013d72:	4b12      	ldr	r3, [pc, #72]	@ (8013dbc <CDC_Receive_FS+0x244>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	701a      	strb	r2, [r3, #0]
 8013d78:	e00a      	b.n	8013d90 <CDC_Receive_FS+0x218>

		        } else {
		            rx_buffer[rx_index++] = byte;
 8013d7a:	4b10      	ldr	r3, [pc, #64]	@ (8013dbc <CDC_Receive_FS+0x244>)
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	1c5a      	adds	r2, r3, #1
 8013d80:	b2d1      	uxtb	r1, r2
 8013d82:	4a0e      	ldr	r2, [pc, #56]	@ (8013dbc <CDC_Receive_FS+0x244>)
 8013d84:	7011      	strb	r1, [r2, #0]
 8013d86:	4619      	mov	r1, r3
 8013d88:	4a0d      	ldr	r2, [pc, #52]	@ (8013dc0 <CDC_Receive_FS+0x248>)
 8013d8a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8013d8e:	5453      	strb	r3, [r2, r1]
		    for (uint32_t i = 0; i < *Len; i++) {
 8013d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d92:	3301      	adds	r3, #1
 8013d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	f4ff aef3 	bcc.w	8013b88 <CDC_Receive_FS+0x10>
		        }
		    }

		    // Запускаем приём следующего пакета
		    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013da2:	6879      	ldr	r1, [r7, #4]
 8013da4:	4816      	ldr	r0, [pc, #88]	@ (8013e00 <CDC_Receive_FS+0x288>)
 8013da6:	f7fe fd3a 	bl	801281e <USBD_CDC_SetRxBuffer>
		    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013daa:	4815      	ldr	r0, [pc, #84]	@ (8013e00 <CDC_Receive_FS+0x288>)
 8013dac:	f7fe fd79 	bl	80128a2 <USBD_CDC_ReceivePacket>
		    return (USBD_OK);
 8013db0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3770      	adds	r7, #112	@ 0x70
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	200015dc 	.word	0x200015dc
 8013dc0:	200015e0 	.word	0x200015e0
 8013dc4:	200015e3 	.word	0x200015e3
 8013dc8:	08f0d17f 	.word	0x08f0d17f
 8013dcc:	10624dd3 	.word	0x10624dd3
 8013dd0:	200003dc 	.word	0x200003dc
 8013dd4:	200003f0 	.word	0x200003f0
 8013dd8:	08015f48 	.word	0x08015f48
 8013ddc:	08015f60 	.word	0x08015f60
 8013de0:	08015f70 	.word	0x08015f70
 8013de4:	08015f84 	.word	0x08015f84
 8013de8:	08015f98 	.word	0x08015f98
 8013dec:	08015fc8 	.word	0x08015fc8
 8013df0:	08015fa4 	.word	0x08015fa4
 8013df4:	08015fac 	.word	0x08015fac
 8013df8:	08015fb0 	.word	0x08015fb0
 8013dfc:	08015fb4 	.word	0x08015fb4
 8013e00:	20000b18 	.word	0x20000b18

08013e04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013e10:	2300      	movs	r3, #0
 8013e12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013e14:	4b0d      	ldr	r3, [pc, #52]	@ (8013e4c <CDC_Transmit_FS+0x48>)
 8013e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d001      	beq.n	8013e2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013e26:	2301      	movs	r3, #1
 8013e28:	e00b      	b.n	8013e42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013e2a:	887b      	ldrh	r3, [r7, #2]
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	6879      	ldr	r1, [r7, #4]
 8013e30:	4806      	ldr	r0, [pc, #24]	@ (8013e4c <CDC_Transmit_FS+0x48>)
 8013e32:	f7fe fcdb 	bl	80127ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013e36:	4805      	ldr	r0, [pc, #20]	@ (8013e4c <CDC_Transmit_FS+0x48>)
 8013e38:	f7fe fd04 	bl	8012844 <USBD_CDC_TransmitPacket>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3710      	adds	r7, #16
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	20000b18 	.word	0x20000b18

08013e50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	4603      	mov	r3, r0
 8013e58:	6039      	str	r1, [r7, #0]
 8013e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	2212      	movs	r2, #18
 8013e60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013e62:	4b03      	ldr	r3, [pc, #12]	@ (8013e70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bc80      	pop	{r7}
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop
 8013e70:	200001a8 	.word	0x200001a8

08013e74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b083      	sub	sp, #12
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	2204      	movs	r2, #4
 8013e84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013e86:	4b03      	ldr	r3, [pc, #12]	@ (8013e94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bc80      	pop	{r7}
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	200001bc 	.word	0x200001bc

08013e98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	6039      	str	r1, [r7, #0]
 8013ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d105      	bne.n	8013eb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013eaa:	683a      	ldr	r2, [r7, #0]
 8013eac:	4907      	ldr	r1, [pc, #28]	@ (8013ecc <USBD_FS_ProductStrDescriptor+0x34>)
 8013eae:	4808      	ldr	r0, [pc, #32]	@ (8013ed0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013eb0:	f7ff fcdb 	bl	801386a <USBD_GetString>
 8013eb4:	e004      	b.n	8013ec0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	4904      	ldr	r1, [pc, #16]	@ (8013ecc <USBD_FS_ProductStrDescriptor+0x34>)
 8013eba:	4805      	ldr	r0, [pc, #20]	@ (8013ed0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013ebc:	f7ff fcd5 	bl	801386a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013ec0:	4b02      	ldr	r3, [pc, #8]	@ (8013ecc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3708      	adds	r7, #8
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	20001620 	.word	0x20001620
 8013ed0:	08015fd4 	.word	0x08015fd4

08013ed4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	4603      	mov	r3, r0
 8013edc:	6039      	str	r1, [r7, #0]
 8013ede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013ee0:	683a      	ldr	r2, [r7, #0]
 8013ee2:	4904      	ldr	r1, [pc, #16]	@ (8013ef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013ee4:	4804      	ldr	r0, [pc, #16]	@ (8013ef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013ee6:	f7ff fcc0 	bl	801386a <USBD_GetString>
  return USBD_StrDesc;
 8013eea:	4b02      	ldr	r3, [pc, #8]	@ (8013ef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	20001620 	.word	0x20001620
 8013ef8:	08015fe8 	.word	0x08015fe8

08013efc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	4603      	mov	r3, r0
 8013f04:	6039      	str	r1, [r7, #0]
 8013f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	221a      	movs	r2, #26
 8013f0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013f0e:	f000 f843 	bl	8013f98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013f12:	4b02      	ldr	r3, [pc, #8]	@ (8013f1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	200001c0 	.word	0x200001c0

08013f20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	4603      	mov	r3, r0
 8013f28:	6039      	str	r1, [r7, #0]
 8013f2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013f2c:	79fb      	ldrb	r3, [r7, #7]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d105      	bne.n	8013f3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013f32:	683a      	ldr	r2, [r7, #0]
 8013f34:	4907      	ldr	r1, [pc, #28]	@ (8013f54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013f36:	4808      	ldr	r0, [pc, #32]	@ (8013f58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013f38:	f7ff fc97 	bl	801386a <USBD_GetString>
 8013f3c:	e004      	b.n	8013f48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013f3e:	683a      	ldr	r2, [r7, #0]
 8013f40:	4904      	ldr	r1, [pc, #16]	@ (8013f54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013f42:	4805      	ldr	r0, [pc, #20]	@ (8013f58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013f44:	f7ff fc91 	bl	801386a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013f48:	4b02      	ldr	r3, [pc, #8]	@ (8013f54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20001620 	.word	0x20001620
 8013f58:	08015ffc 	.word	0x08015ffc

08013f5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	4603      	mov	r3, r0
 8013f64:	6039      	str	r1, [r7, #0]
 8013f66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013f68:	79fb      	ldrb	r3, [r7, #7]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d105      	bne.n	8013f7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013f6e:	683a      	ldr	r2, [r7, #0]
 8013f70:	4907      	ldr	r1, [pc, #28]	@ (8013f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013f72:	4808      	ldr	r0, [pc, #32]	@ (8013f94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013f74:	f7ff fc79 	bl	801386a <USBD_GetString>
 8013f78:	e004      	b.n	8013f84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	4904      	ldr	r1, [pc, #16]	@ (8013f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013f7e:	4805      	ldr	r0, [pc, #20]	@ (8013f94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013f80:	f7ff fc73 	bl	801386a <USBD_GetString>
  }
  return USBD_StrDesc;
 8013f84:	4b02      	ldr	r3, [pc, #8]	@ (8013f90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	20001620 	.word	0x20001620
 8013f94:	08016008 	.word	0x08016008

08013f98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013fdc <Get_SerialNum+0x44>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe0 <Get_SerialNum+0x48>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013faa:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe4 <Get_SerialNum+0x4c>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013fb0:	68fa      	ldr	r2, [r7, #12]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4413      	add	r3, r2
 8013fb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d009      	beq.n	8013fd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013fbe:	2208      	movs	r2, #8
 8013fc0:	4909      	ldr	r1, [pc, #36]	@ (8013fe8 <Get_SerialNum+0x50>)
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	f000 f814 	bl	8013ff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013fc8:	2204      	movs	r2, #4
 8013fca:	4908      	ldr	r1, [pc, #32]	@ (8013fec <Get_SerialNum+0x54>)
 8013fcc:	68b8      	ldr	r0, [r7, #8]
 8013fce:	f000 f80f 	bl	8013ff0 <IntToUnicode>
  }
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	1ffff7e8 	.word	0x1ffff7e8
 8013fe0:	1ffff7ec 	.word	0x1ffff7ec
 8013fe4:	1ffff7f0 	.word	0x1ffff7f0
 8013fe8:	200001c2 	.word	0x200001c2
 8013fec:	200001d2 	.word	0x200001d2

08013ff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b087      	sub	sp, #28
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014002:	2300      	movs	r3, #0
 8014004:	75fb      	strb	r3, [r7, #23]
 8014006:	e027      	b.n	8014058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	0f1b      	lsrs	r3, r3, #28
 801400c:	2b09      	cmp	r3, #9
 801400e:	d80b      	bhi.n	8014028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	0f1b      	lsrs	r3, r3, #28
 8014014:	b2da      	uxtb	r2, r3
 8014016:	7dfb      	ldrb	r3, [r7, #23]
 8014018:	005b      	lsls	r3, r3, #1
 801401a:	4619      	mov	r1, r3
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	440b      	add	r3, r1
 8014020:	3230      	adds	r2, #48	@ 0x30
 8014022:	b2d2      	uxtb	r2, r2
 8014024:	701a      	strb	r2, [r3, #0]
 8014026:	e00a      	b.n	801403e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	0f1b      	lsrs	r3, r3, #28
 801402c:	b2da      	uxtb	r2, r3
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	4619      	mov	r1, r3
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	440b      	add	r3, r1
 8014038:	3237      	adds	r2, #55	@ 0x37
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	011b      	lsls	r3, r3, #4
 8014042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014044:	7dfb      	ldrb	r3, [r7, #23]
 8014046:	005b      	lsls	r3, r3, #1
 8014048:	3301      	adds	r3, #1
 801404a:	68ba      	ldr	r2, [r7, #8]
 801404c:	4413      	add	r3, r2
 801404e:	2200      	movs	r2, #0
 8014050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014052:	7dfb      	ldrb	r3, [r7, #23]
 8014054:	3301      	adds	r3, #1
 8014056:	75fb      	strb	r3, [r7, #23]
 8014058:	7dfa      	ldrb	r2, [r7, #23]
 801405a:	79fb      	ldrb	r3, [r7, #7]
 801405c:	429a      	cmp	r2, r3
 801405e:	d3d3      	bcc.n	8014008 <IntToUnicode+0x18>
  }
}
 8014060:	bf00      	nop
 8014062:	bf00      	nop
 8014064:	371c      	adds	r7, #28
 8014066:	46bd      	mov	sp, r7
 8014068:	bc80      	pop	{r7}
 801406a:	4770      	bx	lr

0801406c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a11      	ldr	r2, [pc, #68]	@ (80140c0 <HAL_PCD_MspInit+0x54>)
 801407a:	4293      	cmp	r3, r2
 801407c:	d11b      	bne.n	80140b6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801407e:	4b11      	ldr	r3, [pc, #68]	@ (80140c4 <HAL_PCD_MspInit+0x58>)
 8014080:	69db      	ldr	r3, [r3, #28]
 8014082:	4a10      	ldr	r2, [pc, #64]	@ (80140c4 <HAL_PCD_MspInit+0x58>)
 8014084:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014088:	61d3      	str	r3, [r2, #28]
 801408a:	4b0e      	ldr	r3, [pc, #56]	@ (80140c4 <HAL_PCD_MspInit+0x58>)
 801408c:	69db      	ldr	r3, [r3, #28]
 801408e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8014092:	60fb      	str	r3, [r7, #12]
 8014094:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8014096:	2200      	movs	r2, #0
 8014098:	2100      	movs	r1, #0
 801409a:	2013      	movs	r0, #19
 801409c:	f7f1 f91f 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80140a0:	2013      	movs	r0, #19
 80140a2:	f7f1 f938 	bl	8005316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80140a6:	2200      	movs	r2, #0
 80140a8:	2100      	movs	r1, #0
 80140aa:	2014      	movs	r0, #20
 80140ac:	f7f1 f917 	bl	80052de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80140b0:	2014      	movs	r0, #20
 80140b2:	f7f1 f930 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80140b6:	bf00      	nop
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	40005c00 	.word	0x40005c00
 80140c4:	40021000 	.word	0x40021000

080140c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80140dc:	4619      	mov	r1, r3
 80140de:	4610      	mov	r0, r2
 80140e0:	f7fe fc95 	bl	8012a0e <USBD_LL_SetupStage>
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	460b      	mov	r3, r1
 80140f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80140fe:	78fa      	ldrb	r2, [r7, #3]
 8014100:	6879      	ldr	r1, [r7, #4]
 8014102:	4613      	mov	r3, r2
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	4413      	add	r3, r2
 8014108:	00db      	lsls	r3, r3, #3
 801410a:	440b      	add	r3, r1
 801410c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	78fb      	ldrb	r3, [r7, #3]
 8014114:	4619      	mov	r1, r3
 8014116:	f7fe fcc7 	bl	8012aa8 <USBD_LL_DataOutStage>
}
 801411a:	bf00      	nop
 801411c:	3708      	adds	r7, #8
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b082      	sub	sp, #8
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	460b      	mov	r3, r1
 801412c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8014134:	78fa      	ldrb	r2, [r7, #3]
 8014136:	6879      	ldr	r1, [r7, #4]
 8014138:	4613      	mov	r3, r2
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	440b      	add	r3, r1
 8014142:	3324      	adds	r3, #36	@ 0x24
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	78fb      	ldrb	r3, [r7, #3]
 8014148:	4619      	mov	r1, r3
 801414a:	f7fe fd1e 	bl	8012b8a <USBD_LL_DataInStage>
}
 801414e:	bf00      	nop
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014156:	b580      	push	{r7, lr}
 8014158:	b082      	sub	sp, #8
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014164:	4618      	mov	r0, r3
 8014166:	f7fe fe2e 	bl	8012dc6 <USBD_LL_SOF>
}
 801416a:	bf00      	nop
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}

08014172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014172:	b580      	push	{r7, lr}
 8014174:	b084      	sub	sp, #16
 8014176:	af00      	add	r7, sp, #0
 8014178:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801417a:	2301      	movs	r3, #1
 801417c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	799b      	ldrb	r3, [r3, #6]
 8014182:	2b02      	cmp	r3, #2
 8014184:	d001      	beq.n	801418a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014186:	f7ee f9eb 	bl	8002560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014190:	7bfa      	ldrb	r2, [r7, #15]
 8014192:	4611      	mov	r1, r2
 8014194:	4618      	mov	r0, r3
 8014196:	f7fe fdde 	bl	8012d56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7fe fd97 	bl	8012cd4 <USBD_LL_Reset>
}
 80141a6:	bf00      	nop
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
	...

080141b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fe fdd8 	bl	8012d74 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	7a9b      	ldrb	r3, [r3, #10]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d005      	beq.n	80141d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80141cc:	4b04      	ldr	r3, [pc, #16]	@ (80141e0 <HAL_PCD_SuspendCallback+0x30>)
 80141ce:	691b      	ldr	r3, [r3, #16]
 80141d0:	4a03      	ldr	r2, [pc, #12]	@ (80141e0 <HAL_PCD_SuspendCallback+0x30>)
 80141d2:	f043 0306 	orr.w	r3, r3, #6
 80141d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	e000ed00 	.word	0xe000ed00

080141e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7fe fdd2 	bl	8012d9c <USBD_LL_Resume>
}
 80141f8:	bf00      	nop
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}

08014200 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014208:	4a28      	ldr	r2, [pc, #160]	@ (80142ac <USBD_LL_Init+0xac>)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4a26      	ldr	r2, [pc, #152]	@ (80142ac <USBD_LL_Init+0xac>)
 8014214:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8014218:	4b24      	ldr	r3, [pc, #144]	@ (80142ac <USBD_LL_Init+0xac>)
 801421a:	4a25      	ldr	r2, [pc, #148]	@ (80142b0 <USBD_LL_Init+0xb0>)
 801421c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801421e:	4b23      	ldr	r3, [pc, #140]	@ (80142ac <USBD_LL_Init+0xac>)
 8014220:	2208      	movs	r2, #8
 8014222:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014224:	4b21      	ldr	r3, [pc, #132]	@ (80142ac <USBD_LL_Init+0xac>)
 8014226:	2202      	movs	r2, #2
 8014228:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801422a:	4b20      	ldr	r3, [pc, #128]	@ (80142ac <USBD_LL_Init+0xac>)
 801422c:	2200      	movs	r2, #0
 801422e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014230:	4b1e      	ldr	r3, [pc, #120]	@ (80142ac <USBD_LL_Init+0xac>)
 8014232:	2200      	movs	r2, #0
 8014234:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014236:	4b1d      	ldr	r3, [pc, #116]	@ (80142ac <USBD_LL_Init+0xac>)
 8014238:	2200      	movs	r2, #0
 801423a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801423c:	481b      	ldr	r0, [pc, #108]	@ (80142ac <USBD_LL_Init+0xac>)
 801423e:	f7f4 fc9a 	bl	8008b76 <HAL_PCD_Init>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d001      	beq.n	801424c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8014248:	f7ee f98a 	bl	8002560 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014252:	2318      	movs	r3, #24
 8014254:	2200      	movs	r2, #0
 8014256:	2100      	movs	r1, #0
 8014258:	f7f6 f9ab 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014262:	2358      	movs	r3, #88	@ 0x58
 8014264:	2200      	movs	r2, #0
 8014266:	2180      	movs	r1, #128	@ 0x80
 8014268:	f7f6 f9a3 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014272:	23c0      	movs	r3, #192	@ 0xc0
 8014274:	2200      	movs	r2, #0
 8014276:	2181      	movs	r1, #129	@ 0x81
 8014278:	f7f6 f99b 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014282:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8014286:	2200      	movs	r2, #0
 8014288:	2101      	movs	r1, #1
 801428a:	f7f6 f992 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014298:	2200      	movs	r2, #0
 801429a:	2182      	movs	r1, #130	@ 0x82
 801429c:	f7f6 f989 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20001820 	.word	0x20001820
 80142b0:	40005c00 	.word	0x40005c00

080142b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b084      	sub	sp, #16
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142bc:	2300      	movs	r3, #0
 80142be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142c0:	2300      	movs	r3, #0
 80142c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7f4 fd49 	bl	8008d62 <HAL_PCD_Start>
 80142d0:	4603      	mov	r3, r0
 80142d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142d4:	7bfb      	ldrb	r3, [r7, #15]
 80142d6:	4618      	mov	r0, r3
 80142d8:	f000 f94e 	bl	8014578 <USBD_Get_USB_Status>
 80142dc:	4603      	mov	r3, r0
 80142de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
 80142f2:	4608      	mov	r0, r1
 80142f4:	4611      	mov	r1, r2
 80142f6:	461a      	mov	r2, r3
 80142f8:	4603      	mov	r3, r0
 80142fa:	70fb      	strb	r3, [r7, #3]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70bb      	strb	r3, [r7, #2]
 8014300:	4613      	mov	r3, r2
 8014302:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014304:	2300      	movs	r3, #0
 8014306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014308:	2300      	movs	r3, #0
 801430a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8014312:	78bb      	ldrb	r3, [r7, #2]
 8014314:	883a      	ldrh	r2, [r7, #0]
 8014316:	78f9      	ldrb	r1, [r7, #3]
 8014318:	f7f4 fe9d 	bl	8009056 <HAL_PCD_EP_Open>
 801431c:	4603      	mov	r3, r0
 801431e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014320:	7bfb      	ldrb	r3, [r7, #15]
 8014322:	4618      	mov	r0, r3
 8014324:	f000 f928 	bl	8014578 <USBD_Get_USB_Status>
 8014328:	4603      	mov	r3, r0
 801432a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801432c:	7bbb      	ldrb	r3, [r7, #14]
}
 801432e:	4618      	mov	r0, r3
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}

08014336 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014336:	b580      	push	{r7, lr}
 8014338:	b084      	sub	sp, #16
 801433a:	af00      	add	r7, sp, #0
 801433c:	6078      	str	r0, [r7, #4]
 801433e:	460b      	mov	r3, r1
 8014340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014342:	2300      	movs	r3, #0
 8014344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014346:	2300      	movs	r3, #0
 8014348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014350:	78fa      	ldrb	r2, [r7, #3]
 8014352:	4611      	mov	r1, r2
 8014354:	4618      	mov	r0, r3
 8014356:	f7f4 fedb 	bl	8009110 <HAL_PCD_EP_Close>
 801435a:	4603      	mov	r3, r0
 801435c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801435e:	7bfb      	ldrb	r3, [r7, #15]
 8014360:	4618      	mov	r0, r3
 8014362:	f000 f909 	bl	8014578 <USBD_Get_USB_Status>
 8014366:	4603      	mov	r3, r0
 8014368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801436a:	7bbb      	ldrb	r3, [r7, #14]
}
 801436c:	4618      	mov	r0, r3
 801436e:	3710      	adds	r7, #16
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	460b      	mov	r3, r1
 801437e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014380:	2300      	movs	r3, #0
 8014382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014384:	2300      	movs	r3, #0
 8014386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801438e:	78fa      	ldrb	r2, [r7, #3]
 8014390:	4611      	mov	r1, r2
 8014392:	4618      	mov	r0, r3
 8014394:	f7f4 ff83 	bl	800929e <HAL_PCD_EP_SetStall>
 8014398:	4603      	mov	r3, r0
 801439a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801439c:	7bfb      	ldrb	r3, [r7, #15]
 801439e:	4618      	mov	r0, r3
 80143a0:	f000 f8ea 	bl	8014578 <USBD_Get_USB_Status>
 80143a4:	4603      	mov	r3, r0
 80143a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b084      	sub	sp, #16
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
 80143ba:	460b      	mov	r3, r1
 80143bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143c2:	2300      	movs	r3, #0
 80143c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80143cc:	78fa      	ldrb	r2, [r7, #3]
 80143ce:	4611      	mov	r1, r2
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7f4 ffc4 	bl	800935e <HAL_PCD_EP_ClrStall>
 80143d6:	4603      	mov	r3, r0
 80143d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143da:	7bfb      	ldrb	r3, [r7, #15]
 80143dc:	4618      	mov	r0, r3
 80143de:	f000 f8cb 	bl	8014578 <USBD_Get_USB_Status>
 80143e2:	4603      	mov	r3, r0
 80143e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	460b      	mov	r3, r1
 80143fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014402:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014408:	2b00      	cmp	r3, #0
 801440a:	da0b      	bge.n	8014424 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801440c:	78fb      	ldrb	r3, [r7, #3]
 801440e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014412:	68f9      	ldr	r1, [r7, #12]
 8014414:	4613      	mov	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	4413      	add	r3, r2
 801441a:	00db      	lsls	r3, r3, #3
 801441c:	440b      	add	r3, r1
 801441e:	3312      	adds	r3, #18
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	e00b      	b.n	801443c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014424:	78fb      	ldrb	r3, [r7, #3]
 8014426:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801442a:	68f9      	ldr	r1, [r7, #12]
 801442c:	4613      	mov	r3, r2
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	4413      	add	r3, r2
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	440b      	add	r3, r1
 8014436:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801443a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801443c:	4618      	mov	r0, r3
 801443e:	3714      	adds	r7, #20
 8014440:	46bd      	mov	sp, r7
 8014442:	bc80      	pop	{r7}
 8014444:	4770      	bx	lr

08014446 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014446:	b580      	push	{r7, lr}
 8014448:	b084      	sub	sp, #16
 801444a:	af00      	add	r7, sp, #0
 801444c:	6078      	str	r0, [r7, #4]
 801444e:	460b      	mov	r3, r1
 8014450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014452:	2300      	movs	r3, #0
 8014454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014456:	2300      	movs	r3, #0
 8014458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014460:	78fa      	ldrb	r2, [r7, #3]
 8014462:	4611      	mov	r1, r2
 8014464:	4618      	mov	r0, r3
 8014466:	f7f4 fdd2 	bl	800900e <HAL_PCD_SetAddress>
 801446a:	4603      	mov	r3, r0
 801446c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801446e:	7bfb      	ldrb	r3, [r7, #15]
 8014470:	4618      	mov	r0, r3
 8014472:	f000 f881 	bl	8014578 <USBD_Get_USB_Status>
 8014476:	4603      	mov	r3, r0
 8014478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801447a:	7bbb      	ldrb	r3, [r7, #14]
}
 801447c:	4618      	mov	r0, r3
 801447e:	3710      	adds	r7, #16
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b086      	sub	sp, #24
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	607a      	str	r2, [r7, #4]
 801448e:	461a      	mov	r2, r3
 8014490:	460b      	mov	r3, r1
 8014492:	72fb      	strb	r3, [r7, #11]
 8014494:	4613      	mov	r3, r2
 8014496:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801449c:	2300      	movs	r3, #0
 801449e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80144a6:	893b      	ldrh	r3, [r7, #8]
 80144a8:	7af9      	ldrb	r1, [r7, #11]
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	f7f4 fec0 	bl	8009230 <HAL_PCD_EP_Transmit>
 80144b0:	4603      	mov	r3, r0
 80144b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144b4:	7dfb      	ldrb	r3, [r7, #23]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f000 f85e 	bl	8014578 <USBD_Get_USB_Status>
 80144bc:	4603      	mov	r3, r0
 80144be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80144c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3718      	adds	r7, #24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}

080144ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80144ca:	b580      	push	{r7, lr}
 80144cc:	b086      	sub	sp, #24
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	60f8      	str	r0, [r7, #12]
 80144d2:	607a      	str	r2, [r7, #4]
 80144d4:	461a      	mov	r2, r3
 80144d6:	460b      	mov	r3, r1
 80144d8:	72fb      	strb	r3, [r7, #11]
 80144da:	4613      	mov	r3, r2
 80144dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144de:	2300      	movs	r3, #0
 80144e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144e2:	2300      	movs	r3, #0
 80144e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80144ec:	893b      	ldrh	r3, [r7, #8]
 80144ee:	7af9      	ldrb	r1, [r7, #11]
 80144f0:	687a      	ldr	r2, [r7, #4]
 80144f2:	f7f4 fe55 	bl	80091a0 <HAL_PCD_EP_Receive>
 80144f6:	4603      	mov	r3, r0
 80144f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144fa:	7dfb      	ldrb	r3, [r7, #23]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 f83b 	bl	8014578 <USBD_Get_USB_Status>
 8014502:	4603      	mov	r3, r0
 8014504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014506:	7dbb      	ldrb	r3, [r7, #22]
}
 8014508:	4618      	mov	r0, r3
 801450a:	3718      	adds	r7, #24
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}

08014510 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	460b      	mov	r3, r1
 801451a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8014522:	78fa      	ldrb	r2, [r7, #3]
 8014524:	4611      	mov	r1, r2
 8014526:	4618      	mov	r0, r3
 8014528:	f7f4 fe6b 	bl	8009202 <HAL_PCD_EP_GetRxCount>
 801452c:	4603      	mov	r3, r0
}
 801452e:	4618      	mov	r0, r3
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
	...

08014538 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014540:	4b02      	ldr	r3, [pc, #8]	@ (801454c <USBD_static_malloc+0x14>)
}
 8014542:	4618      	mov	r0, r3
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	bc80      	pop	{r7}
 801454a:	4770      	bx	lr
 801454c:	20001af8 	.word	0x20001af8

08014550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]

}
 8014558:	bf00      	nop
 801455a:	370c      	adds	r7, #12
 801455c:	46bd      	mov	sp, r7
 801455e:	bc80      	pop	{r7}
 8014560:	4770      	bx	lr

08014562 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014562:	b480      	push	{r7}
 8014564:	b083      	sub	sp, #12
 8014566:	af00      	add	r7, sp, #0
 8014568:	6078      	str	r0, [r7, #4]
 801456a:	460b      	mov	r3, r1
 801456c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801456e:	bf00      	nop
 8014570:	370c      	adds	r7, #12
 8014572:	46bd      	mov	sp, r7
 8014574:	bc80      	pop	{r7}
 8014576:	4770      	bx	lr

08014578 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014578:	b480      	push	{r7}
 801457a:	b085      	sub	sp, #20
 801457c:	af00      	add	r7, sp, #0
 801457e:	4603      	mov	r3, r0
 8014580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014582:	2300      	movs	r3, #0
 8014584:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014586:	79fb      	ldrb	r3, [r7, #7]
 8014588:	2b03      	cmp	r3, #3
 801458a:	d817      	bhi.n	80145bc <USBD_Get_USB_Status+0x44>
 801458c:	a201      	add	r2, pc, #4	@ (adr r2, 8014594 <USBD_Get_USB_Status+0x1c>)
 801458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014592:	bf00      	nop
 8014594:	080145a5 	.word	0x080145a5
 8014598:	080145ab 	.word	0x080145ab
 801459c:	080145b1 	.word	0x080145b1
 80145a0:	080145b7 	.word	0x080145b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80145a4:	2300      	movs	r3, #0
 80145a6:	73fb      	strb	r3, [r7, #15]
    break;
 80145a8:	e00b      	b.n	80145c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145aa:	2302      	movs	r3, #2
 80145ac:	73fb      	strb	r3, [r7, #15]
    break;
 80145ae:	e008      	b.n	80145c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145b0:	2301      	movs	r3, #1
 80145b2:	73fb      	strb	r3, [r7, #15]
    break;
 80145b4:	e005      	b.n	80145c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145b6:	2302      	movs	r3, #2
 80145b8:	73fb      	strb	r3, [r7, #15]
    break;
 80145ba:	e002      	b.n	80145c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80145bc:	2302      	movs	r3, #2
 80145be:	73fb      	strb	r3, [r7, #15]
    break;
 80145c0:	bf00      	nop
  }
  return usb_status;
 80145c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3714      	adds	r7, #20
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bc80      	pop	{r7}
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop

080145d0 <atoi>:
 80145d0:	220a      	movs	r2, #10
 80145d2:	2100      	movs	r1, #0
 80145d4:	f000 b928 	b.w	8014828 <strtol>

080145d8 <sbrk_aligned>:
 80145d8:	b570      	push	{r4, r5, r6, lr}
 80145da:	4e0f      	ldr	r6, [pc, #60]	@ (8014618 <sbrk_aligned+0x40>)
 80145dc:	460c      	mov	r4, r1
 80145de:	6831      	ldr	r1, [r6, #0]
 80145e0:	4605      	mov	r5, r0
 80145e2:	b911      	cbnz	r1, 80145ea <sbrk_aligned+0x12>
 80145e4:	f000 f990 	bl	8014908 <_sbrk_r>
 80145e8:	6030      	str	r0, [r6, #0]
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f000 f98b 	bl	8014908 <_sbrk_r>
 80145f2:	1c43      	adds	r3, r0, #1
 80145f4:	d103      	bne.n	80145fe <sbrk_aligned+0x26>
 80145f6:	f04f 34ff 	mov.w	r4, #4294967295
 80145fa:	4620      	mov	r0, r4
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
 80145fe:	1cc4      	adds	r4, r0, #3
 8014600:	f024 0403 	bic.w	r4, r4, #3
 8014604:	42a0      	cmp	r0, r4
 8014606:	d0f8      	beq.n	80145fa <sbrk_aligned+0x22>
 8014608:	1a21      	subs	r1, r4, r0
 801460a:	4628      	mov	r0, r5
 801460c:	f000 f97c 	bl	8014908 <_sbrk_r>
 8014610:	3001      	adds	r0, #1
 8014612:	d1f2      	bne.n	80145fa <sbrk_aligned+0x22>
 8014614:	e7ef      	b.n	80145f6 <sbrk_aligned+0x1e>
 8014616:	bf00      	nop
 8014618:	20001d18 	.word	0x20001d18

0801461c <_malloc_r>:
 801461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014620:	1ccd      	adds	r5, r1, #3
 8014622:	f025 0503 	bic.w	r5, r5, #3
 8014626:	3508      	adds	r5, #8
 8014628:	2d0c      	cmp	r5, #12
 801462a:	bf38      	it	cc
 801462c:	250c      	movcc	r5, #12
 801462e:	2d00      	cmp	r5, #0
 8014630:	4606      	mov	r6, r0
 8014632:	db01      	blt.n	8014638 <_malloc_r+0x1c>
 8014634:	42a9      	cmp	r1, r5
 8014636:	d904      	bls.n	8014642 <_malloc_r+0x26>
 8014638:	230c      	movs	r3, #12
 801463a:	6033      	str	r3, [r6, #0]
 801463c:	2000      	movs	r0, #0
 801463e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014718 <_malloc_r+0xfc>
 8014646:	f000 f869 	bl	801471c <__malloc_lock>
 801464a:	f8d8 3000 	ldr.w	r3, [r8]
 801464e:	461c      	mov	r4, r3
 8014650:	bb44      	cbnz	r4, 80146a4 <_malloc_r+0x88>
 8014652:	4629      	mov	r1, r5
 8014654:	4630      	mov	r0, r6
 8014656:	f7ff ffbf 	bl	80145d8 <sbrk_aligned>
 801465a:	1c43      	adds	r3, r0, #1
 801465c:	4604      	mov	r4, r0
 801465e:	d158      	bne.n	8014712 <_malloc_r+0xf6>
 8014660:	f8d8 4000 	ldr.w	r4, [r8]
 8014664:	4627      	mov	r7, r4
 8014666:	2f00      	cmp	r7, #0
 8014668:	d143      	bne.n	80146f2 <_malloc_r+0xd6>
 801466a:	2c00      	cmp	r4, #0
 801466c:	d04b      	beq.n	8014706 <_malloc_r+0xea>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	4639      	mov	r1, r7
 8014672:	4630      	mov	r0, r6
 8014674:	eb04 0903 	add.w	r9, r4, r3
 8014678:	f000 f946 	bl	8014908 <_sbrk_r>
 801467c:	4581      	cmp	r9, r0
 801467e:	d142      	bne.n	8014706 <_malloc_r+0xea>
 8014680:	6821      	ldr	r1, [r4, #0]
 8014682:	4630      	mov	r0, r6
 8014684:	1a6d      	subs	r5, r5, r1
 8014686:	4629      	mov	r1, r5
 8014688:	f7ff ffa6 	bl	80145d8 <sbrk_aligned>
 801468c:	3001      	adds	r0, #1
 801468e:	d03a      	beq.n	8014706 <_malloc_r+0xea>
 8014690:	6823      	ldr	r3, [r4, #0]
 8014692:	442b      	add	r3, r5
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	f8d8 3000 	ldr.w	r3, [r8]
 801469a:	685a      	ldr	r2, [r3, #4]
 801469c:	bb62      	cbnz	r2, 80146f8 <_malloc_r+0xdc>
 801469e:	f8c8 7000 	str.w	r7, [r8]
 80146a2:	e00f      	b.n	80146c4 <_malloc_r+0xa8>
 80146a4:	6822      	ldr	r2, [r4, #0]
 80146a6:	1b52      	subs	r2, r2, r5
 80146a8:	d420      	bmi.n	80146ec <_malloc_r+0xd0>
 80146aa:	2a0b      	cmp	r2, #11
 80146ac:	d917      	bls.n	80146de <_malloc_r+0xc2>
 80146ae:	1961      	adds	r1, r4, r5
 80146b0:	42a3      	cmp	r3, r4
 80146b2:	6025      	str	r5, [r4, #0]
 80146b4:	bf18      	it	ne
 80146b6:	6059      	strne	r1, [r3, #4]
 80146b8:	6863      	ldr	r3, [r4, #4]
 80146ba:	bf08      	it	eq
 80146bc:	f8c8 1000 	streq.w	r1, [r8]
 80146c0:	5162      	str	r2, [r4, r5]
 80146c2:	604b      	str	r3, [r1, #4]
 80146c4:	4630      	mov	r0, r6
 80146c6:	f000 f82f 	bl	8014728 <__malloc_unlock>
 80146ca:	f104 000b 	add.w	r0, r4, #11
 80146ce:	1d23      	adds	r3, r4, #4
 80146d0:	f020 0007 	bic.w	r0, r0, #7
 80146d4:	1ac2      	subs	r2, r0, r3
 80146d6:	bf1c      	itt	ne
 80146d8:	1a1b      	subne	r3, r3, r0
 80146da:	50a3      	strne	r3, [r4, r2]
 80146dc:	e7af      	b.n	801463e <_malloc_r+0x22>
 80146de:	6862      	ldr	r2, [r4, #4]
 80146e0:	42a3      	cmp	r3, r4
 80146e2:	bf0c      	ite	eq
 80146e4:	f8c8 2000 	streq.w	r2, [r8]
 80146e8:	605a      	strne	r2, [r3, #4]
 80146ea:	e7eb      	b.n	80146c4 <_malloc_r+0xa8>
 80146ec:	4623      	mov	r3, r4
 80146ee:	6864      	ldr	r4, [r4, #4]
 80146f0:	e7ae      	b.n	8014650 <_malloc_r+0x34>
 80146f2:	463c      	mov	r4, r7
 80146f4:	687f      	ldr	r7, [r7, #4]
 80146f6:	e7b6      	b.n	8014666 <_malloc_r+0x4a>
 80146f8:	461a      	mov	r2, r3
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	42a3      	cmp	r3, r4
 80146fe:	d1fb      	bne.n	80146f8 <_malloc_r+0xdc>
 8014700:	2300      	movs	r3, #0
 8014702:	6053      	str	r3, [r2, #4]
 8014704:	e7de      	b.n	80146c4 <_malloc_r+0xa8>
 8014706:	230c      	movs	r3, #12
 8014708:	4630      	mov	r0, r6
 801470a:	6033      	str	r3, [r6, #0]
 801470c:	f000 f80c 	bl	8014728 <__malloc_unlock>
 8014710:	e794      	b.n	801463c <_malloc_r+0x20>
 8014712:	6005      	str	r5, [r0, #0]
 8014714:	e7d6      	b.n	80146c4 <_malloc_r+0xa8>
 8014716:	bf00      	nop
 8014718:	20001d1c 	.word	0x20001d1c

0801471c <__malloc_lock>:
 801471c:	4801      	ldr	r0, [pc, #4]	@ (8014724 <__malloc_lock+0x8>)
 801471e:	f000 b92d 	b.w	801497c <__retarget_lock_acquire_recursive>
 8014722:	bf00      	nop
 8014724:	20001e5c 	.word	0x20001e5c

08014728 <__malloc_unlock>:
 8014728:	4801      	ldr	r0, [pc, #4]	@ (8014730 <__malloc_unlock+0x8>)
 801472a:	f000 b928 	b.w	801497e <__retarget_lock_release_recursive>
 801472e:	bf00      	nop
 8014730:	20001e5c 	.word	0x20001e5c

08014734 <_strtol_l.isra.0>:
 8014734:	2b24      	cmp	r3, #36	@ 0x24
 8014736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801473a:	4686      	mov	lr, r0
 801473c:	4690      	mov	r8, r2
 801473e:	d801      	bhi.n	8014744 <_strtol_l.isra.0+0x10>
 8014740:	2b01      	cmp	r3, #1
 8014742:	d106      	bne.n	8014752 <_strtol_l.isra.0+0x1e>
 8014744:	f000 f8f0 	bl	8014928 <__errno>
 8014748:	2316      	movs	r3, #22
 801474a:	6003      	str	r3, [r0, #0]
 801474c:	2000      	movs	r0, #0
 801474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014752:	460d      	mov	r5, r1
 8014754:	4833      	ldr	r0, [pc, #204]	@ (8014824 <_strtol_l.isra.0+0xf0>)
 8014756:	462a      	mov	r2, r5
 8014758:	f815 4b01 	ldrb.w	r4, [r5], #1
 801475c:	5d06      	ldrb	r6, [r0, r4]
 801475e:	f016 0608 	ands.w	r6, r6, #8
 8014762:	d1f8      	bne.n	8014756 <_strtol_l.isra.0+0x22>
 8014764:	2c2d      	cmp	r4, #45	@ 0x2d
 8014766:	d110      	bne.n	801478a <_strtol_l.isra.0+0x56>
 8014768:	2601      	movs	r6, #1
 801476a:	782c      	ldrb	r4, [r5, #0]
 801476c:	1c95      	adds	r5, r2, #2
 801476e:	f033 0210 	bics.w	r2, r3, #16
 8014772:	d115      	bne.n	80147a0 <_strtol_l.isra.0+0x6c>
 8014774:	2c30      	cmp	r4, #48	@ 0x30
 8014776:	d10d      	bne.n	8014794 <_strtol_l.isra.0+0x60>
 8014778:	782a      	ldrb	r2, [r5, #0]
 801477a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801477e:	2a58      	cmp	r2, #88	@ 0x58
 8014780:	d108      	bne.n	8014794 <_strtol_l.isra.0+0x60>
 8014782:	786c      	ldrb	r4, [r5, #1]
 8014784:	3502      	adds	r5, #2
 8014786:	2310      	movs	r3, #16
 8014788:	e00a      	b.n	80147a0 <_strtol_l.isra.0+0x6c>
 801478a:	2c2b      	cmp	r4, #43	@ 0x2b
 801478c:	bf04      	itt	eq
 801478e:	782c      	ldrbeq	r4, [r5, #0]
 8014790:	1c95      	addeq	r5, r2, #2
 8014792:	e7ec      	b.n	801476e <_strtol_l.isra.0+0x3a>
 8014794:	2b00      	cmp	r3, #0
 8014796:	d1f6      	bne.n	8014786 <_strtol_l.isra.0+0x52>
 8014798:	2c30      	cmp	r4, #48	@ 0x30
 801479a:	bf14      	ite	ne
 801479c:	230a      	movne	r3, #10
 801479e:	2308      	moveq	r3, #8
 80147a0:	2200      	movs	r2, #0
 80147a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80147a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147aa:	fbbc f9f3 	udiv	r9, ip, r3
 80147ae:	4610      	mov	r0, r2
 80147b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80147b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80147b8:	2f09      	cmp	r7, #9
 80147ba:	d80f      	bhi.n	80147dc <_strtol_l.isra.0+0xa8>
 80147bc:	463c      	mov	r4, r7
 80147be:	42a3      	cmp	r3, r4
 80147c0:	dd1b      	ble.n	80147fa <_strtol_l.isra.0+0xc6>
 80147c2:	1c57      	adds	r7, r2, #1
 80147c4:	d007      	beq.n	80147d6 <_strtol_l.isra.0+0xa2>
 80147c6:	4581      	cmp	r9, r0
 80147c8:	d314      	bcc.n	80147f4 <_strtol_l.isra.0+0xc0>
 80147ca:	d101      	bne.n	80147d0 <_strtol_l.isra.0+0x9c>
 80147cc:	45a2      	cmp	sl, r4
 80147ce:	db11      	blt.n	80147f4 <_strtol_l.isra.0+0xc0>
 80147d0:	2201      	movs	r2, #1
 80147d2:	fb00 4003 	mla	r0, r0, r3, r4
 80147d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147da:	e7eb      	b.n	80147b4 <_strtol_l.isra.0+0x80>
 80147dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80147e0:	2f19      	cmp	r7, #25
 80147e2:	d801      	bhi.n	80147e8 <_strtol_l.isra.0+0xb4>
 80147e4:	3c37      	subs	r4, #55	@ 0x37
 80147e6:	e7ea      	b.n	80147be <_strtol_l.isra.0+0x8a>
 80147e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80147ec:	2f19      	cmp	r7, #25
 80147ee:	d804      	bhi.n	80147fa <_strtol_l.isra.0+0xc6>
 80147f0:	3c57      	subs	r4, #87	@ 0x57
 80147f2:	e7e4      	b.n	80147be <_strtol_l.isra.0+0x8a>
 80147f4:	f04f 32ff 	mov.w	r2, #4294967295
 80147f8:	e7ed      	b.n	80147d6 <_strtol_l.isra.0+0xa2>
 80147fa:	1c53      	adds	r3, r2, #1
 80147fc:	d108      	bne.n	8014810 <_strtol_l.isra.0+0xdc>
 80147fe:	2322      	movs	r3, #34	@ 0x22
 8014800:	4660      	mov	r0, ip
 8014802:	f8ce 3000 	str.w	r3, [lr]
 8014806:	f1b8 0f00 	cmp.w	r8, #0
 801480a:	d0a0      	beq.n	801474e <_strtol_l.isra.0+0x1a>
 801480c:	1e69      	subs	r1, r5, #1
 801480e:	e006      	b.n	801481e <_strtol_l.isra.0+0xea>
 8014810:	b106      	cbz	r6, 8014814 <_strtol_l.isra.0+0xe0>
 8014812:	4240      	negs	r0, r0
 8014814:	f1b8 0f00 	cmp.w	r8, #0
 8014818:	d099      	beq.n	801474e <_strtol_l.isra.0+0x1a>
 801481a:	2a00      	cmp	r2, #0
 801481c:	d1f6      	bne.n	801480c <_strtol_l.isra.0+0xd8>
 801481e:	f8c8 1000 	str.w	r1, [r8]
 8014822:	e794      	b.n	801474e <_strtol_l.isra.0+0x1a>
 8014824:	08017523 	.word	0x08017523

08014828 <strtol>:
 8014828:	4613      	mov	r3, r2
 801482a:	460a      	mov	r2, r1
 801482c:	4601      	mov	r1, r0
 801482e:	4802      	ldr	r0, [pc, #8]	@ (8014838 <strtol+0x10>)
 8014830:	6800      	ldr	r0, [r0, #0]
 8014832:	f7ff bf7f 	b.w	8014734 <_strtol_l.isra.0>
 8014836:	bf00      	nop
 8014838:	200001dc 	.word	0x200001dc

0801483c <sniprintf>:
 801483c:	b40c      	push	{r2, r3}
 801483e:	b530      	push	{r4, r5, lr}
 8014840:	4b18      	ldr	r3, [pc, #96]	@ (80148a4 <sniprintf+0x68>)
 8014842:	1e0c      	subs	r4, r1, #0
 8014844:	681d      	ldr	r5, [r3, #0]
 8014846:	b09d      	sub	sp, #116	@ 0x74
 8014848:	da08      	bge.n	801485c <sniprintf+0x20>
 801484a:	238b      	movs	r3, #139	@ 0x8b
 801484c:	f04f 30ff 	mov.w	r0, #4294967295
 8014850:	602b      	str	r3, [r5, #0]
 8014852:	b01d      	add	sp, #116	@ 0x74
 8014854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014858:	b002      	add	sp, #8
 801485a:	4770      	bx	lr
 801485c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014864:	f04f 0300 	mov.w	r3, #0
 8014868:	931b      	str	r3, [sp, #108]	@ 0x6c
 801486a:	bf0c      	ite	eq
 801486c:	4623      	moveq	r3, r4
 801486e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014872:	9304      	str	r3, [sp, #16]
 8014874:	9307      	str	r3, [sp, #28]
 8014876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801487a:	9002      	str	r0, [sp, #8]
 801487c:	9006      	str	r0, [sp, #24]
 801487e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014882:	4628      	mov	r0, r5
 8014884:	ab21      	add	r3, sp, #132	@ 0x84
 8014886:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014888:	a902      	add	r1, sp, #8
 801488a:	9301      	str	r3, [sp, #4]
 801488c:	f000 f92a 	bl	8014ae4 <_svfiprintf_r>
 8014890:	1c43      	adds	r3, r0, #1
 8014892:	bfbc      	itt	lt
 8014894:	238b      	movlt	r3, #139	@ 0x8b
 8014896:	602b      	strlt	r3, [r5, #0]
 8014898:	2c00      	cmp	r4, #0
 801489a:	d0da      	beq.n	8014852 <sniprintf+0x16>
 801489c:	2200      	movs	r2, #0
 801489e:	9b02      	ldr	r3, [sp, #8]
 80148a0:	701a      	strb	r2, [r3, #0]
 80148a2:	e7d6      	b.n	8014852 <sniprintf+0x16>
 80148a4:	200001dc 	.word	0x200001dc

080148a8 <memset>:
 80148a8:	4603      	mov	r3, r0
 80148aa:	4402      	add	r2, r0
 80148ac:	4293      	cmp	r3, r2
 80148ae:	d100      	bne.n	80148b2 <memset+0xa>
 80148b0:	4770      	bx	lr
 80148b2:	f803 1b01 	strb.w	r1, [r3], #1
 80148b6:	e7f9      	b.n	80148ac <memset+0x4>

080148b8 <strncmp>:
 80148b8:	b510      	push	{r4, lr}
 80148ba:	b16a      	cbz	r2, 80148d8 <strncmp+0x20>
 80148bc:	3901      	subs	r1, #1
 80148be:	1884      	adds	r4, r0, r2
 80148c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d103      	bne.n	80148d4 <strncmp+0x1c>
 80148cc:	42a0      	cmp	r0, r4
 80148ce:	d001      	beq.n	80148d4 <strncmp+0x1c>
 80148d0:	2a00      	cmp	r2, #0
 80148d2:	d1f5      	bne.n	80148c0 <strncmp+0x8>
 80148d4:	1ad0      	subs	r0, r2, r3
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	4610      	mov	r0, r2
 80148da:	e7fc      	b.n	80148d6 <strncmp+0x1e>

080148dc <strstr>:
 80148dc:	780a      	ldrb	r2, [r1, #0]
 80148de:	b570      	push	{r4, r5, r6, lr}
 80148e0:	b96a      	cbnz	r2, 80148fe <strstr+0x22>
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d109      	bne.n	80148fc <strstr+0x20>
 80148e8:	460c      	mov	r4, r1
 80148ea:	4605      	mov	r5, r0
 80148ec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d0f6      	beq.n	80148e2 <strstr+0x6>
 80148f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80148f8:	429e      	cmp	r6, r3
 80148fa:	d0f7      	beq.n	80148ec <strstr+0x10>
 80148fc:	3001      	adds	r0, #1
 80148fe:	7803      	ldrb	r3, [r0, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d1ef      	bne.n	80148e4 <strstr+0x8>
 8014904:	4618      	mov	r0, r3
 8014906:	e7ec      	b.n	80148e2 <strstr+0x6>

08014908 <_sbrk_r>:
 8014908:	b538      	push	{r3, r4, r5, lr}
 801490a:	2300      	movs	r3, #0
 801490c:	4d05      	ldr	r5, [pc, #20]	@ (8014924 <_sbrk_r+0x1c>)
 801490e:	4604      	mov	r4, r0
 8014910:	4608      	mov	r0, r1
 8014912:	602b      	str	r3, [r5, #0]
 8014914:	f7f0 f8ee 	bl	8004af4 <_sbrk>
 8014918:	1c43      	adds	r3, r0, #1
 801491a:	d102      	bne.n	8014922 <_sbrk_r+0x1a>
 801491c:	682b      	ldr	r3, [r5, #0]
 801491e:	b103      	cbz	r3, 8014922 <_sbrk_r+0x1a>
 8014920:	6023      	str	r3, [r4, #0]
 8014922:	bd38      	pop	{r3, r4, r5, pc}
 8014924:	20001e58 	.word	0x20001e58

08014928 <__errno>:
 8014928:	4b01      	ldr	r3, [pc, #4]	@ (8014930 <__errno+0x8>)
 801492a:	6818      	ldr	r0, [r3, #0]
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	200001dc 	.word	0x200001dc

08014934 <__libc_init_array>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	2600      	movs	r6, #0
 8014938:	4d0c      	ldr	r5, [pc, #48]	@ (801496c <__libc_init_array+0x38>)
 801493a:	4c0d      	ldr	r4, [pc, #52]	@ (8014970 <__libc_init_array+0x3c>)
 801493c:	1b64      	subs	r4, r4, r5
 801493e:	10a4      	asrs	r4, r4, #2
 8014940:	42a6      	cmp	r6, r4
 8014942:	d109      	bne.n	8014958 <__libc_init_array+0x24>
 8014944:	f001 fac4 	bl	8015ed0 <_init>
 8014948:	2600      	movs	r6, #0
 801494a:	4d0a      	ldr	r5, [pc, #40]	@ (8014974 <__libc_init_array+0x40>)
 801494c:	4c0a      	ldr	r4, [pc, #40]	@ (8014978 <__libc_init_array+0x44>)
 801494e:	1b64      	subs	r4, r4, r5
 8014950:	10a4      	asrs	r4, r4, #2
 8014952:	42a6      	cmp	r6, r4
 8014954:	d105      	bne.n	8014962 <__libc_init_array+0x2e>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	f855 3b04 	ldr.w	r3, [r5], #4
 801495c:	4798      	blx	r3
 801495e:	3601      	adds	r6, #1
 8014960:	e7ee      	b.n	8014940 <__libc_init_array+0xc>
 8014962:	f855 3b04 	ldr.w	r3, [r5], #4
 8014966:	4798      	blx	r3
 8014968:	3601      	adds	r6, #1
 801496a:	e7f2      	b.n	8014952 <__libc_init_array+0x1e>
 801496c:	080176a0 	.word	0x080176a0
 8014970:	080176a0 	.word	0x080176a0
 8014974:	080176a0 	.word	0x080176a0
 8014978:	080176a4 	.word	0x080176a4

0801497c <__retarget_lock_acquire_recursive>:
 801497c:	4770      	bx	lr

0801497e <__retarget_lock_release_recursive>:
 801497e:	4770      	bx	lr

08014980 <memcpy>:
 8014980:	440a      	add	r2, r1
 8014982:	4291      	cmp	r1, r2
 8014984:	f100 33ff 	add.w	r3, r0, #4294967295
 8014988:	d100      	bne.n	801498c <memcpy+0xc>
 801498a:	4770      	bx	lr
 801498c:	b510      	push	{r4, lr}
 801498e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014992:	4291      	cmp	r1, r2
 8014994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014998:	d1f9      	bne.n	801498e <memcpy+0xe>
 801499a:	bd10      	pop	{r4, pc}

0801499c <_free_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	4605      	mov	r5, r0
 80149a0:	2900      	cmp	r1, #0
 80149a2:	d040      	beq.n	8014a26 <_free_r+0x8a>
 80149a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149a8:	1f0c      	subs	r4, r1, #4
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	bfb8      	it	lt
 80149ae:	18e4      	addlt	r4, r4, r3
 80149b0:	f7ff feb4 	bl	801471c <__malloc_lock>
 80149b4:	4a1c      	ldr	r2, [pc, #112]	@ (8014a28 <_free_r+0x8c>)
 80149b6:	6813      	ldr	r3, [r2, #0]
 80149b8:	b933      	cbnz	r3, 80149c8 <_free_r+0x2c>
 80149ba:	6063      	str	r3, [r4, #4]
 80149bc:	6014      	str	r4, [r2, #0]
 80149be:	4628      	mov	r0, r5
 80149c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149c4:	f7ff beb0 	b.w	8014728 <__malloc_unlock>
 80149c8:	42a3      	cmp	r3, r4
 80149ca:	d908      	bls.n	80149de <_free_r+0x42>
 80149cc:	6820      	ldr	r0, [r4, #0]
 80149ce:	1821      	adds	r1, r4, r0
 80149d0:	428b      	cmp	r3, r1
 80149d2:	bf01      	itttt	eq
 80149d4:	6819      	ldreq	r1, [r3, #0]
 80149d6:	685b      	ldreq	r3, [r3, #4]
 80149d8:	1809      	addeq	r1, r1, r0
 80149da:	6021      	streq	r1, [r4, #0]
 80149dc:	e7ed      	b.n	80149ba <_free_r+0x1e>
 80149de:	461a      	mov	r2, r3
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	b10b      	cbz	r3, 80149e8 <_free_r+0x4c>
 80149e4:	42a3      	cmp	r3, r4
 80149e6:	d9fa      	bls.n	80149de <_free_r+0x42>
 80149e8:	6811      	ldr	r1, [r2, #0]
 80149ea:	1850      	adds	r0, r2, r1
 80149ec:	42a0      	cmp	r0, r4
 80149ee:	d10b      	bne.n	8014a08 <_free_r+0x6c>
 80149f0:	6820      	ldr	r0, [r4, #0]
 80149f2:	4401      	add	r1, r0
 80149f4:	1850      	adds	r0, r2, r1
 80149f6:	4283      	cmp	r3, r0
 80149f8:	6011      	str	r1, [r2, #0]
 80149fa:	d1e0      	bne.n	80149be <_free_r+0x22>
 80149fc:	6818      	ldr	r0, [r3, #0]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	4408      	add	r0, r1
 8014a02:	6010      	str	r0, [r2, #0]
 8014a04:	6053      	str	r3, [r2, #4]
 8014a06:	e7da      	b.n	80149be <_free_r+0x22>
 8014a08:	d902      	bls.n	8014a10 <_free_r+0x74>
 8014a0a:	230c      	movs	r3, #12
 8014a0c:	602b      	str	r3, [r5, #0]
 8014a0e:	e7d6      	b.n	80149be <_free_r+0x22>
 8014a10:	6820      	ldr	r0, [r4, #0]
 8014a12:	1821      	adds	r1, r4, r0
 8014a14:	428b      	cmp	r3, r1
 8014a16:	bf01      	itttt	eq
 8014a18:	6819      	ldreq	r1, [r3, #0]
 8014a1a:	685b      	ldreq	r3, [r3, #4]
 8014a1c:	1809      	addeq	r1, r1, r0
 8014a1e:	6021      	streq	r1, [r4, #0]
 8014a20:	6063      	str	r3, [r4, #4]
 8014a22:	6054      	str	r4, [r2, #4]
 8014a24:	e7cb      	b.n	80149be <_free_r+0x22>
 8014a26:	bd38      	pop	{r3, r4, r5, pc}
 8014a28:	20001d1c 	.word	0x20001d1c

08014a2c <__ssputs_r>:
 8014a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a30:	461f      	mov	r7, r3
 8014a32:	688e      	ldr	r6, [r1, #8]
 8014a34:	4682      	mov	sl, r0
 8014a36:	42be      	cmp	r6, r7
 8014a38:	460c      	mov	r4, r1
 8014a3a:	4690      	mov	r8, r2
 8014a3c:	680b      	ldr	r3, [r1, #0]
 8014a3e:	d82d      	bhi.n	8014a9c <__ssputs_r+0x70>
 8014a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a48:	d026      	beq.n	8014a98 <__ssputs_r+0x6c>
 8014a4a:	6965      	ldr	r5, [r4, #20]
 8014a4c:	6909      	ldr	r1, [r1, #16]
 8014a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a52:	eba3 0901 	sub.w	r9, r3, r1
 8014a56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a5a:	1c7b      	adds	r3, r7, #1
 8014a5c:	444b      	add	r3, r9
 8014a5e:	106d      	asrs	r5, r5, #1
 8014a60:	429d      	cmp	r5, r3
 8014a62:	bf38      	it	cc
 8014a64:	461d      	movcc	r5, r3
 8014a66:	0553      	lsls	r3, r2, #21
 8014a68:	d527      	bpl.n	8014aba <__ssputs_r+0x8e>
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	f7ff fdd6 	bl	801461c <_malloc_r>
 8014a70:	4606      	mov	r6, r0
 8014a72:	b360      	cbz	r0, 8014ace <__ssputs_r+0xa2>
 8014a74:	464a      	mov	r2, r9
 8014a76:	6921      	ldr	r1, [r4, #16]
 8014a78:	f7ff ff82 	bl	8014980 <memcpy>
 8014a7c:	89a3      	ldrh	r3, [r4, #12]
 8014a7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a86:	81a3      	strh	r3, [r4, #12]
 8014a88:	6126      	str	r6, [r4, #16]
 8014a8a:	444e      	add	r6, r9
 8014a8c:	6026      	str	r6, [r4, #0]
 8014a8e:	463e      	mov	r6, r7
 8014a90:	6165      	str	r5, [r4, #20]
 8014a92:	eba5 0509 	sub.w	r5, r5, r9
 8014a96:	60a5      	str	r5, [r4, #8]
 8014a98:	42be      	cmp	r6, r7
 8014a9a:	d900      	bls.n	8014a9e <__ssputs_r+0x72>
 8014a9c:	463e      	mov	r6, r7
 8014a9e:	4632      	mov	r2, r6
 8014aa0:	4641      	mov	r1, r8
 8014aa2:	6820      	ldr	r0, [r4, #0]
 8014aa4:	f000 faaa 	bl	8014ffc <memmove>
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	68a3      	ldr	r3, [r4, #8]
 8014aac:	1b9b      	subs	r3, r3, r6
 8014aae:	60a3      	str	r3, [r4, #8]
 8014ab0:	6823      	ldr	r3, [r4, #0]
 8014ab2:	4433      	add	r3, r6
 8014ab4:	6023      	str	r3, [r4, #0]
 8014ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aba:	462a      	mov	r2, r5
 8014abc:	f000 fac6 	bl	801504c <_realloc_r>
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d1e0      	bne.n	8014a88 <__ssputs_r+0x5c>
 8014ac6:	4650      	mov	r0, sl
 8014ac8:	6921      	ldr	r1, [r4, #16]
 8014aca:	f7ff ff67 	bl	801499c <_free_r>
 8014ace:	230c      	movs	r3, #12
 8014ad0:	f8ca 3000 	str.w	r3, [sl]
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8014ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ade:	81a3      	strh	r3, [r4, #12]
 8014ae0:	e7e9      	b.n	8014ab6 <__ssputs_r+0x8a>
	...

08014ae4 <_svfiprintf_r>:
 8014ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae8:	4698      	mov	r8, r3
 8014aea:	898b      	ldrh	r3, [r1, #12]
 8014aec:	4607      	mov	r7, r0
 8014aee:	061b      	lsls	r3, r3, #24
 8014af0:	460d      	mov	r5, r1
 8014af2:	4614      	mov	r4, r2
 8014af4:	b09d      	sub	sp, #116	@ 0x74
 8014af6:	d510      	bpl.n	8014b1a <_svfiprintf_r+0x36>
 8014af8:	690b      	ldr	r3, [r1, #16]
 8014afa:	b973      	cbnz	r3, 8014b1a <_svfiprintf_r+0x36>
 8014afc:	2140      	movs	r1, #64	@ 0x40
 8014afe:	f7ff fd8d 	bl	801461c <_malloc_r>
 8014b02:	6028      	str	r0, [r5, #0]
 8014b04:	6128      	str	r0, [r5, #16]
 8014b06:	b930      	cbnz	r0, 8014b16 <_svfiprintf_r+0x32>
 8014b08:	230c      	movs	r3, #12
 8014b0a:	603b      	str	r3, [r7, #0]
 8014b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b10:	b01d      	add	sp, #116	@ 0x74
 8014b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b16:	2340      	movs	r3, #64	@ 0x40
 8014b18:	616b      	str	r3, [r5, #20]
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b1e:	2320      	movs	r3, #32
 8014b20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b24:	2330      	movs	r3, #48	@ 0x30
 8014b26:	f04f 0901 	mov.w	r9, #1
 8014b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8014cc8 <_svfiprintf_r+0x1e4>
 8014b32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b36:	4623      	mov	r3, r4
 8014b38:	469a      	mov	sl, r3
 8014b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b3e:	b10a      	cbz	r2, 8014b44 <_svfiprintf_r+0x60>
 8014b40:	2a25      	cmp	r2, #37	@ 0x25
 8014b42:	d1f9      	bne.n	8014b38 <_svfiprintf_r+0x54>
 8014b44:	ebba 0b04 	subs.w	fp, sl, r4
 8014b48:	d00b      	beq.n	8014b62 <_svfiprintf_r+0x7e>
 8014b4a:	465b      	mov	r3, fp
 8014b4c:	4622      	mov	r2, r4
 8014b4e:	4629      	mov	r1, r5
 8014b50:	4638      	mov	r0, r7
 8014b52:	f7ff ff6b 	bl	8014a2c <__ssputs_r>
 8014b56:	3001      	adds	r0, #1
 8014b58:	f000 80a7 	beq.w	8014caa <_svfiprintf_r+0x1c6>
 8014b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b5e:	445a      	add	r2, fp
 8014b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b62:	f89a 3000 	ldrb.w	r3, [sl]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	f000 809f 	beq.w	8014caa <_svfiprintf_r+0x1c6>
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b76:	f10a 0a01 	add.w	sl, sl, #1
 8014b7a:	9304      	str	r3, [sp, #16]
 8014b7c:	9307      	str	r3, [sp, #28]
 8014b7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b82:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b84:	4654      	mov	r4, sl
 8014b86:	2205      	movs	r2, #5
 8014b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b8c:	484e      	ldr	r0, [pc, #312]	@ (8014cc8 <_svfiprintf_r+0x1e4>)
 8014b8e:	f000 fa4f 	bl	8015030 <memchr>
 8014b92:	9a04      	ldr	r2, [sp, #16]
 8014b94:	b9d8      	cbnz	r0, 8014bce <_svfiprintf_r+0xea>
 8014b96:	06d0      	lsls	r0, r2, #27
 8014b98:	bf44      	itt	mi
 8014b9a:	2320      	movmi	r3, #32
 8014b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ba0:	0711      	lsls	r1, r2, #28
 8014ba2:	bf44      	itt	mi
 8014ba4:	232b      	movmi	r3, #43	@ 0x2b
 8014ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014baa:	f89a 3000 	ldrb.w	r3, [sl]
 8014bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bb0:	d015      	beq.n	8014bde <_svfiprintf_r+0xfa>
 8014bb2:	4654      	mov	r4, sl
 8014bb4:	2000      	movs	r0, #0
 8014bb6:	f04f 0c0a 	mov.w	ip, #10
 8014bba:	9a07      	ldr	r2, [sp, #28]
 8014bbc:	4621      	mov	r1, r4
 8014bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bc2:	3b30      	subs	r3, #48	@ 0x30
 8014bc4:	2b09      	cmp	r3, #9
 8014bc6:	d94b      	bls.n	8014c60 <_svfiprintf_r+0x17c>
 8014bc8:	b1b0      	cbz	r0, 8014bf8 <_svfiprintf_r+0x114>
 8014bca:	9207      	str	r2, [sp, #28]
 8014bcc:	e014      	b.n	8014bf8 <_svfiprintf_r+0x114>
 8014bce:	eba0 0308 	sub.w	r3, r0, r8
 8014bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8014bd6:	4313      	orrs	r3, r2
 8014bd8:	46a2      	mov	sl, r4
 8014bda:	9304      	str	r3, [sp, #16]
 8014bdc:	e7d2      	b.n	8014b84 <_svfiprintf_r+0xa0>
 8014bde:	9b03      	ldr	r3, [sp, #12]
 8014be0:	1d19      	adds	r1, r3, #4
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	9103      	str	r1, [sp, #12]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	bfbb      	ittet	lt
 8014bea:	425b      	neglt	r3, r3
 8014bec:	f042 0202 	orrlt.w	r2, r2, #2
 8014bf0:	9307      	strge	r3, [sp, #28]
 8014bf2:	9307      	strlt	r3, [sp, #28]
 8014bf4:	bfb8      	it	lt
 8014bf6:	9204      	strlt	r2, [sp, #16]
 8014bf8:	7823      	ldrb	r3, [r4, #0]
 8014bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bfc:	d10a      	bne.n	8014c14 <_svfiprintf_r+0x130>
 8014bfe:	7863      	ldrb	r3, [r4, #1]
 8014c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c02:	d132      	bne.n	8014c6a <_svfiprintf_r+0x186>
 8014c04:	9b03      	ldr	r3, [sp, #12]
 8014c06:	3402      	adds	r4, #2
 8014c08:	1d1a      	adds	r2, r3, #4
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	9203      	str	r2, [sp, #12]
 8014c0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c12:	9305      	str	r3, [sp, #20]
 8014c14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8014ccc <_svfiprintf_r+0x1e8>
 8014c18:	2203      	movs	r2, #3
 8014c1a:	4650      	mov	r0, sl
 8014c1c:	7821      	ldrb	r1, [r4, #0]
 8014c1e:	f000 fa07 	bl	8015030 <memchr>
 8014c22:	b138      	cbz	r0, 8014c34 <_svfiprintf_r+0x150>
 8014c24:	2240      	movs	r2, #64	@ 0x40
 8014c26:	9b04      	ldr	r3, [sp, #16]
 8014c28:	eba0 000a 	sub.w	r0, r0, sl
 8014c2c:	4082      	lsls	r2, r0
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	3401      	adds	r4, #1
 8014c32:	9304      	str	r3, [sp, #16]
 8014c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c38:	2206      	movs	r2, #6
 8014c3a:	4825      	ldr	r0, [pc, #148]	@ (8014cd0 <_svfiprintf_r+0x1ec>)
 8014c3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c40:	f000 f9f6 	bl	8015030 <memchr>
 8014c44:	2800      	cmp	r0, #0
 8014c46:	d036      	beq.n	8014cb6 <_svfiprintf_r+0x1d2>
 8014c48:	4b22      	ldr	r3, [pc, #136]	@ (8014cd4 <_svfiprintf_r+0x1f0>)
 8014c4a:	bb1b      	cbnz	r3, 8014c94 <_svfiprintf_r+0x1b0>
 8014c4c:	9b03      	ldr	r3, [sp, #12]
 8014c4e:	3307      	adds	r3, #7
 8014c50:	f023 0307 	bic.w	r3, r3, #7
 8014c54:	3308      	adds	r3, #8
 8014c56:	9303      	str	r3, [sp, #12]
 8014c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c5a:	4433      	add	r3, r6
 8014c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c5e:	e76a      	b.n	8014b36 <_svfiprintf_r+0x52>
 8014c60:	460c      	mov	r4, r1
 8014c62:	2001      	movs	r0, #1
 8014c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c68:	e7a8      	b.n	8014bbc <_svfiprintf_r+0xd8>
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	f04f 0c0a 	mov.w	ip, #10
 8014c70:	4619      	mov	r1, r3
 8014c72:	3401      	adds	r4, #1
 8014c74:	9305      	str	r3, [sp, #20]
 8014c76:	4620      	mov	r0, r4
 8014c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c7c:	3a30      	subs	r2, #48	@ 0x30
 8014c7e:	2a09      	cmp	r2, #9
 8014c80:	d903      	bls.n	8014c8a <_svfiprintf_r+0x1a6>
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d0c6      	beq.n	8014c14 <_svfiprintf_r+0x130>
 8014c86:	9105      	str	r1, [sp, #20]
 8014c88:	e7c4      	b.n	8014c14 <_svfiprintf_r+0x130>
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c92:	e7f0      	b.n	8014c76 <_svfiprintf_r+0x192>
 8014c94:	ab03      	add	r3, sp, #12
 8014c96:	9300      	str	r3, [sp, #0]
 8014c98:	462a      	mov	r2, r5
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8014cd8 <_svfiprintf_r+0x1f4>)
 8014c9e:	a904      	add	r1, sp, #16
 8014ca0:	f3af 8000 	nop.w
 8014ca4:	1c42      	adds	r2, r0, #1
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	d1d6      	bne.n	8014c58 <_svfiprintf_r+0x174>
 8014caa:	89ab      	ldrh	r3, [r5, #12]
 8014cac:	065b      	lsls	r3, r3, #25
 8014cae:	f53f af2d 	bmi.w	8014b0c <_svfiprintf_r+0x28>
 8014cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cb4:	e72c      	b.n	8014b10 <_svfiprintf_r+0x2c>
 8014cb6:	ab03      	add	r3, sp, #12
 8014cb8:	9300      	str	r3, [sp, #0]
 8014cba:	462a      	mov	r2, r5
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	4b06      	ldr	r3, [pc, #24]	@ (8014cd8 <_svfiprintf_r+0x1f4>)
 8014cc0:	a904      	add	r1, sp, #16
 8014cc2:	f000 f87d 	bl	8014dc0 <_printf_i>
 8014cc6:	e7ed      	b.n	8014ca4 <_svfiprintf_r+0x1c0>
 8014cc8:	08017623 	.word	0x08017623
 8014ccc:	08017629 	.word	0x08017629
 8014cd0:	0801762d 	.word	0x0801762d
 8014cd4:	00000000 	.word	0x00000000
 8014cd8:	08014a2d 	.word	0x08014a2d

08014cdc <_printf_common>:
 8014cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce0:	4616      	mov	r6, r2
 8014ce2:	4698      	mov	r8, r3
 8014ce4:	688a      	ldr	r2, [r1, #8]
 8014ce6:	690b      	ldr	r3, [r1, #16]
 8014ce8:	4607      	mov	r7, r0
 8014cea:	4293      	cmp	r3, r2
 8014cec:	bfb8      	it	lt
 8014cee:	4613      	movlt	r3, r2
 8014cf0:	6033      	str	r3, [r6, #0]
 8014cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014cfc:	b10a      	cbz	r2, 8014d02 <_printf_common+0x26>
 8014cfe:	3301      	adds	r3, #1
 8014d00:	6033      	str	r3, [r6, #0]
 8014d02:	6823      	ldr	r3, [r4, #0]
 8014d04:	0699      	lsls	r1, r3, #26
 8014d06:	bf42      	ittt	mi
 8014d08:	6833      	ldrmi	r3, [r6, #0]
 8014d0a:	3302      	addmi	r3, #2
 8014d0c:	6033      	strmi	r3, [r6, #0]
 8014d0e:	6825      	ldr	r5, [r4, #0]
 8014d10:	f015 0506 	ands.w	r5, r5, #6
 8014d14:	d106      	bne.n	8014d24 <_printf_common+0x48>
 8014d16:	f104 0a19 	add.w	sl, r4, #25
 8014d1a:	68e3      	ldr	r3, [r4, #12]
 8014d1c:	6832      	ldr	r2, [r6, #0]
 8014d1e:	1a9b      	subs	r3, r3, r2
 8014d20:	42ab      	cmp	r3, r5
 8014d22:	dc2b      	bgt.n	8014d7c <_printf_common+0xa0>
 8014d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014d28:	6822      	ldr	r2, [r4, #0]
 8014d2a:	3b00      	subs	r3, #0
 8014d2c:	bf18      	it	ne
 8014d2e:	2301      	movne	r3, #1
 8014d30:	0692      	lsls	r2, r2, #26
 8014d32:	d430      	bmi.n	8014d96 <_printf_common+0xba>
 8014d34:	4641      	mov	r1, r8
 8014d36:	4638      	mov	r0, r7
 8014d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014d3c:	47c8      	blx	r9
 8014d3e:	3001      	adds	r0, #1
 8014d40:	d023      	beq.n	8014d8a <_printf_common+0xae>
 8014d42:	6823      	ldr	r3, [r4, #0]
 8014d44:	6922      	ldr	r2, [r4, #16]
 8014d46:	f003 0306 	and.w	r3, r3, #6
 8014d4a:	2b04      	cmp	r3, #4
 8014d4c:	bf14      	ite	ne
 8014d4e:	2500      	movne	r5, #0
 8014d50:	6833      	ldreq	r3, [r6, #0]
 8014d52:	f04f 0600 	mov.w	r6, #0
 8014d56:	bf08      	it	eq
 8014d58:	68e5      	ldreq	r5, [r4, #12]
 8014d5a:	f104 041a 	add.w	r4, r4, #26
 8014d5e:	bf08      	it	eq
 8014d60:	1aed      	subeq	r5, r5, r3
 8014d62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014d66:	bf08      	it	eq
 8014d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	bfc4      	itt	gt
 8014d70:	1a9b      	subgt	r3, r3, r2
 8014d72:	18ed      	addgt	r5, r5, r3
 8014d74:	42b5      	cmp	r5, r6
 8014d76:	d11a      	bne.n	8014dae <_printf_common+0xd2>
 8014d78:	2000      	movs	r0, #0
 8014d7a:	e008      	b.n	8014d8e <_printf_common+0xb2>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	4652      	mov	r2, sl
 8014d80:	4641      	mov	r1, r8
 8014d82:	4638      	mov	r0, r7
 8014d84:	47c8      	blx	r9
 8014d86:	3001      	adds	r0, #1
 8014d88:	d103      	bne.n	8014d92 <_printf_common+0xb6>
 8014d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d92:	3501      	adds	r5, #1
 8014d94:	e7c1      	b.n	8014d1a <_printf_common+0x3e>
 8014d96:	2030      	movs	r0, #48	@ 0x30
 8014d98:	18e1      	adds	r1, r4, r3
 8014d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014d9e:	1c5a      	adds	r2, r3, #1
 8014da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014da4:	4422      	add	r2, r4
 8014da6:	3302      	adds	r3, #2
 8014da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014dac:	e7c2      	b.n	8014d34 <_printf_common+0x58>
 8014dae:	2301      	movs	r3, #1
 8014db0:	4622      	mov	r2, r4
 8014db2:	4641      	mov	r1, r8
 8014db4:	4638      	mov	r0, r7
 8014db6:	47c8      	blx	r9
 8014db8:	3001      	adds	r0, #1
 8014dba:	d0e6      	beq.n	8014d8a <_printf_common+0xae>
 8014dbc:	3601      	adds	r6, #1
 8014dbe:	e7d9      	b.n	8014d74 <_printf_common+0x98>

08014dc0 <_printf_i>:
 8014dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014dc4:	7e0f      	ldrb	r7, [r1, #24]
 8014dc6:	4691      	mov	r9, r2
 8014dc8:	2f78      	cmp	r7, #120	@ 0x78
 8014dca:	4680      	mov	r8, r0
 8014dcc:	460c      	mov	r4, r1
 8014dce:	469a      	mov	sl, r3
 8014dd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014dd6:	d807      	bhi.n	8014de8 <_printf_i+0x28>
 8014dd8:	2f62      	cmp	r7, #98	@ 0x62
 8014dda:	d80a      	bhi.n	8014df2 <_printf_i+0x32>
 8014ddc:	2f00      	cmp	r7, #0
 8014dde:	f000 80d1 	beq.w	8014f84 <_printf_i+0x1c4>
 8014de2:	2f58      	cmp	r7, #88	@ 0x58
 8014de4:	f000 80b8 	beq.w	8014f58 <_printf_i+0x198>
 8014de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014df0:	e03a      	b.n	8014e68 <_printf_i+0xa8>
 8014df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014df6:	2b15      	cmp	r3, #21
 8014df8:	d8f6      	bhi.n	8014de8 <_printf_i+0x28>
 8014dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8014e00 <_printf_i+0x40>)
 8014dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014e00:	08014e59 	.word	0x08014e59
 8014e04:	08014e6d 	.word	0x08014e6d
 8014e08:	08014de9 	.word	0x08014de9
 8014e0c:	08014de9 	.word	0x08014de9
 8014e10:	08014de9 	.word	0x08014de9
 8014e14:	08014de9 	.word	0x08014de9
 8014e18:	08014e6d 	.word	0x08014e6d
 8014e1c:	08014de9 	.word	0x08014de9
 8014e20:	08014de9 	.word	0x08014de9
 8014e24:	08014de9 	.word	0x08014de9
 8014e28:	08014de9 	.word	0x08014de9
 8014e2c:	08014f6b 	.word	0x08014f6b
 8014e30:	08014e97 	.word	0x08014e97
 8014e34:	08014f25 	.word	0x08014f25
 8014e38:	08014de9 	.word	0x08014de9
 8014e3c:	08014de9 	.word	0x08014de9
 8014e40:	08014f8d 	.word	0x08014f8d
 8014e44:	08014de9 	.word	0x08014de9
 8014e48:	08014e97 	.word	0x08014e97
 8014e4c:	08014de9 	.word	0x08014de9
 8014e50:	08014de9 	.word	0x08014de9
 8014e54:	08014f2d 	.word	0x08014f2d
 8014e58:	6833      	ldr	r3, [r6, #0]
 8014e5a:	1d1a      	adds	r2, r3, #4
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	6032      	str	r2, [r6, #0]
 8014e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e09c      	b.n	8014fa6 <_printf_i+0x1e6>
 8014e6c:	6833      	ldr	r3, [r6, #0]
 8014e6e:	6820      	ldr	r0, [r4, #0]
 8014e70:	1d19      	adds	r1, r3, #4
 8014e72:	6031      	str	r1, [r6, #0]
 8014e74:	0606      	lsls	r6, r0, #24
 8014e76:	d501      	bpl.n	8014e7c <_printf_i+0xbc>
 8014e78:	681d      	ldr	r5, [r3, #0]
 8014e7a:	e003      	b.n	8014e84 <_printf_i+0xc4>
 8014e7c:	0645      	lsls	r5, r0, #25
 8014e7e:	d5fb      	bpl.n	8014e78 <_printf_i+0xb8>
 8014e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014e84:	2d00      	cmp	r5, #0
 8014e86:	da03      	bge.n	8014e90 <_printf_i+0xd0>
 8014e88:	232d      	movs	r3, #45	@ 0x2d
 8014e8a:	426d      	negs	r5, r5
 8014e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014e90:	230a      	movs	r3, #10
 8014e92:	4858      	ldr	r0, [pc, #352]	@ (8014ff4 <_printf_i+0x234>)
 8014e94:	e011      	b.n	8014eba <_printf_i+0xfa>
 8014e96:	6821      	ldr	r1, [r4, #0]
 8014e98:	6833      	ldr	r3, [r6, #0]
 8014e9a:	0608      	lsls	r0, r1, #24
 8014e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014ea0:	d402      	bmi.n	8014ea8 <_printf_i+0xe8>
 8014ea2:	0649      	lsls	r1, r1, #25
 8014ea4:	bf48      	it	mi
 8014ea6:	b2ad      	uxthmi	r5, r5
 8014ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8014eaa:	6033      	str	r3, [r6, #0]
 8014eac:	bf14      	ite	ne
 8014eae:	230a      	movne	r3, #10
 8014eb0:	2308      	moveq	r3, #8
 8014eb2:	4850      	ldr	r0, [pc, #320]	@ (8014ff4 <_printf_i+0x234>)
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014eba:	6866      	ldr	r6, [r4, #4]
 8014ebc:	2e00      	cmp	r6, #0
 8014ebe:	60a6      	str	r6, [r4, #8]
 8014ec0:	db05      	blt.n	8014ece <_printf_i+0x10e>
 8014ec2:	6821      	ldr	r1, [r4, #0]
 8014ec4:	432e      	orrs	r6, r5
 8014ec6:	f021 0104 	bic.w	r1, r1, #4
 8014eca:	6021      	str	r1, [r4, #0]
 8014ecc:	d04b      	beq.n	8014f66 <_printf_i+0x1a6>
 8014ece:	4616      	mov	r6, r2
 8014ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8014ed8:	5dc7      	ldrb	r7, [r0, r7]
 8014eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ede:	462f      	mov	r7, r5
 8014ee0:	42bb      	cmp	r3, r7
 8014ee2:	460d      	mov	r5, r1
 8014ee4:	d9f4      	bls.n	8014ed0 <_printf_i+0x110>
 8014ee6:	2b08      	cmp	r3, #8
 8014ee8:	d10b      	bne.n	8014f02 <_printf_i+0x142>
 8014eea:	6823      	ldr	r3, [r4, #0]
 8014eec:	07df      	lsls	r7, r3, #31
 8014eee:	d508      	bpl.n	8014f02 <_printf_i+0x142>
 8014ef0:	6923      	ldr	r3, [r4, #16]
 8014ef2:	6861      	ldr	r1, [r4, #4]
 8014ef4:	4299      	cmp	r1, r3
 8014ef6:	bfde      	ittt	le
 8014ef8:	2330      	movle	r3, #48	@ 0x30
 8014efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014f02:	1b92      	subs	r2, r2, r6
 8014f04:	6122      	str	r2, [r4, #16]
 8014f06:	464b      	mov	r3, r9
 8014f08:	4621      	mov	r1, r4
 8014f0a:	4640      	mov	r0, r8
 8014f0c:	f8cd a000 	str.w	sl, [sp]
 8014f10:	aa03      	add	r2, sp, #12
 8014f12:	f7ff fee3 	bl	8014cdc <_printf_common>
 8014f16:	3001      	adds	r0, #1
 8014f18:	d14a      	bne.n	8014fb0 <_printf_i+0x1f0>
 8014f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1e:	b004      	add	sp, #16
 8014f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f24:	6823      	ldr	r3, [r4, #0]
 8014f26:	f043 0320 	orr.w	r3, r3, #32
 8014f2a:	6023      	str	r3, [r4, #0]
 8014f2c:	2778      	movs	r7, #120	@ 0x78
 8014f2e:	4832      	ldr	r0, [pc, #200]	@ (8014ff8 <_printf_i+0x238>)
 8014f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014f34:	6823      	ldr	r3, [r4, #0]
 8014f36:	6831      	ldr	r1, [r6, #0]
 8014f38:	061f      	lsls	r7, r3, #24
 8014f3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8014f3e:	d402      	bmi.n	8014f46 <_printf_i+0x186>
 8014f40:	065f      	lsls	r7, r3, #25
 8014f42:	bf48      	it	mi
 8014f44:	b2ad      	uxthmi	r5, r5
 8014f46:	6031      	str	r1, [r6, #0]
 8014f48:	07d9      	lsls	r1, r3, #31
 8014f4a:	bf44      	itt	mi
 8014f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8014f50:	6023      	strmi	r3, [r4, #0]
 8014f52:	b11d      	cbz	r5, 8014f5c <_printf_i+0x19c>
 8014f54:	2310      	movs	r3, #16
 8014f56:	e7ad      	b.n	8014eb4 <_printf_i+0xf4>
 8014f58:	4826      	ldr	r0, [pc, #152]	@ (8014ff4 <_printf_i+0x234>)
 8014f5a:	e7e9      	b.n	8014f30 <_printf_i+0x170>
 8014f5c:	6823      	ldr	r3, [r4, #0]
 8014f5e:	f023 0320 	bic.w	r3, r3, #32
 8014f62:	6023      	str	r3, [r4, #0]
 8014f64:	e7f6      	b.n	8014f54 <_printf_i+0x194>
 8014f66:	4616      	mov	r6, r2
 8014f68:	e7bd      	b.n	8014ee6 <_printf_i+0x126>
 8014f6a:	6833      	ldr	r3, [r6, #0]
 8014f6c:	6825      	ldr	r5, [r4, #0]
 8014f6e:	1d18      	adds	r0, r3, #4
 8014f70:	6961      	ldr	r1, [r4, #20]
 8014f72:	6030      	str	r0, [r6, #0]
 8014f74:	062e      	lsls	r6, r5, #24
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	d501      	bpl.n	8014f7e <_printf_i+0x1be>
 8014f7a:	6019      	str	r1, [r3, #0]
 8014f7c:	e002      	b.n	8014f84 <_printf_i+0x1c4>
 8014f7e:	0668      	lsls	r0, r5, #25
 8014f80:	d5fb      	bpl.n	8014f7a <_printf_i+0x1ba>
 8014f82:	8019      	strh	r1, [r3, #0]
 8014f84:	2300      	movs	r3, #0
 8014f86:	4616      	mov	r6, r2
 8014f88:	6123      	str	r3, [r4, #16]
 8014f8a:	e7bc      	b.n	8014f06 <_printf_i+0x146>
 8014f8c:	6833      	ldr	r3, [r6, #0]
 8014f8e:	2100      	movs	r1, #0
 8014f90:	1d1a      	adds	r2, r3, #4
 8014f92:	6032      	str	r2, [r6, #0]
 8014f94:	681e      	ldr	r6, [r3, #0]
 8014f96:	6862      	ldr	r2, [r4, #4]
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f000 f849 	bl	8015030 <memchr>
 8014f9e:	b108      	cbz	r0, 8014fa4 <_printf_i+0x1e4>
 8014fa0:	1b80      	subs	r0, r0, r6
 8014fa2:	6060      	str	r0, [r4, #4]
 8014fa4:	6863      	ldr	r3, [r4, #4]
 8014fa6:	6123      	str	r3, [r4, #16]
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014fae:	e7aa      	b.n	8014f06 <_printf_i+0x146>
 8014fb0:	4632      	mov	r2, r6
 8014fb2:	4649      	mov	r1, r9
 8014fb4:	4640      	mov	r0, r8
 8014fb6:	6923      	ldr	r3, [r4, #16]
 8014fb8:	47d0      	blx	sl
 8014fba:	3001      	adds	r0, #1
 8014fbc:	d0ad      	beq.n	8014f1a <_printf_i+0x15a>
 8014fbe:	6823      	ldr	r3, [r4, #0]
 8014fc0:	079b      	lsls	r3, r3, #30
 8014fc2:	d413      	bmi.n	8014fec <_printf_i+0x22c>
 8014fc4:	68e0      	ldr	r0, [r4, #12]
 8014fc6:	9b03      	ldr	r3, [sp, #12]
 8014fc8:	4298      	cmp	r0, r3
 8014fca:	bfb8      	it	lt
 8014fcc:	4618      	movlt	r0, r3
 8014fce:	e7a6      	b.n	8014f1e <_printf_i+0x15e>
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	4632      	mov	r2, r6
 8014fd4:	4649      	mov	r1, r9
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	47d0      	blx	sl
 8014fda:	3001      	adds	r0, #1
 8014fdc:	d09d      	beq.n	8014f1a <_printf_i+0x15a>
 8014fde:	3501      	adds	r5, #1
 8014fe0:	68e3      	ldr	r3, [r4, #12]
 8014fe2:	9903      	ldr	r1, [sp, #12]
 8014fe4:	1a5b      	subs	r3, r3, r1
 8014fe6:	42ab      	cmp	r3, r5
 8014fe8:	dcf2      	bgt.n	8014fd0 <_printf_i+0x210>
 8014fea:	e7eb      	b.n	8014fc4 <_printf_i+0x204>
 8014fec:	2500      	movs	r5, #0
 8014fee:	f104 0619 	add.w	r6, r4, #25
 8014ff2:	e7f5      	b.n	8014fe0 <_printf_i+0x220>
 8014ff4:	08017634 	.word	0x08017634
 8014ff8:	08017645 	.word	0x08017645

08014ffc <memmove>:
 8014ffc:	4288      	cmp	r0, r1
 8014ffe:	b510      	push	{r4, lr}
 8015000:	eb01 0402 	add.w	r4, r1, r2
 8015004:	d902      	bls.n	801500c <memmove+0x10>
 8015006:	4284      	cmp	r4, r0
 8015008:	4623      	mov	r3, r4
 801500a:	d807      	bhi.n	801501c <memmove+0x20>
 801500c:	1e43      	subs	r3, r0, #1
 801500e:	42a1      	cmp	r1, r4
 8015010:	d008      	beq.n	8015024 <memmove+0x28>
 8015012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015016:	f803 2f01 	strb.w	r2, [r3, #1]!
 801501a:	e7f8      	b.n	801500e <memmove+0x12>
 801501c:	4601      	mov	r1, r0
 801501e:	4402      	add	r2, r0
 8015020:	428a      	cmp	r2, r1
 8015022:	d100      	bne.n	8015026 <memmove+0x2a>
 8015024:	bd10      	pop	{r4, pc}
 8015026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801502a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801502e:	e7f7      	b.n	8015020 <memmove+0x24>

08015030 <memchr>:
 8015030:	4603      	mov	r3, r0
 8015032:	b510      	push	{r4, lr}
 8015034:	b2c9      	uxtb	r1, r1
 8015036:	4402      	add	r2, r0
 8015038:	4293      	cmp	r3, r2
 801503a:	4618      	mov	r0, r3
 801503c:	d101      	bne.n	8015042 <memchr+0x12>
 801503e:	2000      	movs	r0, #0
 8015040:	e003      	b.n	801504a <memchr+0x1a>
 8015042:	7804      	ldrb	r4, [r0, #0]
 8015044:	3301      	adds	r3, #1
 8015046:	428c      	cmp	r4, r1
 8015048:	d1f6      	bne.n	8015038 <memchr+0x8>
 801504a:	bd10      	pop	{r4, pc}

0801504c <_realloc_r>:
 801504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015050:	4607      	mov	r7, r0
 8015052:	4614      	mov	r4, r2
 8015054:	460d      	mov	r5, r1
 8015056:	b921      	cbnz	r1, 8015062 <_realloc_r+0x16>
 8015058:	4611      	mov	r1, r2
 801505a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801505e:	f7ff badd 	b.w	801461c <_malloc_r>
 8015062:	b92a      	cbnz	r2, 8015070 <_realloc_r+0x24>
 8015064:	f7ff fc9a 	bl	801499c <_free_r>
 8015068:	4625      	mov	r5, r4
 801506a:	4628      	mov	r0, r5
 801506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015070:	f000 f81a 	bl	80150a8 <_malloc_usable_size_r>
 8015074:	4284      	cmp	r4, r0
 8015076:	4606      	mov	r6, r0
 8015078:	d802      	bhi.n	8015080 <_realloc_r+0x34>
 801507a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801507e:	d8f4      	bhi.n	801506a <_realloc_r+0x1e>
 8015080:	4621      	mov	r1, r4
 8015082:	4638      	mov	r0, r7
 8015084:	f7ff faca 	bl	801461c <_malloc_r>
 8015088:	4680      	mov	r8, r0
 801508a:	b908      	cbnz	r0, 8015090 <_realloc_r+0x44>
 801508c:	4645      	mov	r5, r8
 801508e:	e7ec      	b.n	801506a <_realloc_r+0x1e>
 8015090:	42b4      	cmp	r4, r6
 8015092:	4622      	mov	r2, r4
 8015094:	4629      	mov	r1, r5
 8015096:	bf28      	it	cs
 8015098:	4632      	movcs	r2, r6
 801509a:	f7ff fc71 	bl	8014980 <memcpy>
 801509e:	4629      	mov	r1, r5
 80150a0:	4638      	mov	r0, r7
 80150a2:	f7ff fc7b 	bl	801499c <_free_r>
 80150a6:	e7f1      	b.n	801508c <_realloc_r+0x40>

080150a8 <_malloc_usable_size_r>:
 80150a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150ac:	1f18      	subs	r0, r3, #4
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	bfbc      	itt	lt
 80150b2:	580b      	ldrlt	r3, [r1, r0]
 80150b4:	18c0      	addlt	r0, r0, r3
 80150b6:	4770      	bx	lr

080150b8 <pow>:
 80150b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150bc:	4614      	mov	r4, r2
 80150be:	461d      	mov	r5, r3
 80150c0:	4680      	mov	r8, r0
 80150c2:	4689      	mov	r9, r1
 80150c4:	f000 f868 	bl	8015198 <__ieee754_pow>
 80150c8:	4622      	mov	r2, r4
 80150ca:	4606      	mov	r6, r0
 80150cc:	460f      	mov	r7, r1
 80150ce:	462b      	mov	r3, r5
 80150d0:	4620      	mov	r0, r4
 80150d2:	4629      	mov	r1, r5
 80150d4:	f7eb fc9a 	bl	8000a0c <__aeabi_dcmpun>
 80150d8:	bbc8      	cbnz	r0, 801514e <pow+0x96>
 80150da:	2200      	movs	r2, #0
 80150dc:	2300      	movs	r3, #0
 80150de:	4640      	mov	r0, r8
 80150e0:	4649      	mov	r1, r9
 80150e2:	f7eb fc61 	bl	80009a8 <__aeabi_dcmpeq>
 80150e6:	b1b8      	cbz	r0, 8015118 <pow+0x60>
 80150e8:	2200      	movs	r2, #0
 80150ea:	2300      	movs	r3, #0
 80150ec:	4620      	mov	r0, r4
 80150ee:	4629      	mov	r1, r5
 80150f0:	f7eb fc5a 	bl	80009a8 <__aeabi_dcmpeq>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d141      	bne.n	801517c <pow+0xc4>
 80150f8:	4620      	mov	r0, r4
 80150fa:	4629      	mov	r1, r5
 80150fc:	f000 f844 	bl	8015188 <finite>
 8015100:	b328      	cbz	r0, 801514e <pow+0x96>
 8015102:	2200      	movs	r2, #0
 8015104:	2300      	movs	r3, #0
 8015106:	4620      	mov	r0, r4
 8015108:	4629      	mov	r1, r5
 801510a:	f7eb fc57 	bl	80009bc <__aeabi_dcmplt>
 801510e:	b1f0      	cbz	r0, 801514e <pow+0x96>
 8015110:	f7ff fc0a 	bl	8014928 <__errno>
 8015114:	2322      	movs	r3, #34	@ 0x22
 8015116:	e019      	b.n	801514c <pow+0x94>
 8015118:	4630      	mov	r0, r6
 801511a:	4639      	mov	r1, r7
 801511c:	f000 f834 	bl	8015188 <finite>
 8015120:	b9c8      	cbnz	r0, 8015156 <pow+0x9e>
 8015122:	4640      	mov	r0, r8
 8015124:	4649      	mov	r1, r9
 8015126:	f000 f82f 	bl	8015188 <finite>
 801512a:	b1a0      	cbz	r0, 8015156 <pow+0x9e>
 801512c:	4620      	mov	r0, r4
 801512e:	4629      	mov	r1, r5
 8015130:	f000 f82a 	bl	8015188 <finite>
 8015134:	b178      	cbz	r0, 8015156 <pow+0x9e>
 8015136:	4632      	mov	r2, r6
 8015138:	463b      	mov	r3, r7
 801513a:	4630      	mov	r0, r6
 801513c:	4639      	mov	r1, r7
 801513e:	f7eb fc65 	bl	8000a0c <__aeabi_dcmpun>
 8015142:	2800      	cmp	r0, #0
 8015144:	d0e4      	beq.n	8015110 <pow+0x58>
 8015146:	f7ff fbef 	bl	8014928 <__errno>
 801514a:	2321      	movs	r3, #33	@ 0x21
 801514c:	6003      	str	r3, [r0, #0]
 801514e:	4630      	mov	r0, r6
 8015150:	4639      	mov	r1, r7
 8015152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015156:	2200      	movs	r2, #0
 8015158:	2300      	movs	r3, #0
 801515a:	4630      	mov	r0, r6
 801515c:	4639      	mov	r1, r7
 801515e:	f7eb fc23 	bl	80009a8 <__aeabi_dcmpeq>
 8015162:	2800      	cmp	r0, #0
 8015164:	d0f3      	beq.n	801514e <pow+0x96>
 8015166:	4640      	mov	r0, r8
 8015168:	4649      	mov	r1, r9
 801516a:	f000 f80d 	bl	8015188 <finite>
 801516e:	2800      	cmp	r0, #0
 8015170:	d0ed      	beq.n	801514e <pow+0x96>
 8015172:	4620      	mov	r0, r4
 8015174:	4629      	mov	r1, r5
 8015176:	f000 f807 	bl	8015188 <finite>
 801517a:	e7c8      	b.n	801510e <pow+0x56>
 801517c:	2600      	movs	r6, #0
 801517e:	4f01      	ldr	r7, [pc, #4]	@ (8015184 <pow+0xcc>)
 8015180:	e7e5      	b.n	801514e <pow+0x96>
 8015182:	bf00      	nop
 8015184:	3ff00000 	.word	0x3ff00000

08015188 <finite>:
 8015188:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 801518c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015190:	0fc0      	lsrs	r0, r0, #31
 8015192:	4770      	bx	lr
 8015194:	0000      	movs	r0, r0
	...

08015198 <__ieee754_pow>:
 8015198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801519c:	b091      	sub	sp, #68	@ 0x44
 801519e:	e9cd 2300 	strd	r2, r3, [sp]
 80151a2:	468b      	mov	fp, r1
 80151a4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80151a8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80151ac:	4682      	mov	sl, r0
 80151ae:	ea57 0001 	orrs.w	r0, r7, r1
 80151b2:	d112      	bne.n	80151da <__ieee754_pow+0x42>
 80151b4:	4653      	mov	r3, sl
 80151b6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80151ba:	18db      	adds	r3, r3, r3
 80151bc:	4152      	adcs	r2, r2
 80151be:	4298      	cmp	r0, r3
 80151c0:	4b93      	ldr	r3, [pc, #588]	@ (8015410 <__ieee754_pow+0x278>)
 80151c2:	4193      	sbcs	r3, r2
 80151c4:	f080 84cd 	bcs.w	8015b62 <__ieee754_pow+0x9ca>
 80151c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151cc:	4650      	mov	r0, sl
 80151ce:	4659      	mov	r1, fp
 80151d0:	f7ea ffcc 	bl	800016c <__adddf3>
 80151d4:	b011      	add	sp, #68	@ 0x44
 80151d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151da:	4b8e      	ldr	r3, [pc, #568]	@ (8015414 <__ieee754_pow+0x27c>)
 80151dc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80151e0:	429d      	cmp	r5, r3
 80151e2:	465e      	mov	r6, fp
 80151e4:	46d1      	mov	r9, sl
 80151e6:	d80b      	bhi.n	8015200 <__ieee754_pow+0x68>
 80151e8:	d105      	bne.n	80151f6 <__ieee754_pow+0x5e>
 80151ea:	f1ba 0f00 	cmp.w	sl, #0
 80151ee:	d1eb      	bne.n	80151c8 <__ieee754_pow+0x30>
 80151f0:	42af      	cmp	r7, r5
 80151f2:	d8e9      	bhi.n	80151c8 <__ieee754_pow+0x30>
 80151f4:	e001      	b.n	80151fa <__ieee754_pow+0x62>
 80151f6:	429f      	cmp	r7, r3
 80151f8:	d802      	bhi.n	8015200 <__ieee754_pow+0x68>
 80151fa:	429f      	cmp	r7, r3
 80151fc:	d10f      	bne.n	801521e <__ieee754_pow+0x86>
 80151fe:	b171      	cbz	r1, 801521e <__ieee754_pow+0x86>
 8015200:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8015204:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8015208:	ea56 0609 	orrs.w	r6, r6, r9
 801520c:	d1dc      	bne.n	80151c8 <__ieee754_pow+0x30>
 801520e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015212:	18db      	adds	r3, r3, r3
 8015214:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015218:	4152      	adcs	r2, r2
 801521a:	429e      	cmp	r6, r3
 801521c:	e7d0      	b.n	80151c0 <__ieee754_pow+0x28>
 801521e:	2e00      	cmp	r6, #0
 8015220:	462b      	mov	r3, r5
 8015222:	da42      	bge.n	80152aa <__ieee754_pow+0x112>
 8015224:	4a7c      	ldr	r2, [pc, #496]	@ (8015418 <__ieee754_pow+0x280>)
 8015226:	4297      	cmp	r7, r2
 8015228:	d856      	bhi.n	80152d8 <__ieee754_pow+0x140>
 801522a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801522e:	4297      	cmp	r7, r2
 8015230:	f240 84a6 	bls.w	8015b80 <__ieee754_pow+0x9e8>
 8015234:	153a      	asrs	r2, r7, #20
 8015236:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801523a:	2a14      	cmp	r2, #20
 801523c:	dd18      	ble.n	8015270 <__ieee754_pow+0xd8>
 801523e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015242:	fa21 f402 	lsr.w	r4, r1, r2
 8015246:	fa04 f202 	lsl.w	r2, r4, r2
 801524a:	428a      	cmp	r2, r1
 801524c:	f040 8498 	bne.w	8015b80 <__ieee754_pow+0x9e8>
 8015250:	f004 0401 	and.w	r4, r4, #1
 8015254:	f1c4 0402 	rsb	r4, r4, #2
 8015258:	2900      	cmp	r1, #0
 801525a:	d159      	bne.n	8015310 <__ieee754_pow+0x178>
 801525c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8015260:	d149      	bne.n	80152f6 <__ieee754_pow+0x15e>
 8015262:	4652      	mov	r2, sl
 8015264:	465b      	mov	r3, fp
 8015266:	4650      	mov	r0, sl
 8015268:	4659      	mov	r1, fp
 801526a:	f7eb f935 	bl	80004d8 <__aeabi_dmul>
 801526e:	e7b1      	b.n	80151d4 <__ieee754_pow+0x3c>
 8015270:	2900      	cmp	r1, #0
 8015272:	d14c      	bne.n	801530e <__ieee754_pow+0x176>
 8015274:	f1c2 0214 	rsb	r2, r2, #20
 8015278:	fa47 f402 	asr.w	r4, r7, r2
 801527c:	fa04 f202 	lsl.w	r2, r4, r2
 8015280:	42ba      	cmp	r2, r7
 8015282:	f040 847a 	bne.w	8015b7a <__ieee754_pow+0x9e2>
 8015286:	f004 0401 	and.w	r4, r4, #1
 801528a:	f1c4 0402 	rsb	r4, r4, #2
 801528e:	4a63      	ldr	r2, [pc, #396]	@ (801541c <__ieee754_pow+0x284>)
 8015290:	4297      	cmp	r7, r2
 8015292:	d1e3      	bne.n	801525c <__ieee754_pow+0xc4>
 8015294:	f1b8 0f00 	cmp.w	r8, #0
 8015298:	f280 846b 	bge.w	8015b72 <__ieee754_pow+0x9da>
 801529c:	4652      	mov	r2, sl
 801529e:	465b      	mov	r3, fp
 80152a0:	2000      	movs	r0, #0
 80152a2:	495e      	ldr	r1, [pc, #376]	@ (801541c <__ieee754_pow+0x284>)
 80152a4:	f7eb fa42 	bl	800072c <__aeabi_ddiv>
 80152a8:	e794      	b.n	80151d4 <__ieee754_pow+0x3c>
 80152aa:	2400      	movs	r4, #0
 80152ac:	bb81      	cbnz	r1, 8015310 <__ieee754_pow+0x178>
 80152ae:	4a59      	ldr	r2, [pc, #356]	@ (8015414 <__ieee754_pow+0x27c>)
 80152b0:	4297      	cmp	r7, r2
 80152b2:	d1ec      	bne.n	801528e <__ieee754_pow+0xf6>
 80152b4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 80152b8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80152bc:	ea53 0309 	orrs.w	r3, r3, r9
 80152c0:	f000 844f 	beq.w	8015b62 <__ieee754_pow+0x9ca>
 80152c4:	4b56      	ldr	r3, [pc, #344]	@ (8015420 <__ieee754_pow+0x288>)
 80152c6:	429d      	cmp	r5, r3
 80152c8:	d908      	bls.n	80152dc <__ieee754_pow+0x144>
 80152ca:	f1b8 0f00 	cmp.w	r8, #0
 80152ce:	f280 844c 	bge.w	8015b6a <__ieee754_pow+0x9d2>
 80152d2:	2000      	movs	r0, #0
 80152d4:	2100      	movs	r1, #0
 80152d6:	e77d      	b.n	80151d4 <__ieee754_pow+0x3c>
 80152d8:	2402      	movs	r4, #2
 80152da:	e7e7      	b.n	80152ac <__ieee754_pow+0x114>
 80152dc:	f1b8 0f00 	cmp.w	r8, #0
 80152e0:	f04f 0000 	mov.w	r0, #0
 80152e4:	f04f 0100 	mov.w	r1, #0
 80152e8:	f6bf af74 	bge.w	80151d4 <__ieee754_pow+0x3c>
 80152ec:	e9dd 0300 	ldrd	r0, r3, [sp]
 80152f0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80152f4:	e76e      	b.n	80151d4 <__ieee754_pow+0x3c>
 80152f6:	4a4b      	ldr	r2, [pc, #300]	@ (8015424 <__ieee754_pow+0x28c>)
 80152f8:	4590      	cmp	r8, r2
 80152fa:	d109      	bne.n	8015310 <__ieee754_pow+0x178>
 80152fc:	2e00      	cmp	r6, #0
 80152fe:	db07      	blt.n	8015310 <__ieee754_pow+0x178>
 8015300:	4650      	mov	r0, sl
 8015302:	4659      	mov	r1, fp
 8015304:	b011      	add	sp, #68	@ 0x44
 8015306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801530a:	f000 bd0f 	b.w	8015d2c <__ieee754_sqrt>
 801530e:	2400      	movs	r4, #0
 8015310:	4650      	mov	r0, sl
 8015312:	4659      	mov	r1, fp
 8015314:	9302      	str	r3, [sp, #8]
 8015316:	f000 fc69 	bl	8015bec <fabs>
 801531a:	9b02      	ldr	r3, [sp, #8]
 801531c:	f1b9 0f00 	cmp.w	r9, #0
 8015320:	d127      	bne.n	8015372 <__ieee754_pow+0x1da>
 8015322:	4a3e      	ldr	r2, [pc, #248]	@ (801541c <__ieee754_pow+0x284>)
 8015324:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8015328:	4594      	cmp	ip, r2
 801532a:	d000      	beq.n	801532e <__ieee754_pow+0x196>
 801532c:	bb0d      	cbnz	r5, 8015372 <__ieee754_pow+0x1da>
 801532e:	f1b8 0f00 	cmp.w	r8, #0
 8015332:	da05      	bge.n	8015340 <__ieee754_pow+0x1a8>
 8015334:	4602      	mov	r2, r0
 8015336:	460b      	mov	r3, r1
 8015338:	2000      	movs	r0, #0
 801533a:	4938      	ldr	r1, [pc, #224]	@ (801541c <__ieee754_pow+0x284>)
 801533c:	f7eb f9f6 	bl	800072c <__aeabi_ddiv>
 8015340:	2e00      	cmp	r6, #0
 8015342:	f6bf af47 	bge.w	80151d4 <__ieee754_pow+0x3c>
 8015346:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801534a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801534e:	4325      	orrs	r5, r4
 8015350:	d108      	bne.n	8015364 <__ieee754_pow+0x1cc>
 8015352:	4602      	mov	r2, r0
 8015354:	460b      	mov	r3, r1
 8015356:	4610      	mov	r0, r2
 8015358:	4619      	mov	r1, r3
 801535a:	f7ea ff05 	bl	8000168 <__aeabi_dsub>
 801535e:	4602      	mov	r2, r0
 8015360:	460b      	mov	r3, r1
 8015362:	e79f      	b.n	80152a4 <__ieee754_pow+0x10c>
 8015364:	2c01      	cmp	r4, #1
 8015366:	f47f af35 	bne.w	80151d4 <__ieee754_pow+0x3c>
 801536a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801536e:	4619      	mov	r1, r3
 8015370:	e730      	b.n	80151d4 <__ieee754_pow+0x3c>
 8015372:	0ff2      	lsrs	r2, r6, #31
 8015374:	3a01      	subs	r2, #1
 8015376:	ea52 0c04 	orrs.w	ip, r2, r4
 801537a:	d102      	bne.n	8015382 <__ieee754_pow+0x1ea>
 801537c:	4652      	mov	r2, sl
 801537e:	465b      	mov	r3, fp
 8015380:	e7e9      	b.n	8015356 <__ieee754_pow+0x1be>
 8015382:	f04f 0900 	mov.w	r9, #0
 8015386:	3c01      	subs	r4, #1
 8015388:	4314      	orrs	r4, r2
 801538a:	bf14      	ite	ne
 801538c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 801541c <__ieee754_pow+0x284>
 8015390:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8015428 <__ieee754_pow+0x290>
 8015394:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8015398:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 801539c:	f240 8104 	bls.w	80155a8 <__ieee754_pow+0x410>
 80153a0:	4b22      	ldr	r3, [pc, #136]	@ (801542c <__ieee754_pow+0x294>)
 80153a2:	429f      	cmp	r7, r3
 80153a4:	4b1e      	ldr	r3, [pc, #120]	@ (8015420 <__ieee754_pow+0x288>)
 80153a6:	d913      	bls.n	80153d0 <__ieee754_pow+0x238>
 80153a8:	429d      	cmp	r5, r3
 80153aa:	d808      	bhi.n	80153be <__ieee754_pow+0x226>
 80153ac:	f1b8 0f00 	cmp.w	r8, #0
 80153b0:	da08      	bge.n	80153c4 <__ieee754_pow+0x22c>
 80153b2:	2000      	movs	r0, #0
 80153b4:	b011      	add	sp, #68	@ 0x44
 80153b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153ba:	f000 bcb1 	b.w	8015d20 <__math_oflow>
 80153be:	f1b8 0f00 	cmp.w	r8, #0
 80153c2:	dcf6      	bgt.n	80153b2 <__ieee754_pow+0x21a>
 80153c4:	2000      	movs	r0, #0
 80153c6:	b011      	add	sp, #68	@ 0x44
 80153c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	f000 bca3 	b.w	8015d16 <__math_uflow>
 80153d0:	429d      	cmp	r5, r3
 80153d2:	d20c      	bcs.n	80153ee <__ieee754_pow+0x256>
 80153d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153d8:	2200      	movs	r2, #0
 80153da:	2300      	movs	r3, #0
 80153dc:	f7eb faee 	bl	80009bc <__aeabi_dcmplt>
 80153e0:	3800      	subs	r0, #0
 80153e2:	bf18      	it	ne
 80153e4:	2001      	movne	r0, #1
 80153e6:	f1b8 0f00 	cmp.w	r8, #0
 80153ea:	daec      	bge.n	80153c6 <__ieee754_pow+0x22e>
 80153ec:	e7e2      	b.n	80153b4 <__ieee754_pow+0x21c>
 80153ee:	4b0b      	ldr	r3, [pc, #44]	@ (801541c <__ieee754_pow+0x284>)
 80153f0:	2200      	movs	r2, #0
 80153f2:	429d      	cmp	r5, r3
 80153f4:	d91c      	bls.n	8015430 <__ieee754_pow+0x298>
 80153f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153fa:	2300      	movs	r3, #0
 80153fc:	f7eb fade 	bl	80009bc <__aeabi_dcmplt>
 8015400:	3800      	subs	r0, #0
 8015402:	bf18      	it	ne
 8015404:	2001      	movne	r0, #1
 8015406:	f1b8 0f00 	cmp.w	r8, #0
 801540a:	dcd3      	bgt.n	80153b4 <__ieee754_pow+0x21c>
 801540c:	e7db      	b.n	80153c6 <__ieee754_pow+0x22e>
 801540e:	bf00      	nop
 8015410:	fff00000 	.word	0xfff00000
 8015414:	7ff00000 	.word	0x7ff00000
 8015418:	433fffff 	.word	0x433fffff
 801541c:	3ff00000 	.word	0x3ff00000
 8015420:	3fefffff 	.word	0x3fefffff
 8015424:	3fe00000 	.word	0x3fe00000
 8015428:	bff00000 	.word	0xbff00000
 801542c:	43f00000 	.word	0x43f00000
 8015430:	4b59      	ldr	r3, [pc, #356]	@ (8015598 <__ieee754_pow+0x400>)
 8015432:	f7ea fe99 	bl	8000168 <__aeabi_dsub>
 8015436:	a350      	add	r3, pc, #320	@ (adr r3, 8015578 <__ieee754_pow+0x3e0>)
 8015438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543c:	4604      	mov	r4, r0
 801543e:	460d      	mov	r5, r1
 8015440:	f7eb f84a 	bl	80004d8 <__aeabi_dmul>
 8015444:	a34e      	add	r3, pc, #312	@ (adr r3, 8015580 <__ieee754_pow+0x3e8>)
 8015446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544a:	4606      	mov	r6, r0
 801544c:	460f      	mov	r7, r1
 801544e:	4620      	mov	r0, r4
 8015450:	4629      	mov	r1, r5
 8015452:	f7eb f841 	bl	80004d8 <__aeabi_dmul>
 8015456:	2200      	movs	r2, #0
 8015458:	4682      	mov	sl, r0
 801545a:	468b      	mov	fp, r1
 801545c:	4620      	mov	r0, r4
 801545e:	4629      	mov	r1, r5
 8015460:	4b4e      	ldr	r3, [pc, #312]	@ (801559c <__ieee754_pow+0x404>)
 8015462:	f7eb f839 	bl	80004d8 <__aeabi_dmul>
 8015466:	4602      	mov	r2, r0
 8015468:	460b      	mov	r3, r1
 801546a:	a147      	add	r1, pc, #284	@ (adr r1, 8015588 <__ieee754_pow+0x3f0>)
 801546c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015470:	f7ea fe7a 	bl	8000168 <__aeabi_dsub>
 8015474:	4622      	mov	r2, r4
 8015476:	462b      	mov	r3, r5
 8015478:	f7eb f82e 	bl	80004d8 <__aeabi_dmul>
 801547c:	4602      	mov	r2, r0
 801547e:	460b      	mov	r3, r1
 8015480:	2000      	movs	r0, #0
 8015482:	4947      	ldr	r1, [pc, #284]	@ (80155a0 <__ieee754_pow+0x408>)
 8015484:	f7ea fe70 	bl	8000168 <__aeabi_dsub>
 8015488:	4622      	mov	r2, r4
 801548a:	4680      	mov	r8, r0
 801548c:	4689      	mov	r9, r1
 801548e:	462b      	mov	r3, r5
 8015490:	4620      	mov	r0, r4
 8015492:	4629      	mov	r1, r5
 8015494:	f7eb f820 	bl	80004d8 <__aeabi_dmul>
 8015498:	4602      	mov	r2, r0
 801549a:	460b      	mov	r3, r1
 801549c:	4640      	mov	r0, r8
 801549e:	4649      	mov	r1, r9
 80154a0:	f7eb f81a 	bl	80004d8 <__aeabi_dmul>
 80154a4:	a33a      	add	r3, pc, #232	@ (adr r3, 8015590 <__ieee754_pow+0x3f8>)
 80154a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154aa:	f7eb f815 	bl	80004d8 <__aeabi_dmul>
 80154ae:	4602      	mov	r2, r0
 80154b0:	460b      	mov	r3, r1
 80154b2:	4650      	mov	r0, sl
 80154b4:	4659      	mov	r1, fp
 80154b6:	f7ea fe57 	bl	8000168 <__aeabi_dsub>
 80154ba:	2400      	movs	r4, #0
 80154bc:	4602      	mov	r2, r0
 80154be:	460b      	mov	r3, r1
 80154c0:	4680      	mov	r8, r0
 80154c2:	4689      	mov	r9, r1
 80154c4:	4630      	mov	r0, r6
 80154c6:	4639      	mov	r1, r7
 80154c8:	f7ea fe50 	bl	800016c <__adddf3>
 80154cc:	4632      	mov	r2, r6
 80154ce:	463b      	mov	r3, r7
 80154d0:	4620      	mov	r0, r4
 80154d2:	460d      	mov	r5, r1
 80154d4:	f7ea fe48 	bl	8000168 <__aeabi_dsub>
 80154d8:	4602      	mov	r2, r0
 80154da:	460b      	mov	r3, r1
 80154dc:	4640      	mov	r0, r8
 80154de:	4649      	mov	r1, r9
 80154e0:	f7ea fe42 	bl	8000168 <__aeabi_dsub>
 80154e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80154ec:	2300      	movs	r3, #0
 80154ee:	9304      	str	r3, [sp, #16]
 80154f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80154f4:	4606      	mov	r6, r0
 80154f6:	460f      	mov	r7, r1
 80154f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154fc:	465b      	mov	r3, fp
 80154fe:	4652      	mov	r2, sl
 8015500:	f7ea fe32 	bl	8000168 <__aeabi_dsub>
 8015504:	4622      	mov	r2, r4
 8015506:	462b      	mov	r3, r5
 8015508:	f7ea ffe6 	bl	80004d8 <__aeabi_dmul>
 801550c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015510:	4680      	mov	r8, r0
 8015512:	4689      	mov	r9, r1
 8015514:	4630      	mov	r0, r6
 8015516:	4639      	mov	r1, r7
 8015518:	f7ea ffde 	bl	80004d8 <__aeabi_dmul>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	4640      	mov	r0, r8
 8015522:	4649      	mov	r1, r9
 8015524:	f7ea fe22 	bl	800016c <__adddf3>
 8015528:	465b      	mov	r3, fp
 801552a:	4606      	mov	r6, r0
 801552c:	460f      	mov	r7, r1
 801552e:	4652      	mov	r2, sl
 8015530:	4620      	mov	r0, r4
 8015532:	4629      	mov	r1, r5
 8015534:	f7ea ffd0 	bl	80004d8 <__aeabi_dmul>
 8015538:	460b      	mov	r3, r1
 801553a:	4602      	mov	r2, r0
 801553c:	4680      	mov	r8, r0
 801553e:	4689      	mov	r9, r1
 8015540:	4630      	mov	r0, r6
 8015542:	4639      	mov	r1, r7
 8015544:	f7ea fe12 	bl	800016c <__adddf3>
 8015548:	4b16      	ldr	r3, [pc, #88]	@ (80155a4 <__ieee754_pow+0x40c>)
 801554a:	4604      	mov	r4, r0
 801554c:	4299      	cmp	r1, r3
 801554e:	460d      	mov	r5, r1
 8015550:	468b      	mov	fp, r1
 8015552:	f340 81fd 	ble.w	8015950 <__ieee754_pow+0x7b8>
 8015556:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801555a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801555e:	4303      	orrs	r3, r0
 8015560:	f000 81dc 	beq.w	801591c <__ieee754_pow+0x784>
 8015564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015568:	2200      	movs	r2, #0
 801556a:	2300      	movs	r3, #0
 801556c:	f7eb fa26 	bl	80009bc <__aeabi_dcmplt>
 8015570:	3800      	subs	r0, #0
 8015572:	bf18      	it	ne
 8015574:	2001      	movne	r0, #1
 8015576:	e71d      	b.n	80153b4 <__ieee754_pow+0x21c>
 8015578:	60000000 	.word	0x60000000
 801557c:	3ff71547 	.word	0x3ff71547
 8015580:	f85ddf44 	.word	0xf85ddf44
 8015584:	3e54ae0b 	.word	0x3e54ae0b
 8015588:	55555555 	.word	0x55555555
 801558c:	3fd55555 	.word	0x3fd55555
 8015590:	652b82fe 	.word	0x652b82fe
 8015594:	3ff71547 	.word	0x3ff71547
 8015598:	3ff00000 	.word	0x3ff00000
 801559c:	3fd00000 	.word	0x3fd00000
 80155a0:	3fe00000 	.word	0x3fe00000
 80155a4:	408fffff 	.word	0x408fffff
 80155a8:	4ad3      	ldr	r2, [pc, #844]	@ (80158f8 <__ieee754_pow+0x760>)
 80155aa:	4032      	ands	r2, r6
 80155ac:	2a00      	cmp	r2, #0
 80155ae:	f040 817a 	bne.w	80158a6 <__ieee754_pow+0x70e>
 80155b2:	4bd2      	ldr	r3, [pc, #840]	@ (80158fc <__ieee754_pow+0x764>)
 80155b4:	2200      	movs	r2, #0
 80155b6:	f7ea ff8f 	bl	80004d8 <__aeabi_dmul>
 80155ba:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80155be:	460b      	mov	r3, r1
 80155c0:	151a      	asrs	r2, r3, #20
 80155c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80155c6:	4422      	add	r2, r4
 80155c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80155ca:	4acd      	ldr	r2, [pc, #820]	@ (8015900 <__ieee754_pow+0x768>)
 80155cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155d0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80155d4:	4293      	cmp	r3, r2
 80155d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80155da:	dd08      	ble.n	80155ee <__ieee754_pow+0x456>
 80155dc:	4ac9      	ldr	r2, [pc, #804]	@ (8015904 <__ieee754_pow+0x76c>)
 80155de:	4293      	cmp	r3, r2
 80155e0:	f340 8163 	ble.w	80158aa <__ieee754_pow+0x712>
 80155e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155e6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80155ea:	3301      	adds	r3, #1
 80155ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80155ee:	2600      	movs	r6, #0
 80155f0:	00f3      	lsls	r3, r6, #3
 80155f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80155f4:	4bc4      	ldr	r3, [pc, #784]	@ (8015908 <__ieee754_pow+0x770>)
 80155f6:	4629      	mov	r1, r5
 80155f8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80155fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015600:	461a      	mov	r2, r3
 8015602:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8015606:	4623      	mov	r3, r4
 8015608:	4682      	mov	sl, r0
 801560a:	f7ea fdad 	bl	8000168 <__aeabi_dsub>
 801560e:	4652      	mov	r2, sl
 8015610:	462b      	mov	r3, r5
 8015612:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8015616:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801561a:	f7ea fda7 	bl	800016c <__adddf3>
 801561e:	4602      	mov	r2, r0
 8015620:	460b      	mov	r3, r1
 8015622:	2000      	movs	r0, #0
 8015624:	49b9      	ldr	r1, [pc, #740]	@ (801590c <__ieee754_pow+0x774>)
 8015626:	f7eb f881 	bl	800072c <__aeabi_ddiv>
 801562a:	4602      	mov	r2, r0
 801562c:	460b      	mov	r3, r1
 801562e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015636:	f7ea ff4f 	bl	80004d8 <__aeabi_dmul>
 801563a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801563e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8015642:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015646:	2300      	movs	r3, #0
 8015648:	2200      	movs	r2, #0
 801564a:	46ab      	mov	fp, r5
 801564c:	106d      	asrs	r5, r5, #1
 801564e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8015652:	9304      	str	r3, [sp, #16]
 8015654:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8015658:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801565c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8015660:	4640      	mov	r0, r8
 8015662:	4649      	mov	r1, r9
 8015664:	4614      	mov	r4, r2
 8015666:	461d      	mov	r5, r3
 8015668:	f7ea ff36 	bl	80004d8 <__aeabi_dmul>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015674:	f7ea fd78 	bl	8000168 <__aeabi_dsub>
 8015678:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801567c:	4606      	mov	r6, r0
 801567e:	460f      	mov	r7, r1
 8015680:	4620      	mov	r0, r4
 8015682:	4629      	mov	r1, r5
 8015684:	f7ea fd70 	bl	8000168 <__aeabi_dsub>
 8015688:	4602      	mov	r2, r0
 801568a:	460b      	mov	r3, r1
 801568c:	4650      	mov	r0, sl
 801568e:	4659      	mov	r1, fp
 8015690:	f7ea fd6a 	bl	8000168 <__aeabi_dsub>
 8015694:	4642      	mov	r2, r8
 8015696:	464b      	mov	r3, r9
 8015698:	f7ea ff1e 	bl	80004d8 <__aeabi_dmul>
 801569c:	4602      	mov	r2, r0
 801569e:	460b      	mov	r3, r1
 80156a0:	4630      	mov	r0, r6
 80156a2:	4639      	mov	r1, r7
 80156a4:	f7ea fd60 	bl	8000168 <__aeabi_dsub>
 80156a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80156ac:	f7ea ff14 	bl	80004d8 <__aeabi_dmul>
 80156b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80156b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80156b8:	4610      	mov	r0, r2
 80156ba:	4619      	mov	r1, r3
 80156bc:	f7ea ff0c 	bl	80004d8 <__aeabi_dmul>
 80156c0:	a37b      	add	r3, pc, #492	@ (adr r3, 80158b0 <__ieee754_pow+0x718>)
 80156c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c6:	4604      	mov	r4, r0
 80156c8:	460d      	mov	r5, r1
 80156ca:	f7ea ff05 	bl	80004d8 <__aeabi_dmul>
 80156ce:	a37a      	add	r3, pc, #488	@ (adr r3, 80158b8 <__ieee754_pow+0x720>)
 80156d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d4:	f7ea fd4a 	bl	800016c <__adddf3>
 80156d8:	4622      	mov	r2, r4
 80156da:	462b      	mov	r3, r5
 80156dc:	f7ea fefc 	bl	80004d8 <__aeabi_dmul>
 80156e0:	a377      	add	r3, pc, #476	@ (adr r3, 80158c0 <__ieee754_pow+0x728>)
 80156e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e6:	f7ea fd41 	bl	800016c <__adddf3>
 80156ea:	4622      	mov	r2, r4
 80156ec:	462b      	mov	r3, r5
 80156ee:	f7ea fef3 	bl	80004d8 <__aeabi_dmul>
 80156f2:	a375      	add	r3, pc, #468	@ (adr r3, 80158c8 <__ieee754_pow+0x730>)
 80156f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f8:	f7ea fd38 	bl	800016c <__adddf3>
 80156fc:	4622      	mov	r2, r4
 80156fe:	462b      	mov	r3, r5
 8015700:	f7ea feea 	bl	80004d8 <__aeabi_dmul>
 8015704:	a372      	add	r3, pc, #456	@ (adr r3, 80158d0 <__ieee754_pow+0x738>)
 8015706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570a:	f7ea fd2f 	bl	800016c <__adddf3>
 801570e:	4622      	mov	r2, r4
 8015710:	462b      	mov	r3, r5
 8015712:	f7ea fee1 	bl	80004d8 <__aeabi_dmul>
 8015716:	a370      	add	r3, pc, #448	@ (adr r3, 80158d8 <__ieee754_pow+0x740>)
 8015718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571c:	f7ea fd26 	bl	800016c <__adddf3>
 8015720:	4622      	mov	r2, r4
 8015722:	4606      	mov	r6, r0
 8015724:	460f      	mov	r7, r1
 8015726:	462b      	mov	r3, r5
 8015728:	4620      	mov	r0, r4
 801572a:	4629      	mov	r1, r5
 801572c:	f7ea fed4 	bl	80004d8 <__aeabi_dmul>
 8015730:	4602      	mov	r2, r0
 8015732:	460b      	mov	r3, r1
 8015734:	4630      	mov	r0, r6
 8015736:	4639      	mov	r1, r7
 8015738:	f7ea fece 	bl	80004d8 <__aeabi_dmul>
 801573c:	4604      	mov	r4, r0
 801573e:	460d      	mov	r5, r1
 8015740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015744:	4642      	mov	r2, r8
 8015746:	464b      	mov	r3, r9
 8015748:	f7ea fd10 	bl	800016c <__adddf3>
 801574c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015750:	f7ea fec2 	bl	80004d8 <__aeabi_dmul>
 8015754:	4622      	mov	r2, r4
 8015756:	462b      	mov	r3, r5
 8015758:	f7ea fd08 	bl	800016c <__adddf3>
 801575c:	4642      	mov	r2, r8
 801575e:	4682      	mov	sl, r0
 8015760:	468b      	mov	fp, r1
 8015762:	464b      	mov	r3, r9
 8015764:	4640      	mov	r0, r8
 8015766:	4649      	mov	r1, r9
 8015768:	f7ea feb6 	bl	80004d8 <__aeabi_dmul>
 801576c:	2200      	movs	r2, #0
 801576e:	4b68      	ldr	r3, [pc, #416]	@ (8015910 <__ieee754_pow+0x778>)
 8015770:	4606      	mov	r6, r0
 8015772:	460f      	mov	r7, r1
 8015774:	f7ea fcfa 	bl	800016c <__adddf3>
 8015778:	4652      	mov	r2, sl
 801577a:	465b      	mov	r3, fp
 801577c:	f7ea fcf6 	bl	800016c <__adddf3>
 8015780:	2400      	movs	r4, #0
 8015782:	460d      	mov	r5, r1
 8015784:	4622      	mov	r2, r4
 8015786:	460b      	mov	r3, r1
 8015788:	4640      	mov	r0, r8
 801578a:	4649      	mov	r1, r9
 801578c:	f7ea fea4 	bl	80004d8 <__aeabi_dmul>
 8015790:	2200      	movs	r2, #0
 8015792:	4680      	mov	r8, r0
 8015794:	4689      	mov	r9, r1
 8015796:	4620      	mov	r0, r4
 8015798:	4629      	mov	r1, r5
 801579a:	4b5d      	ldr	r3, [pc, #372]	@ (8015910 <__ieee754_pow+0x778>)
 801579c:	f7ea fce4 	bl	8000168 <__aeabi_dsub>
 80157a0:	4632      	mov	r2, r6
 80157a2:	463b      	mov	r3, r7
 80157a4:	f7ea fce0 	bl	8000168 <__aeabi_dsub>
 80157a8:	4602      	mov	r2, r0
 80157aa:	460b      	mov	r3, r1
 80157ac:	4650      	mov	r0, sl
 80157ae:	4659      	mov	r1, fp
 80157b0:	f7ea fcda 	bl	8000168 <__aeabi_dsub>
 80157b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80157b8:	f7ea fe8e 	bl	80004d8 <__aeabi_dmul>
 80157bc:	4622      	mov	r2, r4
 80157be:	4606      	mov	r6, r0
 80157c0:	460f      	mov	r7, r1
 80157c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80157c6:	462b      	mov	r3, r5
 80157c8:	f7ea fe86 	bl	80004d8 <__aeabi_dmul>
 80157cc:	4602      	mov	r2, r0
 80157ce:	460b      	mov	r3, r1
 80157d0:	4630      	mov	r0, r6
 80157d2:	4639      	mov	r1, r7
 80157d4:	f7ea fcca 	bl	800016c <__adddf3>
 80157d8:	2400      	movs	r4, #0
 80157da:	4606      	mov	r6, r0
 80157dc:	460f      	mov	r7, r1
 80157de:	4602      	mov	r2, r0
 80157e0:	460b      	mov	r3, r1
 80157e2:	4640      	mov	r0, r8
 80157e4:	4649      	mov	r1, r9
 80157e6:	f7ea fcc1 	bl	800016c <__adddf3>
 80157ea:	a33d      	add	r3, pc, #244	@ (adr r3, 80158e0 <__ieee754_pow+0x748>)
 80157ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f0:	4620      	mov	r0, r4
 80157f2:	460d      	mov	r5, r1
 80157f4:	f7ea fe70 	bl	80004d8 <__aeabi_dmul>
 80157f8:	4642      	mov	r2, r8
 80157fa:	464b      	mov	r3, r9
 80157fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015800:	4620      	mov	r0, r4
 8015802:	4629      	mov	r1, r5
 8015804:	f7ea fcb0 	bl	8000168 <__aeabi_dsub>
 8015808:	4602      	mov	r2, r0
 801580a:	460b      	mov	r3, r1
 801580c:	4630      	mov	r0, r6
 801580e:	4639      	mov	r1, r7
 8015810:	f7ea fcaa 	bl	8000168 <__aeabi_dsub>
 8015814:	a334      	add	r3, pc, #208	@ (adr r3, 80158e8 <__ieee754_pow+0x750>)
 8015816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581a:	f7ea fe5d 	bl	80004d8 <__aeabi_dmul>
 801581e:	a334      	add	r3, pc, #208	@ (adr r3, 80158f0 <__ieee754_pow+0x758>)
 8015820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	4620      	mov	r0, r4
 801582a:	4629      	mov	r1, r5
 801582c:	f7ea fe54 	bl	80004d8 <__aeabi_dmul>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4630      	mov	r0, r6
 8015836:	4639      	mov	r1, r7
 8015838:	f7ea fc98 	bl	800016c <__adddf3>
 801583c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801583e:	4b35      	ldr	r3, [pc, #212]	@ (8015914 <__ieee754_pow+0x77c>)
 8015840:	2400      	movs	r4, #0
 8015842:	4413      	add	r3, r2
 8015844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015848:	f7ea fc90 	bl	800016c <__adddf3>
 801584c:	4682      	mov	sl, r0
 801584e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015850:	468b      	mov	fp, r1
 8015852:	f7ea fdd7 	bl	8000404 <__aeabi_i2d>
 8015856:	4606      	mov	r6, r0
 8015858:	460f      	mov	r7, r1
 801585a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801585c:	4b2e      	ldr	r3, [pc, #184]	@ (8015918 <__ieee754_pow+0x780>)
 801585e:	4413      	add	r3, r2
 8015860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015864:	4652      	mov	r2, sl
 8015866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801586a:	465b      	mov	r3, fp
 801586c:	f7ea fc7e 	bl	800016c <__adddf3>
 8015870:	4642      	mov	r2, r8
 8015872:	464b      	mov	r3, r9
 8015874:	f7ea fc7a 	bl	800016c <__adddf3>
 8015878:	4632      	mov	r2, r6
 801587a:	463b      	mov	r3, r7
 801587c:	f7ea fc76 	bl	800016c <__adddf3>
 8015880:	4632      	mov	r2, r6
 8015882:	463b      	mov	r3, r7
 8015884:	4620      	mov	r0, r4
 8015886:	460d      	mov	r5, r1
 8015888:	f7ea fc6e 	bl	8000168 <__aeabi_dsub>
 801588c:	4642      	mov	r2, r8
 801588e:	464b      	mov	r3, r9
 8015890:	f7ea fc6a 	bl	8000168 <__aeabi_dsub>
 8015894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015898:	f7ea fc66 	bl	8000168 <__aeabi_dsub>
 801589c:	4602      	mov	r2, r0
 801589e:	460b      	mov	r3, r1
 80158a0:	4650      	mov	r0, sl
 80158a2:	4659      	mov	r1, fp
 80158a4:	e61c      	b.n	80154e0 <__ieee754_pow+0x348>
 80158a6:	2400      	movs	r4, #0
 80158a8:	e68a      	b.n	80155c0 <__ieee754_pow+0x428>
 80158aa:	2601      	movs	r6, #1
 80158ac:	e6a0      	b.n	80155f0 <__ieee754_pow+0x458>
 80158ae:	bf00      	nop
 80158b0:	4a454eef 	.word	0x4a454eef
 80158b4:	3fca7e28 	.word	0x3fca7e28
 80158b8:	93c9db65 	.word	0x93c9db65
 80158bc:	3fcd864a 	.word	0x3fcd864a
 80158c0:	a91d4101 	.word	0xa91d4101
 80158c4:	3fd17460 	.word	0x3fd17460
 80158c8:	518f264d 	.word	0x518f264d
 80158cc:	3fd55555 	.word	0x3fd55555
 80158d0:	db6fabff 	.word	0xdb6fabff
 80158d4:	3fdb6db6 	.word	0x3fdb6db6
 80158d8:	33333303 	.word	0x33333303
 80158dc:	3fe33333 	.word	0x3fe33333
 80158e0:	e0000000 	.word	0xe0000000
 80158e4:	3feec709 	.word	0x3feec709
 80158e8:	dc3a03fd 	.word	0xdc3a03fd
 80158ec:	3feec709 	.word	0x3feec709
 80158f0:	145b01f5 	.word	0x145b01f5
 80158f4:	be3e2fe0 	.word	0xbe3e2fe0
 80158f8:	7ff00000 	.word	0x7ff00000
 80158fc:	43400000 	.word	0x43400000
 8015900:	0003988e 	.word	0x0003988e
 8015904:	000bb679 	.word	0x000bb679
 8015908:	08017678 	.word	0x08017678
 801590c:	3ff00000 	.word	0x3ff00000
 8015910:	40080000 	.word	0x40080000
 8015914:	08017658 	.word	0x08017658
 8015918:	08017668 	.word	0x08017668
 801591c:	a39a      	add	r3, pc, #616	@ (adr r3, 8015b88 <__ieee754_pow+0x9f0>)
 801591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015922:	4630      	mov	r0, r6
 8015924:	4639      	mov	r1, r7
 8015926:	f7ea fc21 	bl	800016c <__adddf3>
 801592a:	4642      	mov	r2, r8
 801592c:	e9cd 0100 	strd	r0, r1, [sp]
 8015930:	464b      	mov	r3, r9
 8015932:	4620      	mov	r0, r4
 8015934:	4629      	mov	r1, r5
 8015936:	f7ea fc17 	bl	8000168 <__aeabi_dsub>
 801593a:	4602      	mov	r2, r0
 801593c:	460b      	mov	r3, r1
 801593e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015942:	f7eb f859 	bl	80009f8 <__aeabi_dcmpgt>
 8015946:	2800      	cmp	r0, #0
 8015948:	f47f ae0c 	bne.w	8015564 <__ieee754_pow+0x3cc>
 801594c:	4ba0      	ldr	r3, [pc, #640]	@ (8015bd0 <__ieee754_pow+0xa38>)
 801594e:	e022      	b.n	8015996 <__ieee754_pow+0x7fe>
 8015950:	4ca0      	ldr	r4, [pc, #640]	@ (8015bd4 <__ieee754_pow+0xa3c>)
 8015952:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015956:	42a3      	cmp	r3, r4
 8015958:	d919      	bls.n	801598e <__ieee754_pow+0x7f6>
 801595a:	4b9f      	ldr	r3, [pc, #636]	@ (8015bd8 <__ieee754_pow+0xa40>)
 801595c:	440b      	add	r3, r1
 801595e:	4303      	orrs	r3, r0
 8015960:	d009      	beq.n	8015976 <__ieee754_pow+0x7de>
 8015962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015966:	2200      	movs	r2, #0
 8015968:	2300      	movs	r3, #0
 801596a:	f7eb f827 	bl	80009bc <__aeabi_dcmplt>
 801596e:	3800      	subs	r0, #0
 8015970:	bf18      	it	ne
 8015972:	2001      	movne	r0, #1
 8015974:	e527      	b.n	80153c6 <__ieee754_pow+0x22e>
 8015976:	4642      	mov	r2, r8
 8015978:	464b      	mov	r3, r9
 801597a:	f7ea fbf5 	bl	8000168 <__aeabi_dsub>
 801597e:	4632      	mov	r2, r6
 8015980:	463b      	mov	r3, r7
 8015982:	f7eb f82f 	bl	80009e4 <__aeabi_dcmpge>
 8015986:	2800      	cmp	r0, #0
 8015988:	d1eb      	bne.n	8015962 <__ieee754_pow+0x7ca>
 801598a:	4b94      	ldr	r3, [pc, #592]	@ (8015bdc <__ieee754_pow+0xa44>)
 801598c:	e003      	b.n	8015996 <__ieee754_pow+0x7fe>
 801598e:	4a94      	ldr	r2, [pc, #592]	@ (8015be0 <__ieee754_pow+0xa48>)
 8015990:	4293      	cmp	r3, r2
 8015992:	f240 80e1 	bls.w	8015b58 <__ieee754_pow+0x9c0>
 8015996:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 801599a:	151b      	asrs	r3, r3, #20
 801599c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80159a0:	fa4a fa03 	asr.w	sl, sl, r3
 80159a4:	44da      	add	sl, fp
 80159a6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80159aa:	488e      	ldr	r0, [pc, #568]	@ (8015be4 <__ieee754_pow+0xa4c>)
 80159ac:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80159b0:	4108      	asrs	r0, r1
 80159b2:	ea00 030a 	and.w	r3, r0, sl
 80159b6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80159ba:	f1c1 0114 	rsb	r1, r1, #20
 80159be:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80159c2:	4640      	mov	r0, r8
 80159c4:	fa4a fa01 	asr.w	sl, sl, r1
 80159c8:	f1bb 0f00 	cmp.w	fp, #0
 80159cc:	4649      	mov	r1, r9
 80159ce:	f04f 0200 	mov.w	r2, #0
 80159d2:	bfb8      	it	lt
 80159d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80159d8:	f7ea fbc6 	bl	8000168 <__aeabi_dsub>
 80159dc:	4680      	mov	r8, r0
 80159de:	4689      	mov	r9, r1
 80159e0:	2400      	movs	r4, #0
 80159e2:	4632      	mov	r2, r6
 80159e4:	463b      	mov	r3, r7
 80159e6:	4640      	mov	r0, r8
 80159e8:	4649      	mov	r1, r9
 80159ea:	f7ea fbbf 	bl	800016c <__adddf3>
 80159ee:	a368      	add	r3, pc, #416	@ (adr r3, 8015b90 <__ieee754_pow+0x9f8>)
 80159f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f4:	4620      	mov	r0, r4
 80159f6:	460d      	mov	r5, r1
 80159f8:	f7ea fd6e 	bl	80004d8 <__aeabi_dmul>
 80159fc:	4642      	mov	r2, r8
 80159fe:	464b      	mov	r3, r9
 8015a00:	e9cd 0100 	strd	r0, r1, [sp]
 8015a04:	4620      	mov	r0, r4
 8015a06:	4629      	mov	r1, r5
 8015a08:	f7ea fbae 	bl	8000168 <__aeabi_dsub>
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	460b      	mov	r3, r1
 8015a10:	4630      	mov	r0, r6
 8015a12:	4639      	mov	r1, r7
 8015a14:	f7ea fba8 	bl	8000168 <__aeabi_dsub>
 8015a18:	a35f      	add	r3, pc, #380	@ (adr r3, 8015b98 <__ieee754_pow+0xa00>)
 8015a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1e:	f7ea fd5b 	bl	80004d8 <__aeabi_dmul>
 8015a22:	a35f      	add	r3, pc, #380	@ (adr r3, 8015ba0 <__ieee754_pow+0xa08>)
 8015a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a28:	4680      	mov	r8, r0
 8015a2a:	4689      	mov	r9, r1
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	4629      	mov	r1, r5
 8015a30:	f7ea fd52 	bl	80004d8 <__aeabi_dmul>
 8015a34:	4602      	mov	r2, r0
 8015a36:	460b      	mov	r3, r1
 8015a38:	4640      	mov	r0, r8
 8015a3a:	4649      	mov	r1, r9
 8015a3c:	f7ea fb96 	bl	800016c <__adddf3>
 8015a40:	4604      	mov	r4, r0
 8015a42:	460d      	mov	r5, r1
 8015a44:	4602      	mov	r2, r0
 8015a46:	460b      	mov	r3, r1
 8015a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a4c:	f7ea fb8e 	bl	800016c <__adddf3>
 8015a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a54:	4680      	mov	r8, r0
 8015a56:	4689      	mov	r9, r1
 8015a58:	f7ea fb86 	bl	8000168 <__aeabi_dsub>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	460b      	mov	r3, r1
 8015a60:	4620      	mov	r0, r4
 8015a62:	4629      	mov	r1, r5
 8015a64:	f7ea fb80 	bl	8000168 <__aeabi_dsub>
 8015a68:	4642      	mov	r2, r8
 8015a6a:	4606      	mov	r6, r0
 8015a6c:	460f      	mov	r7, r1
 8015a6e:	464b      	mov	r3, r9
 8015a70:	4640      	mov	r0, r8
 8015a72:	4649      	mov	r1, r9
 8015a74:	f7ea fd30 	bl	80004d8 <__aeabi_dmul>
 8015a78:	a34b      	add	r3, pc, #300	@ (adr r3, 8015ba8 <__ieee754_pow+0xa10>)
 8015a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7e:	4604      	mov	r4, r0
 8015a80:	460d      	mov	r5, r1
 8015a82:	f7ea fd29 	bl	80004d8 <__aeabi_dmul>
 8015a86:	a34a      	add	r3, pc, #296	@ (adr r3, 8015bb0 <__ieee754_pow+0xa18>)
 8015a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8c:	f7ea fb6c 	bl	8000168 <__aeabi_dsub>
 8015a90:	4622      	mov	r2, r4
 8015a92:	462b      	mov	r3, r5
 8015a94:	f7ea fd20 	bl	80004d8 <__aeabi_dmul>
 8015a98:	a347      	add	r3, pc, #284	@ (adr r3, 8015bb8 <__ieee754_pow+0xa20>)
 8015a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9e:	f7ea fb65 	bl	800016c <__adddf3>
 8015aa2:	4622      	mov	r2, r4
 8015aa4:	462b      	mov	r3, r5
 8015aa6:	f7ea fd17 	bl	80004d8 <__aeabi_dmul>
 8015aaa:	a345      	add	r3, pc, #276	@ (adr r3, 8015bc0 <__ieee754_pow+0xa28>)
 8015aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab0:	f7ea fb5a 	bl	8000168 <__aeabi_dsub>
 8015ab4:	4622      	mov	r2, r4
 8015ab6:	462b      	mov	r3, r5
 8015ab8:	f7ea fd0e 	bl	80004d8 <__aeabi_dmul>
 8015abc:	a342      	add	r3, pc, #264	@ (adr r3, 8015bc8 <__ieee754_pow+0xa30>)
 8015abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac2:	f7ea fb53 	bl	800016c <__adddf3>
 8015ac6:	4622      	mov	r2, r4
 8015ac8:	462b      	mov	r3, r5
 8015aca:	f7ea fd05 	bl	80004d8 <__aeabi_dmul>
 8015ace:	4602      	mov	r2, r0
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	4640      	mov	r0, r8
 8015ad4:	4649      	mov	r1, r9
 8015ad6:	f7ea fb47 	bl	8000168 <__aeabi_dsub>
 8015ada:	4604      	mov	r4, r0
 8015adc:	460d      	mov	r5, r1
 8015ade:	4602      	mov	r2, r0
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	4640      	mov	r0, r8
 8015ae4:	4649      	mov	r1, r9
 8015ae6:	f7ea fcf7 	bl	80004d8 <__aeabi_dmul>
 8015aea:	2200      	movs	r2, #0
 8015aec:	e9cd 0100 	strd	r0, r1, [sp]
 8015af0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015af4:	4620      	mov	r0, r4
 8015af6:	4629      	mov	r1, r5
 8015af8:	f7ea fb36 	bl	8000168 <__aeabi_dsub>
 8015afc:	4602      	mov	r2, r0
 8015afe:	460b      	mov	r3, r1
 8015b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b04:	f7ea fe12 	bl	800072c <__aeabi_ddiv>
 8015b08:	4632      	mov	r2, r6
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	460d      	mov	r5, r1
 8015b0e:	463b      	mov	r3, r7
 8015b10:	4640      	mov	r0, r8
 8015b12:	4649      	mov	r1, r9
 8015b14:	f7ea fce0 	bl	80004d8 <__aeabi_dmul>
 8015b18:	4632      	mov	r2, r6
 8015b1a:	463b      	mov	r3, r7
 8015b1c:	f7ea fb26 	bl	800016c <__adddf3>
 8015b20:	4602      	mov	r2, r0
 8015b22:	460b      	mov	r3, r1
 8015b24:	4620      	mov	r0, r4
 8015b26:	4629      	mov	r1, r5
 8015b28:	f7ea fb1e 	bl	8000168 <__aeabi_dsub>
 8015b2c:	4642      	mov	r2, r8
 8015b2e:	464b      	mov	r3, r9
 8015b30:	f7ea fb1a 	bl	8000168 <__aeabi_dsub>
 8015b34:	4602      	mov	r2, r0
 8015b36:	460b      	mov	r3, r1
 8015b38:	2000      	movs	r0, #0
 8015b3a:	492b      	ldr	r1, [pc, #172]	@ (8015be8 <__ieee754_pow+0xa50>)
 8015b3c:	f7ea fb14 	bl	8000168 <__aeabi_dsub>
 8015b40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015b44:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8015b48:	da09      	bge.n	8015b5e <__ieee754_pow+0x9c6>
 8015b4a:	4652      	mov	r2, sl
 8015b4c:	f000 f854 	bl	8015bf8 <scalbn>
 8015b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b54:	f7ff bb89 	b.w	801526a <__ieee754_pow+0xd2>
 8015b58:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015b5c:	e740      	b.n	80159e0 <__ieee754_pow+0x848>
 8015b5e:	4621      	mov	r1, r4
 8015b60:	e7f6      	b.n	8015b50 <__ieee754_pow+0x9b8>
 8015b62:	2000      	movs	r0, #0
 8015b64:	4920      	ldr	r1, [pc, #128]	@ (8015be8 <__ieee754_pow+0xa50>)
 8015b66:	f7ff bb35 	b.w	80151d4 <__ieee754_pow+0x3c>
 8015b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b6e:	f7ff bb31 	b.w	80151d4 <__ieee754_pow+0x3c>
 8015b72:	4650      	mov	r0, sl
 8015b74:	4659      	mov	r1, fp
 8015b76:	f7ff bb2d 	b.w	80151d4 <__ieee754_pow+0x3c>
 8015b7a:	460c      	mov	r4, r1
 8015b7c:	f7ff bb87 	b.w	801528e <__ieee754_pow+0xf6>
 8015b80:	2400      	movs	r4, #0
 8015b82:	f7ff bb69 	b.w	8015258 <__ieee754_pow+0xc0>
 8015b86:	bf00      	nop
 8015b88:	652b82fe 	.word	0x652b82fe
 8015b8c:	3c971547 	.word	0x3c971547
 8015b90:	00000000 	.word	0x00000000
 8015b94:	3fe62e43 	.word	0x3fe62e43
 8015b98:	fefa39ef 	.word	0xfefa39ef
 8015b9c:	3fe62e42 	.word	0x3fe62e42
 8015ba0:	0ca86c39 	.word	0x0ca86c39
 8015ba4:	be205c61 	.word	0xbe205c61
 8015ba8:	72bea4d0 	.word	0x72bea4d0
 8015bac:	3e663769 	.word	0x3e663769
 8015bb0:	c5d26bf1 	.word	0xc5d26bf1
 8015bb4:	3ebbbd41 	.word	0x3ebbbd41
 8015bb8:	af25de2c 	.word	0xaf25de2c
 8015bbc:	3f11566a 	.word	0x3f11566a
 8015bc0:	16bebd93 	.word	0x16bebd93
 8015bc4:	3f66c16c 	.word	0x3f66c16c
 8015bc8:	5555553e 	.word	0x5555553e
 8015bcc:	3fc55555 	.word	0x3fc55555
 8015bd0:	40900000 	.word	0x40900000
 8015bd4:	4090cbff 	.word	0x4090cbff
 8015bd8:	3f6f3400 	.word	0x3f6f3400
 8015bdc:	4090cc00 	.word	0x4090cc00
 8015be0:	3fe00000 	.word	0x3fe00000
 8015be4:	fff00000 	.word	0xfff00000
 8015be8:	3ff00000 	.word	0x3ff00000

08015bec <fabs>:
 8015bec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	4770      	bx	lr
 8015bf4:	0000      	movs	r0, r0
	...

08015bf8 <scalbn>:
 8015bf8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8015bfc:	4616      	mov	r6, r2
 8015bfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015c02:	4683      	mov	fp, r0
 8015c04:	468c      	mov	ip, r1
 8015c06:	460b      	mov	r3, r1
 8015c08:	b982      	cbnz	r2, 8015c2c <scalbn+0x34>
 8015c0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015c0e:	4303      	orrs	r3, r0
 8015c10:	d035      	beq.n	8015c7e <scalbn+0x86>
 8015c12:	4b2d      	ldr	r3, [pc, #180]	@ (8015cc8 <scalbn+0xd0>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	f7ea fc5f 	bl	80004d8 <__aeabi_dmul>
 8015c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8015ccc <scalbn+0xd4>)
 8015c1c:	4683      	mov	fp, r0
 8015c1e:	429e      	cmp	r6, r3
 8015c20:	468c      	mov	ip, r1
 8015c22:	da0d      	bge.n	8015c40 <scalbn+0x48>
 8015c24:	a324      	add	r3, pc, #144	@ (adr r3, 8015cb8 <scalbn+0xc0>)
 8015c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c2a:	e019      	b.n	8015c60 <scalbn+0x68>
 8015c2c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8015c30:	42ba      	cmp	r2, r7
 8015c32:	d109      	bne.n	8015c48 <scalbn+0x50>
 8015c34:	4602      	mov	r2, r0
 8015c36:	f7ea fa99 	bl	800016c <__adddf3>
 8015c3a:	4683      	mov	fp, r0
 8015c3c:	468c      	mov	ip, r1
 8015c3e:	e01e      	b.n	8015c7e <scalbn+0x86>
 8015c40:	460b      	mov	r3, r1
 8015c42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015c46:	3a36      	subs	r2, #54	@ 0x36
 8015c48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015c4c:	428e      	cmp	r6, r1
 8015c4e:	dd0a      	ble.n	8015c66 <scalbn+0x6e>
 8015c50:	a31b      	add	r3, pc, #108	@ (adr r3, 8015cc0 <scalbn+0xc8>)
 8015c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c56:	4665      	mov	r5, ip
 8015c58:	f363 051e 	bfi	r5, r3, #0, #31
 8015c5c:	4629      	mov	r1, r5
 8015c5e:	481c      	ldr	r0, [pc, #112]	@ (8015cd0 <scalbn+0xd8>)
 8015c60:	f7ea fc3a 	bl	80004d8 <__aeabi_dmul>
 8015c64:	e7e9      	b.n	8015c3a <scalbn+0x42>
 8015c66:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015c6a:	4432      	add	r2, r6
 8015c6c:	428a      	cmp	r2, r1
 8015c6e:	dcef      	bgt.n	8015c50 <scalbn+0x58>
 8015c70:	2a00      	cmp	r2, #0
 8015c72:	dd08      	ble.n	8015c86 <scalbn+0x8e>
 8015c74:	f36f 531e 	bfc	r3, #20, #11
 8015c78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015c7c:	46ac      	mov	ip, r5
 8015c7e:	4658      	mov	r0, fp
 8015c80:	4661      	mov	r1, ip
 8015c82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8015c86:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015c8a:	da09      	bge.n	8015ca0 <scalbn+0xa8>
 8015c8c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8015c90:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8015c94:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8015c98:	480e      	ldr	r0, [pc, #56]	@ (8015cd4 <scalbn+0xdc>)
 8015c9a:	f041 011f 	orr.w	r1, r1, #31
 8015c9e:	e7c1      	b.n	8015c24 <scalbn+0x2c>
 8015ca0:	3236      	adds	r2, #54	@ 0x36
 8015ca2:	f36f 531e 	bfc	r3, #20, #11
 8015ca6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015caa:	4658      	mov	r0, fp
 8015cac:	4629      	mov	r1, r5
 8015cae:	2200      	movs	r2, #0
 8015cb0:	4b09      	ldr	r3, [pc, #36]	@ (8015cd8 <scalbn+0xe0>)
 8015cb2:	e7d5      	b.n	8015c60 <scalbn+0x68>
 8015cb4:	f3af 8000 	nop.w
 8015cb8:	c2f8f359 	.word	0xc2f8f359
 8015cbc:	01a56e1f 	.word	0x01a56e1f
 8015cc0:	8800759c 	.word	0x8800759c
 8015cc4:	7e37e43c 	.word	0x7e37e43c
 8015cc8:	43500000 	.word	0x43500000
 8015ccc:	ffff3cb0 	.word	0xffff3cb0
 8015cd0:	8800759c 	.word	0x8800759c
 8015cd4:	c2f8f359 	.word	0xc2f8f359
 8015cd8:	3c900000 	.word	0x3c900000

08015cdc <with_errno>:
 8015cdc:	b570      	push	{r4, r5, r6, lr}
 8015cde:	4604      	mov	r4, r0
 8015ce0:	460d      	mov	r5, r1
 8015ce2:	4616      	mov	r6, r2
 8015ce4:	f7fe fe20 	bl	8014928 <__errno>
 8015ce8:	4629      	mov	r1, r5
 8015cea:	6006      	str	r6, [r0, #0]
 8015cec:	4620      	mov	r0, r4
 8015cee:	bd70      	pop	{r4, r5, r6, pc}

08015cf0 <xflow>:
 8015cf0:	b513      	push	{r0, r1, r4, lr}
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	4610      	mov	r0, r2
 8015cf8:	b10c      	cbz	r4, 8015cfe <xflow+0xe>
 8015cfa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8015cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8015d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015d06:	f7ea fbe7 	bl	80004d8 <__aeabi_dmul>
 8015d0a:	2222      	movs	r2, #34	@ 0x22
 8015d0c:	b002      	add	sp, #8
 8015d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d12:	f7ff bfe3 	b.w	8015cdc <with_errno>

08015d16 <__math_uflow>:
 8015d16:	2200      	movs	r2, #0
 8015d18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8015d1c:	f7ff bfe8 	b.w	8015cf0 <xflow>

08015d20 <__math_oflow>:
 8015d20:	2200      	movs	r2, #0
 8015d22:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8015d26:	f7ff bfe3 	b.w	8015cf0 <xflow>
	...

08015d2c <__ieee754_sqrt>:
 8015d2c:	4a65      	ldr	r2, [pc, #404]	@ (8015ec4 <__ieee754_sqrt+0x198>)
 8015d2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d32:	438a      	bics	r2, r1
 8015d34:	4606      	mov	r6, r0
 8015d36:	460f      	mov	r7, r1
 8015d38:	460b      	mov	r3, r1
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	d10e      	bne.n	8015d5c <__ieee754_sqrt+0x30>
 8015d3e:	4602      	mov	r2, r0
 8015d40:	f7ea fbca 	bl	80004d8 <__aeabi_dmul>
 8015d44:	4602      	mov	r2, r0
 8015d46:	460b      	mov	r3, r1
 8015d48:	4630      	mov	r0, r6
 8015d4a:	4639      	mov	r1, r7
 8015d4c:	f7ea fa0e 	bl	800016c <__adddf3>
 8015d50:	4606      	mov	r6, r0
 8015d52:	460f      	mov	r7, r1
 8015d54:	4630      	mov	r0, r6
 8015d56:	4639      	mov	r1, r7
 8015d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5c:	2900      	cmp	r1, #0
 8015d5e:	dc0c      	bgt.n	8015d7a <__ieee754_sqrt+0x4e>
 8015d60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8015d64:	4302      	orrs	r2, r0
 8015d66:	d0f5      	beq.n	8015d54 <__ieee754_sqrt+0x28>
 8015d68:	b189      	cbz	r1, 8015d8e <__ieee754_sqrt+0x62>
 8015d6a:	4602      	mov	r2, r0
 8015d6c:	f7ea f9fc 	bl	8000168 <__aeabi_dsub>
 8015d70:	4602      	mov	r2, r0
 8015d72:	460b      	mov	r3, r1
 8015d74:	f7ea fcda 	bl	800072c <__aeabi_ddiv>
 8015d78:	e7ea      	b.n	8015d50 <__ieee754_sqrt+0x24>
 8015d7a:	150a      	asrs	r2, r1, #20
 8015d7c:	d115      	bne.n	8015daa <__ieee754_sqrt+0x7e>
 8015d7e:	2100      	movs	r1, #0
 8015d80:	e009      	b.n	8015d96 <__ieee754_sqrt+0x6a>
 8015d82:	0ae3      	lsrs	r3, r4, #11
 8015d84:	3a15      	subs	r2, #21
 8015d86:	0564      	lsls	r4, r4, #21
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d0fa      	beq.n	8015d82 <__ieee754_sqrt+0x56>
 8015d8c:	e7f7      	b.n	8015d7e <__ieee754_sqrt+0x52>
 8015d8e:	460a      	mov	r2, r1
 8015d90:	e7fa      	b.n	8015d88 <__ieee754_sqrt+0x5c>
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	3101      	adds	r1, #1
 8015d96:	02d8      	lsls	r0, r3, #11
 8015d98:	d5fb      	bpl.n	8015d92 <__ieee754_sqrt+0x66>
 8015d9a:	1e48      	subs	r0, r1, #1
 8015d9c:	1a12      	subs	r2, r2, r0
 8015d9e:	f1c1 0020 	rsb	r0, r1, #32
 8015da2:	fa24 f000 	lsr.w	r0, r4, r0
 8015da6:	4303      	orrs	r3, r0
 8015da8:	408c      	lsls	r4, r1
 8015daa:	2700      	movs	r7, #0
 8015dac:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8015db0:	2116      	movs	r1, #22
 8015db2:	07d2      	lsls	r2, r2, #31
 8015db4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8015db8:	463a      	mov	r2, r7
 8015dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015dc2:	bf5c      	itt	pl
 8015dc4:	005b      	lslpl	r3, r3, #1
 8015dc6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8015dca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015dce:	bf58      	it	pl
 8015dd0:	0064      	lslpl	r4, r4, #1
 8015dd2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8015dd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015dda:	0064      	lsls	r4, r4, #1
 8015ddc:	1815      	adds	r5, r2, r0
 8015dde:	429d      	cmp	r5, r3
 8015de0:	bfde      	ittt	le
 8015de2:	182a      	addle	r2, r5, r0
 8015de4:	1b5b      	suble	r3, r3, r5
 8015de6:	183f      	addle	r7, r7, r0
 8015de8:	0fe5      	lsrs	r5, r4, #31
 8015dea:	3901      	subs	r1, #1
 8015dec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015df0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8015df4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8015df8:	d1f0      	bne.n	8015ddc <__ieee754_sqrt+0xb0>
 8015dfa:	460d      	mov	r5, r1
 8015dfc:	2620      	movs	r6, #32
 8015dfe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8015e02:	4293      	cmp	r3, r2
 8015e04:	eb00 0c01 	add.w	ip, r0, r1
 8015e08:	dc02      	bgt.n	8015e10 <__ieee754_sqrt+0xe4>
 8015e0a:	d113      	bne.n	8015e34 <__ieee754_sqrt+0x108>
 8015e0c:	45a4      	cmp	ip, r4
 8015e0e:	d811      	bhi.n	8015e34 <__ieee754_sqrt+0x108>
 8015e10:	f1bc 0f00 	cmp.w	ip, #0
 8015e14:	eb0c 0100 	add.w	r1, ip, r0
 8015e18:	da3e      	bge.n	8015e98 <__ieee754_sqrt+0x16c>
 8015e1a:	2900      	cmp	r1, #0
 8015e1c:	db3c      	blt.n	8015e98 <__ieee754_sqrt+0x16c>
 8015e1e:	f102 0e01 	add.w	lr, r2, #1
 8015e22:	1a9b      	subs	r3, r3, r2
 8015e24:	4672      	mov	r2, lr
 8015e26:	45a4      	cmp	ip, r4
 8015e28:	bf88      	it	hi
 8015e2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015e2e:	eba4 040c 	sub.w	r4, r4, ip
 8015e32:	4405      	add	r5, r0
 8015e34:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8015e38:	3e01      	subs	r6, #1
 8015e3a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8015e3e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8015e42:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8015e46:	d1dc      	bne.n	8015e02 <__ieee754_sqrt+0xd6>
 8015e48:	431c      	orrs	r4, r3
 8015e4a:	d01a      	beq.n	8015e82 <__ieee754_sqrt+0x156>
 8015e4c:	4c1e      	ldr	r4, [pc, #120]	@ (8015ec8 <__ieee754_sqrt+0x19c>)
 8015e4e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8015ecc <__ieee754_sqrt+0x1a0>
 8015e52:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015e56:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015e5a:	f7ea f985 	bl	8000168 <__aeabi_dsub>
 8015e5e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8015e62:	4602      	mov	r2, r0
 8015e64:	460b      	mov	r3, r1
 8015e66:	4650      	mov	r0, sl
 8015e68:	4659      	mov	r1, fp
 8015e6a:	f7ea fdb1 	bl	80009d0 <__aeabi_dcmple>
 8015e6e:	b140      	cbz	r0, 8015e82 <__ieee754_sqrt+0x156>
 8015e70:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015e74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015e78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015e7c:	d10e      	bne.n	8015e9c <__ieee754_sqrt+0x170>
 8015e7e:	4635      	mov	r5, r6
 8015e80:	3701      	adds	r7, #1
 8015e82:	107b      	asrs	r3, r7, #1
 8015e84:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8015e88:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8015e8c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8015e90:	086b      	lsrs	r3, r5, #1
 8015e92:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8015e96:	e75b      	b.n	8015d50 <__ieee754_sqrt+0x24>
 8015e98:	4696      	mov	lr, r2
 8015e9a:	e7c2      	b.n	8015e22 <__ieee754_sqrt+0xf6>
 8015e9c:	f7ea f966 	bl	800016c <__adddf3>
 8015ea0:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	460b      	mov	r3, r1
 8015ea8:	4650      	mov	r0, sl
 8015eaa:	4659      	mov	r1, fp
 8015eac:	f7ea fd86 	bl	80009bc <__aeabi_dcmplt>
 8015eb0:	b120      	cbz	r0, 8015ebc <__ieee754_sqrt+0x190>
 8015eb2:	1cab      	adds	r3, r5, #2
 8015eb4:	bf08      	it	eq
 8015eb6:	3701      	addeq	r7, #1
 8015eb8:	3502      	adds	r5, #2
 8015eba:	e7e2      	b.n	8015e82 <__ieee754_sqrt+0x156>
 8015ebc:	1c6b      	adds	r3, r5, #1
 8015ebe:	f023 0501 	bic.w	r5, r3, #1
 8015ec2:	e7de      	b.n	8015e82 <__ieee754_sqrt+0x156>
 8015ec4:	7ff00000 	.word	0x7ff00000
 8015ec8:	08017690 	.word	0x08017690
 8015ecc:	08017688 	.word	0x08017688

08015ed0 <_init>:
 8015ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed2:	bf00      	nop
 8015ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ed6:	bc08      	pop	{r3}
 8015ed8:	469e      	mov	lr, r3
 8015eda:	4770      	bx	lr

08015edc <_fini>:
 8015edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ede:	bf00      	nop
 8015ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ee2:	bc08      	pop	{r3}
 8015ee4:	469e      	mov	lr, r3
 8015ee6:	4770      	bx	lr
